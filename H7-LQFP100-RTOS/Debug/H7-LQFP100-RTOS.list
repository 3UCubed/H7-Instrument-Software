
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137f8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08013a98  08013a98  00023a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013e48  08013e48  00023e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013e50  08013e50  00023e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08013e54  08013e54  00023e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08013e58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004f1c  24000080  08013ed0  00030080  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24004f9c  08013ed0  00034f9c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030ceb  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000053c9  00000000  00000000  00060d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002578  00000000  00000000  00066160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002380  00000000  00000000  000686d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00008b7c  00000000  00000000  0006aa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f389  00000000  00000000  000735d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018d604  00000000  00000000  000a295d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022ff61  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000aac8  00000000  00000000  0022ffb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013a80 	.word	0x08013a80

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08013a80 	.word	0x08013a80

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <queue_init>:

#include "UART_QUEUE.h"
#include <stdlib.h>

// Initialize the queue
void queue_init(uart_queue_t* queue, uint16_t max_size) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	807b      	strh	r3, [r7, #2]
    queue->packets = (packet_t*)malloc(max_size * sizeof(packet_t));
 8000690:	887b      	ldrh	r3, [r7, #2]
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	4618      	mov	r0, r3
 8000696:	f012 f96b 	bl	8012970 <malloc>
 800069a:	4603      	mov	r3, r0
 800069c:	461a      	mov	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	601a      	str	r2, [r3, #0]
    queue->max_size = max_size;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	887a      	ldrh	r2, [r7, #2]
 80006a6:	809a      	strh	r2, [r3, #4]
    queue->head = 0;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	80da      	strh	r2, [r3, #6]
    queue->tail = 0;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	811a      	strh	r2, [r3, #8]
    queue->count = 0;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2200      	movs	r2, #0
 80006b8:	815a      	strh	r2, [r3, #10]
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <queue_enqueue>:
void queue_free(uart_queue_t* queue) {
    free(queue->packets);
}

// Enqueue a packet
bool queue_enqueue(uart_queue_t* queue, const packet_t* packet) {
 80006c2:	b480      	push	{r7}
 80006c4:	b083      	sub	sp, #12
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]
 80006ca:	6039      	str	r1, [r7, #0]
    if (queue->count >= queue->max_size) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	895a      	ldrh	r2, [r3, #10]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	889b      	ldrh	r3, [r3, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d301      	bcc.n	80006dc <queue_enqueue+0x1a>
        // Queue is full
        return false;
 80006d8:	2300      	movs	r3, #0
 80006da:	e01e      	b.n	800071a <queue_enqueue+0x58>
    }
    queue->packets[queue->tail] = *packet;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	891b      	ldrh	r3, [r3, #8]
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	4413      	add	r3, r2
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ee:	e883 0003 	stmia.w	r3, {r0, r1}
    queue->tail = (queue->tail + 1) % queue->max_size;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	891b      	ldrh	r3, [r3, #8]
 80006f6:	3301      	adds	r3, #1
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	8892      	ldrh	r2, [r2, #4]
 80006fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8000700:	fb01 f202 	mul.w	r2, r1, r2
 8000704:	1a9b      	subs	r3, r3, r2
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	811a      	strh	r2, [r3, #8]
    queue->count++;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	895b      	ldrh	r3, [r3, #10]
 8000710:	3301      	adds	r3, #1
 8000712:	b29a      	uxth	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	815a      	strh	r2, [r3, #10]
    return true;
 8000718:	2301      	movs	r3, #1
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr

08000726 <queue_dequeue>:

// Dequeue a packet
bool queue_dequeue(uart_queue_t* queue, packet_t* packet) {
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	6039      	str	r1, [r7, #0]
    if (queue->count == 0) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	895b      	ldrh	r3, [r3, #10]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d101      	bne.n	800073c <queue_dequeue+0x16>
        // Queue is empty
        return false;
 8000738:	2300      	movs	r3, #0
 800073a:	e023      	b.n	8000784 <queue_dequeue+0x5e>
    }
    *packet = queue->packets[queue->head];
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	88db      	ldrh	r3, [r3, #6]
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	441a      	add	r2, r3
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800074e:	e883 0003 	stmia.w	r3, {r0, r1}
    queue->head = (queue->head + 1) % queue->max_size;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	88db      	ldrh	r3, [r3, #6]
 8000756:	3301      	adds	r3, #1
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	8892      	ldrh	r2, [r2, #4]
 800075c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000760:	fb01 f202 	mul.w	r2, r1, r2
 8000764:	1a9b      	subs	r3, r3, r2
 8000766:	b29a      	uxth	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	80da      	strh	r2, [r3, #6]
    queue->count--;
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	895b      	ldrh	r3, [r3, #10]
 8000770:	3b01      	subs	r3, #1
 8000772:	b29a      	uxth	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	815a      	strh	r2, [r3, #10]
    free(packet->array);
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f012 f8ff 	bl	8012980 <free>

    return true;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <queue_is_empty>:

// Check if the queue is empty
bool queue_is_empty(const uart_queue_t* queue) {
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    return queue->count == 0;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	895b      	ldrh	r3, [r3, #10]
 8000798:	2b00      	cmp	r3, #0
 800079a:	bf0c      	ite	eq
 800079c:	2301      	moveq	r3, #1
 800079e:	2300      	movne	r3, #0
 80007a0:	b2db      	uxtb	r3, r3
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
	...

080007b0 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a13      	ldr	r2, [pc, #76]	; (8000808 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d106      	bne.n	80007ce <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2101      	movs	r1, #1
 80007c6:	4618      	mov	r0, r3
 80007c8:	f00f f8e0 	bl	800f98c <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80007cc:	e018      	b.n	8000800 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d106      	bne.n	80007e4 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2102      	movs	r1, #2
 80007dc:	4618      	mov	r0, r3
 80007de:	f00f f8d5 	bl	800f98c <osEventFlagsSet>
}
 80007e2:	e00d      	b.n	8000800 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a0b      	ldr	r2, [pc, #44]	; (8000814 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d106      	bne.n	80007fa <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80007ec:	4b07      	ldr	r3, [pc, #28]	; (800080c <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2104      	movs	r1, #4
 80007f2:	4618      	mov	r0, r3
 80007f4:	f00f f8ca 	bl	800f98c <osEventFlagsSet>
}
 80007f8:	e002      	b.n	8000800 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80007fc:	f012 fa5a 	bl	8012cb4 <puts>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	240003bc 	.word	0x240003bc
 800080c:	2400054c 	.word	0x2400054c
 8000810:	24000408 	.word	0x24000408
 8000814:	24000454 	.word	0x24000454
 8000818:	08013ad8 	.word	0x08013ad8

0800081c <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000824:	2201      	movs	r2, #1
 8000826:	496b      	ldr	r1, [pc, #428]	; (80009d4 <HAL_UART_RxCpltCallback+0x1b8>)
 8000828:	486b      	ldr	r0, [pc, #428]	; (80009d8 <HAL_UART_RxCpltCallback+0x1bc>)
 800082a:	f00c fbe5 	bl	800cff8 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800082e:	4b69      	ldr	r3, [pc, #420]	; (80009d4 <HAL_UART_RxCpltCallback+0x1b8>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	2b25      	cmp	r3, #37	; 0x25
 8000838:	f200 80c8 	bhi.w	80009cc <HAL_UART_RxCpltCallback+0x1b0>
 800083c:	a201      	add	r2, pc, #4	; (adr r2, 8000844 <HAL_UART_RxCpltCallback+0x28>)
 800083e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000842:	bf00      	nop
 8000844:	08000915 	.word	0x08000915
 8000848:	08000925 	.word	0x08000925
 800084c:	08000935 	.word	0x08000935
 8000850:	08000945 	.word	0x08000945
 8000854:	08000955 	.word	0x08000955
 8000858:	08000965 	.word	0x08000965
 800085c:	08000975 	.word	0x08000975
 8000860:	08000985 	.word	0x08000985
 8000864:	080009cd 	.word	0x080009cd
 8000868:	080009cd 	.word	0x080009cd
 800086c:	080008e5 	.word	0x080008e5
 8000870:	080008dd 	.word	0x080008dd
 8000874:	08000995 	.word	0x08000995
 8000878:	0800099d 	.word	0x0800099d
 800087c:	080009ad 	.word	0x080009ad
 8000880:	080009bd 	.word	0x080009bd
 8000884:	080009a5 	.word	0x080009a5
 8000888:	080009b5 	.word	0x080009b5
 800088c:	080009c5 	.word	0x080009c5
 8000890:	0800091d 	.word	0x0800091d
 8000894:	0800092d 	.word	0x0800092d
 8000898:	0800093d 	.word	0x0800093d
 800089c:	0800094d 	.word	0x0800094d
 80008a0:	0800095d 	.word	0x0800095d
 80008a4:	0800096d 	.word	0x0800096d
 80008a8:	0800097d 	.word	0x0800097d
 80008ac:	0800098d 	.word	0x0800098d
 80008b0:	080008ed 	.word	0x080008ed
 80008b4:	080008f5 	.word	0x080008f5
 80008b8:	080008fd 	.word	0x080008fd
 80008bc:	080009cd 	.word	0x080009cd
 80008c0:	080009cd 	.word	0x080009cd
 80008c4:	080009cd 	.word	0x080009cd
 80008c8:	080009cd 	.word	0x080009cd
 80008cc:	080009cd 	.word	0x080009cd
 80008d0:	080009cd 	.word	0x080009cd
 80008d4:	08000905 	.word	0x08000905
 80008d8:	0800090d 	.word	0x0800090d
	case 0x0B: {
		printf("SDN1 ON\n");
 80008dc:	483f      	ldr	r0, [pc, #252]	; (80009dc <HAL_UART_RxCpltCallback+0x1c0>)
 80008de:	f012 f9e9 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
		break;
 80008e2:	e073      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 80008e4:	483e      	ldr	r0, [pc, #248]	; (80009e0 <HAL_UART_RxCpltCallback+0x1c4>)
 80008e6:	f012 f9e5 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
		break;
 80008ea:	e06f      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1B: {
		printf("Step Up\n");
 80008ec:	483d      	ldr	r0, [pc, #244]	; (80009e4 <HAL_UART_RxCpltCallback+0x1c8>)
 80008ee:	f012 f9e1 	bl	8012cb4 <puts>
//		if (step < 17) {
//			step+=2;
//		}
		break;
 80008f2:	e06b      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1C: {
		printf("Step Down\n");
 80008f4:	483c      	ldr	r0, [pc, #240]	; (80009e8 <HAL_UART_RxCpltCallback+0x1cc>)
 80008f6:	f012 f9dd 	bl	8012cb4 <puts>
//		if (step > 3) {
//			step-=2;
//		}
		break;
 80008fa:	e067      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 80008fc:	483b      	ldr	r0, [pc, #236]	; (80009ec <HAL_UART_RxCpltCallback+0x1d0>)
 80008fe:	f012 f9d9 	bl	8012cb4 <puts>
//			auto_sweep = 0;
//			HAL_TIM_Base_Stop(&htim2);
//
//			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
//		}
		break;
 8000902:	e063      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000904:	483a      	ldr	r0, [pc, #232]	; (80009f0 <HAL_UART_RxCpltCallback+0x1d4>)
 8000906:	f012 f9d5 	bl	8012cb4 <puts>
//		if (cadence <= 50000){
//			cadence *= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 800090a:	e05f      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x25: {
		printf("Factor Down\n");
 800090c:	4839      	ldr	r0, [pc, #228]	; (80009f4 <HAL_UART_RxCpltCallback+0x1d8>)
 800090e:	f012 f9d1 	bl	8012cb4 <puts>
//		if (cadence >= 6250){
//			cadence /= 2;
//			TIM2->ARR = cadence;
//		}
		break;
 8000912:	e05b      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 8000914:	4838      	ldr	r0, [pc, #224]	; (80009f8 <HAL_UART_RxCpltCallback+0x1dc>)
 8000916:	f012 f9cd 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
		break;
 800091a:	e057      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 800091c:	4837      	ldr	r0, [pc, #220]	; (80009fc <HAL_UART_RxCpltCallback+0x1e0>)
 800091e:	f012 f9c9 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
		break;
 8000922:	e053      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 8000924:	4836      	ldr	r0, [pc, #216]	; (8000a00 <HAL_UART_RxCpltCallback+0x1e4>)
 8000926:	f012 f9c5 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
		break;
 800092a:	e04f      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 800092c:	4835      	ldr	r0, [pc, #212]	; (8000a04 <HAL_UART_RxCpltCallback+0x1e8>)
 800092e:	f012 f9c1 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
		break;
 8000932:	e04b      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000934:	4834      	ldr	r0, [pc, #208]	; (8000a08 <HAL_UART_RxCpltCallback+0x1ec>)
 8000936:	f012 f9bd 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
		break;
 800093a:	e047      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 800093c:	4833      	ldr	r0, [pc, #204]	; (8000a0c <HAL_UART_RxCpltCallback+0x1f0>)
 800093e:	f012 f9b9 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
		break;
 8000942:	e043      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000944:	4832      	ldr	r0, [pc, #200]	; (8000a10 <HAL_UART_RxCpltCallback+0x1f4>)
 8000946:	f012 f9b5 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
		break;
 800094a:	e03f      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 800094c:	4831      	ldr	r0, [pc, #196]	; (8000a14 <HAL_UART_RxCpltCallback+0x1f8>)
 800094e:	f012 f9b1 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
		break;
 8000952:	e03b      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 8000954:	4830      	ldr	r0, [pc, #192]	; (8000a18 <HAL_UART_RxCpltCallback+0x1fc>)
 8000956:	f012 f9ad 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
		break;
 800095a:	e037      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 800095c:	482f      	ldr	r0, [pc, #188]	; (8000a1c <HAL_UART_RxCpltCallback+0x200>)
 800095e:	f012 f9a9 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
		break;
 8000962:	e033      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 8000964:	482e      	ldr	r0, [pc, #184]	; (8000a20 <HAL_UART_RxCpltCallback+0x204>)
 8000966:	f012 f9a5 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
		break;
 800096a:	e02f      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 800096c:	482d      	ldr	r0, [pc, #180]	; (8000a24 <HAL_UART_RxCpltCallback+0x208>)
 800096e:	f012 f9a1 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
		break;
 8000972:	e02b      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 8000974:	482c      	ldr	r0, [pc, #176]	; (8000a28 <HAL_UART_RxCpltCallback+0x20c>)
 8000976:	f012 f99d 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
		break;
 800097a:	e027      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 800097c:	482b      	ldr	r0, [pc, #172]	; (8000a2c <HAL_UART_RxCpltCallback+0x210>)
 800097e:	f012 f999 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
		break;
 8000982:	e023      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 8000984:	482a      	ldr	r0, [pc, #168]	; (8000a30 <HAL_UART_RxCpltCallback+0x214>)
 8000986:	f012 f995 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
		break;
 800098a:	e01f      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 800098c:	4829      	ldr	r0, [pc, #164]	; (8000a34 <HAL_UART_RxCpltCallback+0x218>)
 800098e:	f012 f991 	bl	8012cb4 <puts>
//		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
		break;
 8000992:	e01b      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 8000994:	4828      	ldr	r0, [pc, #160]	; (8000a38 <HAL_UART_RxCpltCallback+0x21c>)
 8000996:	f012 f98d 	bl	8012cb4 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 800099a:	e017      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0D: {
		printf("PMT ON\n");
 800099c:	4827      	ldr	r0, [pc, #156]	; (8000a3c <HAL_UART_RxCpltCallback+0x220>)
 800099e:	f012 f989 	bl	8012cb4 <puts>
//		PMT_ON = 1;
//		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
		break;
 80009a2:	e013      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x10: {
		printf("PMT OFF\n");
 80009a4:	4826      	ldr	r0, [pc, #152]	; (8000a40 <HAL_UART_RxCpltCallback+0x224>)
 80009a6:	f012 f985 	bl	8012cb4 <puts>
//		PMT_ON = 0;
//		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
		break;
 80009aa:	e00f      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 80009ac:	4825      	ldr	r0, [pc, #148]	; (8000a44 <HAL_UART_RxCpltCallback+0x228>)
 80009ae:	f012 f981 	bl	8012cb4 <puts>
		//ERPA_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
		break;
 80009b2:	e00b      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 80009b4:	4824      	ldr	r0, [pc, #144]	; (8000a48 <HAL_UART_RxCpltCallback+0x22c>)
 80009b6:	f012 f97d 	bl	8012cb4 <puts>
		//ERPA_ON = 0;
		//HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
		break;
 80009ba:	e007      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x0F: {
		printf("HK ON \n");
 80009bc:	4823      	ldr	r0, [pc, #140]	; (8000a4c <HAL_UART_RxCpltCallback+0x230>)
 80009be:	f012 f979 	bl	8012cb4 <puts>
		//HK_ON = 1;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80009c2:	e003      	b.n	80009cc <HAL_UART_RxCpltCallback+0x1b0>
	}
	case 0x12: {
		printf("HK OFF\n");
 80009c4:	4822      	ldr	r0, [pc, #136]	; (8000a50 <HAL_UART_RxCpltCallback+0x234>)
 80009c6:	f012 f975 	bl	8012cb4 <puts>
		//HK_ON = 0;
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		break;
 80009ca:	bf00      	nop
	}
	}
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2400055c 	.word	0x2400055c
 80009d8:	240004a0 	.word	0x240004a0
 80009dc:	08013af0 	.word	0x08013af0
 80009e0:	08013af8 	.word	0x08013af8
 80009e4:	08013b04 	.word	0x08013b04
 80009e8:	08013b0c 	.word	0x08013b0c
 80009ec:	08013b18 	.word	0x08013b18
 80009f0:	08013b2c 	.word	0x08013b2c
 80009f4:	08013b38 	.word	0x08013b38
 80009f8:	08013b44 	.word	0x08013b44
 80009fc:	08013b50 	.word	0x08013b50
 8000a00:	08013b5c 	.word	0x08013b5c
 8000a04:	08013b68 	.word	0x08013b68
 8000a08:	08013b78 	.word	0x08013b78
 8000a0c:	08013b84 	.word	0x08013b84
 8000a10:	08013b90 	.word	0x08013b90
 8000a14:	08013ba0 	.word	0x08013ba0
 8000a18:	08013bb0 	.word	0x08013bb0
 8000a1c:	08013bbc 	.word	0x08013bbc
 8000a20:	08013bc8 	.word	0x08013bc8
 8000a24:	08013bd4 	.word	0x08013bd4
 8000a28:	08013be0 	.word	0x08013be0
 8000a2c:	08013bec 	.word	0x08013bec
 8000a30:	08013bf8 	.word	0x08013bf8
 8000a34:	08013c04 	.word	0x08013c04
 8000a38:	08013c14 	.word	0x08013c14
 8000a3c:	08013c24 	.word	0x08013c24
 8000a40:	08013c2c 	.word	0x08013c2c
 8000a44:	08013c34 	.word	0x08013c34
 8000a48:	08013c3c 	.word	0x08013c3c
 8000a4c:	08013c48 	.word	0x08013c48
 8000a50:	08013c50 	.word	0x08013c50

08000a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a58:	f001 fea2 	bl	80027a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5c:	f000 f884 	bl	8000b68 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a60:	f000 f900 	bl	8000c64 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a64:	f000 fd9e 	bl	80015a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a68:	f000 fd6c 	bl	8001544 <MX_DMA_Init>
  MX_TIM3_Init();
 8000a6c:	f000 fcd0 	bl	8001410 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000a70:	f000 fd1c 	bl	80014ac <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000a74:	f000 fb10 	bl	8001098 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000a78:	f000 fb4e 	bl	8001118 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000a7c:	f000 fc52 	bl	8001324 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000a80:	f000 fba2 	bl	80011c8 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000a84:	f000 fa44 	bl	8000f10 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000a88:	f000 f91c 	bl	8000cc4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000a8c:	f000 fad2 	bl	8001034 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000a90:	2100      	movs	r1, #0
 8000a92:	4821      	ldr	r0, [pc, #132]	; (8000b18 <main+0xc4>)
 8000a94:	f00a fe6c 	bl	800b770 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4820      	ldr	r0, [pc, #128]	; (8000b1c <main+0xc8>)
 8000a9c:	f00a fe68 	bl	800b770 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	481f      	ldr	r0, [pc, #124]	; (8000b20 <main+0xcc>)
 8000aa4:	f00a fe64 	bl	800b770 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000aa8:	f00e fe3a 	bl	800f720 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000aac:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <main+0xd0>)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	481d      	ldr	r0, [pc, #116]	; (8000b28 <main+0xd4>)
 8000ab2:	f00e fe7f 	bl	800f7b4 <osThreadNew>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a1c      	ldr	r2, [pc, #112]	; (8000b2c <main+0xd8>)
 8000aba:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000abc:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <main+0xdc>)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	481c      	ldr	r0, [pc, #112]	; (8000b34 <main+0xe0>)
 8000ac2:	f00e fe77 	bl	800f7b4 <osThreadNew>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4a1b      	ldr	r2, [pc, #108]	; (8000b38 <main+0xe4>)
 8000aca:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000acc:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <main+0xe8>)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	481b      	ldr	r0, [pc, #108]	; (8000b40 <main+0xec>)
 8000ad2:	f00e fe6f 	bl	800f7b4 <osThreadNew>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a1a      	ldr	r2, [pc, #104]	; (8000b44 <main+0xf0>)
 8000ada:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000adc:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <main+0xf4>)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	481a      	ldr	r0, [pc, #104]	; (8000b4c <main+0xf8>)
 8000ae2:	f00e fe67 	bl	800f7b4 <osThreadNew>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <main+0xfc>)
 8000aea:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000aec:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <main+0x100>)
 8000aee:	2100      	movs	r1, #0
 8000af0:	4819      	ldr	r0, [pc, #100]	; (8000b58 <main+0x104>)
 8000af2:	f00e fe5f 	bl	800f7b4 <osThreadNew>
 8000af6:	4603      	mov	r3, r0
 8000af8:	4a18      	ldr	r2, [pc, #96]	; (8000b5c <main+0x108>)
 8000afa:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f00e ff06 	bl	800f90e <osEventFlagsNew>
 8000b02:	4603      	mov	r3, r0
 8000b04:	4a16      	ldr	r2, [pc, #88]	; (8000b60 <main+0x10c>)
 8000b06:	6013      	str	r3, [r2, #0]
  system_setup();
 8000b08:	f000 fdb6 	bl	8001678 <system_setup>
  printf("Starting kernal...\n");
 8000b0c:	4815      	ldr	r0, [pc, #84]	; (8000b64 <main+0x110>)
 8000b0e:	f012 f8d1 	bl	8012cb4 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b12:	f00e fe29 	bl	800f768 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000b16:	e7fe      	b.n	8000b16 <main+0xc2>
 8000b18:	240003bc 	.word	0x240003bc
 8000b1c:	24000408 	.word	0x24000408
 8000b20:	24000454 	.word	0x24000454
 8000b24:	08013cbc 	.word	0x08013cbc
 8000b28:	08001991 	.word	0x08001991
 8000b2c:	24000534 	.word	0x24000534
 8000b30:	08013ce0 	.word	0x08013ce0
 8000b34:	080019c1 	.word	0x080019c1
 8000b38:	24000538 	.word	0x24000538
 8000b3c:	08013d04 	.word	0x08013d04
 8000b40:	080019f1 	.word	0x080019f1
 8000b44:	2400053c 	.word	0x2400053c
 8000b48:	08013d28 	.word	0x08013d28
 8000b4c:	08001a25 	.word	0x08001a25
 8000b50:	24000540 	.word	0x24000540
 8000b54:	08013d4c 	.word	0x08013d4c
 8000b58:	08001a49 	.word	0x08001a49
 8000b5c:	24000544 	.word	0x24000544
 8000b60:	2400054c 	.word	0x2400054c
 8000b64:	08013c58 	.word	0x08013c58

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b09c      	sub	sp, #112	; 0x70
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	224c      	movs	r2, #76	; 0x4c
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f011 ff18 	bl	80129ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	2220      	movs	r2, #32
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f011 ff12 	bl	80129ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f006 fe83 	bl	8007894 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <SystemClock_Config+0xf4>)
 8000b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b96:	4a31      	ldr	r2, [pc, #196]	; (8000c5c <SystemClock_Config+0xf4>)
 8000b98:	f023 0301 	bic.w	r3, r3, #1
 8000b9c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b9e:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <SystemClock_Config+0xf4>)
 8000ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <SystemClock_Config+0xf8>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bb0:	4a2b      	ldr	r2, [pc, #172]	; (8000c60 <SystemClock_Config+0xf8>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb6:	6193      	str	r3, [r2, #24]
 8000bb8:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <SystemClock_Config+0xf8>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bc4:	bf00      	nop
 8000bc6:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <SystemClock_Config+0xf8>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bd2:	d1f8      	bne.n	8000bc6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bdc:	2340      	movs	r3, #64	; 0x40
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be0:	2302      	movs	r3, #2
 8000be2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be4:	2300      	movs	r3, #0
 8000be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000be8:	2304      	movs	r3, #4
 8000bea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000bec:	2309      	movs	r3, #9
 8000bee:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bfc:	230c      	movs	r3, #12
 8000bfe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000c00:	2302      	movs	r3, #2
 8000c02:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000c04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c08:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f006 fe7a 	bl	8007908 <HAL_RCC_OscConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c1a:	f000 ff65 	bl	8001ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1e:	233f      	movs	r3, #63	; 0x3f
 8000c20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c32:	2340      	movs	r3, #64	; 0x40
 8000c34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c3a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2101      	movs	r1, #1
 8000c44:	4618      	mov	r0, r3
 8000c46:	f007 fab9 	bl	80081bc <HAL_RCC_ClockConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000c50:	f000 ff4a 	bl	8001ae8 <Error_Handler>
  }
}
 8000c54:	bf00      	nop
 8000c56:	3770      	adds	r7, #112	; 0x70
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	58000400 	.word	0x58000400
 8000c60:	58024800 	.word	0x58024800

08000c64 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0b0      	sub	sp, #192	; 0xc0
 8000c68:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	22c0      	movs	r2, #192	; 0xc0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f011 fe9b 	bl	80129ac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c7a:	f04f 0300 	mov.w	r3, #0
 8000c7e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000c82:	2304      	movs	r3, #4
 8000c84:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000c86:	2309      	movs	r3, #9
 8000c88:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c96:	23c0      	movs	r3, #192	; 0xc0
 8000c98:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000c9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000caa:	463b      	mov	r3, r7
 8000cac:	4618      	mov	r0, r3
 8000cae:	f007 fe53 	bl	8008958 <HAL_RCCEx_PeriphCLKConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000cb8:	f000 ff16 	bl	8001ae8 <Error_Handler>
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	37c0      	adds	r7, #192	; 0xc0
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
 8000ce4:	615a      	str	r2, [r3, #20]
 8000ce6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ce8:	4b7c      	ldr	r3, [pc, #496]	; (8000edc <MX_ADC1_Init+0x218>)
 8000cea:	4a7d      	ldr	r2, [pc, #500]	; (8000ee0 <MX_ADC1_Init+0x21c>)
 8000cec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000cee:	4b7b      	ldr	r3, [pc, #492]	; (8000edc <MX_ADC1_Init+0x218>)
 8000cf0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cf4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cf6:	4b79      	ldr	r3, [pc, #484]	; (8000edc <MX_ADC1_Init+0x218>)
 8000cf8:	2208      	movs	r2, #8
 8000cfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cfc:	4b77      	ldr	r3, [pc, #476]	; (8000edc <MX_ADC1_Init+0x218>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d02:	4b76      	ldr	r3, [pc, #472]	; (8000edc <MX_ADC1_Init+0x218>)
 8000d04:	2204      	movs	r2, #4
 8000d06:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d08:	4b74      	ldr	r3, [pc, #464]	; (8000edc <MX_ADC1_Init+0x218>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d0e:	4b73      	ldr	r3, [pc, #460]	; (8000edc <MX_ADC1_Init+0x218>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000d14:	4b71      	ldr	r3, [pc, #452]	; (8000edc <MX_ADC1_Init+0x218>)
 8000d16:	220b      	movs	r2, #11
 8000d18:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d1a:	4b70      	ldr	r3, [pc, #448]	; (8000edc <MX_ADC1_Init+0x218>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d20:	4b6e      	ldr	r3, [pc, #440]	; (8000edc <MX_ADC1_Init+0x218>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d26:	4b6d      	ldr	r3, [pc, #436]	; (8000edc <MX_ADC1_Init+0x218>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000d2c:	4b6b      	ldr	r3, [pc, #428]	; (8000edc <MX_ADC1_Init+0x218>)
 8000d2e:	2203      	movs	r2, #3
 8000d30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d32:	4b6a      	ldr	r3, [pc, #424]	; (8000edc <MX_ADC1_Init+0x218>)
 8000d34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d38:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d3a:	4b68      	ldr	r3, [pc, #416]	; (8000edc <MX_ADC1_Init+0x218>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d40:	4b66      	ldr	r3, [pc, #408]	; (8000edc <MX_ADC1_Init+0x218>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d48:	4864      	ldr	r0, [pc, #400]	; (8000edc <MX_ADC1_Init+0x218>)
 8000d4a:	f001 ffb5 	bl	8002cb8 <HAL_ADC_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d54:	f000 fec8 	bl	8001ae8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	485e      	ldr	r0, [pc, #376]	; (8000edc <MX_ADC1_Init+0x218>)
 8000d64:	f003 f8d0 	bl	8003f08 <HAL_ADCEx_MultiModeConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000d6e:	f000 febb 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d72:	4b5c      	ldr	r3, [pc, #368]	; (8000ee4 <MX_ADC1_Init+0x220>)
 8000d74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d76:	2306      	movs	r3, #6
 8000d78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d7e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d82:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d84:	2304      	movs	r3, #4
 8000d86:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d90:	463b      	mov	r3, r7
 8000d92:	4619      	mov	r1, r3
 8000d94:	4851      	ldr	r0, [pc, #324]	; (8000edc <MX_ADC1_Init+0x218>)
 8000d96:	f002 fa13 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000da0:	f000 fea2 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000da4:	4b50      	ldr	r3, [pc, #320]	; (8000ee8 <MX_ADC1_Init+0x224>)
 8000da6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000da8:	230c      	movs	r3, #12
 8000daa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dac:	463b      	mov	r3, r7
 8000dae:	4619      	mov	r1, r3
 8000db0:	484a      	ldr	r0, [pc, #296]	; (8000edc <MX_ADC1_Init+0x218>)
 8000db2:	f002 fa05 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000dbc:	f000 fe94 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000dc0:	4b4a      	ldr	r3, [pc, #296]	; (8000eec <MX_ADC1_Init+0x228>)
 8000dc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000dc4:	2312      	movs	r3, #18
 8000dc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4843      	ldr	r0, [pc, #268]	; (8000edc <MX_ADC1_Init+0x218>)
 8000dce:	f002 f9f7 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000dd8:	f000 fe86 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ddc:	4b44      	ldr	r3, [pc, #272]	; (8000ef0 <MX_ADC1_Init+0x22c>)
 8000dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000de0:	2318      	movs	r3, #24
 8000de2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	4619      	mov	r1, r3
 8000de8:	483c      	ldr	r0, [pc, #240]	; (8000edc <MX_ADC1_Init+0x218>)
 8000dea:	f002 f9e9 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000df4:	f000 fe78 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000df8:	4b3e      	ldr	r3, [pc, #248]	; (8000ef4 <MX_ADC1_Init+0x230>)
 8000dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e00:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e02:	463b      	mov	r3, r7
 8000e04:	4619      	mov	r1, r3
 8000e06:	4835      	ldr	r0, [pc, #212]	; (8000edc <MX_ADC1_Init+0x218>)
 8000e08:	f002 f9da 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000e12:	f000 fe69 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e16:	4b38      	ldr	r3, [pc, #224]	; (8000ef8 <MX_ADC1_Init+0x234>)
 8000e18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000e1a:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000e1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	4619      	mov	r1, r3
 8000e24:	482d      	ldr	r0, [pc, #180]	; (8000edc <MX_ADC1_Init+0x218>)
 8000e26:	f002 f9cb 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000e30:	f000 fe5a 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e34:	4b31      	ldr	r3, [pc, #196]	; (8000efc <MX_ADC1_Init+0x238>)
 8000e36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000e38:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000e3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4619      	mov	r1, r3
 8000e42:	4826      	ldr	r0, [pc, #152]	; (8000edc <MX_ADC1_Init+0x218>)
 8000e44:	f002 f9bc 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000e4e:	f000 fe4b 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e52:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <MX_ADC1_Init+0x23c>)
 8000e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000e56:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000e5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4619      	mov	r1, r3
 8000e60:	481e      	ldr	r0, [pc, #120]	; (8000edc <MX_ADC1_Init+0x218>)
 8000e62:	f002 f9ad 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000e6c:	f000 fe3c 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_ADC1_Init+0x240>)
 8000e72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000e74:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000e78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4817      	ldr	r0, [pc, #92]	; (8000edc <MX_ADC1_Init+0x218>)
 8000e80:	f002 f99e 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000e8a:	f000 fe2d 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <MX_ADC1_Init+0x244>)
 8000e90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480e      	ldr	r0, [pc, #56]	; (8000edc <MX_ADC1_Init+0x218>)
 8000ea2:	f002 f98d 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000eac:	f000 fe1c 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <MX_ADC1_Init+0x248>)
 8000eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000eb4:	f240 2306 	movw	r3, #518	; 0x206
 8000eb8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000eba:	2307      	movs	r3, #7
 8000ebc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <MX_ADC1_Init+0x218>)
 8000ec4:	f002 f97c 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000ece:	f000 fe0b 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2400009c 	.word	0x2400009c
 8000ee0:	40022000 	.word	0x40022000
 8000ee4:	0c900008 	.word	0x0c900008
 8000ee8:	10c00010 	.word	0x10c00010
 8000eec:	14f00020 	.word	0x14f00020
 8000ef0:	1d500080 	.word	0x1d500080
 8000ef4:	21800100 	.word	0x21800100
 8000ef8:	25b00200 	.word	0x25b00200
 8000efc:	2a000400 	.word	0x2a000400
 8000f00:	2e300800 	.word	0x2e300800
 8000f04:	3ac04000 	.word	0x3ac04000
 8000f08:	3ef08000 	.word	0x3ef08000
 8000f0c:	47520000 	.word	0x47520000

08000f10 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
 8000f24:	615a      	str	r2, [r3, #20]
 8000f26:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f28:	4b3d      	ldr	r3, [pc, #244]	; (8001020 <MX_ADC3_Init+0x110>)
 8000f2a:	4a3e      	ldr	r2, [pc, #248]	; (8001024 <MX_ADC3_Init+0x114>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2e:	4b3c      	ldr	r3, [pc, #240]	; (8001020 <MX_ADC3_Init+0x110>)
 8000f30:	2208      	movs	r2, #8
 8000f32:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f34:	4b3a      	ldr	r3, [pc, #232]	; (8001020 <MX_ADC3_Init+0x110>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3a:	4b39      	ldr	r3, [pc, #228]	; (8001020 <MX_ADC3_Init+0x110>)
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000f40:	4b37      	ldr	r3, [pc, #220]	; (8001020 <MX_ADC3_Init+0x110>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000f46:	4b36      	ldr	r3, [pc, #216]	; (8001020 <MX_ADC3_Init+0x110>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000f4c:	4b34      	ldr	r3, [pc, #208]	; (8001020 <MX_ADC3_Init+0x110>)
 8000f4e:	2204      	movs	r2, #4
 8000f50:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f52:	4b33      	ldr	r3, [pc, #204]	; (8001020 <MX_ADC3_Init+0x110>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f58:	4b31      	ldr	r3, [pc, #196]	; (8001020 <MX_ADC3_Init+0x110>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f5e:	4b30      	ldr	r3, [pc, #192]	; (8001020 <MX_ADC3_Init+0x110>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000f64:	4b2e      	ldr	r3, [pc, #184]	; (8001020 <MX_ADC3_Init+0x110>)
 8000f66:	2203      	movs	r2, #3
 8000f68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f6a:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <MX_ADC3_Init+0x110>)
 8000f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f70:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f72:	4b2b      	ldr	r3, [pc, #172]	; (8001020 <MX_ADC3_Init+0x110>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000f78:	4b29      	ldr	r3, [pc, #164]	; (8001020 <MX_ADC3_Init+0x110>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f80:	4827      	ldr	r0, [pc, #156]	; (8001020 <MX_ADC3_Init+0x110>)
 8000f82:	f001 fe99 	bl	8002cb8 <HAL_ADC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8000f8c:	f000 fdac 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f90:	4b25      	ldr	r3, [pc, #148]	; (8001028 <MX_ADC3_Init+0x118>)
 8000f92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f94:	2306      	movs	r3, #6
 8000f96:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f9c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fa0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	481b      	ldr	r0, [pc, #108]	; (8001020 <MX_ADC3_Init+0x110>)
 8000fb4:	f002 f904 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000fbe:	f000 fd93 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_ADC3_Init+0x11c>)
 8000fc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fc6:	230c      	movs	r3, #12
 8000fc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4814      	ldr	r0, [pc, #80]	; (8001020 <MX_ADC3_Init+0x110>)
 8000fd0:	f002 f8f6 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000fda:	f000 fd85 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fe2:	2312      	movs	r3, #18
 8000fe4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480d      	ldr	r0, [pc, #52]	; (8001020 <MX_ADC3_Init+0x110>)
 8000fec:	f002 f8e8 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8000ff6:	f000 fd77 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <MX_ADC3_Init+0x120>)
 8000ffc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000ffe:	2318      	movs	r3, #24
 8001000:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	4619      	mov	r1, r3
 8001006:	4806      	ldr	r0, [pc, #24]	; (8001020 <MX_ADC3_Init+0x110>)
 8001008:	f002 f8da 	bl	80031c0 <HAL_ADC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 8001012:	f000 fd69 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	24000100 	.word	0x24000100
 8001024:	58026000 	.word	0x58026000
 8001028:	cb840000 	.word	0xcb840000
 800102c:	cfb80000 	.word	0xcfb80000
 8001030:	04300002 	.word	0x04300002

08001034 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	2224      	movs	r2, #36	; 0x24
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f011 fcb3 	bl	80129ac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_DAC1_Init+0x5c>)
 8001048:	4a12      	ldr	r2, [pc, #72]	; (8001094 <MX_DAC1_Init+0x60>)
 800104a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800104c:	4810      	ldr	r0, [pc, #64]	; (8001090 <MX_DAC1_Init+0x5c>)
 800104e:	f003 f919 	bl	8004284 <HAL_DAC_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001058:	f000 fd46 	bl	8001ae8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001060:	230a      	movs	r3, #10
 8001062:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001068:	2301      	movs	r3, #1
 800106a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <MX_DAC1_Init+0x5c>)
 8001078:	f003 f986 	bl	8004388 <HAL_DAC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001082:	f000 fd31 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	24000254 	.word	0x24000254
 8001094:	40007400 	.word	0x40007400

08001098 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <MX_I2C1_Init+0x74>)
 800109e:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <MX_I2C1_Init+0x78>)
 80010a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <MX_I2C1_Init+0x74>)
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <MX_I2C1_Init+0x7c>)
 80010a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <MX_I2C1_Init+0x74>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b4:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_I2C1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010ba:	4b14      	ldr	r3, [pc, #80]	; (800110c <MX_I2C1_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <MX_I2C1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_I2C1_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <MX_I2C1_Init+0x74>)
 80010d4:	f006 faaa 	bl	800762c <HAL_I2C_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010de:	f000 fd03 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010e2:	2100      	movs	r1, #0
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <MX_I2C1_Init+0x74>)
 80010e6:	f006 fb3d 	bl	8007764 <HAL_I2CEx_ConfigAnalogFilter>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010f0:	f000 fcfa 	bl	8001ae8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010f4:	2100      	movs	r1, #0
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_I2C1_Init+0x74>)
 80010f8:	f006 fb7f 	bl	80077fa <HAL_I2CEx_ConfigDigitalFilter>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001102:	f000 fcf1 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	240002e0 	.word	0x240002e0
 8001110:	40005400 	.word	0x40005400
 8001114:	00707cbb 	.word	0x00707cbb

08001118 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <MX_SPI2_Init+0xa8>)
 800111e:	4a29      	ldr	r2, [pc, #164]	; (80011c4 <MX_SPI2_Init+0xac>)
 8001120:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001122:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <MX_SPI2_Init+0xa8>)
 8001124:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001128:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800112a:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <MX_SPI2_Init+0xa8>)
 800112c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001130:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <MX_SPI2_Init+0xa8>)
 8001134:	220f      	movs	r2, #15
 8001136:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001138:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <MX_SPI2_Init+0xa8>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <MX_SPI2_Init+0xa8>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <MX_SPI2_Init+0xa8>)
 8001146:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800114a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <MX_SPI2_Init+0xa8>)
 800114e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001152:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <MX_SPI2_Init+0xa8>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <MX_SPI2_Init+0xa8>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001160:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <MX_SPI2_Init+0xa8>)
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001166:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <MX_SPI2_Init+0xa8>)
 8001168:	2200      	movs	r2, #0
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_SPI2_Init+0xa8>)
 800116e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001172:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <MX_SPI2_Init+0xa8>)
 8001176:	2200      	movs	r2, #0
 8001178:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <MX_SPI2_Init+0xa8>)
 800117c:	2200      	movs	r2, #0
 800117e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001180:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <MX_SPI2_Init+0xa8>)
 8001182:	2200      	movs	r2, #0
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <MX_SPI2_Init+0xa8>)
 8001188:	2200      	movs	r2, #0
 800118a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <MX_SPI2_Init+0xa8>)
 800118e:	2200      	movs	r2, #0
 8001190:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <MX_SPI2_Init+0xa8>)
 8001194:	2200      	movs	r2, #0
 8001196:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <MX_SPI2_Init+0xa8>)
 800119a:	2200      	movs	r2, #0
 800119c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <MX_SPI2_Init+0xa8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <MX_SPI2_Init+0xa8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011aa:	4805      	ldr	r0, [pc, #20]	; (80011c0 <MX_SPI2_Init+0xa8>)
 80011ac:	f00a f8d2 	bl	800b354 <HAL_SPI_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80011b6:	f000 fc97 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	24000334 	.word	0x24000334
 80011c4:	40003800 	.word	0x40003800

080011c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b09a      	sub	sp, #104	; 0x68
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	615a      	str	r2, [r3, #20]
 80011fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	222c      	movs	r2, #44	; 0x2c
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f011 fbd2 	bl	80129ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001208:	4b44      	ldr	r3, [pc, #272]	; (800131c <MX_TIM1_Init+0x154>)
 800120a:	4a45      	ldr	r2, [pc, #276]	; (8001320 <MX_TIM1_Init+0x158>)
 800120c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 800120e:	4b43      	ldr	r3, [pc, #268]	; (800131c <MX_TIM1_Init+0x154>)
 8001210:	227f      	movs	r2, #127	; 0x7f
 8001212:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001214:	4b41      	ldr	r3, [pc, #260]	; (800131c <MX_TIM1_Init+0x154>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800121a:	4b40      	ldr	r3, [pc, #256]	; (800131c <MX_TIM1_Init+0x154>)
 800121c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001220:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001222:	4b3e      	ldr	r3, [pc, #248]	; (800131c <MX_TIM1_Init+0x154>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001228:	4b3c      	ldr	r3, [pc, #240]	; (800131c <MX_TIM1_Init+0x154>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122e:	4b3b      	ldr	r3, [pc, #236]	; (800131c <MX_TIM1_Init+0x154>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001234:	4839      	ldr	r0, [pc, #228]	; (800131c <MX_TIM1_Init+0x154>)
 8001236:	f00a f9cc 	bl	800b5d2 <HAL_TIM_Base_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001240:	f000 fc52 	bl	8001ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001248:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800124a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800124e:	4619      	mov	r1, r3
 8001250:	4832      	ldr	r0, [pc, #200]	; (800131c <MX_TIM1_Init+0x154>)
 8001252:	f00a ff73 	bl	800c13c <HAL_TIM_ConfigClockSource>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800125c:	f000 fc44 	bl	8001ae8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001260:	482e      	ldr	r0, [pc, #184]	; (800131c <MX_TIM1_Init+0x154>)
 8001262:	f00a fbdf 	bl	800ba24 <HAL_TIM_PWM_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800126c:	f000 fc3c 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001274:	2300      	movs	r3, #0
 8001276:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800127c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001280:	4619      	mov	r1, r3
 8001282:	4826      	ldr	r0, [pc, #152]	; (800131c <MX_TIM1_Init+0x154>)
 8001284:	f00b fcb0 	bl	800cbe8 <HAL_TIMEx_MasterConfigSynchronization>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800128e:	f000 fc2b 	bl	8001ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001292:	2360      	movs	r3, #96	; 0x60
 8001294:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001296:	f240 13df 	movw	r3, #479	; 0x1df
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129c:	2300      	movs	r3, #0
 800129e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	4818      	ldr	r0, [pc, #96]	; (800131c <MX_TIM1_Init+0x154>)
 80012ba:	f00a fe2b 	bl	800bf14 <HAL_TIM_PWM_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80012c4:	f000 fc10 	bl	8001ae8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <MX_TIM1_Init+0x154>)
 80012fe:	f00b fd01 	bl	800cd04 <HAL_TIMEx_ConfigBreakDeadTime>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001308:	f000 fbee 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800130c:	4803      	ldr	r0, [pc, #12]	; (800131c <MX_TIM1_Init+0x154>)
 800130e:	f000 fef9 	bl	8002104 <HAL_TIM_MspPostInit>

}
 8001312:	bf00      	nop
 8001314:	3768      	adds	r7, #104	; 0x68
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	240003bc 	.word	0x240003bc
 8001320:	40010000 	.word	0x40010000

08001324 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08e      	sub	sp, #56	; 0x38
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001344:	463b      	mov	r3, r7
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
 8001352:	615a      	str	r2, [r3, #20]
 8001354:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <MX_TIM2_Init+0xe8>)
 8001358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <MX_TIM2_Init+0xe8>)
 8001360:	223f      	movs	r2, #63	; 0x3f
 8001362:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <MX_TIM2_Init+0xe8>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <MX_TIM2_Init+0xe8>)
 800136c:	f640 4234 	movw	r2, #3124	; 0xc34
 8001370:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <MX_TIM2_Init+0xe8>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <MX_TIM2_Init+0xe8>)
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800137e:	4823      	ldr	r0, [pc, #140]	; (800140c <MX_TIM2_Init+0xe8>)
 8001380:	f00a f927 	bl	800b5d2 <HAL_TIM_Base_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800138a:	f000 fbad 	bl	8001ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001394:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001398:	4619      	mov	r1, r3
 800139a:	481c      	ldr	r0, [pc, #112]	; (800140c <MX_TIM2_Init+0xe8>)
 800139c:	f00a fece 	bl	800c13c <HAL_TIM_ConfigClockSource>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80013a6:	f000 fb9f 	bl	8001ae8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013aa:	4818      	ldr	r0, [pc, #96]	; (800140c <MX_TIM2_Init+0xe8>)
 80013ac:	f00a fb3a 	bl	800ba24 <HAL_TIM_PWM_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80013b6:	f000 fb97 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013ba:	2320      	movs	r3, #32
 80013bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c2:	f107 031c 	add.w	r3, r7, #28
 80013c6:	4619      	mov	r1, r3
 80013c8:	4810      	ldr	r0, [pc, #64]	; (800140c <MX_TIM2_Init+0xe8>)
 80013ca:	f00b fc0d 	bl	800cbe8 <HAL_TIMEx_MasterConfigSynchronization>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013d4:	f000 fb88 	bl	8001ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d8:	2360      	movs	r3, #96	; 0x60
 80013da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	220c      	movs	r2, #12
 80013ec:	4619      	mov	r1, r3
 80013ee:	4807      	ldr	r0, [pc, #28]	; (800140c <MX_TIM2_Init+0xe8>)
 80013f0:	f00a fd90 	bl	800bf14 <HAL_TIM_PWM_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80013fa:	f000 fb75 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013fe:	4803      	ldr	r0, [pc, #12]	; (800140c <MX_TIM2_Init+0xe8>)
 8001400:	f000 fe80 	bl	8002104 <HAL_TIM_MspPostInit>

}
 8001404:	bf00      	nop
 8001406:	3738      	adds	r7, #56	; 0x38
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	24000408 	.word	0x24000408

08001410 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001430:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <MX_TIM3_Init+0x98>)
 8001432:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001436:	223f      	movs	r2, #63	; 0x3f
 8001438:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_TIM3_Init+0x94>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001442:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001446:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <MX_TIM3_Init+0x94>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001454:	4813      	ldr	r0, [pc, #76]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001456:	f00a f8bc 	bl	800b5d2 <HAL_TIM_Base_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001460:	f000 fb42 	bl	8001ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001468:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4619      	mov	r1, r3
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <MX_TIM3_Init+0x94>)
 8001472:	f00a fe63 	bl	800c13c <HAL_TIM_ConfigClockSource>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800147c:	f000 fb34 	bl	8001ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_TIM3_Init+0x94>)
 800148e:	f00b fbab 	bl	800cbe8 <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001498:	f000 fb26 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	24000454 	.word	0x24000454
 80014a8:	40000400 	.word	0x40000400

080014ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b0:	4b22      	ldr	r3, [pc, #136]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014b2:	4a23      	ldr	r2, [pc, #140]	; (8001540 <MX_USART1_UART_Init+0x94>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80014b6:	4b21      	ldr	r3, [pc, #132]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014b8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80014bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b1c      	ldr	r3, [pc, #112]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014f4:	4811      	ldr	r0, [pc, #68]	; (800153c <MX_USART1_UART_Init+0x90>)
 80014f6:	f00b fca1 	bl	800ce3c <HAL_UART_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001500:	f000 faf2 	bl	8001ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001504:	2100      	movs	r1, #0
 8001506:	480d      	ldr	r0, [pc, #52]	; (800153c <MX_USART1_UART_Init+0x90>)
 8001508:	f00d fffb 	bl	800f502 <HAL_UARTEx_SetTxFifoThreshold>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001512:	f000 fae9 	bl	8001ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001516:	2100      	movs	r1, #0
 8001518:	4808      	ldr	r0, [pc, #32]	; (800153c <MX_USART1_UART_Init+0x90>)
 800151a:	f00e f830 	bl	800f57e <HAL_UARTEx_SetRxFifoThreshold>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001524:	f000 fae0 	bl	8001ae8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_USART1_UART_Init+0x90>)
 800152a:	f00d ffb1 	bl	800f490 <HAL_UARTEx_DisableFifoMode>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001534:	f000 fad8 	bl	8001ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	240004a0 	.word	0x240004a0
 8001540:	40011000 	.word	0x40011000

08001544 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_DMA_Init+0x5c>)
 800154c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001550:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <MX_DMA_Init+0x5c>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_DMA_Init+0x5c>)
 800155c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2105      	movs	r1, #5
 800156c:	200b      	movs	r0, #11
 800156e:	f002 fe61 	bl	8004234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001572:	200b      	movs	r0, #11
 8001574:	f002 fe78 	bl	8004268 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2105      	movs	r1, #5
 800157c:	200c      	movs	r0, #12
 800157e:	f002 fe59 	bl	8004234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001582:	200c      	movs	r0, #12
 8001584:	f002 fe70 	bl	8004268 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2105      	movs	r1, #5
 800158c:	2010      	movs	r0, #16
 800158e:	f002 fe51 	bl	8004234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001592:	2010      	movs	r0, #16
 8001594:	f002 fe68 	bl	8004268 <HAL_NVIC_EnableIRQ>

}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	58024400 	.word	0x58024400

080015a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ba:	4b2c      	ldr	r3, [pc, #176]	; (800166c <MX_GPIO_Init+0xc8>)
 80015bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c0:	4a2a      	ldr	r2, [pc, #168]	; (800166c <MX_GPIO_Init+0xc8>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ca:	4b28      	ldr	r3, [pc, #160]	; (800166c <MX_GPIO_Init+0xc8>)
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	4b24      	ldr	r3, [pc, #144]	; (800166c <MX_GPIO_Init+0xc8>)
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015de:	4a23      	ldr	r2, [pc, #140]	; (800166c <MX_GPIO_Init+0xc8>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <MX_GPIO_Init+0xc8>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <MX_GPIO_Init+0xc8>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fc:	4a1b      	ldr	r2, [pc, #108]	; (800166c <MX_GPIO_Init+0xc8>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <MX_GPIO_Init+0xc8>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	603b      	str	r3, [r7, #0]
 8001612:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001614:	2200      	movs	r2, #0
 8001616:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 800161a:	4815      	ldr	r0, [pc, #84]	; (8001670 <MX_GPIO_Init+0xcc>)
 800161c:	f005 ffec 	bl	80075f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2164      	movs	r1, #100	; 0x64
 8001624:	4813      	ldr	r0, [pc, #76]	; (8001674 <MX_GPIO_Init+0xd0>)
 8001626:	f005 ffe7 	bl	80075f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800162a:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 800162e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4619      	mov	r1, r3
 8001642:	480b      	ldr	r0, [pc, #44]	; (8001670 <MX_GPIO_Init+0xcc>)
 8001644:	f005 fe28 	bl	8007298 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001648:	2364      	movs	r3, #100	; 0x64
 800164a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	4619      	mov	r1, r3
 800165e:	4805      	ldr	r0, [pc, #20]	; (8001674 <MX_GPIO_Init+0xd0>)
 8001660:	f005 fe1a 	bl	8007298 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	58024400 	.word	0x58024400
 8001670:	58020800 	.word	0x58020800
 8001674:	58020400 	.word	0x58020400

08001678 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	  queue_init(&RTS_queue, RTS_QUEUE_MAX_SIZE);
 800167c:	2164      	movs	r1, #100	; 0x64
 800167e:	481d      	ldr	r0, [pc, #116]	; (80016f4 <system_setup+0x7c>)
 8001680:	f7ff f800 	bl	8000684 <queue_init>

	  TIM2->CCR4 = 312;
 8001684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001688:	f44f 729c 	mov.w	r2, #312	; 0x138
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800168e:	210c      	movs	r1, #12
 8001690:	4819      	ldr	r0, [pc, #100]	; (80016f8 <system_setup+0x80>)
 8001692:	f00a fa29 	bl	800bae8 <HAL_TIM_PWM_Start>

	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001696:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800169a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800169e:	4817      	ldr	r0, [pc, #92]	; (80016fc <system_setup+0x84>)
 80016a0:	f002 fbce 	bl	8003e40 <HAL_ADCEx_Calibration_Start>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <system_setup+0x36>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80016aa:	f000 fa1d 	bl	8001ae8 <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80016ae:	220b      	movs	r2, #11
 80016b0:	4913      	ldr	r1, [pc, #76]	; (8001700 <system_setup+0x88>)
 80016b2:	4812      	ldr	r0, [pc, #72]	; (80016fc <system_setup+0x84>)
 80016b4:	f001 fca2 	bl	8002ffc <HAL_ADC_Start_DMA>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <system_setup+0x4a>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80016be:	f000 fa13 	bl	8001ae8 <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80016c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80016c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016ca:	480e      	ldr	r0, [pc, #56]	; (8001704 <system_setup+0x8c>)
 80016cc:	f002 fbb8 	bl	8003e40 <HAL_ADCEx_Calibration_Start>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <system_setup+0x62>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 80016d6:	f000 fa07 	bl	8001ae8 <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80016da:	2204      	movs	r2, #4
 80016dc:	490a      	ldr	r1, [pc, #40]	; (8001708 <system_setup+0x90>)
 80016de:	4809      	ldr	r0, [pc, #36]	; (8001704 <system_setup+0x8c>)
 80016e0:	f001 fc8c 	bl	8002ffc <HAL_ADC_Start_DMA>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <system_setup+0x76>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 80016ea:	f000 f9fd 	bl	8001ae8 <Error_Handler>
	  	}
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	24000550 	.word	0x24000550
 80016f8:	24000408 	.word	0x24000408
 80016fc:	2400009c 	.word	0x2400009c
 8001700:	240005c0 	.word	0x240005c0
 8001704:	24000100 	.word	0x24000100
 8001708:	240005e0 	.word	0x240005e0

0800170c <create_packet>:


packet_t create_packet(const uint8_t* data, uint16_t size) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	4613      	mov	r3, r2
 8001718:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	4618      	mov	r0, r3
 800171e:	f011 f927 	bl	8012970 <malloc>
 8001722:	4603      	mov	r3, r0
 8001724:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	88fa      	ldrh	r2, [r7, #6]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	4618      	mov	r0, r3
 800172e:	f011 f92f 	bl	8012990 <memcpy>
    packet.size = size;
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	461a      	mov	r2, r3
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001742:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08c      	sub	sp, #48	; 0x30
 8001754:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001756:	2026      	movs	r0, #38	; 0x26
 8001758:	f011 f90a 	bl	8012970 <malloc>
 800175c:	4603      	mov	r3, r0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int16_t hk_i2c[4];
	uint16_t hk_adc1[9];
	uint16_t hk_adc3[4];

#ifdef SIMULATE
	hk_i2c[0] = 0x11;
 8001760:	2311      	movs	r3, #17
 8001762:	84bb      	strh	r3, [r7, #36]	; 0x24
	hk_i2c[1] = 0x12;
 8001764:	2312      	movs	r3, #18
 8001766:	84fb      	strh	r3, [r7, #38]	; 0x26
	hk_i2c[2] = 0x13;
 8001768:	2313      	movs	r3, #19
 800176a:	853b      	strh	r3, [r7, #40]	; 0x28
	hk_i2c[3] = 0x14;
 800176c:	2314      	movs	r3, #20
 800176e:	857b      	strh	r3, [r7, #42]	; 0x2a

	hk_adc1[0] = 0xA0;
 8001770:	23a0      	movs	r3, #160	; 0xa0
 8001772:	823b      	strh	r3, [r7, #16]
	hk_adc1[1] = 0xA1;
 8001774:	23a1      	movs	r3, #161	; 0xa1
 8001776:	827b      	strh	r3, [r7, #18]
	hk_adc1[2] = 0xA2;
 8001778:	23a2      	movs	r3, #162	; 0xa2
 800177a:	82bb      	strh	r3, [r7, #20]
	hk_adc1[3] = 0xA3;
 800177c:	23a3      	movs	r3, #163	; 0xa3
 800177e:	82fb      	strh	r3, [r7, #22]
	hk_adc1[4] = 0xA4;
 8001780:	23a4      	movs	r3, #164	; 0xa4
 8001782:	833b      	strh	r3, [r7, #24]
	hk_adc1[5] = 0xA5;
 8001784:	23a5      	movs	r3, #165	; 0xa5
 8001786:	837b      	strh	r3, [r7, #26]
	hk_adc1[6] = 0xA6;
 8001788:	23a6      	movs	r3, #166	; 0xa6
 800178a:	83bb      	strh	r3, [r7, #28]
	hk_adc1[7] = 0xA7;
 800178c:	23a7      	movs	r3, #167	; 0xa7
 800178e:	83fb      	strh	r3, [r7, #30]
	hk_adc1[8] = 0xA8;
 8001790:	23a8      	movs	r3, #168	; 0xa8
 8001792:	843b      	strh	r3, [r7, #32]

	hk_adc3[0] = 0xB0;
 8001794:	23b0      	movs	r3, #176	; 0xb0
 8001796:	813b      	strh	r3, [r7, #8]
	hk_adc3[1] = 0xB1;
 8001798:	23b1      	movs	r3, #177	; 0xb1
 800179a:	817b      	strh	r3, [r7, #10]
	hk_adc3[2] = 0xB2;
 800179c:	23b2      	movs	r3, #178	; 0xb2
 800179e:	81bb      	strh	r3, [r7, #12]
	hk_adc3[3] = 0xB3;
 80017a0:	23b3      	movs	r3, #179	; 0xb3
 80017a2:	81fb      	strh	r3, [r7, #14]
	receive_hk_i2c(hk_i2c);
	receive_hk_adc1(hk_adc1);
	receive_hk_adc3(hk_adc3);
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 80017a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a6:	22cc      	movs	r2, #204	; 0xcc
 80017a8:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 80017aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ac:	3301      	adds	r3, #1
 80017ae:	22cc      	movs	r2, #204	; 0xcc
 80017b0:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 80017b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b4:	3302      	adds	r3, #2
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 80017ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017bc:	3303      	adds	r3, #3
 80017be:	4a72      	ldr	r2, [pc, #456]	; (8001988 <sample_hk+0x238>)
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 80017c4:	897b      	ldrh	r3, [r7, #10]
 80017c6:	0a1b      	lsrs	r3, r3, #8
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017cc:	3304      	adds	r3, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 80017d2:	897a      	ldrh	r2, [r7, #10]
 80017d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d6:	3305      	adds	r3, #5
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 80017dc:	893b      	ldrh	r3, [r7, #8]
 80017de:	0a1b      	lsrs	r3, r3, #8
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	3306      	adds	r3, #6
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 80017ea:	893a      	ldrh	r2, [r7, #8]
 80017ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ee:	3307      	adds	r3, #7
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 80017f4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80017f8:	121a      	asrs	r2, r3, #8
 80017fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fc:	3308      	adds	r3, #8
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8001802:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001808:	3309      	adds	r3, #9
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 800180e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001812:	121a      	asrs	r2, r3, #8
 8001814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001816:	330a      	adds	r3, #10
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 800181c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001822:	330b      	adds	r3, #11
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8001828:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800182c:	121a      	asrs	r2, r3, #8
 800182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001830:	330c      	adds	r3, #12
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8001836:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	330d      	adds	r3, #13
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8001842:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001846:	121a      	asrs	r2, r3, #8
 8001848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184a:	330e      	adds	r3, #14
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8001850:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001856:	330f      	adds	r3, #15
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 800185c:	8a3b      	ldrh	r3, [r7, #16]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	b29a      	uxth	r2, r3
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	3310      	adds	r3, #16
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 800186a:	8a3a      	ldrh	r2, [r7, #16]
 800186c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186e:	3311      	adds	r3, #17
 8001870:	b2d2      	uxtb	r2, r2
 8001872:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8001874:	8a7b      	ldrh	r3, [r7, #18]
 8001876:	0a1b      	lsrs	r3, r3, #8
 8001878:	b29a      	uxth	r2, r3
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	3312      	adds	r3, #18
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8001882:	8a7a      	ldrh	r2, [r7, #18]
 8001884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001886:	3313      	adds	r3, #19
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 800188c:	8abb      	ldrh	r3, [r7, #20]
 800188e:	0a1b      	lsrs	r3, r3, #8
 8001890:	b29a      	uxth	r2, r3
 8001892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001894:	3314      	adds	r3, #20
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 800189a:	8aba      	ldrh	r2, [r7, #20]
 800189c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189e:	3315      	adds	r3, #21
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 80018a4:	8afb      	ldrh	r3, [r7, #22]
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ac:	3316      	adds	r3, #22
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 80018b2:	8afa      	ldrh	r2, [r7, #22]
 80018b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b6:	3317      	adds	r3, #23
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 80018bc:	8bbb      	ldrh	r3, [r7, #28]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c4:	3318      	adds	r3, #24
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 80018ca:	8bba      	ldrh	r2, [r7, #28]
 80018cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ce:	3319      	adds	r3, #25
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 80018d4:	8afb      	ldrh	r3, [r7, #22]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	b29a      	uxth	r2, r3
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	331a      	adds	r3, #26
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 80018e2:	8afa      	ldrh	r2, [r7, #22]
 80018e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e6:	331b      	adds	r3, #27
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 80018ec:	8abb      	ldrh	r3, [r7, #20]
 80018ee:	0a1b      	lsrs	r3, r3, #8
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f4:	331c      	adds	r3, #28
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 80018fa:	8aba      	ldrh	r2, [r7, #20]
 80018fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fe:	331d      	adds	r3, #29
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8001904:	8bfb      	ldrh	r3, [r7, #30]
 8001906:	0a1b      	lsrs	r3, r3, #8
 8001908:	b29a      	uxth	r2, r3
 800190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190c:	331e      	adds	r3, #30
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8001912:	8bfa      	ldrh	r2, [r7, #30]
 8001914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001916:	331f      	adds	r3, #31
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 800191c:	8c3b      	ldrh	r3, [r7, #32]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	b29a      	uxth	r2, r3
 8001922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001924:	3320      	adds	r3, #32
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 800192a:	8c3a      	ldrh	r2, [r7, #32]
 800192c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192e:	3321      	adds	r3, #33	; 0x21
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8001934:	8b3b      	ldrh	r3, [r7, #24]
 8001936:	0a1b      	lsrs	r3, r3, #8
 8001938:	b29a      	uxth	r2, r3
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	3322      	adds	r3, #34	; 0x22
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8001942:	8b3a      	ldrh	r2, [r7, #24]
 8001944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001946:	3323      	adds	r3, #35	; 0x23
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 800194c:	8b7b      	ldrh	r3, [r7, #26]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	b29a      	uxth	r2, r3
 8001952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001954:	3324      	adds	r3, #36	; 0x24
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 800195a:	8b7a      	ldrh	r2, [r7, #26]
 800195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195e:	3325      	adds	r3, #37	; 0x25
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8001964:	463b      	mov	r3, r7
 8001966:	2226      	movs	r2, #38	; 0x26
 8001968:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fece 	bl	800170c <create_packet>
	queue_enqueue(&RTS_queue, &hk_packet);
 8001970:	463b      	mov	r3, r7
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <sample_hk+0x23c>)
 8001976:	f7fe fea4 	bl	80006c2 <queue_enqueue>
	free(buffer);
 800197a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800197c:	f011 f800 	bl	8012980 <free>
}
 8001980:	bf00      	nop
 8001982:	3730      	adds	r7, #48	; 0x30
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2400054a 	.word	0x2400054a
 800198c:	24000550 	.word	0x24000550

08001990 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <PMT_init+0x28>)
 800199a:	6818      	ldr	r0, [r3, #0]
 800199c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019a0:	2200      	movs	r2, #0
 80019a2:	2101      	movs	r1, #1
 80019a4:	f00e f836 	bl	800fa14 <osEventFlagsWait>
	    //sample_pmt();
		pmt_seq++;
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <PMT_init+0x2c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b02      	ldr	r3, [pc, #8]	; (80019bc <PMT_init+0x2c>)
 80019b2:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80019b4:	e7f0      	b.n	8001998 <PMT_init+0x8>
 80019b6:	bf00      	nop
 80019b8:	2400054c 	.word	0x2400054c
 80019bc:	24000548 	.word	0x24000548

080019c0 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <ERPA_init+0x28>)
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019d0:	2200      	movs	r2, #0
 80019d2:	2102      	movs	r1, #2
 80019d4:	f00e f81e 	bl	800fa14 <osEventFlagsWait>
	    //sample_erpa();
		erpa_seq++;
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <ERPA_init+0x2c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3301      	adds	r3, #1
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	4b02      	ldr	r3, [pc, #8]	; (80019ec <ERPA_init+0x2c>)
 80019e2:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80019e4:	e7f0      	b.n	80019c8 <ERPA_init+0x8>
 80019e6:	bf00      	nop
 80019e8:	2400054c 	.word	0x2400054c
 80019ec:	24000549 	.word	0x24000549

080019f0 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HK_init+0x2c>)
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a00:	2200      	movs	r2, #0
 8001a02:	2104      	movs	r1, #4
 8001a04:	f00e f806 	bl	800fa14 <osEventFlagsWait>
	    sample_hk();
 8001a08:	f7ff fea2 	bl	8001750 <sample_hk>
		hk_seq++;
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HK_init+0x30>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b02      	ldr	r3, [pc, #8]	; (8001a20 <HK_init+0x30>)
 8001a16:	701a      	strb	r2, [r3, #0]
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001a18:	e7ee      	b.n	80019f8 <HK_init+0x8>
 8001a1a:	bf00      	nop
 8001a1c:	2400054c 	.word	0x2400054c
 8001a20:	2400054a 	.word	0x2400054a

08001a24 <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4904      	ldr	r1, [pc, #16]	; (8001a40 <UART_RX_init+0x1c>)
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <UART_RX_init+0x20>)
 8001a32:	f00b fae1 	bl	800cff8 <HAL_UART_Receive_IT>
		osDelay(1);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f00d ff4e 	bl	800f8d8 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8001a3c:	e7f6      	b.n	8001a2c <UART_RX_init+0x8>
 8001a3e:	bf00      	nop
 8001a40:	2400055c 	.word	0x2400055c
 8001a44:	240004a0 	.word	0x240004a0

08001a48 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
  /* Infinite loop */
  for(;;)
  {
	    if (!queue_is_empty(&RTS_queue))
 8001a50:	4818      	ldr	r0, [pc, #96]	; (8001ab4 <UART_TX_init+0x6c>)
 8001a52:	f7fe fe9b 	bl	800078c <queue_is_empty>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f083 0301 	eor.w	r3, r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d023      	beq.n	8001aaa <UART_TX_init+0x62>
	    {
			packet_t dequeued_packet;
	    	queue_dequeue(&RTS_queue, &dequeued_packet);
 8001a62:	f107 030c 	add.w	r3, r7, #12
 8001a66:	4619      	mov	r1, r3
 8001a68:	4812      	ldr	r0, [pc, #72]	; (8001ab4 <UART_TX_init+0x6c>)
 8001a6a:	f7fe fe5c 	bl	8000726 <queue_dequeue>
	        printf("Dequeued packet: ");
 8001a6e:	4812      	ldr	r0, [pc, #72]	; (8001ab8 <UART_TX_init+0x70>)
 8001a70:	f011 f884 	bl	8012b7c <iprintf>
	        for (uint16_t i = 0; i < dequeued_packet.size; i++) {
 8001a74:	2300      	movs	r3, #0
 8001a76:	82fb      	strh	r3, [r7, #22]
 8001a78:	e00a      	b.n	8001a90 <UART_TX_init+0x48>
	            printf("%d ", dequeued_packet.array[i]);
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	8afb      	ldrh	r3, [r7, #22]
 8001a7e:	4413      	add	r3, r2
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	4619      	mov	r1, r3
 8001a84:	480d      	ldr	r0, [pc, #52]	; (8001abc <UART_TX_init+0x74>)
 8001a86:	f011 f879 	bl	8012b7c <iprintf>
	        for (uint16_t i = 0; i < dequeued_packet.size; i++) {
 8001a8a:	8afb      	ldrh	r3, [r7, #22]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	82fb      	strh	r3, [r7, #22]
 8001a90:	8a3b      	ldrh	r3, [r7, #16]
 8001a92:	8afa      	ldrh	r2, [r7, #22]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d3f0      	bcc.n	8001a7a <UART_TX_init+0x32>
	        }
	        printf("\n");
 8001a98:	200a      	movs	r0, #10
 8001a9a:	f011 f887 	bl	8012bac <putchar>
	    	HAL_UART_Transmit(&huart1, dequeued_packet.array, sizeof(dequeued_packet.array), 100);
 8001a9e:	68f9      	ldr	r1, [r7, #12]
 8001aa0:	2364      	movs	r3, #100	; 0x64
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <UART_TX_init+0x78>)
 8001aa6:	f00b fa19 	bl	800cedc <HAL_UART_Transmit>
	    }
	    osDelay(1);
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f00d ff14 	bl	800f8d8 <osDelay>
	    if (!queue_is_empty(&RTS_queue))
 8001ab0:	e7ce      	b.n	8001a50 <UART_TX_init+0x8>
 8001ab2:	bf00      	nop
 8001ab4:	24000550 	.word	0x24000550
 8001ab8:	08013c8c 	.word	0x08013c8c
 8001abc:	08013ca0 	.word	0x08013ca0
 8001ac0:	240004a0 	.word	0x240004a0

08001ac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d101      	bne.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ad6:	f000 fe9f 	bl	8002818 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40001000 	.word	0x40001000

08001ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aec:	b672      	cpsid	i
}
 8001aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001af0:	e7fe      	b.n	8001af0 <Error_Handler+0x8>
	...

08001af4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_MspInit+0x38>)
 8001afc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b00:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <HAL_MspInit+0x38>)
 8001b02:	f043 0302 	orr.w	r3, r3, #2
 8001b06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <HAL_MspInit+0x38>)
 8001b0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	f06f 0001 	mvn.w	r0, #1
 8001b20:	f002 fb88 	bl	8004234 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	58024400 	.word	0x58024400

08001b30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08e      	sub	sp, #56	; 0x38
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a7b      	ldr	r2, [pc, #492]	; (8001d3c <HAL_ADC_MspInit+0x20c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	f040 8091 	bne.w	8001c76 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b54:	4b7a      	ldr	r3, [pc, #488]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001b56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b5a:	4a79      	ldr	r2, [pc, #484]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001b5c:	f043 0320 	orr.w	r3, r3, #32
 8001b60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b64:	4b76      	ldr	r3, [pc, #472]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001b66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	623b      	str	r3, [r7, #32]
 8001b70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b72:	4b73      	ldr	r3, [pc, #460]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b78:	4a71      	ldr	r2, [pc, #452]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b82:	4b6f      	ldr	r3, [pc, #444]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b90:	4b6b      	ldr	r3, [pc, #428]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b96:	4a6a      	ldr	r2, [pc, #424]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba0:	4b67      	ldr	r3, [pc, #412]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	4b64      	ldr	r3, [pc, #400]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb4:	4a62      	ldr	r2, [pc, #392]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bbe:	4b60      	ldr	r3, [pc, #384]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001bcc:	2333      	movs	r3, #51	; 0x33
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4859      	ldr	r0, [pc, #356]	; (8001d44 <HAL_ADC_MspInit+0x214>)
 8001be0:	f005 fb5a 	bl	8007298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8001be4:	23ce      	movs	r3, #206	; 0xce
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be8:	2303      	movs	r3, #3
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4854      	ldr	r0, [pc, #336]	; (8001d48 <HAL_ADC_MspInit+0x218>)
 8001bf8:	f005 fb4e 	bl	8007298 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c00:	2303      	movs	r3, #3
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	484f      	ldr	r0, [pc, #316]	; (8001d4c <HAL_ADC_MspInit+0x21c>)
 8001c10:	f005 fb42 	bl	8007298 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001c14:	4b4e      	ldr	r3, [pc, #312]	; (8001d50 <HAL_ADC_MspInit+0x220>)
 8001c16:	4a4f      	ldr	r2, [pc, #316]	; (8001d54 <HAL_ADC_MspInit+0x224>)
 8001c18:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001c1a:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <HAL_ADC_MspInit+0x220>)
 8001c1c:	2209      	movs	r2, #9
 8001c1e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c20:	4b4b      	ldr	r3, [pc, #300]	; (8001d50 <HAL_ADC_MspInit+0x220>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c26:	4b4a      	ldr	r3, [pc, #296]	; (8001d50 <HAL_ADC_MspInit+0x220>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c2c:	4b48      	ldr	r3, [pc, #288]	; (8001d50 <HAL_ADC_MspInit+0x220>)
 8001c2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c32:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c34:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <HAL_ADC_MspInit+0x220>)
 8001c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c3a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c3c:	4b44      	ldr	r3, [pc, #272]	; (8001d50 <HAL_ADC_MspInit+0x220>)
 8001c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c42:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c44:	4b42      	ldr	r3, [pc, #264]	; (8001d50 <HAL_ADC_MspInit+0x220>)
 8001c46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c4a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c4c:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <HAL_ADC_MspInit+0x220>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c52:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_ADC_MspInit+0x220>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c58:	483d      	ldr	r0, [pc, #244]	; (8001d50 <HAL_ADC_MspInit+0x220>)
 8001c5a:	f002 fce1 	bl	8004620 <HAL_DMA_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8001c64:	f7ff ff40 	bl	8001ae8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a39      	ldr	r2, [pc, #228]	; (8001d50 <HAL_ADC_MspInit+0x220>)
 8001c6c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c6e:	4a38      	ldr	r2, [pc, #224]	; (8001d50 <HAL_ADC_MspInit+0x220>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001c74:	e05e      	b.n	8001d34 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a37      	ldr	r2, [pc, #220]	; (8001d58 <HAL_ADC_MspInit+0x228>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d159      	bne.n	8001d34 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c80:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c86:	4a2e      	ldr	r2, [pc, #184]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca4:	4a26      	ldr	r2, [pc, #152]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cae:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <HAL_ADC_MspInit+0x210>)
 8001cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001cbc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001cc0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001cc4:	f000 fdd4 	bl	8002870 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001cc8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001ccc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001cd0:	f000 fdce 	bl	8002870 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_ADC_MspInit+0x22c>)
 8001cd6:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <HAL_ADC_MspInit+0x230>)
 8001cd8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_ADC_MspInit+0x22c>)
 8001cdc:	2273      	movs	r2, #115	; 0x73
 8001cde:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_ADC_MspInit+0x22c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_ADC_MspInit+0x22c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_ADC_MspInit+0x22c>)
 8001cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cf4:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_ADC_MspInit+0x22c>)
 8001cf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cfa:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_ADC_MspInit+0x22c>)
 8001cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d02:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_ADC_MspInit+0x22c>)
 8001d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d0a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <HAL_ADC_MspInit+0x22c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_ADC_MspInit+0x22c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001d18:	4810      	ldr	r0, [pc, #64]	; (8001d5c <HAL_ADC_MspInit+0x22c>)
 8001d1a:	f002 fc81 	bl	8004620 <HAL_DMA_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8001d24:	f7ff fee0 	bl	8001ae8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <HAL_ADC_MspInit+0x22c>)
 8001d2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d2e:	4a0b      	ldr	r2, [pc, #44]	; (8001d5c <HAL_ADC_MspInit+0x22c>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d34:	bf00      	nop
 8001d36:	3738      	adds	r7, #56	; 0x38
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40022000 	.word	0x40022000
 8001d40:	58024400 	.word	0x58024400
 8001d44:	58020800 	.word	0x58020800
 8001d48:	58020000 	.word	0x58020000
 8001d4c:	58020400 	.word	0x58020400
 8001d50:	24000164 	.word	0x24000164
 8001d54:	40020010 	.word	0x40020010
 8001d58:	58026000 	.word	0x58026000
 8001d5c:	240001dc 	.word	0x240001dc
 8001d60:	40020028 	.word	0x40020028

08001d64 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a34      	ldr	r2, [pc, #208]	; (8001e54 <HAL_DAC_MspInit+0xf0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d161      	bne.n	8001e4a <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001d86:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <HAL_DAC_MspInit+0xf4>)
 8001d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d8c:	4a32      	ldr	r2, [pc, #200]	; (8001e58 <HAL_DAC_MspInit+0xf4>)
 8001d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d96:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <HAL_DAC_MspInit+0xf4>)
 8001d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da4:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <HAL_DAC_MspInit+0xf4>)
 8001da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001daa:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <HAL_DAC_MspInit+0xf4>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db4:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <HAL_DAC_MspInit+0xf4>)
 8001db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dc2:	2310      	movs	r3, #16
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4821      	ldr	r0, [pc, #132]	; (8001e5c <HAL_DAC_MspInit+0xf8>)
 8001dd6:	f005 fa5f 	bl	8007298 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_DAC_MspInit+0xfc>)
 8001ddc:	4a21      	ldr	r2, [pc, #132]	; (8001e64 <HAL_DAC_MspInit+0x100>)
 8001dde:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <HAL_DAC_MspInit+0xfc>)
 8001de2:	2243      	movs	r2, #67	; 0x43
 8001de4:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <HAL_DAC_MspInit+0xfc>)
 8001de8:	2240      	movs	r2, #64	; 0x40
 8001dea:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <HAL_DAC_MspInit+0xfc>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <HAL_DAC_MspInit+0xfc>)
 8001df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <HAL_DAC_MspInit+0xfc>)
 8001dfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e00:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_DAC_MspInit+0xfc>)
 8001e04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e08:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_DAC_MspInit+0xfc>)
 8001e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e10:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001e12:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <HAL_DAC_MspInit+0xfc>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_DAC_MspInit+0xfc>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001e1e:	4810      	ldr	r0, [pc, #64]	; (8001e60 <HAL_DAC_MspInit+0xfc>)
 8001e20:	f002 fbfe 	bl	8004620 <HAL_DMA_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001e2a:	f7ff fe5d 	bl	8001ae8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a0b      	ldr	r2, [pc, #44]	; (8001e60 <HAL_DAC_MspInit+0xfc>)
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <HAL_DAC_MspInit+0xfc>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2105      	movs	r1, #5
 8001e3e:	2036      	movs	r0, #54	; 0x36
 8001e40:	f002 f9f8 	bl	8004234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e44:	2036      	movs	r0, #54	; 0x36
 8001e46:	f002 fa0f 	bl	8004268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	; 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40007400 	.word	0x40007400
 8001e58:	58024400 	.word	0x58024400
 8001e5c:	58020000 	.word	0x58020000
 8001e60:	24000268 	.word	0x24000268
 8001e64:	40020088 	.word	0x40020088

08001e68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b0ba      	sub	sp, #232	; 0xe8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	22c0      	movs	r2, #192	; 0xc0
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f010 fd8f 	bl	80129ac <memset>
  if(hi2c->Instance==I2C1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a27      	ldr	r2, [pc, #156]	; (8001f30 <HAL_I2C_MspInit+0xc8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d146      	bne.n	8001f26 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e98:	f04f 0208 	mov.w	r2, #8
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eaa:	f107 0310 	add.w	r3, r7, #16
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f006 fd52 	bl	8008958 <HAL_RCCEx_PeriphCLKConfig>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001eba:	f7ff fe15 	bl	8001ae8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_I2C_MspInit+0xcc>)
 8001ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <HAL_I2C_MspInit+0xcc>)
 8001ec6:	f043 0302 	orr.w	r3, r3, #2
 8001eca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_I2C_MspInit+0xcc>)
 8001ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001edc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ee0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee4:	2312      	movs	r3, #18
 8001ee6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f00:	4619      	mov	r1, r3
 8001f02:	480d      	ldr	r0, [pc, #52]	; (8001f38 <HAL_I2C_MspInit+0xd0>)
 8001f04:	f005 f9c8 	bl	8007298 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_I2C_MspInit+0xcc>)
 8001f0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <HAL_I2C_MspInit+0xcc>)
 8001f10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_I2C_MspInit+0xcc>)
 8001f1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f26:	bf00      	nop
 8001f28:	37e8      	adds	r7, #232	; 0xe8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40005400 	.word	0x40005400
 8001f34:	58024400 	.word	0x58024400
 8001f38:	58020400 	.word	0x58020400

08001f3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b0ba      	sub	sp, #232	; 0xe8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f54:	f107 0310 	add.w	r3, r7, #16
 8001f58:	22c0      	movs	r2, #192	; 0xc0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f010 fd25 	bl	80129ac <memset>
  if(hspi->Instance==SPI2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a26      	ldr	r2, [pc, #152]	; (8002000 <HAL_SPI_MspInit+0xc4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d145      	bne.n	8001ff8 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001f6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	4618      	mov	r0, r3
 8001f82:	f006 fce9 	bl	8008958 <HAL_RCCEx_PeriphCLKConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001f8c:	f7ff fdac 	bl	8001ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f90:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <HAL_SPI_MspInit+0xc8>)
 8001f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f96:	4a1b      	ldr	r2, [pc, #108]	; (8002004 <HAL_SPI_MspInit+0xc8>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_SPI_MspInit+0xc8>)
 8001fa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_SPI_MspInit+0xc8>)
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb4:	4a13      	ldr	r2, [pc, #76]	; (8002004 <HAL_SPI_MspInit+0xc8>)
 8001fb6:	f043 0302 	orr.w	r3, r3, #2
 8001fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_SPI_MspInit+0xc8>)
 8001fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001fcc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001fd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fe6:	2305      	movs	r3, #5
 8001fe8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4805      	ldr	r0, [pc, #20]	; (8002008 <HAL_SPI_MspInit+0xcc>)
 8001ff4:	f005 f950 	bl	8007298 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ff8:	bf00      	nop
 8001ffa:	37e8      	adds	r7, #232	; 0xe8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40003800 	.word	0x40003800
 8002004:	58024400 	.word	0x58024400
 8002008:	58020400 	.word	0x58020400

0800200c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a37      	ldr	r2, [pc, #220]	; (80020f8 <HAL_TIM_Base_MspInit+0xec>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d12f      	bne.n	800207e <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800201e:	4b37      	ldr	r3, [pc, #220]	; (80020fc <HAL_TIM_Base_MspInit+0xf0>)
 8002020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002024:	4a35      	ldr	r2, [pc, #212]	; (80020fc <HAL_TIM_Base_MspInit+0xf0>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800202e:	4b33      	ldr	r3, [pc, #204]	; (80020fc <HAL_TIM_Base_MspInit+0xf0>)
 8002030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	2105      	movs	r1, #5
 8002040:	2018      	movs	r0, #24
 8002042:	f002 f8f7 	bl	8004234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002046:	2018      	movs	r0, #24
 8002048:	f002 f90e 	bl	8004268 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2105      	movs	r1, #5
 8002050:	2019      	movs	r0, #25
 8002052:	f002 f8ef 	bl	8004234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002056:	2019      	movs	r0, #25
 8002058:	f002 f906 	bl	8004268 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	2105      	movs	r1, #5
 8002060:	201a      	movs	r0, #26
 8002062:	f002 f8e7 	bl	8004234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002066:	201a      	movs	r0, #26
 8002068:	f002 f8fe 	bl	8004268 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2105      	movs	r1, #5
 8002070:	201b      	movs	r0, #27
 8002072:	f002 f8df 	bl	8004234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002076:	201b      	movs	r0, #27
 8002078:	f002 f8f6 	bl	8004268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800207c:	e038      	b.n	80020f0 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002086:	d117      	bne.n	80020b8 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002088:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <HAL_TIM_Base_MspInit+0xf0>)
 800208a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800208e:	4a1b      	ldr	r2, [pc, #108]	; (80020fc <HAL_TIM_Base_MspInit+0xf0>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002098:	4b18      	ldr	r3, [pc, #96]	; (80020fc <HAL_TIM_Base_MspInit+0xf0>)
 800209a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2105      	movs	r1, #5
 80020aa:	201c      	movs	r0, #28
 80020ac:	f002 f8c2 	bl	8004234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020b0:	201c      	movs	r0, #28
 80020b2:	f002 f8d9 	bl	8004268 <HAL_NVIC_EnableIRQ>
}
 80020b6:	e01b      	b.n	80020f0 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a10      	ldr	r2, [pc, #64]	; (8002100 <HAL_TIM_Base_MspInit+0xf4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d116      	bne.n	80020f0 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_TIM_Base_MspInit+0xf0>)
 80020c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020c8:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <HAL_TIM_Base_MspInit+0xf0>)
 80020ca:	f043 0302 	orr.w	r3, r3, #2
 80020ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_TIM_Base_MspInit+0xf0>)
 80020d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	2105      	movs	r1, #5
 80020e4:	201d      	movs	r0, #29
 80020e6:	f002 f8a5 	bl	8004234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020ea:	201d      	movs	r0, #29
 80020ec:	f002 f8bc 	bl	8004268 <HAL_NVIC_EnableIRQ>
}
 80020f0:	bf00      	nop
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40010000 	.word	0x40010000
 80020fc:	58024400 	.word	0x58024400
 8002100:	40000400 	.word	0x40000400

08002104 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a26      	ldr	r2, [pc, #152]	; (80021bc <HAL_TIM_MspPostInit+0xb8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d120      	bne.n	8002168 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <HAL_TIM_MspPostInit+0xbc>)
 8002128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212c:	4a24      	ldr	r2, [pc, #144]	; (80021c0 <HAL_TIM_MspPostInit+0xbc>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_TIM_MspPostInit+0xbc>)
 8002138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002156:	2301      	movs	r3, #1
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	4619      	mov	r1, r3
 8002160:	4818      	ldr	r0, [pc, #96]	; (80021c4 <HAL_TIM_MspPostInit+0xc0>)
 8002162:	f005 f899 	bl	8007298 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002166:	e024      	b.n	80021b2 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002170:	d11f      	bne.n	80021b2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_TIM_MspPostInit+0xbc>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002178:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <HAL_TIM_MspPostInit+0xbc>)
 800217a:	f043 0302 	orr.w	r3, r3, #2
 800217e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002182:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_TIM_MspPostInit+0xbc>)
 8002184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002190:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021a2:	2301      	movs	r3, #1
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	4806      	ldr	r0, [pc, #24]	; (80021c8 <HAL_TIM_MspPostInit+0xc4>)
 80021ae:	f005 f873 	bl	8007298 <HAL_GPIO_Init>
}
 80021b2:	bf00      	nop
 80021b4:	3728      	adds	r7, #40	; 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40010000 	.word	0x40010000
 80021c0:	58024400 	.word	0x58024400
 80021c4:	58020000 	.word	0x58020000
 80021c8:	58020400 	.word	0x58020400

080021cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b0ba      	sub	sp, #232	; 0xe8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	22c0      	movs	r2, #192	; 0xc0
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f010 fbdd 	bl	80129ac <memset>
  if(huart->Instance==USART1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a2b      	ldr	r2, [pc, #172]	; (80022a4 <HAL_UART_MspInit+0xd8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d14e      	bne.n	800229a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021fc:	f04f 0201 	mov.w	r2, #1
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800220e:	f107 0310 	add.w	r3, r7, #16
 8002212:	4618      	mov	r0, r3
 8002214:	f006 fba0 	bl	8008958 <HAL_RCCEx_PeriphCLKConfig>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800221e:	f7ff fc63 	bl	8001ae8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <HAL_UART_MspInit+0xdc>)
 8002224:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002228:	4a1f      	ldr	r2, [pc, #124]	; (80022a8 <HAL_UART_MspInit+0xdc>)
 800222a:	f043 0310 	orr.w	r3, r3, #16
 800222e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002232:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_UART_MspInit+0xdc>)
 8002234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_UART_MspInit+0xdc>)
 8002242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002246:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <HAL_UART_MspInit+0xdc>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_UART_MspInit+0xdc>)
 8002252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800225e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002262:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	2302      	movs	r3, #2
 8002268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002278:	2307      	movs	r3, #7
 800227a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002282:	4619      	mov	r1, r3
 8002284:	4809      	ldr	r0, [pc, #36]	; (80022ac <HAL_UART_MspInit+0xe0>)
 8002286:	f005 f807 	bl	8007298 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2105      	movs	r1, #5
 800228e:	2025      	movs	r0, #37	; 0x25
 8002290:	f001 ffd0 	bl	8004234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002294:	2025      	movs	r0, #37	; 0x25
 8002296:	f001 ffe7 	bl	8004268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800229a:	bf00      	nop
 800229c:	37e8      	adds	r7, #232	; 0xe8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40011000 	.word	0x40011000
 80022a8:	58024400 	.word	0x58024400
 80022ac:	58020000 	.word	0x58020000

080022b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b090      	sub	sp, #64	; 0x40
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b0f      	cmp	r3, #15
 80022bc:	d827      	bhi.n	800230e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80022be:	2200      	movs	r2, #0
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	2036      	movs	r0, #54	; 0x36
 80022c4:	f001 ffb6 	bl	8004234 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022c8:	2036      	movs	r0, #54	; 0x36
 80022ca:	f001 ffcd 	bl	8004268 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80022ce:	4a29      	ldr	r2, [pc, #164]	; (8002374 <HAL_InitTick+0xc4>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022d4:	4b28      	ldr	r3, [pc, #160]	; (8002378 <HAL_InitTick+0xc8>)
 80022d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022da:	4a27      	ldr	r2, [pc, #156]	; (8002378 <HAL_InitTick+0xc8>)
 80022dc:	f043 0310 	orr.w	r3, r3, #16
 80022e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022e4:	4b24      	ldr	r3, [pc, #144]	; (8002378 <HAL_InitTick+0xc8>)
 80022e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022f2:	f107 0210 	add.w	r2, r7, #16
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f006 fae9 	bl	80088d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002304:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002308:	2b00      	cmp	r3, #0
 800230a:	d106      	bne.n	800231a <HAL_InitTick+0x6a>
 800230c:	e001      	b.n	8002312 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e02b      	b.n	800236a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002312:	f006 fab3 	bl	800887c <HAL_RCC_GetPCLK1Freq>
 8002316:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002318:	e004      	b.n	8002324 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800231a:	f006 faaf 	bl	800887c <HAL_RCC_GetPCLK1Freq>
 800231e:	4603      	mov	r3, r0
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002326:	4a15      	ldr	r2, [pc, #84]	; (800237c <HAL_InitTick+0xcc>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	0c9b      	lsrs	r3, r3, #18
 800232e:	3b01      	subs	r3, #1
 8002330:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002332:	4b13      	ldr	r3, [pc, #76]	; (8002380 <HAL_InitTick+0xd0>)
 8002334:	4a13      	ldr	r2, [pc, #76]	; (8002384 <HAL_InitTick+0xd4>)
 8002336:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_InitTick+0xd0>)
 800233a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800233e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002340:	4a0f      	ldr	r2, [pc, #60]	; (8002380 <HAL_InitTick+0xd0>)
 8002342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002344:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <HAL_InitTick+0xd0>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_InitTick+0xd0>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002352:	480b      	ldr	r0, [pc, #44]	; (8002380 <HAL_InitTick+0xd0>)
 8002354:	f009 f93d 	bl	800b5d2 <HAL_TIM_Base_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d104      	bne.n	8002368 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800235e:	4808      	ldr	r0, [pc, #32]	; (8002380 <HAL_InitTick+0xd0>)
 8002360:	f009 f98e 	bl	800b680 <HAL_TIM_Base_Start_IT>
 8002364:	4603      	mov	r3, r0
 8002366:	e000      	b.n	800236a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
}
 800236a:	4618      	mov	r0, r3
 800236c:	3740      	adds	r7, #64	; 0x40
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	24000008 	.word	0x24000008
 8002378:	58024400 	.word	0x58024400
 800237c:	431bde83 	.word	0x431bde83
 8002380:	240005e8 	.word	0x240005e8
 8002384:	40001000 	.word	0x40001000

08002388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800238c:	e7fe      	b.n	800238c <NMI_Handler+0x4>

0800238e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002392:	e7fe      	b.n	8002392 <HardFault_Handler+0x4>

08002394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <MemManage_Handler+0x4>

0800239a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800239e:	e7fe      	b.n	800239e <BusFault_Handler+0x4>

080023a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <UsageFault_Handler+0x4>

080023a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <DMA1_Stream0_IRQHandler+0x10>)
 80023ba:	f003 fc5b 	bl	8005c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	24000164 	.word	0x24000164

080023c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <DMA1_Stream1_IRQHandler+0x10>)
 80023ce:	f003 fc51 	bl	8005c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	240001dc 	.word	0x240001dc

080023dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <DMA1_Stream5_IRQHandler+0x10>)
 80023e2:	f003 fc47 	bl	8005c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	24000268 	.word	0x24000268

080023f0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <TIM1_BRK_IRQHandler+0x10>)
 80023f6:	f009 fc85 	bl	800bd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	240003bc 	.word	0x240003bc

08002404 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <TIM1_UP_IRQHandler+0x10>)
 800240a:	f009 fc7b 	bl	800bd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	240003bc 	.word	0x240003bc

08002418 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <TIM1_TRG_COM_IRQHandler+0x10>)
 800241e:	f009 fc71 	bl	800bd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	240003bc 	.word	0x240003bc

0800242c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <TIM1_CC_IRQHandler+0x10>)
 8002432:	f009 fc67 	bl	800bd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	240003bc 	.word	0x240003bc

08002440 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <TIM2_IRQHandler+0x10>)
 8002446:	f009 fc5d 	bl	800bd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	24000408 	.word	0x24000408

08002454 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <TIM3_IRQHandler+0x10>)
 800245a:	f009 fc53 	bl	800bd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	24000454 	.word	0x24000454

08002468 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <USART1_IRQHandler+0x10>)
 800246e:	f00a fe0f 	bl	800d090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	240004a0 	.word	0x240004a0

0800247c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002480:	4b06      	ldr	r3, [pc, #24]	; (800249c <TIM6_DAC_IRQHandler+0x20>)
 8002482:	791b      	ldrb	r3, [r3, #4]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800248a:	4804      	ldr	r0, [pc, #16]	; (800249c <TIM6_DAC_IRQHandler+0x20>)
 800248c:	f001 ff1c 	bl	80042c8 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002490:	4803      	ldr	r0, [pc, #12]	; (80024a0 <TIM6_DAC_IRQHandler+0x24>)
 8002492:	f009 fc37 	bl	800bd04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	24000254 	.word	0x24000254
 80024a0:	240005e8 	.word	0x240005e8

080024a4 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <ITM_SendChar+0x48>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a0e      	ldr	r2, [pc, #56]	; (80024ec <ITM_SendChar+0x48>)
 80024b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024b8:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <ITM_SendChar+0x4c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <ITM_SendChar+0x4c>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80024c6:	bf00      	nop
 80024c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f8      	beq.n	80024c8 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80024d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	6013      	str	r3, [r2, #0]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000edfc 	.word	0xe000edfc
 80024f0:	e0000e00 	.word	0xe0000e00

080024f4 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	e00a      	b.n	800251c <_read+0x28>
		*ptr++ = __io_getchar();
 8002506:	f3af 8000 	nop.w
 800250a:	4601      	mov	r1, r0
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	60ba      	str	r2, [r7, #8]
 8002512:	b2ca      	uxtb	r2, r1
 8002514:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	dbf0      	blt.n	8002506 <_read+0x12>
	}

	return len;
 8002524:	687b      	ldr	r3, [r7, #4]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e009      	b.n	8002554 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	60ba      	str	r2, [r7, #8]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ffab 	bl	80024a4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3301      	adds	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	dbf1      	blt.n	8002540 <_write+0x12>
	}
	return len;
 800255c:	687b      	ldr	r3, [r7, #4]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <_close>:

int _close(int file) {
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <_fstat>:

int _fstat(int file, struct stat *st) {
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800258e:	605a      	str	r2, [r3, #4]
	return 0;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <_isatty>:

int _isatty(int file) {
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <_sbrk+0x64>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d102      	bne.n	80025f2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <_sbrk+0x64>)
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <_sbrk+0x68>)
 80025f0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d207      	bcs.n	8002610 <_sbrk+0x40>
		errno = ENOMEM;
 8002600:	f010 f98c 	bl	801291c <__errno>
 8002604:	4603      	mov	r3, r0
 8002606:	220c      	movs	r2, #12
 8002608:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800260e:	e009      	b.n	8002624 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <_sbrk+0x64>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <_sbrk+0x64>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <_sbrk+0x64>)
 8002620:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	24080000 	.word	0x24080000
 8002630:	00000400 	.word	0x00000400
 8002634:	24000634 	.word	0x24000634
 8002638:	24004fa0 	.word	0x24004fa0

0800263c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8002640:	4b37      	ldr	r3, [pc, #220]	; (8002720 <SystemInit+0xe4>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	4a36      	ldr	r2, [pc, #216]	; (8002720 <SystemInit+0xe4>)
 8002648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800264c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002650:	4b34      	ldr	r3, [pc, #208]	; (8002724 <SystemInit+0xe8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	2b06      	cmp	r3, #6
 800265a:	d807      	bhi.n	800266c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800265c:	4b31      	ldr	r3, [pc, #196]	; (8002724 <SystemInit+0xe8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 030f 	bic.w	r3, r3, #15
 8002664:	4a2f      	ldr	r2, [pc, #188]	; (8002724 <SystemInit+0xe8>)
 8002666:	f043 0307 	orr.w	r3, r3, #7
 800266a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 800266c:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <SystemInit+0xec>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a2d      	ldr	r2, [pc, #180]	; (8002728 <SystemInit+0xec>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002678:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <SystemInit+0xec>)
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800267e:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <SystemInit+0xec>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4929      	ldr	r1, [pc, #164]	; (8002728 <SystemInit+0xec>)
 8002684:	4b29      	ldr	r3, [pc, #164]	; (800272c <SystemInit+0xf0>)
 8002686:	4013      	ands	r3, r2
 8002688:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800268a:	4b26      	ldr	r3, [pc, #152]	; (8002724 <SystemInit+0xe8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d007      	beq.n	80026a6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002696:	4b23      	ldr	r3, [pc, #140]	; (8002724 <SystemInit+0xe8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 030f 	bic.w	r3, r3, #15
 800269e:	4a21      	ldr	r2, [pc, #132]	; (8002724 <SystemInit+0xe8>)
 80026a0:	f043 0307 	orr.w	r3, r3, #7
 80026a4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <SystemInit+0xec>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80026ac:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <SystemInit+0xec>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <SystemInit+0xec>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <SystemInit+0xec>)
 80026ba:	4a1d      	ldr	r2, [pc, #116]	; (8002730 <SystemInit+0xf4>)
 80026bc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80026be:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <SystemInit+0xec>)
 80026c0:	4a1c      	ldr	r2, [pc, #112]	; (8002734 <SystemInit+0xf8>)
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <SystemInit+0xec>)
 80026c6:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <SystemInit+0xfc>)
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80026ca:	4b17      	ldr	r3, [pc, #92]	; (8002728 <SystemInit+0xec>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80026d0:	4b15      	ldr	r3, [pc, #84]	; (8002728 <SystemInit+0xec>)
 80026d2:	4a19      	ldr	r2, [pc, #100]	; (8002738 <SystemInit+0xfc>)
 80026d4:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80026d6:	4b14      	ldr	r3, [pc, #80]	; (8002728 <SystemInit+0xec>)
 80026d8:	2200      	movs	r2, #0
 80026da:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <SystemInit+0xec>)
 80026de:	4a16      	ldr	r2, [pc, #88]	; (8002738 <SystemInit+0xfc>)
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <SystemInit+0xec>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <SystemInit+0xec>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0e      	ldr	r2, [pc, #56]	; (8002728 <SystemInit+0xec>)
 80026ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <SystemInit+0xec>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <SystemInit+0x100>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <SystemInit+0x104>)
 8002700:	4013      	ands	r3, r2
 8002702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002706:	d202      	bcs.n	800270e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <SystemInit+0x108>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <SystemInit+0x10c>)
 8002710:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002714:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00
 8002724:	52002000 	.word	0x52002000
 8002728:	58024400 	.word	0x58024400
 800272c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002730:	02020200 	.word	0x02020200
 8002734:	01ff0000 	.word	0x01ff0000
 8002738:	01010280 	.word	0x01010280
 800273c:	5c001000 	.word	0x5c001000
 8002740:	ffff0000 	.word	0xffff0000
 8002744:	51008108 	.word	0x51008108
 8002748:	52004000 	.word	0x52004000

0800274c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800274c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002784 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002750:	f7ff ff74 	bl	800263c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002754:	480c      	ldr	r0, [pc, #48]	; (8002788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002756:	490d      	ldr	r1, [pc, #52]	; (800278c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002758:	4a0d      	ldr	r2, [pc, #52]	; (8002790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800275a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800275c:	e002      	b.n	8002764 <LoopCopyDataInit>

0800275e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800275e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002762:	3304      	adds	r3, #4

08002764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002768:	d3f9      	bcc.n	800275e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800276a:	4a0a      	ldr	r2, [pc, #40]	; (8002794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800276c:	4c0a      	ldr	r4, [pc, #40]	; (8002798 <LoopFillZerobss+0x22>)
  movs r3, #0
 800276e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002770:	e001      	b.n	8002776 <LoopFillZerobss>

08002772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002774:	3204      	adds	r2, #4

08002776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002778:	d3fb      	bcc.n	8002772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800277a:	f010 f8d5 	bl	8012928 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800277e:	f7fe f969 	bl	8000a54 <main>
  bx  lr
 8002782:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002784:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002788:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800278c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8002790:	08013e58 	.word	0x08013e58
  ldr r2, =_sbss
 8002794:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8002798:	24004f9c 	.word	0x24004f9c

0800279c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800279c:	e7fe      	b.n	800279c <ADC3_IRQHandler>
	...

080027a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a6:	2003      	movs	r0, #3
 80027a8:	f001 fd39 	bl	800421e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027ac:	f005 febc 	bl	8008528 <HAL_RCC_GetSysClockFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <HAL_Init+0x68>)
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	4913      	ldr	r1, [pc, #76]	; (800280c <HAL_Init+0x6c>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	f003 031f 	and.w	r3, r3, #31
 80027c4:	fa22 f303 	lsr.w	r3, r2, r3
 80027c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <HAL_Init+0x68>)
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	4a0e      	ldr	r2, [pc, #56]	; (800280c <HAL_Init+0x6c>)
 80027d4:	5cd3      	ldrb	r3, [r2, r3]
 80027d6:	f003 031f 	and.w	r3, r3, #31
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
 80027e0:	4a0b      	ldr	r2, [pc, #44]	; (8002810 <HAL_Init+0x70>)
 80027e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027e4:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <HAL_Init+0x74>)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027ea:	2005      	movs	r0, #5
 80027ec:	f7ff fd60 	bl	80022b0 <HAL_InitTick>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e002      	b.n	8002800 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80027fa:	f7ff f97b 	bl	8001af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	58024400 	.word	0x58024400
 800280c:	08013d70 	.word	0x08013d70
 8002810:	24000004 	.word	0x24000004
 8002814:	24000000 	.word	0x24000000

08002818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_IncTick+0x20>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_IncTick+0x24>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4413      	add	r3, r2
 8002828:	4a04      	ldr	r2, [pc, #16]	; (800283c <HAL_IncTick+0x24>)
 800282a:	6013      	str	r3, [r2, #0]
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	2400000c 	.word	0x2400000c
 800283c:	24000638 	.word	0x24000638

08002840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return uwTick;
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_GetTick+0x14>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	24000638 	.word	0x24000638

08002858 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_GetREVID+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0c1b      	lsrs	r3, r3, #16
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	5c001000 	.word	0x5c001000

08002870 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800287a:	4b07      	ldr	r3, [pc, #28]	; (8002898 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	43db      	mvns	r3, r3
 8002882:	401a      	ands	r2, r3
 8002884:	4904      	ldr	r1, [pc, #16]	; (8002898 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	58000400 	.word	0x58000400

0800289c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	609a      	str	r2, [r3, #8]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	609a      	str	r2, [r3, #8]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3360      	adds	r3, #96	; 0x60
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	430b      	orrs	r3, r1
 8002932:	431a      	orrs	r2, r3
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002938:	bf00      	nop
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	431a      	orrs	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	611a      	str	r2, [r3, #16]
}
 800296a:	bf00      	nop
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002976:	b480      	push	{r7}
 8002978:	b087      	sub	sp, #28
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3360      	adds	r3, #96	; 0x60
 8002986:	461a      	mov	r2, r3
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	431a      	orrs	r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	601a      	str	r2, [r3, #0]
  }
}
 80029a0:	bf00      	nop
 80029a2:	371c      	adds	r7, #28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b087      	sub	sp, #28
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3330      	adds	r3, #48	; 0x30
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	4413      	add	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	211f      	movs	r1, #31
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	401a      	ands	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0e9b      	lsrs	r3, r3, #26
 8002a0a:	f003 011f 	and.w	r1, r3, #31
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a1e:	bf00      	nop
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f023 0203 	bic.w	r2, r3, #3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	60da      	str	r2, [r3, #12]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	3314      	adds	r3, #20
 8002a60:	461a      	mov	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	0e5b      	lsrs	r3, r3, #25
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	4413      	add	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	0d1b      	lsrs	r3, r3, #20
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	2107      	movs	r1, #7
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	401a      	ands	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	0d1b      	lsrs	r3, r3, #20
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	431a      	orrs	r2, r3
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f003 0318 	and.w	r3, r3, #24
 8002aca:	4908      	ldr	r1, [pc, #32]	; (8002aec <LL_ADC_SetChannelSingleDiff+0x44>)
 8002acc:	40d9      	lsrs	r1, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	400b      	ands	r3, r1
 8002ad2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	000fffff 	.word	0x000fffff

08002af0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 031f 	and.w	r3, r3, #31
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	4b04      	ldr	r3, [pc, #16]	; (8002b2c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6093      	str	r3, [r2, #8]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	5fffffc0 	.word	0x5fffffc0

08002b30 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b44:	d101      	bne.n	8002b4a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <LL_ADC_EnableInternalRegulator+0x24>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	6fffffc0 	.word	0x6fffffc0

08002b80 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b94:	d101      	bne.n	8002b9a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <LL_ADC_Enable+0x24>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	f043 0201 	orr.w	r2, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	7fffffc0 	.word	0x7fffffc0

08002bd0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <LL_ADC_Disable+0x24>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	f043 0202 	orr.w	r2, r3, #2
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	7fffffc0 	.word	0x7fffffc0

08002bf8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <LL_ADC_IsEnabled+0x18>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <LL_ADC_IsEnabled+0x1a>
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d101      	bne.n	8002c36 <LL_ADC_IsDisableOngoing+0x18>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <LL_ADC_IsDisableOngoing+0x1a>
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <LL_ADC_REG_StartConversion+0x24>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	f043 0204 	orr.w	r2, r3, #4
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	7fffffc0 	.word	0x7fffffc0

08002c6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d101      	bne.n	8002c84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d101      	bne.n	8002caa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b089      	sub	sp, #36	; 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e18f      	b.n	8002ff2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7fe ff25 	bl	8001b30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff19 	bl	8002b30 <LL_ADC_IsDeepPowerDownEnabled>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff feff 	bl	8002b0c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff34 	bl	8002b80 <LL_ADC_IsInternalRegulatorEnabled>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d114      	bne.n	8002d48 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff ff18 	bl	8002b58 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d28:	4b87      	ldr	r3, [pc, #540]	; (8002f48 <HAL_ADC_Init+0x290>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	4a87      	ldr	r2, [pc, #540]	; (8002f4c <HAL_ADC_Init+0x294>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	3301      	adds	r3, #1
 8002d38:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d3a:	e002      	b.n	8002d42 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1f9      	bne.n	8002d3c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff17 	bl	8002b80 <LL_ADC_IsInternalRegulatorEnabled>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	f043 0210 	orr.w	r2, r3, #16
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	f043 0201 	orr.w	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff77 	bl	8002c6c <LL_ADC_REG_IsConversionOngoing>
 8002d7e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f040 8129 	bne.w	8002fe0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f040 8125 	bne.w	8002fe0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d9e:	f043 0202 	orr.w	r2, r3, #2
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff24 	bl	8002bf8 <LL_ADC_IsEnabled>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d136      	bne.n	8002e24 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a65      	ldr	r2, [pc, #404]	; (8002f50 <HAL_ADC_Init+0x298>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_ADC_Init+0x112>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a63      	ldr	r2, [pc, #396]	; (8002f54 <HAL_ADC_Init+0x29c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d10e      	bne.n	8002de8 <HAL_ADC_Init+0x130>
 8002dca:	4861      	ldr	r0, [pc, #388]	; (8002f50 <HAL_ADC_Init+0x298>)
 8002dcc:	f7ff ff14 	bl	8002bf8 <LL_ADC_IsEnabled>
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	4860      	ldr	r0, [pc, #384]	; (8002f54 <HAL_ADC_Init+0x29c>)
 8002dd4:	f7ff ff10 	bl	8002bf8 <LL_ADC_IsEnabled>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4323      	orrs	r3, r4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e008      	b.n	8002dfa <HAL_ADC_Init+0x142>
 8002de8:	485b      	ldr	r0, [pc, #364]	; (8002f58 <HAL_ADC_Init+0x2a0>)
 8002dea:	f7ff ff05 	bl	8002bf8 <LL_ADC_IsEnabled>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d012      	beq.n	8002e24 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a53      	ldr	r2, [pc, #332]	; (8002f50 <HAL_ADC_Init+0x298>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d004      	beq.n	8002e12 <HAL_ADC_Init+0x15a>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a51      	ldr	r2, [pc, #324]	; (8002f54 <HAL_ADC_Init+0x29c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_Init+0x15e>
 8002e12:	4a52      	ldr	r2, [pc, #328]	; (8002f5c <HAL_ADC_Init+0x2a4>)
 8002e14:	e000      	b.n	8002e18 <HAL_ADC_Init+0x160>
 8002e16:	4a52      	ldr	r2, [pc, #328]	; (8002f60 <HAL_ADC_Init+0x2a8>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	f7ff fd3c 	bl	800289c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002e24:	f7ff fd18 	bl	8002858 <HAL_GetREVID>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d914      	bls.n	8002e5c <HAL_ADC_Init+0x1a4>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d110      	bne.n	8002e5c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7d5b      	ldrb	r3, [r3, #21]
 8002e3e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e44:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e4a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7f1b      	ldrb	r3, [r3, #28]
 8002e50:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e52:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e54:	f043 030c 	orr.w	r3, r3, #12
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	e00d      	b.n	8002e78 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7d5b      	ldrb	r3, [r3, #21]
 8002e60:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e66:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e6c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	7f1b      	ldrb	r3, [r3, #28]
 8002e72:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	7f1b      	ldrb	r3, [r3, #28]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	045b      	lsls	r3, r3, #17
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <HAL_ADC_Init+0x2ac>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	69b9      	ldr	r1, [r7, #24]
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fed2 	bl	8002c6c <LL_ADC_REG_IsConversionOngoing>
 8002ec8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fedf 	bl	8002c92 <LL_ADC_INJ_IsConversionOngoing>
 8002ed4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d15f      	bne.n	8002f9c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d15c      	bne.n	8002f9c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	7d1b      	ldrb	r3, [r3, #20]
 8002ee6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_ADC_Init+0x2b0>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	430b      	orrs	r3, r1
 8002f02:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d130      	bne.n	8002f70 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <HAL_ADC_Init+0x2b4>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f22:	3a01      	subs	r2, #1
 8002f24:	0411      	lsls	r1, r2, #16
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f2a:	4311      	orrs	r1, r2
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f30:	4311      	orrs	r1, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f36:	430a      	orrs	r2, r1
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	611a      	str	r2, [r3, #16]
 8002f44:	e01c      	b.n	8002f80 <HAL_ADC_Init+0x2c8>
 8002f46:	bf00      	nop
 8002f48:	24000000 	.word	0x24000000
 8002f4c:	053e2d63 	.word	0x053e2d63
 8002f50:	40022000 	.word	0x40022000
 8002f54:	40022100 	.word	0x40022100
 8002f58:	58026000 	.word	0x58026000
 8002f5c:	40022300 	.word	0x40022300
 8002f60:	58026300 	.word	0x58026300
 8002f64:	fff0c003 	.word	0xfff0c003
 8002f68:	ffffbffc 	.word	0xffffbffc
 8002f6c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fdec 	bl	8003b74 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d10c      	bne.n	8002fbe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f023 010f 	bic.w	r1, r3, #15
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	1e5a      	subs	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
 8002fbc:	e007      	b.n	8002fce <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 020f 	bic.w	r2, r2, #15
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	f023 0303 	bic.w	r3, r3, #3
 8002fd6:	f043 0201 	orr.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54
 8002fde:	e007      	b.n	8002ff0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	f043 0210 	orr.w	r2, r3, #16
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ff0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3724      	adds	r7, #36	; 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}
 8002ffa:	bf00      	nop

08002ffc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a55      	ldr	r2, [pc, #340]	; (8003164 <HAL_ADC_Start_DMA+0x168>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d004      	beq.n	800301c <HAL_ADC_Start_DMA+0x20>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a54      	ldr	r2, [pc, #336]	; (8003168 <HAL_ADC_Start_DMA+0x16c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d101      	bne.n	8003020 <HAL_ADC_Start_DMA+0x24>
 800301c:	4b53      	ldr	r3, [pc, #332]	; (800316c <HAL_ADC_Start_DMA+0x170>)
 800301e:	e000      	b.n	8003022 <HAL_ADC_Start_DMA+0x26>
 8003020:	4b53      	ldr	r3, [pc, #332]	; (8003170 <HAL_ADC_Start_DMA+0x174>)
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fd64 	bl	8002af0 <LL_ADC_GetMultimode>
 8003028:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fe1c 	bl	8002c6c <LL_ADC_REG_IsConversionOngoing>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	f040 808c 	bne.w	8003154 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_ADC_Start_DMA+0x4e>
 8003046:	2302      	movs	r3, #2
 8003048:	e087      	b.n	800315a <HAL_ADC_Start_DMA+0x15e>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	2b05      	cmp	r3, #5
 800305c:	d002      	beq.n	8003064 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b09      	cmp	r3, #9
 8003062:	d170      	bne.n	8003146 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 fc07 	bl	8003878 <ADC_Enable>
 800306a:	4603      	mov	r3, r0
 800306c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d163      	bne.n	800313c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003078:	4b3e      	ldr	r3, [pc, #248]	; (8003174 <HAL_ADC_Start_DMA+0x178>)
 800307a:	4013      	ands	r3, r2
 800307c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a37      	ldr	r2, [pc, #220]	; (8003168 <HAL_ADC_Start_DMA+0x16c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d002      	beq.n	8003094 <HAL_ADC_Start_DMA+0x98>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	e000      	b.n	8003096 <HAL_ADC_Start_DMA+0x9a>
 8003094:	4b33      	ldr	r3, [pc, #204]	; (8003164 <HAL_ADC_Start_DMA+0x168>)
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	4293      	cmp	r3, r2
 800309c:	d002      	beq.n	80030a4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d105      	bne.n	80030b0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d006      	beq.n	80030ca <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	f023 0206 	bic.w	r2, r3, #6
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	659a      	str	r2, [r3, #88]	; 0x58
 80030c8:	e002      	b.n	80030d0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d4:	4a28      	ldr	r2, [pc, #160]	; (8003178 <HAL_ADC_Start_DMA+0x17c>)
 80030d6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030dc:	4a27      	ldr	r2, [pc, #156]	; (800317c <HAL_ADC_Start_DMA+0x180>)
 80030de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e4:	4a26      	ldr	r2, [pc, #152]	; (8003180 <HAL_ADC_Start_DMA+0x184>)
 80030e6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	221c      	movs	r2, #28
 80030ee:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0210 	orr.w	r2, r2, #16
 8003106:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	4619      	mov	r1, r3
 8003112:	4610      	mov	r0, r2
 8003114:	f7ff fc89 	bl	8002a2a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3340      	adds	r3, #64	; 0x40
 8003122:	4619      	mov	r1, r3
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f001 fdd6 	bl	8004cd8 <HAL_DMA_Start_IT>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fd85 	bl	8002c44 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800313a:	e00d      	b.n	8003158 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003144:	e008      	b.n	8003158 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003152:	e001      	b.n	8003158 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003154:	2302      	movs	r3, #2
 8003156:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003158:	7dfb      	ldrb	r3, [r7, #23]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40022000 	.word	0x40022000
 8003168:	40022100 	.word	0x40022100
 800316c:	40022300 	.word	0x40022300
 8003170:	58026300 	.word	0x58026300
 8003174:	fffff0fe 	.word	0xfffff0fe
 8003178:	08003a4b 	.word	0x08003a4b
 800317c:	08003b23 	.word	0x08003b23
 8003180:	08003b3f 	.word	0x08003b3f

08003184 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031c0:	b590      	push	{r4, r7, lr}
 80031c2:	b0a1      	sub	sp, #132	; 0x84
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a65      	ldr	r2, [pc, #404]	; (8003370 <HAL_ADC_ConfigChannel+0x1b0>)
 80031da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x2a>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e32e      	b.n	8003848 <HAL_ADC_ConfigChannel+0x688>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fd38 	bl	8002c6c <LL_ADC_REG_IsConversionOngoing>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 8313 	bne.w	800382a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	db2c      	blt.n	8003266 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003214:	2b00      	cmp	r3, #0
 8003216:	d108      	bne.n	800322a <HAL_ADC_ConfigChannel+0x6a>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0e9b      	lsrs	r3, r3, #26
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	2201      	movs	r2, #1
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	e016      	b.n	8003258 <HAL_ADC_ConfigChannel+0x98>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800323a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800323c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003242:	2320      	movs	r3, #32
 8003244:	e003      	b.n	800324e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f003 031f 	and.w	r3, r3, #31
 8003252:	2201      	movs	r2, #1
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	69d1      	ldr	r1, [r2, #28]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6812      	ldr	r2, [r2, #0]
 8003262:	430b      	orrs	r3, r1
 8003264:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	f7ff fbad 	bl	80029d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fcf5 	bl	8002c6c <LL_ADC_REG_IsConversionOngoing>
 8003282:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fd02 	bl	8002c92 <LL_ADC_INJ_IsConversionOngoing>
 800328e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003292:	2b00      	cmp	r3, #0
 8003294:	f040 80b8 	bne.w	8003408 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 80b4 	bne.w	8003408 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6819      	ldr	r1, [r3, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	461a      	mov	r2, r3
 80032ae:	f7ff fbcf 	bl	8002a50 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032b2:	4b30      	ldr	r3, [pc, #192]	; (8003374 <HAL_ADC_ConfigChannel+0x1b4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80032ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032be:	d10b      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x118>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	e01d      	b.n	8003314 <HAL_ADC_ConfigChannel+0x154>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10b      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x13e>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	e00a      	b.n	8003314 <HAL_ADC_ConfigChannel+0x154>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b04      	cmp	r3, #4
 800331c:	d02c      	beq.n	8003378 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6919      	ldr	r1, [r3, #16]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800332c:	f7ff faea 	bl	8002904 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6818      	ldr	r0, [r3, #0]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	6919      	ldr	r1, [r3, #16]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	7e5b      	ldrb	r3, [r3, #25]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d102      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x186>
 8003340:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003344:	e000      	b.n	8003348 <HAL_ADC_ConfigChannel+0x188>
 8003346:	2300      	movs	r3, #0
 8003348:	461a      	mov	r2, r3
 800334a:	f7ff fb14 	bl	8002976 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6919      	ldr	r1, [r3, #16]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	7e1b      	ldrb	r3, [r3, #24]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d102      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x1a4>
 800335e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003362:	e000      	b.n	8003366 <HAL_ADC_ConfigChannel+0x1a6>
 8003364:	2300      	movs	r3, #0
 8003366:	461a      	mov	r2, r3
 8003368:	f7ff faec 	bl	8002944 <LL_ADC_SetDataRightShift>
 800336c:	e04c      	b.n	8003408 <HAL_ADC_ConfigChannel+0x248>
 800336e:	bf00      	nop
 8003370:	47ff0000 	.word	0x47ff0000
 8003374:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	069b      	lsls	r3, r3, #26
 8003388:	429a      	cmp	r2, r3
 800338a:	d107      	bne.n	800339c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800339a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	069b      	lsls	r3, r3, #26
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d107      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033be:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	069b      	lsls	r3, r3, #26
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d107      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033e2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	069b      	lsls	r3, r3, #26
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d107      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003406:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fbf3 	bl	8002bf8 <LL_ADC_IsEnabled>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 8211 	bne.w	800383c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6819      	ldr	r1, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	461a      	mov	r2, r3
 8003428:	f7ff fb3e 	bl	8002aa8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	4aa1      	ldr	r2, [pc, #644]	; (80036b8 <HAL_ADC_ConfigChannel+0x4f8>)
 8003432:	4293      	cmp	r3, r2
 8003434:	f040 812e 	bne.w	8003694 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x2a0>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	0e9b      	lsrs	r3, r3, #26
 800344e:	3301      	adds	r3, #1
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	2b09      	cmp	r3, #9
 8003456:	bf94      	ite	ls
 8003458:	2301      	movls	r3, #1
 800345a:	2300      	movhi	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e019      	b.n	8003494 <HAL_ADC_ConfigChannel+0x2d4>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003468:	fa93 f3a3 	rbit	r3, r3
 800346c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800346e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003470:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003478:	2320      	movs	r3, #32
 800347a:	e003      	b.n	8003484 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800347c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	3301      	adds	r3, #1
 8003486:	f003 031f 	and.w	r3, r3, #31
 800348a:	2b09      	cmp	r3, #9
 800348c:	bf94      	ite	ls
 800348e:	2301      	movls	r3, #1
 8003490:	2300      	movhi	r3, #0
 8003492:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003494:	2b00      	cmp	r3, #0
 8003496:	d079      	beq.n	800358c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x2f4>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	0e9b      	lsrs	r3, r3, #26
 80034aa:	3301      	adds	r3, #1
 80034ac:	069b      	lsls	r3, r3, #26
 80034ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b2:	e015      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x320>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80034c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80034c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80034cc:	2320      	movs	r3, #32
 80034ce:	e003      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80034d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	3301      	adds	r3, #1
 80034da:	069b      	lsls	r3, r3, #26
 80034dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x340>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	0e9b      	lsrs	r3, r3, #26
 80034f2:	3301      	adds	r3, #1
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	2101      	movs	r1, #1
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	e017      	b.n	8003530 <HAL_ADC_ConfigChannel+0x370>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003510:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003518:	2320      	movs	r3, #32
 800351a:	e003      	b.n	8003524 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800351c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	3301      	adds	r3, #1
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	2101      	movs	r1, #1
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	ea42 0103 	orr.w	r1, r2, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <HAL_ADC_ConfigChannel+0x396>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	0e9b      	lsrs	r3, r3, #26
 8003546:	3301      	adds	r3, #1
 8003548:	f003 021f 	and.w	r2, r3, #31
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	051b      	lsls	r3, r3, #20
 8003554:	e018      	b.n	8003588 <HAL_ADC_ConfigChannel+0x3c8>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800356e:	2320      	movs	r3, #32
 8003570:	e003      	b.n	800357a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	3301      	adds	r3, #1
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003588:	430b      	orrs	r3, r1
 800358a:	e07e      	b.n	800368a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003594:	2b00      	cmp	r3, #0
 8003596:	d107      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x3e8>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	0e9b      	lsrs	r3, r3, #26
 800359e:	3301      	adds	r3, #1
 80035a0:	069b      	lsls	r3, r3, #26
 80035a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035a6:	e015      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x414>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e003      	b.n	80035cc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	069b      	lsls	r3, r3, #26
 80035d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x434>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	0e9b      	lsrs	r3, r3, #26
 80035e6:	3301      	adds	r3, #1
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	2101      	movs	r1, #1
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	e017      	b.n	8003624 <HAL_ADC_ConfigChannel+0x464>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	61bb      	str	r3, [r7, #24]
  return result;
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800360c:	2320      	movs	r3, #32
 800360e:	e003      	b.n	8003618 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	2101      	movs	r1, #1
 8003620:	fa01 f303 	lsl.w	r3, r1, r3
 8003624:	ea42 0103 	orr.w	r1, r2, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10d      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x490>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	0e9b      	lsrs	r3, r3, #26
 800363a:	3301      	adds	r3, #1
 800363c:	f003 021f 	and.w	r2, r3, #31
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	3b1e      	subs	r3, #30
 8003648:	051b      	lsls	r3, r3, #20
 800364a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800364e:	e01b      	b.n	8003688 <HAL_ADC_ConfigChannel+0x4c8>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	60fb      	str	r3, [r7, #12]
  return result;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003668:	2320      	movs	r3, #32
 800366a:	e003      	b.n	8003674 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	3301      	adds	r3, #1
 8003676:	f003 021f 	and.w	r2, r3, #31
 800367a:	4613      	mov	r3, r2
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	4413      	add	r3, r2
 8003680:	3b1e      	subs	r3, #30
 8003682:	051b      	lsls	r3, r3, #20
 8003684:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003688:	430b      	orrs	r3, r1
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	6892      	ldr	r2, [r2, #8]
 800368e:	4619      	mov	r1, r3
 8003690:	f7ff f9de 	bl	8002a50 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f280 80cf 	bge.w	800383c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a06      	ldr	r2, [pc, #24]	; (80036bc <HAL_ADC_ConfigChannel+0x4fc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_ADC_ConfigChannel+0x4f2>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <HAL_ADC_ConfigChannel+0x500>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10a      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x508>
 80036b2:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <HAL_ADC_ConfigChannel+0x504>)
 80036b4:	e009      	b.n	80036ca <HAL_ADC_ConfigChannel+0x50a>
 80036b6:	bf00      	nop
 80036b8:	47ff0000 	.word	0x47ff0000
 80036bc:	40022000 	.word	0x40022000
 80036c0:	40022100 	.word	0x40022100
 80036c4:	40022300 	.word	0x40022300
 80036c8:	4b61      	ldr	r3, [pc, #388]	; (8003850 <HAL_ADC_ConfigChannel+0x690>)
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff f90c 	bl	80028e8 <LL_ADC_GetCommonPathInternalCh>
 80036d0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a5f      	ldr	r2, [pc, #380]	; (8003854 <HAL_ADC_ConfigChannel+0x694>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_ADC_ConfigChannel+0x526>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a5d      	ldr	r2, [pc, #372]	; (8003858 <HAL_ADC_ConfigChannel+0x698>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d10e      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x544>
 80036e6:	485b      	ldr	r0, [pc, #364]	; (8003854 <HAL_ADC_ConfigChannel+0x694>)
 80036e8:	f7ff fa86 	bl	8002bf8 <LL_ADC_IsEnabled>
 80036ec:	4604      	mov	r4, r0
 80036ee:	485a      	ldr	r0, [pc, #360]	; (8003858 <HAL_ADC_ConfigChannel+0x698>)
 80036f0:	f7ff fa82 	bl	8002bf8 <LL_ADC_IsEnabled>
 80036f4:	4603      	mov	r3, r0
 80036f6:	4323      	orrs	r3, r4
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e008      	b.n	8003716 <HAL_ADC_ConfigChannel+0x556>
 8003704:	4855      	ldr	r0, [pc, #340]	; (800385c <HAL_ADC_ConfigChannel+0x69c>)
 8003706:	f7ff fa77 	bl	8002bf8 <LL_ADC_IsEnabled>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d07d      	beq.n	8003816 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a50      	ldr	r2, [pc, #320]	; (8003860 <HAL_ADC_ConfigChannel+0x6a0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d130      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x5c6>
 8003724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003726:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d12b      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a4a      	ldr	r2, [pc, #296]	; (800385c <HAL_ADC_ConfigChannel+0x69c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	f040 8081 	bne.w	800383c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a45      	ldr	r2, [pc, #276]	; (8003854 <HAL_ADC_ConfigChannel+0x694>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d004      	beq.n	800374e <HAL_ADC_ConfigChannel+0x58e>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a43      	ldr	r2, [pc, #268]	; (8003858 <HAL_ADC_ConfigChannel+0x698>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d101      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x592>
 800374e:	4a45      	ldr	r2, [pc, #276]	; (8003864 <HAL_ADC_ConfigChannel+0x6a4>)
 8003750:	e000      	b.n	8003754 <HAL_ADC_ConfigChannel+0x594>
 8003752:	4a3f      	ldr	r2, [pc, #252]	; (8003850 <HAL_ADC_ConfigChannel+0x690>)
 8003754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003756:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800375a:	4619      	mov	r1, r3
 800375c:	4610      	mov	r0, r2
 800375e:	f7ff f8b0 	bl	80028c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003762:	4b41      	ldr	r3, [pc, #260]	; (8003868 <HAL_ADC_ConfigChannel+0x6a8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	4a40      	ldr	r2, [pc, #256]	; (800386c <HAL_ADC_ConfigChannel+0x6ac>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	099b      	lsrs	r3, r3, #6
 8003770:	3301      	adds	r3, #1
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003776:	e002      	b.n	800377e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	3b01      	subs	r3, #1
 800377c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f9      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003784:	e05a      	b.n	800383c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a39      	ldr	r2, [pc, #228]	; (8003870 <HAL_ADC_ConfigChannel+0x6b0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d11e      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x60e>
 8003790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d119      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a2f      	ldr	r2, [pc, #188]	; (800385c <HAL_ADC_ConfigChannel+0x69c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d14b      	bne.n	800383c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a2a      	ldr	r2, [pc, #168]	; (8003854 <HAL_ADC_ConfigChannel+0x694>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d004      	beq.n	80037b8 <HAL_ADC_ConfigChannel+0x5f8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a29      	ldr	r2, [pc, #164]	; (8003858 <HAL_ADC_ConfigChannel+0x698>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d101      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x5fc>
 80037b8:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <HAL_ADC_ConfigChannel+0x6a4>)
 80037ba:	e000      	b.n	80037be <HAL_ADC_ConfigChannel+0x5fe>
 80037bc:	4a24      	ldr	r2, [pc, #144]	; (8003850 <HAL_ADC_ConfigChannel+0x690>)
 80037be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037c4:	4619      	mov	r1, r3
 80037c6:	4610      	mov	r0, r2
 80037c8:	f7ff f87b 	bl	80028c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037cc:	e036      	b.n	800383c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a28      	ldr	r2, [pc, #160]	; (8003874 <HAL_ADC_ConfigChannel+0x6b4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d131      	bne.n	800383c <HAL_ADC_ConfigChannel+0x67c>
 80037d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d12c      	bne.n	800383c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1d      	ldr	r2, [pc, #116]	; (800385c <HAL_ADC_ConfigChannel+0x69c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d127      	bne.n	800383c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a18      	ldr	r2, [pc, #96]	; (8003854 <HAL_ADC_ConfigChannel+0x694>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_ADC_ConfigChannel+0x640>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a17      	ldr	r2, [pc, #92]	; (8003858 <HAL_ADC_ConfigChannel+0x698>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x644>
 8003800:	4a18      	ldr	r2, [pc, #96]	; (8003864 <HAL_ADC_ConfigChannel+0x6a4>)
 8003802:	e000      	b.n	8003806 <HAL_ADC_ConfigChannel+0x646>
 8003804:	4a12      	ldr	r2, [pc, #72]	; (8003850 <HAL_ADC_ConfigChannel+0x690>)
 8003806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003808:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800380c:	4619      	mov	r1, r3
 800380e:	4610      	mov	r0, r2
 8003810:	f7ff f857 	bl	80028c2 <LL_ADC_SetCommonPathInternalCh>
 8003814:	e012      	b.n	800383c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003828:	e008      	b.n	800383c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382e:	f043 0220 	orr.w	r2, r3, #32
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003844:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003848:	4618      	mov	r0, r3
 800384a:	3784      	adds	r7, #132	; 0x84
 800384c:	46bd      	mov	sp, r7
 800384e:	bd90      	pop	{r4, r7, pc}
 8003850:	58026300 	.word	0x58026300
 8003854:	40022000 	.word	0x40022000
 8003858:	40022100 	.word	0x40022100
 800385c:	58026000 	.word	0x58026000
 8003860:	cb840000 	.word	0xcb840000
 8003864:	40022300 	.word	0x40022300
 8003868:	24000000 	.word	0x24000000
 800386c:	053e2d63 	.word	0x053e2d63
 8003870:	c7520000 	.word	0xc7520000
 8003874:	cfb80000 	.word	0xcfb80000

08003878 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff f9b7 	bl	8002bf8 <LL_ADC_IsEnabled>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d16e      	bne.n	800396e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	4b38      	ldr	r3, [pc, #224]	; (8003978 <ADC_Enable+0x100>)
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	f043 0201 	orr.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e05a      	b.n	8003970 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff f972 	bl	8002ba8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80038c4:	f7fe ffbc 	bl	8002840 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a2b      	ldr	r2, [pc, #172]	; (800397c <ADC_Enable+0x104>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d004      	beq.n	80038de <ADC_Enable+0x66>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a29      	ldr	r2, [pc, #164]	; (8003980 <ADC_Enable+0x108>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <ADC_Enable+0x6a>
 80038de:	4b29      	ldr	r3, [pc, #164]	; (8003984 <ADC_Enable+0x10c>)
 80038e0:	e000      	b.n	80038e4 <ADC_Enable+0x6c>
 80038e2:	4b29      	ldr	r3, [pc, #164]	; (8003988 <ADC_Enable+0x110>)
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff f903 	bl	8002af0 <LL_ADC_GetMultimode>
 80038ea:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a23      	ldr	r2, [pc, #140]	; (8003980 <ADC_Enable+0x108>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d002      	beq.n	80038fc <ADC_Enable+0x84>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	e000      	b.n	80038fe <ADC_Enable+0x86>
 80038fc:	4b1f      	ldr	r3, [pc, #124]	; (800397c <ADC_Enable+0x104>)
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	4293      	cmp	r3, r2
 8003904:	d02c      	beq.n	8003960 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d130      	bne.n	800396e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800390c:	e028      	b.n	8003960 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff f970 	bl	8002bf8 <LL_ADC_IsEnabled>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff f940 	bl	8002ba8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003928:	f7fe ff8a 	bl	8002840 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d914      	bls.n	8003960 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d00d      	beq.n	8003960 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	f043 0210 	orr.w	r2, r3, #16
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003954:	f043 0201 	orr.w	r2, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e007      	b.n	8003970 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b01      	cmp	r3, #1
 800396c:	d1cf      	bne.n	800390e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	8000003f 	.word	0x8000003f
 800397c:	40022000 	.word	0x40022000
 8003980:	40022100 	.word	0x40022100
 8003984:	40022300 	.word	0x40022300
 8003988:	58026300 	.word	0x58026300

0800398c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff f940 	bl	8002c1e <LL_ADC_IsDisableOngoing>
 800399e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff f927 	bl	8002bf8 <LL_ADC_IsEnabled>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d047      	beq.n	8003a40 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d144      	bne.n	8003a40 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030d 	and.w	r3, r3, #13
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d10c      	bne.n	80039de <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff f901 	bl	8002bd0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2203      	movs	r2, #3
 80039d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039d6:	f7fe ff33 	bl	8002840 <HAL_GetTick>
 80039da:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039dc:	e029      	b.n	8003a32 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	f043 0210 	orr.w	r2, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e023      	b.n	8003a42 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039fa:	f7fe ff21 	bl	8002840 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d914      	bls.n	8003a32 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00d      	beq.n	8003a32 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1a:	f043 0210 	orr.w	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	f043 0201 	orr.w	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e007      	b.n	8003a42 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1dc      	bne.n	80039fa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b084      	sub	sp, #16
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d14b      	bne.n	8003afc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d021      	beq.n	8003ac2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe ff92 	bl	80029ac <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d032      	beq.n	8003af4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d12b      	bne.n	8003af4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d11f      	bne.n	8003af4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	f043 0201 	orr.w	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	655a      	str	r2, [r3, #84]	; 0x54
 8003ac0:	e018      	b.n	8003af4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d111      	bne.n	8003af4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d105      	bne.n	8003af4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	f043 0201 	orr.w	r2, r3, #1
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7ff fb45 	bl	8003184 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003afa:	e00e      	b.n	8003b1a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f7ff fb4f 	bl	80031ac <HAL_ADC_ErrorCallback>
}
 8003b0e:	e004      	b.n	8003b1a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4798      	blx	r3
}
 8003b1a:	bf00      	nop
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f7ff fb31 	bl	8003198 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5c:	f043 0204 	orr.w	r2, r3, #4
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f7ff fb21 	bl	80031ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a7a      	ldr	r2, [pc, #488]	; (8003d6c <ADC_ConfigureBoostMode+0x1f8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d004      	beq.n	8003b90 <ADC_ConfigureBoostMode+0x1c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a79      	ldr	r2, [pc, #484]	; (8003d70 <ADC_ConfigureBoostMode+0x1fc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d109      	bne.n	8003ba4 <ADC_ConfigureBoostMode+0x30>
 8003b90:	4b78      	ldr	r3, [pc, #480]	; (8003d74 <ADC_ConfigureBoostMode+0x200>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e008      	b.n	8003bb6 <ADC_ConfigureBoostMode+0x42>
 8003ba4:	4b74      	ldr	r3, [pc, #464]	; (8003d78 <ADC_ConfigureBoostMode+0x204>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf14      	ite	ne
 8003bb0:	2301      	movne	r3, #1
 8003bb2:	2300      	moveq	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01c      	beq.n	8003bf4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003bba:	f004 fe2f 	bl	800881c <HAL_RCC_GetHCLKFreq>
 8003bbe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bc8:	d010      	beq.n	8003bec <ADC_ConfigureBoostMode+0x78>
 8003bca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bce:	d873      	bhi.n	8003cb8 <ADC_ConfigureBoostMode+0x144>
 8003bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd4:	d002      	beq.n	8003bdc <ADC_ConfigureBoostMode+0x68>
 8003bd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bda:	d16d      	bne.n	8003cb8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be8:	60fb      	str	r3, [r7, #12]
        break;
 8003bea:	e068      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	089b      	lsrs	r3, r3, #2
 8003bf0:	60fb      	str	r3, [r7, #12]
        break;
 8003bf2:	e064      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003bf4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003bf8:	f04f 0100 	mov.w	r1, #0
 8003bfc:	f006 f8b6 	bl	8009d6c <HAL_RCCEx_GetPeriphCLKFreq>
 8003c00:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003c0a:	d051      	beq.n	8003cb0 <ADC_ConfigureBoostMode+0x13c>
 8003c0c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003c10:	d854      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c12:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003c16:	d047      	beq.n	8003ca8 <ADC_ConfigureBoostMode+0x134>
 8003c18:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003c1c:	d84e      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c1e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c22:	d03d      	beq.n	8003ca0 <ADC_ConfigureBoostMode+0x12c>
 8003c24:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c28:	d848      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c2e:	d033      	beq.n	8003c98 <ADC_ConfigureBoostMode+0x124>
 8003c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c34:	d842      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c36:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c3a:	d029      	beq.n	8003c90 <ADC_ConfigureBoostMode+0x11c>
 8003c3c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c40:	d83c      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c42:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c46:	d01a      	beq.n	8003c7e <ADC_ConfigureBoostMode+0x10a>
 8003c48:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c4c:	d836      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c4e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c52:	d014      	beq.n	8003c7e <ADC_ConfigureBoostMode+0x10a>
 8003c54:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c58:	d830      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c5e:	d00e      	beq.n	8003c7e <ADC_ConfigureBoostMode+0x10a>
 8003c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c64:	d82a      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c6a:	d008      	beq.n	8003c7e <ADC_ConfigureBoostMode+0x10a>
 8003c6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c70:	d824      	bhi.n	8003cbc <ADC_ConfigureBoostMode+0x148>
 8003c72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c76:	d002      	beq.n	8003c7e <ADC_ConfigureBoostMode+0x10a>
 8003c78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c7c:	d11e      	bne.n	8003cbc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	0c9b      	lsrs	r3, r3, #18
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	60fb      	str	r3, [r7, #12]
        break;
 8003c8e:	e016      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	091b      	lsrs	r3, r3, #4
 8003c94:	60fb      	str	r3, [r7, #12]
        break;
 8003c96:	e012      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	60fb      	str	r3, [r7, #12]
        break;
 8003c9e:	e00e      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	099b      	lsrs	r3, r3, #6
 8003ca4:	60fb      	str	r3, [r7, #12]
        break;
 8003ca6:	e00a      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	09db      	lsrs	r3, r3, #7
 8003cac:	60fb      	str	r3, [r7, #12]
        break;
 8003cae:	e006      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	0a1b      	lsrs	r3, r3, #8
 8003cb4:	60fb      	str	r3, [r7, #12]
        break;
 8003cb6:	e002      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
        break;
 8003cb8:	bf00      	nop
 8003cba:	e000      	b.n	8003cbe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003cbc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003cbe:	f7fe fdcb 	bl	8002858 <HAL_GetREVID>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d815      	bhi.n	8003cf8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4a2b      	ldr	r2, [pc, #172]	; (8003d7c <ADC_ConfigureBoostMode+0x208>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d908      	bls.n	8003ce6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ce2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ce4:	e03e      	b.n	8003d64 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cf4:	609a      	str	r2, [r3, #8]
}
 8003cf6:	e035      	b.n	8003d64 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	085b      	lsrs	r3, r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <ADC_ConfigureBoostMode+0x20c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d808      	bhi.n	8003d18 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d14:	609a      	str	r2, [r3, #8]
}
 8003d16:	e025      	b.n	8003d64 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4a1a      	ldr	r2, [pc, #104]	; (8003d84 <ADC_ConfigureBoostMode+0x210>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d80a      	bhi.n	8003d36 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d32:	609a      	str	r2, [r3, #8]
}
 8003d34:	e016      	b.n	8003d64 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <ADC_ConfigureBoostMode+0x214>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d80a      	bhi.n	8003d54 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d50:	609a      	str	r2, [r3, #8]
}
 8003d52:	e007      	b.n	8003d64 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40022000 	.word	0x40022000
 8003d70:	40022100 	.word	0x40022100
 8003d74:	40022300 	.word	0x40022300
 8003d78:	58026300 	.word	0x58026300
 8003d7c:	01312d00 	.word	0x01312d00
 8003d80:	005f5e10 	.word	0x005f5e10
 8003d84:	00bebc20 	.word	0x00bebc20
 8003d88:	017d7840 	.word	0x017d7840

08003d8c <LL_ADC_IsEnabled>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <LL_ADC_IsEnabled+0x18>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <LL_ADC_IsEnabled+0x1a>
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
	...

08003db4 <LL_ADC_StartCalibration>:
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	4b09      	ldr	r3, [pc, #36]	; (8003dec <LL_ADC_StartCalibration+0x38>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	609a      	str	r2, [r3, #8]
}
 8003de0:	bf00      	nop
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	3ffeffc0 	.word	0x3ffeffc0

08003df0 <LL_ADC_IsCalibrationOnGoing>:
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e04:	d101      	bne.n	8003e0a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <LL_ADC_REG_IsConversionOngoing>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d101      	bne.n	8003e30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
	...

08003e40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_ADCEx_Calibration_Start+0x1e>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e04c      	b.n	8003ef8 <HAL_ADCEx_Calibration_Start+0xb8>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f7ff fd90 	bl	800398c <ADC_Disable>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d135      	bne.n	8003ee2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e7a:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	f043 0202 	orr.w	r2, r3, #2
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff ff90 	bl	8003db4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e94:	e014      	b.n	8003ec0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d30d      	bcc.n	8003ec0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	f023 0312 	bic.w	r3, r3, #18
 8003eac:	f043 0210 	orr.w	r2, r3, #16
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e01b      	b.n	8003ef8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff ff93 	bl	8003df0 <LL_ADC_IsCalibrationOnGoing>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e2      	bne.n	8003e96 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed4:	f023 0303 	bic.w	r3, r3, #3
 8003ed8:	f043 0201 	orr.w	r2, r3, #1
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	655a      	str	r2, [r3, #84]	; 0x54
 8003ee0:	e005      	b.n	8003eee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	f043 0210 	orr.w	r2, r3, #16
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	ffffeefd 	.word	0xffffeefd
 8003f04:	25c3f800 	.word	0x25c3f800

08003f08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	b09f      	sub	sp, #124	; 0x7c
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e0be      	b.n	80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003f32:	2300      	movs	r3, #0
 8003f34:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a5c      	ldr	r2, [pc, #368]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d102      	bne.n	8003f46 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f40:	4b5b      	ldr	r3, [pc, #364]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	e001      	b.n	8003f4a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f46:	2300      	movs	r3, #0
 8003f48:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e09d      	b.n	80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff ff54 	bl	8003e18 <LL_ADC_REG_IsConversionOngoing>
 8003f70:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff ff4e 	bl	8003e18 <LL_ADC_REG_IsConversionOngoing>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d17f      	bne.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d17c      	bne.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a47      	ldr	r2, [pc, #284]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d004      	beq.n	8003f9c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a46      	ldr	r2, [pc, #280]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d101      	bne.n	8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003f9c:	4b45      	ldr	r3, [pc, #276]	; (80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f9e:	e000      	b.n	8003fa2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003fa0:	4b45      	ldr	r3, [pc, #276]	; (80040b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fa2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d039      	beq.n	8004020 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fbc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a3a      	ldr	r2, [pc, #232]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d10e      	bne.n	8003ff0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003fd2:	4836      	ldr	r0, [pc, #216]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fd4:	f7ff feda 	bl	8003d8c <LL_ADC_IsEnabled>
 8003fd8:	4604      	mov	r4, r0
 8003fda:	4835      	ldr	r0, [pc, #212]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fdc:	f7ff fed6 	bl	8003d8c <LL_ADC_IsEnabled>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	4323      	orrs	r3, r4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e008      	b.n	8004002 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003ff0:	4832      	ldr	r0, [pc, #200]	; (80040bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ff2:	f7ff fecb 	bl	8003d8c <LL_ADC_IsEnabled>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d047      	beq.n	8004096 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	4b2d      	ldr	r3, [pc, #180]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800400c:	4013      	ands	r3, r2
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	6811      	ldr	r1, [r2, #0]
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	6892      	ldr	r2, [r2, #8]
 8004016:	430a      	orrs	r2, r1
 8004018:	431a      	orrs	r2, r3
 800401a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800401e:	e03a      	b.n	8004096 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1e      	ldr	r2, [pc, #120]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d004      	beq.n	8004040 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1d      	ldr	r2, [pc, #116]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d10e      	bne.n	800405e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004040:	481a      	ldr	r0, [pc, #104]	; (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004042:	f7ff fea3 	bl	8003d8c <LL_ADC_IsEnabled>
 8004046:	4604      	mov	r4, r0
 8004048:	4819      	ldr	r0, [pc, #100]	; (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800404a:	f7ff fe9f 	bl	8003d8c <LL_ADC_IsEnabled>
 800404e:	4603      	mov	r3, r0
 8004050:	4323      	orrs	r3, r4
 8004052:	2b00      	cmp	r3, #0
 8004054:	bf0c      	ite	eq
 8004056:	2301      	moveq	r3, #1
 8004058:	2300      	movne	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	e008      	b.n	8004070 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800405e:	4817      	ldr	r0, [pc, #92]	; (80040bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004060:	f7ff fe94 	bl	8003d8c <LL_ADC_IsEnabled>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf0c      	ite	eq
 800406a:	2301      	moveq	r3, #1
 800406c:	2300      	movne	r3, #0
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d010      	beq.n	8004096 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800407a:	4013      	ands	r3, r2
 800407c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800407e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004080:	e009      	b.n	8004096 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004094:	e000      	b.n	8004098 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004096:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80040a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	377c      	adds	r7, #124	; 0x7c
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd90      	pop	{r4, r7, pc}
 80040ac:	40022000 	.word	0x40022000
 80040b0:	40022100 	.word	0x40022100
 80040b4:	40022300 	.word	0x40022300
 80040b8:	58026300 	.word	0x58026300
 80040bc:	58026000 	.word	0x58026000
 80040c0:	fffff0e0 	.word	0xfffff0e0

080040c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <__NVIC_SetPriorityGrouping+0x40>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e0:	4013      	ands	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <__NVIC_SetPriorityGrouping+0x44>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040f2:	4a04      	ldr	r2, [pc, #16]	; (8004104 <__NVIC_SetPriorityGrouping+0x40>)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	60d3      	str	r3, [r2, #12]
}
 80040f8:	bf00      	nop
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	e000ed00 	.word	0xe000ed00
 8004108:	05fa0000 	.word	0x05fa0000

0800410c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <__NVIC_GetPriorityGrouping+0x18>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	0a1b      	lsrs	r3, r3, #8
 8004116:	f003 0307 	and.w	r3, r3, #7
}
 800411a:	4618      	mov	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	e000ed00 	.word	0xe000ed00

08004128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004136:	2b00      	cmp	r3, #0
 8004138:	db0b      	blt.n	8004152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	f003 021f 	and.w	r2, r3, #31
 8004140:	4907      	ldr	r1, [pc, #28]	; (8004160 <__NVIC_EnableIRQ+0x38>)
 8004142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2001      	movs	r0, #1
 800414a:	fa00 f202 	lsl.w	r2, r0, r2
 800414e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000e100 	.word	0xe000e100

08004164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	6039      	str	r1, [r7, #0]
 800416e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004174:	2b00      	cmp	r3, #0
 8004176:	db0a      	blt.n	800418e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	b2da      	uxtb	r2, r3
 800417c:	490c      	ldr	r1, [pc, #48]	; (80041b0 <__NVIC_SetPriority+0x4c>)
 800417e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004182:	0112      	lsls	r2, r2, #4
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	440b      	add	r3, r1
 8004188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800418c:	e00a      	b.n	80041a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4908      	ldr	r1, [pc, #32]	; (80041b4 <__NVIC_SetPriority+0x50>)
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	3b04      	subs	r3, #4
 800419c:	0112      	lsls	r2, r2, #4
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	440b      	add	r3, r1
 80041a2:	761a      	strb	r2, [r3, #24]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	e000e100 	.word	0xe000e100
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b089      	sub	sp, #36	; 0x24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f1c3 0307 	rsb	r3, r3, #7
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	bf28      	it	cs
 80041d6:	2304      	movcs	r3, #4
 80041d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	3304      	adds	r3, #4
 80041de:	2b06      	cmp	r3, #6
 80041e0:	d902      	bls.n	80041e8 <NVIC_EncodePriority+0x30>
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3b03      	subs	r3, #3
 80041e6:	e000      	b.n	80041ea <NVIC_EncodePriority+0x32>
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43da      	mvns	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	401a      	ands	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004200:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	43d9      	mvns	r1, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004210:	4313      	orrs	r3, r2
         );
}
 8004212:	4618      	mov	r0, r3
 8004214:	3724      	adds	r7, #36	; 0x24
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff ff4c 	bl	80040c4 <__NVIC_SetPriorityGrouping>
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004242:	f7ff ff63 	bl	800410c <__NVIC_GetPriorityGrouping>
 8004246:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	68b9      	ldr	r1, [r7, #8]
 800424c:	6978      	ldr	r0, [r7, #20]
 800424e:	f7ff ffb3 	bl	80041b8 <NVIC_EncodePriority>
 8004252:	4602      	mov	r2, r0
 8004254:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004258:	4611      	mov	r1, r2
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff ff82 	bl	8004164 <__NVIC_SetPriority>
}
 8004260:	bf00      	nop
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004272:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff ff56 	bl	8004128 <__NVIC_EnableIRQ>
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e014      	b.n	80042c0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	791b      	ldrb	r3, [r3, #4]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d105      	bne.n	80042ac <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fd fd5c 	bl	8001d64 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042de:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d01d      	beq.n	8004326 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d018      	beq.n	8004326 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2204      	movs	r2, #4
 80042f8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f043 0201 	orr.w	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800430e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800431e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f827 	bl	8004374 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01d      	beq.n	800436c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d018      	beq.n	800436c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2204      	movs	r2, #4
 800433e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f043 0202 	orr.w	r2, r3, #2
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004354:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004364:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f950 	bl	800460c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08a      	sub	sp, #40	; 0x28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <HAL_DAC_ConfigChannel+0x1e>
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e12a      	b.n	8004600 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	795b      	ldrb	r3, [r3, #5]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_DAC_ConfigChannel+0x2e>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e124      	b.n	8004600 <HAL_DAC_ConfigChannel+0x278>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2202      	movs	r2, #2
 80043c0:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d17a      	bne.n	80044c0 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80043ca:	f7fe fa39 	bl	8002840 <HAL_GetTick>
 80043ce:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d13d      	bne.n	8004452 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80043d6:	e018      	b.n	800440a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80043d8:	f7fe fa32 	bl	8002840 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d911      	bls.n	800440a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ec:	4b86      	ldr	r3, [pc, #536]	; (8004608 <HAL_DAC_ConfigChannel+0x280>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f043 0208 	orr.w	r2, r3, #8
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2203      	movs	r2, #3
 8004404:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e0fa      	b.n	8004600 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004410:	4b7d      	ldr	r3, [pc, #500]	; (8004608 <HAL_DAC_ConfigChannel+0x280>)
 8004412:	4013      	ands	r3, r2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1df      	bne.n	80043d8 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	6992      	ldr	r2, [r2, #24]
 8004420:	641a      	str	r2, [r3, #64]	; 0x40
 8004422:	e020      	b.n	8004466 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004424:	f7fe fa0c 	bl	8002840 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b01      	cmp	r3, #1
 8004430:	d90f      	bls.n	8004452 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004438:	2b00      	cmp	r3, #0
 800443a:	da0a      	bge.n	8004452 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f043 0208 	orr.w	r2, r3, #8
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2203      	movs	r2, #3
 800444c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e0d6      	b.n	8004600 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004458:	2b00      	cmp	r3, #0
 800445a:	dbe3      	blt.n	8004424 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	6992      	ldr	r2, [r2, #24]
 8004464:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	43db      	mvns	r3, r3
 800447c:	ea02 0103 	and.w	r1, r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	409a      	lsls	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	21ff      	movs	r1, #255	; 0xff
 80044a2:	fa01 f303 	lsl.w	r3, r1, r3
 80044a6:	43db      	mvns	r3, r3
 80044a8:	ea02 0103 	and.w	r1, r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	6a1a      	ldr	r2, [r3, #32]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	409a      	lsls	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d11d      	bne.n	8004504 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	221f      	movs	r2, #31
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	43db      	mvns	r3, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4013      	ands	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2207      	movs	r2, #7
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	43db      	mvns	r3, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4013      	ands	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d102      	bne.n	800452e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004528:	2300      	movs	r3, #0
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
 800452c:	e00f      	b.n	800454e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d102      	bne.n	800453c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004536:	2301      	movs	r3, #1
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
 800453a:	e008      	b.n	800454e <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004544:	2301      	movs	r3, #1
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
 8004548:	e001      	b.n	800454e <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800454a:	2300      	movs	r3, #0
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	4313      	orrs	r3, r2
 8004558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455a:	4313      	orrs	r3, r2
 800455c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4313      	orrs	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6819      	ldr	r1, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	43da      	mvns	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	400a      	ands	r2, r1
 8004594:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	43db      	mvns	r3, r3
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4013      	ands	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6819      	ldr	r1, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	22c0      	movs	r2, #192	; 0xc0
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43da      	mvns	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	400a      	ands	r2, r1
 80045ee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80045fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004600:	4618      	mov	r0, r3
 8004602:	3728      	adds	r7, #40	; 0x28
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	20008000 	.word	0x20008000

0800460c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004628:	f7fe f90a 	bl	8002840 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e316      	b.n	8004c66 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a66      	ldr	r2, [pc, #408]	; (80047d8 <HAL_DMA_Init+0x1b8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d04a      	beq.n	80046d8 <HAL_DMA_Init+0xb8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a65      	ldr	r2, [pc, #404]	; (80047dc <HAL_DMA_Init+0x1bc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d045      	beq.n	80046d8 <HAL_DMA_Init+0xb8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a63      	ldr	r2, [pc, #396]	; (80047e0 <HAL_DMA_Init+0x1c0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d040      	beq.n	80046d8 <HAL_DMA_Init+0xb8>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a62      	ldr	r2, [pc, #392]	; (80047e4 <HAL_DMA_Init+0x1c4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d03b      	beq.n	80046d8 <HAL_DMA_Init+0xb8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a60      	ldr	r2, [pc, #384]	; (80047e8 <HAL_DMA_Init+0x1c8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d036      	beq.n	80046d8 <HAL_DMA_Init+0xb8>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a5f      	ldr	r2, [pc, #380]	; (80047ec <HAL_DMA_Init+0x1cc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d031      	beq.n	80046d8 <HAL_DMA_Init+0xb8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a5d      	ldr	r2, [pc, #372]	; (80047f0 <HAL_DMA_Init+0x1d0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d02c      	beq.n	80046d8 <HAL_DMA_Init+0xb8>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a5c      	ldr	r2, [pc, #368]	; (80047f4 <HAL_DMA_Init+0x1d4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d027      	beq.n	80046d8 <HAL_DMA_Init+0xb8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a5a      	ldr	r2, [pc, #360]	; (80047f8 <HAL_DMA_Init+0x1d8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d022      	beq.n	80046d8 <HAL_DMA_Init+0xb8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a59      	ldr	r2, [pc, #356]	; (80047fc <HAL_DMA_Init+0x1dc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d01d      	beq.n	80046d8 <HAL_DMA_Init+0xb8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a57      	ldr	r2, [pc, #348]	; (8004800 <HAL_DMA_Init+0x1e0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d018      	beq.n	80046d8 <HAL_DMA_Init+0xb8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a56      	ldr	r2, [pc, #344]	; (8004804 <HAL_DMA_Init+0x1e4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d013      	beq.n	80046d8 <HAL_DMA_Init+0xb8>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a54      	ldr	r2, [pc, #336]	; (8004808 <HAL_DMA_Init+0x1e8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00e      	beq.n	80046d8 <HAL_DMA_Init+0xb8>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a53      	ldr	r2, [pc, #332]	; (800480c <HAL_DMA_Init+0x1ec>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d009      	beq.n	80046d8 <HAL_DMA_Init+0xb8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a51      	ldr	r2, [pc, #324]	; (8004810 <HAL_DMA_Init+0x1f0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d004      	beq.n	80046d8 <HAL_DMA_Init+0xb8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a50      	ldr	r2, [pc, #320]	; (8004814 <HAL_DMA_Init+0x1f4>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d101      	bne.n	80046dc <HAL_DMA_Init+0xbc>
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <HAL_DMA_Init+0xbe>
 80046dc:	2300      	movs	r3, #0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 813b 	beq.w	800495a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a37      	ldr	r2, [pc, #220]	; (80047d8 <HAL_DMA_Init+0x1b8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d04a      	beq.n	8004794 <HAL_DMA_Init+0x174>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a36      	ldr	r2, [pc, #216]	; (80047dc <HAL_DMA_Init+0x1bc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d045      	beq.n	8004794 <HAL_DMA_Init+0x174>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a34      	ldr	r2, [pc, #208]	; (80047e0 <HAL_DMA_Init+0x1c0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d040      	beq.n	8004794 <HAL_DMA_Init+0x174>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a33      	ldr	r2, [pc, #204]	; (80047e4 <HAL_DMA_Init+0x1c4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d03b      	beq.n	8004794 <HAL_DMA_Init+0x174>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a31      	ldr	r2, [pc, #196]	; (80047e8 <HAL_DMA_Init+0x1c8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d036      	beq.n	8004794 <HAL_DMA_Init+0x174>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a30      	ldr	r2, [pc, #192]	; (80047ec <HAL_DMA_Init+0x1cc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d031      	beq.n	8004794 <HAL_DMA_Init+0x174>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a2e      	ldr	r2, [pc, #184]	; (80047f0 <HAL_DMA_Init+0x1d0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d02c      	beq.n	8004794 <HAL_DMA_Init+0x174>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2d      	ldr	r2, [pc, #180]	; (80047f4 <HAL_DMA_Init+0x1d4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d027      	beq.n	8004794 <HAL_DMA_Init+0x174>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2b      	ldr	r2, [pc, #172]	; (80047f8 <HAL_DMA_Init+0x1d8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d022      	beq.n	8004794 <HAL_DMA_Init+0x174>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a2a      	ldr	r2, [pc, #168]	; (80047fc <HAL_DMA_Init+0x1dc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d01d      	beq.n	8004794 <HAL_DMA_Init+0x174>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a28      	ldr	r2, [pc, #160]	; (8004800 <HAL_DMA_Init+0x1e0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d018      	beq.n	8004794 <HAL_DMA_Init+0x174>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a27      	ldr	r2, [pc, #156]	; (8004804 <HAL_DMA_Init+0x1e4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <HAL_DMA_Init+0x174>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a25      	ldr	r2, [pc, #148]	; (8004808 <HAL_DMA_Init+0x1e8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00e      	beq.n	8004794 <HAL_DMA_Init+0x174>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a24      	ldr	r2, [pc, #144]	; (800480c <HAL_DMA_Init+0x1ec>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d009      	beq.n	8004794 <HAL_DMA_Init+0x174>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a22      	ldr	r2, [pc, #136]	; (8004810 <HAL_DMA_Init+0x1f0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_DMA_Init+0x174>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a21      	ldr	r2, [pc, #132]	; (8004814 <HAL_DMA_Init+0x1f4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d108      	bne.n	80047a6 <HAL_DMA_Init+0x186>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0201 	bic.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	e007      	b.n	80047b6 <HAL_DMA_Init+0x196>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0201 	bic.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047b6:	e02f      	b.n	8004818 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047b8:	f7fe f842 	bl	8002840 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	d928      	bls.n	8004818 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2203      	movs	r2, #3
 80047d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e246      	b.n	8004c66 <HAL_DMA_Init+0x646>
 80047d8:	40020010 	.word	0x40020010
 80047dc:	40020028 	.word	0x40020028
 80047e0:	40020040 	.word	0x40020040
 80047e4:	40020058 	.word	0x40020058
 80047e8:	40020070 	.word	0x40020070
 80047ec:	40020088 	.word	0x40020088
 80047f0:	400200a0 	.word	0x400200a0
 80047f4:	400200b8 	.word	0x400200b8
 80047f8:	40020410 	.word	0x40020410
 80047fc:	40020428 	.word	0x40020428
 8004800:	40020440 	.word	0x40020440
 8004804:	40020458 	.word	0x40020458
 8004808:	40020470 	.word	0x40020470
 800480c:	40020488 	.word	0x40020488
 8004810:	400204a0 	.word	0x400204a0
 8004814:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1c8      	bne.n	80047b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4b83      	ldr	r3, [pc, #524]	; (8004a40 <HAL_DMA_Init+0x420>)
 8004832:	4013      	ands	r3, r2
 8004834:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800483e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800484a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004856:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	2b04      	cmp	r3, #4
 800486a:	d107      	bne.n	800487c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	4313      	orrs	r3, r2
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800487c:	4b71      	ldr	r3, [pc, #452]	; (8004a44 <HAL_DMA_Init+0x424>)
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	4b71      	ldr	r3, [pc, #452]	; (8004a48 <HAL_DMA_Init+0x428>)
 8004882:	4013      	ands	r3, r2
 8004884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004888:	d328      	bcc.n	80048dc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b28      	cmp	r3, #40	; 0x28
 8004890:	d903      	bls.n	800489a <HAL_DMA_Init+0x27a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b2e      	cmp	r3, #46	; 0x2e
 8004898:	d917      	bls.n	80048ca <HAL_DMA_Init+0x2aa>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b3e      	cmp	r3, #62	; 0x3e
 80048a0:	d903      	bls.n	80048aa <HAL_DMA_Init+0x28a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b42      	cmp	r3, #66	; 0x42
 80048a8:	d90f      	bls.n	80048ca <HAL_DMA_Init+0x2aa>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b46      	cmp	r3, #70	; 0x46
 80048b0:	d903      	bls.n	80048ba <HAL_DMA_Init+0x29a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b48      	cmp	r3, #72	; 0x48
 80048b8:	d907      	bls.n	80048ca <HAL_DMA_Init+0x2aa>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b4e      	cmp	r3, #78	; 0x4e
 80048c0:	d905      	bls.n	80048ce <HAL_DMA_Init+0x2ae>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b52      	cmp	r3, #82	; 0x52
 80048c8:	d801      	bhi.n	80048ce <HAL_DMA_Init+0x2ae>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <HAL_DMA_Init+0x2b0>
 80048ce:	2300      	movs	r3, #0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048da:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 0307 	bic.w	r3, r3, #7
 80048f2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	2b04      	cmp	r3, #4
 8004904:	d117      	bne.n	8004936 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00e      	beq.n	8004936 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f002 fb33 	bl	8006f84 <DMA_CheckFifoParam>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2240      	movs	r2, #64	; 0x40
 8004928:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e197      	b.n	8004c66 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f002 fa6e 	bl	8006e20 <DMA_CalcBaseAndBitshift>
 8004944:	4603      	mov	r3, r0
 8004946:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	223f      	movs	r2, #63	; 0x3f
 8004952:	409a      	lsls	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	609a      	str	r2, [r3, #8]
 8004958:	e0cd      	b.n	8004af6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a3b      	ldr	r2, [pc, #236]	; (8004a4c <HAL_DMA_Init+0x42c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d022      	beq.n	80049aa <HAL_DMA_Init+0x38a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a39      	ldr	r2, [pc, #228]	; (8004a50 <HAL_DMA_Init+0x430>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d01d      	beq.n	80049aa <HAL_DMA_Init+0x38a>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a38      	ldr	r2, [pc, #224]	; (8004a54 <HAL_DMA_Init+0x434>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d018      	beq.n	80049aa <HAL_DMA_Init+0x38a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a36      	ldr	r2, [pc, #216]	; (8004a58 <HAL_DMA_Init+0x438>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d013      	beq.n	80049aa <HAL_DMA_Init+0x38a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a35      	ldr	r2, [pc, #212]	; (8004a5c <HAL_DMA_Init+0x43c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00e      	beq.n	80049aa <HAL_DMA_Init+0x38a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a33      	ldr	r2, [pc, #204]	; (8004a60 <HAL_DMA_Init+0x440>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d009      	beq.n	80049aa <HAL_DMA_Init+0x38a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a32      	ldr	r2, [pc, #200]	; (8004a64 <HAL_DMA_Init+0x444>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d004      	beq.n	80049aa <HAL_DMA_Init+0x38a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a30      	ldr	r2, [pc, #192]	; (8004a68 <HAL_DMA_Init+0x448>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d101      	bne.n	80049ae <HAL_DMA_Init+0x38e>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <HAL_DMA_Init+0x390>
 80049ae:	2300      	movs	r3, #0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 8097 	beq.w	8004ae4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a24      	ldr	r2, [pc, #144]	; (8004a4c <HAL_DMA_Init+0x42c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d021      	beq.n	8004a04 <HAL_DMA_Init+0x3e4>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a22      	ldr	r2, [pc, #136]	; (8004a50 <HAL_DMA_Init+0x430>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d01c      	beq.n	8004a04 <HAL_DMA_Init+0x3e4>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a21      	ldr	r2, [pc, #132]	; (8004a54 <HAL_DMA_Init+0x434>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d017      	beq.n	8004a04 <HAL_DMA_Init+0x3e4>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1f      	ldr	r2, [pc, #124]	; (8004a58 <HAL_DMA_Init+0x438>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d012      	beq.n	8004a04 <HAL_DMA_Init+0x3e4>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1e      	ldr	r2, [pc, #120]	; (8004a5c <HAL_DMA_Init+0x43c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00d      	beq.n	8004a04 <HAL_DMA_Init+0x3e4>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1c      	ldr	r2, [pc, #112]	; (8004a60 <HAL_DMA_Init+0x440>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d008      	beq.n	8004a04 <HAL_DMA_Init+0x3e4>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1b      	ldr	r2, [pc, #108]	; (8004a64 <HAL_DMA_Init+0x444>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d003      	beq.n	8004a04 <HAL_DMA_Init+0x3e4>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a19      	ldr	r2, [pc, #100]	; (8004a68 <HAL_DMA_Init+0x448>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <HAL_DMA_Init+0x44c>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b40      	cmp	r3, #64	; 0x40
 8004a2c:	d020      	beq.n	8004a70 <HAL_DMA_Init+0x450>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d102      	bne.n	8004a3c <HAL_DMA_Init+0x41c>
 8004a36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a3a:	e01a      	b.n	8004a72 <HAL_DMA_Init+0x452>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	e018      	b.n	8004a72 <HAL_DMA_Init+0x452>
 8004a40:	fe10803f 	.word	0xfe10803f
 8004a44:	5c001000 	.word	0x5c001000
 8004a48:	ffff0000 	.word	0xffff0000
 8004a4c:	58025408 	.word	0x58025408
 8004a50:	5802541c 	.word	0x5802541c
 8004a54:	58025430 	.word	0x58025430
 8004a58:	58025444 	.word	0x58025444
 8004a5c:	58025458 	.word	0x58025458
 8004a60:	5802546c 	.word	0x5802546c
 8004a64:	58025480 	.word	0x58025480
 8004a68:	58025494 	.word	0x58025494
 8004a6c:	fffe000f 	.word	0xfffe000f
 8004a70:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	68d2      	ldr	r2, [r2, #12]
 8004a76:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004aa0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4b6e      	ldr	r3, [pc, #440]	; (8004c70 <HAL_DMA_Init+0x650>)
 8004ab8:	4413      	add	r3, r2
 8004aba:	4a6e      	ldr	r2, [pc, #440]	; (8004c74 <HAL_DMA_Init+0x654>)
 8004abc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	009a      	lsls	r2, r3, #2
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f002 f9a9 	bl	8006e20 <DMA_CalcBaseAndBitshift>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad6:	f003 031f 	and.w	r3, r3, #31
 8004ada:	2201      	movs	r2, #1
 8004adc:	409a      	lsls	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	605a      	str	r2, [r3, #4]
 8004ae2:	e008      	b.n	8004af6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2240      	movs	r2, #64	; 0x40
 8004ae8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2203      	movs	r2, #3
 8004aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e0b7      	b.n	8004c66 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a5f      	ldr	r2, [pc, #380]	; (8004c78 <HAL_DMA_Init+0x658>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d072      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a5d      	ldr	r2, [pc, #372]	; (8004c7c <HAL_DMA_Init+0x65c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d06d      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a5c      	ldr	r2, [pc, #368]	; (8004c80 <HAL_DMA_Init+0x660>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d068      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a5a      	ldr	r2, [pc, #360]	; (8004c84 <HAL_DMA_Init+0x664>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d063      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a59      	ldr	r2, [pc, #356]	; (8004c88 <HAL_DMA_Init+0x668>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d05e      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a57      	ldr	r2, [pc, #348]	; (8004c8c <HAL_DMA_Init+0x66c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d059      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a56      	ldr	r2, [pc, #344]	; (8004c90 <HAL_DMA_Init+0x670>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d054      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a54      	ldr	r2, [pc, #336]	; (8004c94 <HAL_DMA_Init+0x674>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d04f      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a53      	ldr	r2, [pc, #332]	; (8004c98 <HAL_DMA_Init+0x678>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d04a      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a51      	ldr	r2, [pc, #324]	; (8004c9c <HAL_DMA_Init+0x67c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d045      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a50      	ldr	r2, [pc, #320]	; (8004ca0 <HAL_DMA_Init+0x680>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d040      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a4e      	ldr	r2, [pc, #312]	; (8004ca4 <HAL_DMA_Init+0x684>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d03b      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a4d      	ldr	r2, [pc, #308]	; (8004ca8 <HAL_DMA_Init+0x688>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d036      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a4b      	ldr	r2, [pc, #300]	; (8004cac <HAL_DMA_Init+0x68c>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d031      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a4a      	ldr	r2, [pc, #296]	; (8004cb0 <HAL_DMA_Init+0x690>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d02c      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a48      	ldr	r2, [pc, #288]	; (8004cb4 <HAL_DMA_Init+0x694>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d027      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a47      	ldr	r2, [pc, #284]	; (8004cb8 <HAL_DMA_Init+0x698>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d022      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a45      	ldr	r2, [pc, #276]	; (8004cbc <HAL_DMA_Init+0x69c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d01d      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a44      	ldr	r2, [pc, #272]	; (8004cc0 <HAL_DMA_Init+0x6a0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d018      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a42      	ldr	r2, [pc, #264]	; (8004cc4 <HAL_DMA_Init+0x6a4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d013      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a41      	ldr	r2, [pc, #260]	; (8004cc8 <HAL_DMA_Init+0x6a8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00e      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a3f      	ldr	r2, [pc, #252]	; (8004ccc <HAL_DMA_Init+0x6ac>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d009      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a3e      	ldr	r2, [pc, #248]	; (8004cd0 <HAL_DMA_Init+0x6b0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d004      	beq.n	8004be6 <HAL_DMA_Init+0x5c6>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a3c      	ldr	r2, [pc, #240]	; (8004cd4 <HAL_DMA_Init+0x6b4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d101      	bne.n	8004bea <HAL_DMA_Init+0x5ca>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <HAL_DMA_Init+0x5cc>
 8004bea:	2300      	movs	r3, #0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d032      	beq.n	8004c56 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f002 fa43 	bl	800707c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b80      	cmp	r3, #128	; 0x80
 8004bfc:	d102      	bne.n	8004c04 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c18:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d010      	beq.n	8004c44 <HAL_DMA_Init+0x624>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d80c      	bhi.n	8004c44 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f002 fac0 	bl	80071b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	e008      	b.n	8004c56 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	a7fdabf8 	.word	0xa7fdabf8
 8004c74:	cccccccd 	.word	0xcccccccd
 8004c78:	40020010 	.word	0x40020010
 8004c7c:	40020028 	.word	0x40020028
 8004c80:	40020040 	.word	0x40020040
 8004c84:	40020058 	.word	0x40020058
 8004c88:	40020070 	.word	0x40020070
 8004c8c:	40020088 	.word	0x40020088
 8004c90:	400200a0 	.word	0x400200a0
 8004c94:	400200b8 	.word	0x400200b8
 8004c98:	40020410 	.word	0x40020410
 8004c9c:	40020428 	.word	0x40020428
 8004ca0:	40020440 	.word	0x40020440
 8004ca4:	40020458 	.word	0x40020458
 8004ca8:	40020470 	.word	0x40020470
 8004cac:	40020488 	.word	0x40020488
 8004cb0:	400204a0 	.word	0x400204a0
 8004cb4:	400204b8 	.word	0x400204b8
 8004cb8:	58025408 	.word	0x58025408
 8004cbc:	5802541c 	.word	0x5802541c
 8004cc0:	58025430 	.word	0x58025430
 8004cc4:	58025444 	.word	0x58025444
 8004cc8:	58025458 	.word	0x58025458
 8004ccc:	5802546c 	.word	0x5802546c
 8004cd0:	58025480 	.word	0x58025480
 8004cd4:	58025494 	.word	0x58025494

08004cd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e226      	b.n	8005142 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_DMA_Start_IT+0x2a>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e21f      	b.n	8005142 <HAL_DMA_Start_IT+0x46a>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	f040 820a 	bne.w	800512c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a68      	ldr	r2, [pc, #416]	; (8004ecc <HAL_DMA_Start_IT+0x1f4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d04a      	beq.n	8004dc6 <HAL_DMA_Start_IT+0xee>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a66      	ldr	r2, [pc, #408]	; (8004ed0 <HAL_DMA_Start_IT+0x1f8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d045      	beq.n	8004dc6 <HAL_DMA_Start_IT+0xee>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a65      	ldr	r2, [pc, #404]	; (8004ed4 <HAL_DMA_Start_IT+0x1fc>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d040      	beq.n	8004dc6 <HAL_DMA_Start_IT+0xee>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a63      	ldr	r2, [pc, #396]	; (8004ed8 <HAL_DMA_Start_IT+0x200>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d03b      	beq.n	8004dc6 <HAL_DMA_Start_IT+0xee>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a62      	ldr	r2, [pc, #392]	; (8004edc <HAL_DMA_Start_IT+0x204>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d036      	beq.n	8004dc6 <HAL_DMA_Start_IT+0xee>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a60      	ldr	r2, [pc, #384]	; (8004ee0 <HAL_DMA_Start_IT+0x208>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d031      	beq.n	8004dc6 <HAL_DMA_Start_IT+0xee>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a5f      	ldr	r2, [pc, #380]	; (8004ee4 <HAL_DMA_Start_IT+0x20c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d02c      	beq.n	8004dc6 <HAL_DMA_Start_IT+0xee>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a5d      	ldr	r2, [pc, #372]	; (8004ee8 <HAL_DMA_Start_IT+0x210>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d027      	beq.n	8004dc6 <HAL_DMA_Start_IT+0xee>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a5c      	ldr	r2, [pc, #368]	; (8004eec <HAL_DMA_Start_IT+0x214>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d022      	beq.n	8004dc6 <HAL_DMA_Start_IT+0xee>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a5a      	ldr	r2, [pc, #360]	; (8004ef0 <HAL_DMA_Start_IT+0x218>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d01d      	beq.n	8004dc6 <HAL_DMA_Start_IT+0xee>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a59      	ldr	r2, [pc, #356]	; (8004ef4 <HAL_DMA_Start_IT+0x21c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d018      	beq.n	8004dc6 <HAL_DMA_Start_IT+0xee>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a57      	ldr	r2, [pc, #348]	; (8004ef8 <HAL_DMA_Start_IT+0x220>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d013      	beq.n	8004dc6 <HAL_DMA_Start_IT+0xee>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a56      	ldr	r2, [pc, #344]	; (8004efc <HAL_DMA_Start_IT+0x224>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00e      	beq.n	8004dc6 <HAL_DMA_Start_IT+0xee>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a54      	ldr	r2, [pc, #336]	; (8004f00 <HAL_DMA_Start_IT+0x228>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d009      	beq.n	8004dc6 <HAL_DMA_Start_IT+0xee>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a53      	ldr	r2, [pc, #332]	; (8004f04 <HAL_DMA_Start_IT+0x22c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <HAL_DMA_Start_IT+0xee>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a51      	ldr	r2, [pc, #324]	; (8004f08 <HAL_DMA_Start_IT+0x230>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d108      	bne.n	8004dd8 <HAL_DMA_Start_IT+0x100>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0201 	bic.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	e007      	b.n	8004de8 <HAL_DMA_Start_IT+0x110>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	68b9      	ldr	r1, [r7, #8]
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f001 fe6a 	bl	8006ac8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a34      	ldr	r2, [pc, #208]	; (8004ecc <HAL_DMA_Start_IT+0x1f4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d04a      	beq.n	8004e94 <HAL_DMA_Start_IT+0x1bc>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a33      	ldr	r2, [pc, #204]	; (8004ed0 <HAL_DMA_Start_IT+0x1f8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d045      	beq.n	8004e94 <HAL_DMA_Start_IT+0x1bc>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a31      	ldr	r2, [pc, #196]	; (8004ed4 <HAL_DMA_Start_IT+0x1fc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d040      	beq.n	8004e94 <HAL_DMA_Start_IT+0x1bc>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a30      	ldr	r2, [pc, #192]	; (8004ed8 <HAL_DMA_Start_IT+0x200>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d03b      	beq.n	8004e94 <HAL_DMA_Start_IT+0x1bc>
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a2e      	ldr	r2, [pc, #184]	; (8004edc <HAL_DMA_Start_IT+0x204>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d036      	beq.n	8004e94 <HAL_DMA_Start_IT+0x1bc>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a2d      	ldr	r2, [pc, #180]	; (8004ee0 <HAL_DMA_Start_IT+0x208>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d031      	beq.n	8004e94 <HAL_DMA_Start_IT+0x1bc>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2b      	ldr	r2, [pc, #172]	; (8004ee4 <HAL_DMA_Start_IT+0x20c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d02c      	beq.n	8004e94 <HAL_DMA_Start_IT+0x1bc>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2a      	ldr	r2, [pc, #168]	; (8004ee8 <HAL_DMA_Start_IT+0x210>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d027      	beq.n	8004e94 <HAL_DMA_Start_IT+0x1bc>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a28      	ldr	r2, [pc, #160]	; (8004eec <HAL_DMA_Start_IT+0x214>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d022      	beq.n	8004e94 <HAL_DMA_Start_IT+0x1bc>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a27      	ldr	r2, [pc, #156]	; (8004ef0 <HAL_DMA_Start_IT+0x218>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d01d      	beq.n	8004e94 <HAL_DMA_Start_IT+0x1bc>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a25      	ldr	r2, [pc, #148]	; (8004ef4 <HAL_DMA_Start_IT+0x21c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d018      	beq.n	8004e94 <HAL_DMA_Start_IT+0x1bc>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a24      	ldr	r2, [pc, #144]	; (8004ef8 <HAL_DMA_Start_IT+0x220>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d013      	beq.n	8004e94 <HAL_DMA_Start_IT+0x1bc>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a22      	ldr	r2, [pc, #136]	; (8004efc <HAL_DMA_Start_IT+0x224>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00e      	beq.n	8004e94 <HAL_DMA_Start_IT+0x1bc>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a21      	ldr	r2, [pc, #132]	; (8004f00 <HAL_DMA_Start_IT+0x228>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d009      	beq.n	8004e94 <HAL_DMA_Start_IT+0x1bc>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a1f      	ldr	r2, [pc, #124]	; (8004f04 <HAL_DMA_Start_IT+0x22c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d004      	beq.n	8004e94 <HAL_DMA_Start_IT+0x1bc>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a1e      	ldr	r2, [pc, #120]	; (8004f08 <HAL_DMA_Start_IT+0x230>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d101      	bne.n	8004e98 <HAL_DMA_Start_IT+0x1c0>
 8004e94:	2301      	movs	r3, #1
 8004e96:	e000      	b.n	8004e9a <HAL_DMA_Start_IT+0x1c2>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d036      	beq.n	8004f0c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f023 021e 	bic.w	r2, r3, #30
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0216 	orr.w	r2, r2, #22
 8004eb0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d03e      	beq.n	8004f38 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0208 	orr.w	r2, r2, #8
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	e035      	b.n	8004f38 <HAL_DMA_Start_IT+0x260>
 8004ecc:	40020010 	.word	0x40020010
 8004ed0:	40020028 	.word	0x40020028
 8004ed4:	40020040 	.word	0x40020040
 8004ed8:	40020058 	.word	0x40020058
 8004edc:	40020070 	.word	0x40020070
 8004ee0:	40020088 	.word	0x40020088
 8004ee4:	400200a0 	.word	0x400200a0
 8004ee8:	400200b8 	.word	0x400200b8
 8004eec:	40020410 	.word	0x40020410
 8004ef0:	40020428 	.word	0x40020428
 8004ef4:	40020440 	.word	0x40020440
 8004ef8:	40020458 	.word	0x40020458
 8004efc:	40020470 	.word	0x40020470
 8004f00:	40020488 	.word	0x40020488
 8004f04:	400204a0 	.word	0x400204a0
 8004f08:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f023 020e 	bic.w	r2, r3, #14
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 020a 	orr.w	r2, r2, #10
 8004f1e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0204 	orr.w	r2, r2, #4
 8004f36:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a83      	ldr	r2, [pc, #524]	; (800514c <HAL_DMA_Start_IT+0x474>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d072      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a82      	ldr	r2, [pc, #520]	; (8005150 <HAL_DMA_Start_IT+0x478>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d06d      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a80      	ldr	r2, [pc, #512]	; (8005154 <HAL_DMA_Start_IT+0x47c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d068      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a7f      	ldr	r2, [pc, #508]	; (8005158 <HAL_DMA_Start_IT+0x480>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d063      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a7d      	ldr	r2, [pc, #500]	; (800515c <HAL_DMA_Start_IT+0x484>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d05e      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a7c      	ldr	r2, [pc, #496]	; (8005160 <HAL_DMA_Start_IT+0x488>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d059      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a7a      	ldr	r2, [pc, #488]	; (8005164 <HAL_DMA_Start_IT+0x48c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d054      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a79      	ldr	r2, [pc, #484]	; (8005168 <HAL_DMA_Start_IT+0x490>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d04f      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a77      	ldr	r2, [pc, #476]	; (800516c <HAL_DMA_Start_IT+0x494>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d04a      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a76      	ldr	r2, [pc, #472]	; (8005170 <HAL_DMA_Start_IT+0x498>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d045      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a74      	ldr	r2, [pc, #464]	; (8005174 <HAL_DMA_Start_IT+0x49c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d040      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a73      	ldr	r2, [pc, #460]	; (8005178 <HAL_DMA_Start_IT+0x4a0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d03b      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a71      	ldr	r2, [pc, #452]	; (800517c <HAL_DMA_Start_IT+0x4a4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d036      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a70      	ldr	r2, [pc, #448]	; (8005180 <HAL_DMA_Start_IT+0x4a8>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d031      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a6e      	ldr	r2, [pc, #440]	; (8005184 <HAL_DMA_Start_IT+0x4ac>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d02c      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a6d      	ldr	r2, [pc, #436]	; (8005188 <HAL_DMA_Start_IT+0x4b0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d027      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a6b      	ldr	r2, [pc, #428]	; (800518c <HAL_DMA_Start_IT+0x4b4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d022      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a6a      	ldr	r2, [pc, #424]	; (8005190 <HAL_DMA_Start_IT+0x4b8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d01d      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a68      	ldr	r2, [pc, #416]	; (8005194 <HAL_DMA_Start_IT+0x4bc>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d018      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a67      	ldr	r2, [pc, #412]	; (8005198 <HAL_DMA_Start_IT+0x4c0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d013      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a65      	ldr	r2, [pc, #404]	; (800519c <HAL_DMA_Start_IT+0x4c4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00e      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a64      	ldr	r2, [pc, #400]	; (80051a0 <HAL_DMA_Start_IT+0x4c8>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d009      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a62      	ldr	r2, [pc, #392]	; (80051a4 <HAL_DMA_Start_IT+0x4cc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d004      	beq.n	8005028 <HAL_DMA_Start_IT+0x350>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a61      	ldr	r2, [pc, #388]	; (80051a8 <HAL_DMA_Start_IT+0x4d0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d101      	bne.n	800502c <HAL_DMA_Start_IT+0x354>
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <HAL_DMA_Start_IT+0x356>
 800502c:	2300      	movs	r3, #0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d01a      	beq.n	8005068 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d007      	beq.n	8005050 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800504a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800504e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005066:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a37      	ldr	r2, [pc, #220]	; (800514c <HAL_DMA_Start_IT+0x474>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d04a      	beq.n	8005108 <HAL_DMA_Start_IT+0x430>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a36      	ldr	r2, [pc, #216]	; (8005150 <HAL_DMA_Start_IT+0x478>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d045      	beq.n	8005108 <HAL_DMA_Start_IT+0x430>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a34      	ldr	r2, [pc, #208]	; (8005154 <HAL_DMA_Start_IT+0x47c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d040      	beq.n	8005108 <HAL_DMA_Start_IT+0x430>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a33      	ldr	r2, [pc, #204]	; (8005158 <HAL_DMA_Start_IT+0x480>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d03b      	beq.n	8005108 <HAL_DMA_Start_IT+0x430>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a31      	ldr	r2, [pc, #196]	; (800515c <HAL_DMA_Start_IT+0x484>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d036      	beq.n	8005108 <HAL_DMA_Start_IT+0x430>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a30      	ldr	r2, [pc, #192]	; (8005160 <HAL_DMA_Start_IT+0x488>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d031      	beq.n	8005108 <HAL_DMA_Start_IT+0x430>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a2e      	ldr	r2, [pc, #184]	; (8005164 <HAL_DMA_Start_IT+0x48c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d02c      	beq.n	8005108 <HAL_DMA_Start_IT+0x430>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a2d      	ldr	r2, [pc, #180]	; (8005168 <HAL_DMA_Start_IT+0x490>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d027      	beq.n	8005108 <HAL_DMA_Start_IT+0x430>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a2b      	ldr	r2, [pc, #172]	; (800516c <HAL_DMA_Start_IT+0x494>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d022      	beq.n	8005108 <HAL_DMA_Start_IT+0x430>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a2a      	ldr	r2, [pc, #168]	; (8005170 <HAL_DMA_Start_IT+0x498>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d01d      	beq.n	8005108 <HAL_DMA_Start_IT+0x430>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a28      	ldr	r2, [pc, #160]	; (8005174 <HAL_DMA_Start_IT+0x49c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d018      	beq.n	8005108 <HAL_DMA_Start_IT+0x430>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a27      	ldr	r2, [pc, #156]	; (8005178 <HAL_DMA_Start_IT+0x4a0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d013      	beq.n	8005108 <HAL_DMA_Start_IT+0x430>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a25      	ldr	r2, [pc, #148]	; (800517c <HAL_DMA_Start_IT+0x4a4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00e      	beq.n	8005108 <HAL_DMA_Start_IT+0x430>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a24      	ldr	r2, [pc, #144]	; (8005180 <HAL_DMA_Start_IT+0x4a8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d009      	beq.n	8005108 <HAL_DMA_Start_IT+0x430>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a22      	ldr	r2, [pc, #136]	; (8005184 <HAL_DMA_Start_IT+0x4ac>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <HAL_DMA_Start_IT+0x430>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a21      	ldr	r2, [pc, #132]	; (8005188 <HAL_DMA_Start_IT+0x4b0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d108      	bne.n	800511a <HAL_DMA_Start_IT+0x442>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	e012      	b.n	8005140 <HAL_DMA_Start_IT+0x468>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0201 	orr.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e009      	b.n	8005140 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005132:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005140:	7dfb      	ldrb	r3, [r7, #23]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40020010 	.word	0x40020010
 8005150:	40020028 	.word	0x40020028
 8005154:	40020040 	.word	0x40020040
 8005158:	40020058 	.word	0x40020058
 800515c:	40020070 	.word	0x40020070
 8005160:	40020088 	.word	0x40020088
 8005164:	400200a0 	.word	0x400200a0
 8005168:	400200b8 	.word	0x400200b8
 800516c:	40020410 	.word	0x40020410
 8005170:	40020428 	.word	0x40020428
 8005174:	40020440 	.word	0x40020440
 8005178:	40020458 	.word	0x40020458
 800517c:	40020470 	.word	0x40020470
 8005180:	40020488 	.word	0x40020488
 8005184:	400204a0 	.word	0x400204a0
 8005188:	400204b8 	.word	0x400204b8
 800518c:	58025408 	.word	0x58025408
 8005190:	5802541c 	.word	0x5802541c
 8005194:	58025430 	.word	0x58025430
 8005198:	58025444 	.word	0x58025444
 800519c:	58025458 	.word	0x58025458
 80051a0:	5802546c 	.word	0x5802546c
 80051a4:	58025480 	.word	0x58025480
 80051a8:	58025494 	.word	0x58025494

080051ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80051b4:	f7fd fb44 	bl	8002840 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e2dc      	b.n	800577e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d008      	beq.n	80051e2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2280      	movs	r2, #128	; 0x80
 80051d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e2cd      	b.n	800577e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a76      	ldr	r2, [pc, #472]	; (80053c0 <HAL_DMA_Abort+0x214>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d04a      	beq.n	8005282 <HAL_DMA_Abort+0xd6>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a74      	ldr	r2, [pc, #464]	; (80053c4 <HAL_DMA_Abort+0x218>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d045      	beq.n	8005282 <HAL_DMA_Abort+0xd6>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a73      	ldr	r2, [pc, #460]	; (80053c8 <HAL_DMA_Abort+0x21c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d040      	beq.n	8005282 <HAL_DMA_Abort+0xd6>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a71      	ldr	r2, [pc, #452]	; (80053cc <HAL_DMA_Abort+0x220>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d03b      	beq.n	8005282 <HAL_DMA_Abort+0xd6>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a70      	ldr	r2, [pc, #448]	; (80053d0 <HAL_DMA_Abort+0x224>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d036      	beq.n	8005282 <HAL_DMA_Abort+0xd6>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a6e      	ldr	r2, [pc, #440]	; (80053d4 <HAL_DMA_Abort+0x228>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d031      	beq.n	8005282 <HAL_DMA_Abort+0xd6>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a6d      	ldr	r2, [pc, #436]	; (80053d8 <HAL_DMA_Abort+0x22c>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d02c      	beq.n	8005282 <HAL_DMA_Abort+0xd6>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a6b      	ldr	r2, [pc, #428]	; (80053dc <HAL_DMA_Abort+0x230>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d027      	beq.n	8005282 <HAL_DMA_Abort+0xd6>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a6a      	ldr	r2, [pc, #424]	; (80053e0 <HAL_DMA_Abort+0x234>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d022      	beq.n	8005282 <HAL_DMA_Abort+0xd6>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a68      	ldr	r2, [pc, #416]	; (80053e4 <HAL_DMA_Abort+0x238>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d01d      	beq.n	8005282 <HAL_DMA_Abort+0xd6>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a67      	ldr	r2, [pc, #412]	; (80053e8 <HAL_DMA_Abort+0x23c>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d018      	beq.n	8005282 <HAL_DMA_Abort+0xd6>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a65      	ldr	r2, [pc, #404]	; (80053ec <HAL_DMA_Abort+0x240>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <HAL_DMA_Abort+0xd6>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a64      	ldr	r2, [pc, #400]	; (80053f0 <HAL_DMA_Abort+0x244>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00e      	beq.n	8005282 <HAL_DMA_Abort+0xd6>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a62      	ldr	r2, [pc, #392]	; (80053f4 <HAL_DMA_Abort+0x248>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d009      	beq.n	8005282 <HAL_DMA_Abort+0xd6>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a61      	ldr	r2, [pc, #388]	; (80053f8 <HAL_DMA_Abort+0x24c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d004      	beq.n	8005282 <HAL_DMA_Abort+0xd6>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a5f      	ldr	r2, [pc, #380]	; (80053fc <HAL_DMA_Abort+0x250>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d101      	bne.n	8005286 <HAL_DMA_Abort+0xda>
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <HAL_DMA_Abort+0xdc>
 8005286:	2300      	movs	r3, #0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d013      	beq.n	80052b4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 021e 	bic.w	r2, r2, #30
 800529a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052aa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	e00a      	b.n	80052ca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 020e 	bic.w	r2, r2, #14
 80052c2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a3c      	ldr	r2, [pc, #240]	; (80053c0 <HAL_DMA_Abort+0x214>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d072      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a3a      	ldr	r2, [pc, #232]	; (80053c4 <HAL_DMA_Abort+0x218>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d06d      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a39      	ldr	r2, [pc, #228]	; (80053c8 <HAL_DMA_Abort+0x21c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d068      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a37      	ldr	r2, [pc, #220]	; (80053cc <HAL_DMA_Abort+0x220>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d063      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a36      	ldr	r2, [pc, #216]	; (80053d0 <HAL_DMA_Abort+0x224>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d05e      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a34      	ldr	r2, [pc, #208]	; (80053d4 <HAL_DMA_Abort+0x228>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d059      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a33      	ldr	r2, [pc, #204]	; (80053d8 <HAL_DMA_Abort+0x22c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d054      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a31      	ldr	r2, [pc, #196]	; (80053dc <HAL_DMA_Abort+0x230>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d04f      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a30      	ldr	r2, [pc, #192]	; (80053e0 <HAL_DMA_Abort+0x234>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d04a      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a2e      	ldr	r2, [pc, #184]	; (80053e4 <HAL_DMA_Abort+0x238>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d045      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a2d      	ldr	r2, [pc, #180]	; (80053e8 <HAL_DMA_Abort+0x23c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d040      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a2b      	ldr	r2, [pc, #172]	; (80053ec <HAL_DMA_Abort+0x240>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d03b      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a2a      	ldr	r2, [pc, #168]	; (80053f0 <HAL_DMA_Abort+0x244>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d036      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a28      	ldr	r2, [pc, #160]	; (80053f4 <HAL_DMA_Abort+0x248>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d031      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a27      	ldr	r2, [pc, #156]	; (80053f8 <HAL_DMA_Abort+0x24c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d02c      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a25      	ldr	r2, [pc, #148]	; (80053fc <HAL_DMA_Abort+0x250>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d027      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a24      	ldr	r2, [pc, #144]	; (8005400 <HAL_DMA_Abort+0x254>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d022      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a22      	ldr	r2, [pc, #136]	; (8005404 <HAL_DMA_Abort+0x258>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d01d      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a21      	ldr	r2, [pc, #132]	; (8005408 <HAL_DMA_Abort+0x25c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d018      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1f      	ldr	r2, [pc, #124]	; (800540c <HAL_DMA_Abort+0x260>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1e      	ldr	r2, [pc, #120]	; (8005410 <HAL_DMA_Abort+0x264>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00e      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1c      	ldr	r2, [pc, #112]	; (8005414 <HAL_DMA_Abort+0x268>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d009      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1b      	ldr	r2, [pc, #108]	; (8005418 <HAL_DMA_Abort+0x26c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d004      	beq.n	80053ba <HAL_DMA_Abort+0x20e>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a19      	ldr	r2, [pc, #100]	; (800541c <HAL_DMA_Abort+0x270>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d132      	bne.n	8005420 <HAL_DMA_Abort+0x274>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e031      	b.n	8005422 <HAL_DMA_Abort+0x276>
 80053be:	bf00      	nop
 80053c0:	40020010 	.word	0x40020010
 80053c4:	40020028 	.word	0x40020028
 80053c8:	40020040 	.word	0x40020040
 80053cc:	40020058 	.word	0x40020058
 80053d0:	40020070 	.word	0x40020070
 80053d4:	40020088 	.word	0x40020088
 80053d8:	400200a0 	.word	0x400200a0
 80053dc:	400200b8 	.word	0x400200b8
 80053e0:	40020410 	.word	0x40020410
 80053e4:	40020428 	.word	0x40020428
 80053e8:	40020440 	.word	0x40020440
 80053ec:	40020458 	.word	0x40020458
 80053f0:	40020470 	.word	0x40020470
 80053f4:	40020488 	.word	0x40020488
 80053f8:	400204a0 	.word	0x400204a0
 80053fc:	400204b8 	.word	0x400204b8
 8005400:	58025408 	.word	0x58025408
 8005404:	5802541c 	.word	0x5802541c
 8005408:	58025430 	.word	0x58025430
 800540c:	58025444 	.word	0x58025444
 8005410:	58025458 	.word	0x58025458
 8005414:	5802546c 	.word	0x5802546c
 8005418:	58025480 	.word	0x58025480
 800541c:	58025494 	.word	0x58025494
 8005420:	2300      	movs	r3, #0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d007      	beq.n	8005436 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005434:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a6d      	ldr	r2, [pc, #436]	; (80055f0 <HAL_DMA_Abort+0x444>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d04a      	beq.n	80054d6 <HAL_DMA_Abort+0x32a>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a6b      	ldr	r2, [pc, #428]	; (80055f4 <HAL_DMA_Abort+0x448>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d045      	beq.n	80054d6 <HAL_DMA_Abort+0x32a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a6a      	ldr	r2, [pc, #424]	; (80055f8 <HAL_DMA_Abort+0x44c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d040      	beq.n	80054d6 <HAL_DMA_Abort+0x32a>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a68      	ldr	r2, [pc, #416]	; (80055fc <HAL_DMA_Abort+0x450>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d03b      	beq.n	80054d6 <HAL_DMA_Abort+0x32a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a67      	ldr	r2, [pc, #412]	; (8005600 <HAL_DMA_Abort+0x454>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d036      	beq.n	80054d6 <HAL_DMA_Abort+0x32a>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a65      	ldr	r2, [pc, #404]	; (8005604 <HAL_DMA_Abort+0x458>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d031      	beq.n	80054d6 <HAL_DMA_Abort+0x32a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a64      	ldr	r2, [pc, #400]	; (8005608 <HAL_DMA_Abort+0x45c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d02c      	beq.n	80054d6 <HAL_DMA_Abort+0x32a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a62      	ldr	r2, [pc, #392]	; (800560c <HAL_DMA_Abort+0x460>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d027      	beq.n	80054d6 <HAL_DMA_Abort+0x32a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a61      	ldr	r2, [pc, #388]	; (8005610 <HAL_DMA_Abort+0x464>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d022      	beq.n	80054d6 <HAL_DMA_Abort+0x32a>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a5f      	ldr	r2, [pc, #380]	; (8005614 <HAL_DMA_Abort+0x468>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d01d      	beq.n	80054d6 <HAL_DMA_Abort+0x32a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a5e      	ldr	r2, [pc, #376]	; (8005618 <HAL_DMA_Abort+0x46c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d018      	beq.n	80054d6 <HAL_DMA_Abort+0x32a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a5c      	ldr	r2, [pc, #368]	; (800561c <HAL_DMA_Abort+0x470>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <HAL_DMA_Abort+0x32a>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a5b      	ldr	r2, [pc, #364]	; (8005620 <HAL_DMA_Abort+0x474>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00e      	beq.n	80054d6 <HAL_DMA_Abort+0x32a>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a59      	ldr	r2, [pc, #356]	; (8005624 <HAL_DMA_Abort+0x478>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d009      	beq.n	80054d6 <HAL_DMA_Abort+0x32a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a58      	ldr	r2, [pc, #352]	; (8005628 <HAL_DMA_Abort+0x47c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d004      	beq.n	80054d6 <HAL_DMA_Abort+0x32a>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a56      	ldr	r2, [pc, #344]	; (800562c <HAL_DMA_Abort+0x480>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d108      	bne.n	80054e8 <HAL_DMA_Abort+0x33c>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0201 	bic.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	e007      	b.n	80054f8 <HAL_DMA_Abort+0x34c>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f022 0201 	bic.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80054f8:	e013      	b.n	8005522 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054fa:	f7fd f9a1 	bl	8002840 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b05      	cmp	r3, #5
 8005506:	d90c      	bls.n	8005522 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2220      	movs	r2, #32
 800550c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2203      	movs	r2, #3
 8005512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e12d      	b.n	800577e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e5      	bne.n	80054fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a2f      	ldr	r2, [pc, #188]	; (80055f0 <HAL_DMA_Abort+0x444>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d04a      	beq.n	80055ce <HAL_DMA_Abort+0x422>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a2d      	ldr	r2, [pc, #180]	; (80055f4 <HAL_DMA_Abort+0x448>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d045      	beq.n	80055ce <HAL_DMA_Abort+0x422>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a2c      	ldr	r2, [pc, #176]	; (80055f8 <HAL_DMA_Abort+0x44c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d040      	beq.n	80055ce <HAL_DMA_Abort+0x422>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a2a      	ldr	r2, [pc, #168]	; (80055fc <HAL_DMA_Abort+0x450>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d03b      	beq.n	80055ce <HAL_DMA_Abort+0x422>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a29      	ldr	r2, [pc, #164]	; (8005600 <HAL_DMA_Abort+0x454>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d036      	beq.n	80055ce <HAL_DMA_Abort+0x422>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a27      	ldr	r2, [pc, #156]	; (8005604 <HAL_DMA_Abort+0x458>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d031      	beq.n	80055ce <HAL_DMA_Abort+0x422>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a26      	ldr	r2, [pc, #152]	; (8005608 <HAL_DMA_Abort+0x45c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d02c      	beq.n	80055ce <HAL_DMA_Abort+0x422>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a24      	ldr	r2, [pc, #144]	; (800560c <HAL_DMA_Abort+0x460>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d027      	beq.n	80055ce <HAL_DMA_Abort+0x422>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a23      	ldr	r2, [pc, #140]	; (8005610 <HAL_DMA_Abort+0x464>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d022      	beq.n	80055ce <HAL_DMA_Abort+0x422>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a21      	ldr	r2, [pc, #132]	; (8005614 <HAL_DMA_Abort+0x468>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d01d      	beq.n	80055ce <HAL_DMA_Abort+0x422>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a20      	ldr	r2, [pc, #128]	; (8005618 <HAL_DMA_Abort+0x46c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d018      	beq.n	80055ce <HAL_DMA_Abort+0x422>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1e      	ldr	r2, [pc, #120]	; (800561c <HAL_DMA_Abort+0x470>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <HAL_DMA_Abort+0x422>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1d      	ldr	r2, [pc, #116]	; (8005620 <HAL_DMA_Abort+0x474>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00e      	beq.n	80055ce <HAL_DMA_Abort+0x422>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1b      	ldr	r2, [pc, #108]	; (8005624 <HAL_DMA_Abort+0x478>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d009      	beq.n	80055ce <HAL_DMA_Abort+0x422>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1a      	ldr	r2, [pc, #104]	; (8005628 <HAL_DMA_Abort+0x47c>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d004      	beq.n	80055ce <HAL_DMA_Abort+0x422>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a18      	ldr	r2, [pc, #96]	; (800562c <HAL_DMA_Abort+0x480>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d101      	bne.n	80055d2 <HAL_DMA_Abort+0x426>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <HAL_DMA_Abort+0x428>
 80055d2:	2300      	movs	r3, #0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d02b      	beq.n	8005630 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e2:	f003 031f 	and.w	r3, r3, #31
 80055e6:	223f      	movs	r2, #63	; 0x3f
 80055e8:	409a      	lsls	r2, r3
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	609a      	str	r2, [r3, #8]
 80055ee:	e02a      	b.n	8005646 <HAL_DMA_Abort+0x49a>
 80055f0:	40020010 	.word	0x40020010
 80055f4:	40020028 	.word	0x40020028
 80055f8:	40020040 	.word	0x40020040
 80055fc:	40020058 	.word	0x40020058
 8005600:	40020070 	.word	0x40020070
 8005604:	40020088 	.word	0x40020088
 8005608:	400200a0 	.word	0x400200a0
 800560c:	400200b8 	.word	0x400200b8
 8005610:	40020410 	.word	0x40020410
 8005614:	40020428 	.word	0x40020428
 8005618:	40020440 	.word	0x40020440
 800561c:	40020458 	.word	0x40020458
 8005620:	40020470 	.word	0x40020470
 8005624:	40020488 	.word	0x40020488
 8005628:	400204a0 	.word	0x400204a0
 800562c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	2201      	movs	r2, #1
 8005640:	409a      	lsls	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a4f      	ldr	r2, [pc, #316]	; (8005788 <HAL_DMA_Abort+0x5dc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d072      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a4d      	ldr	r2, [pc, #308]	; (800578c <HAL_DMA_Abort+0x5e0>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d06d      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a4c      	ldr	r2, [pc, #304]	; (8005790 <HAL_DMA_Abort+0x5e4>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d068      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a4a      	ldr	r2, [pc, #296]	; (8005794 <HAL_DMA_Abort+0x5e8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d063      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a49      	ldr	r2, [pc, #292]	; (8005798 <HAL_DMA_Abort+0x5ec>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d05e      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a47      	ldr	r2, [pc, #284]	; (800579c <HAL_DMA_Abort+0x5f0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d059      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a46      	ldr	r2, [pc, #280]	; (80057a0 <HAL_DMA_Abort+0x5f4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d054      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a44      	ldr	r2, [pc, #272]	; (80057a4 <HAL_DMA_Abort+0x5f8>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d04f      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a43      	ldr	r2, [pc, #268]	; (80057a8 <HAL_DMA_Abort+0x5fc>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d04a      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a41      	ldr	r2, [pc, #260]	; (80057ac <HAL_DMA_Abort+0x600>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d045      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a40      	ldr	r2, [pc, #256]	; (80057b0 <HAL_DMA_Abort+0x604>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d040      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a3e      	ldr	r2, [pc, #248]	; (80057b4 <HAL_DMA_Abort+0x608>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d03b      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a3d      	ldr	r2, [pc, #244]	; (80057b8 <HAL_DMA_Abort+0x60c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d036      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a3b      	ldr	r2, [pc, #236]	; (80057bc <HAL_DMA_Abort+0x610>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d031      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a3a      	ldr	r2, [pc, #232]	; (80057c0 <HAL_DMA_Abort+0x614>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d02c      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a38      	ldr	r2, [pc, #224]	; (80057c4 <HAL_DMA_Abort+0x618>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d027      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a37      	ldr	r2, [pc, #220]	; (80057c8 <HAL_DMA_Abort+0x61c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d022      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a35      	ldr	r2, [pc, #212]	; (80057cc <HAL_DMA_Abort+0x620>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01d      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a34      	ldr	r2, [pc, #208]	; (80057d0 <HAL_DMA_Abort+0x624>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d018      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a32      	ldr	r2, [pc, #200]	; (80057d4 <HAL_DMA_Abort+0x628>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d013      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a31      	ldr	r2, [pc, #196]	; (80057d8 <HAL_DMA_Abort+0x62c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00e      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a2f      	ldr	r2, [pc, #188]	; (80057dc <HAL_DMA_Abort+0x630>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d009      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a2e      	ldr	r2, [pc, #184]	; (80057e0 <HAL_DMA_Abort+0x634>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d004      	beq.n	8005736 <HAL_DMA_Abort+0x58a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a2c      	ldr	r2, [pc, #176]	; (80057e4 <HAL_DMA_Abort+0x638>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d101      	bne.n	800573a <HAL_DMA_Abort+0x58e>
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <HAL_DMA_Abort+0x590>
 800573a:	2300      	movs	r3, #0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d015      	beq.n	800576c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005748:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00c      	beq.n	800576c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800575c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005760:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800576a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40020010 	.word	0x40020010
 800578c:	40020028 	.word	0x40020028
 8005790:	40020040 	.word	0x40020040
 8005794:	40020058 	.word	0x40020058
 8005798:	40020070 	.word	0x40020070
 800579c:	40020088 	.word	0x40020088
 80057a0:	400200a0 	.word	0x400200a0
 80057a4:	400200b8 	.word	0x400200b8
 80057a8:	40020410 	.word	0x40020410
 80057ac:	40020428 	.word	0x40020428
 80057b0:	40020440 	.word	0x40020440
 80057b4:	40020458 	.word	0x40020458
 80057b8:	40020470 	.word	0x40020470
 80057bc:	40020488 	.word	0x40020488
 80057c0:	400204a0 	.word	0x400204a0
 80057c4:	400204b8 	.word	0x400204b8
 80057c8:	58025408 	.word	0x58025408
 80057cc:	5802541c 	.word	0x5802541c
 80057d0:	58025430 	.word	0x58025430
 80057d4:	58025444 	.word	0x58025444
 80057d8:	58025458 	.word	0x58025458
 80057dc:	5802546c 	.word	0x5802546c
 80057e0:	58025480 	.word	0x58025480
 80057e4:	58025494 	.word	0x58025494

080057e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e237      	b.n	8005c6a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d004      	beq.n	8005810 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2280      	movs	r2, #128	; 0x80
 800580a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e22c      	b.n	8005c6a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a5c      	ldr	r2, [pc, #368]	; (8005988 <HAL_DMA_Abort_IT+0x1a0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d04a      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xc8>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a5b      	ldr	r2, [pc, #364]	; (800598c <HAL_DMA_Abort_IT+0x1a4>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d045      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xc8>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a59      	ldr	r2, [pc, #356]	; (8005990 <HAL_DMA_Abort_IT+0x1a8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d040      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xc8>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a58      	ldr	r2, [pc, #352]	; (8005994 <HAL_DMA_Abort_IT+0x1ac>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d03b      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xc8>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a56      	ldr	r2, [pc, #344]	; (8005998 <HAL_DMA_Abort_IT+0x1b0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d036      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xc8>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a55      	ldr	r2, [pc, #340]	; (800599c <HAL_DMA_Abort_IT+0x1b4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d031      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xc8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a53      	ldr	r2, [pc, #332]	; (80059a0 <HAL_DMA_Abort_IT+0x1b8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d02c      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xc8>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a52      	ldr	r2, [pc, #328]	; (80059a4 <HAL_DMA_Abort_IT+0x1bc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d027      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xc8>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a50      	ldr	r2, [pc, #320]	; (80059a8 <HAL_DMA_Abort_IT+0x1c0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d022      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xc8>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a4f      	ldr	r2, [pc, #316]	; (80059ac <HAL_DMA_Abort_IT+0x1c4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d01d      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xc8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a4d      	ldr	r2, [pc, #308]	; (80059b0 <HAL_DMA_Abort_IT+0x1c8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d018      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xc8>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a4c      	ldr	r2, [pc, #304]	; (80059b4 <HAL_DMA_Abort_IT+0x1cc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d013      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xc8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a4a      	ldr	r2, [pc, #296]	; (80059b8 <HAL_DMA_Abort_IT+0x1d0>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00e      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xc8>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a49      	ldr	r2, [pc, #292]	; (80059bc <HAL_DMA_Abort_IT+0x1d4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d009      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xc8>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a47      	ldr	r2, [pc, #284]	; (80059c0 <HAL_DMA_Abort_IT+0x1d8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d004      	beq.n	80058b0 <HAL_DMA_Abort_IT+0xc8>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a46      	ldr	r2, [pc, #280]	; (80059c4 <HAL_DMA_Abort_IT+0x1dc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d101      	bne.n	80058b4 <HAL_DMA_Abort_IT+0xcc>
 80058b0:	2301      	movs	r3, #1
 80058b2:	e000      	b.n	80058b6 <HAL_DMA_Abort_IT+0xce>
 80058b4:	2300      	movs	r3, #0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 8086 	beq.w	80059c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2204      	movs	r2, #4
 80058c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a2f      	ldr	r2, [pc, #188]	; (8005988 <HAL_DMA_Abort_IT+0x1a0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d04a      	beq.n	8005964 <HAL_DMA_Abort_IT+0x17c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a2e      	ldr	r2, [pc, #184]	; (800598c <HAL_DMA_Abort_IT+0x1a4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d045      	beq.n	8005964 <HAL_DMA_Abort_IT+0x17c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a2c      	ldr	r2, [pc, #176]	; (8005990 <HAL_DMA_Abort_IT+0x1a8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d040      	beq.n	8005964 <HAL_DMA_Abort_IT+0x17c>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a2b      	ldr	r2, [pc, #172]	; (8005994 <HAL_DMA_Abort_IT+0x1ac>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d03b      	beq.n	8005964 <HAL_DMA_Abort_IT+0x17c>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a29      	ldr	r2, [pc, #164]	; (8005998 <HAL_DMA_Abort_IT+0x1b0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d036      	beq.n	8005964 <HAL_DMA_Abort_IT+0x17c>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a28      	ldr	r2, [pc, #160]	; (800599c <HAL_DMA_Abort_IT+0x1b4>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d031      	beq.n	8005964 <HAL_DMA_Abort_IT+0x17c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a26      	ldr	r2, [pc, #152]	; (80059a0 <HAL_DMA_Abort_IT+0x1b8>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d02c      	beq.n	8005964 <HAL_DMA_Abort_IT+0x17c>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a25      	ldr	r2, [pc, #148]	; (80059a4 <HAL_DMA_Abort_IT+0x1bc>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d027      	beq.n	8005964 <HAL_DMA_Abort_IT+0x17c>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a23      	ldr	r2, [pc, #140]	; (80059a8 <HAL_DMA_Abort_IT+0x1c0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d022      	beq.n	8005964 <HAL_DMA_Abort_IT+0x17c>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a22      	ldr	r2, [pc, #136]	; (80059ac <HAL_DMA_Abort_IT+0x1c4>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d01d      	beq.n	8005964 <HAL_DMA_Abort_IT+0x17c>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a20      	ldr	r2, [pc, #128]	; (80059b0 <HAL_DMA_Abort_IT+0x1c8>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d018      	beq.n	8005964 <HAL_DMA_Abort_IT+0x17c>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1f      	ldr	r2, [pc, #124]	; (80059b4 <HAL_DMA_Abort_IT+0x1cc>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d013      	beq.n	8005964 <HAL_DMA_Abort_IT+0x17c>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1d      	ldr	r2, [pc, #116]	; (80059b8 <HAL_DMA_Abort_IT+0x1d0>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00e      	beq.n	8005964 <HAL_DMA_Abort_IT+0x17c>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <HAL_DMA_Abort_IT+0x1d4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d009      	beq.n	8005964 <HAL_DMA_Abort_IT+0x17c>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1a      	ldr	r2, [pc, #104]	; (80059c0 <HAL_DMA_Abort_IT+0x1d8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d004      	beq.n	8005964 <HAL_DMA_Abort_IT+0x17c>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <HAL_DMA_Abort_IT+0x1dc>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d108      	bne.n	8005976 <HAL_DMA_Abort_IT+0x18e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0201 	bic.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	e178      	b.n	8005c68 <HAL_DMA_Abort_IT+0x480>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0201 	bic.w	r2, r2, #1
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	e16f      	b.n	8005c68 <HAL_DMA_Abort_IT+0x480>
 8005988:	40020010 	.word	0x40020010
 800598c:	40020028 	.word	0x40020028
 8005990:	40020040 	.word	0x40020040
 8005994:	40020058 	.word	0x40020058
 8005998:	40020070 	.word	0x40020070
 800599c:	40020088 	.word	0x40020088
 80059a0:	400200a0 	.word	0x400200a0
 80059a4:	400200b8 	.word	0x400200b8
 80059a8:	40020410 	.word	0x40020410
 80059ac:	40020428 	.word	0x40020428
 80059b0:	40020440 	.word	0x40020440
 80059b4:	40020458 	.word	0x40020458
 80059b8:	40020470 	.word	0x40020470
 80059bc:	40020488 	.word	0x40020488
 80059c0:	400204a0 	.word	0x400204a0
 80059c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 020e 	bic.w	r2, r2, #14
 80059d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a6c      	ldr	r2, [pc, #432]	; (8005b90 <HAL_DMA_Abort_IT+0x3a8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d04a      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x290>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a6b      	ldr	r2, [pc, #428]	; (8005b94 <HAL_DMA_Abort_IT+0x3ac>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d045      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x290>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a69      	ldr	r2, [pc, #420]	; (8005b98 <HAL_DMA_Abort_IT+0x3b0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d040      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x290>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a68      	ldr	r2, [pc, #416]	; (8005b9c <HAL_DMA_Abort_IT+0x3b4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d03b      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x290>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a66      	ldr	r2, [pc, #408]	; (8005ba0 <HAL_DMA_Abort_IT+0x3b8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d036      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x290>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a65      	ldr	r2, [pc, #404]	; (8005ba4 <HAL_DMA_Abort_IT+0x3bc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d031      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x290>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a63      	ldr	r2, [pc, #396]	; (8005ba8 <HAL_DMA_Abort_IT+0x3c0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d02c      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x290>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a62      	ldr	r2, [pc, #392]	; (8005bac <HAL_DMA_Abort_IT+0x3c4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d027      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x290>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a60      	ldr	r2, [pc, #384]	; (8005bb0 <HAL_DMA_Abort_IT+0x3c8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d022      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x290>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a5f      	ldr	r2, [pc, #380]	; (8005bb4 <HAL_DMA_Abort_IT+0x3cc>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d01d      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x290>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a5d      	ldr	r2, [pc, #372]	; (8005bb8 <HAL_DMA_Abort_IT+0x3d0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d018      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x290>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a5c      	ldr	r2, [pc, #368]	; (8005bbc <HAL_DMA_Abort_IT+0x3d4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d013      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x290>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a5a      	ldr	r2, [pc, #360]	; (8005bc0 <HAL_DMA_Abort_IT+0x3d8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00e      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x290>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a59      	ldr	r2, [pc, #356]	; (8005bc4 <HAL_DMA_Abort_IT+0x3dc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d009      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x290>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a57      	ldr	r2, [pc, #348]	; (8005bc8 <HAL_DMA_Abort_IT+0x3e0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d004      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x290>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a56      	ldr	r2, [pc, #344]	; (8005bcc <HAL_DMA_Abort_IT+0x3e4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d108      	bne.n	8005a8a <HAL_DMA_Abort_IT+0x2a2>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0201 	bic.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e007      	b.n	8005a9a <HAL_DMA_Abort_IT+0x2b2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0201 	bic.w	r2, r2, #1
 8005a98:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a3c      	ldr	r2, [pc, #240]	; (8005b90 <HAL_DMA_Abort_IT+0x3a8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d072      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a3a      	ldr	r2, [pc, #232]	; (8005b94 <HAL_DMA_Abort_IT+0x3ac>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d06d      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a39      	ldr	r2, [pc, #228]	; (8005b98 <HAL_DMA_Abort_IT+0x3b0>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d068      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a37      	ldr	r2, [pc, #220]	; (8005b9c <HAL_DMA_Abort_IT+0x3b4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d063      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a36      	ldr	r2, [pc, #216]	; (8005ba0 <HAL_DMA_Abort_IT+0x3b8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d05e      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a34      	ldr	r2, [pc, #208]	; (8005ba4 <HAL_DMA_Abort_IT+0x3bc>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d059      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a33      	ldr	r2, [pc, #204]	; (8005ba8 <HAL_DMA_Abort_IT+0x3c0>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d054      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a31      	ldr	r2, [pc, #196]	; (8005bac <HAL_DMA_Abort_IT+0x3c4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d04f      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a30      	ldr	r2, [pc, #192]	; (8005bb0 <HAL_DMA_Abort_IT+0x3c8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d04a      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a2e      	ldr	r2, [pc, #184]	; (8005bb4 <HAL_DMA_Abort_IT+0x3cc>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d045      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a2d      	ldr	r2, [pc, #180]	; (8005bb8 <HAL_DMA_Abort_IT+0x3d0>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d040      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a2b      	ldr	r2, [pc, #172]	; (8005bbc <HAL_DMA_Abort_IT+0x3d4>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d03b      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a2a      	ldr	r2, [pc, #168]	; (8005bc0 <HAL_DMA_Abort_IT+0x3d8>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d036      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a28      	ldr	r2, [pc, #160]	; (8005bc4 <HAL_DMA_Abort_IT+0x3dc>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d031      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a27      	ldr	r2, [pc, #156]	; (8005bc8 <HAL_DMA_Abort_IT+0x3e0>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d02c      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a25      	ldr	r2, [pc, #148]	; (8005bcc <HAL_DMA_Abort_IT+0x3e4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d027      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a24      	ldr	r2, [pc, #144]	; (8005bd0 <HAL_DMA_Abort_IT+0x3e8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d022      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a22      	ldr	r2, [pc, #136]	; (8005bd4 <HAL_DMA_Abort_IT+0x3ec>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d01d      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a21      	ldr	r2, [pc, #132]	; (8005bd8 <HAL_DMA_Abort_IT+0x3f0>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d018      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1f      	ldr	r2, [pc, #124]	; (8005bdc <HAL_DMA_Abort_IT+0x3f4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d013      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1e      	ldr	r2, [pc, #120]	; (8005be0 <HAL_DMA_Abort_IT+0x3f8>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00e      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <HAL_DMA_Abort_IT+0x3fc>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d009      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a1b      	ldr	r2, [pc, #108]	; (8005be8 <HAL_DMA_Abort_IT+0x400>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d004      	beq.n	8005b8a <HAL_DMA_Abort_IT+0x3a2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a19      	ldr	r2, [pc, #100]	; (8005bec <HAL_DMA_Abort_IT+0x404>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d132      	bne.n	8005bf0 <HAL_DMA_Abort_IT+0x408>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e031      	b.n	8005bf2 <HAL_DMA_Abort_IT+0x40a>
 8005b8e:	bf00      	nop
 8005b90:	40020010 	.word	0x40020010
 8005b94:	40020028 	.word	0x40020028
 8005b98:	40020040 	.word	0x40020040
 8005b9c:	40020058 	.word	0x40020058
 8005ba0:	40020070 	.word	0x40020070
 8005ba4:	40020088 	.word	0x40020088
 8005ba8:	400200a0 	.word	0x400200a0
 8005bac:	400200b8 	.word	0x400200b8
 8005bb0:	40020410 	.word	0x40020410
 8005bb4:	40020428 	.word	0x40020428
 8005bb8:	40020440 	.word	0x40020440
 8005bbc:	40020458 	.word	0x40020458
 8005bc0:	40020470 	.word	0x40020470
 8005bc4:	40020488 	.word	0x40020488
 8005bc8:	400204a0 	.word	0x400204a0
 8005bcc:	400204b8 	.word	0x400204b8
 8005bd0:	58025408 	.word	0x58025408
 8005bd4:	5802541c 	.word	0x5802541c
 8005bd8:	58025430 	.word	0x58025430
 8005bdc:	58025444 	.word	0x58025444
 8005be0:	58025458 	.word	0x58025458
 8005be4:	5802546c 	.word	0x5802546c
 8005be8:	58025480 	.word	0x58025480
 8005bec:	58025494 	.word	0x58025494
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d028      	beq.n	8005c48 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c04:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c10:	f003 031f 	and.w	r3, r3, #31
 8005c14:	2201      	movs	r2, #1
 8005c16:	409a      	lsls	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c24:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00c      	beq.n	8005c48 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c3c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c46:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop

08005c74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08a      	sub	sp, #40	; 0x28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c80:	4b67      	ldr	r3, [pc, #412]	; (8005e20 <HAL_DMA_IRQHandler+0x1ac>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a67      	ldr	r2, [pc, #412]	; (8005e24 <HAL_DMA_IRQHandler+0x1b0>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	0a9b      	lsrs	r3, r3, #10
 8005c8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c92:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c98:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a5f      	ldr	r2, [pc, #380]	; (8005e28 <HAL_DMA_IRQHandler+0x1b4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d04a      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xd2>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a5d      	ldr	r2, [pc, #372]	; (8005e2c <HAL_DMA_IRQHandler+0x1b8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d045      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xd2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a5c      	ldr	r2, [pc, #368]	; (8005e30 <HAL_DMA_IRQHandler+0x1bc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d040      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xd2>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a5a      	ldr	r2, [pc, #360]	; (8005e34 <HAL_DMA_IRQHandler+0x1c0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d03b      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xd2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a59      	ldr	r2, [pc, #356]	; (8005e38 <HAL_DMA_IRQHandler+0x1c4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d036      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xd2>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a57      	ldr	r2, [pc, #348]	; (8005e3c <HAL_DMA_IRQHandler+0x1c8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d031      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xd2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a56      	ldr	r2, [pc, #344]	; (8005e40 <HAL_DMA_IRQHandler+0x1cc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d02c      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xd2>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a54      	ldr	r2, [pc, #336]	; (8005e44 <HAL_DMA_IRQHandler+0x1d0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d027      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xd2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a53      	ldr	r2, [pc, #332]	; (8005e48 <HAL_DMA_IRQHandler+0x1d4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d022      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xd2>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a51      	ldr	r2, [pc, #324]	; (8005e4c <HAL_DMA_IRQHandler+0x1d8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d01d      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xd2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a50      	ldr	r2, [pc, #320]	; (8005e50 <HAL_DMA_IRQHandler+0x1dc>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d018      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xd2>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a4e      	ldr	r2, [pc, #312]	; (8005e54 <HAL_DMA_IRQHandler+0x1e0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d013      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xd2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a4d      	ldr	r2, [pc, #308]	; (8005e58 <HAL_DMA_IRQHandler+0x1e4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00e      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xd2>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a4b      	ldr	r2, [pc, #300]	; (8005e5c <HAL_DMA_IRQHandler+0x1e8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d009      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xd2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a4a      	ldr	r2, [pc, #296]	; (8005e60 <HAL_DMA_IRQHandler+0x1ec>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d004      	beq.n	8005d46 <HAL_DMA_IRQHandler+0xd2>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a48      	ldr	r2, [pc, #288]	; (8005e64 <HAL_DMA_IRQHandler+0x1f0>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d101      	bne.n	8005d4a <HAL_DMA_IRQHandler+0xd6>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e000      	b.n	8005d4c <HAL_DMA_IRQHandler+0xd8>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 842b 	beq.w	80065a8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d56:	f003 031f 	and.w	r3, r3, #31
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	409a      	lsls	r2, r3
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	4013      	ands	r3, r2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 80a2 	beq.w	8005eac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a2e      	ldr	r2, [pc, #184]	; (8005e28 <HAL_DMA_IRQHandler+0x1b4>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d04a      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x194>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a2d      	ldr	r2, [pc, #180]	; (8005e2c <HAL_DMA_IRQHandler+0x1b8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d045      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x194>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a2b      	ldr	r2, [pc, #172]	; (8005e30 <HAL_DMA_IRQHandler+0x1bc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d040      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x194>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a2a      	ldr	r2, [pc, #168]	; (8005e34 <HAL_DMA_IRQHandler+0x1c0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d03b      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x194>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a28      	ldr	r2, [pc, #160]	; (8005e38 <HAL_DMA_IRQHandler+0x1c4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d036      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x194>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a27      	ldr	r2, [pc, #156]	; (8005e3c <HAL_DMA_IRQHandler+0x1c8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d031      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x194>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a25      	ldr	r2, [pc, #148]	; (8005e40 <HAL_DMA_IRQHandler+0x1cc>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d02c      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x194>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a24      	ldr	r2, [pc, #144]	; (8005e44 <HAL_DMA_IRQHandler+0x1d0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d027      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x194>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a22      	ldr	r2, [pc, #136]	; (8005e48 <HAL_DMA_IRQHandler+0x1d4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d022      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x194>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a21      	ldr	r2, [pc, #132]	; (8005e4c <HAL_DMA_IRQHandler+0x1d8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d01d      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x194>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a1f      	ldr	r2, [pc, #124]	; (8005e50 <HAL_DMA_IRQHandler+0x1dc>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d018      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x194>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1e      	ldr	r2, [pc, #120]	; (8005e54 <HAL_DMA_IRQHandler+0x1e0>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d013      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x194>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1c      	ldr	r2, [pc, #112]	; (8005e58 <HAL_DMA_IRQHandler+0x1e4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00e      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x194>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1b      	ldr	r2, [pc, #108]	; (8005e5c <HAL_DMA_IRQHandler+0x1e8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d009      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x194>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a19      	ldr	r2, [pc, #100]	; (8005e60 <HAL_DMA_IRQHandler+0x1ec>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d004      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x194>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a18      	ldr	r2, [pc, #96]	; (8005e64 <HAL_DMA_IRQHandler+0x1f0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d12f      	bne.n	8005e68 <HAL_DMA_IRQHandler+0x1f4>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0304 	and.w	r3, r3, #4
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	bf14      	ite	ne
 8005e16:	2301      	movne	r3, #1
 8005e18:	2300      	moveq	r3, #0
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	e02e      	b.n	8005e7c <HAL_DMA_IRQHandler+0x208>
 8005e1e:	bf00      	nop
 8005e20:	24000000 	.word	0x24000000
 8005e24:	1b4e81b5 	.word	0x1b4e81b5
 8005e28:	40020010 	.word	0x40020010
 8005e2c:	40020028 	.word	0x40020028
 8005e30:	40020040 	.word	0x40020040
 8005e34:	40020058 	.word	0x40020058
 8005e38:	40020070 	.word	0x40020070
 8005e3c:	40020088 	.word	0x40020088
 8005e40:	400200a0 	.word	0x400200a0
 8005e44:	400200b8 	.word	0x400200b8
 8005e48:	40020410 	.word	0x40020410
 8005e4c:	40020428 	.word	0x40020428
 8005e50:	40020440 	.word	0x40020440
 8005e54:	40020458 	.word	0x40020458
 8005e58:	40020470 	.word	0x40020470
 8005e5c:	40020488 	.word	0x40020488
 8005e60:	400204a0 	.word	0x400204a0
 8005e64:	400204b8 	.word	0x400204b8
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0308 	and.w	r3, r3, #8
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bf14      	ite	ne
 8005e76:	2301      	movne	r3, #1
 8005e78:	2300      	moveq	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d015      	beq.n	8005eac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0204 	bic.w	r2, r2, #4
 8005e8e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e94:	f003 031f 	and.w	r3, r3, #31
 8005e98:	2208      	movs	r2, #8
 8005e9a:	409a      	lsls	r2, r3
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea4:	f043 0201 	orr.w	r2, r3, #1
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb0:	f003 031f 	and.w	r3, r3, #31
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d06e      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a69      	ldr	r2, [pc, #420]	; (800606c <HAL_DMA_IRQHandler+0x3f8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d04a      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x2ee>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a67      	ldr	r2, [pc, #412]	; (8006070 <HAL_DMA_IRQHandler+0x3fc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d045      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x2ee>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a66      	ldr	r2, [pc, #408]	; (8006074 <HAL_DMA_IRQHandler+0x400>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d040      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x2ee>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a64      	ldr	r2, [pc, #400]	; (8006078 <HAL_DMA_IRQHandler+0x404>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d03b      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x2ee>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a63      	ldr	r2, [pc, #396]	; (800607c <HAL_DMA_IRQHandler+0x408>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d036      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x2ee>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a61      	ldr	r2, [pc, #388]	; (8006080 <HAL_DMA_IRQHandler+0x40c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d031      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x2ee>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a60      	ldr	r2, [pc, #384]	; (8006084 <HAL_DMA_IRQHandler+0x410>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d02c      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x2ee>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a5e      	ldr	r2, [pc, #376]	; (8006088 <HAL_DMA_IRQHandler+0x414>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d027      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x2ee>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a5d      	ldr	r2, [pc, #372]	; (800608c <HAL_DMA_IRQHandler+0x418>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d022      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x2ee>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a5b      	ldr	r2, [pc, #364]	; (8006090 <HAL_DMA_IRQHandler+0x41c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d01d      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x2ee>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a5a      	ldr	r2, [pc, #360]	; (8006094 <HAL_DMA_IRQHandler+0x420>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d018      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x2ee>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a58      	ldr	r2, [pc, #352]	; (8006098 <HAL_DMA_IRQHandler+0x424>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d013      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x2ee>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a57      	ldr	r2, [pc, #348]	; (800609c <HAL_DMA_IRQHandler+0x428>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00e      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x2ee>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a55      	ldr	r2, [pc, #340]	; (80060a0 <HAL_DMA_IRQHandler+0x42c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d009      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x2ee>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a54      	ldr	r2, [pc, #336]	; (80060a4 <HAL_DMA_IRQHandler+0x430>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d004      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x2ee>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a52      	ldr	r2, [pc, #328]	; (80060a8 <HAL_DMA_IRQHandler+0x434>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d10a      	bne.n	8005f78 <HAL_DMA_IRQHandler+0x304>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bf14      	ite	ne
 8005f70:	2301      	movne	r3, #1
 8005f72:	2300      	moveq	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	e003      	b.n	8005f80 <HAL_DMA_IRQHandler+0x30c>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00d      	beq.n	8005fa0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f88:	f003 031f 	and.w	r3, r3, #31
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	409a      	lsls	r2, r3
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f98:	f043 0202 	orr.w	r2, r3, #2
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa4:	f003 031f 	and.w	r3, r3, #31
 8005fa8:	2204      	movs	r2, #4
 8005faa:	409a      	lsls	r2, r3
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 808f 	beq.w	80060d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a2c      	ldr	r2, [pc, #176]	; (800606c <HAL_DMA_IRQHandler+0x3f8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d04a      	beq.n	8006056 <HAL_DMA_IRQHandler+0x3e2>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a2a      	ldr	r2, [pc, #168]	; (8006070 <HAL_DMA_IRQHandler+0x3fc>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d045      	beq.n	8006056 <HAL_DMA_IRQHandler+0x3e2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a29      	ldr	r2, [pc, #164]	; (8006074 <HAL_DMA_IRQHandler+0x400>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d040      	beq.n	8006056 <HAL_DMA_IRQHandler+0x3e2>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a27      	ldr	r2, [pc, #156]	; (8006078 <HAL_DMA_IRQHandler+0x404>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d03b      	beq.n	8006056 <HAL_DMA_IRQHandler+0x3e2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a26      	ldr	r2, [pc, #152]	; (800607c <HAL_DMA_IRQHandler+0x408>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d036      	beq.n	8006056 <HAL_DMA_IRQHandler+0x3e2>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a24      	ldr	r2, [pc, #144]	; (8006080 <HAL_DMA_IRQHandler+0x40c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d031      	beq.n	8006056 <HAL_DMA_IRQHandler+0x3e2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a23      	ldr	r2, [pc, #140]	; (8006084 <HAL_DMA_IRQHandler+0x410>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d02c      	beq.n	8006056 <HAL_DMA_IRQHandler+0x3e2>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a21      	ldr	r2, [pc, #132]	; (8006088 <HAL_DMA_IRQHandler+0x414>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d027      	beq.n	8006056 <HAL_DMA_IRQHandler+0x3e2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a20      	ldr	r2, [pc, #128]	; (800608c <HAL_DMA_IRQHandler+0x418>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d022      	beq.n	8006056 <HAL_DMA_IRQHandler+0x3e2>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a1e      	ldr	r2, [pc, #120]	; (8006090 <HAL_DMA_IRQHandler+0x41c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01d      	beq.n	8006056 <HAL_DMA_IRQHandler+0x3e2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a1d      	ldr	r2, [pc, #116]	; (8006094 <HAL_DMA_IRQHandler+0x420>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d018      	beq.n	8006056 <HAL_DMA_IRQHandler+0x3e2>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a1b      	ldr	r2, [pc, #108]	; (8006098 <HAL_DMA_IRQHandler+0x424>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <HAL_DMA_IRQHandler+0x3e2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a1a      	ldr	r2, [pc, #104]	; (800609c <HAL_DMA_IRQHandler+0x428>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00e      	beq.n	8006056 <HAL_DMA_IRQHandler+0x3e2>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a18      	ldr	r2, [pc, #96]	; (80060a0 <HAL_DMA_IRQHandler+0x42c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d009      	beq.n	8006056 <HAL_DMA_IRQHandler+0x3e2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a17      	ldr	r2, [pc, #92]	; (80060a4 <HAL_DMA_IRQHandler+0x430>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d004      	beq.n	8006056 <HAL_DMA_IRQHandler+0x3e2>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a15      	ldr	r2, [pc, #84]	; (80060a8 <HAL_DMA_IRQHandler+0x434>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d12a      	bne.n	80060ac <HAL_DMA_IRQHandler+0x438>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	bf14      	ite	ne
 8006064:	2301      	movne	r3, #1
 8006066:	2300      	moveq	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	e023      	b.n	80060b4 <HAL_DMA_IRQHandler+0x440>
 800606c:	40020010 	.word	0x40020010
 8006070:	40020028 	.word	0x40020028
 8006074:	40020040 	.word	0x40020040
 8006078:	40020058 	.word	0x40020058
 800607c:	40020070 	.word	0x40020070
 8006080:	40020088 	.word	0x40020088
 8006084:	400200a0 	.word	0x400200a0
 8006088:	400200b8 	.word	0x400200b8
 800608c:	40020410 	.word	0x40020410
 8006090:	40020428 	.word	0x40020428
 8006094:	40020440 	.word	0x40020440
 8006098:	40020458 	.word	0x40020458
 800609c:	40020470 	.word	0x40020470
 80060a0:	40020488 	.word	0x40020488
 80060a4:	400204a0 	.word	0x400204a0
 80060a8:	400204b8 	.word	0x400204b8
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2300      	movs	r3, #0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00d      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	2204      	movs	r2, #4
 80060c2:	409a      	lsls	r2, r3
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060cc:	f043 0204 	orr.w	r2, r3, #4
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d8:	f003 031f 	and.w	r3, r3, #31
 80060dc:	2210      	movs	r2, #16
 80060de:	409a      	lsls	r2, r3
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 80a6 	beq.w	8006236 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a85      	ldr	r2, [pc, #532]	; (8006304 <HAL_DMA_IRQHandler+0x690>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d04a      	beq.n	800618a <HAL_DMA_IRQHandler+0x516>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a83      	ldr	r2, [pc, #524]	; (8006308 <HAL_DMA_IRQHandler+0x694>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d045      	beq.n	800618a <HAL_DMA_IRQHandler+0x516>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a82      	ldr	r2, [pc, #520]	; (800630c <HAL_DMA_IRQHandler+0x698>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d040      	beq.n	800618a <HAL_DMA_IRQHandler+0x516>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a80      	ldr	r2, [pc, #512]	; (8006310 <HAL_DMA_IRQHandler+0x69c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d03b      	beq.n	800618a <HAL_DMA_IRQHandler+0x516>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a7f      	ldr	r2, [pc, #508]	; (8006314 <HAL_DMA_IRQHandler+0x6a0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d036      	beq.n	800618a <HAL_DMA_IRQHandler+0x516>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a7d      	ldr	r2, [pc, #500]	; (8006318 <HAL_DMA_IRQHandler+0x6a4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d031      	beq.n	800618a <HAL_DMA_IRQHandler+0x516>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a7c      	ldr	r2, [pc, #496]	; (800631c <HAL_DMA_IRQHandler+0x6a8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d02c      	beq.n	800618a <HAL_DMA_IRQHandler+0x516>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a7a      	ldr	r2, [pc, #488]	; (8006320 <HAL_DMA_IRQHandler+0x6ac>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d027      	beq.n	800618a <HAL_DMA_IRQHandler+0x516>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a79      	ldr	r2, [pc, #484]	; (8006324 <HAL_DMA_IRQHandler+0x6b0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d022      	beq.n	800618a <HAL_DMA_IRQHandler+0x516>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a77      	ldr	r2, [pc, #476]	; (8006328 <HAL_DMA_IRQHandler+0x6b4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d01d      	beq.n	800618a <HAL_DMA_IRQHandler+0x516>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a76      	ldr	r2, [pc, #472]	; (800632c <HAL_DMA_IRQHandler+0x6b8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d018      	beq.n	800618a <HAL_DMA_IRQHandler+0x516>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a74      	ldr	r2, [pc, #464]	; (8006330 <HAL_DMA_IRQHandler+0x6bc>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d013      	beq.n	800618a <HAL_DMA_IRQHandler+0x516>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a73      	ldr	r2, [pc, #460]	; (8006334 <HAL_DMA_IRQHandler+0x6c0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00e      	beq.n	800618a <HAL_DMA_IRQHandler+0x516>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a71      	ldr	r2, [pc, #452]	; (8006338 <HAL_DMA_IRQHandler+0x6c4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d009      	beq.n	800618a <HAL_DMA_IRQHandler+0x516>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a70      	ldr	r2, [pc, #448]	; (800633c <HAL_DMA_IRQHandler+0x6c8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d004      	beq.n	800618a <HAL_DMA_IRQHandler+0x516>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a6e      	ldr	r2, [pc, #440]	; (8006340 <HAL_DMA_IRQHandler+0x6cc>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d10a      	bne.n	80061a0 <HAL_DMA_IRQHandler+0x52c>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0308 	and.w	r3, r3, #8
 8006194:	2b00      	cmp	r3, #0
 8006196:	bf14      	ite	ne
 8006198:	2301      	movne	r3, #1
 800619a:	2300      	moveq	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	e009      	b.n	80061b4 <HAL_DMA_IRQHandler+0x540>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 0304 	and.w	r3, r3, #4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bf14      	ite	ne
 80061ae:	2301      	movne	r3, #1
 80061b0:	2300      	moveq	r3, #0
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d03e      	beq.n	8006236 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061bc:	f003 031f 	and.w	r3, r3, #31
 80061c0:	2210      	movs	r2, #16
 80061c2:	409a      	lsls	r2, r3
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d018      	beq.n	8006208 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d108      	bne.n	80061f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d024      	beq.n	8006236 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	4798      	blx	r3
 80061f4:	e01f      	b.n	8006236 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d01b      	beq.n	8006236 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	4798      	blx	r3
 8006206:	e016      	b.n	8006236 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006212:	2b00      	cmp	r3, #0
 8006214:	d107      	bne.n	8006226 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0208 	bic.w	r2, r2, #8
 8006224:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800623a:	f003 031f 	and.w	r3, r3, #31
 800623e:	2220      	movs	r2, #32
 8006240:	409a      	lsls	r2, r3
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	4013      	ands	r3, r2
 8006246:	2b00      	cmp	r3, #0
 8006248:	f000 8110 	beq.w	800646c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a2c      	ldr	r2, [pc, #176]	; (8006304 <HAL_DMA_IRQHandler+0x690>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d04a      	beq.n	80062ec <HAL_DMA_IRQHandler+0x678>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2b      	ldr	r2, [pc, #172]	; (8006308 <HAL_DMA_IRQHandler+0x694>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d045      	beq.n	80062ec <HAL_DMA_IRQHandler+0x678>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a29      	ldr	r2, [pc, #164]	; (800630c <HAL_DMA_IRQHandler+0x698>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d040      	beq.n	80062ec <HAL_DMA_IRQHandler+0x678>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a28      	ldr	r2, [pc, #160]	; (8006310 <HAL_DMA_IRQHandler+0x69c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d03b      	beq.n	80062ec <HAL_DMA_IRQHandler+0x678>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a26      	ldr	r2, [pc, #152]	; (8006314 <HAL_DMA_IRQHandler+0x6a0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d036      	beq.n	80062ec <HAL_DMA_IRQHandler+0x678>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a25      	ldr	r2, [pc, #148]	; (8006318 <HAL_DMA_IRQHandler+0x6a4>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d031      	beq.n	80062ec <HAL_DMA_IRQHandler+0x678>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a23      	ldr	r2, [pc, #140]	; (800631c <HAL_DMA_IRQHandler+0x6a8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d02c      	beq.n	80062ec <HAL_DMA_IRQHandler+0x678>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a22      	ldr	r2, [pc, #136]	; (8006320 <HAL_DMA_IRQHandler+0x6ac>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d027      	beq.n	80062ec <HAL_DMA_IRQHandler+0x678>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a20      	ldr	r2, [pc, #128]	; (8006324 <HAL_DMA_IRQHandler+0x6b0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d022      	beq.n	80062ec <HAL_DMA_IRQHandler+0x678>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1f      	ldr	r2, [pc, #124]	; (8006328 <HAL_DMA_IRQHandler+0x6b4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d01d      	beq.n	80062ec <HAL_DMA_IRQHandler+0x678>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1d      	ldr	r2, [pc, #116]	; (800632c <HAL_DMA_IRQHandler+0x6b8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d018      	beq.n	80062ec <HAL_DMA_IRQHandler+0x678>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a1c      	ldr	r2, [pc, #112]	; (8006330 <HAL_DMA_IRQHandler+0x6bc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d013      	beq.n	80062ec <HAL_DMA_IRQHandler+0x678>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1a      	ldr	r2, [pc, #104]	; (8006334 <HAL_DMA_IRQHandler+0x6c0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00e      	beq.n	80062ec <HAL_DMA_IRQHandler+0x678>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a19      	ldr	r2, [pc, #100]	; (8006338 <HAL_DMA_IRQHandler+0x6c4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d009      	beq.n	80062ec <HAL_DMA_IRQHandler+0x678>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a17      	ldr	r2, [pc, #92]	; (800633c <HAL_DMA_IRQHandler+0x6c8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <HAL_DMA_IRQHandler+0x678>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a16      	ldr	r2, [pc, #88]	; (8006340 <HAL_DMA_IRQHandler+0x6cc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d12b      	bne.n	8006344 <HAL_DMA_IRQHandler+0x6d0>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0310 	and.w	r3, r3, #16
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	bf14      	ite	ne
 80062fa:	2301      	movne	r3, #1
 80062fc:	2300      	moveq	r3, #0
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	e02a      	b.n	8006358 <HAL_DMA_IRQHandler+0x6e4>
 8006302:	bf00      	nop
 8006304:	40020010 	.word	0x40020010
 8006308:	40020028 	.word	0x40020028
 800630c:	40020040 	.word	0x40020040
 8006310:	40020058 	.word	0x40020058
 8006314:	40020070 	.word	0x40020070
 8006318:	40020088 	.word	0x40020088
 800631c:	400200a0 	.word	0x400200a0
 8006320:	400200b8 	.word	0x400200b8
 8006324:	40020410 	.word	0x40020410
 8006328:	40020428 	.word	0x40020428
 800632c:	40020440 	.word	0x40020440
 8006330:	40020458 	.word	0x40020458
 8006334:	40020470 	.word	0x40020470
 8006338:	40020488 	.word	0x40020488
 800633c:	400204a0 	.word	0x400204a0
 8006340:	400204b8 	.word	0x400204b8
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	bf14      	ite	ne
 8006352:	2301      	movne	r3, #1
 8006354:	2300      	moveq	r3, #0
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 8087 	beq.w	800646c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006362:	f003 031f 	and.w	r3, r3, #31
 8006366:	2220      	movs	r2, #32
 8006368:	409a      	lsls	r2, r3
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b04      	cmp	r3, #4
 8006378:	d139      	bne.n	80063ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0216 	bic.w	r2, r2, #22
 8006388:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695a      	ldr	r2, [r3, #20]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006398:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d103      	bne.n	80063aa <HAL_DMA_IRQHandler+0x736>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d007      	beq.n	80063ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f022 0208 	bic.w	r2, r2, #8
 80063b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063be:	f003 031f 	and.w	r3, r3, #31
 80063c2:	223f      	movs	r2, #63	; 0x3f
 80063c4:	409a      	lsls	r2, r3
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 834a 	beq.w	8006a78 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	4798      	blx	r3
          }
          return;
 80063ec:	e344      	b.n	8006a78 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d018      	beq.n	800642e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d108      	bne.n	800641c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640e:	2b00      	cmp	r3, #0
 8006410:	d02c      	beq.n	800646c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
 800641a:	e027      	b.n	800646c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006420:	2b00      	cmp	r3, #0
 8006422:	d023      	beq.n	800646c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	4798      	blx	r3
 800642c:	e01e      	b.n	800646c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10f      	bne.n	800645c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0210 	bic.w	r2, r2, #16
 800644a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 8306 	beq.w	8006a82 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b00      	cmp	r3, #0
 8006480:	f000 8088 	beq.w	8006594 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2204      	movs	r2, #4
 8006488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a7a      	ldr	r2, [pc, #488]	; (800667c <HAL_DMA_IRQHandler+0xa08>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d04a      	beq.n	800652c <HAL_DMA_IRQHandler+0x8b8>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a79      	ldr	r2, [pc, #484]	; (8006680 <HAL_DMA_IRQHandler+0xa0c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d045      	beq.n	800652c <HAL_DMA_IRQHandler+0x8b8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a77      	ldr	r2, [pc, #476]	; (8006684 <HAL_DMA_IRQHandler+0xa10>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d040      	beq.n	800652c <HAL_DMA_IRQHandler+0x8b8>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a76      	ldr	r2, [pc, #472]	; (8006688 <HAL_DMA_IRQHandler+0xa14>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d03b      	beq.n	800652c <HAL_DMA_IRQHandler+0x8b8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a74      	ldr	r2, [pc, #464]	; (800668c <HAL_DMA_IRQHandler+0xa18>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d036      	beq.n	800652c <HAL_DMA_IRQHandler+0x8b8>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a73      	ldr	r2, [pc, #460]	; (8006690 <HAL_DMA_IRQHandler+0xa1c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d031      	beq.n	800652c <HAL_DMA_IRQHandler+0x8b8>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a71      	ldr	r2, [pc, #452]	; (8006694 <HAL_DMA_IRQHandler+0xa20>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d02c      	beq.n	800652c <HAL_DMA_IRQHandler+0x8b8>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a70      	ldr	r2, [pc, #448]	; (8006698 <HAL_DMA_IRQHandler+0xa24>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d027      	beq.n	800652c <HAL_DMA_IRQHandler+0x8b8>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a6e      	ldr	r2, [pc, #440]	; (800669c <HAL_DMA_IRQHandler+0xa28>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d022      	beq.n	800652c <HAL_DMA_IRQHandler+0x8b8>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a6d      	ldr	r2, [pc, #436]	; (80066a0 <HAL_DMA_IRQHandler+0xa2c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d01d      	beq.n	800652c <HAL_DMA_IRQHandler+0x8b8>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a6b      	ldr	r2, [pc, #428]	; (80066a4 <HAL_DMA_IRQHandler+0xa30>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d018      	beq.n	800652c <HAL_DMA_IRQHandler+0x8b8>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a6a      	ldr	r2, [pc, #424]	; (80066a8 <HAL_DMA_IRQHandler+0xa34>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d013      	beq.n	800652c <HAL_DMA_IRQHandler+0x8b8>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a68      	ldr	r2, [pc, #416]	; (80066ac <HAL_DMA_IRQHandler+0xa38>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00e      	beq.n	800652c <HAL_DMA_IRQHandler+0x8b8>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a67      	ldr	r2, [pc, #412]	; (80066b0 <HAL_DMA_IRQHandler+0xa3c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d009      	beq.n	800652c <HAL_DMA_IRQHandler+0x8b8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a65      	ldr	r2, [pc, #404]	; (80066b4 <HAL_DMA_IRQHandler+0xa40>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d004      	beq.n	800652c <HAL_DMA_IRQHandler+0x8b8>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a64      	ldr	r2, [pc, #400]	; (80066b8 <HAL_DMA_IRQHandler+0xa44>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d108      	bne.n	800653e <HAL_DMA_IRQHandler+0x8ca>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0201 	bic.w	r2, r2, #1
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	e007      	b.n	800654e <HAL_DMA_IRQHandler+0x8da>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 0201 	bic.w	r2, r2, #1
 800654c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3301      	adds	r3, #1
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006556:	429a      	cmp	r2, r3
 8006558:	d307      	bcc.n	800656a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1f2      	bne.n	800654e <HAL_DMA_IRQHandler+0x8da>
 8006568:	e000      	b.n	800656c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800656a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d004      	beq.n	8006584 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2203      	movs	r2, #3
 800657e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006582:	e003      	b.n	800658c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 8272 	beq.w	8006a82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	4798      	blx	r3
 80065a6:	e26c      	b.n	8006a82 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a43      	ldr	r2, [pc, #268]	; (80066bc <HAL_DMA_IRQHandler+0xa48>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d022      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x984>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a42      	ldr	r2, [pc, #264]	; (80066c0 <HAL_DMA_IRQHandler+0xa4c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d01d      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x984>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a40      	ldr	r2, [pc, #256]	; (80066c4 <HAL_DMA_IRQHandler+0xa50>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d018      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x984>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a3f      	ldr	r2, [pc, #252]	; (80066c8 <HAL_DMA_IRQHandler+0xa54>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d013      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x984>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a3d      	ldr	r2, [pc, #244]	; (80066cc <HAL_DMA_IRQHandler+0xa58>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00e      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x984>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a3c      	ldr	r2, [pc, #240]	; (80066d0 <HAL_DMA_IRQHandler+0xa5c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d009      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x984>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a3a      	ldr	r2, [pc, #232]	; (80066d4 <HAL_DMA_IRQHandler+0xa60>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <HAL_DMA_IRQHandler+0x984>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a39      	ldr	r2, [pc, #228]	; (80066d8 <HAL_DMA_IRQHandler+0xa64>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d101      	bne.n	80065fc <HAL_DMA_IRQHandler+0x988>
 80065f8:	2301      	movs	r3, #1
 80065fa:	e000      	b.n	80065fe <HAL_DMA_IRQHandler+0x98a>
 80065fc:	2300      	movs	r3, #0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 823f 	beq.w	8006a82 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006610:	f003 031f 	and.w	r3, r3, #31
 8006614:	2204      	movs	r2, #4
 8006616:	409a      	lsls	r2, r3
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	4013      	ands	r3, r2
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 80cd 	beq.w	80067bc <HAL_DMA_IRQHandler+0xb48>
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80c7 	beq.w	80067bc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006632:	f003 031f 	and.w	r3, r3, #31
 8006636:	2204      	movs	r2, #4
 8006638:	409a      	lsls	r2, r3
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d049      	beq.n	80066dc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d109      	bne.n	8006666 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 8210 	beq.w	8006a7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006664:	e20a      	b.n	8006a7c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 8206 	beq.w	8006a7c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006678:	e200      	b.n	8006a7c <HAL_DMA_IRQHandler+0xe08>
 800667a:	bf00      	nop
 800667c:	40020010 	.word	0x40020010
 8006680:	40020028 	.word	0x40020028
 8006684:	40020040 	.word	0x40020040
 8006688:	40020058 	.word	0x40020058
 800668c:	40020070 	.word	0x40020070
 8006690:	40020088 	.word	0x40020088
 8006694:	400200a0 	.word	0x400200a0
 8006698:	400200b8 	.word	0x400200b8
 800669c:	40020410 	.word	0x40020410
 80066a0:	40020428 	.word	0x40020428
 80066a4:	40020440 	.word	0x40020440
 80066a8:	40020458 	.word	0x40020458
 80066ac:	40020470 	.word	0x40020470
 80066b0:	40020488 	.word	0x40020488
 80066b4:	400204a0 	.word	0x400204a0
 80066b8:	400204b8 	.word	0x400204b8
 80066bc:	58025408 	.word	0x58025408
 80066c0:	5802541c 	.word	0x5802541c
 80066c4:	58025430 	.word	0x58025430
 80066c8:	58025444 	.word	0x58025444
 80066cc:	58025458 	.word	0x58025458
 80066d0:	5802546c 	.word	0x5802546c
 80066d4:	58025480 	.word	0x58025480
 80066d8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d160      	bne.n	80067a8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a7f      	ldr	r2, [pc, #508]	; (80068e8 <HAL_DMA_IRQHandler+0xc74>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d04a      	beq.n	8006786 <HAL_DMA_IRQHandler+0xb12>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a7d      	ldr	r2, [pc, #500]	; (80068ec <HAL_DMA_IRQHandler+0xc78>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d045      	beq.n	8006786 <HAL_DMA_IRQHandler+0xb12>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a7c      	ldr	r2, [pc, #496]	; (80068f0 <HAL_DMA_IRQHandler+0xc7c>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d040      	beq.n	8006786 <HAL_DMA_IRQHandler+0xb12>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a7a      	ldr	r2, [pc, #488]	; (80068f4 <HAL_DMA_IRQHandler+0xc80>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d03b      	beq.n	8006786 <HAL_DMA_IRQHandler+0xb12>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a79      	ldr	r2, [pc, #484]	; (80068f8 <HAL_DMA_IRQHandler+0xc84>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d036      	beq.n	8006786 <HAL_DMA_IRQHandler+0xb12>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a77      	ldr	r2, [pc, #476]	; (80068fc <HAL_DMA_IRQHandler+0xc88>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d031      	beq.n	8006786 <HAL_DMA_IRQHandler+0xb12>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a76      	ldr	r2, [pc, #472]	; (8006900 <HAL_DMA_IRQHandler+0xc8c>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d02c      	beq.n	8006786 <HAL_DMA_IRQHandler+0xb12>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a74      	ldr	r2, [pc, #464]	; (8006904 <HAL_DMA_IRQHandler+0xc90>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d027      	beq.n	8006786 <HAL_DMA_IRQHandler+0xb12>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a73      	ldr	r2, [pc, #460]	; (8006908 <HAL_DMA_IRQHandler+0xc94>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d022      	beq.n	8006786 <HAL_DMA_IRQHandler+0xb12>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a71      	ldr	r2, [pc, #452]	; (800690c <HAL_DMA_IRQHandler+0xc98>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d01d      	beq.n	8006786 <HAL_DMA_IRQHandler+0xb12>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a70      	ldr	r2, [pc, #448]	; (8006910 <HAL_DMA_IRQHandler+0xc9c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d018      	beq.n	8006786 <HAL_DMA_IRQHandler+0xb12>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a6e      	ldr	r2, [pc, #440]	; (8006914 <HAL_DMA_IRQHandler+0xca0>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d013      	beq.n	8006786 <HAL_DMA_IRQHandler+0xb12>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a6d      	ldr	r2, [pc, #436]	; (8006918 <HAL_DMA_IRQHandler+0xca4>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00e      	beq.n	8006786 <HAL_DMA_IRQHandler+0xb12>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a6b      	ldr	r2, [pc, #428]	; (800691c <HAL_DMA_IRQHandler+0xca8>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d009      	beq.n	8006786 <HAL_DMA_IRQHandler+0xb12>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a6a      	ldr	r2, [pc, #424]	; (8006920 <HAL_DMA_IRQHandler+0xcac>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d004      	beq.n	8006786 <HAL_DMA_IRQHandler+0xb12>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a68      	ldr	r2, [pc, #416]	; (8006924 <HAL_DMA_IRQHandler+0xcb0>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d108      	bne.n	8006798 <HAL_DMA_IRQHandler+0xb24>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0208 	bic.w	r2, r2, #8
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	e007      	b.n	80067a8 <HAL_DMA_IRQHandler+0xb34>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0204 	bic.w	r2, r2, #4
 80067a6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 8165 	beq.w	8006a7c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067ba:	e15f      	b.n	8006a7c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c0:	f003 031f 	and.w	r3, r3, #31
 80067c4:	2202      	movs	r2, #2
 80067c6:	409a      	lsls	r2, r3
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	4013      	ands	r3, r2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 80c5 	beq.w	800695c <HAL_DMA_IRQHandler+0xce8>
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 80bf 	beq.w	800695c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	2202      	movs	r2, #2
 80067e8:	409a      	lsls	r2, r3
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d018      	beq.n	800682a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d109      	bne.n	8006816 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 813a 	beq.w	8006a80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006814:	e134      	b.n	8006a80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 8130 	beq.w	8006a80 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006828:	e12a      	b.n	8006a80 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f003 0320 	and.w	r3, r3, #32
 8006830:	2b00      	cmp	r3, #0
 8006832:	f040 8089 	bne.w	8006948 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a2b      	ldr	r2, [pc, #172]	; (80068e8 <HAL_DMA_IRQHandler+0xc74>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d04a      	beq.n	80068d6 <HAL_DMA_IRQHandler+0xc62>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a29      	ldr	r2, [pc, #164]	; (80068ec <HAL_DMA_IRQHandler+0xc78>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d045      	beq.n	80068d6 <HAL_DMA_IRQHandler+0xc62>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a28      	ldr	r2, [pc, #160]	; (80068f0 <HAL_DMA_IRQHandler+0xc7c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d040      	beq.n	80068d6 <HAL_DMA_IRQHandler+0xc62>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a26      	ldr	r2, [pc, #152]	; (80068f4 <HAL_DMA_IRQHandler+0xc80>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d03b      	beq.n	80068d6 <HAL_DMA_IRQHandler+0xc62>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a25      	ldr	r2, [pc, #148]	; (80068f8 <HAL_DMA_IRQHandler+0xc84>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d036      	beq.n	80068d6 <HAL_DMA_IRQHandler+0xc62>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a23      	ldr	r2, [pc, #140]	; (80068fc <HAL_DMA_IRQHandler+0xc88>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d031      	beq.n	80068d6 <HAL_DMA_IRQHandler+0xc62>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a22      	ldr	r2, [pc, #136]	; (8006900 <HAL_DMA_IRQHandler+0xc8c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d02c      	beq.n	80068d6 <HAL_DMA_IRQHandler+0xc62>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a20      	ldr	r2, [pc, #128]	; (8006904 <HAL_DMA_IRQHandler+0xc90>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d027      	beq.n	80068d6 <HAL_DMA_IRQHandler+0xc62>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a1f      	ldr	r2, [pc, #124]	; (8006908 <HAL_DMA_IRQHandler+0xc94>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d022      	beq.n	80068d6 <HAL_DMA_IRQHandler+0xc62>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a1d      	ldr	r2, [pc, #116]	; (800690c <HAL_DMA_IRQHandler+0xc98>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d01d      	beq.n	80068d6 <HAL_DMA_IRQHandler+0xc62>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a1c      	ldr	r2, [pc, #112]	; (8006910 <HAL_DMA_IRQHandler+0xc9c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d018      	beq.n	80068d6 <HAL_DMA_IRQHandler+0xc62>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1a      	ldr	r2, [pc, #104]	; (8006914 <HAL_DMA_IRQHandler+0xca0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <HAL_DMA_IRQHandler+0xc62>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a19      	ldr	r2, [pc, #100]	; (8006918 <HAL_DMA_IRQHandler+0xca4>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00e      	beq.n	80068d6 <HAL_DMA_IRQHandler+0xc62>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a17      	ldr	r2, [pc, #92]	; (800691c <HAL_DMA_IRQHandler+0xca8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d009      	beq.n	80068d6 <HAL_DMA_IRQHandler+0xc62>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a16      	ldr	r2, [pc, #88]	; (8006920 <HAL_DMA_IRQHandler+0xcac>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d004      	beq.n	80068d6 <HAL_DMA_IRQHandler+0xc62>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a14      	ldr	r2, [pc, #80]	; (8006924 <HAL_DMA_IRQHandler+0xcb0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d128      	bne.n	8006928 <HAL_DMA_IRQHandler+0xcb4>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0214 	bic.w	r2, r2, #20
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	e027      	b.n	8006938 <HAL_DMA_IRQHandler+0xcc4>
 80068e8:	40020010 	.word	0x40020010
 80068ec:	40020028 	.word	0x40020028
 80068f0:	40020040 	.word	0x40020040
 80068f4:	40020058 	.word	0x40020058
 80068f8:	40020070 	.word	0x40020070
 80068fc:	40020088 	.word	0x40020088
 8006900:	400200a0 	.word	0x400200a0
 8006904:	400200b8 	.word	0x400200b8
 8006908:	40020410 	.word	0x40020410
 800690c:	40020428 	.word	0x40020428
 8006910:	40020440 	.word	0x40020440
 8006914:	40020458 	.word	0x40020458
 8006918:	40020470 	.word	0x40020470
 800691c:	40020488 	.word	0x40020488
 8006920:	400204a0 	.word	0x400204a0
 8006924:	400204b8 	.word	0x400204b8
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 020a 	bic.w	r2, r2, #10
 8006936:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 8097 	beq.w	8006a80 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800695a:	e091      	b.n	8006a80 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006960:	f003 031f 	and.w	r3, r3, #31
 8006964:	2208      	movs	r2, #8
 8006966:	409a      	lsls	r2, r3
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	4013      	ands	r3, r2
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8088 	beq.w	8006a82 <HAL_DMA_IRQHandler+0xe0e>
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 8082 	beq.w	8006a82 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a41      	ldr	r2, [pc, #260]	; (8006a88 <HAL_DMA_IRQHandler+0xe14>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d04a      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xdaa>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a3f      	ldr	r2, [pc, #252]	; (8006a8c <HAL_DMA_IRQHandler+0xe18>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d045      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xdaa>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a3e      	ldr	r2, [pc, #248]	; (8006a90 <HAL_DMA_IRQHandler+0xe1c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d040      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xdaa>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a3c      	ldr	r2, [pc, #240]	; (8006a94 <HAL_DMA_IRQHandler+0xe20>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d03b      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xdaa>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a3b      	ldr	r2, [pc, #236]	; (8006a98 <HAL_DMA_IRQHandler+0xe24>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d036      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xdaa>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a39      	ldr	r2, [pc, #228]	; (8006a9c <HAL_DMA_IRQHandler+0xe28>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d031      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xdaa>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a38      	ldr	r2, [pc, #224]	; (8006aa0 <HAL_DMA_IRQHandler+0xe2c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d02c      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xdaa>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a36      	ldr	r2, [pc, #216]	; (8006aa4 <HAL_DMA_IRQHandler+0xe30>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d027      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xdaa>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a35      	ldr	r2, [pc, #212]	; (8006aa8 <HAL_DMA_IRQHandler+0xe34>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d022      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xdaa>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a33      	ldr	r2, [pc, #204]	; (8006aac <HAL_DMA_IRQHandler+0xe38>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d01d      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xdaa>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a32      	ldr	r2, [pc, #200]	; (8006ab0 <HAL_DMA_IRQHandler+0xe3c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d018      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xdaa>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a30      	ldr	r2, [pc, #192]	; (8006ab4 <HAL_DMA_IRQHandler+0xe40>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xdaa>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a2f      	ldr	r2, [pc, #188]	; (8006ab8 <HAL_DMA_IRQHandler+0xe44>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00e      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xdaa>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a2d      	ldr	r2, [pc, #180]	; (8006abc <HAL_DMA_IRQHandler+0xe48>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d009      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xdaa>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a2c      	ldr	r2, [pc, #176]	; (8006ac0 <HAL_DMA_IRQHandler+0xe4c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d004      	beq.n	8006a1e <HAL_DMA_IRQHandler+0xdaa>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a2a      	ldr	r2, [pc, #168]	; (8006ac4 <HAL_DMA_IRQHandler+0xe50>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d108      	bne.n	8006a30 <HAL_DMA_IRQHandler+0xdbc>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 021c 	bic.w	r2, r2, #28
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	e007      	b.n	8006a40 <HAL_DMA_IRQHandler+0xdcc>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 020e 	bic.w	r2, r2, #14
 8006a3e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a44:	f003 031f 	and.w	r3, r3, #31
 8006a48:	2201      	movs	r2, #1
 8006a4a:	409a      	lsls	r2, r3
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d009      	beq.n	8006a82 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	4798      	blx	r3
 8006a76:	e004      	b.n	8006a82 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006a78:	bf00      	nop
 8006a7a:	e002      	b.n	8006a82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a7c:	bf00      	nop
 8006a7e:	e000      	b.n	8006a82 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a80:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006a82:	3728      	adds	r7, #40	; 0x28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	40020010 	.word	0x40020010
 8006a8c:	40020028 	.word	0x40020028
 8006a90:	40020040 	.word	0x40020040
 8006a94:	40020058 	.word	0x40020058
 8006a98:	40020070 	.word	0x40020070
 8006a9c:	40020088 	.word	0x40020088
 8006aa0:	400200a0 	.word	0x400200a0
 8006aa4:	400200b8 	.word	0x400200b8
 8006aa8:	40020410 	.word	0x40020410
 8006aac:	40020428 	.word	0x40020428
 8006ab0:	40020440 	.word	0x40020440
 8006ab4:	40020458 	.word	0x40020458
 8006ab8:	40020470 	.word	0x40020470
 8006abc:	40020488 	.word	0x40020488
 8006ac0:	400204a0 	.word	0x400204a0
 8006ac4:	400204b8 	.word	0x400204b8

08006ac8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ada:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a7f      	ldr	r2, [pc, #508]	; (8006ce4 <DMA_SetConfig+0x21c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d072      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a7d      	ldr	r2, [pc, #500]	; (8006ce8 <DMA_SetConfig+0x220>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d06d      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a7c      	ldr	r2, [pc, #496]	; (8006cec <DMA_SetConfig+0x224>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d068      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a7a      	ldr	r2, [pc, #488]	; (8006cf0 <DMA_SetConfig+0x228>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d063      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a79      	ldr	r2, [pc, #484]	; (8006cf4 <DMA_SetConfig+0x22c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d05e      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a77      	ldr	r2, [pc, #476]	; (8006cf8 <DMA_SetConfig+0x230>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d059      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a76      	ldr	r2, [pc, #472]	; (8006cfc <DMA_SetConfig+0x234>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d054      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a74      	ldr	r2, [pc, #464]	; (8006d00 <DMA_SetConfig+0x238>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d04f      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a73      	ldr	r2, [pc, #460]	; (8006d04 <DMA_SetConfig+0x23c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d04a      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a71      	ldr	r2, [pc, #452]	; (8006d08 <DMA_SetConfig+0x240>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d045      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a70      	ldr	r2, [pc, #448]	; (8006d0c <DMA_SetConfig+0x244>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d040      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a6e      	ldr	r2, [pc, #440]	; (8006d10 <DMA_SetConfig+0x248>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d03b      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a6d      	ldr	r2, [pc, #436]	; (8006d14 <DMA_SetConfig+0x24c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d036      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a6b      	ldr	r2, [pc, #428]	; (8006d18 <DMA_SetConfig+0x250>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d031      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a6a      	ldr	r2, [pc, #424]	; (8006d1c <DMA_SetConfig+0x254>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d02c      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a68      	ldr	r2, [pc, #416]	; (8006d20 <DMA_SetConfig+0x258>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d027      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a67      	ldr	r2, [pc, #412]	; (8006d24 <DMA_SetConfig+0x25c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d022      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a65      	ldr	r2, [pc, #404]	; (8006d28 <DMA_SetConfig+0x260>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d01d      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a64      	ldr	r2, [pc, #400]	; (8006d2c <DMA_SetConfig+0x264>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d018      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a62      	ldr	r2, [pc, #392]	; (8006d30 <DMA_SetConfig+0x268>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d013      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a61      	ldr	r2, [pc, #388]	; (8006d34 <DMA_SetConfig+0x26c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00e      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a5f      	ldr	r2, [pc, #380]	; (8006d38 <DMA_SetConfig+0x270>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d009      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a5e      	ldr	r2, [pc, #376]	; (8006d3c <DMA_SetConfig+0x274>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d004      	beq.n	8006bd2 <DMA_SetConfig+0x10a>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a5c      	ldr	r2, [pc, #368]	; (8006d40 <DMA_SetConfig+0x278>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d101      	bne.n	8006bd6 <DMA_SetConfig+0x10e>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <DMA_SetConfig+0x110>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00d      	beq.n	8006bf8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006be4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d004      	beq.n	8006bf8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006bf6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a39      	ldr	r2, [pc, #228]	; (8006ce4 <DMA_SetConfig+0x21c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d04a      	beq.n	8006c98 <DMA_SetConfig+0x1d0>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a38      	ldr	r2, [pc, #224]	; (8006ce8 <DMA_SetConfig+0x220>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d045      	beq.n	8006c98 <DMA_SetConfig+0x1d0>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a36      	ldr	r2, [pc, #216]	; (8006cec <DMA_SetConfig+0x224>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d040      	beq.n	8006c98 <DMA_SetConfig+0x1d0>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a35      	ldr	r2, [pc, #212]	; (8006cf0 <DMA_SetConfig+0x228>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d03b      	beq.n	8006c98 <DMA_SetConfig+0x1d0>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a33      	ldr	r2, [pc, #204]	; (8006cf4 <DMA_SetConfig+0x22c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d036      	beq.n	8006c98 <DMA_SetConfig+0x1d0>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a32      	ldr	r2, [pc, #200]	; (8006cf8 <DMA_SetConfig+0x230>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d031      	beq.n	8006c98 <DMA_SetConfig+0x1d0>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a30      	ldr	r2, [pc, #192]	; (8006cfc <DMA_SetConfig+0x234>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d02c      	beq.n	8006c98 <DMA_SetConfig+0x1d0>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a2f      	ldr	r2, [pc, #188]	; (8006d00 <DMA_SetConfig+0x238>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d027      	beq.n	8006c98 <DMA_SetConfig+0x1d0>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a2d      	ldr	r2, [pc, #180]	; (8006d04 <DMA_SetConfig+0x23c>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d022      	beq.n	8006c98 <DMA_SetConfig+0x1d0>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a2c      	ldr	r2, [pc, #176]	; (8006d08 <DMA_SetConfig+0x240>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d01d      	beq.n	8006c98 <DMA_SetConfig+0x1d0>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a2a      	ldr	r2, [pc, #168]	; (8006d0c <DMA_SetConfig+0x244>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d018      	beq.n	8006c98 <DMA_SetConfig+0x1d0>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a29      	ldr	r2, [pc, #164]	; (8006d10 <DMA_SetConfig+0x248>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d013      	beq.n	8006c98 <DMA_SetConfig+0x1d0>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a27      	ldr	r2, [pc, #156]	; (8006d14 <DMA_SetConfig+0x24c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00e      	beq.n	8006c98 <DMA_SetConfig+0x1d0>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a26      	ldr	r2, [pc, #152]	; (8006d18 <DMA_SetConfig+0x250>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d009      	beq.n	8006c98 <DMA_SetConfig+0x1d0>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a24      	ldr	r2, [pc, #144]	; (8006d1c <DMA_SetConfig+0x254>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d004      	beq.n	8006c98 <DMA_SetConfig+0x1d0>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a23      	ldr	r2, [pc, #140]	; (8006d20 <DMA_SetConfig+0x258>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d101      	bne.n	8006c9c <DMA_SetConfig+0x1d4>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e000      	b.n	8006c9e <DMA_SetConfig+0x1d6>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d059      	beq.n	8006d56 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	223f      	movs	r2, #63	; 0x3f
 8006cac:	409a      	lsls	r2, r3
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cc0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	2b40      	cmp	r3, #64	; 0x40
 8006cd0:	d138      	bne.n	8006d44 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ce2:	e086      	b.n	8006df2 <DMA_SetConfig+0x32a>
 8006ce4:	40020010 	.word	0x40020010
 8006ce8:	40020028 	.word	0x40020028
 8006cec:	40020040 	.word	0x40020040
 8006cf0:	40020058 	.word	0x40020058
 8006cf4:	40020070 	.word	0x40020070
 8006cf8:	40020088 	.word	0x40020088
 8006cfc:	400200a0 	.word	0x400200a0
 8006d00:	400200b8 	.word	0x400200b8
 8006d04:	40020410 	.word	0x40020410
 8006d08:	40020428 	.word	0x40020428
 8006d0c:	40020440 	.word	0x40020440
 8006d10:	40020458 	.word	0x40020458
 8006d14:	40020470 	.word	0x40020470
 8006d18:	40020488 	.word	0x40020488
 8006d1c:	400204a0 	.word	0x400204a0
 8006d20:	400204b8 	.word	0x400204b8
 8006d24:	58025408 	.word	0x58025408
 8006d28:	5802541c 	.word	0x5802541c
 8006d2c:	58025430 	.word	0x58025430
 8006d30:	58025444 	.word	0x58025444
 8006d34:	58025458 	.word	0x58025458
 8006d38:	5802546c 	.word	0x5802546c
 8006d3c:	58025480 	.word	0x58025480
 8006d40:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	60da      	str	r2, [r3, #12]
}
 8006d54:	e04d      	b.n	8006df2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a29      	ldr	r2, [pc, #164]	; (8006e00 <DMA_SetConfig+0x338>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d022      	beq.n	8006da6 <DMA_SetConfig+0x2de>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a27      	ldr	r2, [pc, #156]	; (8006e04 <DMA_SetConfig+0x33c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d01d      	beq.n	8006da6 <DMA_SetConfig+0x2de>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a26      	ldr	r2, [pc, #152]	; (8006e08 <DMA_SetConfig+0x340>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d018      	beq.n	8006da6 <DMA_SetConfig+0x2de>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a24      	ldr	r2, [pc, #144]	; (8006e0c <DMA_SetConfig+0x344>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d013      	beq.n	8006da6 <DMA_SetConfig+0x2de>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a23      	ldr	r2, [pc, #140]	; (8006e10 <DMA_SetConfig+0x348>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d00e      	beq.n	8006da6 <DMA_SetConfig+0x2de>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a21      	ldr	r2, [pc, #132]	; (8006e14 <DMA_SetConfig+0x34c>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d009      	beq.n	8006da6 <DMA_SetConfig+0x2de>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a20      	ldr	r2, [pc, #128]	; (8006e18 <DMA_SetConfig+0x350>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d004      	beq.n	8006da6 <DMA_SetConfig+0x2de>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1e      	ldr	r2, [pc, #120]	; (8006e1c <DMA_SetConfig+0x354>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d101      	bne.n	8006daa <DMA_SetConfig+0x2e2>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e000      	b.n	8006dac <DMA_SetConfig+0x2e4>
 8006daa:	2300      	movs	r3, #0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d020      	beq.n	8006df2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db4:	f003 031f 	and.w	r3, r3, #31
 8006db8:	2201      	movs	r2, #1
 8006dba:	409a      	lsls	r2, r3
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	2b40      	cmp	r3, #64	; 0x40
 8006dce:	d108      	bne.n	8006de2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	60da      	str	r2, [r3, #12]
}
 8006de0:	e007      	b.n	8006df2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	60da      	str	r2, [r3, #12]
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	58025408 	.word	0x58025408
 8006e04:	5802541c 	.word	0x5802541c
 8006e08:	58025430 	.word	0x58025430
 8006e0c:	58025444 	.word	0x58025444
 8006e10:	58025458 	.word	0x58025458
 8006e14:	5802546c 	.word	0x5802546c
 8006e18:	58025480 	.word	0x58025480
 8006e1c:	58025494 	.word	0x58025494

08006e20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a42      	ldr	r2, [pc, #264]	; (8006f38 <DMA_CalcBaseAndBitshift+0x118>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d04a      	beq.n	8006ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a41      	ldr	r2, [pc, #260]	; (8006f3c <DMA_CalcBaseAndBitshift+0x11c>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d045      	beq.n	8006ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a3f      	ldr	r2, [pc, #252]	; (8006f40 <DMA_CalcBaseAndBitshift+0x120>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d040      	beq.n	8006ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a3e      	ldr	r2, [pc, #248]	; (8006f44 <DMA_CalcBaseAndBitshift+0x124>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d03b      	beq.n	8006ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a3c      	ldr	r2, [pc, #240]	; (8006f48 <DMA_CalcBaseAndBitshift+0x128>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d036      	beq.n	8006ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a3b      	ldr	r2, [pc, #236]	; (8006f4c <DMA_CalcBaseAndBitshift+0x12c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d031      	beq.n	8006ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a39      	ldr	r2, [pc, #228]	; (8006f50 <DMA_CalcBaseAndBitshift+0x130>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d02c      	beq.n	8006ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a38      	ldr	r2, [pc, #224]	; (8006f54 <DMA_CalcBaseAndBitshift+0x134>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d027      	beq.n	8006ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a36      	ldr	r2, [pc, #216]	; (8006f58 <DMA_CalcBaseAndBitshift+0x138>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d022      	beq.n	8006ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a35      	ldr	r2, [pc, #212]	; (8006f5c <DMA_CalcBaseAndBitshift+0x13c>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d01d      	beq.n	8006ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a33      	ldr	r2, [pc, #204]	; (8006f60 <DMA_CalcBaseAndBitshift+0x140>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d018      	beq.n	8006ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a32      	ldr	r2, [pc, #200]	; (8006f64 <DMA_CalcBaseAndBitshift+0x144>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d013      	beq.n	8006ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a30      	ldr	r2, [pc, #192]	; (8006f68 <DMA_CalcBaseAndBitshift+0x148>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00e      	beq.n	8006ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a2f      	ldr	r2, [pc, #188]	; (8006f6c <DMA_CalcBaseAndBitshift+0x14c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d009      	beq.n	8006ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a2d      	ldr	r2, [pc, #180]	; (8006f70 <DMA_CalcBaseAndBitshift+0x150>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d004      	beq.n	8006ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a2c      	ldr	r2, [pc, #176]	; (8006f74 <DMA_CalcBaseAndBitshift+0x154>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d101      	bne.n	8006ecc <DMA_CalcBaseAndBitshift+0xac>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e000      	b.n	8006ece <DMA_CalcBaseAndBitshift+0xae>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d024      	beq.n	8006f1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	3b10      	subs	r3, #16
 8006eda:	4a27      	ldr	r2, [pc, #156]	; (8006f78 <DMA_CalcBaseAndBitshift+0x158>)
 8006edc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee0:	091b      	lsrs	r3, r3, #4
 8006ee2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f003 0307 	and.w	r3, r3, #7
 8006eea:	4a24      	ldr	r2, [pc, #144]	; (8006f7c <DMA_CalcBaseAndBitshift+0x15c>)
 8006eec:	5cd3      	ldrb	r3, [r2, r3]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d908      	bls.n	8006f0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	4b1f      	ldr	r3, [pc, #124]	; (8006f80 <DMA_CalcBaseAndBitshift+0x160>)
 8006f02:	4013      	ands	r3, r2
 8006f04:	1d1a      	adds	r2, r3, #4
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	659a      	str	r2, [r3, #88]	; 0x58
 8006f0a:	e00d      	b.n	8006f28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	461a      	mov	r2, r3
 8006f12:	4b1b      	ldr	r3, [pc, #108]	; (8006f80 <DMA_CalcBaseAndBitshift+0x160>)
 8006f14:	4013      	ands	r3, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	6593      	str	r3, [r2, #88]	; 0x58
 8006f1a:	e005      	b.n	8006f28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	40020010 	.word	0x40020010
 8006f3c:	40020028 	.word	0x40020028
 8006f40:	40020040 	.word	0x40020040
 8006f44:	40020058 	.word	0x40020058
 8006f48:	40020070 	.word	0x40020070
 8006f4c:	40020088 	.word	0x40020088
 8006f50:	400200a0 	.word	0x400200a0
 8006f54:	400200b8 	.word	0x400200b8
 8006f58:	40020410 	.word	0x40020410
 8006f5c:	40020428 	.word	0x40020428
 8006f60:	40020440 	.word	0x40020440
 8006f64:	40020458 	.word	0x40020458
 8006f68:	40020470 	.word	0x40020470
 8006f6c:	40020488 	.word	0x40020488
 8006f70:	400204a0 	.word	0x400204a0
 8006f74:	400204b8 	.word	0x400204b8
 8006f78:	aaaaaaab 	.word	0xaaaaaaab
 8006f7c:	08013d80 	.word	0x08013d80
 8006f80:	fffffc00 	.word	0xfffffc00

08006f84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d120      	bne.n	8006fda <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d858      	bhi.n	8007052 <DMA_CheckFifoParam+0xce>
 8006fa0:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <DMA_CheckFifoParam+0x24>)
 8006fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa6:	bf00      	nop
 8006fa8:	08006fb9 	.word	0x08006fb9
 8006fac:	08006fcb 	.word	0x08006fcb
 8006fb0:	08006fb9 	.word	0x08006fb9
 8006fb4:	08007053 	.word	0x08007053
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d048      	beq.n	8007056 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006fc8:	e045      	b.n	8007056 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006fd2:	d142      	bne.n	800705a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006fd8:	e03f      	b.n	800705a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fe2:	d123      	bne.n	800702c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d838      	bhi.n	800705e <DMA_CheckFifoParam+0xda>
 8006fec:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <DMA_CheckFifoParam+0x70>)
 8006fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff2:	bf00      	nop
 8006ff4:	08007005 	.word	0x08007005
 8006ff8:	0800700b 	.word	0x0800700b
 8006ffc:	08007005 	.word	0x08007005
 8007000:	0800701d 	.word	0x0800701d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	73fb      	strb	r3, [r7, #15]
        break;
 8007008:	e030      	b.n	800706c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d025      	beq.n	8007062 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800701a:	e022      	b.n	8007062 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007024:	d11f      	bne.n	8007066 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800702a:	e01c      	b.n	8007066 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	2b02      	cmp	r3, #2
 8007032:	d902      	bls.n	800703a <DMA_CheckFifoParam+0xb6>
 8007034:	2b03      	cmp	r3, #3
 8007036:	d003      	beq.n	8007040 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007038:	e018      	b.n	800706c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	73fb      	strb	r3, [r7, #15]
        break;
 800703e:	e015      	b.n	800706c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00e      	beq.n	800706a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	73fb      	strb	r3, [r7, #15]
    break;
 8007050:	e00b      	b.n	800706a <DMA_CheckFifoParam+0xe6>
        break;
 8007052:	bf00      	nop
 8007054:	e00a      	b.n	800706c <DMA_CheckFifoParam+0xe8>
        break;
 8007056:	bf00      	nop
 8007058:	e008      	b.n	800706c <DMA_CheckFifoParam+0xe8>
        break;
 800705a:	bf00      	nop
 800705c:	e006      	b.n	800706c <DMA_CheckFifoParam+0xe8>
        break;
 800705e:	bf00      	nop
 8007060:	e004      	b.n	800706c <DMA_CheckFifoParam+0xe8>
        break;
 8007062:	bf00      	nop
 8007064:	e002      	b.n	800706c <DMA_CheckFifoParam+0xe8>
        break;
 8007066:	bf00      	nop
 8007068:	e000      	b.n	800706c <DMA_CheckFifoParam+0xe8>
    break;
 800706a:	bf00      	nop
    }
  }

  return status;
 800706c:	7bfb      	ldrb	r3, [r7, #15]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop

0800707c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a38      	ldr	r2, [pc, #224]	; (8007170 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d022      	beq.n	80070da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a36      	ldr	r2, [pc, #216]	; (8007174 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d01d      	beq.n	80070da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a35      	ldr	r2, [pc, #212]	; (8007178 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d018      	beq.n	80070da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a33      	ldr	r2, [pc, #204]	; (800717c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d013      	beq.n	80070da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a32      	ldr	r2, [pc, #200]	; (8007180 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d00e      	beq.n	80070da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a30      	ldr	r2, [pc, #192]	; (8007184 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d009      	beq.n	80070da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a2f      	ldr	r2, [pc, #188]	; (8007188 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d004      	beq.n	80070da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a2d      	ldr	r2, [pc, #180]	; (800718c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d101      	bne.n	80070de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80070de:	2300      	movs	r3, #0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d01a      	beq.n	800711a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	3b08      	subs	r3, #8
 80070ec:	4a28      	ldr	r2, [pc, #160]	; (8007190 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80070ee:	fba2 2303 	umull	r2, r3, r2, r3
 80070f2:	091b      	lsrs	r3, r3, #4
 80070f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4b26      	ldr	r3, [pc, #152]	; (8007194 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80070fa:	4413      	add	r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	461a      	mov	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a24      	ldr	r2, [pc, #144]	; (8007198 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007108:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	2201      	movs	r2, #1
 8007112:	409a      	lsls	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007118:	e024      	b.n	8007164 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	3b10      	subs	r3, #16
 8007122:	4a1e      	ldr	r2, [pc, #120]	; (800719c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007124:	fba2 2303 	umull	r2, r3, r2, r3
 8007128:	091b      	lsrs	r3, r3, #4
 800712a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	4a1c      	ldr	r2, [pc, #112]	; (80071a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d806      	bhi.n	8007142 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	4a1b      	ldr	r2, [pc, #108]	; (80071a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d902      	bls.n	8007142 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3308      	adds	r3, #8
 8007140:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4b18      	ldr	r3, [pc, #96]	; (80071a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007146:	4413      	add	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	461a      	mov	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a16      	ldr	r2, [pc, #88]	; (80071ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007154:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f003 031f 	and.w	r3, r3, #31
 800715c:	2201      	movs	r2, #1
 800715e:	409a      	lsls	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007164:	bf00      	nop
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	58025408 	.word	0x58025408
 8007174:	5802541c 	.word	0x5802541c
 8007178:	58025430 	.word	0x58025430
 800717c:	58025444 	.word	0x58025444
 8007180:	58025458 	.word	0x58025458
 8007184:	5802546c 	.word	0x5802546c
 8007188:	58025480 	.word	0x58025480
 800718c:	58025494 	.word	0x58025494
 8007190:	cccccccd 	.word	0xcccccccd
 8007194:	16009600 	.word	0x16009600
 8007198:	58025880 	.word	0x58025880
 800719c:	aaaaaaab 	.word	0xaaaaaaab
 80071a0:	400204b8 	.word	0x400204b8
 80071a4:	4002040f 	.word	0x4002040f
 80071a8:	10008200 	.word	0x10008200
 80071ac:	40020880 	.word	0x40020880

080071b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d04a      	beq.n	800725c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d847      	bhi.n	800725c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a25      	ldr	r2, [pc, #148]	; (8007268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d022      	beq.n	800721c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a24      	ldr	r2, [pc, #144]	; (800726c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d01d      	beq.n	800721c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a22      	ldr	r2, [pc, #136]	; (8007270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d018      	beq.n	800721c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a21      	ldr	r2, [pc, #132]	; (8007274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d013      	beq.n	800721c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a1f      	ldr	r2, [pc, #124]	; (8007278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d00e      	beq.n	800721c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a1e      	ldr	r2, [pc, #120]	; (800727c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d009      	beq.n	800721c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a1c      	ldr	r2, [pc, #112]	; (8007280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d004      	beq.n	800721c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a1b      	ldr	r2, [pc, #108]	; (8007284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d101      	bne.n	8007220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800721c:	2301      	movs	r3, #1
 800721e:	e000      	b.n	8007222 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007220:	2300      	movs	r3, #0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4b17      	ldr	r3, [pc, #92]	; (8007288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	461a      	mov	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a15      	ldr	r2, [pc, #84]	; (800728c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007238:	671a      	str	r2, [r3, #112]	; 0x70
 800723a:	e009      	b.n	8007250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4b14      	ldr	r3, [pc, #80]	; (8007290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007240:	4413      	add	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	461a      	mov	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a11      	ldr	r2, [pc, #68]	; (8007294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800724e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3b01      	subs	r3, #1
 8007254:	2201      	movs	r2, #1
 8007256:	409a      	lsls	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800725c:	bf00      	nop
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	58025408 	.word	0x58025408
 800726c:	5802541c 	.word	0x5802541c
 8007270:	58025430 	.word	0x58025430
 8007274:	58025444 	.word	0x58025444
 8007278:	58025458 	.word	0x58025458
 800727c:	5802546c 	.word	0x5802546c
 8007280:	58025480 	.word	0x58025480
 8007284:	58025494 	.word	0x58025494
 8007288:	1600963f 	.word	0x1600963f
 800728c:	58025940 	.word	0x58025940
 8007290:	1000823f 	.word	0x1000823f
 8007294:	40020940 	.word	0x40020940

08007298 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007298:	b480      	push	{r7}
 800729a:	b089      	sub	sp, #36	; 0x24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80072a6:	4b89      	ldr	r3, [pc, #548]	; (80074cc <HAL_GPIO_Init+0x234>)
 80072a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80072aa:	e194      	b.n	80075d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	2101      	movs	r1, #1
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	fa01 f303 	lsl.w	r3, r1, r3
 80072b8:	4013      	ands	r3, r2
 80072ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 8186 	beq.w	80075d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f003 0303 	and.w	r3, r3, #3
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d005      	beq.n	80072dc <HAL_GPIO_Init+0x44>
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f003 0303 	and.w	r3, r3, #3
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d130      	bne.n	800733e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	2203      	movs	r2, #3
 80072e8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ec:	43db      	mvns	r3, r3
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	4013      	ands	r3, r2
 80072f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	4313      	orrs	r3, r2
 8007304:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007312:	2201      	movs	r2, #1
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	fa02 f303 	lsl.w	r3, r2, r3
 800731a:	43db      	mvns	r3, r3
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	4013      	ands	r3, r2
 8007320:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	091b      	lsrs	r3, r3, #4
 8007328:	f003 0201 	and.w	r2, r3, #1
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	fa02 f303 	lsl.w	r3, r2, r3
 8007332:	69ba      	ldr	r2, [r7, #24]
 8007334:	4313      	orrs	r3, r2
 8007336:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	69ba      	ldr	r2, [r7, #24]
 800733c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	2b03      	cmp	r3, #3
 8007348:	d017      	beq.n	800737a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	2203      	movs	r2, #3
 8007356:	fa02 f303 	lsl.w	r3, r2, r3
 800735a:	43db      	mvns	r3, r3
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	4013      	ands	r3, r2
 8007360:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	689a      	ldr	r2, [r3, #8]
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	fa02 f303 	lsl.w	r3, r2, r3
 800736e:	69ba      	ldr	r2, [r7, #24]
 8007370:	4313      	orrs	r3, r2
 8007372:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f003 0303 	and.w	r3, r3, #3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d123      	bne.n	80073ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	08da      	lsrs	r2, r3, #3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	3208      	adds	r2, #8
 800738e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	220f      	movs	r2, #15
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	43db      	mvns	r3, r3
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	4013      	ands	r3, r2
 80073a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	691a      	ldr	r2, [r3, #16]
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	4313      	orrs	r3, r2
 80073be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	08da      	lsrs	r2, r3, #3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	3208      	adds	r2, #8
 80073c8:	69b9      	ldr	r1, [r7, #24]
 80073ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	2203      	movs	r2, #3
 80073da:	fa02 f303 	lsl.w	r3, r2, r3
 80073de:	43db      	mvns	r3, r3
 80073e0:	69ba      	ldr	r2, [r7, #24]
 80073e2:	4013      	ands	r3, r2
 80073e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f003 0203 	and.w	r2, r3, #3
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	005b      	lsls	r3, r3, #1
 80073f2:	fa02 f303 	lsl.w	r3, r2, r3
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 80e0 	beq.w	80075d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007410:	4b2f      	ldr	r3, [pc, #188]	; (80074d0 <HAL_GPIO_Init+0x238>)
 8007412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007416:	4a2e      	ldr	r2, [pc, #184]	; (80074d0 <HAL_GPIO_Init+0x238>)
 8007418:	f043 0302 	orr.w	r3, r3, #2
 800741c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007420:	4b2b      	ldr	r3, [pc, #172]	; (80074d0 <HAL_GPIO_Init+0x238>)
 8007422:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800742e:	4a29      	ldr	r2, [pc, #164]	; (80074d4 <HAL_GPIO_Init+0x23c>)
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	089b      	lsrs	r3, r3, #2
 8007434:	3302      	adds	r3, #2
 8007436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800743a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f003 0303 	and.w	r3, r3, #3
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	220f      	movs	r2, #15
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	43db      	mvns	r3, r3
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	4013      	ands	r3, r2
 8007450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a20      	ldr	r2, [pc, #128]	; (80074d8 <HAL_GPIO_Init+0x240>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d052      	beq.n	8007500 <HAL_GPIO_Init+0x268>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a1f      	ldr	r2, [pc, #124]	; (80074dc <HAL_GPIO_Init+0x244>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d031      	beq.n	80074c6 <HAL_GPIO_Init+0x22e>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a1e      	ldr	r2, [pc, #120]	; (80074e0 <HAL_GPIO_Init+0x248>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d02b      	beq.n	80074c2 <HAL_GPIO_Init+0x22a>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a1d      	ldr	r2, [pc, #116]	; (80074e4 <HAL_GPIO_Init+0x24c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d025      	beq.n	80074be <HAL_GPIO_Init+0x226>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a1c      	ldr	r2, [pc, #112]	; (80074e8 <HAL_GPIO_Init+0x250>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d01f      	beq.n	80074ba <HAL_GPIO_Init+0x222>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a1b      	ldr	r2, [pc, #108]	; (80074ec <HAL_GPIO_Init+0x254>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d019      	beq.n	80074b6 <HAL_GPIO_Init+0x21e>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a1a      	ldr	r2, [pc, #104]	; (80074f0 <HAL_GPIO_Init+0x258>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d013      	beq.n	80074b2 <HAL_GPIO_Init+0x21a>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a19      	ldr	r2, [pc, #100]	; (80074f4 <HAL_GPIO_Init+0x25c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d00d      	beq.n	80074ae <HAL_GPIO_Init+0x216>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a18      	ldr	r2, [pc, #96]	; (80074f8 <HAL_GPIO_Init+0x260>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d007      	beq.n	80074aa <HAL_GPIO_Init+0x212>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a17      	ldr	r2, [pc, #92]	; (80074fc <HAL_GPIO_Init+0x264>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d101      	bne.n	80074a6 <HAL_GPIO_Init+0x20e>
 80074a2:	2309      	movs	r3, #9
 80074a4:	e02d      	b.n	8007502 <HAL_GPIO_Init+0x26a>
 80074a6:	230a      	movs	r3, #10
 80074a8:	e02b      	b.n	8007502 <HAL_GPIO_Init+0x26a>
 80074aa:	2308      	movs	r3, #8
 80074ac:	e029      	b.n	8007502 <HAL_GPIO_Init+0x26a>
 80074ae:	2307      	movs	r3, #7
 80074b0:	e027      	b.n	8007502 <HAL_GPIO_Init+0x26a>
 80074b2:	2306      	movs	r3, #6
 80074b4:	e025      	b.n	8007502 <HAL_GPIO_Init+0x26a>
 80074b6:	2305      	movs	r3, #5
 80074b8:	e023      	b.n	8007502 <HAL_GPIO_Init+0x26a>
 80074ba:	2304      	movs	r3, #4
 80074bc:	e021      	b.n	8007502 <HAL_GPIO_Init+0x26a>
 80074be:	2303      	movs	r3, #3
 80074c0:	e01f      	b.n	8007502 <HAL_GPIO_Init+0x26a>
 80074c2:	2302      	movs	r3, #2
 80074c4:	e01d      	b.n	8007502 <HAL_GPIO_Init+0x26a>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e01b      	b.n	8007502 <HAL_GPIO_Init+0x26a>
 80074ca:	bf00      	nop
 80074cc:	58000080 	.word	0x58000080
 80074d0:	58024400 	.word	0x58024400
 80074d4:	58000400 	.word	0x58000400
 80074d8:	58020000 	.word	0x58020000
 80074dc:	58020400 	.word	0x58020400
 80074e0:	58020800 	.word	0x58020800
 80074e4:	58020c00 	.word	0x58020c00
 80074e8:	58021000 	.word	0x58021000
 80074ec:	58021400 	.word	0x58021400
 80074f0:	58021800 	.word	0x58021800
 80074f4:	58021c00 	.word	0x58021c00
 80074f8:	58022000 	.word	0x58022000
 80074fc:	58022400 	.word	0x58022400
 8007500:	2300      	movs	r3, #0
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	f002 0203 	and.w	r2, r2, #3
 8007508:	0092      	lsls	r2, r2, #2
 800750a:	4093      	lsls	r3, r2
 800750c:	69ba      	ldr	r2, [r7, #24]
 800750e:	4313      	orrs	r3, r2
 8007510:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007512:	4938      	ldr	r1, [pc, #224]	; (80075f4 <HAL_GPIO_Init+0x35c>)
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	089b      	lsrs	r3, r3, #2
 8007518:	3302      	adds	r3, #2
 800751a:	69ba      	ldr	r2, [r7, #24]
 800751c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	43db      	mvns	r3, r3
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	4013      	ands	r3, r2
 8007530:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d003      	beq.n	8007546 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	4313      	orrs	r3, r2
 8007544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007546:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800754e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	43db      	mvns	r3, r3
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	4013      	ands	r3, r2
 800755e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007574:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	43db      	mvns	r3, r3
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	4013      	ands	r3, r2
 800758a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d003      	beq.n	80075a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	4313      	orrs	r3, r2
 800759e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	43db      	mvns	r3, r3
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	4013      	ands	r3, r2
 80075b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d003      	beq.n	80075ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80075c2:	69ba      	ldr	r2, [r7, #24]
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	3301      	adds	r3, #1
 80075d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	fa22 f303 	lsr.w	r3, r2, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f47f ae63 	bne.w	80072ac <HAL_GPIO_Init+0x14>
  }
}
 80075e6:	bf00      	nop
 80075e8:	bf00      	nop
 80075ea:	3724      	adds	r7, #36	; 0x24
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	58000400 	.word	0x58000400

080075f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	807b      	strh	r3, [r7, #2]
 8007604:	4613      	mov	r3, r2
 8007606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007608:	787b      	ldrb	r3, [r7, #1]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800760e:	887a      	ldrh	r2, [r7, #2]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007614:	e003      	b.n	800761e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007616:	887b      	ldrh	r3, [r7, #2]
 8007618:	041a      	lsls	r2, r3, #16
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	619a      	str	r2, [r3, #24]
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
	...

0800762c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e08b      	b.n	8007756 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d106      	bne.n	8007658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7fa fc08 	bl	8001e68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2224      	movs	r2, #36	; 0x24
 800765c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0201 	bic.w	r2, r2, #1
 800766e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685a      	ldr	r2, [r3, #4]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800767c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689a      	ldr	r2, [r3, #8]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800768c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d107      	bne.n	80076a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689a      	ldr	r2, [r3, #8]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076a2:	609a      	str	r2, [r3, #8]
 80076a4:	e006      	b.n	80076b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689a      	ldr	r2, [r3, #8]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80076b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d108      	bne.n	80076ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076ca:	605a      	str	r2, [r3, #4]
 80076cc:	e007      	b.n	80076de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6859      	ldr	r1, [r3, #4]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	4b1d      	ldr	r3, [pc, #116]	; (8007760 <HAL_I2C_Init+0x134>)
 80076ea:	430b      	orrs	r3, r1
 80076ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	69d9      	ldr	r1, [r3, #28]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a1a      	ldr	r2, [r3, #32]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0201 	orr.w	r2, r2, #1
 8007736:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	02008000 	.word	0x02008000

08007764 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b20      	cmp	r3, #32
 8007778:	d138      	bne.n	80077ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007780:	2b01      	cmp	r3, #1
 8007782:	d101      	bne.n	8007788 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007784:	2302      	movs	r3, #2
 8007786:	e032      	b.n	80077ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2224      	movs	r2, #36	; 0x24
 8007794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0201 	bic.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6819      	ldr	r1, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	430a      	orrs	r2, r1
 80077c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0201 	orr.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	e000      	b.n	80077ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077ec:	2302      	movs	r3, #2
  }
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80077fa:	b480      	push	{r7}
 80077fc:	b085      	sub	sp, #20
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b20      	cmp	r3, #32
 800780e:	d139      	bne.n	8007884 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800781a:	2302      	movs	r3, #2
 800781c:	e033      	b.n	8007886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2224      	movs	r2, #36	; 0x24
 800782a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0201 	bic.w	r2, r2, #1
 800783c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800784c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	021b      	lsls	r3, r3, #8
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	4313      	orrs	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f042 0201 	orr.w	r2, r2, #1
 800786e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2220      	movs	r2, #32
 8007874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	e000      	b.n	8007886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007884:	2302      	movs	r3, #2
  }
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
	...

08007894 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800789c:	4b19      	ldr	r3, [pc, #100]	; (8007904 <HAL_PWREx_ConfigSupply+0x70>)
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d00a      	beq.n	80078be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80078a8:	4b16      	ldr	r3, [pc, #88]	; (8007904 <HAL_PWREx_ConfigSupply+0x70>)
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f003 0307 	and.w	r3, r3, #7
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d001      	beq.n	80078ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e01f      	b.n	80078fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	e01d      	b.n	80078fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80078be:	4b11      	ldr	r3, [pc, #68]	; (8007904 <HAL_PWREx_ConfigSupply+0x70>)
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f023 0207 	bic.w	r2, r3, #7
 80078c6:	490f      	ldr	r1, [pc, #60]	; (8007904 <HAL_PWREx_ConfigSupply+0x70>)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80078ce:	f7fa ffb7 	bl	8002840 <HAL_GetTick>
 80078d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078d4:	e009      	b.n	80078ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80078d6:	f7fa ffb3 	bl	8002840 <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078e4:	d901      	bls.n	80078ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e007      	b.n	80078fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078ea:	4b06      	ldr	r3, [pc, #24]	; (8007904 <HAL_PWREx_ConfigSupply+0x70>)
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078f6:	d1ee      	bne.n	80078d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	58024800 	.word	0x58024800

08007908 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08c      	sub	sp, #48	; 0x30
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d102      	bne.n	800791c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	f000 bc48 	b.w	80081ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 8088 	beq.w	8007a3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800792a:	4b99      	ldr	r3, [pc, #612]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007932:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007934:	4b96      	ldr	r3, [pc, #600]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007938:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	2b10      	cmp	r3, #16
 800793e:	d007      	beq.n	8007950 <HAL_RCC_OscConfig+0x48>
 8007940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007942:	2b18      	cmp	r3, #24
 8007944:	d111      	bne.n	800796a <HAL_RCC_OscConfig+0x62>
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	f003 0303 	and.w	r3, r3, #3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d10c      	bne.n	800796a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007950:	4b8f      	ldr	r3, [pc, #572]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007958:	2b00      	cmp	r3, #0
 800795a:	d06d      	beq.n	8007a38 <HAL_RCC_OscConfig+0x130>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d169      	bne.n	8007a38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	f000 bc21 	b.w	80081ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007972:	d106      	bne.n	8007982 <HAL_RCC_OscConfig+0x7a>
 8007974:	4b86      	ldr	r3, [pc, #536]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a85      	ldr	r2, [pc, #532]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 800797a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	e02e      	b.n	80079e0 <HAL_RCC_OscConfig+0xd8>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10c      	bne.n	80079a4 <HAL_RCC_OscConfig+0x9c>
 800798a:	4b81      	ldr	r3, [pc, #516]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a80      	ldr	r2, [pc, #512]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007994:	6013      	str	r3, [r2, #0]
 8007996:	4b7e      	ldr	r3, [pc, #504]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a7d      	ldr	r2, [pc, #500]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 800799c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079a0:	6013      	str	r3, [r2, #0]
 80079a2:	e01d      	b.n	80079e0 <HAL_RCC_OscConfig+0xd8>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079ac:	d10c      	bne.n	80079c8 <HAL_RCC_OscConfig+0xc0>
 80079ae:	4b78      	ldr	r3, [pc, #480]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a77      	ldr	r2, [pc, #476]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 80079b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	4b75      	ldr	r3, [pc, #468]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a74      	ldr	r2, [pc, #464]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 80079c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	e00b      	b.n	80079e0 <HAL_RCC_OscConfig+0xd8>
 80079c8:	4b71      	ldr	r3, [pc, #452]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a70      	ldr	r2, [pc, #448]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 80079ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	4b6e      	ldr	r3, [pc, #440]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a6d      	ldr	r2, [pc, #436]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 80079da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d013      	beq.n	8007a10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e8:	f7fa ff2a 	bl	8002840 <HAL_GetTick>
 80079ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079ee:	e008      	b.n	8007a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079f0:	f7fa ff26 	bl	8002840 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b64      	cmp	r3, #100	; 0x64
 80079fc:	d901      	bls.n	8007a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e3d4      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a02:	4b63      	ldr	r3, [pc, #396]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d0f0      	beq.n	80079f0 <HAL_RCC_OscConfig+0xe8>
 8007a0e:	e014      	b.n	8007a3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a10:	f7fa ff16 	bl	8002840 <HAL_GetTick>
 8007a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a16:	e008      	b.n	8007a2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a18:	f7fa ff12 	bl	8002840 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b64      	cmp	r3, #100	; 0x64
 8007a24:	d901      	bls.n	8007a2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e3c0      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a2a:	4b59      	ldr	r3, [pc, #356]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1f0      	bne.n	8007a18 <HAL_RCC_OscConfig+0x110>
 8007a36:	e000      	b.n	8007a3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 80ca 	beq.w	8007bdc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a48:	4b51      	ldr	r3, [pc, #324]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a52:	4b4f      	ldr	r3, [pc, #316]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d007      	beq.n	8007a6e <HAL_RCC_OscConfig+0x166>
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	2b18      	cmp	r3, #24
 8007a62:	d156      	bne.n	8007b12 <HAL_RCC_OscConfig+0x20a>
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d151      	bne.n	8007b12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a6e:	4b48      	ldr	r3, [pc, #288]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0304 	and.w	r3, r3, #4
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d005      	beq.n	8007a86 <HAL_RCC_OscConfig+0x17e>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e392      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a86:	4b42      	ldr	r3, [pc, #264]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f023 0219 	bic.w	r2, r3, #25
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	493f      	ldr	r1, [pc, #252]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a98:	f7fa fed2 	bl	8002840 <HAL_GetTick>
 8007a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a9e:	e008      	b.n	8007ab2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007aa0:	f7fa fece 	bl	8002840 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d901      	bls.n	8007ab2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e37c      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ab2:	4b37      	ldr	r3, [pc, #220]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0304 	and.w	r3, r3, #4
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0f0      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007abe:	f7fa fecb 	bl	8002858 <HAL_GetREVID>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d817      	bhi.n	8007afc <HAL_RCC_OscConfig+0x1f4>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	2b40      	cmp	r3, #64	; 0x40
 8007ad2:	d108      	bne.n	8007ae6 <HAL_RCC_OscConfig+0x1de>
 8007ad4:	4b2e      	ldr	r3, [pc, #184]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007adc:	4a2c      	ldr	r2, [pc, #176]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ae2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ae4:	e07a      	b.n	8007bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ae6:	4b2a      	ldr	r3, [pc, #168]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	031b      	lsls	r3, r3, #12
 8007af4:	4926      	ldr	r1, [pc, #152]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007afa:	e06f      	b.n	8007bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007afc:	4b24      	ldr	r3, [pc, #144]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	061b      	lsls	r3, r3, #24
 8007b0a:	4921      	ldr	r1, [pc, #132]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b10:	e064      	b.n	8007bdc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d047      	beq.n	8007baa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b1a:	4b1d      	ldr	r3, [pc, #116]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f023 0219 	bic.w	r2, r3, #25
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	491a      	ldr	r1, [pc, #104]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b2c:	f7fa fe88 	bl	8002840 <HAL_GetTick>
 8007b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b32:	e008      	b.n	8007b46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b34:	f7fa fe84 	bl	8002840 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e332      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b46:	4b12      	ldr	r3, [pc, #72]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0304 	and.w	r3, r3, #4
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0f0      	beq.n	8007b34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b52:	f7fa fe81 	bl	8002858 <HAL_GetREVID>
 8007b56:	4603      	mov	r3, r0
 8007b58:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d819      	bhi.n	8007b94 <HAL_RCC_OscConfig+0x28c>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	2b40      	cmp	r3, #64	; 0x40
 8007b66:	d108      	bne.n	8007b7a <HAL_RCC_OscConfig+0x272>
 8007b68:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007b70:	4a07      	ldr	r2, [pc, #28]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b76:	6053      	str	r3, [r2, #4]
 8007b78:	e030      	b.n	8007bdc <HAL_RCC_OscConfig+0x2d4>
 8007b7a:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	031b      	lsls	r3, r3, #12
 8007b88:	4901      	ldr	r1, [pc, #4]	; (8007b90 <HAL_RCC_OscConfig+0x288>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	604b      	str	r3, [r1, #4]
 8007b8e:	e025      	b.n	8007bdc <HAL_RCC_OscConfig+0x2d4>
 8007b90:	58024400 	.word	0x58024400
 8007b94:	4b9a      	ldr	r3, [pc, #616]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	061b      	lsls	r3, r3, #24
 8007ba2:	4997      	ldr	r1, [pc, #604]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	604b      	str	r3, [r1, #4]
 8007ba8:	e018      	b.n	8007bdc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007baa:	4b95      	ldr	r3, [pc, #596]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a94      	ldr	r2, [pc, #592]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007bb0:	f023 0301 	bic.w	r3, r3, #1
 8007bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb6:	f7fa fe43 	bl	8002840 <HAL_GetTick>
 8007bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bbc:	e008      	b.n	8007bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bbe:	f7fa fe3f 	bl	8002840 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d901      	bls.n	8007bd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e2ed      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bd0:	4b8b      	ldr	r3, [pc, #556]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0304 	and.w	r3, r3, #4
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1f0      	bne.n	8007bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0310 	and.w	r3, r3, #16
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 80a9 	beq.w	8007d3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bea:	4b85      	ldr	r3, [pc, #532]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bf2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007bf4:	4b82      	ldr	r3, [pc, #520]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d007      	beq.n	8007c10 <HAL_RCC_OscConfig+0x308>
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	2b18      	cmp	r3, #24
 8007c04:	d13a      	bne.n	8007c7c <HAL_RCC_OscConfig+0x374>
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d135      	bne.n	8007c7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c10:	4b7b      	ldr	r3, [pc, #492]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d005      	beq.n	8007c28 <HAL_RCC_OscConfig+0x320>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	2b80      	cmp	r3, #128	; 0x80
 8007c22:	d001      	beq.n	8007c28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e2c1      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c28:	f7fa fe16 	bl	8002858 <HAL_GetREVID>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d817      	bhi.n	8007c66 <HAL_RCC_OscConfig+0x35e>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	2b20      	cmp	r3, #32
 8007c3c:	d108      	bne.n	8007c50 <HAL_RCC_OscConfig+0x348>
 8007c3e:	4b70      	ldr	r3, [pc, #448]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007c46:	4a6e      	ldr	r2, [pc, #440]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007c48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c4e:	e075      	b.n	8007d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c50:	4b6b      	ldr	r3, [pc, #428]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	069b      	lsls	r3, r3, #26
 8007c5e:	4968      	ldr	r1, [pc, #416]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007c60:	4313      	orrs	r3, r2
 8007c62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c64:	e06a      	b.n	8007d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c66:	4b66      	ldr	r3, [pc, #408]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
 8007c72:	061b      	lsls	r3, r3, #24
 8007c74:	4962      	ldr	r1, [pc, #392]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c7a:	e05f      	b.n	8007d3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d042      	beq.n	8007d0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007c84:	4b5e      	ldr	r3, [pc, #376]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a5d      	ldr	r2, [pc, #372]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c90:	f7fa fdd6 	bl	8002840 <HAL_GetTick>
 8007c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c96:	e008      	b.n	8007caa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007c98:	f7fa fdd2 	bl	8002840 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e280      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007caa:	4b55      	ldr	r3, [pc, #340]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0f0      	beq.n	8007c98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cb6:	f7fa fdcf 	bl	8002858 <HAL_GetREVID>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	f241 0203 	movw	r2, #4099	; 0x1003
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d817      	bhi.n	8007cf4 <HAL_RCC_OscConfig+0x3ec>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a1b      	ldr	r3, [r3, #32]
 8007cc8:	2b20      	cmp	r3, #32
 8007cca:	d108      	bne.n	8007cde <HAL_RCC_OscConfig+0x3d6>
 8007ccc:	4b4c      	ldr	r3, [pc, #304]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007cd4:	4a4a      	ldr	r2, [pc, #296]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cda:	6053      	str	r3, [r2, #4]
 8007cdc:	e02e      	b.n	8007d3c <HAL_RCC_OscConfig+0x434>
 8007cde:	4b48      	ldr	r3, [pc, #288]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	069b      	lsls	r3, r3, #26
 8007cec:	4944      	ldr	r1, [pc, #272]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	604b      	str	r3, [r1, #4]
 8007cf2:	e023      	b.n	8007d3c <HAL_RCC_OscConfig+0x434>
 8007cf4:	4b42      	ldr	r3, [pc, #264]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	061b      	lsls	r3, r3, #24
 8007d02:	493f      	ldr	r1, [pc, #252]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60cb      	str	r3, [r1, #12]
 8007d08:	e018      	b.n	8007d3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007d0a:	4b3d      	ldr	r3, [pc, #244]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a3c      	ldr	r2, [pc, #240]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d16:	f7fa fd93 	bl	8002840 <HAL_GetTick>
 8007d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d1c:	e008      	b.n	8007d30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007d1e:	f7fa fd8f 	bl	8002840 <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d901      	bls.n	8007d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e23d      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d30:	4b33      	ldr	r3, [pc, #204]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1f0      	bne.n	8007d1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 0308 	and.w	r3, r3, #8
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d036      	beq.n	8007db6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d019      	beq.n	8007d84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d50:	4b2b      	ldr	r3, [pc, #172]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d54:	4a2a      	ldr	r2, [pc, #168]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007d56:	f043 0301 	orr.w	r3, r3, #1
 8007d5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d5c:	f7fa fd70 	bl	8002840 <HAL_GetTick>
 8007d60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d62:	e008      	b.n	8007d76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d64:	f7fa fd6c 	bl	8002840 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d901      	bls.n	8007d76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e21a      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d76:	4b22      	ldr	r3, [pc, #136]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d7a:	f003 0302 	and.w	r3, r3, #2
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0f0      	beq.n	8007d64 <HAL_RCC_OscConfig+0x45c>
 8007d82:	e018      	b.n	8007db6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d84:	4b1e      	ldr	r3, [pc, #120]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d88:	4a1d      	ldr	r2, [pc, #116]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007d8a:	f023 0301 	bic.w	r3, r3, #1
 8007d8e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d90:	f7fa fd56 	bl	8002840 <HAL_GetTick>
 8007d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d96:	e008      	b.n	8007daa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d98:	f7fa fd52 	bl	8002840 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d901      	bls.n	8007daa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e200      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007daa:	4b15      	ldr	r3, [pc, #84]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1f0      	bne.n	8007d98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d039      	beq.n	8007e36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d01c      	beq.n	8007e04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007dca:	4b0d      	ldr	r3, [pc, #52]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a0c      	ldr	r2, [pc, #48]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007dd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007dd6:	f7fa fd33 	bl	8002840 <HAL_GetTick>
 8007dda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ddc:	e008      	b.n	8007df0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007dde:	f7fa fd2f 	bl	8002840 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d901      	bls.n	8007df0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e1dd      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007df0:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <HAL_RCC_OscConfig+0x4f8>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d0f0      	beq.n	8007dde <HAL_RCC_OscConfig+0x4d6>
 8007dfc:	e01b      	b.n	8007e36 <HAL_RCC_OscConfig+0x52e>
 8007dfe:	bf00      	nop
 8007e00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e04:	4b9b      	ldr	r3, [pc, #620]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a9a      	ldr	r2, [pc, #616]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007e0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e10:	f7fa fd16 	bl	8002840 <HAL_GetTick>
 8007e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e16:	e008      	b.n	8007e2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e18:	f7fa fd12 	bl	8002840 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e1c0      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e2a:	4b92      	ldr	r3, [pc, #584]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1f0      	bne.n	8007e18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0304 	and.w	r3, r3, #4
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 8081 	beq.w	8007f46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007e44:	4b8c      	ldr	r3, [pc, #560]	; (8008078 <HAL_RCC_OscConfig+0x770>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a8b      	ldr	r2, [pc, #556]	; (8008078 <HAL_RCC_OscConfig+0x770>)
 8007e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e50:	f7fa fcf6 	bl	8002840 <HAL_GetTick>
 8007e54:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e56:	e008      	b.n	8007e6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e58:	f7fa fcf2 	bl	8002840 <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	2b64      	cmp	r3, #100	; 0x64
 8007e64:	d901      	bls.n	8007e6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e1a0      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e6a:	4b83      	ldr	r3, [pc, #524]	; (8008078 <HAL_RCC_OscConfig+0x770>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0f0      	beq.n	8007e58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d106      	bne.n	8007e8c <HAL_RCC_OscConfig+0x584>
 8007e7e:	4b7d      	ldr	r3, [pc, #500]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e82:	4a7c      	ldr	r2, [pc, #496]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007e84:	f043 0301 	orr.w	r3, r3, #1
 8007e88:	6713      	str	r3, [r2, #112]	; 0x70
 8007e8a:	e02d      	b.n	8007ee8 <HAL_RCC_OscConfig+0x5e0>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10c      	bne.n	8007eae <HAL_RCC_OscConfig+0x5a6>
 8007e94:	4b77      	ldr	r3, [pc, #476]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e98:	4a76      	ldr	r2, [pc, #472]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007e9a:	f023 0301 	bic.w	r3, r3, #1
 8007e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8007ea0:	4b74      	ldr	r3, [pc, #464]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea4:	4a73      	ldr	r2, [pc, #460]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007ea6:	f023 0304 	bic.w	r3, r3, #4
 8007eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8007eac:	e01c      	b.n	8007ee8 <HAL_RCC_OscConfig+0x5e0>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	2b05      	cmp	r3, #5
 8007eb4:	d10c      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x5c8>
 8007eb6:	4b6f      	ldr	r3, [pc, #444]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eba:	4a6e      	ldr	r2, [pc, #440]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007ebc:	f043 0304 	orr.w	r3, r3, #4
 8007ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ec2:	4b6c      	ldr	r3, [pc, #432]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec6:	4a6b      	ldr	r2, [pc, #428]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007ec8:	f043 0301 	orr.w	r3, r3, #1
 8007ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8007ece:	e00b      	b.n	8007ee8 <HAL_RCC_OscConfig+0x5e0>
 8007ed0:	4b68      	ldr	r3, [pc, #416]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed4:	4a67      	ldr	r2, [pc, #412]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007ed6:	f023 0301 	bic.w	r3, r3, #1
 8007eda:	6713      	str	r3, [r2, #112]	; 0x70
 8007edc:	4b65      	ldr	r3, [pc, #404]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee0:	4a64      	ldr	r2, [pc, #400]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007ee2:	f023 0304 	bic.w	r3, r3, #4
 8007ee6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d015      	beq.n	8007f1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ef0:	f7fa fca6 	bl	8002840 <HAL_GetTick>
 8007ef4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ef6:	e00a      	b.n	8007f0e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ef8:	f7fa fca2 	bl	8002840 <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d901      	bls.n	8007f0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e14e      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f0e:	4b59      	ldr	r3, [pc, #356]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0ee      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x5f0>
 8007f1a:	e014      	b.n	8007f46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f1c:	f7fa fc90 	bl	8002840 <HAL_GetTick>
 8007f20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f22:	e00a      	b.n	8007f3a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f24:	f7fa fc8c 	bl	8002840 <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e138      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f3a:	4b4e      	ldr	r3, [pc, #312]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1ee      	bne.n	8007f24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 812d 	beq.w	80081aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007f50:	4b48      	ldr	r3, [pc, #288]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f58:	2b18      	cmp	r3, #24
 8007f5a:	f000 80bd 	beq.w	80080d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	f040 809e 	bne.w	80080a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f68:	4b42      	ldr	r3, [pc, #264]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a41      	ldr	r2, [pc, #260]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007f6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f74:	f7fa fc64 	bl	8002840 <HAL_GetTick>
 8007f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f7a:	e008      	b.n	8007f8e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f7c:	f7fa fc60 	bl	8002840 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e10e      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f8e:	4b39      	ldr	r3, [pc, #228]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1f0      	bne.n	8007f7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f9a:	4b36      	ldr	r3, [pc, #216]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f9e:	4b37      	ldr	r3, [pc, #220]	; (800807c <HAL_RCC_OscConfig+0x774>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007faa:	0112      	lsls	r2, r2, #4
 8007fac:	430a      	orrs	r2, r1
 8007fae:	4931      	ldr	r1, [pc, #196]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	628b      	str	r3, [r1, #40]	; 0x28
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	025b      	lsls	r3, r3, #9
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	431a      	orrs	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	041b      	lsls	r3, r3, #16
 8007fd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	061b      	lsls	r3, r3, #24
 8007fe0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007fe4:	4923      	ldr	r1, [pc, #140]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007fea:	4b22      	ldr	r3, [pc, #136]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fee:	4a21      	ldr	r2, [pc, #132]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007ff0:	f023 0301 	bic.w	r3, r3, #1
 8007ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007ff6:	4b1f      	ldr	r3, [pc, #124]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8007ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ffa:	4b21      	ldr	r3, [pc, #132]	; (8008080 <HAL_RCC_OscConfig+0x778>)
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008002:	00d2      	lsls	r2, r2, #3
 8008004:	491b      	ldr	r1, [pc, #108]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8008006:	4313      	orrs	r3, r2
 8008008:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800800a:	4b1a      	ldr	r3, [pc, #104]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 800800c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800e:	f023 020c 	bic.w	r2, r3, #12
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	4917      	ldr	r1, [pc, #92]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8008018:	4313      	orrs	r3, r2
 800801a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800801c:	4b15      	ldr	r3, [pc, #84]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	f023 0202 	bic.w	r2, r3, #2
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008028:	4912      	ldr	r1, [pc, #72]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 800802a:	4313      	orrs	r3, r2
 800802c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800802e:	4b11      	ldr	r3, [pc, #68]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8008030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008032:	4a10      	ldr	r2, [pc, #64]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8008034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008038:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800803a:	4b0e      	ldr	r3, [pc, #56]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	4a0d      	ldr	r2, [pc, #52]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8008040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008046:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8008048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804a:	4a0a      	ldr	r2, [pc, #40]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 800804c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008050:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008052:	4b08      	ldr	r3, [pc, #32]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8008054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008056:	4a07      	ldr	r2, [pc, #28]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8008058:	f043 0301 	orr.w	r3, r3, #1
 800805c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800805e:	4b05      	ldr	r3, [pc, #20]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a04      	ldr	r2, [pc, #16]	; (8008074 <HAL_RCC_OscConfig+0x76c>)
 8008064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806a:	f7fa fbe9 	bl	8002840 <HAL_GetTick>
 800806e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008070:	e011      	b.n	8008096 <HAL_RCC_OscConfig+0x78e>
 8008072:	bf00      	nop
 8008074:	58024400 	.word	0x58024400
 8008078:	58024800 	.word	0x58024800
 800807c:	fffffc0c 	.word	0xfffffc0c
 8008080:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008084:	f7fa fbdc 	bl	8002840 <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	2b02      	cmp	r3, #2
 8008090:	d901      	bls.n	8008096 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e08a      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008096:	4b47      	ldr	r3, [pc, #284]	; (80081b4 <HAL_RCC_OscConfig+0x8ac>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0f0      	beq.n	8008084 <HAL_RCC_OscConfig+0x77c>
 80080a2:	e082      	b.n	80081aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080a4:	4b43      	ldr	r3, [pc, #268]	; (80081b4 <HAL_RCC_OscConfig+0x8ac>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a42      	ldr	r2, [pc, #264]	; (80081b4 <HAL_RCC_OscConfig+0x8ac>)
 80080aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b0:	f7fa fbc6 	bl	8002840 <HAL_GetTick>
 80080b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080b6:	e008      	b.n	80080ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080b8:	f7fa fbc2 	bl	8002840 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d901      	bls.n	80080ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e070      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080ca:	4b3a      	ldr	r3, [pc, #232]	; (80081b4 <HAL_RCC_OscConfig+0x8ac>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1f0      	bne.n	80080b8 <HAL_RCC_OscConfig+0x7b0>
 80080d6:	e068      	b.n	80081aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80080d8:	4b36      	ldr	r3, [pc, #216]	; (80081b4 <HAL_RCC_OscConfig+0x8ac>)
 80080da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80080de:	4b35      	ldr	r3, [pc, #212]	; (80081b4 <HAL_RCC_OscConfig+0x8ac>)
 80080e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d031      	beq.n	8008150 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f003 0203 	and.w	r2, r3, #3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d12a      	bne.n	8008150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	091b      	lsrs	r3, r3, #4
 80080fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008106:	429a      	cmp	r2, r3
 8008108:	d122      	bne.n	8008150 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008114:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008116:	429a      	cmp	r2, r3
 8008118:	d11a      	bne.n	8008150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	0a5b      	lsrs	r3, r3, #9
 800811e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008126:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008128:	429a      	cmp	r2, r3
 800812a:	d111      	bne.n	8008150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	0c1b      	lsrs	r3, r3, #16
 8008130:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008138:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800813a:	429a      	cmp	r2, r3
 800813c:	d108      	bne.n	8008150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	0e1b      	lsrs	r3, r3, #24
 8008142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800814c:	429a      	cmp	r2, r3
 800814e:	d001      	beq.n	8008154 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e02b      	b.n	80081ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008154:	4b17      	ldr	r3, [pc, #92]	; (80081b4 <HAL_RCC_OscConfig+0x8ac>)
 8008156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008158:	08db      	lsrs	r3, r3, #3
 800815a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800815e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	429a      	cmp	r2, r3
 8008168:	d01f      	beq.n	80081aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800816a:	4b12      	ldr	r3, [pc, #72]	; (80081b4 <HAL_RCC_OscConfig+0x8ac>)
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	4a11      	ldr	r2, [pc, #68]	; (80081b4 <HAL_RCC_OscConfig+0x8ac>)
 8008170:	f023 0301 	bic.w	r3, r3, #1
 8008174:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008176:	f7fa fb63 	bl	8002840 <HAL_GetTick>
 800817a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800817c:	bf00      	nop
 800817e:	f7fa fb5f 	bl	8002840 <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	4293      	cmp	r3, r2
 8008188:	d0f9      	beq.n	800817e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800818a:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <HAL_RCC_OscConfig+0x8ac>)
 800818c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800818e:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <HAL_RCC_OscConfig+0x8b0>)
 8008190:	4013      	ands	r3, r2
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008196:	00d2      	lsls	r2, r2, #3
 8008198:	4906      	ldr	r1, [pc, #24]	; (80081b4 <HAL_RCC_OscConfig+0x8ac>)
 800819a:	4313      	orrs	r3, r2
 800819c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800819e:	4b05      	ldr	r3, [pc, #20]	; (80081b4 <HAL_RCC_OscConfig+0x8ac>)
 80081a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a2:	4a04      	ldr	r2, [pc, #16]	; (80081b4 <HAL_RCC_OscConfig+0x8ac>)
 80081a4:	f043 0301 	orr.w	r3, r3, #1
 80081a8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3730      	adds	r7, #48	; 0x30
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	58024400 	.word	0x58024400
 80081b8:	ffff0007 	.word	0xffff0007

080081bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e19c      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081d0:	4b8a      	ldr	r3, [pc, #552]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 030f 	and.w	r3, r3, #15
 80081d8:	683a      	ldr	r2, [r7, #0]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d910      	bls.n	8008200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081de:	4b87      	ldr	r3, [pc, #540]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f023 020f 	bic.w	r2, r3, #15
 80081e6:	4985      	ldr	r1, [pc, #532]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ee:	4b83      	ldr	r3, [pc, #524]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d001      	beq.n	8008200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e184      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	d010      	beq.n	800822e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	691a      	ldr	r2, [r3, #16]
 8008210:	4b7b      	ldr	r3, [pc, #492]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008218:	429a      	cmp	r2, r3
 800821a:	d908      	bls.n	800822e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800821c:	4b78      	ldr	r3, [pc, #480]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	4975      	ldr	r1, [pc, #468]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800822a:	4313      	orrs	r3, r2
 800822c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0308 	and.w	r3, r3, #8
 8008236:	2b00      	cmp	r3, #0
 8008238:	d010      	beq.n	800825c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	695a      	ldr	r2, [r3, #20]
 800823e:	4b70      	ldr	r3, [pc, #448]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008246:	429a      	cmp	r2, r3
 8008248:	d908      	bls.n	800825c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800824a:	4b6d      	ldr	r3, [pc, #436]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	496a      	ldr	r1, [pc, #424]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 8008258:	4313      	orrs	r3, r2
 800825a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0310 	and.w	r3, r3, #16
 8008264:	2b00      	cmp	r3, #0
 8008266:	d010      	beq.n	800828a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	699a      	ldr	r2, [r3, #24]
 800826c:	4b64      	ldr	r3, [pc, #400]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008274:	429a      	cmp	r2, r3
 8008276:	d908      	bls.n	800828a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008278:	4b61      	ldr	r3, [pc, #388]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	495e      	ldr	r1, [pc, #376]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 8008286:	4313      	orrs	r3, r2
 8008288:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0320 	and.w	r3, r3, #32
 8008292:	2b00      	cmp	r3, #0
 8008294:	d010      	beq.n	80082b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	69da      	ldr	r2, [r3, #28]
 800829a:	4b59      	ldr	r3, [pc, #356]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d908      	bls.n	80082b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80082a6:	4b56      	ldr	r3, [pc, #344]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	4953      	ldr	r1, [pc, #332]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80082b4:	4313      	orrs	r3, r2
 80082b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d010      	beq.n	80082e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68da      	ldr	r2, [r3, #12]
 80082c8:	4b4d      	ldr	r3, [pc, #308]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	f003 030f 	and.w	r3, r3, #15
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d908      	bls.n	80082e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082d4:	4b4a      	ldr	r3, [pc, #296]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	f023 020f 	bic.w	r2, r3, #15
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	4947      	ldr	r1, [pc, #284]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d055      	beq.n	800839e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80082f2:	4b43      	ldr	r3, [pc, #268]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	4940      	ldr	r1, [pc, #256]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 8008300:	4313      	orrs	r3, r2
 8008302:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	2b02      	cmp	r3, #2
 800830a:	d107      	bne.n	800831c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800830c:	4b3c      	ldr	r3, [pc, #240]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d121      	bne.n	800835c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e0f6      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	2b03      	cmp	r3, #3
 8008322:	d107      	bne.n	8008334 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008324:	4b36      	ldr	r3, [pc, #216]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d115      	bne.n	800835c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e0ea      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	2b01      	cmp	r3, #1
 800833a:	d107      	bne.n	800834c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800833c:	4b30      	ldr	r3, [pc, #192]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008344:	2b00      	cmp	r3, #0
 8008346:	d109      	bne.n	800835c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e0de      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800834c:	4b2c      	ldr	r3, [pc, #176]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e0d6      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800835c:	4b28      	ldr	r3, [pc, #160]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	f023 0207 	bic.w	r2, r3, #7
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	4925      	ldr	r1, [pc, #148]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800836a:	4313      	orrs	r3, r2
 800836c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800836e:	f7fa fa67 	bl	8002840 <HAL_GetTick>
 8008372:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008374:	e00a      	b.n	800838c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008376:	f7fa fa63 	bl	8002840 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	f241 3288 	movw	r2, #5000	; 0x1388
 8008384:	4293      	cmp	r3, r2
 8008386:	d901      	bls.n	800838c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e0be      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800838c:	4b1c      	ldr	r3, [pc, #112]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	429a      	cmp	r2, r3
 800839c:	d1eb      	bne.n	8008376 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d010      	beq.n	80083cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	4b14      	ldr	r3, [pc, #80]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	f003 030f 	and.w	r3, r3, #15
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d208      	bcs.n	80083cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083ba:	4b11      	ldr	r3, [pc, #68]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	f023 020f 	bic.w	r2, r3, #15
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	490e      	ldr	r1, [pc, #56]	; (8008400 <HAL_RCC_ClockConfig+0x244>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083cc:	4b0b      	ldr	r3, [pc, #44]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 030f 	and.w	r3, r3, #15
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d214      	bcs.n	8008404 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083da:	4b08      	ldr	r3, [pc, #32]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f023 020f 	bic.w	r2, r3, #15
 80083e2:	4906      	ldr	r1, [pc, #24]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ea:	4b04      	ldr	r3, [pc, #16]	; (80083fc <HAL_RCC_ClockConfig+0x240>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 030f 	and.w	r3, r3, #15
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d005      	beq.n	8008404 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e086      	b.n	800850a <HAL_RCC_ClockConfig+0x34e>
 80083fc:	52002000 	.word	0x52002000
 8008400:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d010      	beq.n	8008432 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	4b3f      	ldr	r3, [pc, #252]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800841c:	429a      	cmp	r2, r3
 800841e:	d208      	bcs.n	8008432 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008420:	4b3c      	ldr	r3, [pc, #240]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	4939      	ldr	r1, [pc, #228]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 800842e:	4313      	orrs	r3, r2
 8008430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0308 	and.w	r3, r3, #8
 800843a:	2b00      	cmp	r3, #0
 800843c:	d010      	beq.n	8008460 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	695a      	ldr	r2, [r3, #20]
 8008442:	4b34      	ldr	r3, [pc, #208]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800844a:	429a      	cmp	r2, r3
 800844c:	d208      	bcs.n	8008460 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800844e:	4b31      	ldr	r3, [pc, #196]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	492e      	ldr	r1, [pc, #184]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 800845c:	4313      	orrs	r3, r2
 800845e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 0310 	and.w	r3, r3, #16
 8008468:	2b00      	cmp	r3, #0
 800846a:	d010      	beq.n	800848e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	699a      	ldr	r2, [r3, #24]
 8008470:	4b28      	ldr	r3, [pc, #160]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 8008472:	69db      	ldr	r3, [r3, #28]
 8008474:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008478:	429a      	cmp	r2, r3
 800847a:	d208      	bcs.n	800848e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800847c:	4b25      	ldr	r3, [pc, #148]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	4922      	ldr	r1, [pc, #136]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 800848a:	4313      	orrs	r3, r2
 800848c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0320 	and.w	r3, r3, #32
 8008496:	2b00      	cmp	r3, #0
 8008498:	d010      	beq.n	80084bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	69da      	ldr	r2, [r3, #28]
 800849e:	4b1d      	ldr	r3, [pc, #116]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d208      	bcs.n	80084bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80084aa:	4b1a      	ldr	r3, [pc, #104]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	69db      	ldr	r3, [r3, #28]
 80084b6:	4917      	ldr	r1, [pc, #92]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 80084b8:	4313      	orrs	r3, r2
 80084ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80084bc:	f000 f834 	bl	8008528 <HAL_RCC_GetSysClockFreq>
 80084c0:	4602      	mov	r2, r0
 80084c2:	4b14      	ldr	r3, [pc, #80]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	0a1b      	lsrs	r3, r3, #8
 80084c8:	f003 030f 	and.w	r3, r3, #15
 80084cc:	4912      	ldr	r1, [pc, #72]	; (8008518 <HAL_RCC_ClockConfig+0x35c>)
 80084ce:	5ccb      	ldrb	r3, [r1, r3]
 80084d0:	f003 031f 	and.w	r3, r3, #31
 80084d4:	fa22 f303 	lsr.w	r3, r2, r3
 80084d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80084da:	4b0e      	ldr	r3, [pc, #56]	; (8008514 <HAL_RCC_ClockConfig+0x358>)
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	f003 030f 	and.w	r3, r3, #15
 80084e2:	4a0d      	ldr	r2, [pc, #52]	; (8008518 <HAL_RCC_ClockConfig+0x35c>)
 80084e4:	5cd3      	ldrb	r3, [r2, r3]
 80084e6:	f003 031f 	and.w	r3, r3, #31
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	fa22 f303 	lsr.w	r3, r2, r3
 80084f0:	4a0a      	ldr	r2, [pc, #40]	; (800851c <HAL_RCC_ClockConfig+0x360>)
 80084f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80084f4:	4a0a      	ldr	r2, [pc, #40]	; (8008520 <HAL_RCC_ClockConfig+0x364>)
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80084fa:	4b0a      	ldr	r3, [pc, #40]	; (8008524 <HAL_RCC_ClockConfig+0x368>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4618      	mov	r0, r3
 8008500:	f7f9 fed6 	bl	80022b0 <HAL_InitTick>
 8008504:	4603      	mov	r3, r0
 8008506:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008508:	7bfb      	ldrb	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	58024400 	.word	0x58024400
 8008518:	08013d70 	.word	0x08013d70
 800851c:	24000004 	.word	0x24000004
 8008520:	24000000 	.word	0x24000000
 8008524:	24000008 	.word	0x24000008

08008528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008528:	b480      	push	{r7}
 800852a:	b089      	sub	sp, #36	; 0x24
 800852c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800852e:	4bb3      	ldr	r3, [pc, #716]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008536:	2b18      	cmp	r3, #24
 8008538:	f200 8155 	bhi.w	80087e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800853c:	a201      	add	r2, pc, #4	; (adr r2, 8008544 <HAL_RCC_GetSysClockFreq+0x1c>)
 800853e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008542:	bf00      	nop
 8008544:	080085a9 	.word	0x080085a9
 8008548:	080087e7 	.word	0x080087e7
 800854c:	080087e7 	.word	0x080087e7
 8008550:	080087e7 	.word	0x080087e7
 8008554:	080087e7 	.word	0x080087e7
 8008558:	080087e7 	.word	0x080087e7
 800855c:	080087e7 	.word	0x080087e7
 8008560:	080087e7 	.word	0x080087e7
 8008564:	080085cf 	.word	0x080085cf
 8008568:	080087e7 	.word	0x080087e7
 800856c:	080087e7 	.word	0x080087e7
 8008570:	080087e7 	.word	0x080087e7
 8008574:	080087e7 	.word	0x080087e7
 8008578:	080087e7 	.word	0x080087e7
 800857c:	080087e7 	.word	0x080087e7
 8008580:	080087e7 	.word	0x080087e7
 8008584:	080085d5 	.word	0x080085d5
 8008588:	080087e7 	.word	0x080087e7
 800858c:	080087e7 	.word	0x080087e7
 8008590:	080087e7 	.word	0x080087e7
 8008594:	080087e7 	.word	0x080087e7
 8008598:	080087e7 	.word	0x080087e7
 800859c:	080087e7 	.word	0x080087e7
 80085a0:	080087e7 	.word	0x080087e7
 80085a4:	080085db 	.word	0x080085db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085a8:	4b94      	ldr	r3, [pc, #592]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0320 	and.w	r3, r3, #32
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d009      	beq.n	80085c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085b4:	4b91      	ldr	r3, [pc, #580]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	08db      	lsrs	r3, r3, #3
 80085ba:	f003 0303 	and.w	r3, r3, #3
 80085be:	4a90      	ldr	r2, [pc, #576]	; (8008800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085c0:	fa22 f303 	lsr.w	r3, r2, r3
 80085c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80085c6:	e111      	b.n	80087ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80085c8:	4b8d      	ldr	r3, [pc, #564]	; (8008800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085ca:	61bb      	str	r3, [r7, #24]
      break;
 80085cc:	e10e      	b.n	80087ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80085ce:	4b8d      	ldr	r3, [pc, #564]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80085d0:	61bb      	str	r3, [r7, #24]
      break;
 80085d2:	e10b      	b.n	80087ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80085d4:	4b8c      	ldr	r3, [pc, #560]	; (8008808 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80085d6:	61bb      	str	r3, [r7, #24]
      break;
 80085d8:	e108      	b.n	80087ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085da:	4b88      	ldr	r3, [pc, #544]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80085e4:	4b85      	ldr	r3, [pc, #532]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e8:	091b      	lsrs	r3, r3, #4
 80085ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80085f0:	4b82      	ldr	r3, [pc, #520]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80085fa:	4b80      	ldr	r3, [pc, #512]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fe:	08db      	lsrs	r3, r3, #3
 8008600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	fb02 f303 	mul.w	r3, r2, r3
 800860a:	ee07 3a90 	vmov	s15, r3
 800860e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008612:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 80e1 	beq.w	80087e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	2b02      	cmp	r3, #2
 8008622:	f000 8083 	beq.w	800872c <HAL_RCC_GetSysClockFreq+0x204>
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2b02      	cmp	r3, #2
 800862a:	f200 80a1 	bhi.w	8008770 <HAL_RCC_GetSysClockFreq+0x248>
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <HAL_RCC_GetSysClockFreq+0x114>
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d056      	beq.n	80086e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800863a:	e099      	b.n	8008770 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800863c:	4b6f      	ldr	r3, [pc, #444]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0320 	and.w	r3, r3, #32
 8008644:	2b00      	cmp	r3, #0
 8008646:	d02d      	beq.n	80086a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008648:	4b6c      	ldr	r3, [pc, #432]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	08db      	lsrs	r3, r3, #3
 800864e:	f003 0303 	and.w	r3, r3, #3
 8008652:	4a6b      	ldr	r2, [pc, #428]	; (8008800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008654:	fa22 f303 	lsr.w	r3, r2, r3
 8008658:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	ee07 3a90 	vmov	s15, r3
 8008660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	ee07 3a90 	vmov	s15, r3
 800866a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008672:	4b62      	ldr	r3, [pc, #392]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008682:	ed97 6a02 	vldr	s12, [r7, #8]
 8008686:	eddf 5a61 	vldr	s11, [pc, #388]	; 800880c <HAL_RCC_GetSysClockFreq+0x2e4>
 800868a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800869a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80086a2:	e087      	b.n	80087b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	ee07 3a90 	vmov	s15, r3
 80086aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008810 <HAL_RCC_GetSysClockFreq+0x2e8>
 80086b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b6:	4b51      	ldr	r3, [pc, #324]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80086ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800880c <HAL_RCC_GetSysClockFreq+0x2e4>
 80086ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80086e6:	e065      	b.n	80087b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	ee07 3a90 	vmov	s15, r3
 80086ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008814 <HAL_RCC_GetSysClockFreq+0x2ec>
 80086f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086fa:	4b40      	ldr	r3, [pc, #256]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800870a:	ed97 6a02 	vldr	s12, [r7, #8]
 800870e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800880c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800871a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800871e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008726:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800872a:	e043      	b.n	80087b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	ee07 3a90 	vmov	s15, r3
 8008732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008736:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008818 <HAL_RCC_GetSysClockFreq+0x2f0>
 800873a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873e:	4b2f      	ldr	r3, [pc, #188]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008752:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800880c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800875a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800875e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800876a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800876e:	e021      	b.n	80087b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	ee07 3a90 	vmov	s15, r3
 8008776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008814 <HAL_RCC_GetSysClockFreq+0x2ec>
 800877e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008782:	4b1e      	ldr	r3, [pc, #120]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008792:	ed97 6a02 	vldr	s12, [r7, #8]
 8008796:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800880c <HAL_RCC_GetSysClockFreq+0x2e4>
 800879a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800879e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80087b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80087b4:	4b11      	ldr	r3, [pc, #68]	; (80087fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b8:	0a5b      	lsrs	r3, r3, #9
 80087ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087be:	3301      	adds	r3, #1
 80087c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	ee07 3a90 	vmov	s15, r3
 80087c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80087cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80087d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087d8:	ee17 3a90 	vmov	r3, s15
 80087dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80087de:	e005      	b.n	80087ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	61bb      	str	r3, [r7, #24]
      break;
 80087e4:	e002      	b.n	80087ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80087e6:	4b07      	ldr	r3, [pc, #28]	; (8008804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80087e8:	61bb      	str	r3, [r7, #24]
      break;
 80087ea:	bf00      	nop
  }

  return sysclockfreq;
 80087ec:	69bb      	ldr	r3, [r7, #24]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3724      	adds	r7, #36	; 0x24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	58024400 	.word	0x58024400
 8008800:	03d09000 	.word	0x03d09000
 8008804:	003d0900 	.word	0x003d0900
 8008808:	017d7840 	.word	0x017d7840
 800880c:	46000000 	.word	0x46000000
 8008810:	4c742400 	.word	0x4c742400
 8008814:	4a742400 	.word	0x4a742400
 8008818:	4bbebc20 	.word	0x4bbebc20

0800881c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008822:	f7ff fe81 	bl	8008528 <HAL_RCC_GetSysClockFreq>
 8008826:	4602      	mov	r2, r0
 8008828:	4b10      	ldr	r3, [pc, #64]	; (800886c <HAL_RCC_GetHCLKFreq+0x50>)
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	0a1b      	lsrs	r3, r3, #8
 800882e:	f003 030f 	and.w	r3, r3, #15
 8008832:	490f      	ldr	r1, [pc, #60]	; (8008870 <HAL_RCC_GetHCLKFreq+0x54>)
 8008834:	5ccb      	ldrb	r3, [r1, r3]
 8008836:	f003 031f 	and.w	r3, r3, #31
 800883a:	fa22 f303 	lsr.w	r3, r2, r3
 800883e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008840:	4b0a      	ldr	r3, [pc, #40]	; (800886c <HAL_RCC_GetHCLKFreq+0x50>)
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	4a09      	ldr	r2, [pc, #36]	; (8008870 <HAL_RCC_GetHCLKFreq+0x54>)
 800884a:	5cd3      	ldrb	r3, [r2, r3]
 800884c:	f003 031f 	and.w	r3, r3, #31
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	fa22 f303 	lsr.w	r3, r2, r3
 8008856:	4a07      	ldr	r2, [pc, #28]	; (8008874 <HAL_RCC_GetHCLKFreq+0x58>)
 8008858:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800885a:	4a07      	ldr	r2, [pc, #28]	; (8008878 <HAL_RCC_GetHCLKFreq+0x5c>)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008860:	4b04      	ldr	r3, [pc, #16]	; (8008874 <HAL_RCC_GetHCLKFreq+0x58>)
 8008862:	681b      	ldr	r3, [r3, #0]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	58024400 	.word	0x58024400
 8008870:	08013d70 	.word	0x08013d70
 8008874:	24000004 	.word	0x24000004
 8008878:	24000000 	.word	0x24000000

0800887c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008880:	f7ff ffcc 	bl	800881c <HAL_RCC_GetHCLKFreq>
 8008884:	4602      	mov	r2, r0
 8008886:	4b06      	ldr	r3, [pc, #24]	; (80088a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008888:	69db      	ldr	r3, [r3, #28]
 800888a:	091b      	lsrs	r3, r3, #4
 800888c:	f003 0307 	and.w	r3, r3, #7
 8008890:	4904      	ldr	r1, [pc, #16]	; (80088a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008892:	5ccb      	ldrb	r3, [r1, r3]
 8008894:	f003 031f 	and.w	r3, r3, #31
 8008898:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800889c:	4618      	mov	r0, r3
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	58024400 	.word	0x58024400
 80088a4:	08013d70 	.word	0x08013d70

080088a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80088ac:	f7ff ffb6 	bl	800881c <HAL_RCC_GetHCLKFreq>
 80088b0:	4602      	mov	r2, r0
 80088b2:	4b06      	ldr	r3, [pc, #24]	; (80088cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	0a1b      	lsrs	r3, r3, #8
 80088b8:	f003 0307 	and.w	r3, r3, #7
 80088bc:	4904      	ldr	r1, [pc, #16]	; (80088d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80088be:	5ccb      	ldrb	r3, [r1, r3]
 80088c0:	f003 031f 	and.w	r3, r3, #31
 80088c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	58024400 	.word	0x58024400
 80088d0:	08013d70 	.word	0x08013d70

080088d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	223f      	movs	r2, #63	; 0x3f
 80088e2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80088e4:	4b1a      	ldr	r3, [pc, #104]	; (8008950 <HAL_RCC_GetClockConfig+0x7c>)
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	f003 0207 	and.w	r2, r3, #7
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80088f0:	4b17      	ldr	r3, [pc, #92]	; (8008950 <HAL_RCC_GetClockConfig+0x7c>)
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80088fc:	4b14      	ldr	r3, [pc, #80]	; (8008950 <HAL_RCC_GetClockConfig+0x7c>)
 80088fe:	699b      	ldr	r3, [r3, #24]
 8008900:	f003 020f 	and.w	r2, r3, #15
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008908:	4b11      	ldr	r3, [pc, #68]	; (8008950 <HAL_RCC_GetClockConfig+0x7c>)
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8008914:	4b0e      	ldr	r3, [pc, #56]	; (8008950 <HAL_RCC_GetClockConfig+0x7c>)
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008920:	4b0b      	ldr	r3, [pc, #44]	; (8008950 <HAL_RCC_GetClockConfig+0x7c>)
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800892c:	4b08      	ldr	r3, [pc, #32]	; (8008950 <HAL_RCC_GetClockConfig+0x7c>)
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008938:	4b06      	ldr	r3, [pc, #24]	; (8008954 <HAL_RCC_GetClockConfig+0x80>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 020f 	and.w	r2, r3, #15
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	601a      	str	r2, [r3, #0]
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	58024400 	.word	0x58024400
 8008954:	52002000 	.word	0x52002000

08008958 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800895c:	b0ca      	sub	sp, #296	; 0x128
 800895e:	af00      	add	r7, sp, #0
 8008960:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008964:	2300      	movs	r3, #0
 8008966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800896a:	2300      	movs	r3, #0
 800896c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800897c:	2500      	movs	r5, #0
 800897e:	ea54 0305 	orrs.w	r3, r4, r5
 8008982:	d049      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008984:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800898a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800898e:	d02f      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008990:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008994:	d828      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800899a:	d01a      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800899c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089a0:	d822      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d003      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80089a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089aa:	d007      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80089ac:	e01c      	b.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089ae:	4bb8      	ldr	r3, [pc, #736]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b2:	4ab7      	ldr	r2, [pc, #732]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089ba:	e01a      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c0:	3308      	adds	r3, #8
 80089c2:	2102      	movs	r1, #2
 80089c4:	4618      	mov	r0, r3
 80089c6:	f002 fb61 	bl	800b08c <RCCEx_PLL2_Config>
 80089ca:	4603      	mov	r3, r0
 80089cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089d0:	e00f      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089d6:	3328      	adds	r3, #40	; 0x28
 80089d8:	2102      	movs	r1, #2
 80089da:	4618      	mov	r0, r3
 80089dc:	f002 fc08 	bl	800b1f0 <RCCEx_PLL3_Config>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089e6:	e004      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089ee:	e000      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80089f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10a      	bne.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80089fa:	4ba5      	ldr	r3, [pc, #660]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a08:	4aa1      	ldr	r2, [pc, #644]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a0a:	430b      	orrs	r3, r1
 8008a0c:	6513      	str	r3, [r2, #80]	; 0x50
 8008a0e:	e003      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a20:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008a24:	f04f 0900 	mov.w	r9, #0
 8008a28:	ea58 0309 	orrs.w	r3, r8, r9
 8008a2c:	d047      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a34:	2b04      	cmp	r3, #4
 8008a36:	d82a      	bhi.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008a38:	a201      	add	r2, pc, #4	; (adr r2, 8008a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3e:	bf00      	nop
 8008a40:	08008a55 	.word	0x08008a55
 8008a44:	08008a63 	.word	0x08008a63
 8008a48:	08008a79 	.word	0x08008a79
 8008a4c:	08008a97 	.word	0x08008a97
 8008a50:	08008a97 	.word	0x08008a97
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a54:	4b8e      	ldr	r3, [pc, #568]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a58:	4a8d      	ldr	r2, [pc, #564]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a60:	e01a      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a66:	3308      	adds	r3, #8
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f002 fb0e 	bl	800b08c <RCCEx_PLL2_Config>
 8008a70:	4603      	mov	r3, r0
 8008a72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a76:	e00f      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a7c:	3328      	adds	r3, #40	; 0x28
 8008a7e:	2100      	movs	r1, #0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f002 fbb5 	bl	800b1f0 <RCCEx_PLL3_Config>
 8008a86:	4603      	mov	r3, r0
 8008a88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a8c:	e004      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a94:	e000      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10a      	bne.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008aa0:	4b7b      	ldr	r3, [pc, #492]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa4:	f023 0107 	bic.w	r1, r3, #7
 8008aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aae:	4a78      	ldr	r2, [pc, #480]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ab0:	430b      	orrs	r3, r1
 8008ab2:	6513      	str	r3, [r2, #80]	; 0x50
 8008ab4:	e003      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008aca:	f04f 0b00 	mov.w	fp, #0
 8008ace:	ea5a 030b 	orrs.w	r3, sl, fp
 8008ad2:	d04c      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ade:	d030      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ae4:	d829      	bhi.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008ae6:	2bc0      	cmp	r3, #192	; 0xc0
 8008ae8:	d02d      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008aea:	2bc0      	cmp	r3, #192	; 0xc0
 8008aec:	d825      	bhi.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008aee:	2b80      	cmp	r3, #128	; 0x80
 8008af0:	d018      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008af2:	2b80      	cmp	r3, #128	; 0x80
 8008af4:	d821      	bhi.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008afa:	2b40      	cmp	r3, #64	; 0x40
 8008afc:	d007      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008afe:	e01c      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b00:	4b63      	ldr	r3, [pc, #396]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	4a62      	ldr	r2, [pc, #392]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008b0c:	e01c      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b12:	3308      	adds	r3, #8
 8008b14:	2100      	movs	r1, #0
 8008b16:	4618      	mov	r0, r3
 8008b18:	f002 fab8 	bl	800b08c <RCCEx_PLL2_Config>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008b22:	e011      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b28:	3328      	adds	r3, #40	; 0x28
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f002 fb5f 	bl	800b1f0 <RCCEx_PLL3_Config>
 8008b32:	4603      	mov	r3, r0
 8008b34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008b38:	e006      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b40:	e002      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008b42:	bf00      	nop
 8008b44:	e000      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10a      	bne.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008b50:	4b4f      	ldr	r3, [pc, #316]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b54:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b5e:	4a4c      	ldr	r2, [pc, #304]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b60:	430b      	orrs	r3, r1
 8008b62:	6513      	str	r3, [r2, #80]	; 0x50
 8008b64:	e003      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b76:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008b7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008b84:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	d053      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008b96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008b9a:	d035      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008b9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ba0:	d82e      	bhi.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008ba2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ba6:	d031      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008ba8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bac:	d828      	bhi.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bb2:	d01a      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008bb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bb8:	d822      	bhi.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d003      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bc2:	d007      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008bc4:	e01c      	b.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc6:	4b32      	ldr	r3, [pc, #200]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bca:	4a31      	ldr	r2, [pc, #196]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bd2:	e01c      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd8:	3308      	adds	r3, #8
 8008bda:	2100      	movs	r1, #0
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f002 fa55 	bl	800b08c <RCCEx_PLL2_Config>
 8008be2:	4603      	mov	r3, r0
 8008be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008be8:	e011      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bee:	3328      	adds	r3, #40	; 0x28
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f002 fafc 	bl	800b1f0 <RCCEx_PLL3_Config>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bfe:	e006      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c06:	e002      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008c08:	bf00      	nop
 8008c0a:	e000      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d10b      	bne.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008c16:	4b1e      	ldr	r3, [pc, #120]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c1a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008c26:	4a1a      	ldr	r2, [pc, #104]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c28:	430b      	orrs	r3, r1
 8008c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8008c2c:	e003      	b.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008c42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008c46:	2300      	movs	r3, #0
 8008c48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008c4c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008c50:	460b      	mov	r3, r1
 8008c52:	4313      	orrs	r3, r2
 8008c54:	d056      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c62:	d038      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008c64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c68:	d831      	bhi.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c6e:	d034      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008c70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008c74:	d82b      	bhi.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c7a:	d01d      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008c7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c80:	d825      	bhi.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d006      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008c86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c8a:	d00a      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008c8c:	e01f      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c8e:	bf00      	nop
 8008c90:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c94:	4ba2      	ldr	r3, [pc, #648]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c98:	4aa1      	ldr	r2, [pc, #644]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ca0:	e01c      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ca6:	3308      	adds	r3, #8
 8008ca8:	2100      	movs	r1, #0
 8008caa:	4618      	mov	r0, r3
 8008cac:	f002 f9ee 	bl	800b08c <RCCEx_PLL2_Config>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008cb6:	e011      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cbc:	3328      	adds	r3, #40	; 0x28
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f002 fa95 	bl	800b1f0 <RCCEx_PLL3_Config>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ccc:	e006      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cd4:	e002      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008cd6:	bf00      	nop
 8008cd8:	e000      	b.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10b      	bne.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008ce4:	4b8e      	ldr	r3, [pc, #568]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008cf4:	4a8a      	ldr	r2, [pc, #552]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cf6:	430b      	orrs	r3, r1
 8008cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8008cfa:	e003      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d00:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008d10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008d14:	2300      	movs	r3, #0
 8008d16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d1a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4313      	orrs	r3, r2
 8008d22:	d03a      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d2a:	2b30      	cmp	r3, #48	; 0x30
 8008d2c:	d01f      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008d2e:	2b30      	cmp	r3, #48	; 0x30
 8008d30:	d819      	bhi.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008d32:	2b20      	cmp	r3, #32
 8008d34:	d00c      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	d815      	bhi.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d019      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008d3e:	2b10      	cmp	r3, #16
 8008d40:	d111      	bne.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d42:	4b77      	ldr	r3, [pc, #476]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d46:	4a76      	ldr	r2, [pc, #472]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008d4e:	e011      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d54:	3308      	adds	r3, #8
 8008d56:	2102      	movs	r1, #2
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f002 f997 	bl	800b08c <RCCEx_PLL2_Config>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008d64:	e006      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d6c:	e002      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008d6e:	bf00      	nop
 8008d70:	e000      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d7c:	4b68      	ldr	r3, [pc, #416]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d80:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d8a:	4a65      	ldr	r2, [pc, #404]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d90:	e003      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008da6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008daa:	2300      	movs	r3, #0
 8008dac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008db0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4313      	orrs	r3, r2
 8008db8:	d051      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dc4:	d035      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dca:	d82e      	bhi.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008dcc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dd0:	d031      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008dd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dd6:	d828      	bhi.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ddc:	d01a      	beq.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008de2:	d822      	bhi.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d003      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dec:	d007      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008dee:	e01c      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008df0:	4b4b      	ldr	r3, [pc, #300]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	4a4a      	ldr	r2, [pc, #296]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008dfc:	e01c      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e02:	3308      	adds	r3, #8
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f002 f940 	bl	800b08c <RCCEx_PLL2_Config>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008e12:	e011      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e18:	3328      	adds	r3, #40	; 0x28
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f002 f9e7 	bl	800b1f0 <RCCEx_PLL3_Config>
 8008e22:	4603      	mov	r3, r0
 8008e24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008e28:	e006      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e30:	e002      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008e32:	bf00      	nop
 8008e34:	e000      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10a      	bne.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008e40:	4b37      	ldr	r3, [pc, #220]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e44:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e4e:	4a34      	ldr	r2, [pc, #208]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e50:	430b      	orrs	r3, r1
 8008e52:	6513      	str	r3, [r2, #80]	; 0x50
 8008e54:	e003      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008e6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e6e:	2300      	movs	r3, #0
 8008e70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	d056      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e88:	d033      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008e8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e8e:	d82c      	bhi.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e94:	d02f      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008e96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e9a:	d826      	bhi.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008e9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ea0:	d02b      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008ea2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ea6:	d820      	bhi.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eac:	d012      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008eae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eb2:	d81a      	bhi.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d022      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ebc:	d115      	bne.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ec2:	3308      	adds	r3, #8
 8008ec4:	2101      	movs	r1, #1
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f002 f8e0 	bl	800b08c <RCCEx_PLL2_Config>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ed2:	e015      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ed8:	3328      	adds	r3, #40	; 0x28
 8008eda:	2101      	movs	r1, #1
 8008edc:	4618      	mov	r0, r3
 8008ede:	f002 f987 	bl	800b1f0 <RCCEx_PLL3_Config>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ee8:	e00a      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ef0:	e006      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ef2:	bf00      	nop
 8008ef4:	e004      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008ef6:	bf00      	nop
 8008ef8:	e002      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008efa:	bf00      	nop
 8008efc:	e000      	b.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10d      	bne.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008f08:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f0c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f16:	4a02      	ldr	r2, [pc, #8]	; (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f18:	430b      	orrs	r3, r1
 8008f1a:	6513      	str	r3, [r2, #80]	; 0x50
 8008f1c:	e006      	b.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008f1e:	bf00      	nop
 8008f20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f34:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f42:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008f46:	460b      	mov	r3, r1
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	d055      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f58:	d033      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f5e:	d82c      	bhi.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f64:	d02f      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f6a:	d826      	bhi.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f70:	d02b      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008f72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f76:	d820      	bhi.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f7c:	d012      	beq.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f82:	d81a      	bhi.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d022      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f8c:	d115      	bne.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f92:	3308      	adds	r3, #8
 8008f94:	2101      	movs	r1, #1
 8008f96:	4618      	mov	r0, r3
 8008f98:	f002 f878 	bl	800b08c <RCCEx_PLL2_Config>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008fa2:	e015      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa8:	3328      	adds	r3, #40	; 0x28
 8008faa:	2101      	movs	r1, #1
 8008fac:	4618      	mov	r0, r3
 8008fae:	f002 f91f 	bl	800b1f0 <RCCEx_PLL3_Config>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008fb8:	e00a      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008fc0:	e006      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008fc2:	bf00      	nop
 8008fc4:	e004      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008fc6:	bf00      	nop
 8008fc8:	e002      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008fca:	bf00      	nop
 8008fcc:	e000      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10b      	bne.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008fd8:	4ba3      	ldr	r3, [pc, #652]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fdc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fe4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008fe8:	4a9f      	ldr	r2, [pc, #636]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fea:	430b      	orrs	r3, r1
 8008fec:	6593      	str	r3, [r2, #88]	; 0x58
 8008fee:	e003      	b.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ff4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009000:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009004:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009008:	2300      	movs	r3, #0
 800900a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800900e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009012:	460b      	mov	r3, r1
 8009014:	4313      	orrs	r3, r2
 8009016:	d037      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800901c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800901e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009022:	d00e      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009028:	d816      	bhi.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d018      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800902e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009032:	d111      	bne.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009034:	4b8c      	ldr	r3, [pc, #560]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009038:	4a8b      	ldr	r2, [pc, #556]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800903a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800903e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009040:	e00f      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009042:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009046:	3308      	adds	r3, #8
 8009048:	2101      	movs	r1, #1
 800904a:	4618      	mov	r0, r3
 800904c:	f002 f81e 	bl	800b08c <RCCEx_PLL2_Config>
 8009050:	4603      	mov	r3, r0
 8009052:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009056:	e004      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800905e:	e000      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009062:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10a      	bne.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800906a:	4b7f      	ldr	r3, [pc, #508]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800906c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800906e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009078:	4a7b      	ldr	r2, [pc, #492]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800907a:	430b      	orrs	r3, r1
 800907c:	6513      	str	r3, [r2, #80]	; 0x50
 800907e:	e003      	b.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009080:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009084:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009088:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800908c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009090:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009098:	2300      	movs	r3, #0
 800909a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800909e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80090a2:	460b      	mov	r3, r1
 80090a4:	4313      	orrs	r3, r2
 80090a6:	d039      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80090a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d81c      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x794>
 80090b2:	a201      	add	r2, pc, #4	; (adr r2, 80090b8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80090b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b8:	080090f5 	.word	0x080090f5
 80090bc:	080090c9 	.word	0x080090c9
 80090c0:	080090d7 	.word	0x080090d7
 80090c4:	080090f5 	.word	0x080090f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090c8:	4b67      	ldr	r3, [pc, #412]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	4a66      	ldr	r2, [pc, #408]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80090d4:	e00f      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090da:	3308      	adds	r3, #8
 80090dc:	2102      	movs	r1, #2
 80090de:	4618      	mov	r0, r3
 80090e0:	f001 ffd4 	bl	800b08c <RCCEx_PLL2_Config>
 80090e4:	4603      	mov	r3, r0
 80090e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80090ea:	e004      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090f2:	e000      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80090f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10a      	bne.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80090fe:	4b5a      	ldr	r3, [pc, #360]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009102:	f023 0103 	bic.w	r1, r3, #3
 8009106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800910a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800910c:	4a56      	ldr	r2, [pc, #344]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800910e:	430b      	orrs	r3, r1
 8009110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009112:	e003      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009114:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009118:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800911c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009128:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800912c:	2300      	movs	r3, #0
 800912e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009132:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009136:	460b      	mov	r3, r1
 8009138:	4313      	orrs	r3, r2
 800913a:	f000 809f 	beq.w	800927c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800913e:	4b4b      	ldr	r3, [pc, #300]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a4a      	ldr	r2, [pc, #296]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009148:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800914a:	f7f9 fb79 	bl	8002840 <HAL_GetTick>
 800914e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009152:	e00b      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009154:	f7f9 fb74 	bl	8002840 <HAL_GetTick>
 8009158:	4602      	mov	r2, r0
 800915a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	2b64      	cmp	r3, #100	; 0x64
 8009162:	d903      	bls.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800916a:	e005      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800916c:	4b3f      	ldr	r3, [pc, #252]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009174:	2b00      	cmp	r3, #0
 8009176:	d0ed      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009178:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800917c:	2b00      	cmp	r3, #0
 800917e:	d179      	bne.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009180:	4b39      	ldr	r3, [pc, #228]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009182:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009188:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800918c:	4053      	eors	r3, r2
 800918e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009192:	2b00      	cmp	r3, #0
 8009194:	d015      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009196:	4b34      	ldr	r3, [pc, #208]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800919a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800919e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80091a2:	4b31      	ldr	r3, [pc, #196]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a6:	4a30      	ldr	r2, [pc, #192]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091ac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80091ae:	4b2e      	ldr	r3, [pc, #184]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b2:	4a2d      	ldr	r2, [pc, #180]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091b8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80091ba:	4a2b      	ldr	r2, [pc, #172]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80091c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80091c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80091ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ce:	d118      	bne.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d0:	f7f9 fb36 	bl	8002840 <HAL_GetTick>
 80091d4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091d8:	e00d      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091da:	f7f9 fb31 	bl	8002840 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80091e4:	1ad2      	subs	r2, r2, r3
 80091e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d903      	bls.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80091f4:	e005      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091f6:	4b1c      	ldr	r3, [pc, #112]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d0eb      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009206:	2b00      	cmp	r3, #0
 8009208:	d129      	bne.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800920a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800920e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800921a:	d10e      	bne.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800921c:	4b12      	ldr	r3, [pc, #72]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009228:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800922c:	091a      	lsrs	r2, r3, #4
 800922e:	4b10      	ldr	r3, [pc, #64]	; (8009270 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009230:	4013      	ands	r3, r2
 8009232:	4a0d      	ldr	r2, [pc, #52]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009234:	430b      	orrs	r3, r1
 8009236:	6113      	str	r3, [r2, #16]
 8009238:	e005      	b.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800923a:	4b0b      	ldr	r3, [pc, #44]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	4a0a      	ldr	r2, [pc, #40]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009240:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009244:	6113      	str	r3, [r2, #16]
 8009246:	4b08      	ldr	r3, [pc, #32]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009248:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800924a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800924e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009256:	4a04      	ldr	r2, [pc, #16]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009258:	430b      	orrs	r3, r1
 800925a:	6713      	str	r3, [r2, #112]	; 0x70
 800925c:	e00e      	b.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800925e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009262:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8009266:	e009      	b.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009268:	58024400 	.word	0x58024400
 800926c:	58024800 	.word	0x58024800
 8009270:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009274:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009278:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800927c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009284:	f002 0301 	and.w	r3, r2, #1
 8009288:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800928c:	2300      	movs	r3, #0
 800928e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009292:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009296:	460b      	mov	r3, r1
 8009298:	4313      	orrs	r3, r2
 800929a:	f000 8089 	beq.w	80093b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800929e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092a4:	2b28      	cmp	r3, #40	; 0x28
 80092a6:	d86b      	bhi.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80092a8:	a201      	add	r2, pc, #4	; (adr r2, 80092b0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80092aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ae:	bf00      	nop
 80092b0:	08009389 	.word	0x08009389
 80092b4:	08009381 	.word	0x08009381
 80092b8:	08009381 	.word	0x08009381
 80092bc:	08009381 	.word	0x08009381
 80092c0:	08009381 	.word	0x08009381
 80092c4:	08009381 	.word	0x08009381
 80092c8:	08009381 	.word	0x08009381
 80092cc:	08009381 	.word	0x08009381
 80092d0:	08009355 	.word	0x08009355
 80092d4:	08009381 	.word	0x08009381
 80092d8:	08009381 	.word	0x08009381
 80092dc:	08009381 	.word	0x08009381
 80092e0:	08009381 	.word	0x08009381
 80092e4:	08009381 	.word	0x08009381
 80092e8:	08009381 	.word	0x08009381
 80092ec:	08009381 	.word	0x08009381
 80092f0:	0800936b 	.word	0x0800936b
 80092f4:	08009381 	.word	0x08009381
 80092f8:	08009381 	.word	0x08009381
 80092fc:	08009381 	.word	0x08009381
 8009300:	08009381 	.word	0x08009381
 8009304:	08009381 	.word	0x08009381
 8009308:	08009381 	.word	0x08009381
 800930c:	08009381 	.word	0x08009381
 8009310:	08009389 	.word	0x08009389
 8009314:	08009381 	.word	0x08009381
 8009318:	08009381 	.word	0x08009381
 800931c:	08009381 	.word	0x08009381
 8009320:	08009381 	.word	0x08009381
 8009324:	08009381 	.word	0x08009381
 8009328:	08009381 	.word	0x08009381
 800932c:	08009381 	.word	0x08009381
 8009330:	08009389 	.word	0x08009389
 8009334:	08009381 	.word	0x08009381
 8009338:	08009381 	.word	0x08009381
 800933c:	08009381 	.word	0x08009381
 8009340:	08009381 	.word	0x08009381
 8009344:	08009381 	.word	0x08009381
 8009348:	08009381 	.word	0x08009381
 800934c:	08009381 	.word	0x08009381
 8009350:	08009389 	.word	0x08009389
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009358:	3308      	adds	r3, #8
 800935a:	2101      	movs	r1, #1
 800935c:	4618      	mov	r0, r3
 800935e:	f001 fe95 	bl	800b08c <RCCEx_PLL2_Config>
 8009362:	4603      	mov	r3, r0
 8009364:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009368:	e00f      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800936a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800936e:	3328      	adds	r3, #40	; 0x28
 8009370:	2101      	movs	r1, #1
 8009372:	4618      	mov	r0, r3
 8009374:	f001 ff3c 	bl	800b1f0 <RCCEx_PLL3_Config>
 8009378:	4603      	mov	r3, r0
 800937a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800937e:	e004      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009386:	e000      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800938a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800938e:	2b00      	cmp	r3, #0
 8009390:	d10a      	bne.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009392:	4bbf      	ldr	r3, [pc, #764]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009396:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800939a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800939e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093a0:	4abb      	ldr	r2, [pc, #748]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093a2:	430b      	orrs	r3, r1
 80093a4:	6553      	str	r3, [r2, #84]	; 0x54
 80093a6:	e003      	b.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80093b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b8:	f002 0302 	and.w	r3, r2, #2
 80093bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093c0:	2300      	movs	r3, #0
 80093c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80093c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80093ca:	460b      	mov	r3, r1
 80093cc:	4313      	orrs	r3, r2
 80093ce:	d041      	beq.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80093d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093d6:	2b05      	cmp	r3, #5
 80093d8:	d824      	bhi.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80093da:	a201      	add	r2, pc, #4	; (adr r2, 80093e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80093dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e0:	0800942d 	.word	0x0800942d
 80093e4:	080093f9 	.word	0x080093f9
 80093e8:	0800940f 	.word	0x0800940f
 80093ec:	0800942d 	.word	0x0800942d
 80093f0:	0800942d 	.word	0x0800942d
 80093f4:	0800942d 	.word	0x0800942d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093fc:	3308      	adds	r3, #8
 80093fe:	2101      	movs	r1, #1
 8009400:	4618      	mov	r0, r3
 8009402:	f001 fe43 	bl	800b08c <RCCEx_PLL2_Config>
 8009406:	4603      	mov	r3, r0
 8009408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800940c:	e00f      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800940e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009412:	3328      	adds	r3, #40	; 0x28
 8009414:	2101      	movs	r1, #1
 8009416:	4618      	mov	r0, r3
 8009418:	f001 feea 	bl	800b1f0 <RCCEx_PLL3_Config>
 800941c:	4603      	mov	r3, r0
 800941e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009422:	e004      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800942a:	e000      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800942c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800942e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10a      	bne.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009436:	4b96      	ldr	r3, [pc, #600]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800943a:	f023 0107 	bic.w	r1, r3, #7
 800943e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009444:	4a92      	ldr	r2, [pc, #584]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009446:	430b      	orrs	r3, r1
 8009448:	6553      	str	r3, [r2, #84]	; 0x54
 800944a:	e003      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800944c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009450:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	f002 0304 	and.w	r3, r2, #4
 8009460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009464:	2300      	movs	r3, #0
 8009466:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800946a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800946e:	460b      	mov	r3, r1
 8009470:	4313      	orrs	r3, r2
 8009472:	d044      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800947c:	2b05      	cmp	r3, #5
 800947e:	d825      	bhi.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009480:	a201      	add	r2, pc, #4	; (adr r2, 8009488 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009486:	bf00      	nop
 8009488:	080094d5 	.word	0x080094d5
 800948c:	080094a1 	.word	0x080094a1
 8009490:	080094b7 	.word	0x080094b7
 8009494:	080094d5 	.word	0x080094d5
 8009498:	080094d5 	.word	0x080094d5
 800949c:	080094d5 	.word	0x080094d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094a4:	3308      	adds	r3, #8
 80094a6:	2101      	movs	r1, #1
 80094a8:	4618      	mov	r0, r3
 80094aa:	f001 fdef 	bl	800b08c <RCCEx_PLL2_Config>
 80094ae:	4603      	mov	r3, r0
 80094b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80094b4:	e00f      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ba:	3328      	adds	r3, #40	; 0x28
 80094bc:	2101      	movs	r1, #1
 80094be:	4618      	mov	r0, r3
 80094c0:	f001 fe96 	bl	800b1f0 <RCCEx_PLL3_Config>
 80094c4:	4603      	mov	r3, r0
 80094c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80094ca:	e004      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094d2:	e000      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80094d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10b      	bne.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094de:	4b6c      	ldr	r3, [pc, #432]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094e2:	f023 0107 	bic.w	r1, r3, #7
 80094e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094ee:	4a68      	ldr	r2, [pc, #416]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094f0:	430b      	orrs	r3, r1
 80094f2:	6593      	str	r3, [r2, #88]	; 0x58
 80094f4:	e003      	b.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80094fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009506:	f002 0320 	and.w	r3, r2, #32
 800950a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800950e:	2300      	movs	r3, #0
 8009510:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009514:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009518:	460b      	mov	r3, r1
 800951a:	4313      	orrs	r3, r2
 800951c:	d055      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800951e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800952a:	d033      	beq.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800952c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009530:	d82c      	bhi.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009536:	d02f      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800953c:	d826      	bhi.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800953e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009542:	d02b      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009544:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009548:	d820      	bhi.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800954a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800954e:	d012      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009554:	d81a      	bhi.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009556:	2b00      	cmp	r3, #0
 8009558:	d022      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800955a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800955e:	d115      	bne.n	800958c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009564:	3308      	adds	r3, #8
 8009566:	2100      	movs	r1, #0
 8009568:	4618      	mov	r0, r3
 800956a:	f001 fd8f 	bl	800b08c <RCCEx_PLL2_Config>
 800956e:	4603      	mov	r3, r0
 8009570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009574:	e015      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800957a:	3328      	adds	r3, #40	; 0x28
 800957c:	2102      	movs	r1, #2
 800957e:	4618      	mov	r0, r3
 8009580:	f001 fe36 	bl	800b1f0 <RCCEx_PLL3_Config>
 8009584:	4603      	mov	r3, r0
 8009586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800958a:	e00a      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009592:	e006      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009594:	bf00      	nop
 8009596:	e004      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009598:	bf00      	nop
 800959a:	e002      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800959c:	bf00      	nop
 800959e:	e000      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80095a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10b      	bne.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095aa:	4b39      	ldr	r3, [pc, #228]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80095b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ba:	4a35      	ldr	r2, [pc, #212]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095bc:	430b      	orrs	r3, r1
 80095be:	6553      	str	r3, [r2, #84]	; 0x54
 80095c0:	e003      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80095ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80095d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80095da:	2300      	movs	r3, #0
 80095dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80095e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80095e4:	460b      	mov	r3, r1
 80095e6:	4313      	orrs	r3, r2
 80095e8:	d058      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80095ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095f6:	d033      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80095f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80095fc:	d82c      	bhi.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80095fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009602:	d02f      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009608:	d826      	bhi.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800960a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800960e:	d02b      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009610:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009614:	d820      	bhi.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800961a:	d012      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800961c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009620:	d81a      	bhi.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009622:	2b00      	cmp	r3, #0
 8009624:	d022      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800962a:	d115      	bne.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800962c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009630:	3308      	adds	r3, #8
 8009632:	2100      	movs	r1, #0
 8009634:	4618      	mov	r0, r3
 8009636:	f001 fd29 	bl	800b08c <RCCEx_PLL2_Config>
 800963a:	4603      	mov	r3, r0
 800963c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009640:	e015      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009646:	3328      	adds	r3, #40	; 0x28
 8009648:	2102      	movs	r1, #2
 800964a:	4618      	mov	r0, r3
 800964c:	f001 fdd0 	bl	800b1f0 <RCCEx_PLL3_Config>
 8009650:	4603      	mov	r3, r0
 8009652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009656:	e00a      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800965e:	e006      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009660:	bf00      	nop
 8009662:	e004      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009664:	bf00      	nop
 8009666:	e002      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009668:	bf00      	nop
 800966a:	e000      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800966c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800966e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009672:	2b00      	cmp	r3, #0
 8009674:	d10e      	bne.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009676:	4b06      	ldr	r3, [pc, #24]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800967a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800967e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009686:	4a02      	ldr	r2, [pc, #8]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009688:	430b      	orrs	r3, r1
 800968a:	6593      	str	r3, [r2, #88]	; 0x58
 800968c:	e006      	b.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800968e:	bf00      	nop
 8009690:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009694:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009698:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800969c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80096a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80096ac:	2300      	movs	r3, #0
 80096ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80096b6:	460b      	mov	r3, r1
 80096b8:	4313      	orrs	r3, r2
 80096ba:	d055      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80096bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80096c8:	d033      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80096ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80096ce:	d82c      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096d4:	d02f      	beq.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80096d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096da:	d826      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80096e0:	d02b      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80096e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80096e6:	d820      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096ec:	d012      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80096ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096f2:	d81a      	bhi.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d022      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80096f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096fc:	d115      	bne.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009702:	3308      	adds	r3, #8
 8009704:	2100      	movs	r1, #0
 8009706:	4618      	mov	r0, r3
 8009708:	f001 fcc0 	bl	800b08c <RCCEx_PLL2_Config>
 800970c:	4603      	mov	r3, r0
 800970e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009712:	e015      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009718:	3328      	adds	r3, #40	; 0x28
 800971a:	2102      	movs	r1, #2
 800971c:	4618      	mov	r0, r3
 800971e:	f001 fd67 	bl	800b1f0 <RCCEx_PLL3_Config>
 8009722:	4603      	mov	r3, r0
 8009724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009728:	e00a      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009730:	e006      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009732:	bf00      	nop
 8009734:	e004      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009736:	bf00      	nop
 8009738:	e002      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800973a:	bf00      	nop
 800973c:	e000      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800973e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009740:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10b      	bne.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009748:	4ba1      	ldr	r3, [pc, #644]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800974a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800974c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009754:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009758:	4a9d      	ldr	r2, [pc, #628]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800975a:	430b      	orrs	r3, r1
 800975c:	6593      	str	r3, [r2, #88]	; 0x58
 800975e:	e003      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009760:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009764:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800976c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009770:	f002 0308 	and.w	r3, r2, #8
 8009774:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009778:	2300      	movs	r3, #0
 800977a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800977e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009782:	460b      	mov	r3, r1
 8009784:	4313      	orrs	r3, r2
 8009786:	d01e      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800978c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009794:	d10c      	bne.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800979a:	3328      	adds	r3, #40	; 0x28
 800979c:	2102      	movs	r1, #2
 800979e:	4618      	mov	r0, r3
 80097a0:	f001 fd26 	bl	800b1f0 <RCCEx_PLL3_Config>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d002      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80097b0:	4b87      	ldr	r3, [pc, #540]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097c0:	4a83      	ldr	r2, [pc, #524]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097c2:	430b      	orrs	r3, r1
 80097c4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80097c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ce:	f002 0310 	and.w	r3, r2, #16
 80097d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80097d6:	2300      	movs	r3, #0
 80097d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80097dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80097e0:	460b      	mov	r3, r1
 80097e2:	4313      	orrs	r3, r2
 80097e4:	d01e      	beq.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80097e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097f2:	d10c      	bne.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80097f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f8:	3328      	adds	r3, #40	; 0x28
 80097fa:	2102      	movs	r1, #2
 80097fc:	4618      	mov	r0, r3
 80097fe:	f001 fcf7 	bl	800b1f0 <RCCEx_PLL3_Config>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800980e:	4b70      	ldr	r3, [pc, #448]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009812:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800981a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800981e:	4a6c      	ldr	r2, [pc, #432]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009820:	430b      	orrs	r3, r1
 8009822:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009830:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009834:	2300      	movs	r3, #0
 8009836:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800983a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800983e:	460b      	mov	r3, r1
 8009840:	4313      	orrs	r3, r2
 8009842:	d03e      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009848:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800984c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009850:	d022      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009856:	d81b      	bhi.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009858:	2b00      	cmp	r3, #0
 800985a:	d003      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800985c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009860:	d00b      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009862:	e015      	b.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009868:	3308      	adds	r3, #8
 800986a:	2100      	movs	r1, #0
 800986c:	4618      	mov	r0, r3
 800986e:	f001 fc0d 	bl	800b08c <RCCEx_PLL2_Config>
 8009872:	4603      	mov	r3, r0
 8009874:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009878:	e00f      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800987a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800987e:	3328      	adds	r3, #40	; 0x28
 8009880:	2102      	movs	r1, #2
 8009882:	4618      	mov	r0, r3
 8009884:	f001 fcb4 	bl	800b1f0 <RCCEx_PLL3_Config>
 8009888:	4603      	mov	r3, r0
 800988a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800988e:	e004      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009896:	e000      	b.n	800989a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800989a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d10b      	bne.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80098a2:	4b4b      	ldr	r3, [pc, #300]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80098aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80098b2:	4a47      	ldr	r2, [pc, #284]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098b4:	430b      	orrs	r3, r1
 80098b6:	6593      	str	r3, [r2, #88]	; 0x58
 80098b8:	e003      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80098c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80098ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80098d0:	2300      	movs	r3, #0
 80098d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80098d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80098d8:	460b      	mov	r3, r1
 80098da:	4313      	orrs	r3, r2
 80098dc:	d03b      	beq.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80098de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098ea:	d01f      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80098ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098f0:	d818      	bhi.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80098f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098f6:	d003      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80098f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098fc:	d007      	beq.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80098fe:	e011      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009900:	4b33      	ldr	r3, [pc, #204]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009904:	4a32      	ldr	r2, [pc, #200]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800990a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800990c:	e00f      	b.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800990e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009912:	3328      	adds	r3, #40	; 0x28
 8009914:	2101      	movs	r1, #1
 8009916:	4618      	mov	r0, r3
 8009918:	f001 fc6a 	bl	800b1f0 <RCCEx_PLL3_Config>
 800991c:	4603      	mov	r3, r0
 800991e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009922:	e004      	b.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800992a:	e000      	b.n	800992e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800992c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800992e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10b      	bne.n	800994e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009936:	4b26      	ldr	r3, [pc, #152]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800993e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009946:	4a22      	ldr	r2, [pc, #136]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009948:	430b      	orrs	r3, r1
 800994a:	6553      	str	r3, [r2, #84]	; 0x54
 800994c:	e003      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800994e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009952:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800995a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009962:	673b      	str	r3, [r7, #112]	; 0x70
 8009964:	2300      	movs	r3, #0
 8009966:	677b      	str	r3, [r7, #116]	; 0x74
 8009968:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800996c:	460b      	mov	r3, r1
 800996e:	4313      	orrs	r3, r2
 8009970:	d034      	beq.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800997c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009980:	d007      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009982:	e011      	b.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009984:	4b12      	ldr	r3, [pc, #72]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009988:	4a11      	ldr	r2, [pc, #68]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800998a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800998e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009990:	e00e      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009996:	3308      	adds	r3, #8
 8009998:	2102      	movs	r1, #2
 800999a:	4618      	mov	r0, r3
 800999c:	f001 fb76 	bl	800b08c <RCCEx_PLL2_Config>
 80099a0:	4603      	mov	r3, r0
 80099a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80099a6:	e003      	b.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10d      	bne.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80099b8:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80099c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099c6:	4a02      	ldr	r2, [pc, #8]	; (80099d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099c8:	430b      	orrs	r3, r1
 80099ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80099cc:	e006      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80099ce:	bf00      	nop
 80099d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80099dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80099e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80099ea:	2300      	movs	r3, #0
 80099ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80099f2:	460b      	mov	r3, r1
 80099f4:	4313      	orrs	r3, r2
 80099f6:	d00c      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80099f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099fc:	3328      	adds	r3, #40	; 0x28
 80099fe:	2102      	movs	r1, #2
 8009a00:	4618      	mov	r0, r3
 8009a02:	f001 fbf5 	bl	800b1f0 <RCCEx_PLL3_Config>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d002      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009a1e:	663b      	str	r3, [r7, #96]	; 0x60
 8009a20:	2300      	movs	r3, #0
 8009a22:	667b      	str	r3, [r7, #100]	; 0x64
 8009a24:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009a28:	460b      	mov	r3, r1
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	d038      	beq.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a3a:	d018      	beq.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a40:	d811      	bhi.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a46:	d014      	beq.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a4c:	d80b      	bhi.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d011      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a56:	d106      	bne.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a58:	4bc3      	ldr	r3, [pc, #780]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5c:	4ac2      	ldr	r2, [pc, #776]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009a64:	e008      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a6c:	e004      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009a6e:	bf00      	nop
 8009a70:	e002      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009a72:	bf00      	nop
 8009a74:	e000      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10b      	bne.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a80:	4bb9      	ldr	r3, [pc, #740]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a90:	4ab5      	ldr	r2, [pc, #724]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a92:	430b      	orrs	r3, r1
 8009a94:	6553      	str	r3, [r2, #84]	; 0x54
 8009a96:	e003      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009aac:	65bb      	str	r3, [r7, #88]	; 0x58
 8009aae:	2300      	movs	r3, #0
 8009ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ab2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	d009      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009abc:	4baa      	ldr	r3, [pc, #680]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ac0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aca:	4aa7      	ldr	r2, [pc, #668]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009acc:	430b      	orrs	r3, r1
 8009ace:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009adc:	653b      	str	r3, [r7, #80]	; 0x50
 8009ade:	2300      	movs	r3, #0
 8009ae0:	657b      	str	r3, [r7, #84]	; 0x54
 8009ae2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	d00a      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009aec:	4b9e      	ldr	r3, [pc, #632]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009af8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009afc:	4a9a      	ldr	r2, [pc, #616]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009afe:	430b      	orrs	r3, r1
 8009b00:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009b0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b10:	2300      	movs	r3, #0
 8009b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b14:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	d009      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009b1e:	4b92      	ldr	r3, [pc, #584]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b22:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b2c:	4a8e      	ldr	r2, [pc, #568]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b2e:	430b      	orrs	r3, r1
 8009b30:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009b3e:	643b      	str	r3, [r7, #64]	; 0x40
 8009b40:	2300      	movs	r3, #0
 8009b42:	647b      	str	r3, [r7, #68]	; 0x44
 8009b44:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009b48:	460b      	mov	r3, r1
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	d00e      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009b4e:	4b86      	ldr	r3, [pc, #536]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	4a85      	ldr	r2, [pc, #532]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b58:	6113      	str	r3, [r2, #16]
 8009b5a:	4b83      	ldr	r3, [pc, #524]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b5c:	6919      	ldr	r1, [r3, #16]
 8009b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009b66:	4a80      	ldr	r2, [pc, #512]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b68:	430b      	orrs	r3, r1
 8009b6a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009b78:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b7e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009b82:	460b      	mov	r3, r1
 8009b84:	4313      	orrs	r3, r2
 8009b86:	d009      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009b88:	4b77      	ldr	r3, [pc, #476]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b8c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b96:	4a74      	ldr	r2, [pc, #464]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b98:	430b      	orrs	r3, r1
 8009b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8009baa:	2300      	movs	r3, #0
 8009bac:	637b      	str	r3, [r7, #52]	; 0x34
 8009bae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	d00a      	beq.n	8009bce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009bb8:	4b6b      	ldr	r3, [pc, #428]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bbc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bc8:	4a67      	ldr	r2, [pc, #412]	; (8009d68 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bca:	430b      	orrs	r3, r1
 8009bcc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	62b9      	str	r1, [r7, #40]	; 0x28
 8009bda:	f003 0301 	and.w	r3, r3, #1
 8009bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009be0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009be4:	460b      	mov	r3, r1
 8009be6:	4313      	orrs	r3, r2
 8009be8:	d011      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bee:	3308      	adds	r3, #8
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f001 fa4a 	bl	800b08c <RCCEx_PLL2_Config>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c16:	2100      	movs	r1, #0
 8009c18:	6239      	str	r1, [r7, #32]
 8009c1a:	f003 0302 	and.w	r3, r3, #2
 8009c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c20:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009c24:	460b      	mov	r3, r1
 8009c26:	4313      	orrs	r3, r2
 8009c28:	d011      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c2e:	3308      	adds	r3, #8
 8009c30:	2101      	movs	r1, #1
 8009c32:	4618      	mov	r0, r3
 8009c34:	f001 fa2a 	bl	800b08c <RCCEx_PLL2_Config>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c56:	2100      	movs	r1, #0
 8009c58:	61b9      	str	r1, [r7, #24]
 8009c5a:	f003 0304 	and.w	r3, r3, #4
 8009c5e:	61fb      	str	r3, [r7, #28]
 8009c60:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009c64:	460b      	mov	r3, r1
 8009c66:	4313      	orrs	r3, r2
 8009c68:	d011      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c6e:	3308      	adds	r3, #8
 8009c70:	2102      	movs	r1, #2
 8009c72:	4618      	mov	r0, r3
 8009c74:	f001 fa0a 	bl	800b08c <RCCEx_PLL2_Config>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d003      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c96:	2100      	movs	r1, #0
 8009c98:	6139      	str	r1, [r7, #16]
 8009c9a:	f003 0308 	and.w	r3, r3, #8
 8009c9e:	617b      	str	r3, [r7, #20]
 8009ca0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	d011      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cae:	3328      	adds	r3, #40	; 0x28
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f001 fa9c 	bl	800b1f0 <RCCEx_PLL3_Config>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d003      	beq.n	8009cce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	f003 0310 	and.w	r3, r3, #16
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	d011      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cee:	3328      	adds	r3, #40	; 0x28
 8009cf0:	2101      	movs	r1, #1
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f001 fa7c 	bl	800b1f0 <RCCEx_PLL3_Config>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d003      	beq.n	8009d0e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d16:	2100      	movs	r1, #0
 8009d18:	6039      	str	r1, [r7, #0]
 8009d1a:	f003 0320 	and.w	r3, r3, #32
 8009d1e:	607b      	str	r3, [r7, #4]
 8009d20:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009d24:	460b      	mov	r3, r1
 8009d26:	4313      	orrs	r3, r2
 8009d28:	d011      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d2e:	3328      	adds	r3, #40	; 0x28
 8009d30:	2102      	movs	r1, #2
 8009d32:	4618      	mov	r0, r3
 8009d34:	f001 fa5c 	bl	800b1f0 <RCCEx_PLL3_Config>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d003      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009d4e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	e000      	b.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009d62:	46bd      	mov	sp, r7
 8009d64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d68:	58024400 	.word	0x58024400

08009d6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b090      	sub	sp, #64	; 0x40
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d7a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009d7e:	430b      	orrs	r3, r1
 8009d80:	f040 8094 	bne.w	8009eac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009d84:	4b9e      	ldr	r3, [pc, #632]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d88:	f003 0307 	and.w	r3, r3, #7
 8009d8c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d90:	2b04      	cmp	r3, #4
 8009d92:	f200 8087 	bhi.w	8009ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009d96:	a201      	add	r2, pc, #4	; (adr r2, 8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9c:	08009db1 	.word	0x08009db1
 8009da0:	08009dd9 	.word	0x08009dd9
 8009da4:	08009e01 	.word	0x08009e01
 8009da8:	08009e9d 	.word	0x08009e9d
 8009dac:	08009e29 	.word	0x08009e29
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009db0:	4b93      	ldr	r3, [pc, #588]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009db8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009dbc:	d108      	bne.n	8009dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f001 f810 	bl	800ade8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dcc:	f000 bd45 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dd4:	f000 bd41 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dd8:	4b89      	ldr	r3, [pc, #548]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009de4:	d108      	bne.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009de6:	f107 0318 	add.w	r3, r7, #24
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 fd54 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009df4:	f000 bd31 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dfc:	f000 bd2d 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e00:	4b7f      	ldr	r3, [pc, #508]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e0c:	d108      	bne.n	8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e0e:	f107 030c 	add.w	r3, r7, #12
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 fe94 	bl	800ab40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e1c:	f000 bd1d 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e24:	f000 bd19 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e28:	4b75      	ldr	r3, [pc, #468]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e30:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e32:	4b73      	ldr	r3, [pc, #460]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 0304 	and.w	r3, r3, #4
 8009e3a:	2b04      	cmp	r3, #4
 8009e3c:	d10c      	bne.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d109      	bne.n	8009e58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e44:	4b6e      	ldr	r3, [pc, #440]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	08db      	lsrs	r3, r3, #3
 8009e4a:	f003 0303 	and.w	r3, r3, #3
 8009e4e:	4a6d      	ldr	r2, [pc, #436]	; (800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009e50:	fa22 f303 	lsr.w	r3, r2, r3
 8009e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e56:	e01f      	b.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e58:	4b69      	ldr	r3, [pc, #420]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e64:	d106      	bne.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e6c:	d102      	bne.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e6e:	4b66      	ldr	r3, [pc, #408]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e72:	e011      	b.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e74:	4b62      	ldr	r3, [pc, #392]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e80:	d106      	bne.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e88:	d102      	bne.n	8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e8a:	4b60      	ldr	r3, [pc, #384]	; (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e8e:	e003      	b.n	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009e94:	f000 bce1 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e98:	f000 bcdf 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e9c:	4b5c      	ldr	r3, [pc, #368]	; (800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ea0:	f000 bcdb 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ea8:	f000 bcd7 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eb0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009eb4:	430b      	orrs	r3, r1
 8009eb6:	f040 80ad 	bne.w	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009eba:	4b51      	ldr	r3, [pc, #324]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ebe:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009ec2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eca:	d056      	beq.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ed2:	f200 8090 	bhi.w	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	2bc0      	cmp	r3, #192	; 0xc0
 8009eda:	f000 8088 	beq.w	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	2bc0      	cmp	r3, #192	; 0xc0
 8009ee2:	f200 8088 	bhi.w	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	2b80      	cmp	r3, #128	; 0x80
 8009eea:	d032      	beq.n	8009f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eee:	2b80      	cmp	r3, #128	; 0x80
 8009ef0:	f200 8081 	bhi.w	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efc:	2b40      	cmp	r3, #64	; 0x40
 8009efe:	d014      	beq.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009f00:	e079      	b.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f02:	4b3f      	ldr	r3, [pc, #252]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f0e:	d108      	bne.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f14:	4618      	mov	r0, r3
 8009f16:	f000 ff67 	bl	800ade8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f1e:	f000 bc9c 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f26:	f000 bc98 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f2a:	4b35      	ldr	r3, [pc, #212]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f36:	d108      	bne.n	8009f4a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f38:	f107 0318 	add.w	r3, r7, #24
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 fcab 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f46:	f000 bc88 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f4e:	f000 bc84 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f52:	4b2b      	ldr	r3, [pc, #172]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f5e:	d108      	bne.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f60:	f107 030c 	add.w	r3, r7, #12
 8009f64:	4618      	mov	r0, r3
 8009f66:	f000 fdeb 	bl	800ab40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f6e:	f000 bc74 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f72:	2300      	movs	r3, #0
 8009f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f76:	f000 bc70 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f7a:	4b21      	ldr	r3, [pc, #132]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f84:	4b1e      	ldr	r3, [pc, #120]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 0304 	and.w	r3, r3, #4
 8009f8c:	2b04      	cmp	r3, #4
 8009f8e:	d10c      	bne.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d109      	bne.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f96:	4b1a      	ldr	r3, [pc, #104]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	08db      	lsrs	r3, r3, #3
 8009f9c:	f003 0303 	and.w	r3, r3, #3
 8009fa0:	4a18      	ldr	r2, [pc, #96]	; (800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fa8:	e01f      	b.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009faa:	4b15      	ldr	r3, [pc, #84]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fb6:	d106      	bne.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fbe:	d102      	bne.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fc0:	4b11      	ldr	r3, [pc, #68]	; (800a008 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fc4:	e011      	b.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fc6:	4b0e      	ldr	r3, [pc, #56]	; (800a000 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fd2:	d106      	bne.n	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fda:	d102      	bne.n	8009fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fdc:	4b0b      	ldr	r3, [pc, #44]	; (800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fe0:	e003      	b.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009fe6:	f000 bc38 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fea:	f000 bc36 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fee:	4b08      	ldr	r3, [pc, #32]	; (800a010 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ff2:	f000 bc32 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ffa:	f000 bc2e 	b.w	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ffe:	bf00      	nop
 800a000:	58024400 	.word	0x58024400
 800a004:	03d09000 	.word	0x03d09000
 800a008:	003d0900 	.word	0x003d0900
 800a00c:	017d7840 	.word	0x017d7840
 800a010:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a014:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a018:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a01c:	430b      	orrs	r3, r1
 800a01e:	f040 809c 	bne.w	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a022:	4b9e      	ldr	r3, [pc, #632]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a026:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a02a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a032:	d054      	beq.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a03a:	f200 808b 	bhi.w	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a040:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a044:	f000 8083 	beq.w	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a04e:	f200 8081 	bhi.w	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a058:	d02f      	beq.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a060:	d878      	bhi.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a064:	2b00      	cmp	r3, #0
 800a066:	d004      	beq.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a06e:	d012      	beq.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a070:	e070      	b.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a072:	4b8a      	ldr	r3, [pc, #552]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a07a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a07e:	d107      	bne.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a084:	4618      	mov	r0, r3
 800a086:	f000 feaf 	bl	800ade8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a08e:	e3e4      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a090:	2300      	movs	r3, #0
 800a092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a094:	e3e1      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a096:	4b81      	ldr	r3, [pc, #516]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a09e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0a2:	d107      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0a4:	f107 0318 	add.w	r3, r7, #24
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f000 fbf5 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0b2:	e3d2      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0b8:	e3cf      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0ba:	4b78      	ldr	r3, [pc, #480]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0c6:	d107      	bne.n	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0c8:	f107 030c 	add.w	r3, r7, #12
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 fd37 	bl	800ab40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0d6:	e3c0      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0dc:	e3bd      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0de:	4b6f      	ldr	r3, [pc, #444]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0e6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0e8:	4b6c      	ldr	r3, [pc, #432]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 0304 	and.w	r3, r3, #4
 800a0f0:	2b04      	cmp	r3, #4
 800a0f2:	d10c      	bne.n	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a0f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d109      	bne.n	800a10e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0fa:	4b68      	ldr	r3, [pc, #416]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	08db      	lsrs	r3, r3, #3
 800a100:	f003 0303 	and.w	r3, r3, #3
 800a104:	4a66      	ldr	r2, [pc, #408]	; (800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a106:	fa22 f303 	lsr.w	r3, r2, r3
 800a10a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a10c:	e01e      	b.n	800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a10e:	4b63      	ldr	r3, [pc, #396]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a11a:	d106      	bne.n	800a12a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a11e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a122:	d102      	bne.n	800a12a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a124:	4b5f      	ldr	r3, [pc, #380]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a126:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a128:	e010      	b.n	800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a12a:	4b5c      	ldr	r3, [pc, #368]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a136:	d106      	bne.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a13a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a13e:	d102      	bne.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a140:	4b59      	ldr	r3, [pc, #356]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a142:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a144:	e002      	b.n	800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a146:	2300      	movs	r3, #0
 800a148:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a14a:	e386      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a14c:	e385      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a14e:	4b57      	ldr	r3, [pc, #348]	; (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a152:	e382      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a154:	2300      	movs	r3, #0
 800a156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a158:	e37f      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a15a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a15e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a162:	430b      	orrs	r3, r1
 800a164:	f040 80a7 	bne.w	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a168:	4b4c      	ldr	r3, [pc, #304]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a16a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a16c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a170:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a178:	d055      	beq.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a180:	f200 8096 	bhi.w	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a186:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a18a:	f000 8084 	beq.w	800a296 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a190:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a194:	f200 808c 	bhi.w	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a19e:	d030      	beq.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1a6:	f200 8083 	bhi.w	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d004      	beq.n	800a1ba <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1b6:	d012      	beq.n	800a1de <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a1b8:	e07a      	b.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1ba:	4b38      	ldr	r3, [pc, #224]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1c6:	d107      	bne.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f000 fe0b 	bl	800ade8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1d6:	e340      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1dc:	e33d      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1de:	4b2f      	ldr	r3, [pc, #188]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1ea:	d107      	bne.n	800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ec:	f107 0318 	add.w	r3, r7, #24
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 fb51 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1fa:	e32e      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a200:	e32b      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a202:	4b26      	ldr	r3, [pc, #152]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a20a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a20e:	d107      	bne.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a210:	f107 030c 	add.w	r3, r7, #12
 800a214:	4618      	mov	r0, r3
 800a216:	f000 fc93 	bl	800ab40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a21e:	e31c      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a220:	2300      	movs	r3, #0
 800a222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a224:	e319      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a226:	4b1d      	ldr	r3, [pc, #116]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a22a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a22e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a230:	4b1a      	ldr	r3, [pc, #104]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 0304 	and.w	r3, r3, #4
 800a238:	2b04      	cmp	r3, #4
 800a23a:	d10c      	bne.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d109      	bne.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a242:	4b16      	ldr	r3, [pc, #88]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	08db      	lsrs	r3, r3, #3
 800a248:	f003 0303 	and.w	r3, r3, #3
 800a24c:	4a14      	ldr	r2, [pc, #80]	; (800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a24e:	fa22 f303 	lsr.w	r3, r2, r3
 800a252:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a254:	e01e      	b.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a256:	4b11      	ldr	r3, [pc, #68]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a25e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a262:	d106      	bne.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a266:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a26a:	d102      	bne.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a26c:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a26e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a270:	e010      	b.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a272:	4b0a      	ldr	r3, [pc, #40]	; (800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a27a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a27e:	d106      	bne.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a286:	d102      	bne.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a288:	4b07      	ldr	r3, [pc, #28]	; (800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a28a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a28c:	e002      	b.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a28e:	2300      	movs	r3, #0
 800a290:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a292:	e2e2      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a294:	e2e1      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a296:	4b05      	ldr	r3, [pc, #20]	; (800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a298:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a29a:	e2de      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a29c:	58024400 	.word	0x58024400
 800a2a0:	03d09000 	.word	0x03d09000
 800a2a4:	003d0900 	.word	0x003d0900
 800a2a8:	017d7840 	.word	0x017d7840
 800a2ac:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2b4:	e2d1      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a2b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2ba:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a2be:	430b      	orrs	r3, r1
 800a2c0:	f040 809c 	bne.w	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a2c4:	4b93      	ldr	r3, [pc, #588]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2c8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a2cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2d4:	d054      	beq.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2dc:	f200 808b 	bhi.w	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2e6:	f000 8083 	beq.w	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2f0:	f200 8081 	bhi.w	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2fa:	d02f      	beq.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a302:	d878      	bhi.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a306:	2b00      	cmp	r3, #0
 800a308:	d004      	beq.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a310:	d012      	beq.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a312:	e070      	b.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a314:	4b7f      	ldr	r3, [pc, #508]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a31c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a320:	d107      	bne.n	800a332 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a326:	4618      	mov	r0, r3
 800a328:	f000 fd5e 	bl	800ade8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a330:	e293      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a336:	e290      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a338:	4b76      	ldr	r3, [pc, #472]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a344:	d107      	bne.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a346:	f107 0318 	add.w	r3, r7, #24
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 faa4 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a354:	e281      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a356:	2300      	movs	r3, #0
 800a358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a35a:	e27e      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a35c:	4b6d      	ldr	r3, [pc, #436]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a368:	d107      	bne.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a36a:	f107 030c 	add.w	r3, r7, #12
 800a36e:	4618      	mov	r0, r3
 800a370:	f000 fbe6 	bl	800ab40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a378:	e26f      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a37e:	e26c      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a380:	4b64      	ldr	r3, [pc, #400]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a384:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a388:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a38a:	4b62      	ldr	r3, [pc, #392]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 0304 	and.w	r3, r3, #4
 800a392:	2b04      	cmp	r3, #4
 800a394:	d10c      	bne.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d109      	bne.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a39c:	4b5d      	ldr	r3, [pc, #372]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	08db      	lsrs	r3, r3, #3
 800a3a2:	f003 0303 	and.w	r3, r3, #3
 800a3a6:	4a5c      	ldr	r2, [pc, #368]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a3a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3ae:	e01e      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3b0:	4b58      	ldr	r3, [pc, #352]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3bc:	d106      	bne.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3c4:	d102      	bne.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3c6:	4b55      	ldr	r3, [pc, #340]	; (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3ca:	e010      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3cc:	4b51      	ldr	r3, [pc, #324]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3d8:	d106      	bne.n	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3e0:	d102      	bne.n	800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3e2:	4b4f      	ldr	r3, [pc, #316]	; (800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3e6:	e002      	b.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a3ec:	e235      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3ee:	e234      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3f0:	4b4c      	ldr	r3, [pc, #304]	; (800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3f4:	e231      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3fa:	e22e      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a3fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a400:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a404:	430b      	orrs	r3, r1
 800a406:	f040 808f 	bne.w	800a528 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a40a:	4b42      	ldr	r3, [pc, #264]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a40c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a40e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a412:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a416:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a41a:	d06b      	beq.n	800a4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a422:	d874      	bhi.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a426:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a42a:	d056      	beq.n	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a432:	d86c      	bhi.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a436:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a43a:	d03b      	beq.n	800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a442:	d864      	bhi.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a44a:	d021      	beq.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a452:	d85c      	bhi.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	2b00      	cmp	r3, #0
 800a458:	d004      	beq.n	800a464 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a460:	d004      	beq.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a462:	e054      	b.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a464:	f7fe fa0a 	bl	800887c <HAL_RCC_GetPCLK1Freq>
 800a468:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a46a:	e1f6      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a46c:	4b29      	ldr	r3, [pc, #164]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a474:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a478:	d107      	bne.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a47a:	f107 0318 	add.w	r3, r7, #24
 800a47e:	4618      	mov	r0, r3
 800a480:	f000 fa0a 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a488:	e1e7      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a48a:	2300      	movs	r3, #0
 800a48c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a48e:	e1e4      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a490:	4b20      	ldr	r3, [pc, #128]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a49c:	d107      	bne.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a49e:	f107 030c 	add.w	r3, r7, #12
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 fb4c 	bl	800ab40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ac:	e1d5      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4b2:	e1d2      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a4b4:	4b17      	ldr	r3, [pc, #92]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 0304 	and.w	r3, r3, #4
 800a4bc:	2b04      	cmp	r3, #4
 800a4be:	d109      	bne.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4c0:	4b14      	ldr	r3, [pc, #80]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	08db      	lsrs	r3, r3, #3
 800a4c6:	f003 0303 	and.w	r3, r3, #3
 800a4ca:	4a13      	ldr	r2, [pc, #76]	; (800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a4cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4d2:	e1c2      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4d8:	e1bf      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a4da:	4b0e      	ldr	r3, [pc, #56]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4e6:	d102      	bne.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a4e8:	4b0c      	ldr	r3, [pc, #48]	; (800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ec:	e1b5      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4f2:	e1b2      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a4f4:	4b07      	ldr	r3, [pc, #28]	; (800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a500:	d102      	bne.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a502:	4b07      	ldr	r3, [pc, #28]	; (800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a504:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a506:	e1a8      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a50c:	e1a5      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a50e:	2300      	movs	r3, #0
 800a510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a512:	e1a2      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a514:	58024400 	.word	0x58024400
 800a518:	03d09000 	.word	0x03d09000
 800a51c:	003d0900 	.word	0x003d0900
 800a520:	017d7840 	.word	0x017d7840
 800a524:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a52c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a530:	430b      	orrs	r3, r1
 800a532:	d173      	bne.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a534:	4b9c      	ldr	r3, [pc, #624]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a538:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a53c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a544:	d02f      	beq.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a54c:	d863      	bhi.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a550:	2b00      	cmp	r3, #0
 800a552:	d004      	beq.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a55a:	d012      	beq.n	800a582 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a55c:	e05b      	b.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a55e:	4b92      	ldr	r3, [pc, #584]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a56a:	d107      	bne.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a56c:	f107 0318 	add.w	r3, r7, #24
 800a570:	4618      	mov	r0, r3
 800a572:	f000 f991 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a57a:	e16e      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a57c:	2300      	movs	r3, #0
 800a57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a580:	e16b      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a582:	4b89      	ldr	r3, [pc, #548]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a58a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a58e:	d107      	bne.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a590:	f107 030c 	add.w	r3, r7, #12
 800a594:	4618      	mov	r0, r3
 800a596:	f000 fad3 	bl	800ab40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a59e:	e15c      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5a4:	e159      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5a6:	4b80      	ldr	r3, [pc, #512]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5b0:	4b7d      	ldr	r3, [pc, #500]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0304 	and.w	r3, r3, #4
 800a5b8:	2b04      	cmp	r3, #4
 800a5ba:	d10c      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d109      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5c2:	4b79      	ldr	r3, [pc, #484]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	08db      	lsrs	r3, r3, #3
 800a5c8:	f003 0303 	and.w	r3, r3, #3
 800a5cc:	4a77      	ldr	r2, [pc, #476]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a5ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5d4:	e01e      	b.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5d6:	4b74      	ldr	r3, [pc, #464]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5e2:	d106      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5ea:	d102      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a5ec:	4b70      	ldr	r3, [pc, #448]	; (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5f0:	e010      	b.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5f2:	4b6d      	ldr	r3, [pc, #436]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5fe:	d106      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a606:	d102      	bne.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a608:	4b6a      	ldr	r3, [pc, #424]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a60a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a60c:	e002      	b.n	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a612:	e122      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a614:	e121      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a61a:	e11e      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a61c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a620:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a624:	430b      	orrs	r3, r1
 800a626:	d133      	bne.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a628:	4b5f      	ldr	r3, [pc, #380]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a62a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a62c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a630:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a634:	2b00      	cmp	r3, #0
 800a636:	d004      	beq.n	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a63a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a63e:	d012      	beq.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a640:	e023      	b.n	800a68a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a642:	4b59      	ldr	r3, [pc, #356]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a64a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a64e:	d107      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a654:	4618      	mov	r0, r3
 800a656:	f000 fbc7 	bl	800ade8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a65e:	e0fc      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a660:	2300      	movs	r3, #0
 800a662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a664:	e0f9      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a666:	4b50      	ldr	r3, [pc, #320]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a66e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a672:	d107      	bne.n	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a674:	f107 0318 	add.w	r3, r7, #24
 800a678:	4618      	mov	r0, r3
 800a67a:	f000 f90d 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a67e:	6a3b      	ldr	r3, [r7, #32]
 800a680:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a682:	e0ea      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a684:	2300      	movs	r3, #0
 800a686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a688:	e0e7      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a68e:	e0e4      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a690:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a694:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a698:	430b      	orrs	r3, r1
 800a69a:	f040 808d 	bne.w	800a7b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a69e:	4b42      	ldr	r3, [pc, #264]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6a2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a6a6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6ae:	d06b      	beq.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6b6:	d874      	bhi.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6be:	d056      	beq.n	800a76e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6c6:	d86c      	bhi.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6ce:	d03b      	beq.n	800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6d6:	d864      	bhi.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6de:	d021      	beq.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6e6:	d85c      	bhi.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d004      	beq.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6f4:	d004      	beq.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a6f6:	e054      	b.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a6f8:	f000 f8b8 	bl	800a86c <HAL_RCCEx_GetD3PCLK1Freq>
 800a6fc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a6fe:	e0ac      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a700:	4b29      	ldr	r3, [pc, #164]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a70c:	d107      	bne.n	800a71e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a70e:	f107 0318 	add.w	r3, r7, #24
 800a712:	4618      	mov	r0, r3
 800a714:	f000 f8c0 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a71c:	e09d      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a71e:	2300      	movs	r3, #0
 800a720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a722:	e09a      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a724:	4b20      	ldr	r3, [pc, #128]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a72c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a730:	d107      	bne.n	800a742 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a732:	f107 030c 	add.w	r3, r7, #12
 800a736:	4618      	mov	r0, r3
 800a738:	f000 fa02 	bl	800ab40 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a740:	e08b      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a742:	2300      	movs	r3, #0
 800a744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a746:	e088      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a748:	4b17      	ldr	r3, [pc, #92]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f003 0304 	and.w	r3, r3, #4
 800a750:	2b04      	cmp	r3, #4
 800a752:	d109      	bne.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a754:	4b14      	ldr	r3, [pc, #80]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	08db      	lsrs	r3, r3, #3
 800a75a:	f003 0303 	and.w	r3, r3, #3
 800a75e:	4a13      	ldr	r2, [pc, #76]	; (800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a760:	fa22 f303 	lsr.w	r3, r2, r3
 800a764:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a766:	e078      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a768:	2300      	movs	r3, #0
 800a76a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a76c:	e075      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a76e:	4b0e      	ldr	r3, [pc, #56]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a77a:	d102      	bne.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a77c:	4b0c      	ldr	r3, [pc, #48]	; (800a7b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a77e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a780:	e06b      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a782:	2300      	movs	r3, #0
 800a784:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a786:	e068      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a788:	4b07      	ldr	r3, [pc, #28]	; (800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a794:	d102      	bne.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a796:	4b07      	ldr	r3, [pc, #28]	; (800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a798:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a79a:	e05e      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a79c:	2300      	movs	r3, #0
 800a79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7a0:	e05b      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7a6:	e058      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a7a8:	58024400 	.word	0x58024400
 800a7ac:	03d09000 	.word	0x03d09000
 800a7b0:	003d0900 	.word	0x003d0900
 800a7b4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a7b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7bc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a7c0:	430b      	orrs	r3, r1
 800a7c2:	d148      	bne.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a7c4:	4b27      	ldr	r3, [pc, #156]	; (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a7c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7d4:	d02a      	beq.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7dc:	d838      	bhi.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d004      	beq.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a7ea:	d00d      	beq.n	800a808 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a7ec:	e030      	b.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a7ee:	4b1d      	ldr	r3, [pc, #116]	; (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7fa:	d102      	bne.n	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a7fc:	4b1a      	ldr	r3, [pc, #104]	; (800a868 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a800:	e02b      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a802:	2300      	movs	r3, #0
 800a804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a806:	e028      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a808:	4b16      	ldr	r3, [pc, #88]	; (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a810:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a814:	d107      	bne.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a81a:	4618      	mov	r0, r3
 800a81c:	f000 fae4 	bl	800ade8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a824:	e019      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a826:	2300      	movs	r3, #0
 800a828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a82a:	e016      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a82c:	4b0d      	ldr	r3, [pc, #52]	; (800a864 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a834:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a838:	d107      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a83a:	f107 0318 	add.w	r3, r7, #24
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 f82a 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a848:	e007      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a84a:	2300      	movs	r3, #0
 800a84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a84e:	e004      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a850:	2300      	movs	r3, #0
 800a852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a854:	e001      	b.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3740      	adds	r7, #64	; 0x40
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	58024400 	.word	0x58024400
 800a868:	017d7840 	.word	0x017d7840

0800a86c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a870:	f7fd ffd4 	bl	800881c <HAL_RCC_GetHCLKFreq>
 800a874:	4602      	mov	r2, r0
 800a876:	4b06      	ldr	r3, [pc, #24]	; (800a890 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a878:	6a1b      	ldr	r3, [r3, #32]
 800a87a:	091b      	lsrs	r3, r3, #4
 800a87c:	f003 0307 	and.w	r3, r3, #7
 800a880:	4904      	ldr	r1, [pc, #16]	; (800a894 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a882:	5ccb      	ldrb	r3, [r1, r3]
 800a884:	f003 031f 	and.w	r3, r3, #31
 800a888:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	58024400 	.word	0x58024400
 800a894:	08013d70 	.word	0x08013d70

0800a898 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a898:	b480      	push	{r7}
 800a89a:	b089      	sub	sp, #36	; 0x24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8a0:	4ba1      	ldr	r3, [pc, #644]	; (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8a4:	f003 0303 	and.w	r3, r3, #3
 800a8a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a8aa:	4b9f      	ldr	r3, [pc, #636]	; (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ae:	0b1b      	lsrs	r3, r3, #12
 800a8b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a8b6:	4b9c      	ldr	r3, [pc, #624]	; (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ba:	091b      	lsrs	r3, r3, #4
 800a8bc:	f003 0301 	and.w	r3, r3, #1
 800a8c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a8c2:	4b99      	ldr	r3, [pc, #612]	; (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c6:	08db      	lsrs	r3, r3, #3
 800a8c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	fb02 f303 	mul.w	r3, r2, r3
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 8111 	beq.w	800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	f000 8083 	beq.w	800a9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	f200 80a1 	bhi.w	800aa38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d003      	beq.n	800a904 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d056      	beq.n	800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a902:	e099      	b.n	800aa38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a904:	4b88      	ldr	r3, [pc, #544]	; (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 0320 	and.w	r3, r3, #32
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d02d      	beq.n	800a96c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a910:	4b85      	ldr	r3, [pc, #532]	; (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	08db      	lsrs	r3, r3, #3
 800a916:	f003 0303 	and.w	r3, r3, #3
 800a91a:	4a84      	ldr	r2, [pc, #528]	; (800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a91c:	fa22 f303 	lsr.w	r3, r2, r3
 800a920:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	ee07 3a90 	vmov	s15, r3
 800a928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	ee07 3a90 	vmov	s15, r3
 800a932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a93a:	4b7b      	ldr	r3, [pc, #492]	; (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a942:	ee07 3a90 	vmov	s15, r3
 800a946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a94a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a94e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a95a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a966:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a96a:	e087      	b.n	800aa7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	ee07 3a90 	vmov	s15, r3
 800a972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a976:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ab34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a97a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a97e:	4b6a      	ldr	r3, [pc, #424]	; (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a986:	ee07 3a90 	vmov	s15, r3
 800a98a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a98e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a992:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a99a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a99e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9ae:	e065      	b.n	800aa7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	ee07 3a90 	vmov	s15, r3
 800a9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a9be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9c2:	4b59      	ldr	r3, [pc, #356]	; (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ca:	ee07 3a90 	vmov	s15, r3
 800a9ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9f2:	e043      	b.n	800aa7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	ee07 3a90 	vmov	s15, r3
 800a9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ab3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aa02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa06:	4b48      	ldr	r3, [pc, #288]	; (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa0e:	ee07 3a90 	vmov	s15, r3
 800aa12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa16:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa36:	e021      	b.n	800aa7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ab38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa4a:	4b37      	ldr	r3, [pc, #220]	; (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa52:	ee07 3a90 	vmov	s15, r3
 800aa56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aa7c:	4b2a      	ldr	r3, [pc, #168]	; (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa80:	0a5b      	lsrs	r3, r3, #9
 800aa82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa86:	ee07 3a90 	vmov	s15, r3
 800aa8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aa92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aa96:	edd7 6a07 	vldr	s13, [r7, #28]
 800aa9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaa2:	ee17 2a90 	vmov	r2, s15
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800aaaa:	4b1f      	ldr	r3, [pc, #124]	; (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaae:	0c1b      	lsrs	r3, r3, #16
 800aab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aab4:	ee07 3a90 	vmov	s15, r3
 800aab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aabc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aac4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aacc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aad0:	ee17 2a90 	vmov	r2, s15
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800aad8:	4b13      	ldr	r3, [pc, #76]	; (800ab28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aadc:	0e1b      	lsrs	r3, r3, #24
 800aade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aaee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aafa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aafe:	ee17 2a90 	vmov	r2, s15
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ab06:	e008      	b.n	800ab1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	609a      	str	r2, [r3, #8]
}
 800ab1a:	bf00      	nop
 800ab1c:	3724      	adds	r7, #36	; 0x24
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	58024400 	.word	0x58024400
 800ab2c:	03d09000 	.word	0x03d09000
 800ab30:	46000000 	.word	0x46000000
 800ab34:	4c742400 	.word	0x4c742400
 800ab38:	4a742400 	.word	0x4a742400
 800ab3c:	4bbebc20 	.word	0x4bbebc20

0800ab40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b089      	sub	sp, #36	; 0x24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab48:	4ba1      	ldr	r3, [pc, #644]	; (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab4c:	f003 0303 	and.w	r3, r3, #3
 800ab50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ab52:	4b9f      	ldr	r3, [pc, #636]	; (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab56:	0d1b      	lsrs	r3, r3, #20
 800ab58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ab5e:	4b9c      	ldr	r3, [pc, #624]	; (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab62:	0a1b      	lsrs	r3, r3, #8
 800ab64:	f003 0301 	and.w	r3, r3, #1
 800ab68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ab6a:	4b99      	ldr	r3, [pc, #612]	; (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab6e:	08db      	lsrs	r3, r3, #3
 800ab70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	fb02 f303 	mul.w	r3, r2, r3
 800ab7a:	ee07 3a90 	vmov	s15, r3
 800ab7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f000 8111 	beq.w	800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	f000 8083 	beq.w	800ac9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	f200 80a1 	bhi.w	800ace0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d003      	beq.n	800abac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d056      	beq.n	800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800abaa:	e099      	b.n	800ace0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abac:	4b88      	ldr	r3, [pc, #544]	; (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0320 	and.w	r3, r3, #32
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d02d      	beq.n	800ac14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abb8:	4b85      	ldr	r3, [pc, #532]	; (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	08db      	lsrs	r3, r3, #3
 800abbe:	f003 0303 	and.w	r3, r3, #3
 800abc2:	4a84      	ldr	r2, [pc, #528]	; (800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800abc4:	fa22 f303 	lsr.w	r3, r2, r3
 800abc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	ee07 3a90 	vmov	s15, r3
 800abd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	ee07 3a90 	vmov	s15, r3
 800abda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abe2:	4b7b      	ldr	r3, [pc, #492]	; (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abea:	ee07 3a90 	vmov	s15, r3
 800abee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abf6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac12:	e087      	b.n	800ad24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	ee07 3a90 	vmov	s15, r3
 800ac1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac1e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800addc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ac22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac26:	4b6a      	ldr	r3, [pc, #424]	; (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac2e:	ee07 3a90 	vmov	s15, r3
 800ac32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac3a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac56:	e065      	b.n	800ad24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	ee07 3a90 	vmov	s15, r3
 800ac5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac62:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ac66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac6a:	4b59      	ldr	r3, [pc, #356]	; (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac72:	ee07 3a90 	vmov	s15, r3
 800ac76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac7e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac9a:	e043      	b.n	800ad24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	ee07 3a90 	vmov	s15, r3
 800aca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aca6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ade4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800acaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acae:	4b48      	ldr	r3, [pc, #288]	; (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acb6:	ee07 3a90 	vmov	s15, r3
 800acba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800acc2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acde:	e021      	b.n	800ad24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	ee07 3a90 	vmov	s15, r3
 800ace6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ade0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acf2:	4b37      	ldr	r3, [pc, #220]	; (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acfa:	ee07 3a90 	vmov	s15, r3
 800acfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad02:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad06:	eddf 5a34 	vldr	s11, [pc, #208]	; 800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ad24:	4b2a      	ldr	r3, [pc, #168]	; (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad28:	0a5b      	lsrs	r3, r3, #9
 800ad2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad2e:	ee07 3a90 	vmov	s15, r3
 800ad32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad4a:	ee17 2a90 	vmov	r2, s15
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ad52:	4b1f      	ldr	r3, [pc, #124]	; (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad56:	0c1b      	lsrs	r3, r3, #16
 800ad58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad5c:	ee07 3a90 	vmov	s15, r3
 800ad60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad68:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad6c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad78:	ee17 2a90 	vmov	r2, s15
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ad80:	4b13      	ldr	r3, [pc, #76]	; (800add0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad84:	0e1b      	lsrs	r3, r3, #24
 800ad86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad8a:	ee07 3a90 	vmov	s15, r3
 800ad8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ada2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ada6:	ee17 2a90 	vmov	r2, s15
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800adae:	e008      	b.n	800adc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	609a      	str	r2, [r3, #8]
}
 800adc2:	bf00      	nop
 800adc4:	3724      	adds	r7, #36	; 0x24
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	58024400 	.word	0x58024400
 800add4:	03d09000 	.word	0x03d09000
 800add8:	46000000 	.word	0x46000000
 800addc:	4c742400 	.word	0x4c742400
 800ade0:	4a742400 	.word	0x4a742400
 800ade4:	4bbebc20 	.word	0x4bbebc20

0800ade8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ade8:	b480      	push	{r7}
 800adea:	b089      	sub	sp, #36	; 0x24
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800adf0:	4ba0      	ldr	r3, [pc, #640]	; (800b074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf4:	f003 0303 	and.w	r3, r3, #3
 800adf8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800adfa:	4b9e      	ldr	r3, [pc, #632]	; (800b074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adfe:	091b      	lsrs	r3, r3, #4
 800ae00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae04:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ae06:	4b9b      	ldr	r3, [pc, #620]	; (800b074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ae10:	4b98      	ldr	r3, [pc, #608]	; (800b074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae14:	08db      	lsrs	r3, r3, #3
 800ae16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae1a:	693a      	ldr	r2, [r7, #16]
 800ae1c:	fb02 f303 	mul.w	r3, r2, r3
 800ae20:	ee07 3a90 	vmov	s15, r3
 800ae24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae28:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f000 8111 	beq.w	800b056 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	f000 8083 	beq.w	800af42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	f200 80a1 	bhi.w	800af86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ae44:	69bb      	ldr	r3, [r7, #24]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d056      	beq.n	800aefe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ae50:	e099      	b.n	800af86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae52:	4b88      	ldr	r3, [pc, #544]	; (800b074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 0320 	and.w	r3, r3, #32
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d02d      	beq.n	800aeba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae5e:	4b85      	ldr	r3, [pc, #532]	; (800b074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	08db      	lsrs	r3, r3, #3
 800ae64:	f003 0303 	and.w	r3, r3, #3
 800ae68:	4a83      	ldr	r2, [pc, #524]	; (800b078 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ae6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae6e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	ee07 3a90 	vmov	s15, r3
 800ae76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	ee07 3a90 	vmov	s15, r3
 800ae80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae88:	4b7a      	ldr	r3, [pc, #488]	; (800b074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae90:	ee07 3a90 	vmov	s15, r3
 800ae94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae98:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b07c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeb4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aeb8:	e087      	b.n	800afca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	ee07 3a90 	vmov	s15, r3
 800aec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b080 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aecc:	4b69      	ldr	r3, [pc, #420]	; (800b074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aed4:	ee07 3a90 	vmov	s15, r3
 800aed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aedc:	ed97 6a03 	vldr	s12, [r7, #12]
 800aee0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b07c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aee4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aef8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aefc:	e065      	b.n	800afca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	ee07 3a90 	vmov	s15, r3
 800af04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af08:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b084 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800af0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af10:	4b58      	ldr	r3, [pc, #352]	; (800b074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af18:	ee07 3a90 	vmov	s15, r3
 800af1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af20:	ed97 6a03 	vldr	s12, [r7, #12]
 800af24:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b07c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af40:	e043      	b.n	800afca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	ee07 3a90 	vmov	s15, r3
 800af48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b088 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800af50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af54:	4b47      	ldr	r3, [pc, #284]	; (800b074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af5c:	ee07 3a90 	vmov	s15, r3
 800af60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af64:	ed97 6a03 	vldr	s12, [r7, #12]
 800af68:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b07c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af84:	e021      	b.n	800afca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	ee07 3a90 	vmov	s15, r3
 800af8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af90:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b080 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af98:	4b36      	ldr	r3, [pc, #216]	; (800b074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afa0:	ee07 3a90 	vmov	s15, r3
 800afa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afa8:	ed97 6a03 	vldr	s12, [r7, #12]
 800afac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b07c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afc8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800afca:	4b2a      	ldr	r3, [pc, #168]	; (800b074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afce:	0a5b      	lsrs	r3, r3, #9
 800afd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afd4:	ee07 3a90 	vmov	s15, r3
 800afd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afe4:	edd7 6a07 	vldr	s13, [r7, #28]
 800afe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff0:	ee17 2a90 	vmov	r2, s15
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800aff8:	4b1e      	ldr	r3, [pc, #120]	; (800b074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800affa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affc:	0c1b      	lsrs	r3, r3, #16
 800affe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b00e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b012:	edd7 6a07 	vldr	s13, [r7, #28]
 800b016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b01a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b01e:	ee17 2a90 	vmov	r2, s15
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b026:	4b13      	ldr	r3, [pc, #76]	; (800b074 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02a:	0e1b      	lsrs	r3, r3, #24
 800b02c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b030:	ee07 3a90 	vmov	s15, r3
 800b034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b038:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b03c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b040:	edd7 6a07 	vldr	s13, [r7, #28]
 800b044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b048:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b04c:	ee17 2a90 	vmov	r2, s15
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b054:	e008      	b.n	800b068 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2200      	movs	r2, #0
 800b066:	609a      	str	r2, [r3, #8]
}
 800b068:	bf00      	nop
 800b06a:	3724      	adds	r7, #36	; 0x24
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr
 800b074:	58024400 	.word	0x58024400
 800b078:	03d09000 	.word	0x03d09000
 800b07c:	46000000 	.word	0x46000000
 800b080:	4c742400 	.word	0x4c742400
 800b084:	4a742400 	.word	0x4a742400
 800b088:	4bbebc20 	.word	0x4bbebc20

0800b08c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b096:	2300      	movs	r3, #0
 800b098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b09a:	4b53      	ldr	r3, [pc, #332]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b09e:	f003 0303 	and.w	r3, r3, #3
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d101      	bne.n	800b0aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	e099      	b.n	800b1de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b0aa:	4b4f      	ldr	r3, [pc, #316]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a4e      	ldr	r2, [pc, #312]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b0b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b0b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0b6:	f7f7 fbc3 	bl	8002840 <HAL_GetTick>
 800b0ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0bc:	e008      	b.n	800b0d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b0be:	f7f7 fbbf 	bl	8002840 <HAL_GetTick>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d901      	bls.n	800b0d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	e086      	b.n	800b1de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b0d0:	4b45      	ldr	r3, [pc, #276]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1f0      	bne.n	800b0be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b0dc:	4b42      	ldr	r3, [pc, #264]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	031b      	lsls	r3, r3, #12
 800b0ea:	493f      	ldr	r1, [pc, #252]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	628b      	str	r3, [r1, #40]	; 0x28
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	3b01      	subs	r3, #1
 800b100:	025b      	lsls	r3, r3, #9
 800b102:	b29b      	uxth	r3, r3
 800b104:	431a      	orrs	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	3b01      	subs	r3, #1
 800b10c:	041b      	lsls	r3, r3, #16
 800b10e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b112:	431a      	orrs	r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	3b01      	subs	r3, #1
 800b11a:	061b      	lsls	r3, r3, #24
 800b11c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b120:	4931      	ldr	r1, [pc, #196]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b122:	4313      	orrs	r3, r2
 800b124:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b126:	4b30      	ldr	r3, [pc, #192]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	695b      	ldr	r3, [r3, #20]
 800b132:	492d      	ldr	r1, [pc, #180]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b134:	4313      	orrs	r3, r2
 800b136:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b138:	4b2b      	ldr	r3, [pc, #172]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13c:	f023 0220 	bic.w	r2, r3, #32
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	699b      	ldr	r3, [r3, #24]
 800b144:	4928      	ldr	r1, [pc, #160]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b146:	4313      	orrs	r3, r2
 800b148:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b14a:	4b27      	ldr	r3, [pc, #156]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14e:	4a26      	ldr	r2, [pc, #152]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b150:	f023 0310 	bic.w	r3, r3, #16
 800b154:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b156:	4b24      	ldr	r3, [pc, #144]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b15a:	4b24      	ldr	r3, [pc, #144]	; (800b1ec <RCCEx_PLL2_Config+0x160>)
 800b15c:	4013      	ands	r3, r2
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	69d2      	ldr	r2, [r2, #28]
 800b162:	00d2      	lsls	r2, r2, #3
 800b164:	4920      	ldr	r1, [pc, #128]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b166:	4313      	orrs	r3, r2
 800b168:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b16a:	4b1f      	ldr	r3, [pc, #124]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b16c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16e:	4a1e      	ldr	r2, [pc, #120]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b170:	f043 0310 	orr.w	r3, r3, #16
 800b174:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d106      	bne.n	800b18a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b17c:	4b1a      	ldr	r3, [pc, #104]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b180:	4a19      	ldr	r2, [pc, #100]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b186:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b188:	e00f      	b.n	800b1aa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d106      	bne.n	800b19e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b190:	4b15      	ldr	r3, [pc, #84]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b194:	4a14      	ldr	r2, [pc, #80]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b19a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b19c:	e005      	b.n	800b1aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b19e:	4b12      	ldr	r3, [pc, #72]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a2:	4a11      	ldr	r2, [pc, #68]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b1a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b1a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b1aa:	4b0f      	ldr	r3, [pc, #60]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a0e      	ldr	r2, [pc, #56]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b1b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b1b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1b6:	f7f7 fb43 	bl	8002840 <HAL_GetTick>
 800b1ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1bc:	e008      	b.n	800b1d0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b1be:	f7f7 fb3f 	bl	8002840 <HAL_GetTick>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	1ad3      	subs	r3, r2, r3
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d901      	bls.n	800b1d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	e006      	b.n	800b1de <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b1d0:	4b05      	ldr	r3, [pc, #20]	; (800b1e8 <RCCEx_PLL2_Config+0x15c>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d0f0      	beq.n	800b1be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3710      	adds	r7, #16
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	58024400 	.word	0x58024400
 800b1ec:	ffff0007 	.word	0xffff0007

0800b1f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1fe:	4b53      	ldr	r3, [pc, #332]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b202:	f003 0303 	and.w	r3, r3, #3
 800b206:	2b03      	cmp	r3, #3
 800b208:	d101      	bne.n	800b20e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e099      	b.n	800b342 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b20e:	4b4f      	ldr	r3, [pc, #316]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a4e      	ldr	r2, [pc, #312]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b21a:	f7f7 fb11 	bl	8002840 <HAL_GetTick>
 800b21e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b220:	e008      	b.n	800b234 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b222:	f7f7 fb0d 	bl	8002840 <HAL_GetTick>
 800b226:	4602      	mov	r2, r0
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	d901      	bls.n	800b234 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b230:	2303      	movs	r3, #3
 800b232:	e086      	b.n	800b342 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b234:	4b45      	ldr	r3, [pc, #276]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d1f0      	bne.n	800b222 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b240:	4b42      	ldr	r3, [pc, #264]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b244:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	051b      	lsls	r3, r3, #20
 800b24e:	493f      	ldr	r1, [pc, #252]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b250:	4313      	orrs	r3, r2
 800b252:	628b      	str	r3, [r1, #40]	; 0x28
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	3b01      	subs	r3, #1
 800b25a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	3b01      	subs	r3, #1
 800b264:	025b      	lsls	r3, r3, #9
 800b266:	b29b      	uxth	r3, r3
 800b268:	431a      	orrs	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	3b01      	subs	r3, #1
 800b270:	041b      	lsls	r3, r3, #16
 800b272:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b276:	431a      	orrs	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	3b01      	subs	r3, #1
 800b27e:	061b      	lsls	r3, r3, #24
 800b280:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b284:	4931      	ldr	r1, [pc, #196]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b286:	4313      	orrs	r3, r2
 800b288:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b28a:	4b30      	ldr	r3, [pc, #192]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	695b      	ldr	r3, [r3, #20]
 800b296:	492d      	ldr	r1, [pc, #180]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b298:	4313      	orrs	r3, r2
 800b29a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b29c:	4b2b      	ldr	r3, [pc, #172]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	699b      	ldr	r3, [r3, #24]
 800b2a8:	4928      	ldr	r1, [pc, #160]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b2ae:	4b27      	ldr	r3, [pc, #156]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b2:	4a26      	ldr	r2, [pc, #152]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b2b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b2ba:	4b24      	ldr	r3, [pc, #144]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b2bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2be:	4b24      	ldr	r3, [pc, #144]	; (800b350 <RCCEx_PLL3_Config+0x160>)
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	69d2      	ldr	r2, [r2, #28]
 800b2c6:	00d2      	lsls	r2, r2, #3
 800b2c8:	4920      	ldr	r1, [pc, #128]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b2ce:	4b1f      	ldr	r3, [pc, #124]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d2:	4a1e      	ldr	r2, [pc, #120]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b2d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d106      	bne.n	800b2ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b2e0:	4b1a      	ldr	r3, [pc, #104]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e4:	4a19      	ldr	r2, [pc, #100]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b2e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b2ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2ec:	e00f      	b.n	800b30e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d106      	bne.n	800b302 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b2f4:	4b15      	ldr	r3, [pc, #84]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f8:	4a14      	ldr	r2, [pc, #80]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b2fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b2fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b300:	e005      	b.n	800b30e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b302:	4b12      	ldr	r3, [pc, #72]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b306:	4a11      	ldr	r2, [pc, #68]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b30c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b30e:	4b0f      	ldr	r3, [pc, #60]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a0e      	ldr	r2, [pc, #56]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b31a:	f7f7 fa91 	bl	8002840 <HAL_GetTick>
 800b31e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b320:	e008      	b.n	800b334 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b322:	f7f7 fa8d 	bl	8002840 <HAL_GetTick>
 800b326:	4602      	mov	r2, r0
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	1ad3      	subs	r3, r2, r3
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	d901      	bls.n	800b334 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b330:	2303      	movs	r3, #3
 800b332:	e006      	b.n	800b342 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b334:	4b05      	ldr	r3, [pc, #20]	; (800b34c <RCCEx_PLL3_Config+0x15c>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d0f0      	beq.n	800b322 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b340:	7bfb      	ldrb	r3, [r7, #15]
}
 800b342:	4618      	mov	r0, r3
 800b344:	3710      	adds	r7, #16
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	58024400 	.word	0x58024400
 800b350:	ffff0007 	.word	0xffff0007

0800b354 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d101      	bne.n	800b366 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e10f      	b.n	800b586 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a87      	ldr	r2, [pc, #540]	; (800b590 <HAL_SPI_Init+0x23c>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d00f      	beq.n	800b396 <HAL_SPI_Init+0x42>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a86      	ldr	r2, [pc, #536]	; (800b594 <HAL_SPI_Init+0x240>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d00a      	beq.n	800b396 <HAL_SPI_Init+0x42>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a84      	ldr	r2, [pc, #528]	; (800b598 <HAL_SPI_Init+0x244>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d005      	beq.n	800b396 <HAL_SPI_Init+0x42>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	2b0f      	cmp	r3, #15
 800b390:	d901      	bls.n	800b396 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	e0f7      	b.n	800b586 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 f900 	bl	800b59c <SPI_GetPacketSize>
 800b39c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a7b      	ldr	r2, [pc, #492]	; (800b590 <HAL_SPI_Init+0x23c>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d00c      	beq.n	800b3c2 <HAL_SPI_Init+0x6e>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a79      	ldr	r2, [pc, #484]	; (800b594 <HAL_SPI_Init+0x240>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d007      	beq.n	800b3c2 <HAL_SPI_Init+0x6e>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a78      	ldr	r2, [pc, #480]	; (800b598 <HAL_SPI_Init+0x244>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d002      	beq.n	800b3c2 <HAL_SPI_Init+0x6e>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2b08      	cmp	r3, #8
 800b3c0:	d811      	bhi.n	800b3e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b3c6:	4a72      	ldr	r2, [pc, #456]	; (800b590 <HAL_SPI_Init+0x23c>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d009      	beq.n	800b3e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a70      	ldr	r2, [pc, #448]	; (800b594 <HAL_SPI_Init+0x240>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d004      	beq.n	800b3e0 <HAL_SPI_Init+0x8c>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a6f      	ldr	r2, [pc, #444]	; (800b598 <HAL_SPI_Init+0x244>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d104      	bne.n	800b3ea <HAL_SPI_Init+0x96>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2b10      	cmp	r3, #16
 800b3e4:	d901      	bls.n	800b3ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e0cd      	b.n	800b586 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d106      	bne.n	800b404 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f7f6 fd9c 	bl	8001f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2202      	movs	r2, #2
 800b408:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f022 0201 	bic.w	r2, r2, #1
 800b41a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b426:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	699b      	ldr	r3, [r3, #24]
 800b42c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b430:	d119      	bne.n	800b466 <HAL_SPI_Init+0x112>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b43a:	d103      	bne.n	800b444 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b440:	2b00      	cmp	r3, #0
 800b442:	d008      	beq.n	800b456 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d10c      	bne.n	800b466 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b454:	d107      	bne.n	800b466 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b464:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00f      	beq.n	800b492 <HAL_SPI_Init+0x13e>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	2b06      	cmp	r3, #6
 800b478:	d90b      	bls.n	800b492 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	430a      	orrs	r2, r1
 800b48e:	601a      	str	r2, [r3, #0]
 800b490:	e007      	b.n	800b4a2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681a      	ldr	r2, [r3, #0]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4a0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	69da      	ldr	r2, [r3, #28]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4aa:	431a      	orrs	r2, r3
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	431a      	orrs	r2, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4b4:	ea42 0103 	orr.w	r1, r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	68da      	ldr	r2, [r3, #12]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	430a      	orrs	r2, r1
 800b4c2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4cc:	431a      	orrs	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d2:	431a      	orrs	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	699b      	ldr	r3, [r3, #24]
 800b4d8:	431a      	orrs	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	691b      	ldr	r3, [r3, #16]
 800b4de:	431a      	orrs	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	695b      	ldr	r3, [r3, #20]
 800b4e4:	431a      	orrs	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a1b      	ldr	r3, [r3, #32]
 800b4ea:	431a      	orrs	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	431a      	orrs	r2, r3
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4f6:	431a      	orrs	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	431a      	orrs	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b502:	ea42 0103 	orr.w	r1, r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	430a      	orrs	r2, r1
 800b510:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d113      	bne.n	800b542 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b52c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b540:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f022 0201 	bic.w	r2, r2, #1
 800b550:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00a      	beq.n	800b574 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	430a      	orrs	r2, r1
 800b572:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2201      	movs	r2, #1
 800b580:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	40013000 	.word	0x40013000
 800b594:	40003800 	.word	0x40003800
 800b598:	40003c00 	.word	0x40003c00

0800b59c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5a8:	095b      	lsrs	r3, r3, #5
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	3307      	adds	r3, #7
 800b5ba:	08db      	lsrs	r3, r3, #3
 800b5bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	fb02 f303 	mul.w	r3, r2, r3
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3714      	adds	r7, #20
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr

0800b5d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5d2:	b580      	push	{r7, lr}
 800b5d4:	b082      	sub	sp, #8
 800b5d6:	af00      	add	r7, sp, #0
 800b5d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d101      	bne.n	800b5e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e049      	b.n	800b678 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d106      	bne.n	800b5fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f7f6 fd07 	bl	800200c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2202      	movs	r2, #2
 800b602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	3304      	adds	r3, #4
 800b60e:	4619      	mov	r1, r3
 800b610:	4610      	mov	r0, r2
 800b612:	f000 fea9 	bl	800c368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2201      	movs	r2, #1
 800b61a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2201      	movs	r2, #1
 800b62a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2201      	movs	r2, #1
 800b632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2201      	movs	r2, #1
 800b63a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2201      	movs	r2, #1
 800b64a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2201      	movs	r2, #1
 800b652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2201      	movs	r2, #1
 800b65a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2201      	movs	r2, #1
 800b672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	2b01      	cmp	r3, #1
 800b692:	d001      	beq.n	800b698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	e054      	b.n	800b742 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2202      	movs	r2, #2
 800b69c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	68da      	ldr	r2, [r3, #12]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f042 0201 	orr.w	r2, r2, #1
 800b6ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a26      	ldr	r2, [pc, #152]	; (800b750 <HAL_TIM_Base_Start_IT+0xd0>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d022      	beq.n	800b700 <HAL_TIM_Base_Start_IT+0x80>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c2:	d01d      	beq.n	800b700 <HAL_TIM_Base_Start_IT+0x80>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a22      	ldr	r2, [pc, #136]	; (800b754 <HAL_TIM_Base_Start_IT+0xd4>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d018      	beq.n	800b700 <HAL_TIM_Base_Start_IT+0x80>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a21      	ldr	r2, [pc, #132]	; (800b758 <HAL_TIM_Base_Start_IT+0xd8>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d013      	beq.n	800b700 <HAL_TIM_Base_Start_IT+0x80>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a1f      	ldr	r2, [pc, #124]	; (800b75c <HAL_TIM_Base_Start_IT+0xdc>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d00e      	beq.n	800b700 <HAL_TIM_Base_Start_IT+0x80>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a1e      	ldr	r2, [pc, #120]	; (800b760 <HAL_TIM_Base_Start_IT+0xe0>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d009      	beq.n	800b700 <HAL_TIM_Base_Start_IT+0x80>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a1c      	ldr	r2, [pc, #112]	; (800b764 <HAL_TIM_Base_Start_IT+0xe4>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d004      	beq.n	800b700 <HAL_TIM_Base_Start_IT+0x80>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a1b      	ldr	r2, [pc, #108]	; (800b768 <HAL_TIM_Base_Start_IT+0xe8>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d115      	bne.n	800b72c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	689a      	ldr	r2, [r3, #8]
 800b706:	4b19      	ldr	r3, [pc, #100]	; (800b76c <HAL_TIM_Base_Start_IT+0xec>)
 800b708:	4013      	ands	r3, r2
 800b70a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2b06      	cmp	r3, #6
 800b710:	d015      	beq.n	800b73e <HAL_TIM_Base_Start_IT+0xbe>
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b718:	d011      	beq.n	800b73e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f042 0201 	orr.w	r2, r2, #1
 800b728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b72a:	e008      	b.n	800b73e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f042 0201 	orr.w	r2, r2, #1
 800b73a:	601a      	str	r2, [r3, #0]
 800b73c:	e000      	b.n	800b740 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b73e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3714      	adds	r7, #20
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	40010000 	.word	0x40010000
 800b754:	40000400 	.word	0x40000400
 800b758:	40000800 	.word	0x40000800
 800b75c:	40000c00 	.word	0x40000c00
 800b760:	40010400 	.word	0x40010400
 800b764:	40001800 	.word	0x40001800
 800b768:	40014000 	.word	0x40014000
 800b76c:	00010007 	.word	0x00010007

0800b770 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d109      	bne.n	800b798 <HAL_TIM_OC_Start_IT+0x28>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	bf14      	ite	ne
 800b790:	2301      	movne	r3, #1
 800b792:	2300      	moveq	r3, #0
 800b794:	b2db      	uxtb	r3, r3
 800b796:	e03c      	b.n	800b812 <HAL_TIM_OC_Start_IT+0xa2>
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	2b04      	cmp	r3, #4
 800b79c:	d109      	bne.n	800b7b2 <HAL_TIM_OC_Start_IT+0x42>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	bf14      	ite	ne
 800b7aa:	2301      	movne	r3, #1
 800b7ac:	2300      	moveq	r3, #0
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	e02f      	b.n	800b812 <HAL_TIM_OC_Start_IT+0xa2>
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	2b08      	cmp	r3, #8
 800b7b6:	d109      	bne.n	800b7cc <HAL_TIM_OC_Start_IT+0x5c>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	bf14      	ite	ne
 800b7c4:	2301      	movne	r3, #1
 800b7c6:	2300      	moveq	r3, #0
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	e022      	b.n	800b812 <HAL_TIM_OC_Start_IT+0xa2>
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	2b0c      	cmp	r3, #12
 800b7d0:	d109      	bne.n	800b7e6 <HAL_TIM_OC_Start_IT+0x76>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	bf14      	ite	ne
 800b7de:	2301      	movne	r3, #1
 800b7e0:	2300      	moveq	r3, #0
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	e015      	b.n	800b812 <HAL_TIM_OC_Start_IT+0xa2>
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	2b10      	cmp	r3, #16
 800b7ea:	d109      	bne.n	800b800 <HAL_TIM_OC_Start_IT+0x90>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	bf14      	ite	ne
 800b7f8:	2301      	movne	r3, #1
 800b7fa:	2300      	moveq	r3, #0
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	e008      	b.n	800b812 <HAL_TIM_OC_Start_IT+0xa2>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b806:	b2db      	uxtb	r3, r3
 800b808:	2b01      	cmp	r3, #1
 800b80a:	bf14      	ite	ne
 800b80c:	2301      	movne	r3, #1
 800b80e:	2300      	moveq	r3, #0
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b00      	cmp	r3, #0
 800b814:	d001      	beq.n	800b81a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800b816:	2301      	movs	r3, #1
 800b818:	e0ec      	b.n	800b9f4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d104      	bne.n	800b82a <HAL_TIM_OC_Start_IT+0xba>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2202      	movs	r2, #2
 800b824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b828:	e023      	b.n	800b872 <HAL_TIM_OC_Start_IT+0x102>
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	2b04      	cmp	r3, #4
 800b82e:	d104      	bne.n	800b83a <HAL_TIM_OC_Start_IT+0xca>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2202      	movs	r2, #2
 800b834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b838:	e01b      	b.n	800b872 <HAL_TIM_OC_Start_IT+0x102>
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b08      	cmp	r3, #8
 800b83e:	d104      	bne.n	800b84a <HAL_TIM_OC_Start_IT+0xda>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2202      	movs	r2, #2
 800b844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b848:	e013      	b.n	800b872 <HAL_TIM_OC_Start_IT+0x102>
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	2b0c      	cmp	r3, #12
 800b84e:	d104      	bne.n	800b85a <HAL_TIM_OC_Start_IT+0xea>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2202      	movs	r2, #2
 800b854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b858:	e00b      	b.n	800b872 <HAL_TIM_OC_Start_IT+0x102>
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	2b10      	cmp	r3, #16
 800b85e:	d104      	bne.n	800b86a <HAL_TIM_OC_Start_IT+0xfa>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2202      	movs	r2, #2
 800b864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b868:	e003      	b.n	800b872 <HAL_TIM_OC_Start_IT+0x102>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2202      	movs	r2, #2
 800b86e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	2b0c      	cmp	r3, #12
 800b876:	d841      	bhi.n	800b8fc <HAL_TIM_OC_Start_IT+0x18c>
 800b878:	a201      	add	r2, pc, #4	; (adr r2, 800b880 <HAL_TIM_OC_Start_IT+0x110>)
 800b87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b87e:	bf00      	nop
 800b880:	0800b8b5 	.word	0x0800b8b5
 800b884:	0800b8fd 	.word	0x0800b8fd
 800b888:	0800b8fd 	.word	0x0800b8fd
 800b88c:	0800b8fd 	.word	0x0800b8fd
 800b890:	0800b8c7 	.word	0x0800b8c7
 800b894:	0800b8fd 	.word	0x0800b8fd
 800b898:	0800b8fd 	.word	0x0800b8fd
 800b89c:	0800b8fd 	.word	0x0800b8fd
 800b8a0:	0800b8d9 	.word	0x0800b8d9
 800b8a4:	0800b8fd 	.word	0x0800b8fd
 800b8a8:	0800b8fd 	.word	0x0800b8fd
 800b8ac:	0800b8fd 	.word	0x0800b8fd
 800b8b0:	0800b8eb 	.word	0x0800b8eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68da      	ldr	r2, [r3, #12]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f042 0202 	orr.w	r2, r2, #2
 800b8c2:	60da      	str	r2, [r3, #12]
      break;
 800b8c4:	e01d      	b.n	800b902 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	68da      	ldr	r2, [r3, #12]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f042 0204 	orr.w	r2, r2, #4
 800b8d4:	60da      	str	r2, [r3, #12]
      break;
 800b8d6:	e014      	b.n	800b902 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68da      	ldr	r2, [r3, #12]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f042 0208 	orr.w	r2, r2, #8
 800b8e6:	60da      	str	r2, [r3, #12]
      break;
 800b8e8:	e00b      	b.n	800b902 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	68da      	ldr	r2, [r3, #12]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f042 0210 	orr.w	r2, r2, #16
 800b8f8:	60da      	str	r2, [r3, #12]
      break;
 800b8fa:	e002      	b.n	800b902 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b900:	bf00      	nop
  }

  if (status == HAL_OK)
 800b902:	7bfb      	ldrb	r3, [r7, #15]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d174      	bne.n	800b9f2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2201      	movs	r2, #1
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	4618      	mov	r0, r3
 800b912:	f001 f943 	bl	800cb9c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4a38      	ldr	r2, [pc, #224]	; (800b9fc <HAL_TIM_OC_Start_IT+0x28c>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d013      	beq.n	800b948 <HAL_TIM_OC_Start_IT+0x1d8>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a36      	ldr	r2, [pc, #216]	; (800ba00 <HAL_TIM_OC_Start_IT+0x290>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d00e      	beq.n	800b948 <HAL_TIM_OC_Start_IT+0x1d8>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4a35      	ldr	r2, [pc, #212]	; (800ba04 <HAL_TIM_OC_Start_IT+0x294>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d009      	beq.n	800b948 <HAL_TIM_OC_Start_IT+0x1d8>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a33      	ldr	r2, [pc, #204]	; (800ba08 <HAL_TIM_OC_Start_IT+0x298>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d004      	beq.n	800b948 <HAL_TIM_OC_Start_IT+0x1d8>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a32      	ldr	r2, [pc, #200]	; (800ba0c <HAL_TIM_OC_Start_IT+0x29c>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d101      	bne.n	800b94c <HAL_TIM_OC_Start_IT+0x1dc>
 800b948:	2301      	movs	r3, #1
 800b94a:	e000      	b.n	800b94e <HAL_TIM_OC_Start_IT+0x1de>
 800b94c:	2300      	movs	r3, #0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d007      	beq.n	800b962 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b960:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a25      	ldr	r2, [pc, #148]	; (800b9fc <HAL_TIM_OC_Start_IT+0x28c>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d022      	beq.n	800b9b2 <HAL_TIM_OC_Start_IT+0x242>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b974:	d01d      	beq.n	800b9b2 <HAL_TIM_OC_Start_IT+0x242>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a25      	ldr	r2, [pc, #148]	; (800ba10 <HAL_TIM_OC_Start_IT+0x2a0>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d018      	beq.n	800b9b2 <HAL_TIM_OC_Start_IT+0x242>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a23      	ldr	r2, [pc, #140]	; (800ba14 <HAL_TIM_OC_Start_IT+0x2a4>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d013      	beq.n	800b9b2 <HAL_TIM_OC_Start_IT+0x242>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a22      	ldr	r2, [pc, #136]	; (800ba18 <HAL_TIM_OC_Start_IT+0x2a8>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d00e      	beq.n	800b9b2 <HAL_TIM_OC_Start_IT+0x242>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a19      	ldr	r2, [pc, #100]	; (800ba00 <HAL_TIM_OC_Start_IT+0x290>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d009      	beq.n	800b9b2 <HAL_TIM_OC_Start_IT+0x242>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a1e      	ldr	r2, [pc, #120]	; (800ba1c <HAL_TIM_OC_Start_IT+0x2ac>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d004      	beq.n	800b9b2 <HAL_TIM_OC_Start_IT+0x242>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a15      	ldr	r2, [pc, #84]	; (800ba04 <HAL_TIM_OC_Start_IT+0x294>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d115      	bne.n	800b9de <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	689a      	ldr	r2, [r3, #8]
 800b9b8:	4b19      	ldr	r3, [pc, #100]	; (800ba20 <HAL_TIM_OC_Start_IT+0x2b0>)
 800b9ba:	4013      	ands	r3, r2
 800b9bc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	2b06      	cmp	r3, #6
 800b9c2:	d015      	beq.n	800b9f0 <HAL_TIM_OC_Start_IT+0x280>
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ca:	d011      	beq.n	800b9f0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f042 0201 	orr.w	r2, r2, #1
 800b9da:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9dc:	e008      	b.n	800b9f0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f042 0201 	orr.w	r2, r2, #1
 800b9ec:	601a      	str	r2, [r3, #0]
 800b9ee:	e000      	b.n	800b9f2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9f0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	40010000 	.word	0x40010000
 800ba00:	40010400 	.word	0x40010400
 800ba04:	40014000 	.word	0x40014000
 800ba08:	40014400 	.word	0x40014400
 800ba0c:	40014800 	.word	0x40014800
 800ba10:	40000400 	.word	0x40000400
 800ba14:	40000800 	.word	0x40000800
 800ba18:	40000c00 	.word	0x40000c00
 800ba1c:	40001800 	.word	0x40001800
 800ba20:	00010007 	.word	0x00010007

0800ba24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d101      	bne.n	800ba36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ba32:	2301      	movs	r3, #1
 800ba34:	e049      	b.n	800baca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d106      	bne.n	800ba50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f841 	bl	800bad2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2202      	movs	r2, #2
 800ba54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	3304      	adds	r3, #4
 800ba60:	4619      	mov	r1, r3
 800ba62:	4610      	mov	r0, r2
 800ba64:	f000 fc80 	bl	800c368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2201      	movs	r2, #1
 800ba74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2201      	movs	r2, #1
 800bac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3708      	adds	r7, #8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bad2:	b480      	push	{r7}
 800bad4:	b083      	sub	sp, #12
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bada:	bf00      	nop
 800badc:	370c      	adds	r7, #12
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
	...

0800bae8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d109      	bne.n	800bb0c <HAL_TIM_PWM_Start+0x24>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	bf14      	ite	ne
 800bb04:	2301      	movne	r3, #1
 800bb06:	2300      	moveq	r3, #0
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	e03c      	b.n	800bb86 <HAL_TIM_PWM_Start+0x9e>
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	2b04      	cmp	r3, #4
 800bb10:	d109      	bne.n	800bb26 <HAL_TIM_PWM_Start+0x3e>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	2b01      	cmp	r3, #1
 800bb1c:	bf14      	ite	ne
 800bb1e:	2301      	movne	r3, #1
 800bb20:	2300      	moveq	r3, #0
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	e02f      	b.n	800bb86 <HAL_TIM_PWM_Start+0x9e>
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	2b08      	cmp	r3, #8
 800bb2a:	d109      	bne.n	800bb40 <HAL_TIM_PWM_Start+0x58>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	bf14      	ite	ne
 800bb38:	2301      	movne	r3, #1
 800bb3a:	2300      	moveq	r3, #0
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	e022      	b.n	800bb86 <HAL_TIM_PWM_Start+0x9e>
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	2b0c      	cmp	r3, #12
 800bb44:	d109      	bne.n	800bb5a <HAL_TIM_PWM_Start+0x72>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	bf14      	ite	ne
 800bb52:	2301      	movne	r3, #1
 800bb54:	2300      	moveq	r3, #0
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	e015      	b.n	800bb86 <HAL_TIM_PWM_Start+0x9e>
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	2b10      	cmp	r3, #16
 800bb5e:	d109      	bne.n	800bb74 <HAL_TIM_PWM_Start+0x8c>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	bf14      	ite	ne
 800bb6c:	2301      	movne	r3, #1
 800bb6e:	2300      	moveq	r3, #0
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	e008      	b.n	800bb86 <HAL_TIM_PWM_Start+0x9e>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	bf14      	ite	ne
 800bb80:	2301      	movne	r3, #1
 800bb82:	2300      	moveq	r3, #0
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e0a1      	b.n	800bcd2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d104      	bne.n	800bb9e <HAL_TIM_PWM_Start+0xb6>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2202      	movs	r2, #2
 800bb98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb9c:	e023      	b.n	800bbe6 <HAL_TIM_PWM_Start+0xfe>
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	2b04      	cmp	r3, #4
 800bba2:	d104      	bne.n	800bbae <HAL_TIM_PWM_Start+0xc6>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2202      	movs	r2, #2
 800bba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbac:	e01b      	b.n	800bbe6 <HAL_TIM_PWM_Start+0xfe>
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	2b08      	cmp	r3, #8
 800bbb2:	d104      	bne.n	800bbbe <HAL_TIM_PWM_Start+0xd6>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2202      	movs	r2, #2
 800bbb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbbc:	e013      	b.n	800bbe6 <HAL_TIM_PWM_Start+0xfe>
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	2b0c      	cmp	r3, #12
 800bbc2:	d104      	bne.n	800bbce <HAL_TIM_PWM_Start+0xe6>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2202      	movs	r2, #2
 800bbc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bbcc:	e00b      	b.n	800bbe6 <HAL_TIM_PWM_Start+0xfe>
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	2b10      	cmp	r3, #16
 800bbd2:	d104      	bne.n	800bbde <HAL_TIM_PWM_Start+0xf6>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2202      	movs	r2, #2
 800bbd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bbdc:	e003      	b.n	800bbe6 <HAL_TIM_PWM_Start+0xfe>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2202      	movs	r2, #2
 800bbe2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2201      	movs	r2, #1
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f000 ffd4 	bl	800cb9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a38      	ldr	r2, [pc, #224]	; (800bcdc <HAL_TIM_PWM_Start+0x1f4>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d013      	beq.n	800bc26 <HAL_TIM_PWM_Start+0x13e>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	4a37      	ldr	r2, [pc, #220]	; (800bce0 <HAL_TIM_PWM_Start+0x1f8>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d00e      	beq.n	800bc26 <HAL_TIM_PWM_Start+0x13e>
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a35      	ldr	r2, [pc, #212]	; (800bce4 <HAL_TIM_PWM_Start+0x1fc>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d009      	beq.n	800bc26 <HAL_TIM_PWM_Start+0x13e>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a34      	ldr	r2, [pc, #208]	; (800bce8 <HAL_TIM_PWM_Start+0x200>)
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d004      	beq.n	800bc26 <HAL_TIM_PWM_Start+0x13e>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a32      	ldr	r2, [pc, #200]	; (800bcec <HAL_TIM_PWM_Start+0x204>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d101      	bne.n	800bc2a <HAL_TIM_PWM_Start+0x142>
 800bc26:	2301      	movs	r3, #1
 800bc28:	e000      	b.n	800bc2c <HAL_TIM_PWM_Start+0x144>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d007      	beq.n	800bc40 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a25      	ldr	r2, [pc, #148]	; (800bcdc <HAL_TIM_PWM_Start+0x1f4>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d022      	beq.n	800bc90 <HAL_TIM_PWM_Start+0x1a8>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc52:	d01d      	beq.n	800bc90 <HAL_TIM_PWM_Start+0x1a8>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a25      	ldr	r2, [pc, #148]	; (800bcf0 <HAL_TIM_PWM_Start+0x208>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d018      	beq.n	800bc90 <HAL_TIM_PWM_Start+0x1a8>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a24      	ldr	r2, [pc, #144]	; (800bcf4 <HAL_TIM_PWM_Start+0x20c>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d013      	beq.n	800bc90 <HAL_TIM_PWM_Start+0x1a8>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a22      	ldr	r2, [pc, #136]	; (800bcf8 <HAL_TIM_PWM_Start+0x210>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d00e      	beq.n	800bc90 <HAL_TIM_PWM_Start+0x1a8>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a1a      	ldr	r2, [pc, #104]	; (800bce0 <HAL_TIM_PWM_Start+0x1f8>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d009      	beq.n	800bc90 <HAL_TIM_PWM_Start+0x1a8>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a1e      	ldr	r2, [pc, #120]	; (800bcfc <HAL_TIM_PWM_Start+0x214>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d004      	beq.n	800bc90 <HAL_TIM_PWM_Start+0x1a8>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a16      	ldr	r2, [pc, #88]	; (800bce4 <HAL_TIM_PWM_Start+0x1fc>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d115      	bne.n	800bcbc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	689a      	ldr	r2, [r3, #8]
 800bc96:	4b1a      	ldr	r3, [pc, #104]	; (800bd00 <HAL_TIM_PWM_Start+0x218>)
 800bc98:	4013      	ands	r3, r2
 800bc9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2b06      	cmp	r3, #6
 800bca0:	d015      	beq.n	800bcce <HAL_TIM_PWM_Start+0x1e6>
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bca8:	d011      	beq.n	800bcce <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f042 0201 	orr.w	r2, r2, #1
 800bcb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcba:	e008      	b.n	800bcce <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f042 0201 	orr.w	r2, r2, #1
 800bcca:	601a      	str	r2, [r3, #0]
 800bccc:	e000      	b.n	800bcd0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	40010000 	.word	0x40010000
 800bce0:	40010400 	.word	0x40010400
 800bce4:	40014000 	.word	0x40014000
 800bce8:	40014400 	.word	0x40014400
 800bcec:	40014800 	.word	0x40014800
 800bcf0:	40000400 	.word	0x40000400
 800bcf4:	40000800 	.word	0x40000800
 800bcf8:	40000c00 	.word	0x40000c00
 800bcfc:	40001800 	.word	0x40001800
 800bd00:	00010007 	.word	0x00010007

0800bd04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b084      	sub	sp, #16
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	68db      	ldr	r3, [r3, #12]
 800bd12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	f003 0302 	and.w	r3, r3, #2
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d020      	beq.n	800bd68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f003 0302 	and.w	r3, r3, #2
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d01b      	beq.n	800bd68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f06f 0202 	mvn.w	r2, #2
 800bd38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	699b      	ldr	r3, [r3, #24]
 800bd46:	f003 0303 	and.w	r3, r3, #3
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d003      	beq.n	800bd56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 faec 	bl	800c32c <HAL_TIM_IC_CaptureCallback>
 800bd54:	e005      	b.n	800bd62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7f4 fd2a 	bl	80007b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 faef 	bl	800c340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	f003 0304 	and.w	r3, r3, #4
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d020      	beq.n	800bdb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f003 0304 	and.w	r3, r3, #4
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d01b      	beq.n	800bdb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f06f 0204 	mvn.w	r2, #4
 800bd84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2202      	movs	r2, #2
 800bd8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	699b      	ldr	r3, [r3, #24]
 800bd92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d003      	beq.n	800bda2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 fac6 	bl	800c32c <HAL_TIM_IC_CaptureCallback>
 800bda0:	e005      	b.n	800bdae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f7f4 fd04 	bl	80007b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 fac9 	bl	800c340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	f003 0308 	and.w	r3, r3, #8
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d020      	beq.n	800be00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f003 0308 	and.w	r3, r3, #8
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d01b      	beq.n	800be00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f06f 0208 	mvn.w	r2, #8
 800bdd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2204      	movs	r2, #4
 800bdd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	69db      	ldr	r3, [r3, #28]
 800bdde:	f003 0303 	and.w	r3, r3, #3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d003      	beq.n	800bdee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 faa0 	bl	800c32c <HAL_TIM_IC_CaptureCallback>
 800bdec:	e005      	b.n	800bdfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f7f4 fcde 	bl	80007b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 faa3 	bl	800c340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	f003 0310 	and.w	r3, r3, #16
 800be06:	2b00      	cmp	r3, #0
 800be08:	d020      	beq.n	800be4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f003 0310 	and.w	r3, r3, #16
 800be10:	2b00      	cmp	r3, #0
 800be12:	d01b      	beq.n	800be4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f06f 0210 	mvn.w	r2, #16
 800be1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2208      	movs	r2, #8
 800be22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	69db      	ldr	r3, [r3, #28]
 800be2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d003      	beq.n	800be3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fa7a 	bl	800c32c <HAL_TIM_IC_CaptureCallback>
 800be38:	e005      	b.n	800be46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f7f4 fcb8 	bl	80007b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fa7d 	bl	800c340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	f003 0301 	and.w	r3, r3, #1
 800be52:	2b00      	cmp	r3, #0
 800be54:	d00c      	beq.n	800be70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f003 0301 	and.w	r3, r3, #1
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d007      	beq.n	800be70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f06f 0201 	mvn.w	r2, #1
 800be68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f7f5 fe2a 	bl	8001ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be76:	2b00      	cmp	r3, #0
 800be78:	d104      	bne.n	800be84 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800be80:	2b00      	cmp	r3, #0
 800be82:	d00c      	beq.n	800be9e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d007      	beq.n	800be9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800be96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 ffbb 	bl	800ce14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00c      	beq.n	800bec2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d007      	beq.n	800bec2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800beba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 ffb3 	bl	800ce28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00c      	beq.n	800bee6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d007      	beq.n	800bee6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fa37 	bl	800c354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	f003 0320 	and.w	r3, r3, #32
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00c      	beq.n	800bf0a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f003 0320 	and.w	r3, r3, #32
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d007      	beq.n	800bf0a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f06f 0220 	mvn.w	r2, #32
 800bf02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 ff7b 	bl	800ce00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf0a:	bf00      	nop
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
	...

0800bf14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b086      	sub	sp, #24
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf20:	2300      	movs	r3, #0
 800bf22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d101      	bne.n	800bf32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bf2e:	2302      	movs	r3, #2
 800bf30:	e0ff      	b.n	800c132 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2201      	movs	r2, #1
 800bf36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2b14      	cmp	r3, #20
 800bf3e:	f200 80f0 	bhi.w	800c122 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bf42:	a201      	add	r2, pc, #4	; (adr r2, 800bf48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bf44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf48:	0800bf9d 	.word	0x0800bf9d
 800bf4c:	0800c123 	.word	0x0800c123
 800bf50:	0800c123 	.word	0x0800c123
 800bf54:	0800c123 	.word	0x0800c123
 800bf58:	0800bfdd 	.word	0x0800bfdd
 800bf5c:	0800c123 	.word	0x0800c123
 800bf60:	0800c123 	.word	0x0800c123
 800bf64:	0800c123 	.word	0x0800c123
 800bf68:	0800c01f 	.word	0x0800c01f
 800bf6c:	0800c123 	.word	0x0800c123
 800bf70:	0800c123 	.word	0x0800c123
 800bf74:	0800c123 	.word	0x0800c123
 800bf78:	0800c05f 	.word	0x0800c05f
 800bf7c:	0800c123 	.word	0x0800c123
 800bf80:	0800c123 	.word	0x0800c123
 800bf84:	0800c123 	.word	0x0800c123
 800bf88:	0800c0a1 	.word	0x0800c0a1
 800bf8c:	0800c123 	.word	0x0800c123
 800bf90:	0800c123 	.word	0x0800c123
 800bf94:	0800c123 	.word	0x0800c123
 800bf98:	0800c0e1 	.word	0x0800c0e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	68b9      	ldr	r1, [r7, #8]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 fa86 	bl	800c4b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	699a      	ldr	r2, [r3, #24]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f042 0208 	orr.w	r2, r2, #8
 800bfb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	699a      	ldr	r2, [r3, #24]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f022 0204 	bic.w	r2, r2, #4
 800bfc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	6999      	ldr	r1, [r3, #24]
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	691a      	ldr	r2, [r3, #16]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	430a      	orrs	r2, r1
 800bfd8:	619a      	str	r2, [r3, #24]
      break;
 800bfda:	e0a5      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	68b9      	ldr	r1, [r7, #8]
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f000 faf6 	bl	800c5d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	699a      	ldr	r2, [r3, #24]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	699a      	ldr	r2, [r3, #24]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	6999      	ldr	r1, [r3, #24]
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	021a      	lsls	r2, r3, #8
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	430a      	orrs	r2, r1
 800c01a:	619a      	str	r2, [r3, #24]
      break;
 800c01c:	e084      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68b9      	ldr	r1, [r7, #8]
 800c024:	4618      	mov	r0, r3
 800c026:	f000 fb5f 	bl	800c6e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	69da      	ldr	r2, [r3, #28]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f042 0208 	orr.w	r2, r2, #8
 800c038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	69da      	ldr	r2, [r3, #28]
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f022 0204 	bic.w	r2, r2, #4
 800c048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	69d9      	ldr	r1, [r3, #28]
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	691a      	ldr	r2, [r3, #16]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	430a      	orrs	r2, r1
 800c05a:	61da      	str	r2, [r3, #28]
      break;
 800c05c:	e064      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	68b9      	ldr	r1, [r7, #8]
 800c064:	4618      	mov	r0, r3
 800c066:	f000 fbc7 	bl	800c7f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	69da      	ldr	r2, [r3, #28]
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	69da      	ldr	r2, [r3, #28]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	69d9      	ldr	r1, [r3, #28]
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	691b      	ldr	r3, [r3, #16]
 800c094:	021a      	lsls	r2, r3, #8
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	430a      	orrs	r2, r1
 800c09c:	61da      	str	r2, [r3, #28]
      break;
 800c09e:	e043      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68b9      	ldr	r1, [r7, #8]
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 fc10 	bl	800c8cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f042 0208 	orr.w	r2, r2, #8
 800c0ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f022 0204 	bic.w	r2, r2, #4
 800c0ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	691a      	ldr	r2, [r3, #16]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	430a      	orrs	r2, r1
 800c0dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c0de:	e023      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	68b9      	ldr	r1, [r7, #8]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 fc54 	bl	800c994 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c10a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	021a      	lsls	r2, r3, #8
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	430a      	orrs	r2, r1
 800c11e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c120:	e002      	b.n	800c128 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c122:	2301      	movs	r3, #1
 800c124:	75fb      	strb	r3, [r7, #23]
      break;
 800c126:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2200      	movs	r2, #0
 800c12c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c130:	7dfb      	ldrb	r3, [r7, #23]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3718      	adds	r7, #24
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop

0800c13c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c146:	2300      	movs	r3, #0
 800c148:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c150:	2b01      	cmp	r3, #1
 800c152:	d101      	bne.n	800c158 <HAL_TIM_ConfigClockSource+0x1c>
 800c154:	2302      	movs	r3, #2
 800c156:	e0dc      	b.n	800c312 <HAL_TIM_ConfigClockSource+0x1d6>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2202      	movs	r2, #2
 800c164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	4b6a      	ldr	r3, [pc, #424]	; (800c31c <HAL_TIM_ConfigClockSource+0x1e0>)
 800c174:	4013      	ands	r3, r2
 800c176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c17e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	68ba      	ldr	r2, [r7, #8]
 800c186:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a64      	ldr	r2, [pc, #400]	; (800c320 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	f000 80a9 	beq.w	800c2e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c194:	4a62      	ldr	r2, [pc, #392]	; (800c320 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c196:	4293      	cmp	r3, r2
 800c198:	f200 80ae 	bhi.w	800c2f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c19c:	4a61      	ldr	r2, [pc, #388]	; (800c324 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	f000 80a1 	beq.w	800c2e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1a4:	4a5f      	ldr	r2, [pc, #380]	; (800c324 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	f200 80a6 	bhi.w	800c2f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1ac:	4a5e      	ldr	r2, [pc, #376]	; (800c328 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	f000 8099 	beq.w	800c2e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1b4:	4a5c      	ldr	r2, [pc, #368]	; (800c328 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	f200 809e 	bhi.w	800c2f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c1c0:	f000 8091 	beq.w	800c2e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c1c8:	f200 8096 	bhi.w	800c2f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1d0:	f000 8089 	beq.w	800c2e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c1d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1d8:	f200 808e 	bhi.w	800c2f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1e0:	d03e      	beq.n	800c260 <HAL_TIM_ConfigClockSource+0x124>
 800c1e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c1e6:	f200 8087 	bhi.w	800c2f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1ee:	f000 8086 	beq.w	800c2fe <HAL_TIM_ConfigClockSource+0x1c2>
 800c1f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1f6:	d87f      	bhi.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c1f8:	2b70      	cmp	r3, #112	; 0x70
 800c1fa:	d01a      	beq.n	800c232 <HAL_TIM_ConfigClockSource+0xf6>
 800c1fc:	2b70      	cmp	r3, #112	; 0x70
 800c1fe:	d87b      	bhi.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c200:	2b60      	cmp	r3, #96	; 0x60
 800c202:	d050      	beq.n	800c2a6 <HAL_TIM_ConfigClockSource+0x16a>
 800c204:	2b60      	cmp	r3, #96	; 0x60
 800c206:	d877      	bhi.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c208:	2b50      	cmp	r3, #80	; 0x50
 800c20a:	d03c      	beq.n	800c286 <HAL_TIM_ConfigClockSource+0x14a>
 800c20c:	2b50      	cmp	r3, #80	; 0x50
 800c20e:	d873      	bhi.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c210:	2b40      	cmp	r3, #64	; 0x40
 800c212:	d058      	beq.n	800c2c6 <HAL_TIM_ConfigClockSource+0x18a>
 800c214:	2b40      	cmp	r3, #64	; 0x40
 800c216:	d86f      	bhi.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c218:	2b30      	cmp	r3, #48	; 0x30
 800c21a:	d064      	beq.n	800c2e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c21c:	2b30      	cmp	r3, #48	; 0x30
 800c21e:	d86b      	bhi.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c220:	2b20      	cmp	r3, #32
 800c222:	d060      	beq.n	800c2e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c224:	2b20      	cmp	r3, #32
 800c226:	d867      	bhi.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d05c      	beq.n	800c2e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c22c:	2b10      	cmp	r3, #16
 800c22e:	d05a      	beq.n	800c2e6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c230:	e062      	b.n	800c2f8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6818      	ldr	r0, [r3, #0]
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	6899      	ldr	r1, [r3, #8]
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	685a      	ldr	r2, [r3, #4]
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	f000 fc8b 	bl	800cb5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	689b      	ldr	r3, [r3, #8]
 800c24c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c254:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	68ba      	ldr	r2, [r7, #8]
 800c25c:	609a      	str	r2, [r3, #8]
      break;
 800c25e:	e04f      	b.n	800c300 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6818      	ldr	r0, [r3, #0]
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	6899      	ldr	r1, [r3, #8]
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	685a      	ldr	r2, [r3, #4]
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	f000 fc74 	bl	800cb5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	689a      	ldr	r2, [r3, #8]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c282:	609a      	str	r2, [r3, #8]
      break;
 800c284:	e03c      	b.n	800c300 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6818      	ldr	r0, [r3, #0]
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	6859      	ldr	r1, [r3, #4]
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	461a      	mov	r2, r3
 800c294:	f000 fbe4 	bl	800ca60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2150      	movs	r1, #80	; 0x50
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 fc3e 	bl	800cb20 <TIM_ITRx_SetConfig>
      break;
 800c2a4:	e02c      	b.n	800c300 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6818      	ldr	r0, [r3, #0]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	6859      	ldr	r1, [r3, #4]
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	f000 fc03 	bl	800cabe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2160      	movs	r1, #96	; 0x60
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f000 fc2e 	bl	800cb20 <TIM_ITRx_SetConfig>
      break;
 800c2c4:	e01c      	b.n	800c300 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6818      	ldr	r0, [r3, #0]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	6859      	ldr	r1, [r3, #4]
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	f000 fbc4 	bl	800ca60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2140      	movs	r1, #64	; 0x40
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f000 fc1e 	bl	800cb20 <TIM_ITRx_SetConfig>
      break;
 800c2e4:	e00c      	b.n	800c300 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	f000 fc15 	bl	800cb20 <TIM_ITRx_SetConfig>
      break;
 800c2f6:	e003      	b.n	800c300 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c2fc:	e000      	b.n	800c300 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c2fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2201      	movs	r2, #1
 800c304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c310:	7bfb      	ldrb	r3, [r7, #15]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3710      	adds	r7, #16
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	ffceff88 	.word	0xffceff88
 800c320:	00100040 	.word	0x00100040
 800c324:	00100030 	.word	0x00100030
 800c328:	00100020 	.word	0x00100020

0800c32c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c334:	bf00      	nop
 800c336:	370c      	adds	r7, #12
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr

0800c340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c348:	bf00      	nop
 800c34a:	370c      	adds	r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c35c:	bf00      	nop
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c368:	b480      	push	{r7}
 800c36a:	b085      	sub	sp, #20
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4a46      	ldr	r2, [pc, #280]	; (800c494 <TIM_Base_SetConfig+0x12c>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d013      	beq.n	800c3a8 <TIM_Base_SetConfig+0x40>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c386:	d00f      	beq.n	800c3a8 <TIM_Base_SetConfig+0x40>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a43      	ldr	r2, [pc, #268]	; (800c498 <TIM_Base_SetConfig+0x130>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d00b      	beq.n	800c3a8 <TIM_Base_SetConfig+0x40>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a42      	ldr	r2, [pc, #264]	; (800c49c <TIM_Base_SetConfig+0x134>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d007      	beq.n	800c3a8 <TIM_Base_SetConfig+0x40>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a41      	ldr	r2, [pc, #260]	; (800c4a0 <TIM_Base_SetConfig+0x138>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d003      	beq.n	800c3a8 <TIM_Base_SetConfig+0x40>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a40      	ldr	r2, [pc, #256]	; (800c4a4 <TIM_Base_SetConfig+0x13c>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d108      	bne.n	800c3ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4a35      	ldr	r2, [pc, #212]	; (800c494 <TIM_Base_SetConfig+0x12c>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d01f      	beq.n	800c402 <TIM_Base_SetConfig+0x9a>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3c8:	d01b      	beq.n	800c402 <TIM_Base_SetConfig+0x9a>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4a32      	ldr	r2, [pc, #200]	; (800c498 <TIM_Base_SetConfig+0x130>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d017      	beq.n	800c402 <TIM_Base_SetConfig+0x9a>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4a31      	ldr	r2, [pc, #196]	; (800c49c <TIM_Base_SetConfig+0x134>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d013      	beq.n	800c402 <TIM_Base_SetConfig+0x9a>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4a30      	ldr	r2, [pc, #192]	; (800c4a0 <TIM_Base_SetConfig+0x138>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d00f      	beq.n	800c402 <TIM_Base_SetConfig+0x9a>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4a2f      	ldr	r2, [pc, #188]	; (800c4a4 <TIM_Base_SetConfig+0x13c>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d00b      	beq.n	800c402 <TIM_Base_SetConfig+0x9a>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	4a2e      	ldr	r2, [pc, #184]	; (800c4a8 <TIM_Base_SetConfig+0x140>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d007      	beq.n	800c402 <TIM_Base_SetConfig+0x9a>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4a2d      	ldr	r2, [pc, #180]	; (800c4ac <TIM_Base_SetConfig+0x144>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d003      	beq.n	800c402 <TIM_Base_SetConfig+0x9a>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	4a2c      	ldr	r2, [pc, #176]	; (800c4b0 <TIM_Base_SetConfig+0x148>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d108      	bne.n	800c414 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	4313      	orrs	r3, r2
 800c412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	695b      	ldr	r3, [r3, #20]
 800c41e:	4313      	orrs	r3, r2
 800c420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	68fa      	ldr	r2, [r7, #12]
 800c426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	689a      	ldr	r2, [r3, #8]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4a16      	ldr	r2, [pc, #88]	; (800c494 <TIM_Base_SetConfig+0x12c>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d00f      	beq.n	800c460 <TIM_Base_SetConfig+0xf8>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4a18      	ldr	r2, [pc, #96]	; (800c4a4 <TIM_Base_SetConfig+0x13c>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d00b      	beq.n	800c460 <TIM_Base_SetConfig+0xf8>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4a17      	ldr	r2, [pc, #92]	; (800c4a8 <TIM_Base_SetConfig+0x140>)
 800c44c:	4293      	cmp	r3, r2
 800c44e:	d007      	beq.n	800c460 <TIM_Base_SetConfig+0xf8>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4a16      	ldr	r2, [pc, #88]	; (800c4ac <TIM_Base_SetConfig+0x144>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d003      	beq.n	800c460 <TIM_Base_SetConfig+0xf8>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4a15      	ldr	r2, [pc, #84]	; (800c4b0 <TIM_Base_SetConfig+0x148>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d103      	bne.n	800c468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	691a      	ldr	r2, [r3, #16]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	691b      	ldr	r3, [r3, #16]
 800c472:	f003 0301 	and.w	r3, r3, #1
 800c476:	2b01      	cmp	r3, #1
 800c478:	d105      	bne.n	800c486 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	691b      	ldr	r3, [r3, #16]
 800c47e:	f023 0201 	bic.w	r2, r3, #1
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	611a      	str	r2, [r3, #16]
  }
}
 800c486:	bf00      	nop
 800c488:	3714      	adds	r7, #20
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr
 800c492:	bf00      	nop
 800c494:	40010000 	.word	0x40010000
 800c498:	40000400 	.word	0x40000400
 800c49c:	40000800 	.word	0x40000800
 800c4a0:	40000c00 	.word	0x40000c00
 800c4a4:	40010400 	.word	0x40010400
 800c4a8:	40014000 	.word	0x40014000
 800c4ac:	40014400 	.word	0x40014400
 800c4b0:	40014800 	.word	0x40014800

0800c4b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b087      	sub	sp, #28
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a1b      	ldr	r3, [r3, #32]
 800c4c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6a1b      	ldr	r3, [r3, #32]
 800c4c8:	f023 0201 	bic.w	r2, r3, #1
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	699b      	ldr	r3, [r3, #24]
 800c4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c4dc:	68fa      	ldr	r2, [r7, #12]
 800c4de:	4b37      	ldr	r3, [pc, #220]	; (800c5bc <TIM_OC1_SetConfig+0x108>)
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f023 0303 	bic.w	r3, r3, #3
 800c4ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	f023 0302 	bic.w	r3, r3, #2
 800c4fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	697a      	ldr	r2, [r7, #20]
 800c504:	4313      	orrs	r3, r2
 800c506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	4a2d      	ldr	r2, [pc, #180]	; (800c5c0 <TIM_OC1_SetConfig+0x10c>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d00f      	beq.n	800c530 <TIM_OC1_SetConfig+0x7c>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4a2c      	ldr	r2, [pc, #176]	; (800c5c4 <TIM_OC1_SetConfig+0x110>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d00b      	beq.n	800c530 <TIM_OC1_SetConfig+0x7c>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4a2b      	ldr	r2, [pc, #172]	; (800c5c8 <TIM_OC1_SetConfig+0x114>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d007      	beq.n	800c530 <TIM_OC1_SetConfig+0x7c>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4a2a      	ldr	r2, [pc, #168]	; (800c5cc <TIM_OC1_SetConfig+0x118>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d003      	beq.n	800c530 <TIM_OC1_SetConfig+0x7c>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4a29      	ldr	r2, [pc, #164]	; (800c5d0 <TIM_OC1_SetConfig+0x11c>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d10c      	bne.n	800c54a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	f023 0308 	bic.w	r3, r3, #8
 800c536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	697a      	ldr	r2, [r7, #20]
 800c53e:	4313      	orrs	r3, r2
 800c540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c542:	697b      	ldr	r3, [r7, #20]
 800c544:	f023 0304 	bic.w	r3, r3, #4
 800c548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4a1c      	ldr	r2, [pc, #112]	; (800c5c0 <TIM_OC1_SetConfig+0x10c>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d00f      	beq.n	800c572 <TIM_OC1_SetConfig+0xbe>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4a1b      	ldr	r2, [pc, #108]	; (800c5c4 <TIM_OC1_SetConfig+0x110>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d00b      	beq.n	800c572 <TIM_OC1_SetConfig+0xbe>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4a1a      	ldr	r2, [pc, #104]	; (800c5c8 <TIM_OC1_SetConfig+0x114>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d007      	beq.n	800c572 <TIM_OC1_SetConfig+0xbe>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4a19      	ldr	r2, [pc, #100]	; (800c5cc <TIM_OC1_SetConfig+0x118>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d003      	beq.n	800c572 <TIM_OC1_SetConfig+0xbe>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a18      	ldr	r2, [pc, #96]	; (800c5d0 <TIM_OC1_SetConfig+0x11c>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d111      	bne.n	800c596 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	695b      	ldr	r3, [r3, #20]
 800c586:	693a      	ldr	r2, [r7, #16]
 800c588:	4313      	orrs	r3, r2
 800c58a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	699b      	ldr	r3, [r3, #24]
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	4313      	orrs	r3, r2
 800c594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	693a      	ldr	r2, [r7, #16]
 800c59a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	68fa      	ldr	r2, [r7, #12]
 800c5a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	685a      	ldr	r2, [r3, #4]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	621a      	str	r2, [r3, #32]
}
 800c5b0:	bf00      	nop
 800c5b2:	371c      	adds	r7, #28
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	fffeff8f 	.word	0xfffeff8f
 800c5c0:	40010000 	.word	0x40010000
 800c5c4:	40010400 	.word	0x40010400
 800c5c8:	40014000 	.word	0x40014000
 800c5cc:	40014400 	.word	0x40014400
 800c5d0:	40014800 	.word	0x40014800

0800c5d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b087      	sub	sp, #28
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6a1b      	ldr	r3, [r3, #32]
 800c5e8:	f023 0210 	bic.w	r2, r3, #16
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	699b      	ldr	r3, [r3, #24]
 800c5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	4b34      	ldr	r3, [pc, #208]	; (800c6d0 <TIM_OC2_SetConfig+0xfc>)
 800c600:	4013      	ands	r3, r2
 800c602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c60a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	021b      	lsls	r3, r3, #8
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	4313      	orrs	r3, r2
 800c616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	f023 0320 	bic.w	r3, r3, #32
 800c61e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	011b      	lsls	r3, r3, #4
 800c626:	697a      	ldr	r2, [r7, #20]
 800c628:	4313      	orrs	r3, r2
 800c62a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a29      	ldr	r2, [pc, #164]	; (800c6d4 <TIM_OC2_SetConfig+0x100>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d003      	beq.n	800c63c <TIM_OC2_SetConfig+0x68>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a28      	ldr	r2, [pc, #160]	; (800c6d8 <TIM_OC2_SetConfig+0x104>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d10d      	bne.n	800c658 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	011b      	lsls	r3, r3, #4
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c656:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a1e      	ldr	r2, [pc, #120]	; (800c6d4 <TIM_OC2_SetConfig+0x100>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d00f      	beq.n	800c680 <TIM_OC2_SetConfig+0xac>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4a1d      	ldr	r2, [pc, #116]	; (800c6d8 <TIM_OC2_SetConfig+0x104>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d00b      	beq.n	800c680 <TIM_OC2_SetConfig+0xac>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4a1c      	ldr	r2, [pc, #112]	; (800c6dc <TIM_OC2_SetConfig+0x108>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d007      	beq.n	800c680 <TIM_OC2_SetConfig+0xac>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	4a1b      	ldr	r2, [pc, #108]	; (800c6e0 <TIM_OC2_SetConfig+0x10c>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d003      	beq.n	800c680 <TIM_OC2_SetConfig+0xac>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4a1a      	ldr	r2, [pc, #104]	; (800c6e4 <TIM_OC2_SetConfig+0x110>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d113      	bne.n	800c6a8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c686:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c68e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	695b      	ldr	r3, [r3, #20]
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	693a      	ldr	r2, [r7, #16]
 800c698:	4313      	orrs	r3, r2
 800c69a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	699b      	ldr	r3, [r3, #24]
 800c6a0:	009b      	lsls	r3, r3, #2
 800c6a2:	693a      	ldr	r2, [r7, #16]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	693a      	ldr	r2, [r7, #16]
 800c6ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	68fa      	ldr	r2, [r7, #12]
 800c6b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	685a      	ldr	r2, [r3, #4]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	697a      	ldr	r2, [r7, #20]
 800c6c0:	621a      	str	r2, [r3, #32]
}
 800c6c2:	bf00      	nop
 800c6c4:	371c      	adds	r7, #28
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr
 800c6ce:	bf00      	nop
 800c6d0:	feff8fff 	.word	0xfeff8fff
 800c6d4:	40010000 	.word	0x40010000
 800c6d8:	40010400 	.word	0x40010400
 800c6dc:	40014000 	.word	0x40014000
 800c6e0:	40014400 	.word	0x40014400
 800c6e4:	40014800 	.word	0x40014800

0800c6e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b087      	sub	sp, #28
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6a1b      	ldr	r3, [r3, #32]
 800c6f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6a1b      	ldr	r3, [r3, #32]
 800c6fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	69db      	ldr	r3, [r3, #28]
 800c70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	4b33      	ldr	r3, [pc, #204]	; (800c7e0 <TIM_OC3_SetConfig+0xf8>)
 800c714:	4013      	ands	r3, r2
 800c716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f023 0303 	bic.w	r3, r3, #3
 800c71e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	68fa      	ldr	r2, [r7, #12]
 800c726:	4313      	orrs	r3, r2
 800c728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	689b      	ldr	r3, [r3, #8]
 800c736:	021b      	lsls	r3, r3, #8
 800c738:	697a      	ldr	r2, [r7, #20]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	4a28      	ldr	r2, [pc, #160]	; (800c7e4 <TIM_OC3_SetConfig+0xfc>)
 800c742:	4293      	cmp	r3, r2
 800c744:	d003      	beq.n	800c74e <TIM_OC3_SetConfig+0x66>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4a27      	ldr	r2, [pc, #156]	; (800c7e8 <TIM_OC3_SetConfig+0x100>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d10d      	bne.n	800c76a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	021b      	lsls	r3, r3, #8
 800c75c:	697a      	ldr	r2, [r7, #20]
 800c75e:	4313      	orrs	r3, r2
 800c760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4a1d      	ldr	r2, [pc, #116]	; (800c7e4 <TIM_OC3_SetConfig+0xfc>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d00f      	beq.n	800c792 <TIM_OC3_SetConfig+0xaa>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	4a1c      	ldr	r2, [pc, #112]	; (800c7e8 <TIM_OC3_SetConfig+0x100>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d00b      	beq.n	800c792 <TIM_OC3_SetConfig+0xaa>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	4a1b      	ldr	r2, [pc, #108]	; (800c7ec <TIM_OC3_SetConfig+0x104>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d007      	beq.n	800c792 <TIM_OC3_SetConfig+0xaa>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	4a1a      	ldr	r2, [pc, #104]	; (800c7f0 <TIM_OC3_SetConfig+0x108>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d003      	beq.n	800c792 <TIM_OC3_SetConfig+0xaa>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	4a19      	ldr	r2, [pc, #100]	; (800c7f4 <TIM_OC3_SetConfig+0x10c>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d113      	bne.n	800c7ba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	695b      	ldr	r3, [r3, #20]
 800c7a6:	011b      	lsls	r3, r3, #4
 800c7a8:	693a      	ldr	r2, [r7, #16]
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	699b      	ldr	r3, [r3, #24]
 800c7b2:	011b      	lsls	r3, r3, #4
 800c7b4:	693a      	ldr	r2, [r7, #16]
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	693a      	ldr	r2, [r7, #16]
 800c7be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	685a      	ldr	r2, [r3, #4]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	697a      	ldr	r2, [r7, #20]
 800c7d2:	621a      	str	r2, [r3, #32]
}
 800c7d4:	bf00      	nop
 800c7d6:	371c      	adds	r7, #28
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr
 800c7e0:	fffeff8f 	.word	0xfffeff8f
 800c7e4:	40010000 	.word	0x40010000
 800c7e8:	40010400 	.word	0x40010400
 800c7ec:	40014000 	.word	0x40014000
 800c7f0:	40014400 	.word	0x40014400
 800c7f4:	40014800 	.word	0x40014800

0800c7f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b087      	sub	sp, #28
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a1b      	ldr	r3, [r3, #32]
 800c806:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6a1b      	ldr	r3, [r3, #32]
 800c80c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	69db      	ldr	r3, [r3, #28]
 800c81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	4b24      	ldr	r3, [pc, #144]	; (800c8b4 <TIM_OC4_SetConfig+0xbc>)
 800c824:	4013      	ands	r3, r2
 800c826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c82e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	021b      	lsls	r3, r3, #8
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	4313      	orrs	r3, r2
 800c83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	031b      	lsls	r3, r3, #12
 800c84a:	693a      	ldr	r2, [r7, #16]
 800c84c:	4313      	orrs	r3, r2
 800c84e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4a19      	ldr	r2, [pc, #100]	; (800c8b8 <TIM_OC4_SetConfig+0xc0>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d00f      	beq.n	800c878 <TIM_OC4_SetConfig+0x80>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4a18      	ldr	r2, [pc, #96]	; (800c8bc <TIM_OC4_SetConfig+0xc4>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d00b      	beq.n	800c878 <TIM_OC4_SetConfig+0x80>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4a17      	ldr	r2, [pc, #92]	; (800c8c0 <TIM_OC4_SetConfig+0xc8>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d007      	beq.n	800c878 <TIM_OC4_SetConfig+0x80>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4a16      	ldr	r2, [pc, #88]	; (800c8c4 <TIM_OC4_SetConfig+0xcc>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d003      	beq.n	800c878 <TIM_OC4_SetConfig+0x80>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a15      	ldr	r2, [pc, #84]	; (800c8c8 <TIM_OC4_SetConfig+0xd0>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d109      	bne.n	800c88c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c87e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	695b      	ldr	r3, [r3, #20]
 800c884:	019b      	lsls	r3, r3, #6
 800c886:	697a      	ldr	r2, [r7, #20]
 800c888:	4313      	orrs	r3, r2
 800c88a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	697a      	ldr	r2, [r7, #20]
 800c890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	685a      	ldr	r2, [r3, #4]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	693a      	ldr	r2, [r7, #16]
 800c8a4:	621a      	str	r2, [r3, #32]
}
 800c8a6:	bf00      	nop
 800c8a8:	371c      	adds	r7, #28
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	feff8fff 	.word	0xfeff8fff
 800c8b8:	40010000 	.word	0x40010000
 800c8bc:	40010400 	.word	0x40010400
 800c8c0:	40014000 	.word	0x40014000
 800c8c4:	40014400 	.word	0x40014400
 800c8c8:	40014800 	.word	0x40014800

0800c8cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b087      	sub	sp, #28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a1b      	ldr	r3, [r3, #32]
 800c8da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6a1b      	ldr	r3, [r3, #32]
 800c8e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	4b21      	ldr	r3, [pc, #132]	; (800c97c <TIM_OC5_SetConfig+0xb0>)
 800c8f8:	4013      	ands	r3, r2
 800c8fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	4313      	orrs	r3, r2
 800c904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c90c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	041b      	lsls	r3, r3, #16
 800c914:	693a      	ldr	r2, [r7, #16]
 800c916:	4313      	orrs	r3, r2
 800c918:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4a18      	ldr	r2, [pc, #96]	; (800c980 <TIM_OC5_SetConfig+0xb4>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d00f      	beq.n	800c942 <TIM_OC5_SetConfig+0x76>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	4a17      	ldr	r2, [pc, #92]	; (800c984 <TIM_OC5_SetConfig+0xb8>)
 800c926:	4293      	cmp	r3, r2
 800c928:	d00b      	beq.n	800c942 <TIM_OC5_SetConfig+0x76>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	4a16      	ldr	r2, [pc, #88]	; (800c988 <TIM_OC5_SetConfig+0xbc>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d007      	beq.n	800c942 <TIM_OC5_SetConfig+0x76>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4a15      	ldr	r2, [pc, #84]	; (800c98c <TIM_OC5_SetConfig+0xc0>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d003      	beq.n	800c942 <TIM_OC5_SetConfig+0x76>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	4a14      	ldr	r2, [pc, #80]	; (800c990 <TIM_OC5_SetConfig+0xc4>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d109      	bne.n	800c956 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c948:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	695b      	ldr	r3, [r3, #20]
 800c94e:	021b      	lsls	r3, r3, #8
 800c950:	697a      	ldr	r2, [r7, #20]
 800c952:	4313      	orrs	r3, r2
 800c954:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	697a      	ldr	r2, [r7, #20]
 800c95a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	685a      	ldr	r2, [r3, #4]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	621a      	str	r2, [r3, #32]
}
 800c970:	bf00      	nop
 800c972:	371c      	adds	r7, #28
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr
 800c97c:	fffeff8f 	.word	0xfffeff8f
 800c980:	40010000 	.word	0x40010000
 800c984:	40010400 	.word	0x40010400
 800c988:	40014000 	.word	0x40014000
 800c98c:	40014400 	.word	0x40014400
 800c990:	40014800 	.word	0x40014800

0800c994 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c994:	b480      	push	{r7}
 800c996:	b087      	sub	sp, #28
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6a1b      	ldr	r3, [r3, #32]
 800c9a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	4b22      	ldr	r3, [pc, #136]	; (800ca48 <TIM_OC6_SetConfig+0xb4>)
 800c9c0:	4013      	ands	r3, r2
 800c9c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	021b      	lsls	r3, r3, #8
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c9d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	051b      	lsls	r3, r3, #20
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a19      	ldr	r2, [pc, #100]	; (800ca4c <TIM_OC6_SetConfig+0xb8>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d00f      	beq.n	800ca0c <TIM_OC6_SetConfig+0x78>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	4a18      	ldr	r2, [pc, #96]	; (800ca50 <TIM_OC6_SetConfig+0xbc>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d00b      	beq.n	800ca0c <TIM_OC6_SetConfig+0x78>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	4a17      	ldr	r2, [pc, #92]	; (800ca54 <TIM_OC6_SetConfig+0xc0>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d007      	beq.n	800ca0c <TIM_OC6_SetConfig+0x78>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4a16      	ldr	r2, [pc, #88]	; (800ca58 <TIM_OC6_SetConfig+0xc4>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d003      	beq.n	800ca0c <TIM_OC6_SetConfig+0x78>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a15      	ldr	r2, [pc, #84]	; (800ca5c <TIM_OC6_SetConfig+0xc8>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d109      	bne.n	800ca20 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	695b      	ldr	r3, [r3, #20]
 800ca18:	029b      	lsls	r3, r3, #10
 800ca1a:	697a      	ldr	r2, [r7, #20]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	697a      	ldr	r2, [r7, #20]
 800ca24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	68fa      	ldr	r2, [r7, #12]
 800ca2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	685a      	ldr	r2, [r3, #4]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	693a      	ldr	r2, [r7, #16]
 800ca38:	621a      	str	r2, [r3, #32]
}
 800ca3a:	bf00      	nop
 800ca3c:	371c      	adds	r7, #28
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop
 800ca48:	feff8fff 	.word	0xfeff8fff
 800ca4c:	40010000 	.word	0x40010000
 800ca50:	40010400 	.word	0x40010400
 800ca54:	40014000 	.word	0x40014000
 800ca58:	40014400 	.word	0x40014400
 800ca5c:	40014800 	.word	0x40014800

0800ca60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b087      	sub	sp, #28
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6a1b      	ldr	r3, [r3, #32]
 800ca70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	6a1b      	ldr	r3, [r3, #32]
 800ca76:	f023 0201 	bic.w	r2, r3, #1
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	699b      	ldr	r3, [r3, #24]
 800ca82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	011b      	lsls	r3, r3, #4
 800ca90:	693a      	ldr	r2, [r7, #16]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	f023 030a 	bic.w	r3, r3, #10
 800ca9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ca9e:	697a      	ldr	r2, [r7, #20]
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	4313      	orrs	r3, r2
 800caa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	693a      	ldr	r2, [r7, #16]
 800caaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	697a      	ldr	r2, [r7, #20]
 800cab0:	621a      	str	r2, [r3, #32]
}
 800cab2:	bf00      	nop
 800cab4:	371c      	adds	r7, #28
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr

0800cabe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cabe:	b480      	push	{r7}
 800cac0:	b087      	sub	sp, #28
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	60f8      	str	r0, [r7, #12]
 800cac6:	60b9      	str	r1, [r7, #8]
 800cac8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	6a1b      	ldr	r3, [r3, #32]
 800cace:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	6a1b      	ldr	r3, [r3, #32]
 800cad4:	f023 0210 	bic.w	r2, r3, #16
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	699b      	ldr	r3, [r3, #24]
 800cae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cae8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	031b      	lsls	r3, r3, #12
 800caee:	693a      	ldr	r2, [r7, #16]
 800caf0:	4313      	orrs	r3, r2
 800caf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cafa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	011b      	lsls	r3, r3, #4
 800cb00:	697a      	ldr	r2, [r7, #20]
 800cb02:	4313      	orrs	r3, r2
 800cb04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	693a      	ldr	r2, [r7, #16]
 800cb0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	697a      	ldr	r2, [r7, #20]
 800cb10:	621a      	str	r2, [r3, #32]
}
 800cb12:	bf00      	nop
 800cb14:	371c      	adds	r7, #28
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
	...

0800cb20 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	4b09      	ldr	r3, [pc, #36]	; (800cb58 <TIM_ITRx_SetConfig+0x38>)
 800cb34:	4013      	ands	r3, r2
 800cb36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb38:	683a      	ldr	r2, [r7, #0]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	f043 0307 	orr.w	r3, r3, #7
 800cb42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	68fa      	ldr	r2, [r7, #12]
 800cb48:	609a      	str	r2, [r3, #8]
}
 800cb4a:	bf00      	nop
 800cb4c:	3714      	adds	r7, #20
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop
 800cb58:	ffcfff8f 	.word	0xffcfff8f

0800cb5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b087      	sub	sp, #28
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
 800cb68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	689b      	ldr	r3, [r3, #8]
 800cb6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cb76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	021a      	lsls	r2, r3, #8
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	431a      	orrs	r2, r3
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	697a      	ldr	r2, [r7, #20]
 800cb86:	4313      	orrs	r3, r2
 800cb88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	697a      	ldr	r2, [r7, #20]
 800cb8e:	609a      	str	r2, [r3, #8]
}
 800cb90:	bf00      	nop
 800cb92:	371c      	adds	r7, #28
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b087      	sub	sp, #28
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	f003 031f 	and.w	r3, r3, #31
 800cbae:	2201      	movs	r2, #1
 800cbb0:	fa02 f303 	lsl.w	r3, r2, r3
 800cbb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	6a1a      	ldr	r2, [r3, #32]
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	43db      	mvns	r3, r3
 800cbbe:	401a      	ands	r2, r3
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6a1a      	ldr	r2, [r3, #32]
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	f003 031f 	and.w	r3, r3, #31
 800cbce:	6879      	ldr	r1, [r7, #4]
 800cbd0:	fa01 f303 	lsl.w	r3, r1, r3
 800cbd4:	431a      	orrs	r2, r3
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	621a      	str	r2, [r3, #32]
}
 800cbda:	bf00      	nop
 800cbdc:	371c      	adds	r7, #28
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr
	...

0800cbe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b085      	sub	sp, #20
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d101      	bne.n	800cc00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cbfc:	2302      	movs	r3, #2
 800cbfe:	e06d      	b.n	800ccdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2201      	movs	r2, #1
 800cc04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2202      	movs	r2, #2
 800cc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	685b      	ldr	r3, [r3, #4]
 800cc16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	689b      	ldr	r3, [r3, #8]
 800cc1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4a30      	ldr	r2, [pc, #192]	; (800cce8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d004      	beq.n	800cc34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4a2f      	ldr	r2, [pc, #188]	; (800ccec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d108      	bne.n	800cc46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cc3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	68fa      	ldr	r2, [r7, #12]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	68fa      	ldr	r2, [r7, #12]
 800cc54:	4313      	orrs	r3, r2
 800cc56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	68fa      	ldr	r2, [r7, #12]
 800cc5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a20      	ldr	r2, [pc, #128]	; (800cce8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d022      	beq.n	800ccb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc72:	d01d      	beq.n	800ccb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a1d      	ldr	r2, [pc, #116]	; (800ccf0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d018      	beq.n	800ccb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a1c      	ldr	r2, [pc, #112]	; (800ccf4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d013      	beq.n	800ccb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a1a      	ldr	r2, [pc, #104]	; (800ccf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d00e      	beq.n	800ccb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a15      	ldr	r2, [pc, #84]	; (800ccec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d009      	beq.n	800ccb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a16      	ldr	r2, [pc, #88]	; (800ccfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d004      	beq.n	800ccb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a15      	ldr	r2, [pc, #84]	; (800cd00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d10c      	bne.n	800ccca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	68ba      	ldr	r2, [r7, #8]
 800ccc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2201      	movs	r2, #1
 800ccce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ccda:	2300      	movs	r3, #0
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3714      	adds	r7, #20
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr
 800cce8:	40010000 	.word	0x40010000
 800ccec:	40010400 	.word	0x40010400
 800ccf0:	40000400 	.word	0x40000400
 800ccf4:	40000800 	.word	0x40000800
 800ccf8:	40000c00 	.word	0x40000c00
 800ccfc:	40001800 	.word	0x40001800
 800cd00:	40014000 	.word	0x40014000

0800cd04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d101      	bne.n	800cd20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	e065      	b.n	800cdec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2201      	movs	r2, #1
 800cd24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	68db      	ldr	r3, [r3, #12]
 800cd32:	4313      	orrs	r3, r2
 800cd34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	4313      	orrs	r3, r2
 800cd42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	695b      	ldr	r3, [r3, #20]
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd86:	4313      	orrs	r3, r2
 800cd88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	699b      	ldr	r3, [r3, #24]
 800cd94:	041b      	lsls	r3, r3, #16
 800cd96:	4313      	orrs	r3, r2
 800cd98:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a16      	ldr	r2, [pc, #88]	; (800cdf8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d004      	beq.n	800cdae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a14      	ldr	r2, [pc, #80]	; (800cdfc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cdaa:	4293      	cmp	r3, r2
 800cdac:	d115      	bne.n	800cdda <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb8:	051b      	lsls	r3, r3, #20
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	69db      	ldr	r3, [r3, #28]
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	6a1b      	ldr	r3, [r3, #32]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	68fa      	ldr	r2, [r7, #12]
 800cde0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2200      	movs	r2, #0
 800cde6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cdea:	2300      	movs	r3, #0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3714      	adds	r7, #20
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr
 800cdf8:	40010000 	.word	0x40010000
 800cdfc:	40010400 	.word	0x40010400

0800ce00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce08:	bf00      	nop
 800ce0a:	370c      	adds	r7, #12
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce1c:	bf00      	nop
 800ce1e:	370c      	adds	r7, #12
 800ce20:	46bd      	mov	sp, r7
 800ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce26:	4770      	bx	lr

0800ce28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ce30:	bf00      	nop
 800ce32:	370c      	adds	r7, #12
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr

0800ce3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b082      	sub	sp, #8
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d101      	bne.n	800ce4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	e042      	b.n	800ced4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d106      	bne.n	800ce66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7f5 f9b3 	bl	80021cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2224      	movs	r2, #36	; 0x24
 800ce6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f022 0201 	bic.w	r2, r2, #1
 800ce7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d002      	beq.n	800ce8c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f001 fa44 	bl	800e314 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 fcd9 	bl	800d844 <UART_SetConfig>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d101      	bne.n	800ce9c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e01b      	b.n	800ced4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	685a      	ldr	r2, [r3, #4]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ceaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	689a      	ldr	r2, [r3, #8]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ceba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	681a      	ldr	r2, [r3, #0]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f042 0201 	orr.w	r2, r2, #1
 800ceca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f001 fac3 	bl	800e458 <UART_CheckIdleState>
 800ced2:	4603      	mov	r3, r0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3708      	adds	r7, #8
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b08a      	sub	sp, #40	; 0x28
 800cee0:	af02      	add	r7, sp, #8
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	603b      	str	r3, [r7, #0]
 800cee8:	4613      	mov	r3, r2
 800ceea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cef2:	2b20      	cmp	r3, #32
 800cef4:	d17b      	bne.n	800cfee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d002      	beq.n	800cf02 <HAL_UART_Transmit+0x26>
 800cefc:	88fb      	ldrh	r3, [r7, #6]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d101      	bne.n	800cf06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	e074      	b.n	800cff0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2221      	movs	r2, #33	; 0x21
 800cf12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cf16:	f7f5 fc93 	bl	8002840 <HAL_GetTick>
 800cf1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	88fa      	ldrh	r2, [r7, #6]
 800cf20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	88fa      	ldrh	r2, [r7, #6]
 800cf28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf34:	d108      	bne.n	800cf48 <HAL_UART_Transmit+0x6c>
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d104      	bne.n	800cf48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	61bb      	str	r3, [r7, #24]
 800cf46:	e003      	b.n	800cf50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cf50:	e030      	b.n	800cfb4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	9300      	str	r3, [sp, #0]
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	2180      	movs	r1, #128	; 0x80
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f001 fb25 	bl	800e5ac <UART_WaitOnFlagUntilTimeout>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d005      	beq.n	800cf74 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2220      	movs	r2, #32
 800cf6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800cf70:	2303      	movs	r3, #3
 800cf72:	e03d      	b.n	800cff0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d10b      	bne.n	800cf92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	881b      	ldrh	r3, [r3, #0]
 800cf7e:	461a      	mov	r2, r3
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	3302      	adds	r3, #2
 800cf8e:	61bb      	str	r3, [r7, #24]
 800cf90:	e007      	b.n	800cfa2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	781a      	ldrb	r2, [r3, #0]
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	3b01      	subs	r3, #1
 800cfac:	b29a      	uxth	r2, r3
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d1c8      	bne.n	800cf52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	2140      	movs	r1, #64	; 0x40
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	f001 faee 	bl	800e5ac <UART_WaitOnFlagUntilTimeout>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d005      	beq.n	800cfe2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2220      	movs	r2, #32
 800cfda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800cfde:	2303      	movs	r3, #3
 800cfe0:	e006      	b.n	800cff0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2220      	movs	r2, #32
 800cfe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	e000      	b.n	800cff0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cfee:	2302      	movs	r3, #2
  }
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3720      	adds	r7, #32
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b08a      	sub	sp, #40	; 0x28
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	4613      	mov	r3, r2
 800d004:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d00c:	2b20      	cmp	r3, #32
 800d00e:	d137      	bne.n	800d080 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d002      	beq.n	800d01c <HAL_UART_Receive_IT+0x24>
 800d016:	88fb      	ldrh	r3, [r7, #6]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d101      	bne.n	800d020 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d01c:	2301      	movs	r3, #1
 800d01e:	e030      	b.n	800d082 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	2200      	movs	r2, #0
 800d024:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4a18      	ldr	r2, [pc, #96]	; (800d08c <HAL_UART_Receive_IT+0x94>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d01f      	beq.n	800d070 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	685b      	ldr	r3, [r3, #4]
 800d036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d018      	beq.n	800d070 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	e853 3f00 	ldrex	r3, [r3]
 800d04a:	613b      	str	r3, [r7, #16]
   return(result);
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d052:	627b      	str	r3, [r7, #36]	; 0x24
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	461a      	mov	r2, r3
 800d05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d05c:	623b      	str	r3, [r7, #32]
 800d05e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d060:	69f9      	ldr	r1, [r7, #28]
 800d062:	6a3a      	ldr	r2, [r7, #32]
 800d064:	e841 2300 	strex	r3, r2, [r1]
 800d068:	61bb      	str	r3, [r7, #24]
   return(result);
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1e6      	bne.n	800d03e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d070:	88fb      	ldrh	r3, [r7, #6]
 800d072:	461a      	mov	r2, r3
 800d074:	68b9      	ldr	r1, [r7, #8]
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f001 fb06 	bl	800e688 <UART_Start_Receive_IT>
 800d07c:	4603      	mov	r3, r0
 800d07e:	e000      	b.n	800d082 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d080:	2302      	movs	r3, #2
  }
}
 800d082:	4618      	mov	r0, r3
 800d084:	3728      	adds	r7, #40	; 0x28
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	58000c00 	.word	0x58000c00

0800d090 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b0ba      	sub	sp, #232	; 0xe8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	69db      	ldr	r3, [r3, #28]
 800d09e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d0b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d0ba:	f640 030f 	movw	r3, #2063	; 0x80f
 800d0be:	4013      	ands	r3, r2
 800d0c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d0c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d11b      	bne.n	800d104 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d0cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0d0:	f003 0320 	and.w	r3, r3, #32
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d015      	beq.n	800d104 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d0d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0dc:	f003 0320 	and.w	r3, r3, #32
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d105      	bne.n	800d0f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d0e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d009      	beq.n	800d104 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f000 8377 	beq.w	800d7e8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	4798      	blx	r3
      }
      return;
 800d102:	e371      	b.n	800d7e8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f000 8123 	beq.w	800d354 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d10e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d112:	4b8d      	ldr	r3, [pc, #564]	; (800d348 <HAL_UART_IRQHandler+0x2b8>)
 800d114:	4013      	ands	r3, r2
 800d116:	2b00      	cmp	r3, #0
 800d118:	d106      	bne.n	800d128 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d11a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d11e:	4b8b      	ldr	r3, [pc, #556]	; (800d34c <HAL_UART_IRQHandler+0x2bc>)
 800d120:	4013      	ands	r3, r2
 800d122:	2b00      	cmp	r3, #0
 800d124:	f000 8116 	beq.w	800d354 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d12c:	f003 0301 	and.w	r3, r3, #1
 800d130:	2b00      	cmp	r3, #0
 800d132:	d011      	beq.n	800d158 <HAL_UART_IRQHandler+0xc8>
 800d134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00b      	beq.n	800d158 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2201      	movs	r2, #1
 800d146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d14e:	f043 0201 	orr.w	r2, r3, #1
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d15c:	f003 0302 	and.w	r3, r3, #2
 800d160:	2b00      	cmp	r3, #0
 800d162:	d011      	beq.n	800d188 <HAL_UART_IRQHandler+0xf8>
 800d164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d168:	f003 0301 	and.w	r3, r3, #1
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00b      	beq.n	800d188 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2202      	movs	r2, #2
 800d176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d17e:	f043 0204 	orr.w	r2, r3, #4
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d18c:	f003 0304 	and.w	r3, r3, #4
 800d190:	2b00      	cmp	r3, #0
 800d192:	d011      	beq.n	800d1b8 <HAL_UART_IRQHandler+0x128>
 800d194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d198:	f003 0301 	and.w	r3, r3, #1
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d00b      	beq.n	800d1b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2204      	movs	r2, #4
 800d1a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ae:	f043 0202 	orr.w	r2, r3, #2
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d1b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1bc:	f003 0308 	and.w	r3, r3, #8
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d017      	beq.n	800d1f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d1c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1c8:	f003 0320 	and.w	r3, r3, #32
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d105      	bne.n	800d1dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d1d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d1d4:	4b5c      	ldr	r3, [pc, #368]	; (800d348 <HAL_UART_IRQHandler+0x2b8>)
 800d1d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00b      	beq.n	800d1f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2208      	movs	r2, #8
 800d1e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ea:	f043 0208 	orr.w	r2, r3, #8
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d1f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d012      	beq.n	800d226 <HAL_UART_IRQHandler+0x196>
 800d200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d00c      	beq.n	800d226 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d21c:	f043 0220 	orr.w	r2, r3, #32
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f000 82dd 	beq.w	800d7ec <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d236:	f003 0320 	and.w	r3, r3, #32
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d013      	beq.n	800d266 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d23e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d242:	f003 0320 	and.w	r3, r3, #32
 800d246:	2b00      	cmp	r3, #0
 800d248:	d105      	bne.n	800d256 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d24a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d24e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d252:	2b00      	cmp	r3, #0
 800d254:	d007      	beq.n	800d266 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d003      	beq.n	800d266 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d26c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	689b      	ldr	r3, [r3, #8]
 800d276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d27a:	2b40      	cmp	r3, #64	; 0x40
 800d27c:	d005      	beq.n	800d28a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d27e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d282:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d286:	2b00      	cmp	r3, #0
 800d288:	d054      	beq.n	800d334 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f001 fb1e 	bl	800e8cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d29a:	2b40      	cmp	r3, #64	; 0x40
 800d29c:	d146      	bne.n	800d32c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	3308      	adds	r3, #8
 800d2a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d2ac:	e853 3f00 	ldrex	r3, [r3]
 800d2b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d2b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d2b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	3308      	adds	r3, #8
 800d2c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d2ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d2ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d2d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d2da:	e841 2300 	strex	r3, r2, [r1]
 800d2de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d2e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d1d9      	bne.n	800d29e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d017      	beq.n	800d324 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d2fa:	4a15      	ldr	r2, [pc, #84]	; (800d350 <HAL_UART_IRQHandler+0x2c0>)
 800d2fc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d304:	4618      	mov	r0, r3
 800d306:	f7f8 fa6f 	bl	80057e8 <HAL_DMA_Abort_IT>
 800d30a:	4603      	mov	r3, r0
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d019      	beq.n	800d344 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800d31e:	4610      	mov	r0, r2
 800d320:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d322:	e00f      	b.n	800d344 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 fa77 	bl	800d818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d32a:	e00b      	b.n	800d344 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 fa73 	bl	800d818 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d332:	e007      	b.n	800d344 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 fa6f 	bl	800d818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2200      	movs	r2, #0
 800d33e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800d342:	e253      	b.n	800d7ec <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d344:	bf00      	nop
    return;
 800d346:	e251      	b.n	800d7ec <HAL_UART_IRQHandler+0x75c>
 800d348:	10000001 	.word	0x10000001
 800d34c:	04000120 	.word	0x04000120
 800d350:	0800e999 	.word	0x0800e999

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d358:	2b01      	cmp	r3, #1
 800d35a:	f040 81e7 	bne.w	800d72c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d362:	f003 0310 	and.w	r3, r3, #16
 800d366:	2b00      	cmp	r3, #0
 800d368:	f000 81e0 	beq.w	800d72c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d36c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d370:	f003 0310 	and.w	r3, r3, #16
 800d374:	2b00      	cmp	r3, #0
 800d376:	f000 81d9 	beq.w	800d72c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2210      	movs	r2, #16
 800d380:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d38c:	2b40      	cmp	r3, #64	; 0x40
 800d38e:	f040 8151 	bne.w	800d634 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4a96      	ldr	r2, [pc, #600]	; (800d5f4 <HAL_UART_IRQHandler+0x564>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d068      	beq.n	800d472 <HAL_UART_IRQHandler+0x3e2>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a93      	ldr	r2, [pc, #588]	; (800d5f8 <HAL_UART_IRQHandler+0x568>)
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d061      	beq.n	800d472 <HAL_UART_IRQHandler+0x3e2>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4a91      	ldr	r2, [pc, #580]	; (800d5fc <HAL_UART_IRQHandler+0x56c>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d05a      	beq.n	800d472 <HAL_UART_IRQHandler+0x3e2>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a8e      	ldr	r2, [pc, #568]	; (800d600 <HAL_UART_IRQHandler+0x570>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d053      	beq.n	800d472 <HAL_UART_IRQHandler+0x3e2>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4a8c      	ldr	r2, [pc, #560]	; (800d604 <HAL_UART_IRQHandler+0x574>)
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	d04c      	beq.n	800d472 <HAL_UART_IRQHandler+0x3e2>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4a89      	ldr	r2, [pc, #548]	; (800d608 <HAL_UART_IRQHandler+0x578>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d045      	beq.n	800d472 <HAL_UART_IRQHandler+0x3e2>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4a87      	ldr	r2, [pc, #540]	; (800d60c <HAL_UART_IRQHandler+0x57c>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d03e      	beq.n	800d472 <HAL_UART_IRQHandler+0x3e2>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a84      	ldr	r2, [pc, #528]	; (800d610 <HAL_UART_IRQHandler+0x580>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d037      	beq.n	800d472 <HAL_UART_IRQHandler+0x3e2>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a82      	ldr	r2, [pc, #520]	; (800d614 <HAL_UART_IRQHandler+0x584>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d030      	beq.n	800d472 <HAL_UART_IRQHandler+0x3e2>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a7f      	ldr	r2, [pc, #508]	; (800d618 <HAL_UART_IRQHandler+0x588>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d029      	beq.n	800d472 <HAL_UART_IRQHandler+0x3e2>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a7d      	ldr	r2, [pc, #500]	; (800d61c <HAL_UART_IRQHandler+0x58c>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d022      	beq.n	800d472 <HAL_UART_IRQHandler+0x3e2>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a7a      	ldr	r2, [pc, #488]	; (800d620 <HAL_UART_IRQHandler+0x590>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d01b      	beq.n	800d472 <HAL_UART_IRQHandler+0x3e2>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	4a78      	ldr	r2, [pc, #480]	; (800d624 <HAL_UART_IRQHandler+0x594>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d014      	beq.n	800d472 <HAL_UART_IRQHandler+0x3e2>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a75      	ldr	r2, [pc, #468]	; (800d628 <HAL_UART_IRQHandler+0x598>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d00d      	beq.n	800d472 <HAL_UART_IRQHandler+0x3e2>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4a73      	ldr	r2, [pc, #460]	; (800d62c <HAL_UART_IRQHandler+0x59c>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d006      	beq.n	800d472 <HAL_UART_IRQHandler+0x3e2>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a70      	ldr	r2, [pc, #448]	; (800d630 <HAL_UART_IRQHandler+0x5a0>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d106      	bne.n	800d480 <HAL_UART_IRQHandler+0x3f0>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	e005      	b.n	800d48c <HAL_UART_IRQHandler+0x3fc>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d490:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d494:	2b00      	cmp	r3, #0
 800d496:	f000 81ab 	beq.w	800d7f0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d4a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	f080 81a3 	bcs.w	800d7f0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d4b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d4ba:	69db      	ldr	r3, [r3, #28]
 800d4bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4c0:	f000 8087 	beq.w	800d5d2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d4d0:	e853 3f00 	ldrex	r3, [r3]
 800d4d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d4d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d4ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d4f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d4fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d4fe:	e841 2300 	strex	r3, r2, [r1]
 800d502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d1da      	bne.n	800d4c4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	3308      	adds	r3, #8
 800d514:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d518:	e853 3f00 	ldrex	r3, [r3]
 800d51c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d51e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d520:	f023 0301 	bic.w	r3, r3, #1
 800d524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	3308      	adds	r3, #8
 800d52e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d532:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d536:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d538:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d53a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d53e:	e841 2300 	strex	r3, r2, [r1]
 800d542:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1e1      	bne.n	800d50e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	3308      	adds	r3, #8
 800d550:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d554:	e853 3f00 	ldrex	r3, [r3]
 800d558:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d55a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d55c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	3308      	adds	r3, #8
 800d56a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d56e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d570:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d572:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d574:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d576:	e841 2300 	strex	r3, r2, [r1]
 800d57a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d57c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d1e3      	bne.n	800d54a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2220      	movs	r2, #32
 800d586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d598:	e853 3f00 	ldrex	r3, [r3]
 800d59c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d59e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5a0:	f023 0310 	bic.w	r3, r3, #16
 800d5a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d5b2:	65bb      	str	r3, [r7, #88]	; 0x58
 800d5b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d5b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5ba:	e841 2300 	strex	r3, r2, [r1]
 800d5be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1e4      	bne.n	800d590 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7f7 fded 	bl	80051ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2202      	movs	r2, #2
 800d5d6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	1ad3      	subs	r3, r2, r3
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 f91d 	bl	800d82c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d5f2:	e0fd      	b.n	800d7f0 <HAL_UART_IRQHandler+0x760>
 800d5f4:	40020010 	.word	0x40020010
 800d5f8:	40020028 	.word	0x40020028
 800d5fc:	40020040 	.word	0x40020040
 800d600:	40020058 	.word	0x40020058
 800d604:	40020070 	.word	0x40020070
 800d608:	40020088 	.word	0x40020088
 800d60c:	400200a0 	.word	0x400200a0
 800d610:	400200b8 	.word	0x400200b8
 800d614:	40020410 	.word	0x40020410
 800d618:	40020428 	.word	0x40020428
 800d61c:	40020440 	.word	0x40020440
 800d620:	40020458 	.word	0x40020458
 800d624:	40020470 	.word	0x40020470
 800d628:	40020488 	.word	0x40020488
 800d62c:	400204a0 	.word	0x400204a0
 800d630:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d640:	b29b      	uxth	r3, r3
 800d642:	1ad3      	subs	r3, r2, r3
 800d644:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d64e:	b29b      	uxth	r3, r3
 800d650:	2b00      	cmp	r3, #0
 800d652:	f000 80cf 	beq.w	800d7f4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800d656:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	f000 80ca 	beq.w	800d7f4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d668:	e853 3f00 	ldrex	r3, [r3]
 800d66c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	461a      	mov	r2, r3
 800d67e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d682:	647b      	str	r3, [r7, #68]	; 0x44
 800d684:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d68a:	e841 2300 	strex	r3, r2, [r1]
 800d68e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1e4      	bne.n	800d660 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	3308      	adds	r3, #8
 800d69c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a0:	e853 3f00 	ldrex	r3, [r3]
 800d6a4:	623b      	str	r3, [r7, #32]
   return(result);
 800d6a6:	6a3a      	ldr	r2, [r7, #32]
 800d6a8:	4b55      	ldr	r3, [pc, #340]	; (800d800 <HAL_UART_IRQHandler+0x770>)
 800d6aa:	4013      	ands	r3, r2
 800d6ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	3308      	adds	r3, #8
 800d6b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d6ba:	633a      	str	r2, [r7, #48]	; 0x30
 800d6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6c2:	e841 2300 	strex	r3, r2, [r1]
 800d6c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1e3      	bne.n	800d696 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2220      	movs	r2, #32
 800d6d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	e853 3f00 	ldrex	r3, [r3]
 800d6ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f023 0310 	bic.w	r3, r3, #16
 800d6f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	461a      	mov	r2, r3
 800d700:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d704:	61fb      	str	r3, [r7, #28]
 800d706:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d708:	69b9      	ldr	r1, [r7, #24]
 800d70a:	69fa      	ldr	r2, [r7, #28]
 800d70c:	e841 2300 	strex	r3, r2, [r1]
 800d710:	617b      	str	r3, [r7, #20]
   return(result);
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1e4      	bne.n	800d6e2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2202      	movs	r2, #2
 800d71c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d71e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d722:	4619      	mov	r1, r3
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 f881 	bl	800d82c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d72a:	e063      	b.n	800d7f4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d72c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d734:	2b00      	cmp	r3, #0
 800d736:	d00e      	beq.n	800d756 <HAL_UART_IRQHandler+0x6c6>
 800d738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d73c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d740:	2b00      	cmp	r3, #0
 800d742:	d008      	beq.n	800d756 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d74c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f001 fe80 	bl	800f454 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d754:	e051      	b.n	800d7fa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d75a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d014      	beq.n	800d78c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d105      	bne.n	800d77a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d76e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d772:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d776:	2b00      	cmp	r3, #0
 800d778:	d008      	beq.n	800d78c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d03a      	beq.n	800d7f8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	4798      	blx	r3
    }
    return;
 800d78a:	e035      	b.n	800d7f8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d78c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d794:	2b00      	cmp	r3, #0
 800d796:	d009      	beq.n	800d7ac <HAL_UART_IRQHandler+0x71c>
 800d798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d003      	beq.n	800d7ac <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f001 f90d 	bl	800e9c4 <UART_EndTransmit_IT>
    return;
 800d7aa:	e026      	b.n	800d7fa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d7ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d009      	beq.n	800d7cc <HAL_UART_IRQHandler+0x73c>
 800d7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d003      	beq.n	800d7cc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f001 fe59 	bl	800f47c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7ca:	e016      	b.n	800d7fa <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d7cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d010      	beq.n	800d7fa <HAL_UART_IRQHandler+0x76a>
 800d7d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	da0c      	bge.n	800d7fa <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f001 fe41 	bl	800f468 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7e6:	e008      	b.n	800d7fa <HAL_UART_IRQHandler+0x76a>
      return;
 800d7e8:	bf00      	nop
 800d7ea:	e006      	b.n	800d7fa <HAL_UART_IRQHandler+0x76a>
    return;
 800d7ec:	bf00      	nop
 800d7ee:	e004      	b.n	800d7fa <HAL_UART_IRQHandler+0x76a>
      return;
 800d7f0:	bf00      	nop
 800d7f2:	e002      	b.n	800d7fa <HAL_UART_IRQHandler+0x76a>
      return;
 800d7f4:	bf00      	nop
 800d7f6:	e000      	b.n	800d7fa <HAL_UART_IRQHandler+0x76a>
    return;
 800d7f8:	bf00      	nop
  }
}
 800d7fa:	37e8      	adds	r7, #232	; 0xe8
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	effffffe 	.word	0xeffffffe

0800d804 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d80c:	bf00      	nop
 800d80e:	370c      	adds	r7, #12
 800d810:	46bd      	mov	sp, r7
 800d812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d816:	4770      	bx	lr

0800d818 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d818:	b480      	push	{r7}
 800d81a:	b083      	sub	sp, #12
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d820:	bf00      	nop
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	460b      	mov	r3, r1
 800d836:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d838:	bf00      	nop
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d848:	b092      	sub	sp, #72	; 0x48
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d84e:	2300      	movs	r3, #0
 800d850:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	689a      	ldr	r2, [r3, #8]
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	431a      	orrs	r2, r3
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	695b      	ldr	r3, [r3, #20]
 800d862:	431a      	orrs	r2, r3
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	69db      	ldr	r3, [r3, #28]
 800d868:	4313      	orrs	r3, r2
 800d86a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	4bbe      	ldr	r3, [pc, #760]	; (800db6c <UART_SetConfig+0x328>)
 800d874:	4013      	ands	r3, r2
 800d876:	697a      	ldr	r2, [r7, #20]
 800d878:	6812      	ldr	r2, [r2, #0]
 800d87a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d87c:	430b      	orrs	r3, r1
 800d87e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	68da      	ldr	r2, [r3, #12]
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	430a      	orrs	r2, r1
 800d894:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	699b      	ldr	r3, [r3, #24]
 800d89a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4ab3      	ldr	r2, [pc, #716]	; (800db70 <UART_SetConfig+0x32c>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d004      	beq.n	800d8b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	6a1b      	ldr	r3, [r3, #32]
 800d8aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	689a      	ldr	r2, [r3, #8]
 800d8b6:	4baf      	ldr	r3, [pc, #700]	; (800db74 <UART_SetConfig+0x330>)
 800d8b8:	4013      	ands	r3, r2
 800d8ba:	697a      	ldr	r2, [r7, #20]
 800d8bc:	6812      	ldr	r2, [r2, #0]
 800d8be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d8c0:	430b      	orrs	r3, r1
 800d8c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ca:	f023 010f 	bic.w	r1, r3, #15
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	430a      	orrs	r2, r1
 800d8d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4aa6      	ldr	r2, [pc, #664]	; (800db78 <UART_SetConfig+0x334>)
 800d8e0:	4293      	cmp	r3, r2
 800d8e2:	d177      	bne.n	800d9d4 <UART_SetConfig+0x190>
 800d8e4:	4ba5      	ldr	r3, [pc, #660]	; (800db7c <UART_SetConfig+0x338>)
 800d8e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d8ec:	2b28      	cmp	r3, #40	; 0x28
 800d8ee:	d86d      	bhi.n	800d9cc <UART_SetConfig+0x188>
 800d8f0:	a201      	add	r2, pc, #4	; (adr r2, 800d8f8 <UART_SetConfig+0xb4>)
 800d8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f6:	bf00      	nop
 800d8f8:	0800d99d 	.word	0x0800d99d
 800d8fc:	0800d9cd 	.word	0x0800d9cd
 800d900:	0800d9cd 	.word	0x0800d9cd
 800d904:	0800d9cd 	.word	0x0800d9cd
 800d908:	0800d9cd 	.word	0x0800d9cd
 800d90c:	0800d9cd 	.word	0x0800d9cd
 800d910:	0800d9cd 	.word	0x0800d9cd
 800d914:	0800d9cd 	.word	0x0800d9cd
 800d918:	0800d9a5 	.word	0x0800d9a5
 800d91c:	0800d9cd 	.word	0x0800d9cd
 800d920:	0800d9cd 	.word	0x0800d9cd
 800d924:	0800d9cd 	.word	0x0800d9cd
 800d928:	0800d9cd 	.word	0x0800d9cd
 800d92c:	0800d9cd 	.word	0x0800d9cd
 800d930:	0800d9cd 	.word	0x0800d9cd
 800d934:	0800d9cd 	.word	0x0800d9cd
 800d938:	0800d9ad 	.word	0x0800d9ad
 800d93c:	0800d9cd 	.word	0x0800d9cd
 800d940:	0800d9cd 	.word	0x0800d9cd
 800d944:	0800d9cd 	.word	0x0800d9cd
 800d948:	0800d9cd 	.word	0x0800d9cd
 800d94c:	0800d9cd 	.word	0x0800d9cd
 800d950:	0800d9cd 	.word	0x0800d9cd
 800d954:	0800d9cd 	.word	0x0800d9cd
 800d958:	0800d9b5 	.word	0x0800d9b5
 800d95c:	0800d9cd 	.word	0x0800d9cd
 800d960:	0800d9cd 	.word	0x0800d9cd
 800d964:	0800d9cd 	.word	0x0800d9cd
 800d968:	0800d9cd 	.word	0x0800d9cd
 800d96c:	0800d9cd 	.word	0x0800d9cd
 800d970:	0800d9cd 	.word	0x0800d9cd
 800d974:	0800d9cd 	.word	0x0800d9cd
 800d978:	0800d9bd 	.word	0x0800d9bd
 800d97c:	0800d9cd 	.word	0x0800d9cd
 800d980:	0800d9cd 	.word	0x0800d9cd
 800d984:	0800d9cd 	.word	0x0800d9cd
 800d988:	0800d9cd 	.word	0x0800d9cd
 800d98c:	0800d9cd 	.word	0x0800d9cd
 800d990:	0800d9cd 	.word	0x0800d9cd
 800d994:	0800d9cd 	.word	0x0800d9cd
 800d998:	0800d9c5 	.word	0x0800d9c5
 800d99c:	2301      	movs	r3, #1
 800d99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9a2:	e222      	b.n	800ddea <UART_SetConfig+0x5a6>
 800d9a4:	2304      	movs	r3, #4
 800d9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9aa:	e21e      	b.n	800ddea <UART_SetConfig+0x5a6>
 800d9ac:	2308      	movs	r3, #8
 800d9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9b2:	e21a      	b.n	800ddea <UART_SetConfig+0x5a6>
 800d9b4:	2310      	movs	r3, #16
 800d9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ba:	e216      	b.n	800ddea <UART_SetConfig+0x5a6>
 800d9bc:	2320      	movs	r3, #32
 800d9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9c2:	e212      	b.n	800ddea <UART_SetConfig+0x5a6>
 800d9c4:	2340      	movs	r3, #64	; 0x40
 800d9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ca:	e20e      	b.n	800ddea <UART_SetConfig+0x5a6>
 800d9cc:	2380      	movs	r3, #128	; 0x80
 800d9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9d2:	e20a      	b.n	800ddea <UART_SetConfig+0x5a6>
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a69      	ldr	r2, [pc, #420]	; (800db80 <UART_SetConfig+0x33c>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d130      	bne.n	800da40 <UART_SetConfig+0x1fc>
 800d9de:	4b67      	ldr	r3, [pc, #412]	; (800db7c <UART_SetConfig+0x338>)
 800d9e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9e2:	f003 0307 	and.w	r3, r3, #7
 800d9e6:	2b05      	cmp	r3, #5
 800d9e8:	d826      	bhi.n	800da38 <UART_SetConfig+0x1f4>
 800d9ea:	a201      	add	r2, pc, #4	; (adr r2, 800d9f0 <UART_SetConfig+0x1ac>)
 800d9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9f0:	0800da09 	.word	0x0800da09
 800d9f4:	0800da11 	.word	0x0800da11
 800d9f8:	0800da19 	.word	0x0800da19
 800d9fc:	0800da21 	.word	0x0800da21
 800da00:	0800da29 	.word	0x0800da29
 800da04:	0800da31 	.word	0x0800da31
 800da08:	2300      	movs	r3, #0
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0e:	e1ec      	b.n	800ddea <UART_SetConfig+0x5a6>
 800da10:	2304      	movs	r3, #4
 800da12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da16:	e1e8      	b.n	800ddea <UART_SetConfig+0x5a6>
 800da18:	2308      	movs	r3, #8
 800da1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da1e:	e1e4      	b.n	800ddea <UART_SetConfig+0x5a6>
 800da20:	2310      	movs	r3, #16
 800da22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da26:	e1e0      	b.n	800ddea <UART_SetConfig+0x5a6>
 800da28:	2320      	movs	r3, #32
 800da2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da2e:	e1dc      	b.n	800ddea <UART_SetConfig+0x5a6>
 800da30:	2340      	movs	r3, #64	; 0x40
 800da32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da36:	e1d8      	b.n	800ddea <UART_SetConfig+0x5a6>
 800da38:	2380      	movs	r3, #128	; 0x80
 800da3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da3e:	e1d4      	b.n	800ddea <UART_SetConfig+0x5a6>
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4a4f      	ldr	r2, [pc, #316]	; (800db84 <UART_SetConfig+0x340>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d130      	bne.n	800daac <UART_SetConfig+0x268>
 800da4a:	4b4c      	ldr	r3, [pc, #304]	; (800db7c <UART_SetConfig+0x338>)
 800da4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da4e:	f003 0307 	and.w	r3, r3, #7
 800da52:	2b05      	cmp	r3, #5
 800da54:	d826      	bhi.n	800daa4 <UART_SetConfig+0x260>
 800da56:	a201      	add	r2, pc, #4	; (adr r2, 800da5c <UART_SetConfig+0x218>)
 800da58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da5c:	0800da75 	.word	0x0800da75
 800da60:	0800da7d 	.word	0x0800da7d
 800da64:	0800da85 	.word	0x0800da85
 800da68:	0800da8d 	.word	0x0800da8d
 800da6c:	0800da95 	.word	0x0800da95
 800da70:	0800da9d 	.word	0x0800da9d
 800da74:	2300      	movs	r3, #0
 800da76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da7a:	e1b6      	b.n	800ddea <UART_SetConfig+0x5a6>
 800da7c:	2304      	movs	r3, #4
 800da7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da82:	e1b2      	b.n	800ddea <UART_SetConfig+0x5a6>
 800da84:	2308      	movs	r3, #8
 800da86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da8a:	e1ae      	b.n	800ddea <UART_SetConfig+0x5a6>
 800da8c:	2310      	movs	r3, #16
 800da8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da92:	e1aa      	b.n	800ddea <UART_SetConfig+0x5a6>
 800da94:	2320      	movs	r3, #32
 800da96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da9a:	e1a6      	b.n	800ddea <UART_SetConfig+0x5a6>
 800da9c:	2340      	movs	r3, #64	; 0x40
 800da9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daa2:	e1a2      	b.n	800ddea <UART_SetConfig+0x5a6>
 800daa4:	2380      	movs	r3, #128	; 0x80
 800daa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daaa:	e19e      	b.n	800ddea <UART_SetConfig+0x5a6>
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a35      	ldr	r2, [pc, #212]	; (800db88 <UART_SetConfig+0x344>)
 800dab2:	4293      	cmp	r3, r2
 800dab4:	d130      	bne.n	800db18 <UART_SetConfig+0x2d4>
 800dab6:	4b31      	ldr	r3, [pc, #196]	; (800db7c <UART_SetConfig+0x338>)
 800dab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daba:	f003 0307 	and.w	r3, r3, #7
 800dabe:	2b05      	cmp	r3, #5
 800dac0:	d826      	bhi.n	800db10 <UART_SetConfig+0x2cc>
 800dac2:	a201      	add	r2, pc, #4	; (adr r2, 800dac8 <UART_SetConfig+0x284>)
 800dac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac8:	0800dae1 	.word	0x0800dae1
 800dacc:	0800dae9 	.word	0x0800dae9
 800dad0:	0800daf1 	.word	0x0800daf1
 800dad4:	0800daf9 	.word	0x0800daf9
 800dad8:	0800db01 	.word	0x0800db01
 800dadc:	0800db09 	.word	0x0800db09
 800dae0:	2300      	movs	r3, #0
 800dae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dae6:	e180      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dae8:	2304      	movs	r3, #4
 800daea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daee:	e17c      	b.n	800ddea <UART_SetConfig+0x5a6>
 800daf0:	2308      	movs	r3, #8
 800daf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daf6:	e178      	b.n	800ddea <UART_SetConfig+0x5a6>
 800daf8:	2310      	movs	r3, #16
 800dafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafe:	e174      	b.n	800ddea <UART_SetConfig+0x5a6>
 800db00:	2320      	movs	r3, #32
 800db02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db06:	e170      	b.n	800ddea <UART_SetConfig+0x5a6>
 800db08:	2340      	movs	r3, #64	; 0x40
 800db0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db0e:	e16c      	b.n	800ddea <UART_SetConfig+0x5a6>
 800db10:	2380      	movs	r3, #128	; 0x80
 800db12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db16:	e168      	b.n	800ddea <UART_SetConfig+0x5a6>
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a1b      	ldr	r2, [pc, #108]	; (800db8c <UART_SetConfig+0x348>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d142      	bne.n	800dba8 <UART_SetConfig+0x364>
 800db22:	4b16      	ldr	r3, [pc, #88]	; (800db7c <UART_SetConfig+0x338>)
 800db24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db26:	f003 0307 	and.w	r3, r3, #7
 800db2a:	2b05      	cmp	r3, #5
 800db2c:	d838      	bhi.n	800dba0 <UART_SetConfig+0x35c>
 800db2e:	a201      	add	r2, pc, #4	; (adr r2, 800db34 <UART_SetConfig+0x2f0>)
 800db30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db34:	0800db4d 	.word	0x0800db4d
 800db38:	0800db55 	.word	0x0800db55
 800db3c:	0800db5d 	.word	0x0800db5d
 800db40:	0800db65 	.word	0x0800db65
 800db44:	0800db91 	.word	0x0800db91
 800db48:	0800db99 	.word	0x0800db99
 800db4c:	2300      	movs	r3, #0
 800db4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db52:	e14a      	b.n	800ddea <UART_SetConfig+0x5a6>
 800db54:	2304      	movs	r3, #4
 800db56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db5a:	e146      	b.n	800ddea <UART_SetConfig+0x5a6>
 800db5c:	2308      	movs	r3, #8
 800db5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db62:	e142      	b.n	800ddea <UART_SetConfig+0x5a6>
 800db64:	2310      	movs	r3, #16
 800db66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db6a:	e13e      	b.n	800ddea <UART_SetConfig+0x5a6>
 800db6c:	cfff69f3 	.word	0xcfff69f3
 800db70:	58000c00 	.word	0x58000c00
 800db74:	11fff4ff 	.word	0x11fff4ff
 800db78:	40011000 	.word	0x40011000
 800db7c:	58024400 	.word	0x58024400
 800db80:	40004400 	.word	0x40004400
 800db84:	40004800 	.word	0x40004800
 800db88:	40004c00 	.word	0x40004c00
 800db8c:	40005000 	.word	0x40005000
 800db90:	2320      	movs	r3, #32
 800db92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db96:	e128      	b.n	800ddea <UART_SetConfig+0x5a6>
 800db98:	2340      	movs	r3, #64	; 0x40
 800db9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db9e:	e124      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dba0:	2380      	movs	r3, #128	; 0x80
 800dba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dba6:	e120      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4acb      	ldr	r2, [pc, #812]	; (800dedc <UART_SetConfig+0x698>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d176      	bne.n	800dca0 <UART_SetConfig+0x45c>
 800dbb2:	4bcb      	ldr	r3, [pc, #812]	; (800dee0 <UART_SetConfig+0x69c>)
 800dbb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dbba:	2b28      	cmp	r3, #40	; 0x28
 800dbbc:	d86c      	bhi.n	800dc98 <UART_SetConfig+0x454>
 800dbbe:	a201      	add	r2, pc, #4	; (adr r2, 800dbc4 <UART_SetConfig+0x380>)
 800dbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbc4:	0800dc69 	.word	0x0800dc69
 800dbc8:	0800dc99 	.word	0x0800dc99
 800dbcc:	0800dc99 	.word	0x0800dc99
 800dbd0:	0800dc99 	.word	0x0800dc99
 800dbd4:	0800dc99 	.word	0x0800dc99
 800dbd8:	0800dc99 	.word	0x0800dc99
 800dbdc:	0800dc99 	.word	0x0800dc99
 800dbe0:	0800dc99 	.word	0x0800dc99
 800dbe4:	0800dc71 	.word	0x0800dc71
 800dbe8:	0800dc99 	.word	0x0800dc99
 800dbec:	0800dc99 	.word	0x0800dc99
 800dbf0:	0800dc99 	.word	0x0800dc99
 800dbf4:	0800dc99 	.word	0x0800dc99
 800dbf8:	0800dc99 	.word	0x0800dc99
 800dbfc:	0800dc99 	.word	0x0800dc99
 800dc00:	0800dc99 	.word	0x0800dc99
 800dc04:	0800dc79 	.word	0x0800dc79
 800dc08:	0800dc99 	.word	0x0800dc99
 800dc0c:	0800dc99 	.word	0x0800dc99
 800dc10:	0800dc99 	.word	0x0800dc99
 800dc14:	0800dc99 	.word	0x0800dc99
 800dc18:	0800dc99 	.word	0x0800dc99
 800dc1c:	0800dc99 	.word	0x0800dc99
 800dc20:	0800dc99 	.word	0x0800dc99
 800dc24:	0800dc81 	.word	0x0800dc81
 800dc28:	0800dc99 	.word	0x0800dc99
 800dc2c:	0800dc99 	.word	0x0800dc99
 800dc30:	0800dc99 	.word	0x0800dc99
 800dc34:	0800dc99 	.word	0x0800dc99
 800dc38:	0800dc99 	.word	0x0800dc99
 800dc3c:	0800dc99 	.word	0x0800dc99
 800dc40:	0800dc99 	.word	0x0800dc99
 800dc44:	0800dc89 	.word	0x0800dc89
 800dc48:	0800dc99 	.word	0x0800dc99
 800dc4c:	0800dc99 	.word	0x0800dc99
 800dc50:	0800dc99 	.word	0x0800dc99
 800dc54:	0800dc99 	.word	0x0800dc99
 800dc58:	0800dc99 	.word	0x0800dc99
 800dc5c:	0800dc99 	.word	0x0800dc99
 800dc60:	0800dc99 	.word	0x0800dc99
 800dc64:	0800dc91 	.word	0x0800dc91
 800dc68:	2301      	movs	r3, #1
 800dc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6e:	e0bc      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dc70:	2304      	movs	r3, #4
 800dc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc76:	e0b8      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dc78:	2308      	movs	r3, #8
 800dc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7e:	e0b4      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dc80:	2310      	movs	r3, #16
 800dc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc86:	e0b0      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dc88:	2320      	movs	r3, #32
 800dc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc8e:	e0ac      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dc90:	2340      	movs	r3, #64	; 0x40
 800dc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc96:	e0a8      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dc98:	2380      	movs	r3, #128	; 0x80
 800dc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc9e:	e0a4      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a8f      	ldr	r2, [pc, #572]	; (800dee4 <UART_SetConfig+0x6a0>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d130      	bne.n	800dd0c <UART_SetConfig+0x4c8>
 800dcaa:	4b8d      	ldr	r3, [pc, #564]	; (800dee0 <UART_SetConfig+0x69c>)
 800dcac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcae:	f003 0307 	and.w	r3, r3, #7
 800dcb2:	2b05      	cmp	r3, #5
 800dcb4:	d826      	bhi.n	800dd04 <UART_SetConfig+0x4c0>
 800dcb6:	a201      	add	r2, pc, #4	; (adr r2, 800dcbc <UART_SetConfig+0x478>)
 800dcb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcbc:	0800dcd5 	.word	0x0800dcd5
 800dcc0:	0800dcdd 	.word	0x0800dcdd
 800dcc4:	0800dce5 	.word	0x0800dce5
 800dcc8:	0800dced 	.word	0x0800dced
 800dccc:	0800dcf5 	.word	0x0800dcf5
 800dcd0:	0800dcfd 	.word	0x0800dcfd
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcda:	e086      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dcdc:	2304      	movs	r3, #4
 800dcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dce2:	e082      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dce4:	2308      	movs	r3, #8
 800dce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcea:	e07e      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dcec:	2310      	movs	r3, #16
 800dcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcf2:	e07a      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dcf4:	2320      	movs	r3, #32
 800dcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcfa:	e076      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dcfc:	2340      	movs	r3, #64	; 0x40
 800dcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd02:	e072      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dd04:	2380      	movs	r3, #128	; 0x80
 800dd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd0a:	e06e      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a75      	ldr	r2, [pc, #468]	; (800dee8 <UART_SetConfig+0x6a4>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d130      	bne.n	800dd78 <UART_SetConfig+0x534>
 800dd16:	4b72      	ldr	r3, [pc, #456]	; (800dee0 <UART_SetConfig+0x69c>)
 800dd18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd1a:	f003 0307 	and.w	r3, r3, #7
 800dd1e:	2b05      	cmp	r3, #5
 800dd20:	d826      	bhi.n	800dd70 <UART_SetConfig+0x52c>
 800dd22:	a201      	add	r2, pc, #4	; (adr r2, 800dd28 <UART_SetConfig+0x4e4>)
 800dd24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd28:	0800dd41 	.word	0x0800dd41
 800dd2c:	0800dd49 	.word	0x0800dd49
 800dd30:	0800dd51 	.word	0x0800dd51
 800dd34:	0800dd59 	.word	0x0800dd59
 800dd38:	0800dd61 	.word	0x0800dd61
 800dd3c:	0800dd69 	.word	0x0800dd69
 800dd40:	2300      	movs	r3, #0
 800dd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd46:	e050      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dd48:	2304      	movs	r3, #4
 800dd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd4e:	e04c      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dd50:	2308      	movs	r3, #8
 800dd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd56:	e048      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dd58:	2310      	movs	r3, #16
 800dd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd5e:	e044      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dd60:	2320      	movs	r3, #32
 800dd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd66:	e040      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dd68:	2340      	movs	r3, #64	; 0x40
 800dd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6e:	e03c      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dd70:	2380      	movs	r3, #128	; 0x80
 800dd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd76:	e038      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a5b      	ldr	r2, [pc, #364]	; (800deec <UART_SetConfig+0x6a8>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d130      	bne.n	800dde4 <UART_SetConfig+0x5a0>
 800dd82:	4b57      	ldr	r3, [pc, #348]	; (800dee0 <UART_SetConfig+0x69c>)
 800dd84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd86:	f003 0307 	and.w	r3, r3, #7
 800dd8a:	2b05      	cmp	r3, #5
 800dd8c:	d826      	bhi.n	800dddc <UART_SetConfig+0x598>
 800dd8e:	a201      	add	r2, pc, #4	; (adr r2, 800dd94 <UART_SetConfig+0x550>)
 800dd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd94:	0800ddad 	.word	0x0800ddad
 800dd98:	0800ddb5 	.word	0x0800ddb5
 800dd9c:	0800ddbd 	.word	0x0800ddbd
 800dda0:	0800ddc5 	.word	0x0800ddc5
 800dda4:	0800ddcd 	.word	0x0800ddcd
 800dda8:	0800ddd5 	.word	0x0800ddd5
 800ddac:	2302      	movs	r3, #2
 800ddae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddb2:	e01a      	b.n	800ddea <UART_SetConfig+0x5a6>
 800ddb4:	2304      	movs	r3, #4
 800ddb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddba:	e016      	b.n	800ddea <UART_SetConfig+0x5a6>
 800ddbc:	2308      	movs	r3, #8
 800ddbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddc2:	e012      	b.n	800ddea <UART_SetConfig+0x5a6>
 800ddc4:	2310      	movs	r3, #16
 800ddc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddca:	e00e      	b.n	800ddea <UART_SetConfig+0x5a6>
 800ddcc:	2320      	movs	r3, #32
 800ddce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd2:	e00a      	b.n	800ddea <UART_SetConfig+0x5a6>
 800ddd4:	2340      	movs	r3, #64	; 0x40
 800ddd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddda:	e006      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dddc:	2380      	movs	r3, #128	; 0x80
 800ddde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde2:	e002      	b.n	800ddea <UART_SetConfig+0x5a6>
 800dde4:	2380      	movs	r3, #128	; 0x80
 800dde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	4a3f      	ldr	r2, [pc, #252]	; (800deec <UART_SetConfig+0x6a8>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	f040 80f8 	bne.w	800dfe6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ddf6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ddfa:	2b20      	cmp	r3, #32
 800ddfc:	dc46      	bgt.n	800de8c <UART_SetConfig+0x648>
 800ddfe:	2b02      	cmp	r3, #2
 800de00:	f2c0 8082 	blt.w	800df08 <UART_SetConfig+0x6c4>
 800de04:	3b02      	subs	r3, #2
 800de06:	2b1e      	cmp	r3, #30
 800de08:	d87e      	bhi.n	800df08 <UART_SetConfig+0x6c4>
 800de0a:	a201      	add	r2, pc, #4	; (adr r2, 800de10 <UART_SetConfig+0x5cc>)
 800de0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de10:	0800de93 	.word	0x0800de93
 800de14:	0800df09 	.word	0x0800df09
 800de18:	0800de9b 	.word	0x0800de9b
 800de1c:	0800df09 	.word	0x0800df09
 800de20:	0800df09 	.word	0x0800df09
 800de24:	0800df09 	.word	0x0800df09
 800de28:	0800deab 	.word	0x0800deab
 800de2c:	0800df09 	.word	0x0800df09
 800de30:	0800df09 	.word	0x0800df09
 800de34:	0800df09 	.word	0x0800df09
 800de38:	0800df09 	.word	0x0800df09
 800de3c:	0800df09 	.word	0x0800df09
 800de40:	0800df09 	.word	0x0800df09
 800de44:	0800df09 	.word	0x0800df09
 800de48:	0800debb 	.word	0x0800debb
 800de4c:	0800df09 	.word	0x0800df09
 800de50:	0800df09 	.word	0x0800df09
 800de54:	0800df09 	.word	0x0800df09
 800de58:	0800df09 	.word	0x0800df09
 800de5c:	0800df09 	.word	0x0800df09
 800de60:	0800df09 	.word	0x0800df09
 800de64:	0800df09 	.word	0x0800df09
 800de68:	0800df09 	.word	0x0800df09
 800de6c:	0800df09 	.word	0x0800df09
 800de70:	0800df09 	.word	0x0800df09
 800de74:	0800df09 	.word	0x0800df09
 800de78:	0800df09 	.word	0x0800df09
 800de7c:	0800df09 	.word	0x0800df09
 800de80:	0800df09 	.word	0x0800df09
 800de84:	0800df09 	.word	0x0800df09
 800de88:	0800defb 	.word	0x0800defb
 800de8c:	2b40      	cmp	r3, #64	; 0x40
 800de8e:	d037      	beq.n	800df00 <UART_SetConfig+0x6bc>
 800de90:	e03a      	b.n	800df08 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800de92:	f7fc fceb 	bl	800a86c <HAL_RCCEx_GetD3PCLK1Freq>
 800de96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de98:	e03c      	b.n	800df14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7fc fcfa 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dea8:	e034      	b.n	800df14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800deaa:	f107 0318 	add.w	r3, r7, #24
 800deae:	4618      	mov	r0, r3
 800deb0:	f7fc fe46 	bl	800ab40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800deb8:	e02c      	b.n	800df14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800deba:	4b09      	ldr	r3, [pc, #36]	; (800dee0 <UART_SetConfig+0x69c>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f003 0320 	and.w	r3, r3, #32
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d016      	beq.n	800def4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dec6:	4b06      	ldr	r3, [pc, #24]	; (800dee0 <UART_SetConfig+0x69c>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	08db      	lsrs	r3, r3, #3
 800decc:	f003 0303 	and.w	r3, r3, #3
 800ded0:	4a07      	ldr	r2, [pc, #28]	; (800def0 <UART_SetConfig+0x6ac>)
 800ded2:	fa22 f303 	lsr.w	r3, r2, r3
 800ded6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ded8:	e01c      	b.n	800df14 <UART_SetConfig+0x6d0>
 800deda:	bf00      	nop
 800dedc:	40011400 	.word	0x40011400
 800dee0:	58024400 	.word	0x58024400
 800dee4:	40007800 	.word	0x40007800
 800dee8:	40007c00 	.word	0x40007c00
 800deec:	58000c00 	.word	0x58000c00
 800def0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800def4:	4b9d      	ldr	r3, [pc, #628]	; (800e16c <UART_SetConfig+0x928>)
 800def6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800def8:	e00c      	b.n	800df14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800defa:	4b9d      	ldr	r3, [pc, #628]	; (800e170 <UART_SetConfig+0x92c>)
 800defc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800defe:	e009      	b.n	800df14 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df06:	e005      	b.n	800df14 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800df08:	2300      	movs	r3, #0
 800df0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800df0c:	2301      	movs	r3, #1
 800df0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800df12:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800df14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df16:	2b00      	cmp	r3, #0
 800df18:	f000 81de 	beq.w	800e2d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df20:	4a94      	ldr	r2, [pc, #592]	; (800e174 <UART_SetConfig+0x930>)
 800df22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df26:	461a      	mov	r2, r3
 800df28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800df2e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df30:	697b      	ldr	r3, [r7, #20]
 800df32:	685a      	ldr	r2, [r3, #4]
 800df34:	4613      	mov	r3, r2
 800df36:	005b      	lsls	r3, r3, #1
 800df38:	4413      	add	r3, r2
 800df3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d305      	bcc.n	800df4c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df48:	429a      	cmp	r2, r3
 800df4a:	d903      	bls.n	800df54 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800df4c:	2301      	movs	r3, #1
 800df4e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800df52:	e1c1      	b.n	800e2d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df56:	2200      	movs	r2, #0
 800df58:	60bb      	str	r3, [r7, #8]
 800df5a:	60fa      	str	r2, [r7, #12]
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df60:	4a84      	ldr	r2, [pc, #528]	; (800e174 <UART_SetConfig+0x930>)
 800df62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df66:	b29b      	uxth	r3, r3
 800df68:	2200      	movs	r2, #0
 800df6a:	603b      	str	r3, [r7, #0]
 800df6c:	607a      	str	r2, [r7, #4]
 800df6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800df76:	f7f2 fa03 	bl	8000380 <__aeabi_uldivmod>
 800df7a:	4602      	mov	r2, r0
 800df7c:	460b      	mov	r3, r1
 800df7e:	4610      	mov	r0, r2
 800df80:	4619      	mov	r1, r3
 800df82:	f04f 0200 	mov.w	r2, #0
 800df86:	f04f 0300 	mov.w	r3, #0
 800df8a:	020b      	lsls	r3, r1, #8
 800df8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800df90:	0202      	lsls	r2, r0, #8
 800df92:	6979      	ldr	r1, [r7, #20]
 800df94:	6849      	ldr	r1, [r1, #4]
 800df96:	0849      	lsrs	r1, r1, #1
 800df98:	2000      	movs	r0, #0
 800df9a:	460c      	mov	r4, r1
 800df9c:	4605      	mov	r5, r0
 800df9e:	eb12 0804 	adds.w	r8, r2, r4
 800dfa2:	eb43 0905 	adc.w	r9, r3, r5
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	469a      	mov	sl, r3
 800dfae:	4693      	mov	fp, r2
 800dfb0:	4652      	mov	r2, sl
 800dfb2:	465b      	mov	r3, fp
 800dfb4:	4640      	mov	r0, r8
 800dfb6:	4649      	mov	r1, r9
 800dfb8:	f7f2 f9e2 	bl	8000380 <__aeabi_uldivmod>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	4613      	mov	r3, r2
 800dfc2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dfca:	d308      	bcc.n	800dfde <UART_SetConfig+0x79a>
 800dfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfd2:	d204      	bcs.n	800dfde <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfda:	60da      	str	r2, [r3, #12]
 800dfdc:	e17c      	b.n	800e2d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dfe4:	e178      	b.n	800e2d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	69db      	ldr	r3, [r3, #28]
 800dfea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfee:	f040 80c5 	bne.w	800e17c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dff2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dff6:	2b20      	cmp	r3, #32
 800dff8:	dc48      	bgt.n	800e08c <UART_SetConfig+0x848>
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	db7b      	blt.n	800e0f6 <UART_SetConfig+0x8b2>
 800dffe:	2b20      	cmp	r3, #32
 800e000:	d879      	bhi.n	800e0f6 <UART_SetConfig+0x8b2>
 800e002:	a201      	add	r2, pc, #4	; (adr r2, 800e008 <UART_SetConfig+0x7c4>)
 800e004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e008:	0800e093 	.word	0x0800e093
 800e00c:	0800e09b 	.word	0x0800e09b
 800e010:	0800e0f7 	.word	0x0800e0f7
 800e014:	0800e0f7 	.word	0x0800e0f7
 800e018:	0800e0a3 	.word	0x0800e0a3
 800e01c:	0800e0f7 	.word	0x0800e0f7
 800e020:	0800e0f7 	.word	0x0800e0f7
 800e024:	0800e0f7 	.word	0x0800e0f7
 800e028:	0800e0b3 	.word	0x0800e0b3
 800e02c:	0800e0f7 	.word	0x0800e0f7
 800e030:	0800e0f7 	.word	0x0800e0f7
 800e034:	0800e0f7 	.word	0x0800e0f7
 800e038:	0800e0f7 	.word	0x0800e0f7
 800e03c:	0800e0f7 	.word	0x0800e0f7
 800e040:	0800e0f7 	.word	0x0800e0f7
 800e044:	0800e0f7 	.word	0x0800e0f7
 800e048:	0800e0c3 	.word	0x0800e0c3
 800e04c:	0800e0f7 	.word	0x0800e0f7
 800e050:	0800e0f7 	.word	0x0800e0f7
 800e054:	0800e0f7 	.word	0x0800e0f7
 800e058:	0800e0f7 	.word	0x0800e0f7
 800e05c:	0800e0f7 	.word	0x0800e0f7
 800e060:	0800e0f7 	.word	0x0800e0f7
 800e064:	0800e0f7 	.word	0x0800e0f7
 800e068:	0800e0f7 	.word	0x0800e0f7
 800e06c:	0800e0f7 	.word	0x0800e0f7
 800e070:	0800e0f7 	.word	0x0800e0f7
 800e074:	0800e0f7 	.word	0x0800e0f7
 800e078:	0800e0f7 	.word	0x0800e0f7
 800e07c:	0800e0f7 	.word	0x0800e0f7
 800e080:	0800e0f7 	.word	0x0800e0f7
 800e084:	0800e0f7 	.word	0x0800e0f7
 800e088:	0800e0e9 	.word	0x0800e0e9
 800e08c:	2b40      	cmp	r3, #64	; 0x40
 800e08e:	d02e      	beq.n	800e0ee <UART_SetConfig+0x8aa>
 800e090:	e031      	b.n	800e0f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e092:	f7fa fbf3 	bl	800887c <HAL_RCC_GetPCLK1Freq>
 800e096:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e098:	e033      	b.n	800e102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e09a:	f7fa fc05 	bl	80088a8 <HAL_RCC_GetPCLK2Freq>
 800e09e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e0a0:	e02f      	b.n	800e102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fc fbf6 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0b0:	e027      	b.n	800e102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0b2:	f107 0318 	add.w	r3, r7, #24
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7fc fd42 	bl	800ab40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0c0:	e01f      	b.n	800e102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0c2:	4b2d      	ldr	r3, [pc, #180]	; (800e178 <UART_SetConfig+0x934>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f003 0320 	and.w	r3, r3, #32
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d009      	beq.n	800e0e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e0ce:	4b2a      	ldr	r3, [pc, #168]	; (800e178 <UART_SetConfig+0x934>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	08db      	lsrs	r3, r3, #3
 800e0d4:	f003 0303 	and.w	r3, r3, #3
 800e0d8:	4a24      	ldr	r2, [pc, #144]	; (800e16c <UART_SetConfig+0x928>)
 800e0da:	fa22 f303 	lsr.w	r3, r2, r3
 800e0de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e0e0:	e00f      	b.n	800e102 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e0e2:	4b22      	ldr	r3, [pc, #136]	; (800e16c <UART_SetConfig+0x928>)
 800e0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0e6:	e00c      	b.n	800e102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e0e8:	4b21      	ldr	r3, [pc, #132]	; (800e170 <UART_SetConfig+0x92c>)
 800e0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ec:	e009      	b.n	800e102 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0f4:	e005      	b.n	800e102 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e100:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e104:	2b00      	cmp	r3, #0
 800e106:	f000 80e7 	beq.w	800e2d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10e:	4a19      	ldr	r2, [pc, #100]	; (800e174 <UART_SetConfig+0x930>)
 800e110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e114:	461a      	mov	r2, r3
 800e116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e118:	fbb3 f3f2 	udiv	r3, r3, r2
 800e11c:	005a      	lsls	r2, r3, #1
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	085b      	lsrs	r3, r3, #1
 800e124:	441a      	add	r2, r3
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e12e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e132:	2b0f      	cmp	r3, #15
 800e134:	d916      	bls.n	800e164 <UART_SetConfig+0x920>
 800e136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e13c:	d212      	bcs.n	800e164 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e140:	b29b      	uxth	r3, r3
 800e142:	f023 030f 	bic.w	r3, r3, #15
 800e146:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14a:	085b      	lsrs	r3, r3, #1
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	f003 0307 	and.w	r3, r3, #7
 800e152:	b29a      	uxth	r2, r3
 800e154:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e156:	4313      	orrs	r3, r2
 800e158:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e160:	60da      	str	r2, [r3, #12]
 800e162:	e0b9      	b.n	800e2d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e164:	2301      	movs	r3, #1
 800e166:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e16a:	e0b5      	b.n	800e2d8 <UART_SetConfig+0xa94>
 800e16c:	03d09000 	.word	0x03d09000
 800e170:	003d0900 	.word	0x003d0900
 800e174:	08013d88 	.word	0x08013d88
 800e178:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e17c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e180:	2b20      	cmp	r3, #32
 800e182:	dc49      	bgt.n	800e218 <UART_SetConfig+0x9d4>
 800e184:	2b00      	cmp	r3, #0
 800e186:	db7c      	blt.n	800e282 <UART_SetConfig+0xa3e>
 800e188:	2b20      	cmp	r3, #32
 800e18a:	d87a      	bhi.n	800e282 <UART_SetConfig+0xa3e>
 800e18c:	a201      	add	r2, pc, #4	; (adr r2, 800e194 <UART_SetConfig+0x950>)
 800e18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e192:	bf00      	nop
 800e194:	0800e21f 	.word	0x0800e21f
 800e198:	0800e227 	.word	0x0800e227
 800e19c:	0800e283 	.word	0x0800e283
 800e1a0:	0800e283 	.word	0x0800e283
 800e1a4:	0800e22f 	.word	0x0800e22f
 800e1a8:	0800e283 	.word	0x0800e283
 800e1ac:	0800e283 	.word	0x0800e283
 800e1b0:	0800e283 	.word	0x0800e283
 800e1b4:	0800e23f 	.word	0x0800e23f
 800e1b8:	0800e283 	.word	0x0800e283
 800e1bc:	0800e283 	.word	0x0800e283
 800e1c0:	0800e283 	.word	0x0800e283
 800e1c4:	0800e283 	.word	0x0800e283
 800e1c8:	0800e283 	.word	0x0800e283
 800e1cc:	0800e283 	.word	0x0800e283
 800e1d0:	0800e283 	.word	0x0800e283
 800e1d4:	0800e24f 	.word	0x0800e24f
 800e1d8:	0800e283 	.word	0x0800e283
 800e1dc:	0800e283 	.word	0x0800e283
 800e1e0:	0800e283 	.word	0x0800e283
 800e1e4:	0800e283 	.word	0x0800e283
 800e1e8:	0800e283 	.word	0x0800e283
 800e1ec:	0800e283 	.word	0x0800e283
 800e1f0:	0800e283 	.word	0x0800e283
 800e1f4:	0800e283 	.word	0x0800e283
 800e1f8:	0800e283 	.word	0x0800e283
 800e1fc:	0800e283 	.word	0x0800e283
 800e200:	0800e283 	.word	0x0800e283
 800e204:	0800e283 	.word	0x0800e283
 800e208:	0800e283 	.word	0x0800e283
 800e20c:	0800e283 	.word	0x0800e283
 800e210:	0800e283 	.word	0x0800e283
 800e214:	0800e275 	.word	0x0800e275
 800e218:	2b40      	cmp	r3, #64	; 0x40
 800e21a:	d02e      	beq.n	800e27a <UART_SetConfig+0xa36>
 800e21c:	e031      	b.n	800e282 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e21e:	f7fa fb2d 	bl	800887c <HAL_RCC_GetPCLK1Freq>
 800e222:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e224:	e033      	b.n	800e28e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e226:	f7fa fb3f 	bl	80088a8 <HAL_RCC_GetPCLK2Freq>
 800e22a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e22c:	e02f      	b.n	800e28e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e22e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e232:	4618      	mov	r0, r3
 800e234:	f7fc fb30 	bl	800a898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e23c:	e027      	b.n	800e28e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e23e:	f107 0318 	add.w	r3, r7, #24
 800e242:	4618      	mov	r0, r3
 800e244:	f7fc fc7c 	bl	800ab40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e24c:	e01f      	b.n	800e28e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e24e:	4b2d      	ldr	r3, [pc, #180]	; (800e304 <UART_SetConfig+0xac0>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f003 0320 	and.w	r3, r3, #32
 800e256:	2b00      	cmp	r3, #0
 800e258:	d009      	beq.n	800e26e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e25a:	4b2a      	ldr	r3, [pc, #168]	; (800e304 <UART_SetConfig+0xac0>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	08db      	lsrs	r3, r3, #3
 800e260:	f003 0303 	and.w	r3, r3, #3
 800e264:	4a28      	ldr	r2, [pc, #160]	; (800e308 <UART_SetConfig+0xac4>)
 800e266:	fa22 f303 	lsr.w	r3, r2, r3
 800e26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e26c:	e00f      	b.n	800e28e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e26e:	4b26      	ldr	r3, [pc, #152]	; (800e308 <UART_SetConfig+0xac4>)
 800e270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e272:	e00c      	b.n	800e28e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e274:	4b25      	ldr	r3, [pc, #148]	; (800e30c <UART_SetConfig+0xac8>)
 800e276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e278:	e009      	b.n	800e28e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e27a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e280:	e005      	b.n	800e28e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e282:	2300      	movs	r3, #0
 800e284:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e286:	2301      	movs	r3, #1
 800e288:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e28c:	bf00      	nop
    }

    if (pclk != 0U)
 800e28e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e290:	2b00      	cmp	r3, #0
 800e292:	d021      	beq.n	800e2d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e298:	4a1d      	ldr	r2, [pc, #116]	; (800e310 <UART_SetConfig+0xacc>)
 800e29a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e29e:	461a      	mov	r2, r3
 800e2a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	685b      	ldr	r3, [r3, #4]
 800e2aa:	085b      	lsrs	r3, r3, #1
 800e2ac:	441a      	add	r2, r3
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ba:	2b0f      	cmp	r3, #15
 800e2bc:	d909      	bls.n	800e2d2 <UART_SetConfig+0xa8e>
 800e2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2c4:	d205      	bcs.n	800e2d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c8:	b29a      	uxth	r2, r3
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	60da      	str	r2, [r3, #12]
 800e2d0:	e002      	b.n	800e2d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e2f4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3748      	adds	r7, #72	; 0x48
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e302:	bf00      	nop
 800e304:	58024400 	.word	0x58024400
 800e308:	03d09000 	.word	0x03d09000
 800e30c:	003d0900 	.word	0x003d0900
 800e310:	08013d88 	.word	0x08013d88

0800e314 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e320:	f003 0308 	and.w	r3, r3, #8
 800e324:	2b00      	cmp	r3, #0
 800e326:	d00a      	beq.n	800e33e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	430a      	orrs	r2, r1
 800e33c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e342:	f003 0301 	and.w	r3, r3, #1
 800e346:	2b00      	cmp	r3, #0
 800e348:	d00a      	beq.n	800e360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	430a      	orrs	r2, r1
 800e35e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e364:	f003 0302 	and.w	r3, r3, #2
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d00a      	beq.n	800e382 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	685b      	ldr	r3, [r3, #4]
 800e372:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	430a      	orrs	r2, r1
 800e380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e386:	f003 0304 	and.w	r3, r3, #4
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00a      	beq.n	800e3a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	430a      	orrs	r2, r1
 800e3a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a8:	f003 0310 	and.w	r3, r3, #16
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00a      	beq.n	800e3c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	689b      	ldr	r3, [r3, #8]
 800e3b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	430a      	orrs	r2, r1
 800e3c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3ca:	f003 0320 	and.w	r3, r3, #32
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d00a      	beq.n	800e3e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	689b      	ldr	r3, [r3, #8]
 800e3d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	430a      	orrs	r2, r1
 800e3e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d01a      	beq.n	800e42a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	430a      	orrs	r2, r1
 800e408:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e40e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e412:	d10a      	bne.n	800e42a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	430a      	orrs	r2, r1
 800e428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e432:	2b00      	cmp	r3, #0
 800e434:	d00a      	beq.n	800e44c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	430a      	orrs	r2, r1
 800e44a:	605a      	str	r2, [r3, #4]
  }
}
 800e44c:	bf00      	nop
 800e44e:	370c      	adds	r7, #12
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b098      	sub	sp, #96	; 0x60
 800e45c:	af02      	add	r7, sp, #8
 800e45e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e468:	f7f4 f9ea 	bl	8002840 <HAL_GetTick>
 800e46c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f003 0308 	and.w	r3, r3, #8
 800e478:	2b08      	cmp	r3, #8
 800e47a:	d12f      	bne.n	800e4dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e47c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e480:	9300      	str	r3, [sp, #0]
 800e482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e484:	2200      	movs	r2, #0
 800e486:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f000 f88e 	bl	800e5ac <UART_WaitOnFlagUntilTimeout>
 800e490:	4603      	mov	r3, r0
 800e492:	2b00      	cmp	r3, #0
 800e494:	d022      	beq.n	800e4dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49e:	e853 3f00 	ldrex	r3, [r3]
 800e4a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e4aa:	653b      	str	r3, [r7, #80]	; 0x50
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4b4:	647b      	str	r3, [r7, #68]	; 0x44
 800e4b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e4ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4bc:	e841 2300 	strex	r3, r2, [r1]
 800e4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d1e6      	bne.n	800e496 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2220      	movs	r2, #32
 800e4cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4d8:	2303      	movs	r3, #3
 800e4da:	e063      	b.n	800e5a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f003 0304 	and.w	r3, r3, #4
 800e4e6:	2b04      	cmp	r3, #4
 800e4e8:	d149      	bne.n	800e57e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e4ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e4ee:	9300      	str	r3, [sp, #0]
 800e4f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 f857 	bl	800e5ac <UART_WaitOnFlagUntilTimeout>
 800e4fe:	4603      	mov	r3, r0
 800e500:	2b00      	cmp	r3, #0
 800e502:	d03c      	beq.n	800e57e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50c:	e853 3f00 	ldrex	r3, [r3]
 800e510:	623b      	str	r3, [r7, #32]
   return(result);
 800e512:	6a3b      	ldr	r3, [r7, #32]
 800e514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e518:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	461a      	mov	r2, r3
 800e520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e522:	633b      	str	r3, [r7, #48]	; 0x30
 800e524:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e52a:	e841 2300 	strex	r3, r2, [r1]
 800e52e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1e6      	bne.n	800e504 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	3308      	adds	r3, #8
 800e53c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	e853 3f00 	ldrex	r3, [r3]
 800e544:	60fb      	str	r3, [r7, #12]
   return(result);
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	f023 0301 	bic.w	r3, r3, #1
 800e54c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	3308      	adds	r3, #8
 800e554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e556:	61fa      	str	r2, [r7, #28]
 800e558:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e55a:	69b9      	ldr	r1, [r7, #24]
 800e55c:	69fa      	ldr	r2, [r7, #28]
 800e55e:	e841 2300 	strex	r3, r2, [r1]
 800e562:	617b      	str	r3, [r7, #20]
   return(result);
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d1e5      	bne.n	800e536 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2220      	movs	r2, #32
 800e56e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2200      	movs	r2, #0
 800e576:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e57a:	2303      	movs	r3, #3
 800e57c:	e012      	b.n	800e5a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2220      	movs	r2, #32
 800e582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2220      	movs	r2, #32
 800e58a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2200      	movs	r2, #0
 800e592:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2200      	movs	r2, #0
 800e598:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2200      	movs	r2, #0
 800e59e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e5a2:	2300      	movs	r3, #0
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3758      	adds	r7, #88	; 0x58
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	60f8      	str	r0, [r7, #12]
 800e5b4:	60b9      	str	r1, [r7, #8]
 800e5b6:	603b      	str	r3, [r7, #0]
 800e5b8:	4613      	mov	r3, r2
 800e5ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5bc:	e04f      	b.n	800e65e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5be:	69bb      	ldr	r3, [r7, #24]
 800e5c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5c4:	d04b      	beq.n	800e65e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e5c6:	f7f4 f93b 	bl	8002840 <HAL_GetTick>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	1ad3      	subs	r3, r2, r3
 800e5d0:	69ba      	ldr	r2, [r7, #24]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d302      	bcc.n	800e5dc <UART_WaitOnFlagUntilTimeout+0x30>
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d101      	bne.n	800e5e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e5dc:	2303      	movs	r3, #3
 800e5de:	e04e      	b.n	800e67e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f003 0304 	and.w	r3, r3, #4
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d037      	beq.n	800e65e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	2b80      	cmp	r3, #128	; 0x80
 800e5f2:	d034      	beq.n	800e65e <UART_WaitOnFlagUntilTimeout+0xb2>
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	2b40      	cmp	r3, #64	; 0x40
 800e5f8:	d031      	beq.n	800e65e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	69db      	ldr	r3, [r3, #28]
 800e600:	f003 0308 	and.w	r3, r3, #8
 800e604:	2b08      	cmp	r3, #8
 800e606:	d110      	bne.n	800e62a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2208      	movs	r2, #8
 800e60e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e610:	68f8      	ldr	r0, [r7, #12]
 800e612:	f000 f95b 	bl	800e8cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	2208      	movs	r2, #8
 800e61a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2200      	movs	r2, #0
 800e622:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800e626:	2301      	movs	r3, #1
 800e628:	e029      	b.n	800e67e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	69db      	ldr	r3, [r3, #28]
 800e630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e638:	d111      	bne.n	800e65e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e644:	68f8      	ldr	r0, [r7, #12]
 800e646:	f000 f941 	bl	800e8cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2220      	movs	r2, #32
 800e64e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2200      	movs	r2, #0
 800e656:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e65a:	2303      	movs	r3, #3
 800e65c:	e00f      	b.n	800e67e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	69da      	ldr	r2, [r3, #28]
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	4013      	ands	r3, r2
 800e668:	68ba      	ldr	r2, [r7, #8]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	bf0c      	ite	eq
 800e66e:	2301      	moveq	r3, #1
 800e670:	2300      	movne	r3, #0
 800e672:	b2db      	uxtb	r3, r3
 800e674:	461a      	mov	r2, r3
 800e676:	79fb      	ldrb	r3, [r7, #7]
 800e678:	429a      	cmp	r2, r3
 800e67a:	d0a0      	beq.n	800e5be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e67c:	2300      	movs	r3, #0
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3710      	adds	r7, #16
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
	...

0800e688 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e688:	b480      	push	{r7}
 800e68a:	b0a3      	sub	sp, #140	; 0x8c
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	60b9      	str	r1, [r7, #8]
 800e692:	4613      	mov	r3, r2
 800e694:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	68ba      	ldr	r2, [r7, #8]
 800e69a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	88fa      	ldrh	r2, [r7, #6]
 800e6a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	88fa      	ldrh	r2, [r7, #6]
 800e6a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	689b      	ldr	r3, [r3, #8]
 800e6b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6ba:	d10e      	bne.n	800e6da <UART_Start_Receive_IT+0x52>
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	691b      	ldr	r3, [r3, #16]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d105      	bne.n	800e6d0 <UART_Start_Receive_IT+0x48>
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e6ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e6ce:	e02d      	b.n	800e72c <UART_Start_Receive_IT+0xa4>
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	22ff      	movs	r2, #255	; 0xff
 800e6d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e6d8:	e028      	b.n	800e72c <UART_Start_Receive_IT+0xa4>
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d10d      	bne.n	800e6fe <UART_Start_Receive_IT+0x76>
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	691b      	ldr	r3, [r3, #16]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d104      	bne.n	800e6f4 <UART_Start_Receive_IT+0x6c>
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	22ff      	movs	r2, #255	; 0xff
 800e6ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e6f2:	e01b      	b.n	800e72c <UART_Start_Receive_IT+0xa4>
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	227f      	movs	r2, #127	; 0x7f
 800e6f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e6fc:	e016      	b.n	800e72c <UART_Start_Receive_IT+0xa4>
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	689b      	ldr	r3, [r3, #8]
 800e702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e706:	d10d      	bne.n	800e724 <UART_Start_Receive_IT+0x9c>
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	691b      	ldr	r3, [r3, #16]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d104      	bne.n	800e71a <UART_Start_Receive_IT+0x92>
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	227f      	movs	r2, #127	; 0x7f
 800e714:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e718:	e008      	b.n	800e72c <UART_Start_Receive_IT+0xa4>
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	223f      	movs	r2, #63	; 0x3f
 800e71e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e722:	e003      	b.n	800e72c <UART_Start_Receive_IT+0xa4>
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2200      	movs	r2, #0
 800e728:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2200      	movs	r2, #0
 800e730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	2222      	movs	r2, #34	; 0x22
 800e738:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	3308      	adds	r3, #8
 800e742:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e746:	e853 3f00 	ldrex	r3, [r3]
 800e74a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e74c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e74e:	f043 0301 	orr.w	r3, r3, #1
 800e752:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	3308      	adds	r3, #8
 800e75c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e760:	673a      	str	r2, [r7, #112]	; 0x70
 800e762:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e764:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e766:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e768:	e841 2300 	strex	r3, r2, [r1]
 800e76c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e76e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1e3      	bne.n	800e73c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e77c:	d14f      	bne.n	800e81e <UART_Start_Receive_IT+0x196>
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e784:	88fa      	ldrh	r2, [r7, #6]
 800e786:	429a      	cmp	r2, r3
 800e788:	d349      	bcc.n	800e81e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	689b      	ldr	r3, [r3, #8]
 800e78e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e792:	d107      	bne.n	800e7a4 <UART_Start_Receive_IT+0x11c>
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	691b      	ldr	r3, [r3, #16]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d103      	bne.n	800e7a4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	4a47      	ldr	r2, [pc, #284]	; (800e8bc <UART_Start_Receive_IT+0x234>)
 800e7a0:	675a      	str	r2, [r3, #116]	; 0x74
 800e7a2:	e002      	b.n	800e7aa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	4a46      	ldr	r2, [pc, #280]	; (800e8c0 <UART_Start_Receive_IT+0x238>)
 800e7a8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	691b      	ldr	r3, [r3, #16]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d01a      	beq.n	800e7e8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7ba:	e853 3f00 	ldrex	r3, [r3]
 800e7be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e7c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e7c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e7d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e7d6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e7da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e7dc:	e841 2300 	strex	r3, r2, [r1]
 800e7e0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e7e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d1e4      	bne.n	800e7b2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	3308      	adds	r3, #8
 800e7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7f2:	e853 3f00 	ldrex	r3, [r3]
 800e7f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	3308      	adds	r3, #8
 800e806:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e808:	64ba      	str	r2, [r7, #72]	; 0x48
 800e80a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e80c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e80e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e810:	e841 2300 	strex	r3, r2, [r1]
 800e814:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d1e5      	bne.n	800e7e8 <UART_Start_Receive_IT+0x160>
 800e81c:	e046      	b.n	800e8ac <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	689b      	ldr	r3, [r3, #8]
 800e822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e826:	d107      	bne.n	800e838 <UART_Start_Receive_IT+0x1b0>
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	691b      	ldr	r3, [r3, #16]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d103      	bne.n	800e838 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	4a24      	ldr	r2, [pc, #144]	; (800e8c4 <UART_Start_Receive_IT+0x23c>)
 800e834:	675a      	str	r2, [r3, #116]	; 0x74
 800e836:	e002      	b.n	800e83e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	4a23      	ldr	r2, [pc, #140]	; (800e8c8 <UART_Start_Receive_IT+0x240>)
 800e83c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	691b      	ldr	r3, [r3, #16]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d019      	beq.n	800e87a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84e:	e853 3f00 	ldrex	r3, [r3]
 800e852:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e856:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e85a:	677b      	str	r3, [r7, #116]	; 0x74
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	461a      	mov	r2, r3
 800e862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e864:	637b      	str	r3, [r7, #52]	; 0x34
 800e866:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e868:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e86a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e86c:	e841 2300 	strex	r3, r2, [r1]
 800e870:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e874:	2b00      	cmp	r3, #0
 800e876:	d1e6      	bne.n	800e846 <UART_Start_Receive_IT+0x1be>
 800e878:	e018      	b.n	800e8ac <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	e853 3f00 	ldrex	r3, [r3]
 800e886:	613b      	str	r3, [r7, #16]
   return(result);
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	f043 0320 	orr.w	r3, r3, #32
 800e88e:	67bb      	str	r3, [r7, #120]	; 0x78
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	461a      	mov	r2, r3
 800e896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e898:	623b      	str	r3, [r7, #32]
 800e89a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89c:	69f9      	ldr	r1, [r7, #28]
 800e89e:	6a3a      	ldr	r2, [r7, #32]
 800e8a0:	e841 2300 	strex	r3, r2, [r1]
 800e8a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d1e6      	bne.n	800e87a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	378c      	adds	r7, #140	; 0x8c
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop
 800e8bc:	0800f0ed 	.word	0x0800f0ed
 800e8c0:	0800ed8d 	.word	0x0800ed8d
 800e8c4:	0800ebd5 	.word	0x0800ebd5
 800e8c8:	0800ea1d 	.word	0x0800ea1d

0800e8cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b095      	sub	sp, #84	; 0x54
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8dc:	e853 3f00 	ldrex	r3, [r3]
 800e8e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e8e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8f2:	643b      	str	r3, [r7, #64]	; 0x40
 800e8f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e8f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e8fa:	e841 2300 	strex	r3, r2, [r1]
 800e8fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e902:	2b00      	cmp	r3, #0
 800e904:	d1e6      	bne.n	800e8d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	3308      	adds	r3, #8
 800e90c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e90e:	6a3b      	ldr	r3, [r7, #32]
 800e910:	e853 3f00 	ldrex	r3, [r3]
 800e914:	61fb      	str	r3, [r7, #28]
   return(result);
 800e916:	69fa      	ldr	r2, [r7, #28]
 800e918:	4b1e      	ldr	r3, [pc, #120]	; (800e994 <UART_EndRxTransfer+0xc8>)
 800e91a:	4013      	ands	r3, r2
 800e91c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	3308      	adds	r3, #8
 800e924:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e926:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e928:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e92a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e92c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e92e:	e841 2300 	strex	r3, r2, [r1]
 800e932:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e936:	2b00      	cmp	r3, #0
 800e938:	d1e5      	bne.n	800e906 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e93e:	2b01      	cmp	r3, #1
 800e940:	d118      	bne.n	800e974 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	e853 3f00 	ldrex	r3, [r3]
 800e94e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	f023 0310 	bic.w	r3, r3, #16
 800e956:	647b      	str	r3, [r7, #68]	; 0x44
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	461a      	mov	r2, r3
 800e95e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e960:	61bb      	str	r3, [r7, #24]
 800e962:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e964:	6979      	ldr	r1, [r7, #20]
 800e966:	69ba      	ldr	r2, [r7, #24]
 800e968:	e841 2300 	strex	r3, r2, [r1]
 800e96c:	613b      	str	r3, [r7, #16]
   return(result);
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d1e6      	bne.n	800e942 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2220      	movs	r2, #32
 800e978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2200      	movs	r2, #0
 800e986:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e988:	bf00      	nop
 800e98a:	3754      	adds	r7, #84	; 0x54
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr
 800e994:	effffffe 	.word	0xeffffffe

0800e998 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b084      	sub	sp, #16
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e9b6:	68f8      	ldr	r0, [r7, #12]
 800e9b8:	f7fe ff2e 	bl	800d818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9bc:	bf00      	nop
 800e9be:	3710      	adds	r7, #16
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b088      	sub	sp, #32
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	e853 3f00 	ldrex	r3, [r3]
 800e9d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9e0:	61fb      	str	r3, [r7, #28]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	69fb      	ldr	r3, [r7, #28]
 800e9ea:	61bb      	str	r3, [r7, #24]
 800e9ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ee:	6979      	ldr	r1, [r7, #20]
 800e9f0:	69ba      	ldr	r2, [r7, #24]
 800e9f2:	e841 2300 	strex	r3, r2, [r1]
 800e9f6:	613b      	str	r3, [r7, #16]
   return(result);
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d1e6      	bne.n	800e9cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2220      	movs	r2, #32
 800ea02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f7fe fef9 	bl	800d804 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea12:	bf00      	nop
 800ea14:	3720      	adds	r7, #32
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
	...

0800ea1c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b09c      	sub	sp, #112	; 0x70
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea2a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea34:	2b22      	cmp	r3, #34	; 0x22
 800ea36:	f040 80be 	bne.w	800ebb6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea40:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ea44:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ea48:	b2d9      	uxtb	r1, r3
 800ea4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ea4e:	b2da      	uxtb	r2, r3
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea54:	400a      	ands	r2, r1
 800ea56:	b2d2      	uxtb	r2, r2
 800ea58:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea5e:	1c5a      	adds	r2, r3, #1
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	3b01      	subs	r3, #1
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	f040 80a1 	bne.w	800ebc6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea8c:	e853 3f00 	ldrex	r3, [r3]
 800ea90:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ea92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ea98:	66bb      	str	r3, [r7, #104]	; 0x68
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eaa2:	65bb      	str	r3, [r7, #88]	; 0x58
 800eaa4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eaa8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eaaa:	e841 2300 	strex	r3, r2, [r1]
 800eaae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d1e6      	bne.n	800ea84 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	3308      	adds	r3, #8
 800eabc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac0:	e853 3f00 	ldrex	r3, [r3]
 800eac4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eac8:	f023 0301 	bic.w	r3, r3, #1
 800eacc:	667b      	str	r3, [r7, #100]	; 0x64
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	3308      	adds	r3, #8
 800ead4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ead6:	647a      	str	r2, [r7, #68]	; 0x44
 800ead8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eada:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800eadc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eade:	e841 2300 	strex	r3, r2, [r1]
 800eae2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d1e5      	bne.n	800eab6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2220      	movs	r2, #32
 800eaee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2200      	movs	r2, #0
 800eafc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	4a33      	ldr	r2, [pc, #204]	; (800ebd0 <UART_RxISR_8BIT+0x1b4>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d01f      	beq.n	800eb48 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d018      	beq.n	800eb48 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1e:	e853 3f00 	ldrex	r3, [r3]
 800eb22:	623b      	str	r3, [r7, #32]
   return(result);
 800eb24:	6a3b      	ldr	r3, [r7, #32]
 800eb26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800eb2a:	663b      	str	r3, [r7, #96]	; 0x60
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	461a      	mov	r2, r3
 800eb32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb34:	633b      	str	r3, [r7, #48]	; 0x30
 800eb36:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb3c:	e841 2300 	strex	r3, r2, [r1]
 800eb40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d1e6      	bne.n	800eb16 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d12e      	bne.n	800ebae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2200      	movs	r2, #0
 800eb54:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	e853 3f00 	ldrex	r3, [r3]
 800eb62:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f023 0310 	bic.w	r3, r3, #16
 800eb6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	461a      	mov	r2, r3
 800eb72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb74:	61fb      	str	r3, [r7, #28]
 800eb76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb78:	69b9      	ldr	r1, [r7, #24]
 800eb7a:	69fa      	ldr	r2, [r7, #28]
 800eb7c:	e841 2300 	strex	r3, r2, [r1]
 800eb80:	617b      	str	r3, [r7, #20]
   return(result);
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d1e6      	bne.n	800eb56 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	69db      	ldr	r3, [r3, #28]
 800eb8e:	f003 0310 	and.w	r3, r3, #16
 800eb92:	2b10      	cmp	r3, #16
 800eb94:	d103      	bne.n	800eb9e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	2210      	movs	r2, #16
 800eb9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eba4:	4619      	mov	r1, r3
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7fe fe40 	bl	800d82c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ebac:	e00b      	b.n	800ebc6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f7f1 fe34 	bl	800081c <HAL_UART_RxCpltCallback>
}
 800ebb4:	e007      	b.n	800ebc6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	699a      	ldr	r2, [r3, #24]
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f042 0208 	orr.w	r2, r2, #8
 800ebc4:	619a      	str	r2, [r3, #24]
}
 800ebc6:	bf00      	nop
 800ebc8:	3770      	adds	r7, #112	; 0x70
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	bf00      	nop
 800ebd0:	58000c00 	.word	0x58000c00

0800ebd4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b09c      	sub	sp, #112	; 0x70
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ebe2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebec:	2b22      	cmp	r3, #34	; 0x22
 800ebee:	f040 80be 	bne.w	800ed6e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec00:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ec02:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ec06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ec0a:	4013      	ands	r3, r2
 800ec0c:	b29a      	uxth	r2, r3
 800ec0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ec10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec16:	1c9a      	adds	r2, r3, #2
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	3b01      	subs	r3, #1
 800ec26:	b29a      	uxth	r2, r3
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	f040 80a1 	bne.w	800ed7e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec44:	e853 3f00 	ldrex	r3, [r3]
 800ec48:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ec4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec50:	667b      	str	r3, [r7, #100]	; 0x64
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	461a      	mov	r2, r3
 800ec58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec5a:	657b      	str	r3, [r7, #84]	; 0x54
 800ec5c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ec60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ec62:	e841 2300 	strex	r3, r2, [r1]
 800ec66:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ec68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d1e6      	bne.n	800ec3c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	3308      	adds	r3, #8
 800ec74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec78:	e853 3f00 	ldrex	r3, [r3]
 800ec7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ec7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec80:	f023 0301 	bic.w	r3, r3, #1
 800ec84:	663b      	str	r3, [r7, #96]	; 0x60
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	3308      	adds	r3, #8
 800ec8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ec8e:	643a      	str	r2, [r7, #64]	; 0x40
 800ec90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ec94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ec96:	e841 2300 	strex	r3, r2, [r1]
 800ec9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ec9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d1e5      	bne.n	800ec6e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	2220      	movs	r2, #32
 800eca6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2200      	movs	r2, #0
 800ecae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	4a33      	ldr	r2, [pc, #204]	; (800ed88 <UART_RxISR_16BIT+0x1b4>)
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d01f      	beq.n	800ed00 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d018      	beq.n	800ed00 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecd4:	6a3b      	ldr	r3, [r7, #32]
 800ecd6:	e853 3f00 	ldrex	r3, [r3]
 800ecda:	61fb      	str	r3, [r7, #28]
   return(result);
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ece2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	461a      	mov	r2, r3
 800ecea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ecee:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ecf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecf4:	e841 2300 	strex	r3, r2, [r1]
 800ecf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ecfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d1e6      	bne.n	800ecce <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed04:	2b01      	cmp	r3, #1
 800ed06:	d12e      	bne.n	800ed66 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	e853 3f00 	ldrex	r3, [r3]
 800ed1a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	f023 0310 	bic.w	r3, r3, #16
 800ed22:	65bb      	str	r3, [r7, #88]	; 0x58
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	461a      	mov	r2, r3
 800ed2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed2c:	61bb      	str	r3, [r7, #24]
 800ed2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed30:	6979      	ldr	r1, [r7, #20]
 800ed32:	69ba      	ldr	r2, [r7, #24]
 800ed34:	e841 2300 	strex	r3, r2, [r1]
 800ed38:	613b      	str	r3, [r7, #16]
   return(result);
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d1e6      	bne.n	800ed0e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	69db      	ldr	r3, [r3, #28]
 800ed46:	f003 0310 	and.w	r3, r3, #16
 800ed4a:	2b10      	cmp	r3, #16
 800ed4c:	d103      	bne.n	800ed56 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	2210      	movs	r2, #16
 800ed54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f7fe fd64 	bl	800d82c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ed64:	e00b      	b.n	800ed7e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f7f1 fd58 	bl	800081c <HAL_UART_RxCpltCallback>
}
 800ed6c:	e007      	b.n	800ed7e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	699a      	ldr	r2, [r3, #24]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f042 0208 	orr.w	r2, r2, #8
 800ed7c:	619a      	str	r2, [r3, #24]
}
 800ed7e:	bf00      	nop
 800ed80:	3770      	adds	r7, #112	; 0x70
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	58000c00 	.word	0x58000c00

0800ed8c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b0ac      	sub	sp, #176	; 0xb0
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed9a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	69db      	ldr	r3, [r3, #28]
 800eda4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	689b      	ldr	r3, [r3, #8]
 800edb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edc2:	2b22      	cmp	r3, #34	; 0x22
 800edc4:	f040 8180 	bne.w	800f0c8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800edce:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800edd2:	e123      	b.n	800f01c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edda:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800edde:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ede2:	b2d9      	uxtb	r1, r3
 800ede4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ede8:	b2da      	uxtb	r2, r3
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edee:	400a      	ands	r2, r1
 800edf0:	b2d2      	uxtb	r2, r2
 800edf2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edf8:	1c5a      	adds	r2, r3, #1
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ee04:	b29b      	uxth	r3, r3
 800ee06:	3b01      	subs	r3, #1
 800ee08:	b29a      	uxth	r2, r3
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	69db      	ldr	r3, [r3, #28]
 800ee16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ee1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ee1e:	f003 0307 	and.w	r3, r3, #7
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d053      	beq.n	800eece <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ee26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ee2a:	f003 0301 	and.w	r3, r3, #1
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d011      	beq.n	800ee56 <UART_RxISR_8BIT_FIFOEN+0xca>
 800ee32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ee36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d00b      	beq.n	800ee56 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2201      	movs	r2, #1
 800ee44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee4c:	f043 0201 	orr.w	r2, r3, #1
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ee56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ee5a:	f003 0302 	and.w	r3, r3, #2
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d011      	beq.n	800ee86 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ee62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ee66:	f003 0301 	and.w	r3, r3, #1
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00b      	beq.n	800ee86 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	2202      	movs	r2, #2
 800ee74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee7c:	f043 0204 	orr.w	r2, r3, #4
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ee86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ee8a:	f003 0304 	and.w	r3, r3, #4
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d011      	beq.n	800eeb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ee92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ee96:	f003 0301 	and.w	r3, r3, #1
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d00b      	beq.n	800eeb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	2204      	movs	r2, #4
 800eea4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eeac:	f043 0202 	orr.w	r2, r3, #2
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d006      	beq.n	800eece <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f7fe fca9 	bl	800d818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2200      	movs	r2, #0
 800eeca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	f040 80a0 	bne.w	800f01c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eee4:	e853 3f00 	ldrex	r3, [r3]
 800eee8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800eeea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eeec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eef0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	461a      	mov	r2, r3
 800eefa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eefe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ef00:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef02:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ef04:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ef06:	e841 2300 	strex	r3, r2, [r1]
 800ef0a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800ef0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1e4      	bne.n	800eedc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	3308      	adds	r3, #8
 800ef18:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef1c:	e853 3f00 	ldrex	r3, [r3]
 800ef20:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800ef22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ef24:	4b6e      	ldr	r3, [pc, #440]	; (800f0e0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800ef26:	4013      	ands	r3, r2
 800ef28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	3308      	adds	r3, #8
 800ef32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ef36:	66ba      	str	r2, [r7, #104]	; 0x68
 800ef38:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef3a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ef3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ef3e:	e841 2300 	strex	r3, r2, [r1]
 800ef42:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ef44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1e3      	bne.n	800ef12 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2220      	movs	r2, #32
 800ef4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2200      	movs	r2, #0
 800ef56:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4a60      	ldr	r2, [pc, #384]	; (800f0e4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800ef64:	4293      	cmp	r3, r2
 800ef66:	d021      	beq.n	800efac <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d01a      	beq.n	800efac <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef7e:	e853 3f00 	ldrex	r3, [r3]
 800ef82:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ef84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ef8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	461a      	mov	r2, r3
 800ef94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ef98:	657b      	str	r3, [r7, #84]	; 0x54
 800ef9a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ef9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800efa0:	e841 2300 	strex	r3, r2, [r1]
 800efa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800efa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d1e4      	bne.n	800ef76 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d130      	bne.n	800f016 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2200      	movs	r2, #0
 800efb8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc2:	e853 3f00 	ldrex	r3, [r3]
 800efc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800efc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efca:	f023 0310 	bic.w	r3, r3, #16
 800efce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	461a      	mov	r2, r3
 800efd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800efdc:	643b      	str	r3, [r7, #64]	; 0x40
 800efde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efe0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800efe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800efe4:	e841 2300 	strex	r3, r2, [r1]
 800efe8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800efea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efec:	2b00      	cmp	r3, #0
 800efee:	d1e4      	bne.n	800efba <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	69db      	ldr	r3, [r3, #28]
 800eff6:	f003 0310 	and.w	r3, r3, #16
 800effa:	2b10      	cmp	r3, #16
 800effc:	d103      	bne.n	800f006 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	2210      	movs	r2, #16
 800f004:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f00c:	4619      	mov	r1, r3
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f7fe fc0c 	bl	800d82c <HAL_UARTEx_RxEventCallback>
 800f014:	e002      	b.n	800f01c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f7f1 fc00 	bl	800081c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f01c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f020:	2b00      	cmp	r3, #0
 800f022:	d006      	beq.n	800f032 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800f024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f028:	f003 0320 	and.w	r3, r3, #32
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	f47f aed1 	bne.w	800edd4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f038:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f03c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f040:	2b00      	cmp	r3, #0
 800f042:	d049      	beq.n	800f0d8 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f04a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800f04e:	429a      	cmp	r2, r3
 800f050:	d242      	bcs.n	800f0d8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	3308      	adds	r3, #8
 800f058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f05a:	6a3b      	ldr	r3, [r7, #32]
 800f05c:	e853 3f00 	ldrex	r3, [r3]
 800f060:	61fb      	str	r3, [r7, #28]
   return(result);
 800f062:	69fb      	ldr	r3, [r7, #28]
 800f064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	3308      	adds	r3, #8
 800f072:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f076:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f078:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f07a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f07c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f07e:	e841 2300 	strex	r3, r2, [r1]
 800f082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f086:	2b00      	cmp	r3, #0
 800f088:	d1e3      	bne.n	800f052 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4a16      	ldr	r2, [pc, #88]	; (800f0e8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800f08e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	e853 3f00 	ldrex	r3, [r3]
 800f09c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	f043 0320 	orr.w	r3, r3, #32
 800f0a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f0b2:	61bb      	str	r3, [r7, #24]
 800f0b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b6:	6979      	ldr	r1, [r7, #20]
 800f0b8:	69ba      	ldr	r2, [r7, #24]
 800f0ba:	e841 2300 	strex	r3, r2, [r1]
 800f0be:	613b      	str	r3, [r7, #16]
   return(result);
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d1e4      	bne.n	800f090 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f0c6:	e007      	b.n	800f0d8 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	699a      	ldr	r2, [r3, #24]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f042 0208 	orr.w	r2, r2, #8
 800f0d6:	619a      	str	r2, [r3, #24]
}
 800f0d8:	bf00      	nop
 800f0da:	37b0      	adds	r7, #176	; 0xb0
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}
 800f0e0:	effffffe 	.word	0xeffffffe
 800f0e4:	58000c00 	.word	0x58000c00
 800f0e8:	0800ea1d 	.word	0x0800ea1d

0800f0ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b0ae      	sub	sp, #184	; 0xb8
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f0fa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	69db      	ldr	r3, [r3, #28]
 800f104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	689b      	ldr	r3, [r3, #8]
 800f118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f122:	2b22      	cmp	r3, #34	; 0x22
 800f124:	f040 8184 	bne.w	800f430 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f12e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f132:	e127      	b.n	800f384 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f13a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f146:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800f14a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800f14e:	4013      	ands	r3, r2
 800f150:	b29a      	uxth	r2, r3
 800f152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f156:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f15c:	1c9a      	adds	r2, r3, #2
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f168:	b29b      	uxth	r3, r3
 800f16a:	3b01      	subs	r3, #1
 800f16c:	b29a      	uxth	r2, r3
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	69db      	ldr	r3, [r3, #28]
 800f17a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f17e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f182:	f003 0307 	and.w	r3, r3, #7
 800f186:	2b00      	cmp	r3, #0
 800f188:	d053      	beq.n	800f232 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f18a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f18e:	f003 0301 	and.w	r3, r3, #1
 800f192:	2b00      	cmp	r3, #0
 800f194:	d011      	beq.n	800f1ba <UART_RxISR_16BIT_FIFOEN+0xce>
 800f196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f19a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d00b      	beq.n	800f1ba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1b0:	f043 0201 	orr.w	r2, r3, #1
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f1ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f1be:	f003 0302 	and.w	r3, r3, #2
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d011      	beq.n	800f1ea <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f1c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f1ca:	f003 0301 	and.w	r3, r3, #1
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d00b      	beq.n	800f1ea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	2202      	movs	r2, #2
 800f1d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1e0:	f043 0204 	orr.w	r2, r3, #4
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f1ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f1ee:	f003 0304 	and.w	r3, r3, #4
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d011      	beq.n	800f21a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f1f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f1fa:	f003 0301 	and.w	r3, r3, #1
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d00b      	beq.n	800f21a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	2204      	movs	r2, #4
 800f208:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f210:	f043 0202 	orr.w	r2, r3, #2
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f220:	2b00      	cmp	r3, #0
 800f222:	d006      	beq.n	800f232 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f7fe faf7 	bl	800d818 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2200      	movs	r2, #0
 800f22e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f238:	b29b      	uxth	r3, r3
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	f040 80a2 	bne.w	800f384 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f248:	e853 3f00 	ldrex	r3, [r3]
 800f24c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f24e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f254:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	461a      	mov	r2, r3
 800f25e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f262:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f266:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f268:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f26a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f26e:	e841 2300 	strex	r3, r2, [r1]
 800f272:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1e2      	bne.n	800f240 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	3308      	adds	r3, #8
 800f280:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f284:	e853 3f00 	ldrex	r3, [r3]
 800f288:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f28a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f28c:	4b6e      	ldr	r3, [pc, #440]	; (800f448 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800f28e:	4013      	ands	r3, r2
 800f290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	3308      	adds	r3, #8
 800f29a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f29e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f2a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f2a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f2a6:	e841 2300 	strex	r3, r2, [r1]
 800f2aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f2ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1e3      	bne.n	800f27a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2220      	movs	r2, #32
 800f2b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	4a60      	ldr	r2, [pc, #384]	; (800f44c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d021      	beq.n	800f314 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d01a      	beq.n	800f314 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2e6:	e853 3f00 	ldrex	r3, [r3]
 800f2ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f2ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f2f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f300:	65bb      	str	r3, [r7, #88]	; 0x58
 800f302:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f304:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f306:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f308:	e841 2300 	strex	r3, r2, [r1]
 800f30c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f30e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f310:	2b00      	cmp	r3, #0
 800f312:	d1e4      	bne.n	800f2de <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f318:	2b01      	cmp	r3, #1
 800f31a:	d130      	bne.n	800f37e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2200      	movs	r2, #0
 800f320:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f32a:	e853 3f00 	ldrex	r3, [r3]
 800f32e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f332:	f023 0310 	bic.w	r3, r3, #16
 800f336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	461a      	mov	r2, r3
 800f340:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f344:	647b      	str	r3, [r7, #68]	; 0x44
 800f346:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f348:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f34a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f34c:	e841 2300 	strex	r3, r2, [r1]
 800f350:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f354:	2b00      	cmp	r3, #0
 800f356:	d1e4      	bne.n	800f322 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	69db      	ldr	r3, [r3, #28]
 800f35e:	f003 0310 	and.w	r3, r3, #16
 800f362:	2b10      	cmp	r3, #16
 800f364:	d103      	bne.n	800f36e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2210      	movs	r2, #16
 800f36c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f374:	4619      	mov	r1, r3
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f7fe fa58 	bl	800d82c <HAL_UARTEx_RxEventCallback>
 800f37c:	e002      	b.n	800f384 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f7f1 fa4c 	bl	800081c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f384:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d006      	beq.n	800f39a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800f38c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f390:	f003 0320 	and.w	r3, r3, #32
 800f394:	2b00      	cmp	r3, #0
 800f396:	f47f aecd 	bne.w	800f134 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3a0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f3a4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d049      	beq.n	800f440 <UART_RxISR_16BIT_FIFOEN+0x354>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f3b2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d242      	bcs.n	800f440 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	3308      	adds	r3, #8
 800f3c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c4:	e853 3f00 	ldrex	r3, [r3]
 800f3c8:	623b      	str	r3, [r7, #32]
   return(result);
 800f3ca:	6a3b      	ldr	r3, [r7, #32]
 800f3cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f3d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	3308      	adds	r3, #8
 800f3da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f3de:	633a      	str	r2, [r7, #48]	; 0x30
 800f3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3e6:	e841 2300 	strex	r3, r2, [r1]
 800f3ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d1e3      	bne.n	800f3ba <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	4a16      	ldr	r2, [pc, #88]	; (800f450 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800f3f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	e853 3f00 	ldrex	r3, [r3]
 800f404:	60fb      	str	r3, [r7, #12]
   return(result);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	f043 0320 	orr.w	r3, r3, #32
 800f40c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	461a      	mov	r2, r3
 800f416:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f41a:	61fb      	str	r3, [r7, #28]
 800f41c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f41e:	69b9      	ldr	r1, [r7, #24]
 800f420:	69fa      	ldr	r2, [r7, #28]
 800f422:	e841 2300 	strex	r3, r2, [r1]
 800f426:	617b      	str	r3, [r7, #20]
   return(result);
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d1e4      	bne.n	800f3f8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f42e:	e007      	b.n	800f440 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	699a      	ldr	r2, [r3, #24]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f042 0208 	orr.w	r2, r2, #8
 800f43e:	619a      	str	r2, [r3, #24]
}
 800f440:	bf00      	nop
 800f442:	37b8      	adds	r7, #184	; 0xb8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	effffffe 	.word	0xeffffffe
 800f44c:	58000c00 	.word	0x58000c00
 800f450:	0800ebd5 	.word	0x0800ebd5

0800f454 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f454:	b480      	push	{r7}
 800f456:	b083      	sub	sp, #12
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f45c:	bf00      	nop
 800f45e:	370c      	adds	r7, #12
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr

0800f468 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f468:	b480      	push	{r7}
 800f46a:	b083      	sub	sp, #12
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f470:	bf00      	nop
 800f472:	370c      	adds	r7, #12
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr

0800f47c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f484:	bf00      	nop
 800f486:	370c      	adds	r7, #12
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f490:	b480      	push	{r7}
 800f492:	b085      	sub	sp, #20
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	d101      	bne.n	800f4a6 <HAL_UARTEx_DisableFifoMode+0x16>
 800f4a2:	2302      	movs	r3, #2
 800f4a4:	e027      	b.n	800f4f6 <HAL_UARTEx_DisableFifoMode+0x66>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2201      	movs	r2, #1
 800f4aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2224      	movs	r2, #36	; 0x24
 800f4b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	681a      	ldr	r2, [r3, #0]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	f022 0201 	bic.w	r2, r2, #1
 800f4cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f4d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2200      	movs	r2, #0
 800f4da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	68fa      	ldr	r2, [r7, #12]
 800f4e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2220      	movs	r2, #32
 800f4e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f4f4:	2300      	movs	r3, #0
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3714      	adds	r7, #20
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr

0800f502 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f502:	b580      	push	{r7, lr}
 800f504:	b084      	sub	sp, #16
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]
 800f50a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f512:	2b01      	cmp	r3, #1
 800f514:	d101      	bne.n	800f51a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f516:	2302      	movs	r3, #2
 800f518:	e02d      	b.n	800f576 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2201      	movs	r2, #1
 800f51e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2224      	movs	r2, #36	; 0x24
 800f526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f022 0201 	bic.w	r2, r2, #1
 800f540:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	689b      	ldr	r3, [r3, #8]
 800f548:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	683a      	ldr	r2, [r7, #0]
 800f552:	430a      	orrs	r2, r1
 800f554:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f000 f850 	bl	800f5fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	68fa      	ldr	r2, [r7, #12]
 800f562:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2220      	movs	r2, #32
 800f568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2200      	movs	r2, #0
 800f570:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f574:	2300      	movs	r3, #0
}
 800f576:	4618      	mov	r0, r3
 800f578:	3710      	adds	r7, #16
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}

0800f57e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f57e:	b580      	push	{r7, lr}
 800f580:	b084      	sub	sp, #16
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
 800f586:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f58e:	2b01      	cmp	r3, #1
 800f590:	d101      	bne.n	800f596 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f592:	2302      	movs	r3, #2
 800f594:	e02d      	b.n	800f5f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2201      	movs	r2, #1
 800f59a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2224      	movs	r2, #36	; 0x24
 800f5a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	681a      	ldr	r2, [r3, #0]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f022 0201 	bic.w	r2, r2, #1
 800f5bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	683a      	ldr	r2, [r7, #0]
 800f5ce:	430a      	orrs	r2, r1
 800f5d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f000 f812 	bl	800f5fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2220      	movs	r2, #32
 800f5e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f5f0:	2300      	movs	r3, #0
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3710      	adds	r7, #16
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
	...

0800f5fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b085      	sub	sp, #20
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d108      	bne.n	800f61e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2201      	movs	r2, #1
 800f610:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2201      	movs	r2, #1
 800f618:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f61c:	e031      	b.n	800f682 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f61e:	2310      	movs	r3, #16
 800f620:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f622:	2310      	movs	r3, #16
 800f624:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	689b      	ldr	r3, [r3, #8]
 800f62c:	0e5b      	lsrs	r3, r3, #25
 800f62e:	b2db      	uxtb	r3, r3
 800f630:	f003 0307 	and.w	r3, r3, #7
 800f634:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	689b      	ldr	r3, [r3, #8]
 800f63c:	0f5b      	lsrs	r3, r3, #29
 800f63e:	b2db      	uxtb	r3, r3
 800f640:	f003 0307 	and.w	r3, r3, #7
 800f644:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f646:	7bbb      	ldrb	r3, [r7, #14]
 800f648:	7b3a      	ldrb	r2, [r7, #12]
 800f64a:	4911      	ldr	r1, [pc, #68]	; (800f690 <UARTEx_SetNbDataToProcess+0x94>)
 800f64c:	5c8a      	ldrb	r2, [r1, r2]
 800f64e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f652:	7b3a      	ldrb	r2, [r7, #12]
 800f654:	490f      	ldr	r1, [pc, #60]	; (800f694 <UARTEx_SetNbDataToProcess+0x98>)
 800f656:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f658:	fb93 f3f2 	sdiv	r3, r3, r2
 800f65c:	b29a      	uxth	r2, r3
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f664:	7bfb      	ldrb	r3, [r7, #15]
 800f666:	7b7a      	ldrb	r2, [r7, #13]
 800f668:	4909      	ldr	r1, [pc, #36]	; (800f690 <UARTEx_SetNbDataToProcess+0x94>)
 800f66a:	5c8a      	ldrb	r2, [r1, r2]
 800f66c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f670:	7b7a      	ldrb	r2, [r7, #13]
 800f672:	4908      	ldr	r1, [pc, #32]	; (800f694 <UARTEx_SetNbDataToProcess+0x98>)
 800f674:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f676:	fb93 f3f2 	sdiv	r3, r3, r2
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f682:	bf00      	nop
 800f684:	3714      	adds	r7, #20
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr
 800f68e:	bf00      	nop
 800f690:	08013da0 	.word	0x08013da0
 800f694:	08013da8 	.word	0x08013da8

0800f698 <__NVIC_SetPriority>:
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	4603      	mov	r3, r0
 800f6a0:	6039      	str	r1, [r7, #0]
 800f6a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f6a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	db0a      	blt.n	800f6c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	b2da      	uxtb	r2, r3
 800f6b0:	490c      	ldr	r1, [pc, #48]	; (800f6e4 <__NVIC_SetPriority+0x4c>)
 800f6b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f6b6:	0112      	lsls	r2, r2, #4
 800f6b8:	b2d2      	uxtb	r2, r2
 800f6ba:	440b      	add	r3, r1
 800f6bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f6c0:	e00a      	b.n	800f6d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	b2da      	uxtb	r2, r3
 800f6c6:	4908      	ldr	r1, [pc, #32]	; (800f6e8 <__NVIC_SetPriority+0x50>)
 800f6c8:	88fb      	ldrh	r3, [r7, #6]
 800f6ca:	f003 030f 	and.w	r3, r3, #15
 800f6ce:	3b04      	subs	r3, #4
 800f6d0:	0112      	lsls	r2, r2, #4
 800f6d2:	b2d2      	uxtb	r2, r2
 800f6d4:	440b      	add	r3, r1
 800f6d6:	761a      	strb	r2, [r3, #24]
}
 800f6d8:	bf00      	nop
 800f6da:	370c      	adds	r7, #12
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e2:	4770      	bx	lr
 800f6e4:	e000e100 	.word	0xe000e100
 800f6e8:	e000ed00 	.word	0xe000ed00

0800f6ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f6f0:	4b05      	ldr	r3, [pc, #20]	; (800f708 <SysTick_Handler+0x1c>)
 800f6f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f6f4:	f002 f872 	bl	80117dc <xTaskGetSchedulerState>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d001      	beq.n	800f702 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f6fe:	f002 fe93 	bl	8012428 <xPortSysTickHandler>
  }
}
 800f702:	bf00      	nop
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop
 800f708:	e000e010 	.word	0xe000e010

0800f70c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f70c:	b580      	push	{r7, lr}
 800f70e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f710:	2100      	movs	r1, #0
 800f712:	f06f 0004 	mvn.w	r0, #4
 800f716:	f7ff ffbf 	bl	800f698 <__NVIC_SetPriority>
#endif
}
 800f71a:	bf00      	nop
 800f71c:	bd80      	pop	{r7, pc}
	...

0800f720 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f720:	b480      	push	{r7}
 800f722:	b083      	sub	sp, #12
 800f724:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f726:	f3ef 8305 	mrs	r3, IPSR
 800f72a:	603b      	str	r3, [r7, #0]
  return(result);
 800f72c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d003      	beq.n	800f73a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f732:	f06f 0305 	mvn.w	r3, #5
 800f736:	607b      	str	r3, [r7, #4]
 800f738:	e00c      	b.n	800f754 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f73a:	4b0a      	ldr	r3, [pc, #40]	; (800f764 <osKernelInitialize+0x44>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d105      	bne.n	800f74e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f742:	4b08      	ldr	r3, [pc, #32]	; (800f764 <osKernelInitialize+0x44>)
 800f744:	2201      	movs	r2, #1
 800f746:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f748:	2300      	movs	r3, #0
 800f74a:	607b      	str	r3, [r7, #4]
 800f74c:	e002      	b.n	800f754 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f74e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f752:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f754:	687b      	ldr	r3, [r7, #4]
}
 800f756:	4618      	mov	r0, r3
 800f758:	370c      	adds	r7, #12
 800f75a:	46bd      	mov	sp, r7
 800f75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f760:	4770      	bx	lr
 800f762:	bf00      	nop
 800f764:	2400063c 	.word	0x2400063c

0800f768 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f768:	b580      	push	{r7, lr}
 800f76a:	b082      	sub	sp, #8
 800f76c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f76e:	f3ef 8305 	mrs	r3, IPSR
 800f772:	603b      	str	r3, [r7, #0]
  return(result);
 800f774:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f776:	2b00      	cmp	r3, #0
 800f778:	d003      	beq.n	800f782 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f77a:	f06f 0305 	mvn.w	r3, #5
 800f77e:	607b      	str	r3, [r7, #4]
 800f780:	e010      	b.n	800f7a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f782:	4b0b      	ldr	r3, [pc, #44]	; (800f7b0 <osKernelStart+0x48>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	2b01      	cmp	r3, #1
 800f788:	d109      	bne.n	800f79e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f78a:	f7ff ffbf 	bl	800f70c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f78e:	4b08      	ldr	r3, [pc, #32]	; (800f7b0 <osKernelStart+0x48>)
 800f790:	2202      	movs	r2, #2
 800f792:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f794:	f001 fb3c 	bl	8010e10 <vTaskStartScheduler>
      stat = osOK;
 800f798:	2300      	movs	r3, #0
 800f79a:	607b      	str	r3, [r7, #4]
 800f79c:	e002      	b.n	800f7a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f79e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f7a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f7a4:	687b      	ldr	r3, [r7, #4]
}
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	3708      	adds	r7, #8
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	2400063c 	.word	0x2400063c

0800f7b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b08e      	sub	sp, #56	; 0x38
 800f7b8:	af04      	add	r7, sp, #16
 800f7ba:	60f8      	str	r0, [r7, #12]
 800f7bc:	60b9      	str	r1, [r7, #8]
 800f7be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f7c4:	f3ef 8305 	mrs	r3, IPSR
 800f7c8:	617b      	str	r3, [r7, #20]
  return(result);
 800f7ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d17e      	bne.n	800f8ce <osThreadNew+0x11a>
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d07b      	beq.n	800f8ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f7d6:	2380      	movs	r3, #128	; 0x80
 800f7d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f7da:	2318      	movs	r3, #24
 800f7dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f7e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f7e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d045      	beq.n	800f87a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d002      	beq.n	800f7fc <osThreadNew+0x48>
        name = attr->name;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	699b      	ldr	r3, [r3, #24]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d002      	beq.n	800f80a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	699b      	ldr	r3, [r3, #24]
 800f808:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d008      	beq.n	800f822 <osThreadNew+0x6e>
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	2b38      	cmp	r3, #56	; 0x38
 800f814:	d805      	bhi.n	800f822 <osThreadNew+0x6e>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	685b      	ldr	r3, [r3, #4]
 800f81a:	f003 0301 	and.w	r3, r3, #1
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d001      	beq.n	800f826 <osThreadNew+0x72>
        return (NULL);
 800f822:	2300      	movs	r3, #0
 800f824:	e054      	b.n	800f8d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	695b      	ldr	r3, [r3, #20]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d003      	beq.n	800f836 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	695b      	ldr	r3, [r3, #20]
 800f832:	089b      	lsrs	r3, r3, #2
 800f834:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	689b      	ldr	r3, [r3, #8]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d00e      	beq.n	800f85c <osThreadNew+0xa8>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	2b5b      	cmp	r3, #91	; 0x5b
 800f844:	d90a      	bls.n	800f85c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d006      	beq.n	800f85c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	695b      	ldr	r3, [r3, #20]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d002      	beq.n	800f85c <osThreadNew+0xa8>
        mem = 1;
 800f856:	2301      	movs	r3, #1
 800f858:	61bb      	str	r3, [r7, #24]
 800f85a:	e010      	b.n	800f87e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	689b      	ldr	r3, [r3, #8]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d10c      	bne.n	800f87e <osThreadNew+0xca>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	68db      	ldr	r3, [r3, #12]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d108      	bne.n	800f87e <osThreadNew+0xca>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	691b      	ldr	r3, [r3, #16]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d104      	bne.n	800f87e <osThreadNew+0xca>
          mem = 0;
 800f874:	2300      	movs	r3, #0
 800f876:	61bb      	str	r3, [r7, #24]
 800f878:	e001      	b.n	800f87e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f87a:	2300      	movs	r3, #0
 800f87c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f87e:	69bb      	ldr	r3, [r7, #24]
 800f880:	2b01      	cmp	r3, #1
 800f882:	d110      	bne.n	800f8a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f88c:	9202      	str	r2, [sp, #8]
 800f88e:	9301      	str	r3, [sp, #4]
 800f890:	69fb      	ldr	r3, [r7, #28]
 800f892:	9300      	str	r3, [sp, #0]
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	6a3a      	ldr	r2, [r7, #32]
 800f898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f001 f8e2 	bl	8010a64 <xTaskCreateStatic>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	613b      	str	r3, [r7, #16]
 800f8a4:	e013      	b.n	800f8ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f8a6:	69bb      	ldr	r3, [r7, #24]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d110      	bne.n	800f8ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f8ac:	6a3b      	ldr	r3, [r7, #32]
 800f8ae:	b29a      	uxth	r2, r3
 800f8b0:	f107 0310 	add.w	r3, r7, #16
 800f8b4:	9301      	str	r3, [sp, #4]
 800f8b6:	69fb      	ldr	r3, [r7, #28]
 800f8b8:	9300      	str	r3, [sp, #0]
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f8be:	68f8      	ldr	r0, [r7, #12]
 800f8c0:	f001 f92d 	bl	8010b1e <xTaskCreate>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	2b01      	cmp	r3, #1
 800f8c8:	d001      	beq.n	800f8ce <osThreadNew+0x11a>
            hTask = NULL;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f8ce:	693b      	ldr	r3, [r7, #16]
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3728      	adds	r7, #40	; 0x28
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8e0:	f3ef 8305 	mrs	r3, IPSR
 800f8e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800f8e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d003      	beq.n	800f8f4 <osDelay+0x1c>
    stat = osErrorISR;
 800f8ec:	f06f 0305 	mvn.w	r3, #5
 800f8f0:	60fb      	str	r3, [r7, #12]
 800f8f2:	e007      	b.n	800f904 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d002      	beq.n	800f904 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f001 fa52 	bl	8010da8 <vTaskDelay>
    }
  }

  return (stat);
 800f904:	68fb      	ldr	r3, [r7, #12]
}
 800f906:	4618      	mov	r0, r3
 800f908:	3710      	adds	r7, #16
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}

0800f90e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800f90e:	b580      	push	{r7, lr}
 800f910:	b086      	sub	sp, #24
 800f912:	af00      	add	r7, sp, #0
 800f914:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800f916:	2300      	movs	r3, #0
 800f918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f91a:	f3ef 8305 	mrs	r3, IPSR
 800f91e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f920:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800f922:	2b00      	cmp	r3, #0
 800f924:	d12d      	bne.n	800f982 <osEventFlagsNew+0x74>
    mem = -1;
 800f926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f92a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d015      	beq.n	800f95e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	689b      	ldr	r3, [r3, #8]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d006      	beq.n	800f948 <osEventFlagsNew+0x3a>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	2b1f      	cmp	r3, #31
 800f940:	d902      	bls.n	800f948 <osEventFlagsNew+0x3a>
        mem = 1;
 800f942:	2301      	movs	r3, #1
 800f944:	613b      	str	r3, [r7, #16]
 800f946:	e00c      	b.n	800f962 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	689b      	ldr	r3, [r3, #8]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d108      	bne.n	800f962 <osEventFlagsNew+0x54>
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	68db      	ldr	r3, [r3, #12]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d104      	bne.n	800f962 <osEventFlagsNew+0x54>
          mem = 0;
 800f958:	2300      	movs	r3, #0
 800f95a:	613b      	str	r3, [r7, #16]
 800f95c:	e001      	b.n	800f962 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800f95e:	2300      	movs	r3, #0
 800f960:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	2b01      	cmp	r3, #1
 800f966:	d106      	bne.n	800f976 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	689b      	ldr	r3, [r3, #8]
 800f96c:	4618      	mov	r0, r3
 800f96e:	f000 f8eb 	bl	800fb48 <xEventGroupCreateStatic>
 800f972:	6178      	str	r0, [r7, #20]
 800f974:	e005      	b.n	800f982 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d102      	bne.n	800f982 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800f97c:	f000 f91b 	bl	800fbb6 <xEventGroupCreate>
 800f980:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800f982:	697b      	ldr	r3, [r7, #20]
}
 800f984:	4618      	mov	r0, r3
 800f986:	3718      	adds	r7, #24
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b086      	sub	sp, #24
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d004      	beq.n	800f9aa <osEventFlagsSet+0x1e>
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d003      	beq.n	800f9b2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800f9aa:	f06f 0303 	mvn.w	r3, #3
 800f9ae:	617b      	str	r3, [r7, #20]
 800f9b0:	e028      	b.n	800fa04 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9b2:	f3ef 8305 	mrs	r3, IPSR
 800f9b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800f9b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d01d      	beq.n	800f9fa <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800f9c2:	f107 0308 	add.w	r3, r7, #8
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	6839      	ldr	r1, [r7, #0]
 800f9ca:	6938      	ldr	r0, [r7, #16]
 800f9cc:	f000 fa96 	bl	800fefc <xEventGroupSetBitsFromISR>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d103      	bne.n	800f9de <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800f9d6:	f06f 0302 	mvn.w	r3, #2
 800f9da:	617b      	str	r3, [r7, #20]
 800f9dc:	e012      	b.n	800fa04 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d00d      	beq.n	800fa04 <osEventFlagsSet+0x78>
 800f9e8:	4b09      	ldr	r3, [pc, #36]	; (800fa10 <osEventFlagsSet+0x84>)
 800f9ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9ee:	601a      	str	r2, [r3, #0]
 800f9f0:	f3bf 8f4f 	dsb	sy
 800f9f4:	f3bf 8f6f 	isb	sy
 800f9f8:	e004      	b.n	800fa04 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800f9fa:	6839      	ldr	r1, [r7, #0]
 800f9fc:	6938      	ldr	r0, [r7, #16]
 800f9fe:	f000 f9c3 	bl	800fd88 <xEventGroupSetBits>
 800fa02:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800fa04:	697b      	ldr	r3, [r7, #20]
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3718      	adds	r7, #24
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
 800fa0e:	bf00      	nop
 800fa10:	e000ed04 	.word	0xe000ed04

0800fa14 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b08c      	sub	sp, #48	; 0x30
 800fa18:	af02      	add	r7, sp, #8
 800fa1a:	60f8      	str	r0, [r7, #12]
 800fa1c:	60b9      	str	r1, [r7, #8]
 800fa1e:	607a      	str	r2, [r7, #4]
 800fa20:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d004      	beq.n	800fa36 <osEventFlagsWait+0x22>
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d003      	beq.n	800fa3e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800fa36:	f06f 0303 	mvn.w	r3, #3
 800fa3a:	61fb      	str	r3, [r7, #28]
 800fa3c:	e04b      	b.n	800fad6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa3e:	f3ef 8305 	mrs	r3, IPSR
 800fa42:	617b      	str	r3, [r7, #20]
  return(result);
 800fa44:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d003      	beq.n	800fa52 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800fa4a:	f06f 0305 	mvn.w	r3, #5
 800fa4e:	61fb      	str	r3, [r7, #28]
 800fa50:	e041      	b.n	800fad6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	f003 0301 	and.w	r3, r3, #1
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d002      	beq.n	800fa62 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	627b      	str	r3, [r7, #36]	; 0x24
 800fa60:	e001      	b.n	800fa66 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800fa62:	2300      	movs	r3, #0
 800fa64:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f003 0302 	and.w	r3, r3, #2
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d002      	beq.n	800fa76 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800fa70:	2300      	movs	r3, #0
 800fa72:	623b      	str	r3, [r7, #32]
 800fa74:	e001      	b.n	800fa7a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800fa76:	2301      	movs	r3, #1
 800fa78:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	9300      	str	r3, [sp, #0]
 800fa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa80:	6a3a      	ldr	r2, [r7, #32]
 800fa82:	68b9      	ldr	r1, [r7, #8]
 800fa84:	69b8      	ldr	r0, [r7, #24]
 800fa86:	f000 f8b1 	bl	800fbec <xEventGroupWaitBits>
 800fa8a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f003 0301 	and.w	r3, r3, #1
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d010      	beq.n	800fab8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800fa96:	68ba      	ldr	r2, [r7, #8]
 800fa98:	69fb      	ldr	r3, [r7, #28]
 800fa9a:	4013      	ands	r3, r2
 800fa9c:	68ba      	ldr	r2, [r7, #8]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d019      	beq.n	800fad6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d003      	beq.n	800fab0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800faa8:	f06f 0301 	mvn.w	r3, #1
 800faac:	61fb      	str	r3, [r7, #28]
 800faae:	e012      	b.n	800fad6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800fab0:	f06f 0302 	mvn.w	r3, #2
 800fab4:	61fb      	str	r3, [r7, #28]
 800fab6:	e00e      	b.n	800fad6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800fab8:	68ba      	ldr	r2, [r7, #8]
 800faba:	69fb      	ldr	r3, [r7, #28]
 800fabc:	4013      	ands	r3, r2
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d109      	bne.n	800fad6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d003      	beq.n	800fad0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800fac8:	f06f 0301 	mvn.w	r3, #1
 800facc:	61fb      	str	r3, [r7, #28]
 800face:	e002      	b.n	800fad6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800fad0:	f06f 0302 	mvn.w	r3, #2
 800fad4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800fad6:	69fb      	ldr	r3, [r7, #28]
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3728      	adds	r7, #40	; 0x28
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fae0:	b480      	push	{r7}
 800fae2:	b085      	sub	sp, #20
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	4a07      	ldr	r2, [pc, #28]	; (800fb0c <vApplicationGetIdleTaskMemory+0x2c>)
 800faf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	4a06      	ldr	r2, [pc, #24]	; (800fb10 <vApplicationGetIdleTaskMemory+0x30>)
 800faf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2280      	movs	r2, #128	; 0x80
 800fafc:	601a      	str	r2, [r3, #0]
}
 800fafe:	bf00      	nop
 800fb00:	3714      	adds	r7, #20
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr
 800fb0a:	bf00      	nop
 800fb0c:	24000640 	.word	0x24000640
 800fb10:	2400069c 	.word	0x2400069c

0800fb14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fb14:	b480      	push	{r7}
 800fb16:	b085      	sub	sp, #20
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	60f8      	str	r0, [r7, #12]
 800fb1c:	60b9      	str	r1, [r7, #8]
 800fb1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	4a07      	ldr	r2, [pc, #28]	; (800fb40 <vApplicationGetTimerTaskMemory+0x2c>)
 800fb24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	4a06      	ldr	r2, [pc, #24]	; (800fb44 <vApplicationGetTimerTaskMemory+0x30>)
 800fb2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fb32:	601a      	str	r2, [r3, #0]
}
 800fb34:	bf00      	nop
 800fb36:	3714      	adds	r7, #20
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3e:	4770      	bx	lr
 800fb40:	2400089c 	.word	0x2400089c
 800fb44:	240008f8 	.word	0x240008f8

0800fb48 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b086      	sub	sp, #24
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d10a      	bne.n	800fb6c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fb56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5a:	f383 8811 	msr	BASEPRI, r3
 800fb5e:	f3bf 8f6f 	isb	sy
 800fb62:	f3bf 8f4f 	dsb	sy
 800fb66:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fb68:	bf00      	nop
 800fb6a:	e7fe      	b.n	800fb6a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800fb6c:	2320      	movs	r3, #32
 800fb6e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	2b20      	cmp	r3, #32
 800fb74:	d00a      	beq.n	800fb8c <xEventGroupCreateStatic+0x44>
	__asm volatile
 800fb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7a:	f383 8811 	msr	BASEPRI, r3
 800fb7e:	f3bf 8f6f 	isb	sy
 800fb82:	f3bf 8f4f 	dsb	sy
 800fb86:	60fb      	str	r3, [r7, #12]
}
 800fb88:	bf00      	nop
 800fb8a:	e7fe      	b.n	800fb8a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d00a      	beq.n	800fbac <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	3304      	adds	r3, #4
 800fba0:	4618      	mov	r0, r3
 800fba2:	f000 f9bf 	bl	800ff24 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	2201      	movs	r2, #1
 800fbaa:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800fbac:	697b      	ldr	r3, [r7, #20]
	}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3718      	adds	r7, #24
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}

0800fbb6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800fbb6:	b580      	push	{r7, lr}
 800fbb8:	b082      	sub	sp, #8
 800fbba:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800fbbc:	2020      	movs	r0, #32
 800fbbe:	f002 fcc3 	bl	8012548 <pvPortMalloc>
 800fbc2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d00a      	beq.n	800fbe0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f000 f9a5 	bl	800ff24 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800fbe0:	687b      	ldr	r3, [r7, #4]
	}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3708      	adds	r7, #8
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
	...

0800fbec <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b090      	sub	sp, #64	; 0x40
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	607a      	str	r2, [r7, #4]
 800fbf8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800fc02:	2300      	movs	r3, #0
 800fc04:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d10a      	bne.n	800fc22 <xEventGroupWaitBits+0x36>
	__asm volatile
 800fc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc10:	f383 8811 	msr	BASEPRI, r3
 800fc14:	f3bf 8f6f 	isb	sy
 800fc18:	f3bf 8f4f 	dsb	sy
 800fc1c:	623b      	str	r3, [r7, #32]
}
 800fc1e:	bf00      	nop
 800fc20:	e7fe      	b.n	800fc20 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d00a      	beq.n	800fc42 <xEventGroupWaitBits+0x56>
	__asm volatile
 800fc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc30:	f383 8811 	msr	BASEPRI, r3
 800fc34:	f3bf 8f6f 	isb	sy
 800fc38:	f3bf 8f4f 	dsb	sy
 800fc3c:	61fb      	str	r3, [r7, #28]
}
 800fc3e:	bf00      	nop
 800fc40:	e7fe      	b.n	800fc40 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d10a      	bne.n	800fc5e <xEventGroupWaitBits+0x72>
	__asm volatile
 800fc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4c:	f383 8811 	msr	BASEPRI, r3
 800fc50:	f3bf 8f6f 	isb	sy
 800fc54:	f3bf 8f4f 	dsb	sy
 800fc58:	61bb      	str	r3, [r7, #24]
}
 800fc5a:	bf00      	nop
 800fc5c:	e7fe      	b.n	800fc5c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc5e:	f001 fdbd 	bl	80117dc <xTaskGetSchedulerState>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d102      	bne.n	800fc6e <xEventGroupWaitBits+0x82>
 800fc68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d101      	bne.n	800fc72 <xEventGroupWaitBits+0x86>
 800fc6e:	2301      	movs	r3, #1
 800fc70:	e000      	b.n	800fc74 <xEventGroupWaitBits+0x88>
 800fc72:	2300      	movs	r3, #0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d10a      	bne.n	800fc8e <xEventGroupWaitBits+0xa2>
	__asm volatile
 800fc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc7c:	f383 8811 	msr	BASEPRI, r3
 800fc80:	f3bf 8f6f 	isb	sy
 800fc84:	f3bf 8f4f 	dsb	sy
 800fc88:	617b      	str	r3, [r7, #20]
}
 800fc8a:	bf00      	nop
 800fc8c:	e7fe      	b.n	800fc8c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800fc8e:	f001 f925 	bl	8010edc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800fc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800fc98:	683a      	ldr	r2, [r7, #0]
 800fc9a:	68b9      	ldr	r1, [r7, #8]
 800fc9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc9e:	f000 f90b 	bl	800feb8 <prvTestWaitCondition>
 800fca2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800fca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d00e      	beq.n	800fcc8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800fcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcac:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d028      	beq.n	800fd0a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800fcb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcba:	681a      	ldr	r2, [r3, #0]
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	43db      	mvns	r3, r3
 800fcc0:	401a      	ands	r2, r3
 800fcc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcc4:	601a      	str	r2, [r3, #0]
 800fcc6:	e020      	b.n	800fd0a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800fcc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d104      	bne.n	800fcd8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800fcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	633b      	str	r3, [r7, #48]	; 0x30
 800fcd6:	e018      	b.n	800fd0a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d003      	beq.n	800fce6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800fcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fce4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d003      	beq.n	800fcf4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800fcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fcf2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800fcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcf6:	1d18      	adds	r0, r3, #4
 800fcf8:	68ba      	ldr	r2, [r7, #8]
 800fcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd00:	4619      	mov	r1, r3
 800fd02:	f001 fae3 	bl	80112cc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800fd06:	2300      	movs	r3, #0
 800fd08:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800fd0a:	f001 f8f5 	bl	8010ef8 <xTaskResumeAll>
 800fd0e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800fd10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d031      	beq.n	800fd7a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800fd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d107      	bne.n	800fd2c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800fd1c:	4b19      	ldr	r3, [pc, #100]	; (800fd84 <xEventGroupWaitBits+0x198>)
 800fd1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd22:	601a      	str	r2, [r3, #0]
 800fd24:	f3bf 8f4f 	dsb	sy
 800fd28:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800fd2c:	f001 fde2 	bl	80118f4 <uxTaskResetEventItemValue>
 800fd30:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800fd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d11a      	bne.n	800fd72 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800fd3c:	f002 fae2 	bl	8012304 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800fd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800fd46:	683a      	ldr	r2, [r7, #0]
 800fd48:	68b9      	ldr	r1, [r7, #8]
 800fd4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fd4c:	f000 f8b4 	bl	800feb8 <prvTestWaitCondition>
 800fd50:	4603      	mov	r3, r0
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d009      	beq.n	800fd6a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d006      	beq.n	800fd6a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800fd5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd5e:	681a      	ldr	r2, [r3, #0]
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	43db      	mvns	r3, r3
 800fd64:	401a      	ands	r2, r3
 800fd66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd68:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800fd6e:	f002 faf9 	bl	8012364 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800fd72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fd78:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800fd7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3740      	adds	r7, #64	; 0x40
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}
 800fd84:	e000ed04 	.word	0xe000ed04

0800fd88 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b08e      	sub	sp, #56	; 0x38
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800fd92:	2300      	movs	r3, #0
 800fd94:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d10a      	bne.n	800fdba <xEventGroupSetBits+0x32>
	__asm volatile
 800fda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda8:	f383 8811 	msr	BASEPRI, r3
 800fdac:	f3bf 8f6f 	isb	sy
 800fdb0:	f3bf 8f4f 	dsb	sy
 800fdb4:	613b      	str	r3, [r7, #16]
}
 800fdb6:	bf00      	nop
 800fdb8:	e7fe      	b.n	800fdb8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d00a      	beq.n	800fdda <xEventGroupSetBits+0x52>
	__asm volatile
 800fdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc8:	f383 8811 	msr	BASEPRI, r3
 800fdcc:	f3bf 8f6f 	isb	sy
 800fdd0:	f3bf 8f4f 	dsb	sy
 800fdd4:	60fb      	str	r3, [r7, #12]
}
 800fdd6:	bf00      	nop
 800fdd8:	e7fe      	b.n	800fdd8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800fdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fddc:	3304      	adds	r3, #4
 800fdde:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde2:	3308      	adds	r3, #8
 800fde4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800fde6:	f001 f879 	bl	8010edc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800fdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdec:	68db      	ldr	r3, [r3, #12]
 800fdee:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800fdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf2:	681a      	ldr	r2, [r3, #0]
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	431a      	orrs	r2, r3
 800fdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdfa:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800fdfc:	e03c      	b.n	800fe78 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800fdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe00:	685b      	ldr	r3, [r3, #4]
 800fe02:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800fe04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800fe0e:	69bb      	ldr	r3, [r7, #24]
 800fe10:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800fe14:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800fe16:	69bb      	ldr	r3, [r7, #24]
 800fe18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fe1c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d108      	bne.n	800fe3a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800fe28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	69bb      	ldr	r3, [r7, #24]
 800fe2e:	4013      	ands	r3, r2
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d00b      	beq.n	800fe4c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800fe34:	2301      	movs	r3, #1
 800fe36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe38:	e008      	b.n	800fe4c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800fe3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3c:	681a      	ldr	r2, [r3, #0]
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	4013      	ands	r3, r2
 800fe42:	69ba      	ldr	r2, [r7, #24]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d101      	bne.n	800fe4c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800fe48:	2301      	movs	r3, #1
 800fe4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800fe4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d010      	beq.n	800fe74 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d003      	beq.n	800fe64 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800fe5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	4313      	orrs	r3, r2
 800fe62:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800fe64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800fe6c:	4619      	mov	r1, r3
 800fe6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe70:	f001 faf8 	bl	8011464 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800fe78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe7a:	6a3b      	ldr	r3, [r7, #32]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d1be      	bne.n	800fdfe <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800fe80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe82:	681a      	ldr	r2, [r3, #0]
 800fe84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe86:	43db      	mvns	r3, r3
 800fe88:	401a      	ands	r2, r3
 800fe8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe8c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800fe8e:	f001 f833 	bl	8010ef8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800fe92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe94:	681b      	ldr	r3, [r3, #0]
}
 800fe96:	4618      	mov	r0, r3
 800fe98:	3738      	adds	r7, #56	; 0x38
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}

0800fe9e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800fe9e:	b580      	push	{r7, lr}
 800fea0:	b082      	sub	sp, #8
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	6078      	str	r0, [r7, #4]
 800fea6:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800fea8:	6839      	ldr	r1, [r7, #0]
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f7ff ff6c 	bl	800fd88 <xEventGroupSetBits>
}
 800feb0:	bf00      	nop
 800feb2:	3708      	adds	r7, #8
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}

0800feb8 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800feb8:	b480      	push	{r7}
 800feba:	b087      	sub	sp, #28
 800febc:	af00      	add	r7, sp, #0
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	60b9      	str	r1, [r7, #8]
 800fec2:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800fec4:	2300      	movs	r3, #0
 800fec6:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d107      	bne.n	800fede <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	4013      	ands	r3, r2
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d00a      	beq.n	800feee <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800fed8:	2301      	movs	r3, #1
 800feda:	617b      	str	r3, [r7, #20]
 800fedc:	e007      	b.n	800feee <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800fede:	68fa      	ldr	r2, [r7, #12]
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	4013      	ands	r3, r2
 800fee4:	68ba      	ldr	r2, [r7, #8]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d101      	bne.n	800feee <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800feea:	2301      	movs	r3, #1
 800feec:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800feee:	697b      	ldr	r3, [r7, #20]
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	371c      	adds	r7, #28
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b086      	sub	sp, #24
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	60b9      	str	r1, [r7, #8]
 800ff06:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	68ba      	ldr	r2, [r7, #8]
 800ff0c:	68f9      	ldr	r1, [r7, #12]
 800ff0e:	4804      	ldr	r0, [pc, #16]	; (800ff20 <xEventGroupSetBitsFromISR+0x24>)
 800ff10:	f002 f8aa 	bl	8012068 <xTimerPendFunctionCallFromISR>
 800ff14:	6178      	str	r0, [r7, #20]

		return xReturn;
 800ff16:	697b      	ldr	r3, [r7, #20]
	}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3718      	adds	r7, #24
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	0800fe9f 	.word	0x0800fe9f

0800ff24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ff24:	b480      	push	{r7}
 800ff26:	b083      	sub	sp, #12
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f103 0208 	add.w	r2, r3, #8
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f103 0208 	add.w	r2, r3, #8
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f103 0208 	add.w	r2, r3, #8
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2200      	movs	r2, #0
 800ff56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ff58:	bf00      	nop
 800ff5a:	370c      	adds	r7, #12
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ff64:	b480      	push	{r7}
 800ff66:	b083      	sub	sp, #12
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ff72:	bf00      	nop
 800ff74:	370c      	adds	r7, #12
 800ff76:	46bd      	mov	sp, r7
 800ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7c:	4770      	bx	lr

0800ff7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff7e:	b480      	push	{r7}
 800ff80:	b085      	sub	sp, #20
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
 800ff86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	685b      	ldr	r3, [r3, #4]
 800ff8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	68fa      	ldr	r2, [r7, #12]
 800ff92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	689a      	ldr	r2, [r3, #8]
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	689b      	ldr	r3, [r3, #8]
 800ffa0:	683a      	ldr	r2, [r7, #0]
 800ffa2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	683a      	ldr	r2, [r7, #0]
 800ffa8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	1c5a      	adds	r2, r3, #1
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	601a      	str	r2, [r3, #0]
}
 800ffba:	bf00      	nop
 800ffbc:	3714      	adds	r7, #20
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc4:	4770      	bx	lr

0800ffc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ffc6:	b480      	push	{r7}
 800ffc8:	b085      	sub	sp, #20
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	6078      	str	r0, [r7, #4]
 800ffce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ffdc:	d103      	bne.n	800ffe6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	691b      	ldr	r3, [r3, #16]
 800ffe2:	60fb      	str	r3, [r7, #12]
 800ffe4:	e00c      	b.n	8010000 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	3308      	adds	r3, #8
 800ffea:	60fb      	str	r3, [r7, #12]
 800ffec:	e002      	b.n	800fff4 <vListInsert+0x2e>
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	60fb      	str	r3, [r7, #12]
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	68ba      	ldr	r2, [r7, #8]
 800fffc:	429a      	cmp	r2, r3
 800fffe:	d2f6      	bcs.n	800ffee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	685a      	ldr	r2, [r3, #4]
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	683a      	ldr	r2, [r7, #0]
 801000e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	68fa      	ldr	r2, [r7, #12]
 8010014:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	683a      	ldr	r2, [r7, #0]
 801001a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	1c5a      	adds	r2, r3, #1
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	601a      	str	r2, [r3, #0]
}
 801002c:	bf00      	nop
 801002e:	3714      	adds	r7, #20
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr

08010038 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010038:	b480      	push	{r7}
 801003a:	b085      	sub	sp, #20
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	691b      	ldr	r3, [r3, #16]
 8010044:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	687a      	ldr	r2, [r7, #4]
 801004c:	6892      	ldr	r2, [r2, #8]
 801004e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	689b      	ldr	r3, [r3, #8]
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	6852      	ldr	r2, [r2, #4]
 8010058:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	429a      	cmp	r2, r3
 8010062:	d103      	bne.n	801006c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	689a      	ldr	r2, [r3, #8]
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	1e5a      	subs	r2, r3, #1
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
}
 8010080:	4618      	mov	r0, r3
 8010082:	3714      	adds	r7, #20
 8010084:	46bd      	mov	sp, r7
 8010086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008a:	4770      	bx	lr

0801008c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b084      	sub	sp, #16
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d10a      	bne.n	80100b6 <xQueueGenericReset+0x2a>
	__asm volatile
 80100a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a4:	f383 8811 	msr	BASEPRI, r3
 80100a8:	f3bf 8f6f 	isb	sy
 80100ac:	f3bf 8f4f 	dsb	sy
 80100b0:	60bb      	str	r3, [r7, #8]
}
 80100b2:	bf00      	nop
 80100b4:	e7fe      	b.n	80100b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80100b6:	f002 f925 	bl	8012304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	681a      	ldr	r2, [r3, #0]
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100c2:	68f9      	ldr	r1, [r7, #12]
 80100c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80100c6:	fb01 f303 	mul.w	r3, r1, r3
 80100ca:	441a      	add	r2, r3
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2200      	movs	r2, #0
 80100d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100e6:	3b01      	subs	r3, #1
 80100e8:	68f9      	ldr	r1, [r7, #12]
 80100ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80100ec:	fb01 f303 	mul.w	r3, r1, r3
 80100f0:	441a      	add	r2, r3
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	22ff      	movs	r2, #255	; 0xff
 80100fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	22ff      	movs	r2, #255	; 0xff
 8010102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d114      	bne.n	8010136 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	691b      	ldr	r3, [r3, #16]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d01a      	beq.n	801014a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	3310      	adds	r3, #16
 8010118:	4618      	mov	r0, r3
 801011a:	f001 f93f 	bl	801139c <xTaskRemoveFromEventList>
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d012      	beq.n	801014a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010124:	4b0c      	ldr	r3, [pc, #48]	; (8010158 <xQueueGenericReset+0xcc>)
 8010126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801012a:	601a      	str	r2, [r3, #0]
 801012c:	f3bf 8f4f 	dsb	sy
 8010130:	f3bf 8f6f 	isb	sy
 8010134:	e009      	b.n	801014a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	3310      	adds	r3, #16
 801013a:	4618      	mov	r0, r3
 801013c:	f7ff fef2 	bl	800ff24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	3324      	adds	r3, #36	; 0x24
 8010144:	4618      	mov	r0, r3
 8010146:	f7ff feed 	bl	800ff24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801014a:	f002 f90b 	bl	8012364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801014e:	2301      	movs	r3, #1
}
 8010150:	4618      	mov	r0, r3
 8010152:	3710      	adds	r7, #16
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	e000ed04 	.word	0xe000ed04

0801015c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801015c:	b580      	push	{r7, lr}
 801015e:	b08e      	sub	sp, #56	; 0x38
 8010160:	af02      	add	r7, sp, #8
 8010162:	60f8      	str	r0, [r7, #12]
 8010164:	60b9      	str	r1, [r7, #8]
 8010166:	607a      	str	r2, [r7, #4]
 8010168:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d10a      	bne.n	8010186 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010174:	f383 8811 	msr	BASEPRI, r3
 8010178:	f3bf 8f6f 	isb	sy
 801017c:	f3bf 8f4f 	dsb	sy
 8010180:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010182:	bf00      	nop
 8010184:	e7fe      	b.n	8010184 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d10a      	bne.n	80101a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801018c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010190:	f383 8811 	msr	BASEPRI, r3
 8010194:	f3bf 8f6f 	isb	sy
 8010198:	f3bf 8f4f 	dsb	sy
 801019c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801019e:	bf00      	nop
 80101a0:	e7fe      	b.n	80101a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d002      	beq.n	80101ae <xQueueGenericCreateStatic+0x52>
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d001      	beq.n	80101b2 <xQueueGenericCreateStatic+0x56>
 80101ae:	2301      	movs	r3, #1
 80101b0:	e000      	b.n	80101b4 <xQueueGenericCreateStatic+0x58>
 80101b2:	2300      	movs	r3, #0
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d10a      	bne.n	80101ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80101b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101bc:	f383 8811 	msr	BASEPRI, r3
 80101c0:	f3bf 8f6f 	isb	sy
 80101c4:	f3bf 8f4f 	dsb	sy
 80101c8:	623b      	str	r3, [r7, #32]
}
 80101ca:	bf00      	nop
 80101cc:	e7fe      	b.n	80101cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d102      	bne.n	80101da <xQueueGenericCreateStatic+0x7e>
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d101      	bne.n	80101de <xQueueGenericCreateStatic+0x82>
 80101da:	2301      	movs	r3, #1
 80101dc:	e000      	b.n	80101e0 <xQueueGenericCreateStatic+0x84>
 80101de:	2300      	movs	r3, #0
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d10a      	bne.n	80101fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80101e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e8:	f383 8811 	msr	BASEPRI, r3
 80101ec:	f3bf 8f6f 	isb	sy
 80101f0:	f3bf 8f4f 	dsb	sy
 80101f4:	61fb      	str	r3, [r7, #28]
}
 80101f6:	bf00      	nop
 80101f8:	e7fe      	b.n	80101f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80101fa:	2350      	movs	r3, #80	; 0x50
 80101fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	2b50      	cmp	r3, #80	; 0x50
 8010202:	d00a      	beq.n	801021a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010208:	f383 8811 	msr	BASEPRI, r3
 801020c:	f3bf 8f6f 	isb	sy
 8010210:	f3bf 8f4f 	dsb	sy
 8010214:	61bb      	str	r3, [r7, #24]
}
 8010216:	bf00      	nop
 8010218:	e7fe      	b.n	8010218 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801021a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010222:	2b00      	cmp	r3, #0
 8010224:	d00d      	beq.n	8010242 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010228:	2201      	movs	r2, #1
 801022a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801022e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010234:	9300      	str	r3, [sp, #0]
 8010236:	4613      	mov	r3, r2
 8010238:	687a      	ldr	r2, [r7, #4]
 801023a:	68b9      	ldr	r1, [r7, #8]
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f000 f805 	bl	801024c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010244:	4618      	mov	r0, r3
 8010246:	3730      	adds	r7, #48	; 0x30
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}

0801024c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	60b9      	str	r1, [r7, #8]
 8010256:	607a      	str	r2, [r7, #4]
 8010258:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d103      	bne.n	8010268 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	69ba      	ldr	r2, [r7, #24]
 8010264:	601a      	str	r2, [r3, #0]
 8010266:	e002      	b.n	801026e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010268:	69bb      	ldr	r3, [r7, #24]
 801026a:	687a      	ldr	r2, [r7, #4]
 801026c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801026e:	69bb      	ldr	r3, [r7, #24]
 8010270:	68fa      	ldr	r2, [r7, #12]
 8010272:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010274:	69bb      	ldr	r3, [r7, #24]
 8010276:	68ba      	ldr	r2, [r7, #8]
 8010278:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801027a:	2101      	movs	r1, #1
 801027c:	69b8      	ldr	r0, [r7, #24]
 801027e:	f7ff ff05 	bl	801008c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010282:	69bb      	ldr	r3, [r7, #24]
 8010284:	78fa      	ldrb	r2, [r7, #3]
 8010286:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801028a:	bf00      	nop
 801028c:	3710      	adds	r7, #16
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
	...

08010294 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b08e      	sub	sp, #56	; 0x38
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	607a      	str	r2, [r7, #4]
 80102a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80102a2:	2300      	movs	r3, #0
 80102a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80102aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d10a      	bne.n	80102c6 <xQueueGenericSend+0x32>
	__asm volatile
 80102b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b4:	f383 8811 	msr	BASEPRI, r3
 80102b8:	f3bf 8f6f 	isb	sy
 80102bc:	f3bf 8f4f 	dsb	sy
 80102c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80102c2:	bf00      	nop
 80102c4:	e7fe      	b.n	80102c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d103      	bne.n	80102d4 <xQueueGenericSend+0x40>
 80102cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d101      	bne.n	80102d8 <xQueueGenericSend+0x44>
 80102d4:	2301      	movs	r3, #1
 80102d6:	e000      	b.n	80102da <xQueueGenericSend+0x46>
 80102d8:	2300      	movs	r3, #0
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d10a      	bne.n	80102f4 <xQueueGenericSend+0x60>
	__asm volatile
 80102de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e2:	f383 8811 	msr	BASEPRI, r3
 80102e6:	f3bf 8f6f 	isb	sy
 80102ea:	f3bf 8f4f 	dsb	sy
 80102ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80102f0:	bf00      	nop
 80102f2:	e7fe      	b.n	80102f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	2b02      	cmp	r3, #2
 80102f8:	d103      	bne.n	8010302 <xQueueGenericSend+0x6e>
 80102fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102fe:	2b01      	cmp	r3, #1
 8010300:	d101      	bne.n	8010306 <xQueueGenericSend+0x72>
 8010302:	2301      	movs	r3, #1
 8010304:	e000      	b.n	8010308 <xQueueGenericSend+0x74>
 8010306:	2300      	movs	r3, #0
 8010308:	2b00      	cmp	r3, #0
 801030a:	d10a      	bne.n	8010322 <xQueueGenericSend+0x8e>
	__asm volatile
 801030c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010310:	f383 8811 	msr	BASEPRI, r3
 8010314:	f3bf 8f6f 	isb	sy
 8010318:	f3bf 8f4f 	dsb	sy
 801031c:	623b      	str	r3, [r7, #32]
}
 801031e:	bf00      	nop
 8010320:	e7fe      	b.n	8010320 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010322:	f001 fa5b 	bl	80117dc <xTaskGetSchedulerState>
 8010326:	4603      	mov	r3, r0
 8010328:	2b00      	cmp	r3, #0
 801032a:	d102      	bne.n	8010332 <xQueueGenericSend+0x9e>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d101      	bne.n	8010336 <xQueueGenericSend+0xa2>
 8010332:	2301      	movs	r3, #1
 8010334:	e000      	b.n	8010338 <xQueueGenericSend+0xa4>
 8010336:	2300      	movs	r3, #0
 8010338:	2b00      	cmp	r3, #0
 801033a:	d10a      	bne.n	8010352 <xQueueGenericSend+0xbe>
	__asm volatile
 801033c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010340:	f383 8811 	msr	BASEPRI, r3
 8010344:	f3bf 8f6f 	isb	sy
 8010348:	f3bf 8f4f 	dsb	sy
 801034c:	61fb      	str	r3, [r7, #28]
}
 801034e:	bf00      	nop
 8010350:	e7fe      	b.n	8010350 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010352:	f001 ffd7 	bl	8012304 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801035a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801035c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801035e:	429a      	cmp	r2, r3
 8010360:	d302      	bcc.n	8010368 <xQueueGenericSend+0xd4>
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	2b02      	cmp	r3, #2
 8010366:	d129      	bne.n	80103bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010368:	683a      	ldr	r2, [r7, #0]
 801036a:	68b9      	ldr	r1, [r7, #8]
 801036c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801036e:	f000 fa0b 	bl	8010788 <prvCopyDataToQueue>
 8010372:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010378:	2b00      	cmp	r3, #0
 801037a:	d010      	beq.n	801039e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801037c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801037e:	3324      	adds	r3, #36	; 0x24
 8010380:	4618      	mov	r0, r3
 8010382:	f001 f80b 	bl	801139c <xTaskRemoveFromEventList>
 8010386:	4603      	mov	r3, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	d013      	beq.n	80103b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801038c:	4b3f      	ldr	r3, [pc, #252]	; (801048c <xQueueGenericSend+0x1f8>)
 801038e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010392:	601a      	str	r2, [r3, #0]
 8010394:	f3bf 8f4f 	dsb	sy
 8010398:	f3bf 8f6f 	isb	sy
 801039c:	e00a      	b.n	80103b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801039e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d007      	beq.n	80103b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80103a4:	4b39      	ldr	r3, [pc, #228]	; (801048c <xQueueGenericSend+0x1f8>)
 80103a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103aa:	601a      	str	r2, [r3, #0]
 80103ac:	f3bf 8f4f 	dsb	sy
 80103b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80103b4:	f001 ffd6 	bl	8012364 <vPortExitCritical>
				return pdPASS;
 80103b8:	2301      	movs	r3, #1
 80103ba:	e063      	b.n	8010484 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d103      	bne.n	80103ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80103c2:	f001 ffcf 	bl	8012364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80103c6:	2300      	movs	r3, #0
 80103c8:	e05c      	b.n	8010484 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80103ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d106      	bne.n	80103de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80103d0:	f107 0314 	add.w	r3, r7, #20
 80103d4:	4618      	mov	r0, r3
 80103d6:	f001 f8a7 	bl	8011528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80103da:	2301      	movs	r3, #1
 80103dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80103de:	f001 ffc1 	bl	8012364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80103e2:	f000 fd7b 	bl	8010edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80103e6:	f001 ff8d 	bl	8012304 <vPortEnterCritical>
 80103ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80103f0:	b25b      	sxtb	r3, r3
 80103f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103f6:	d103      	bne.n	8010400 <xQueueGenericSend+0x16c>
 80103f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103fa:	2200      	movs	r2, #0
 80103fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010402:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010406:	b25b      	sxtb	r3, r3
 8010408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801040c:	d103      	bne.n	8010416 <xQueueGenericSend+0x182>
 801040e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010410:	2200      	movs	r2, #0
 8010412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010416:	f001 ffa5 	bl	8012364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801041a:	1d3a      	adds	r2, r7, #4
 801041c:	f107 0314 	add.w	r3, r7, #20
 8010420:	4611      	mov	r1, r2
 8010422:	4618      	mov	r0, r3
 8010424:	f001 f896 	bl	8011554 <xTaskCheckForTimeOut>
 8010428:	4603      	mov	r3, r0
 801042a:	2b00      	cmp	r3, #0
 801042c:	d124      	bne.n	8010478 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801042e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010430:	f000 faa2 	bl	8010978 <prvIsQueueFull>
 8010434:	4603      	mov	r3, r0
 8010436:	2b00      	cmp	r3, #0
 8010438:	d018      	beq.n	801046c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801043a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801043c:	3310      	adds	r3, #16
 801043e:	687a      	ldr	r2, [r7, #4]
 8010440:	4611      	mov	r1, r2
 8010442:	4618      	mov	r0, r3
 8010444:	f000 ff1e 	bl	8011284 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801044a:	f000 fa2d 	bl	80108a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801044e:	f000 fd53 	bl	8010ef8 <xTaskResumeAll>
 8010452:	4603      	mov	r3, r0
 8010454:	2b00      	cmp	r3, #0
 8010456:	f47f af7c 	bne.w	8010352 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801045a:	4b0c      	ldr	r3, [pc, #48]	; (801048c <xQueueGenericSend+0x1f8>)
 801045c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010460:	601a      	str	r2, [r3, #0]
 8010462:	f3bf 8f4f 	dsb	sy
 8010466:	f3bf 8f6f 	isb	sy
 801046a:	e772      	b.n	8010352 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801046c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801046e:	f000 fa1b 	bl	80108a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010472:	f000 fd41 	bl	8010ef8 <xTaskResumeAll>
 8010476:	e76c      	b.n	8010352 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801047a:	f000 fa15 	bl	80108a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801047e:	f000 fd3b 	bl	8010ef8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010482:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010484:	4618      	mov	r0, r3
 8010486:	3738      	adds	r7, #56	; 0x38
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	e000ed04 	.word	0xe000ed04

08010490 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b090      	sub	sp, #64	; 0x40
 8010494:	af00      	add	r7, sp, #0
 8010496:	60f8      	str	r0, [r7, #12]
 8010498:	60b9      	str	r1, [r7, #8]
 801049a:	607a      	str	r2, [r7, #4]
 801049c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80104a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d10a      	bne.n	80104be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80104a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104ac:	f383 8811 	msr	BASEPRI, r3
 80104b0:	f3bf 8f6f 	isb	sy
 80104b4:	f3bf 8f4f 	dsb	sy
 80104b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80104ba:	bf00      	nop
 80104bc:	e7fe      	b.n	80104bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d103      	bne.n	80104cc <xQueueGenericSendFromISR+0x3c>
 80104c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d101      	bne.n	80104d0 <xQueueGenericSendFromISR+0x40>
 80104cc:	2301      	movs	r3, #1
 80104ce:	e000      	b.n	80104d2 <xQueueGenericSendFromISR+0x42>
 80104d0:	2300      	movs	r3, #0
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d10a      	bne.n	80104ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80104d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104da:	f383 8811 	msr	BASEPRI, r3
 80104de:	f3bf 8f6f 	isb	sy
 80104e2:	f3bf 8f4f 	dsb	sy
 80104e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80104e8:	bf00      	nop
 80104ea:	e7fe      	b.n	80104ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	2b02      	cmp	r3, #2
 80104f0:	d103      	bne.n	80104fa <xQueueGenericSendFromISR+0x6a>
 80104f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	d101      	bne.n	80104fe <xQueueGenericSendFromISR+0x6e>
 80104fa:	2301      	movs	r3, #1
 80104fc:	e000      	b.n	8010500 <xQueueGenericSendFromISR+0x70>
 80104fe:	2300      	movs	r3, #0
 8010500:	2b00      	cmp	r3, #0
 8010502:	d10a      	bne.n	801051a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010508:	f383 8811 	msr	BASEPRI, r3
 801050c:	f3bf 8f6f 	isb	sy
 8010510:	f3bf 8f4f 	dsb	sy
 8010514:	623b      	str	r3, [r7, #32]
}
 8010516:	bf00      	nop
 8010518:	e7fe      	b.n	8010518 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801051a:	f001 ffd5 	bl	80124c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801051e:	f3ef 8211 	mrs	r2, BASEPRI
 8010522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010526:	f383 8811 	msr	BASEPRI, r3
 801052a:	f3bf 8f6f 	isb	sy
 801052e:	f3bf 8f4f 	dsb	sy
 8010532:	61fa      	str	r2, [r7, #28]
 8010534:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010536:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010538:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801053a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801053e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010542:	429a      	cmp	r2, r3
 8010544:	d302      	bcc.n	801054c <xQueueGenericSendFromISR+0xbc>
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	2b02      	cmp	r3, #2
 801054a:	d12f      	bne.n	80105ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801054c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801054e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801055a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801055c:	683a      	ldr	r2, [r7, #0]
 801055e:	68b9      	ldr	r1, [r7, #8]
 8010560:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010562:	f000 f911 	bl	8010788 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010566:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801056a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801056e:	d112      	bne.n	8010596 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010574:	2b00      	cmp	r3, #0
 8010576:	d016      	beq.n	80105a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801057a:	3324      	adds	r3, #36	; 0x24
 801057c:	4618      	mov	r0, r3
 801057e:	f000 ff0d 	bl	801139c <xTaskRemoveFromEventList>
 8010582:	4603      	mov	r3, r0
 8010584:	2b00      	cmp	r3, #0
 8010586:	d00e      	beq.n	80105a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d00b      	beq.n	80105a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2201      	movs	r2, #1
 8010592:	601a      	str	r2, [r3, #0]
 8010594:	e007      	b.n	80105a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010596:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801059a:	3301      	adds	r3, #1
 801059c:	b2db      	uxtb	r3, r3
 801059e:	b25a      	sxtb	r2, r3
 80105a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80105a6:	2301      	movs	r3, #1
 80105a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80105aa:	e001      	b.n	80105b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80105ac:	2300      	movs	r3, #0
 80105ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80105ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80105bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3740      	adds	r7, #64	; 0x40
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}
	...

080105c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b08c      	sub	sp, #48	; 0x30
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	60f8      	str	r0, [r7, #12]
 80105d0:	60b9      	str	r1, [r7, #8]
 80105d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80105d4:	2300      	movs	r3, #0
 80105d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80105dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d10a      	bne.n	80105f8 <xQueueReceive+0x30>
	__asm volatile
 80105e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e6:	f383 8811 	msr	BASEPRI, r3
 80105ea:	f3bf 8f6f 	isb	sy
 80105ee:	f3bf 8f4f 	dsb	sy
 80105f2:	623b      	str	r3, [r7, #32]
}
 80105f4:	bf00      	nop
 80105f6:	e7fe      	b.n	80105f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d103      	bne.n	8010606 <xQueueReceive+0x3e>
 80105fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010602:	2b00      	cmp	r3, #0
 8010604:	d101      	bne.n	801060a <xQueueReceive+0x42>
 8010606:	2301      	movs	r3, #1
 8010608:	e000      	b.n	801060c <xQueueReceive+0x44>
 801060a:	2300      	movs	r3, #0
 801060c:	2b00      	cmp	r3, #0
 801060e:	d10a      	bne.n	8010626 <xQueueReceive+0x5e>
	__asm volatile
 8010610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010614:	f383 8811 	msr	BASEPRI, r3
 8010618:	f3bf 8f6f 	isb	sy
 801061c:	f3bf 8f4f 	dsb	sy
 8010620:	61fb      	str	r3, [r7, #28]
}
 8010622:	bf00      	nop
 8010624:	e7fe      	b.n	8010624 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010626:	f001 f8d9 	bl	80117dc <xTaskGetSchedulerState>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	d102      	bne.n	8010636 <xQueueReceive+0x6e>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d101      	bne.n	801063a <xQueueReceive+0x72>
 8010636:	2301      	movs	r3, #1
 8010638:	e000      	b.n	801063c <xQueueReceive+0x74>
 801063a:	2300      	movs	r3, #0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d10a      	bne.n	8010656 <xQueueReceive+0x8e>
	__asm volatile
 8010640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010644:	f383 8811 	msr	BASEPRI, r3
 8010648:	f3bf 8f6f 	isb	sy
 801064c:	f3bf 8f4f 	dsb	sy
 8010650:	61bb      	str	r3, [r7, #24]
}
 8010652:	bf00      	nop
 8010654:	e7fe      	b.n	8010654 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010656:	f001 fe55 	bl	8012304 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801065a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801065c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801065e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010662:	2b00      	cmp	r3, #0
 8010664:	d01f      	beq.n	80106a6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010666:	68b9      	ldr	r1, [r7, #8]
 8010668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801066a:	f000 f8f7 	bl	801085c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010670:	1e5a      	subs	r2, r3, #1
 8010672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010674:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010678:	691b      	ldr	r3, [r3, #16]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d00f      	beq.n	801069e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801067e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010680:	3310      	adds	r3, #16
 8010682:	4618      	mov	r0, r3
 8010684:	f000 fe8a 	bl	801139c <xTaskRemoveFromEventList>
 8010688:	4603      	mov	r3, r0
 801068a:	2b00      	cmp	r3, #0
 801068c:	d007      	beq.n	801069e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801068e:	4b3d      	ldr	r3, [pc, #244]	; (8010784 <xQueueReceive+0x1bc>)
 8010690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010694:	601a      	str	r2, [r3, #0]
 8010696:	f3bf 8f4f 	dsb	sy
 801069a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801069e:	f001 fe61 	bl	8012364 <vPortExitCritical>
				return pdPASS;
 80106a2:	2301      	movs	r3, #1
 80106a4:	e069      	b.n	801077a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d103      	bne.n	80106b4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80106ac:	f001 fe5a 	bl	8012364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80106b0:	2300      	movs	r3, #0
 80106b2:	e062      	b.n	801077a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80106b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d106      	bne.n	80106c8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80106ba:	f107 0310 	add.w	r3, r7, #16
 80106be:	4618      	mov	r0, r3
 80106c0:	f000 ff32 	bl	8011528 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80106c4:	2301      	movs	r3, #1
 80106c6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80106c8:	f001 fe4c 	bl	8012364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80106cc:	f000 fc06 	bl	8010edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80106d0:	f001 fe18 	bl	8012304 <vPortEnterCritical>
 80106d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80106da:	b25b      	sxtb	r3, r3
 80106dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106e0:	d103      	bne.n	80106ea <xQueueReceive+0x122>
 80106e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e4:	2200      	movs	r2, #0
 80106e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80106ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106f0:	b25b      	sxtb	r3, r3
 80106f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106f6:	d103      	bne.n	8010700 <xQueueReceive+0x138>
 80106f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fa:	2200      	movs	r2, #0
 80106fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010700:	f001 fe30 	bl	8012364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010704:	1d3a      	adds	r2, r7, #4
 8010706:	f107 0310 	add.w	r3, r7, #16
 801070a:	4611      	mov	r1, r2
 801070c:	4618      	mov	r0, r3
 801070e:	f000 ff21 	bl	8011554 <xTaskCheckForTimeOut>
 8010712:	4603      	mov	r3, r0
 8010714:	2b00      	cmp	r3, #0
 8010716:	d123      	bne.n	8010760 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801071a:	f000 f917 	bl	801094c <prvIsQueueEmpty>
 801071e:	4603      	mov	r3, r0
 8010720:	2b00      	cmp	r3, #0
 8010722:	d017      	beq.n	8010754 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010726:	3324      	adds	r3, #36	; 0x24
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	4611      	mov	r1, r2
 801072c:	4618      	mov	r0, r3
 801072e:	f000 fda9 	bl	8011284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010734:	f000 f8b8 	bl	80108a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010738:	f000 fbde 	bl	8010ef8 <xTaskResumeAll>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d189      	bne.n	8010656 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010742:	4b10      	ldr	r3, [pc, #64]	; (8010784 <xQueueReceive+0x1bc>)
 8010744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010748:	601a      	str	r2, [r3, #0]
 801074a:	f3bf 8f4f 	dsb	sy
 801074e:	f3bf 8f6f 	isb	sy
 8010752:	e780      	b.n	8010656 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010756:	f000 f8a7 	bl	80108a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801075a:	f000 fbcd 	bl	8010ef8 <xTaskResumeAll>
 801075e:	e77a      	b.n	8010656 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010762:	f000 f8a1 	bl	80108a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010766:	f000 fbc7 	bl	8010ef8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801076a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801076c:	f000 f8ee 	bl	801094c <prvIsQueueEmpty>
 8010770:	4603      	mov	r3, r0
 8010772:	2b00      	cmp	r3, #0
 8010774:	f43f af6f 	beq.w	8010656 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010778:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801077a:	4618      	mov	r0, r3
 801077c:	3730      	adds	r7, #48	; 0x30
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}
 8010782:	bf00      	nop
 8010784:	e000ed04 	.word	0xe000ed04

08010788 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b086      	sub	sp, #24
 801078c:	af00      	add	r7, sp, #0
 801078e:	60f8      	str	r0, [r7, #12]
 8010790:	60b9      	str	r1, [r7, #8]
 8010792:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010794:	2300      	movs	r3, #0
 8010796:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801079c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d10d      	bne.n	80107c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d14d      	bne.n	801084a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	689b      	ldr	r3, [r3, #8]
 80107b2:	4618      	mov	r0, r3
 80107b4:	f001 f830 	bl	8011818 <xTaskPriorityDisinherit>
 80107b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2200      	movs	r2, #0
 80107be:	609a      	str	r2, [r3, #8]
 80107c0:	e043      	b.n	801084a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d119      	bne.n	80107fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	6858      	ldr	r0, [r3, #4]
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107d0:	461a      	mov	r2, r3
 80107d2:	68b9      	ldr	r1, [r7, #8]
 80107d4:	f002 f8dc 	bl	8012990 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	685a      	ldr	r2, [r3, #4]
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107e0:	441a      	add	r2, r3
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	685a      	ldr	r2, [r3, #4]
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	689b      	ldr	r3, [r3, #8]
 80107ee:	429a      	cmp	r2, r3
 80107f0:	d32b      	bcc.n	801084a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	681a      	ldr	r2, [r3, #0]
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	605a      	str	r2, [r3, #4]
 80107fa:	e026      	b.n	801084a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	68d8      	ldr	r0, [r3, #12]
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010804:	461a      	mov	r2, r3
 8010806:	68b9      	ldr	r1, [r7, #8]
 8010808:	f002 f8c2 	bl	8012990 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	68da      	ldr	r2, [r3, #12]
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010814:	425b      	negs	r3, r3
 8010816:	441a      	add	r2, r3
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	68da      	ldr	r2, [r3, #12]
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	429a      	cmp	r2, r3
 8010826:	d207      	bcs.n	8010838 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	689a      	ldr	r2, [r3, #8]
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010830:	425b      	negs	r3, r3
 8010832:	441a      	add	r2, r3
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2b02      	cmp	r3, #2
 801083c:	d105      	bne.n	801084a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d002      	beq.n	801084a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	3b01      	subs	r3, #1
 8010848:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801084a:	693b      	ldr	r3, [r7, #16]
 801084c:	1c5a      	adds	r2, r3, #1
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010852:	697b      	ldr	r3, [r7, #20]
}
 8010854:	4618      	mov	r0, r3
 8010856:	3718      	adds	r7, #24
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801086a:	2b00      	cmp	r3, #0
 801086c:	d018      	beq.n	80108a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	68da      	ldr	r2, [r3, #12]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010876:	441a      	add	r2, r3
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	68da      	ldr	r2, [r3, #12]
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	689b      	ldr	r3, [r3, #8]
 8010884:	429a      	cmp	r2, r3
 8010886:	d303      	bcc.n	8010890 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681a      	ldr	r2, [r3, #0]
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	68d9      	ldr	r1, [r3, #12]
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010898:	461a      	mov	r2, r3
 801089a:	6838      	ldr	r0, [r7, #0]
 801089c:	f002 f878 	bl	8012990 <memcpy>
	}
}
 80108a0:	bf00      	nop
 80108a2:	3708      	adds	r7, #8
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}

080108a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80108b0:	f001 fd28 	bl	8012304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80108bc:	e011      	b.n	80108e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d012      	beq.n	80108ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	3324      	adds	r3, #36	; 0x24
 80108ca:	4618      	mov	r0, r3
 80108cc:	f000 fd66 	bl	801139c <xTaskRemoveFromEventList>
 80108d0:	4603      	mov	r3, r0
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d001      	beq.n	80108da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80108d6:	f000 fe9f 	bl	8011618 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80108da:	7bfb      	ldrb	r3, [r7, #15]
 80108dc:	3b01      	subs	r3, #1
 80108de:	b2db      	uxtb	r3, r3
 80108e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80108e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	dce9      	bgt.n	80108be <prvUnlockQueue+0x16>
 80108ea:	e000      	b.n	80108ee <prvUnlockQueue+0x46>
					break;
 80108ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	22ff      	movs	r2, #255	; 0xff
 80108f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80108f6:	f001 fd35 	bl	8012364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80108fa:	f001 fd03 	bl	8012304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010904:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010906:	e011      	b.n	801092c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	691b      	ldr	r3, [r3, #16]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d012      	beq.n	8010936 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	3310      	adds	r3, #16
 8010914:	4618      	mov	r0, r3
 8010916:	f000 fd41 	bl	801139c <xTaskRemoveFromEventList>
 801091a:	4603      	mov	r3, r0
 801091c:	2b00      	cmp	r3, #0
 801091e:	d001      	beq.n	8010924 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010920:	f000 fe7a 	bl	8011618 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010924:	7bbb      	ldrb	r3, [r7, #14]
 8010926:	3b01      	subs	r3, #1
 8010928:	b2db      	uxtb	r3, r3
 801092a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801092c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010930:	2b00      	cmp	r3, #0
 8010932:	dce9      	bgt.n	8010908 <prvUnlockQueue+0x60>
 8010934:	e000      	b.n	8010938 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010936:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	22ff      	movs	r2, #255	; 0xff
 801093c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010940:	f001 fd10 	bl	8012364 <vPortExitCritical>
}
 8010944:	bf00      	nop
 8010946:	3710      	adds	r7, #16
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b084      	sub	sp, #16
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010954:	f001 fcd6 	bl	8012304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801095c:	2b00      	cmp	r3, #0
 801095e:	d102      	bne.n	8010966 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010960:	2301      	movs	r3, #1
 8010962:	60fb      	str	r3, [r7, #12]
 8010964:	e001      	b.n	801096a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010966:	2300      	movs	r3, #0
 8010968:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801096a:	f001 fcfb 	bl	8012364 <vPortExitCritical>

	return xReturn;
 801096e:	68fb      	ldr	r3, [r7, #12]
}
 8010970:	4618      	mov	r0, r3
 8010972:	3710      	adds	r7, #16
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b084      	sub	sp, #16
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010980:	f001 fcc0 	bl	8012304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801098c:	429a      	cmp	r2, r3
 801098e:	d102      	bne.n	8010996 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010990:	2301      	movs	r3, #1
 8010992:	60fb      	str	r3, [r7, #12]
 8010994:	e001      	b.n	801099a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010996:	2300      	movs	r3, #0
 8010998:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801099a:	f001 fce3 	bl	8012364 <vPortExitCritical>

	return xReturn;
 801099e:	68fb      	ldr	r3, [r7, #12]
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3710      	adds	r7, #16
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}

080109a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80109a8:	b480      	push	{r7}
 80109aa:	b085      	sub	sp, #20
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109b2:	2300      	movs	r3, #0
 80109b4:	60fb      	str	r3, [r7, #12]
 80109b6:	e014      	b.n	80109e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80109b8:	4a0f      	ldr	r2, [pc, #60]	; (80109f8 <vQueueAddToRegistry+0x50>)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d10b      	bne.n	80109dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80109c4:	490c      	ldr	r1, [pc, #48]	; (80109f8 <vQueueAddToRegistry+0x50>)
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	683a      	ldr	r2, [r7, #0]
 80109ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80109ce:	4a0a      	ldr	r2, [pc, #40]	; (80109f8 <vQueueAddToRegistry+0x50>)
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	00db      	lsls	r3, r3, #3
 80109d4:	4413      	add	r3, r2
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80109da:	e006      	b.n	80109ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	3301      	adds	r3, #1
 80109e0:	60fb      	str	r3, [r7, #12]
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	2b07      	cmp	r3, #7
 80109e6:	d9e7      	bls.n	80109b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80109e8:	bf00      	nop
 80109ea:	bf00      	nop
 80109ec:	3714      	adds	r7, #20
 80109ee:	46bd      	mov	sp, r7
 80109f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f4:	4770      	bx	lr
 80109f6:	bf00      	nop
 80109f8:	24000cf8 	.word	0x24000cf8

080109fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b086      	sub	sp, #24
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010a0c:	f001 fc7a 	bl	8012304 <vPortEnterCritical>
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a16:	b25b      	sxtb	r3, r3
 8010a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a1c:	d103      	bne.n	8010a26 <vQueueWaitForMessageRestricted+0x2a>
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	2200      	movs	r2, #0
 8010a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a26:	697b      	ldr	r3, [r7, #20]
 8010a28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a2c:	b25b      	sxtb	r3, r3
 8010a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a32:	d103      	bne.n	8010a3c <vQueueWaitForMessageRestricted+0x40>
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	2200      	movs	r2, #0
 8010a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a3c:	f001 fc92 	bl	8012364 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d106      	bne.n	8010a56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	3324      	adds	r3, #36	; 0x24
 8010a4c:	687a      	ldr	r2, [r7, #4]
 8010a4e:	68b9      	ldr	r1, [r7, #8]
 8010a50:	4618      	mov	r0, r3
 8010a52:	f000 fc77 	bl	8011344 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010a56:	6978      	ldr	r0, [r7, #20]
 8010a58:	f7ff ff26 	bl	80108a8 <prvUnlockQueue>
	}
 8010a5c:	bf00      	nop
 8010a5e:	3718      	adds	r7, #24
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}

08010a64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b08e      	sub	sp, #56	; 0x38
 8010a68:	af04      	add	r7, sp, #16
 8010a6a:	60f8      	str	r0, [r7, #12]
 8010a6c:	60b9      	str	r1, [r7, #8]
 8010a6e:	607a      	str	r2, [r7, #4]
 8010a70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d10a      	bne.n	8010a8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8010a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a7c:	f383 8811 	msr	BASEPRI, r3
 8010a80:	f3bf 8f6f 	isb	sy
 8010a84:	f3bf 8f4f 	dsb	sy
 8010a88:	623b      	str	r3, [r7, #32]
}
 8010a8a:	bf00      	nop
 8010a8c:	e7fe      	b.n	8010a8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d10a      	bne.n	8010aaa <xTaskCreateStatic+0x46>
	__asm volatile
 8010a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a98:	f383 8811 	msr	BASEPRI, r3
 8010a9c:	f3bf 8f6f 	isb	sy
 8010aa0:	f3bf 8f4f 	dsb	sy
 8010aa4:	61fb      	str	r3, [r7, #28]
}
 8010aa6:	bf00      	nop
 8010aa8:	e7fe      	b.n	8010aa8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010aaa:	235c      	movs	r3, #92	; 0x5c
 8010aac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	2b5c      	cmp	r3, #92	; 0x5c
 8010ab2:	d00a      	beq.n	8010aca <xTaskCreateStatic+0x66>
	__asm volatile
 8010ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab8:	f383 8811 	msr	BASEPRI, r3
 8010abc:	f3bf 8f6f 	isb	sy
 8010ac0:	f3bf 8f4f 	dsb	sy
 8010ac4:	61bb      	str	r3, [r7, #24]
}
 8010ac6:	bf00      	nop
 8010ac8:	e7fe      	b.n	8010ac8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010aca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d01e      	beq.n	8010b10 <xTaskCreateStatic+0xac>
 8010ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d01b      	beq.n	8010b10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ada:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ae0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae4:	2202      	movs	r2, #2
 8010ae6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010aea:	2300      	movs	r3, #0
 8010aec:	9303      	str	r3, [sp, #12]
 8010aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af0:	9302      	str	r3, [sp, #8]
 8010af2:	f107 0314 	add.w	r3, r7, #20
 8010af6:	9301      	str	r3, [sp, #4]
 8010af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010afa:	9300      	str	r3, [sp, #0]
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	687a      	ldr	r2, [r7, #4]
 8010b00:	68b9      	ldr	r1, [r7, #8]
 8010b02:	68f8      	ldr	r0, [r7, #12]
 8010b04:	f000 f850 	bl	8010ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b0a:	f000 f8dd 	bl	8010cc8 <prvAddNewTaskToReadyList>
 8010b0e:	e001      	b.n	8010b14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010b10:	2300      	movs	r3, #0
 8010b12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010b14:	697b      	ldr	r3, [r7, #20]
	}
 8010b16:	4618      	mov	r0, r3
 8010b18:	3728      	adds	r7, #40	; 0x28
 8010b1a:	46bd      	mov	sp, r7
 8010b1c:	bd80      	pop	{r7, pc}

08010b1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010b1e:	b580      	push	{r7, lr}
 8010b20:	b08c      	sub	sp, #48	; 0x30
 8010b22:	af04      	add	r7, sp, #16
 8010b24:	60f8      	str	r0, [r7, #12]
 8010b26:	60b9      	str	r1, [r7, #8]
 8010b28:	603b      	str	r3, [r7, #0]
 8010b2a:	4613      	mov	r3, r2
 8010b2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010b2e:	88fb      	ldrh	r3, [r7, #6]
 8010b30:	009b      	lsls	r3, r3, #2
 8010b32:	4618      	mov	r0, r3
 8010b34:	f001 fd08 	bl	8012548 <pvPortMalloc>
 8010b38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d00e      	beq.n	8010b5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010b40:	205c      	movs	r0, #92	; 0x5c
 8010b42:	f001 fd01 	bl	8012548 <pvPortMalloc>
 8010b46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010b48:	69fb      	ldr	r3, [r7, #28]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d003      	beq.n	8010b56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010b4e:	69fb      	ldr	r3, [r7, #28]
 8010b50:	697a      	ldr	r2, [r7, #20]
 8010b52:	631a      	str	r2, [r3, #48]	; 0x30
 8010b54:	e005      	b.n	8010b62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010b56:	6978      	ldr	r0, [r7, #20]
 8010b58:	f001 fdc2 	bl	80126e0 <vPortFree>
 8010b5c:	e001      	b.n	8010b62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010b62:	69fb      	ldr	r3, [r7, #28]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d017      	beq.n	8010b98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010b70:	88fa      	ldrh	r2, [r7, #6]
 8010b72:	2300      	movs	r3, #0
 8010b74:	9303      	str	r3, [sp, #12]
 8010b76:	69fb      	ldr	r3, [r7, #28]
 8010b78:	9302      	str	r3, [sp, #8]
 8010b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b7c:	9301      	str	r3, [sp, #4]
 8010b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b80:	9300      	str	r3, [sp, #0]
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	68b9      	ldr	r1, [r7, #8]
 8010b86:	68f8      	ldr	r0, [r7, #12]
 8010b88:	f000 f80e 	bl	8010ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b8c:	69f8      	ldr	r0, [r7, #28]
 8010b8e:	f000 f89b 	bl	8010cc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010b92:	2301      	movs	r3, #1
 8010b94:	61bb      	str	r3, [r7, #24]
 8010b96:	e002      	b.n	8010b9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010b9e:	69bb      	ldr	r3, [r7, #24]
	}
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3720      	adds	r7, #32
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b088      	sub	sp, #32
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	607a      	str	r2, [r7, #4]
 8010bb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	009b      	lsls	r3, r3, #2
 8010bbe:	461a      	mov	r2, r3
 8010bc0:	21a5      	movs	r1, #165	; 0xa5
 8010bc2:	f001 fef3 	bl	80129ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010bca:	6879      	ldr	r1, [r7, #4]
 8010bcc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010bd0:	440b      	add	r3, r1
 8010bd2:	009b      	lsls	r3, r3, #2
 8010bd4:	4413      	add	r3, r2
 8010bd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010bd8:	69bb      	ldr	r3, [r7, #24]
 8010bda:	f023 0307 	bic.w	r3, r3, #7
 8010bde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010be0:	69bb      	ldr	r3, [r7, #24]
 8010be2:	f003 0307 	and.w	r3, r3, #7
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d00a      	beq.n	8010c00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bee:	f383 8811 	msr	BASEPRI, r3
 8010bf2:	f3bf 8f6f 	isb	sy
 8010bf6:	f3bf 8f4f 	dsb	sy
 8010bfa:	617b      	str	r3, [r7, #20]
}
 8010bfc:	bf00      	nop
 8010bfe:	e7fe      	b.n	8010bfe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d01f      	beq.n	8010c46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c06:	2300      	movs	r3, #0
 8010c08:	61fb      	str	r3, [r7, #28]
 8010c0a:	e012      	b.n	8010c32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010c0c:	68ba      	ldr	r2, [r7, #8]
 8010c0e:	69fb      	ldr	r3, [r7, #28]
 8010c10:	4413      	add	r3, r2
 8010c12:	7819      	ldrb	r1, [r3, #0]
 8010c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c16:	69fb      	ldr	r3, [r7, #28]
 8010c18:	4413      	add	r3, r2
 8010c1a:	3334      	adds	r3, #52	; 0x34
 8010c1c:	460a      	mov	r2, r1
 8010c1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010c20:	68ba      	ldr	r2, [r7, #8]
 8010c22:	69fb      	ldr	r3, [r7, #28]
 8010c24:	4413      	add	r3, r2
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d006      	beq.n	8010c3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c2c:	69fb      	ldr	r3, [r7, #28]
 8010c2e:	3301      	adds	r3, #1
 8010c30:	61fb      	str	r3, [r7, #28]
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	2b0f      	cmp	r3, #15
 8010c36:	d9e9      	bls.n	8010c0c <prvInitialiseNewTask+0x64>
 8010c38:	e000      	b.n	8010c3c <prvInitialiseNewTask+0x94>
			{
				break;
 8010c3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c3e:	2200      	movs	r2, #0
 8010c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c44:	e003      	b.n	8010c4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c48:	2200      	movs	r2, #0
 8010c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c50:	2b37      	cmp	r3, #55	; 0x37
 8010c52:	d901      	bls.n	8010c58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010c54:	2337      	movs	r3, #55	; 0x37
 8010c56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c66:	2200      	movs	r2, #0
 8010c68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6c:	3304      	adds	r3, #4
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f7ff f978 	bl	800ff64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c76:	3318      	adds	r3, #24
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7ff f973 	bl	800ff64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c96:	2200      	movs	r2, #0
 8010c98:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ca2:	683a      	ldr	r2, [r7, #0]
 8010ca4:	68f9      	ldr	r1, [r7, #12]
 8010ca6:	69b8      	ldr	r0, [r7, #24]
 8010ca8:	f001 f9fe 	bl	80120a8 <pxPortInitialiseStack>
 8010cac:	4602      	mov	r2, r0
 8010cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d002      	beq.n	8010cbe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010cbe:	bf00      	nop
 8010cc0:	3720      	adds	r7, #32
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
	...

08010cc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010cd0:	f001 fb18 	bl	8012304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010cd4:	4b2d      	ldr	r3, [pc, #180]	; (8010d8c <prvAddNewTaskToReadyList+0xc4>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	3301      	adds	r3, #1
 8010cda:	4a2c      	ldr	r2, [pc, #176]	; (8010d8c <prvAddNewTaskToReadyList+0xc4>)
 8010cdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010cde:	4b2c      	ldr	r3, [pc, #176]	; (8010d90 <prvAddNewTaskToReadyList+0xc8>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d109      	bne.n	8010cfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010ce6:	4a2a      	ldr	r2, [pc, #168]	; (8010d90 <prvAddNewTaskToReadyList+0xc8>)
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010cec:	4b27      	ldr	r3, [pc, #156]	; (8010d8c <prvAddNewTaskToReadyList+0xc4>)
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d110      	bne.n	8010d16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010cf4:	f000 fcb4 	bl	8011660 <prvInitialiseTaskLists>
 8010cf8:	e00d      	b.n	8010d16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010cfa:	4b26      	ldr	r3, [pc, #152]	; (8010d94 <prvAddNewTaskToReadyList+0xcc>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d109      	bne.n	8010d16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010d02:	4b23      	ldr	r3, [pc, #140]	; (8010d90 <prvAddNewTaskToReadyList+0xc8>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d802      	bhi.n	8010d16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010d10:	4a1f      	ldr	r2, [pc, #124]	; (8010d90 <prvAddNewTaskToReadyList+0xc8>)
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010d16:	4b20      	ldr	r3, [pc, #128]	; (8010d98 <prvAddNewTaskToReadyList+0xd0>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	3301      	adds	r3, #1
 8010d1c:	4a1e      	ldr	r2, [pc, #120]	; (8010d98 <prvAddNewTaskToReadyList+0xd0>)
 8010d1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010d20:	4b1d      	ldr	r3, [pc, #116]	; (8010d98 <prvAddNewTaskToReadyList+0xd0>)
 8010d22:	681a      	ldr	r2, [r3, #0]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d2c:	4b1b      	ldr	r3, [pc, #108]	; (8010d9c <prvAddNewTaskToReadyList+0xd4>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	d903      	bls.n	8010d3c <prvAddNewTaskToReadyList+0x74>
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d38:	4a18      	ldr	r2, [pc, #96]	; (8010d9c <prvAddNewTaskToReadyList+0xd4>)
 8010d3a:	6013      	str	r3, [r2, #0]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d40:	4613      	mov	r3, r2
 8010d42:	009b      	lsls	r3, r3, #2
 8010d44:	4413      	add	r3, r2
 8010d46:	009b      	lsls	r3, r3, #2
 8010d48:	4a15      	ldr	r2, [pc, #84]	; (8010da0 <prvAddNewTaskToReadyList+0xd8>)
 8010d4a:	441a      	add	r2, r3
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	3304      	adds	r3, #4
 8010d50:	4619      	mov	r1, r3
 8010d52:	4610      	mov	r0, r2
 8010d54:	f7ff f913 	bl	800ff7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010d58:	f001 fb04 	bl	8012364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010d5c:	4b0d      	ldr	r3, [pc, #52]	; (8010d94 <prvAddNewTaskToReadyList+0xcc>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00e      	beq.n	8010d82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010d64:	4b0a      	ldr	r3, [pc, #40]	; (8010d90 <prvAddNewTaskToReadyList+0xc8>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d207      	bcs.n	8010d82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010d72:	4b0c      	ldr	r3, [pc, #48]	; (8010da4 <prvAddNewTaskToReadyList+0xdc>)
 8010d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d78:	601a      	str	r2, [r3, #0]
 8010d7a:	f3bf 8f4f 	dsb	sy
 8010d7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d82:	bf00      	nop
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	2400120c 	.word	0x2400120c
 8010d90:	24000d38 	.word	0x24000d38
 8010d94:	24001218 	.word	0x24001218
 8010d98:	24001228 	.word	0x24001228
 8010d9c:	24001214 	.word	0x24001214
 8010da0:	24000d3c 	.word	0x24000d3c
 8010da4:	e000ed04 	.word	0xe000ed04

08010da8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b084      	sub	sp, #16
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010db0:	2300      	movs	r3, #0
 8010db2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d017      	beq.n	8010dea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010dba:	4b13      	ldr	r3, [pc, #76]	; (8010e08 <vTaskDelay+0x60>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d00a      	beq.n	8010dd8 <vTaskDelay+0x30>
	__asm volatile
 8010dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc6:	f383 8811 	msr	BASEPRI, r3
 8010dca:	f3bf 8f6f 	isb	sy
 8010dce:	f3bf 8f4f 	dsb	sy
 8010dd2:	60bb      	str	r3, [r7, #8]
}
 8010dd4:	bf00      	nop
 8010dd6:	e7fe      	b.n	8010dd6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010dd8:	f000 f880 	bl	8010edc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010ddc:	2100      	movs	r1, #0
 8010dde:	6878      	ldr	r0, [r7, #4]
 8010de0:	f000 fda0 	bl	8011924 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010de4:	f000 f888 	bl	8010ef8 <xTaskResumeAll>
 8010de8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d107      	bne.n	8010e00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010df0:	4b06      	ldr	r3, [pc, #24]	; (8010e0c <vTaskDelay+0x64>)
 8010df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010df6:	601a      	str	r2, [r3, #0]
 8010df8:	f3bf 8f4f 	dsb	sy
 8010dfc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010e00:	bf00      	nop
 8010e02:	3710      	adds	r7, #16
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	24001234 	.word	0x24001234
 8010e0c:	e000ed04 	.word	0xe000ed04

08010e10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b08a      	sub	sp, #40	; 0x28
 8010e14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010e16:	2300      	movs	r3, #0
 8010e18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010e1e:	463a      	mov	r2, r7
 8010e20:	1d39      	adds	r1, r7, #4
 8010e22:	f107 0308 	add.w	r3, r7, #8
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7fe fe5a 	bl	800fae0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010e2c:	6839      	ldr	r1, [r7, #0]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	68ba      	ldr	r2, [r7, #8]
 8010e32:	9202      	str	r2, [sp, #8]
 8010e34:	9301      	str	r3, [sp, #4]
 8010e36:	2300      	movs	r3, #0
 8010e38:	9300      	str	r3, [sp, #0]
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	460a      	mov	r2, r1
 8010e3e:	4921      	ldr	r1, [pc, #132]	; (8010ec4 <vTaskStartScheduler+0xb4>)
 8010e40:	4821      	ldr	r0, [pc, #132]	; (8010ec8 <vTaskStartScheduler+0xb8>)
 8010e42:	f7ff fe0f 	bl	8010a64 <xTaskCreateStatic>
 8010e46:	4603      	mov	r3, r0
 8010e48:	4a20      	ldr	r2, [pc, #128]	; (8010ecc <vTaskStartScheduler+0xbc>)
 8010e4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010e4c:	4b1f      	ldr	r3, [pc, #124]	; (8010ecc <vTaskStartScheduler+0xbc>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d002      	beq.n	8010e5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010e54:	2301      	movs	r3, #1
 8010e56:	617b      	str	r3, [r7, #20]
 8010e58:	e001      	b.n	8010e5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	2b01      	cmp	r3, #1
 8010e62:	d102      	bne.n	8010e6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010e64:	f000 fdb2 	bl	80119cc <xTimerCreateTimerTask>
 8010e68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	2b01      	cmp	r3, #1
 8010e6e:	d116      	bne.n	8010e9e <vTaskStartScheduler+0x8e>
	__asm volatile
 8010e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e74:	f383 8811 	msr	BASEPRI, r3
 8010e78:	f3bf 8f6f 	isb	sy
 8010e7c:	f3bf 8f4f 	dsb	sy
 8010e80:	613b      	str	r3, [r7, #16]
}
 8010e82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010e84:	4b12      	ldr	r3, [pc, #72]	; (8010ed0 <vTaskStartScheduler+0xc0>)
 8010e86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010e8c:	4b11      	ldr	r3, [pc, #68]	; (8010ed4 <vTaskStartScheduler+0xc4>)
 8010e8e:	2201      	movs	r2, #1
 8010e90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010e92:	4b11      	ldr	r3, [pc, #68]	; (8010ed8 <vTaskStartScheduler+0xc8>)
 8010e94:	2200      	movs	r2, #0
 8010e96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010e98:	f001 f992 	bl	80121c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010e9c:	e00e      	b.n	8010ebc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010e9e:	697b      	ldr	r3, [r7, #20]
 8010ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ea4:	d10a      	bne.n	8010ebc <vTaskStartScheduler+0xac>
	__asm volatile
 8010ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eaa:	f383 8811 	msr	BASEPRI, r3
 8010eae:	f3bf 8f6f 	isb	sy
 8010eb2:	f3bf 8f4f 	dsb	sy
 8010eb6:	60fb      	str	r3, [r7, #12]
}
 8010eb8:	bf00      	nop
 8010eba:	e7fe      	b.n	8010eba <vTaskStartScheduler+0xaa>
}
 8010ebc:	bf00      	nop
 8010ebe:	3718      	adds	r7, #24
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}
 8010ec4:	08013ca4 	.word	0x08013ca4
 8010ec8:	08011631 	.word	0x08011631
 8010ecc:	24001230 	.word	0x24001230
 8010ed0:	2400122c 	.word	0x2400122c
 8010ed4:	24001218 	.word	0x24001218
 8010ed8:	24001210 	.word	0x24001210

08010edc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010edc:	b480      	push	{r7}
 8010ede:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010ee0:	4b04      	ldr	r3, [pc, #16]	; (8010ef4 <vTaskSuspendAll+0x18>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	4a03      	ldr	r2, [pc, #12]	; (8010ef4 <vTaskSuspendAll+0x18>)
 8010ee8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010eea:	bf00      	nop
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr
 8010ef4:	24001234 	.word	0x24001234

08010ef8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010efe:	2300      	movs	r3, #0
 8010f00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010f02:	2300      	movs	r3, #0
 8010f04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010f06:	4b42      	ldr	r3, [pc, #264]	; (8011010 <xTaskResumeAll+0x118>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d10a      	bne.n	8010f24 <xTaskResumeAll+0x2c>
	__asm volatile
 8010f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f12:	f383 8811 	msr	BASEPRI, r3
 8010f16:	f3bf 8f6f 	isb	sy
 8010f1a:	f3bf 8f4f 	dsb	sy
 8010f1e:	603b      	str	r3, [r7, #0]
}
 8010f20:	bf00      	nop
 8010f22:	e7fe      	b.n	8010f22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010f24:	f001 f9ee 	bl	8012304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010f28:	4b39      	ldr	r3, [pc, #228]	; (8011010 <xTaskResumeAll+0x118>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	3b01      	subs	r3, #1
 8010f2e:	4a38      	ldr	r2, [pc, #224]	; (8011010 <xTaskResumeAll+0x118>)
 8010f30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f32:	4b37      	ldr	r3, [pc, #220]	; (8011010 <xTaskResumeAll+0x118>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d162      	bne.n	8011000 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010f3a:	4b36      	ldr	r3, [pc, #216]	; (8011014 <xTaskResumeAll+0x11c>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d05e      	beq.n	8011000 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010f42:	e02f      	b.n	8010fa4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f44:	4b34      	ldr	r3, [pc, #208]	; (8011018 <xTaskResumeAll+0x120>)
 8010f46:	68db      	ldr	r3, [r3, #12]
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	3318      	adds	r3, #24
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7ff f871 	bl	8010038 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	3304      	adds	r3, #4
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7ff f86c 	bl	8010038 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f64:	4b2d      	ldr	r3, [pc, #180]	; (801101c <xTaskResumeAll+0x124>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d903      	bls.n	8010f74 <xTaskResumeAll+0x7c>
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f70:	4a2a      	ldr	r2, [pc, #168]	; (801101c <xTaskResumeAll+0x124>)
 8010f72:	6013      	str	r3, [r2, #0]
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f78:	4613      	mov	r3, r2
 8010f7a:	009b      	lsls	r3, r3, #2
 8010f7c:	4413      	add	r3, r2
 8010f7e:	009b      	lsls	r3, r3, #2
 8010f80:	4a27      	ldr	r2, [pc, #156]	; (8011020 <xTaskResumeAll+0x128>)
 8010f82:	441a      	add	r2, r3
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	3304      	adds	r3, #4
 8010f88:	4619      	mov	r1, r3
 8010f8a:	4610      	mov	r0, r2
 8010f8c:	f7fe fff7 	bl	800ff7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f94:	4b23      	ldr	r3, [pc, #140]	; (8011024 <xTaskResumeAll+0x12c>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d302      	bcc.n	8010fa4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010f9e:	4b22      	ldr	r3, [pc, #136]	; (8011028 <xTaskResumeAll+0x130>)
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010fa4:	4b1c      	ldr	r3, [pc, #112]	; (8011018 <xTaskResumeAll+0x120>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d1cb      	bne.n	8010f44 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d001      	beq.n	8010fb6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010fb2:	f000 fbf3 	bl	801179c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010fb6:	4b1d      	ldr	r3, [pc, #116]	; (801102c <xTaskResumeAll+0x134>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d010      	beq.n	8010fe4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010fc2:	f000 f847 	bl	8011054 <xTaskIncrementTick>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d002      	beq.n	8010fd2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010fcc:	4b16      	ldr	r3, [pc, #88]	; (8011028 <xTaskResumeAll+0x130>)
 8010fce:	2201      	movs	r2, #1
 8010fd0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	3b01      	subs	r3, #1
 8010fd6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d1f1      	bne.n	8010fc2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010fde:	4b13      	ldr	r3, [pc, #76]	; (801102c <xTaskResumeAll+0x134>)
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010fe4:	4b10      	ldr	r3, [pc, #64]	; (8011028 <xTaskResumeAll+0x130>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d009      	beq.n	8011000 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010fec:	2301      	movs	r3, #1
 8010fee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010ff0:	4b0f      	ldr	r3, [pc, #60]	; (8011030 <xTaskResumeAll+0x138>)
 8010ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ff6:	601a      	str	r2, [r3, #0]
 8010ff8:	f3bf 8f4f 	dsb	sy
 8010ffc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011000:	f001 f9b0 	bl	8012364 <vPortExitCritical>

	return xAlreadyYielded;
 8011004:	68bb      	ldr	r3, [r7, #8]
}
 8011006:	4618      	mov	r0, r3
 8011008:	3710      	adds	r7, #16
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	24001234 	.word	0x24001234
 8011014:	2400120c 	.word	0x2400120c
 8011018:	240011cc 	.word	0x240011cc
 801101c:	24001214 	.word	0x24001214
 8011020:	24000d3c 	.word	0x24000d3c
 8011024:	24000d38 	.word	0x24000d38
 8011028:	24001220 	.word	0x24001220
 801102c:	2400121c 	.word	0x2400121c
 8011030:	e000ed04 	.word	0xe000ed04

08011034 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011034:	b480      	push	{r7}
 8011036:	b083      	sub	sp, #12
 8011038:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801103a:	4b05      	ldr	r3, [pc, #20]	; (8011050 <xTaskGetTickCount+0x1c>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011040:	687b      	ldr	r3, [r7, #4]
}
 8011042:	4618      	mov	r0, r3
 8011044:	370c      	adds	r7, #12
 8011046:	46bd      	mov	sp, r7
 8011048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104c:	4770      	bx	lr
 801104e:	bf00      	nop
 8011050:	24001210 	.word	0x24001210

08011054 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b086      	sub	sp, #24
 8011058:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801105a:	2300      	movs	r3, #0
 801105c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801105e:	4b4f      	ldr	r3, [pc, #316]	; (801119c <xTaskIncrementTick+0x148>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	2b00      	cmp	r3, #0
 8011064:	f040 808f 	bne.w	8011186 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011068:	4b4d      	ldr	r3, [pc, #308]	; (80111a0 <xTaskIncrementTick+0x14c>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	3301      	adds	r3, #1
 801106e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011070:	4a4b      	ldr	r2, [pc, #300]	; (80111a0 <xTaskIncrementTick+0x14c>)
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011076:	693b      	ldr	r3, [r7, #16]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d120      	bne.n	80110be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801107c:	4b49      	ldr	r3, [pc, #292]	; (80111a4 <xTaskIncrementTick+0x150>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d00a      	beq.n	801109c <xTaskIncrementTick+0x48>
	__asm volatile
 8011086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801108a:	f383 8811 	msr	BASEPRI, r3
 801108e:	f3bf 8f6f 	isb	sy
 8011092:	f3bf 8f4f 	dsb	sy
 8011096:	603b      	str	r3, [r7, #0]
}
 8011098:	bf00      	nop
 801109a:	e7fe      	b.n	801109a <xTaskIncrementTick+0x46>
 801109c:	4b41      	ldr	r3, [pc, #260]	; (80111a4 <xTaskIncrementTick+0x150>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	60fb      	str	r3, [r7, #12]
 80110a2:	4b41      	ldr	r3, [pc, #260]	; (80111a8 <xTaskIncrementTick+0x154>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	4a3f      	ldr	r2, [pc, #252]	; (80111a4 <xTaskIncrementTick+0x150>)
 80110a8:	6013      	str	r3, [r2, #0]
 80110aa:	4a3f      	ldr	r2, [pc, #252]	; (80111a8 <xTaskIncrementTick+0x154>)
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	6013      	str	r3, [r2, #0]
 80110b0:	4b3e      	ldr	r3, [pc, #248]	; (80111ac <xTaskIncrementTick+0x158>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	3301      	adds	r3, #1
 80110b6:	4a3d      	ldr	r2, [pc, #244]	; (80111ac <xTaskIncrementTick+0x158>)
 80110b8:	6013      	str	r3, [r2, #0]
 80110ba:	f000 fb6f 	bl	801179c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80110be:	4b3c      	ldr	r3, [pc, #240]	; (80111b0 <xTaskIncrementTick+0x15c>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	693a      	ldr	r2, [r7, #16]
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d349      	bcc.n	801115c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80110c8:	4b36      	ldr	r3, [pc, #216]	; (80111a4 <xTaskIncrementTick+0x150>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d104      	bne.n	80110dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110d2:	4b37      	ldr	r3, [pc, #220]	; (80111b0 <xTaskIncrementTick+0x15c>)
 80110d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80110d8:	601a      	str	r2, [r3, #0]
					break;
 80110da:	e03f      	b.n	801115c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110dc:	4b31      	ldr	r3, [pc, #196]	; (80111a4 <xTaskIncrementTick+0x150>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	68db      	ldr	r3, [r3, #12]
 80110e2:	68db      	ldr	r3, [r3, #12]
 80110e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80110ec:	693a      	ldr	r2, [r7, #16]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d203      	bcs.n	80110fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80110f4:	4a2e      	ldr	r2, [pc, #184]	; (80111b0 <xTaskIncrementTick+0x15c>)
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80110fa:	e02f      	b.n	801115c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	3304      	adds	r3, #4
 8011100:	4618      	mov	r0, r3
 8011102:	f7fe ff99 	bl	8010038 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801110a:	2b00      	cmp	r3, #0
 801110c:	d004      	beq.n	8011118 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	3318      	adds	r3, #24
 8011112:	4618      	mov	r0, r3
 8011114:	f7fe ff90 	bl	8010038 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801111c:	4b25      	ldr	r3, [pc, #148]	; (80111b4 <xTaskIncrementTick+0x160>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	429a      	cmp	r2, r3
 8011122:	d903      	bls.n	801112c <xTaskIncrementTick+0xd8>
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011128:	4a22      	ldr	r2, [pc, #136]	; (80111b4 <xTaskIncrementTick+0x160>)
 801112a:	6013      	str	r3, [r2, #0]
 801112c:	68bb      	ldr	r3, [r7, #8]
 801112e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011130:	4613      	mov	r3, r2
 8011132:	009b      	lsls	r3, r3, #2
 8011134:	4413      	add	r3, r2
 8011136:	009b      	lsls	r3, r3, #2
 8011138:	4a1f      	ldr	r2, [pc, #124]	; (80111b8 <xTaskIncrementTick+0x164>)
 801113a:	441a      	add	r2, r3
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	3304      	adds	r3, #4
 8011140:	4619      	mov	r1, r3
 8011142:	4610      	mov	r0, r2
 8011144:	f7fe ff1b 	bl	800ff7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801114c:	4b1b      	ldr	r3, [pc, #108]	; (80111bc <xTaskIncrementTick+0x168>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011152:	429a      	cmp	r2, r3
 8011154:	d3b8      	bcc.n	80110c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011156:	2301      	movs	r3, #1
 8011158:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801115a:	e7b5      	b.n	80110c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801115c:	4b17      	ldr	r3, [pc, #92]	; (80111bc <xTaskIncrementTick+0x168>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011162:	4915      	ldr	r1, [pc, #84]	; (80111b8 <xTaskIncrementTick+0x164>)
 8011164:	4613      	mov	r3, r2
 8011166:	009b      	lsls	r3, r3, #2
 8011168:	4413      	add	r3, r2
 801116a:	009b      	lsls	r3, r3, #2
 801116c:	440b      	add	r3, r1
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	2b01      	cmp	r3, #1
 8011172:	d901      	bls.n	8011178 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011174:	2301      	movs	r3, #1
 8011176:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011178:	4b11      	ldr	r3, [pc, #68]	; (80111c0 <xTaskIncrementTick+0x16c>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d007      	beq.n	8011190 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011180:	2301      	movs	r3, #1
 8011182:	617b      	str	r3, [r7, #20]
 8011184:	e004      	b.n	8011190 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011186:	4b0f      	ldr	r3, [pc, #60]	; (80111c4 <xTaskIncrementTick+0x170>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	3301      	adds	r3, #1
 801118c:	4a0d      	ldr	r2, [pc, #52]	; (80111c4 <xTaskIncrementTick+0x170>)
 801118e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011190:	697b      	ldr	r3, [r7, #20]
}
 8011192:	4618      	mov	r0, r3
 8011194:	3718      	adds	r7, #24
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	24001234 	.word	0x24001234
 80111a0:	24001210 	.word	0x24001210
 80111a4:	240011c4 	.word	0x240011c4
 80111a8:	240011c8 	.word	0x240011c8
 80111ac:	24001224 	.word	0x24001224
 80111b0:	2400122c 	.word	0x2400122c
 80111b4:	24001214 	.word	0x24001214
 80111b8:	24000d3c 	.word	0x24000d3c
 80111bc:	24000d38 	.word	0x24000d38
 80111c0:	24001220 	.word	0x24001220
 80111c4:	2400121c 	.word	0x2400121c

080111c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80111c8:	b480      	push	{r7}
 80111ca:	b085      	sub	sp, #20
 80111cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80111ce:	4b28      	ldr	r3, [pc, #160]	; (8011270 <vTaskSwitchContext+0xa8>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d003      	beq.n	80111de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80111d6:	4b27      	ldr	r3, [pc, #156]	; (8011274 <vTaskSwitchContext+0xac>)
 80111d8:	2201      	movs	r2, #1
 80111da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80111dc:	e041      	b.n	8011262 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80111de:	4b25      	ldr	r3, [pc, #148]	; (8011274 <vTaskSwitchContext+0xac>)
 80111e0:	2200      	movs	r2, #0
 80111e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111e4:	4b24      	ldr	r3, [pc, #144]	; (8011278 <vTaskSwitchContext+0xb0>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	60fb      	str	r3, [r7, #12]
 80111ea:	e010      	b.n	801120e <vTaskSwitchContext+0x46>
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d10a      	bne.n	8011208 <vTaskSwitchContext+0x40>
	__asm volatile
 80111f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f6:	f383 8811 	msr	BASEPRI, r3
 80111fa:	f3bf 8f6f 	isb	sy
 80111fe:	f3bf 8f4f 	dsb	sy
 8011202:	607b      	str	r3, [r7, #4]
}
 8011204:	bf00      	nop
 8011206:	e7fe      	b.n	8011206 <vTaskSwitchContext+0x3e>
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	3b01      	subs	r3, #1
 801120c:	60fb      	str	r3, [r7, #12]
 801120e:	491b      	ldr	r1, [pc, #108]	; (801127c <vTaskSwitchContext+0xb4>)
 8011210:	68fa      	ldr	r2, [r7, #12]
 8011212:	4613      	mov	r3, r2
 8011214:	009b      	lsls	r3, r3, #2
 8011216:	4413      	add	r3, r2
 8011218:	009b      	lsls	r3, r3, #2
 801121a:	440b      	add	r3, r1
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d0e4      	beq.n	80111ec <vTaskSwitchContext+0x24>
 8011222:	68fa      	ldr	r2, [r7, #12]
 8011224:	4613      	mov	r3, r2
 8011226:	009b      	lsls	r3, r3, #2
 8011228:	4413      	add	r3, r2
 801122a:	009b      	lsls	r3, r3, #2
 801122c:	4a13      	ldr	r2, [pc, #76]	; (801127c <vTaskSwitchContext+0xb4>)
 801122e:	4413      	add	r3, r2
 8011230:	60bb      	str	r3, [r7, #8]
 8011232:	68bb      	ldr	r3, [r7, #8]
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	685a      	ldr	r2, [r3, #4]
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	605a      	str	r2, [r3, #4]
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	685a      	ldr	r2, [r3, #4]
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	3308      	adds	r3, #8
 8011244:	429a      	cmp	r2, r3
 8011246:	d104      	bne.n	8011252 <vTaskSwitchContext+0x8a>
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	685b      	ldr	r3, [r3, #4]
 801124c:	685a      	ldr	r2, [r3, #4]
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	605a      	str	r2, [r3, #4]
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	4a09      	ldr	r2, [pc, #36]	; (8011280 <vTaskSwitchContext+0xb8>)
 801125a:	6013      	str	r3, [r2, #0]
 801125c:	4a06      	ldr	r2, [pc, #24]	; (8011278 <vTaskSwitchContext+0xb0>)
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	6013      	str	r3, [r2, #0]
}
 8011262:	bf00      	nop
 8011264:	3714      	adds	r7, #20
 8011266:	46bd      	mov	sp, r7
 8011268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126c:	4770      	bx	lr
 801126e:	bf00      	nop
 8011270:	24001234 	.word	0x24001234
 8011274:	24001220 	.word	0x24001220
 8011278:	24001214 	.word	0x24001214
 801127c:	24000d3c 	.word	0x24000d3c
 8011280:	24000d38 	.word	0x24000d38

08011284 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b084      	sub	sp, #16
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d10a      	bne.n	80112aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011298:	f383 8811 	msr	BASEPRI, r3
 801129c:	f3bf 8f6f 	isb	sy
 80112a0:	f3bf 8f4f 	dsb	sy
 80112a4:	60fb      	str	r3, [r7, #12]
}
 80112a6:	bf00      	nop
 80112a8:	e7fe      	b.n	80112a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80112aa:	4b07      	ldr	r3, [pc, #28]	; (80112c8 <vTaskPlaceOnEventList+0x44>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	3318      	adds	r3, #24
 80112b0:	4619      	mov	r1, r3
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f7fe fe87 	bl	800ffc6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80112b8:	2101      	movs	r1, #1
 80112ba:	6838      	ldr	r0, [r7, #0]
 80112bc:	f000 fb32 	bl	8011924 <prvAddCurrentTaskToDelayedList>
}
 80112c0:	bf00      	nop
 80112c2:	3710      	adds	r7, #16
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}
 80112c8:	24000d38 	.word	0x24000d38

080112cc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b086      	sub	sp, #24
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	60f8      	str	r0, [r7, #12]
 80112d4:	60b9      	str	r1, [r7, #8]
 80112d6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d10a      	bne.n	80112f4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80112de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e2:	f383 8811 	msr	BASEPRI, r3
 80112e6:	f3bf 8f6f 	isb	sy
 80112ea:	f3bf 8f4f 	dsb	sy
 80112ee:	617b      	str	r3, [r7, #20]
}
 80112f0:	bf00      	nop
 80112f2:	e7fe      	b.n	80112f2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80112f4:	4b11      	ldr	r3, [pc, #68]	; (801133c <vTaskPlaceOnUnorderedEventList+0x70>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d10a      	bne.n	8011312 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80112fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011300:	f383 8811 	msr	BASEPRI, r3
 8011304:	f3bf 8f6f 	isb	sy
 8011308:	f3bf 8f4f 	dsb	sy
 801130c:	613b      	str	r3, [r7, #16]
}
 801130e:	bf00      	nop
 8011310:	e7fe      	b.n	8011310 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011312:	4b0b      	ldr	r3, [pc, #44]	; (8011340 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	68ba      	ldr	r2, [r7, #8]
 8011318:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801131c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801131e:	4b08      	ldr	r3, [pc, #32]	; (8011340 <vTaskPlaceOnUnorderedEventList+0x74>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	3318      	adds	r3, #24
 8011324:	4619      	mov	r1, r3
 8011326:	68f8      	ldr	r0, [r7, #12]
 8011328:	f7fe fe29 	bl	800ff7e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801132c:	2101      	movs	r1, #1
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 faf8 	bl	8011924 <prvAddCurrentTaskToDelayedList>
}
 8011334:	bf00      	nop
 8011336:	3718      	adds	r7, #24
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}
 801133c:	24001234 	.word	0x24001234
 8011340:	24000d38 	.word	0x24000d38

08011344 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011344:	b580      	push	{r7, lr}
 8011346:	b086      	sub	sp, #24
 8011348:	af00      	add	r7, sp, #0
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d10a      	bne.n	801136c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801135a:	f383 8811 	msr	BASEPRI, r3
 801135e:	f3bf 8f6f 	isb	sy
 8011362:	f3bf 8f4f 	dsb	sy
 8011366:	617b      	str	r3, [r7, #20]
}
 8011368:	bf00      	nop
 801136a:	e7fe      	b.n	801136a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801136c:	4b0a      	ldr	r3, [pc, #40]	; (8011398 <vTaskPlaceOnEventListRestricted+0x54>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	3318      	adds	r3, #24
 8011372:	4619      	mov	r1, r3
 8011374:	68f8      	ldr	r0, [r7, #12]
 8011376:	f7fe fe02 	bl	800ff7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d002      	beq.n	8011386 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011384:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011386:	6879      	ldr	r1, [r7, #4]
 8011388:	68b8      	ldr	r0, [r7, #8]
 801138a:	f000 facb 	bl	8011924 <prvAddCurrentTaskToDelayedList>
	}
 801138e:	bf00      	nop
 8011390:	3718      	adds	r7, #24
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}
 8011396:	bf00      	nop
 8011398:	24000d38 	.word	0x24000d38

0801139c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b086      	sub	sp, #24
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	68db      	ldr	r3, [r3, #12]
 80113aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d10a      	bne.n	80113c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80113b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b6:	f383 8811 	msr	BASEPRI, r3
 80113ba:	f3bf 8f6f 	isb	sy
 80113be:	f3bf 8f4f 	dsb	sy
 80113c2:	60fb      	str	r3, [r7, #12]
}
 80113c4:	bf00      	nop
 80113c6:	e7fe      	b.n	80113c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	3318      	adds	r3, #24
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7fe fe33 	bl	8010038 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80113d2:	4b1e      	ldr	r3, [pc, #120]	; (801144c <xTaskRemoveFromEventList+0xb0>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d11d      	bne.n	8011416 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80113da:	693b      	ldr	r3, [r7, #16]
 80113dc:	3304      	adds	r3, #4
 80113de:	4618      	mov	r0, r3
 80113e0:	f7fe fe2a 	bl	8010038 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113e8:	4b19      	ldr	r3, [pc, #100]	; (8011450 <xTaskRemoveFromEventList+0xb4>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	429a      	cmp	r2, r3
 80113ee:	d903      	bls.n	80113f8 <xTaskRemoveFromEventList+0x5c>
 80113f0:	693b      	ldr	r3, [r7, #16]
 80113f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f4:	4a16      	ldr	r2, [pc, #88]	; (8011450 <xTaskRemoveFromEventList+0xb4>)
 80113f6:	6013      	str	r3, [r2, #0]
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113fc:	4613      	mov	r3, r2
 80113fe:	009b      	lsls	r3, r3, #2
 8011400:	4413      	add	r3, r2
 8011402:	009b      	lsls	r3, r3, #2
 8011404:	4a13      	ldr	r2, [pc, #76]	; (8011454 <xTaskRemoveFromEventList+0xb8>)
 8011406:	441a      	add	r2, r3
 8011408:	693b      	ldr	r3, [r7, #16]
 801140a:	3304      	adds	r3, #4
 801140c:	4619      	mov	r1, r3
 801140e:	4610      	mov	r0, r2
 8011410:	f7fe fdb5 	bl	800ff7e <vListInsertEnd>
 8011414:	e005      	b.n	8011422 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	3318      	adds	r3, #24
 801141a:	4619      	mov	r1, r3
 801141c:	480e      	ldr	r0, [pc, #56]	; (8011458 <xTaskRemoveFromEventList+0xbc>)
 801141e:	f7fe fdae 	bl	800ff7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011426:	4b0d      	ldr	r3, [pc, #52]	; (801145c <xTaskRemoveFromEventList+0xc0>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801142c:	429a      	cmp	r2, r3
 801142e:	d905      	bls.n	801143c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011430:	2301      	movs	r3, #1
 8011432:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011434:	4b0a      	ldr	r3, [pc, #40]	; (8011460 <xTaskRemoveFromEventList+0xc4>)
 8011436:	2201      	movs	r2, #1
 8011438:	601a      	str	r2, [r3, #0]
 801143a:	e001      	b.n	8011440 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801143c:	2300      	movs	r3, #0
 801143e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011440:	697b      	ldr	r3, [r7, #20]
}
 8011442:	4618      	mov	r0, r3
 8011444:	3718      	adds	r7, #24
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}
 801144a:	bf00      	nop
 801144c:	24001234 	.word	0x24001234
 8011450:	24001214 	.word	0x24001214
 8011454:	24000d3c 	.word	0x24000d3c
 8011458:	240011cc 	.word	0x240011cc
 801145c:	24000d38 	.word	0x24000d38
 8011460:	24001220 	.word	0x24001220

08011464 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b086      	sub	sp, #24
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801146e:	4b29      	ldr	r3, [pc, #164]	; (8011514 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d10a      	bne.n	801148c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8011476:	f04f 0350 	mov.w	r3, #80	; 0x50
 801147a:	f383 8811 	msr	BASEPRI, r3
 801147e:	f3bf 8f6f 	isb	sy
 8011482:	f3bf 8f4f 	dsb	sy
 8011486:	613b      	str	r3, [r7, #16]
}
 8011488:	bf00      	nop
 801148a:	e7fe      	b.n	801148a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	68db      	ldr	r3, [r3, #12]
 801149a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d10a      	bne.n	80114b8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80114a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a6:	f383 8811 	msr	BASEPRI, r3
 80114aa:	f3bf 8f6f 	isb	sy
 80114ae:	f3bf 8f4f 	dsb	sy
 80114b2:	60fb      	str	r3, [r7, #12]
}
 80114b4:	bf00      	nop
 80114b6:	e7fe      	b.n	80114b6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80114b8:	6878      	ldr	r0, [r7, #4]
 80114ba:	f7fe fdbd 	bl	8010038 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	3304      	adds	r3, #4
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7fe fdb8 	bl	8010038 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114cc:	4b12      	ldr	r3, [pc, #72]	; (8011518 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d903      	bls.n	80114dc <vTaskRemoveFromUnorderedEventList+0x78>
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114d8:	4a0f      	ldr	r2, [pc, #60]	; (8011518 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80114da:	6013      	str	r3, [r2, #0]
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114e0:	4613      	mov	r3, r2
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	4413      	add	r3, r2
 80114e6:	009b      	lsls	r3, r3, #2
 80114e8:	4a0c      	ldr	r2, [pc, #48]	; (801151c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80114ea:	441a      	add	r2, r3
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	3304      	adds	r3, #4
 80114f0:	4619      	mov	r1, r3
 80114f2:	4610      	mov	r0, r2
 80114f4:	f7fe fd43 	bl	800ff7e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114fc:	4b08      	ldr	r3, [pc, #32]	; (8011520 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011502:	429a      	cmp	r2, r3
 8011504:	d902      	bls.n	801150c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8011506:	4b07      	ldr	r3, [pc, #28]	; (8011524 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8011508:	2201      	movs	r2, #1
 801150a:	601a      	str	r2, [r3, #0]
	}
}
 801150c:	bf00      	nop
 801150e:	3718      	adds	r7, #24
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	24001234 	.word	0x24001234
 8011518:	24001214 	.word	0x24001214
 801151c:	24000d3c 	.word	0x24000d3c
 8011520:	24000d38 	.word	0x24000d38
 8011524:	24001220 	.word	0x24001220

08011528 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011528:	b480      	push	{r7}
 801152a:	b083      	sub	sp, #12
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011530:	4b06      	ldr	r3, [pc, #24]	; (801154c <vTaskInternalSetTimeOutState+0x24>)
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011538:	4b05      	ldr	r3, [pc, #20]	; (8011550 <vTaskInternalSetTimeOutState+0x28>)
 801153a:	681a      	ldr	r2, [r3, #0]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	605a      	str	r2, [r3, #4]
}
 8011540:	bf00      	nop
 8011542:	370c      	adds	r7, #12
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr
 801154c:	24001224 	.word	0x24001224
 8011550:	24001210 	.word	0x24001210

08011554 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b088      	sub	sp, #32
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d10a      	bne.n	801157a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011568:	f383 8811 	msr	BASEPRI, r3
 801156c:	f3bf 8f6f 	isb	sy
 8011570:	f3bf 8f4f 	dsb	sy
 8011574:	613b      	str	r3, [r7, #16]
}
 8011576:	bf00      	nop
 8011578:	e7fe      	b.n	8011578 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d10a      	bne.n	8011596 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011584:	f383 8811 	msr	BASEPRI, r3
 8011588:	f3bf 8f6f 	isb	sy
 801158c:	f3bf 8f4f 	dsb	sy
 8011590:	60fb      	str	r3, [r7, #12]
}
 8011592:	bf00      	nop
 8011594:	e7fe      	b.n	8011594 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011596:	f000 feb5 	bl	8012304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801159a:	4b1d      	ldr	r3, [pc, #116]	; (8011610 <xTaskCheckForTimeOut+0xbc>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	685b      	ldr	r3, [r3, #4]
 80115a4:	69ba      	ldr	r2, [r7, #24]
 80115a6:	1ad3      	subs	r3, r2, r3
 80115a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115b2:	d102      	bne.n	80115ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80115b4:	2300      	movs	r3, #0
 80115b6:	61fb      	str	r3, [r7, #28]
 80115b8:	e023      	b.n	8011602 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681a      	ldr	r2, [r3, #0]
 80115be:	4b15      	ldr	r3, [pc, #84]	; (8011614 <xTaskCheckForTimeOut+0xc0>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d007      	beq.n	80115d6 <xTaskCheckForTimeOut+0x82>
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	685b      	ldr	r3, [r3, #4]
 80115ca:	69ba      	ldr	r2, [r7, #24]
 80115cc:	429a      	cmp	r2, r3
 80115ce:	d302      	bcc.n	80115d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80115d0:	2301      	movs	r3, #1
 80115d2:	61fb      	str	r3, [r7, #28]
 80115d4:	e015      	b.n	8011602 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	697a      	ldr	r2, [r7, #20]
 80115dc:	429a      	cmp	r2, r3
 80115de:	d20b      	bcs.n	80115f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	681a      	ldr	r2, [r3, #0]
 80115e4:	697b      	ldr	r3, [r7, #20]
 80115e6:	1ad2      	subs	r2, r2, r3
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f7ff ff9b 	bl	8011528 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80115f2:	2300      	movs	r3, #0
 80115f4:	61fb      	str	r3, [r7, #28]
 80115f6:	e004      	b.n	8011602 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	2200      	movs	r2, #0
 80115fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80115fe:	2301      	movs	r3, #1
 8011600:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011602:	f000 feaf 	bl	8012364 <vPortExitCritical>

	return xReturn;
 8011606:	69fb      	ldr	r3, [r7, #28]
}
 8011608:	4618      	mov	r0, r3
 801160a:	3720      	adds	r7, #32
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}
 8011610:	24001210 	.word	0x24001210
 8011614:	24001224 	.word	0x24001224

08011618 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011618:	b480      	push	{r7}
 801161a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801161c:	4b03      	ldr	r3, [pc, #12]	; (801162c <vTaskMissedYield+0x14>)
 801161e:	2201      	movs	r2, #1
 8011620:	601a      	str	r2, [r3, #0]
}
 8011622:	bf00      	nop
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr
 801162c:	24001220 	.word	0x24001220

08011630 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011638:	f000 f852 	bl	80116e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801163c:	4b06      	ldr	r3, [pc, #24]	; (8011658 <prvIdleTask+0x28>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	2b01      	cmp	r3, #1
 8011642:	d9f9      	bls.n	8011638 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011644:	4b05      	ldr	r3, [pc, #20]	; (801165c <prvIdleTask+0x2c>)
 8011646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801164a:	601a      	str	r2, [r3, #0]
 801164c:	f3bf 8f4f 	dsb	sy
 8011650:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011654:	e7f0      	b.n	8011638 <prvIdleTask+0x8>
 8011656:	bf00      	nop
 8011658:	24000d3c 	.word	0x24000d3c
 801165c:	e000ed04 	.word	0xe000ed04

08011660 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b082      	sub	sp, #8
 8011664:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011666:	2300      	movs	r3, #0
 8011668:	607b      	str	r3, [r7, #4]
 801166a:	e00c      	b.n	8011686 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801166c:	687a      	ldr	r2, [r7, #4]
 801166e:	4613      	mov	r3, r2
 8011670:	009b      	lsls	r3, r3, #2
 8011672:	4413      	add	r3, r2
 8011674:	009b      	lsls	r3, r3, #2
 8011676:	4a12      	ldr	r2, [pc, #72]	; (80116c0 <prvInitialiseTaskLists+0x60>)
 8011678:	4413      	add	r3, r2
 801167a:	4618      	mov	r0, r3
 801167c:	f7fe fc52 	bl	800ff24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	3301      	adds	r3, #1
 8011684:	607b      	str	r3, [r7, #4]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2b37      	cmp	r3, #55	; 0x37
 801168a:	d9ef      	bls.n	801166c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801168c:	480d      	ldr	r0, [pc, #52]	; (80116c4 <prvInitialiseTaskLists+0x64>)
 801168e:	f7fe fc49 	bl	800ff24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011692:	480d      	ldr	r0, [pc, #52]	; (80116c8 <prvInitialiseTaskLists+0x68>)
 8011694:	f7fe fc46 	bl	800ff24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011698:	480c      	ldr	r0, [pc, #48]	; (80116cc <prvInitialiseTaskLists+0x6c>)
 801169a:	f7fe fc43 	bl	800ff24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801169e:	480c      	ldr	r0, [pc, #48]	; (80116d0 <prvInitialiseTaskLists+0x70>)
 80116a0:	f7fe fc40 	bl	800ff24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80116a4:	480b      	ldr	r0, [pc, #44]	; (80116d4 <prvInitialiseTaskLists+0x74>)
 80116a6:	f7fe fc3d 	bl	800ff24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80116aa:	4b0b      	ldr	r3, [pc, #44]	; (80116d8 <prvInitialiseTaskLists+0x78>)
 80116ac:	4a05      	ldr	r2, [pc, #20]	; (80116c4 <prvInitialiseTaskLists+0x64>)
 80116ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80116b0:	4b0a      	ldr	r3, [pc, #40]	; (80116dc <prvInitialiseTaskLists+0x7c>)
 80116b2:	4a05      	ldr	r2, [pc, #20]	; (80116c8 <prvInitialiseTaskLists+0x68>)
 80116b4:	601a      	str	r2, [r3, #0]
}
 80116b6:	bf00      	nop
 80116b8:	3708      	adds	r7, #8
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}
 80116be:	bf00      	nop
 80116c0:	24000d3c 	.word	0x24000d3c
 80116c4:	2400119c 	.word	0x2400119c
 80116c8:	240011b0 	.word	0x240011b0
 80116cc:	240011cc 	.word	0x240011cc
 80116d0:	240011e0 	.word	0x240011e0
 80116d4:	240011f8 	.word	0x240011f8
 80116d8:	240011c4 	.word	0x240011c4
 80116dc:	240011c8 	.word	0x240011c8

080116e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b082      	sub	sp, #8
 80116e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80116e6:	e019      	b.n	801171c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80116e8:	f000 fe0c 	bl	8012304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116ec:	4b10      	ldr	r3, [pc, #64]	; (8011730 <prvCheckTasksWaitingTermination+0x50>)
 80116ee:	68db      	ldr	r3, [r3, #12]
 80116f0:	68db      	ldr	r3, [r3, #12]
 80116f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	3304      	adds	r3, #4
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7fe fc9d 	bl	8010038 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80116fe:	4b0d      	ldr	r3, [pc, #52]	; (8011734 <prvCheckTasksWaitingTermination+0x54>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	3b01      	subs	r3, #1
 8011704:	4a0b      	ldr	r2, [pc, #44]	; (8011734 <prvCheckTasksWaitingTermination+0x54>)
 8011706:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011708:	4b0b      	ldr	r3, [pc, #44]	; (8011738 <prvCheckTasksWaitingTermination+0x58>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	3b01      	subs	r3, #1
 801170e:	4a0a      	ldr	r2, [pc, #40]	; (8011738 <prvCheckTasksWaitingTermination+0x58>)
 8011710:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011712:	f000 fe27 	bl	8012364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f000 f810 	bl	801173c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801171c:	4b06      	ldr	r3, [pc, #24]	; (8011738 <prvCheckTasksWaitingTermination+0x58>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d1e1      	bne.n	80116e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011724:	bf00      	nop
 8011726:	bf00      	nop
 8011728:	3708      	adds	r7, #8
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
 801172e:	bf00      	nop
 8011730:	240011e0 	.word	0x240011e0
 8011734:	2400120c 	.word	0x2400120c
 8011738:	240011f4 	.word	0x240011f4

0801173c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801173c:	b580      	push	{r7, lr}
 801173e:	b084      	sub	sp, #16
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801174a:	2b00      	cmp	r3, #0
 801174c:	d108      	bne.n	8011760 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011752:	4618      	mov	r0, r3
 8011754:	f000 ffc4 	bl	80126e0 <vPortFree>
				vPortFree( pxTCB );
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f000 ffc1 	bl	80126e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801175e:	e018      	b.n	8011792 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011766:	2b01      	cmp	r3, #1
 8011768:	d103      	bne.n	8011772 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f000 ffb8 	bl	80126e0 <vPortFree>
	}
 8011770:	e00f      	b.n	8011792 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8011778:	2b02      	cmp	r3, #2
 801177a:	d00a      	beq.n	8011792 <prvDeleteTCB+0x56>
	__asm volatile
 801177c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011780:	f383 8811 	msr	BASEPRI, r3
 8011784:	f3bf 8f6f 	isb	sy
 8011788:	f3bf 8f4f 	dsb	sy
 801178c:	60fb      	str	r3, [r7, #12]
}
 801178e:	bf00      	nop
 8011790:	e7fe      	b.n	8011790 <prvDeleteTCB+0x54>
	}
 8011792:	bf00      	nop
 8011794:	3710      	adds	r7, #16
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
	...

0801179c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801179c:	b480      	push	{r7}
 801179e:	b083      	sub	sp, #12
 80117a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80117a2:	4b0c      	ldr	r3, [pc, #48]	; (80117d4 <prvResetNextTaskUnblockTime+0x38>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d104      	bne.n	80117b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80117ac:	4b0a      	ldr	r3, [pc, #40]	; (80117d8 <prvResetNextTaskUnblockTime+0x3c>)
 80117ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80117b4:	e008      	b.n	80117c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117b6:	4b07      	ldr	r3, [pc, #28]	; (80117d4 <prvResetNextTaskUnblockTime+0x38>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	68db      	ldr	r3, [r3, #12]
 80117bc:	68db      	ldr	r3, [r3, #12]
 80117be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	685b      	ldr	r3, [r3, #4]
 80117c4:	4a04      	ldr	r2, [pc, #16]	; (80117d8 <prvResetNextTaskUnblockTime+0x3c>)
 80117c6:	6013      	str	r3, [r2, #0]
}
 80117c8:	bf00      	nop
 80117ca:	370c      	adds	r7, #12
 80117cc:	46bd      	mov	sp, r7
 80117ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d2:	4770      	bx	lr
 80117d4:	240011c4 	.word	0x240011c4
 80117d8:	2400122c 	.word	0x2400122c

080117dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80117dc:	b480      	push	{r7}
 80117de:	b083      	sub	sp, #12
 80117e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80117e2:	4b0b      	ldr	r3, [pc, #44]	; (8011810 <xTaskGetSchedulerState+0x34>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d102      	bne.n	80117f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80117ea:	2301      	movs	r3, #1
 80117ec:	607b      	str	r3, [r7, #4]
 80117ee:	e008      	b.n	8011802 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80117f0:	4b08      	ldr	r3, [pc, #32]	; (8011814 <xTaskGetSchedulerState+0x38>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d102      	bne.n	80117fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80117f8:	2302      	movs	r3, #2
 80117fa:	607b      	str	r3, [r7, #4]
 80117fc:	e001      	b.n	8011802 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80117fe:	2300      	movs	r3, #0
 8011800:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011802:	687b      	ldr	r3, [r7, #4]
	}
 8011804:	4618      	mov	r0, r3
 8011806:	370c      	adds	r7, #12
 8011808:	46bd      	mov	sp, r7
 801180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180e:	4770      	bx	lr
 8011810:	24001218 	.word	0x24001218
 8011814:	24001234 	.word	0x24001234

08011818 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011818:	b580      	push	{r7, lr}
 801181a:	b086      	sub	sp, #24
 801181c:	af00      	add	r7, sp, #0
 801181e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011824:	2300      	movs	r3, #0
 8011826:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d056      	beq.n	80118dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801182e:	4b2e      	ldr	r3, [pc, #184]	; (80118e8 <xTaskPriorityDisinherit+0xd0>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	693a      	ldr	r2, [r7, #16]
 8011834:	429a      	cmp	r2, r3
 8011836:	d00a      	beq.n	801184e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183c:	f383 8811 	msr	BASEPRI, r3
 8011840:	f3bf 8f6f 	isb	sy
 8011844:	f3bf 8f4f 	dsb	sy
 8011848:	60fb      	str	r3, [r7, #12]
}
 801184a:	bf00      	nop
 801184c:	e7fe      	b.n	801184c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801184e:	693b      	ldr	r3, [r7, #16]
 8011850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011852:	2b00      	cmp	r3, #0
 8011854:	d10a      	bne.n	801186c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011856:	f04f 0350 	mov.w	r3, #80	; 0x50
 801185a:	f383 8811 	msr	BASEPRI, r3
 801185e:	f3bf 8f6f 	isb	sy
 8011862:	f3bf 8f4f 	dsb	sy
 8011866:	60bb      	str	r3, [r7, #8]
}
 8011868:	bf00      	nop
 801186a:	e7fe      	b.n	801186a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011870:	1e5a      	subs	r2, r3, #1
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801187a:	693b      	ldr	r3, [r7, #16]
 801187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801187e:	429a      	cmp	r2, r3
 8011880:	d02c      	beq.n	80118dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011882:	693b      	ldr	r3, [r7, #16]
 8011884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011886:	2b00      	cmp	r3, #0
 8011888:	d128      	bne.n	80118dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	3304      	adds	r3, #4
 801188e:	4618      	mov	r0, r3
 8011890:	f7fe fbd2 	bl	8010038 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011894:	693b      	ldr	r3, [r7, #16]
 8011896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011898:	693b      	ldr	r3, [r7, #16]
 801189a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801189c:	693b      	ldr	r3, [r7, #16]
 801189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80118a4:	693b      	ldr	r3, [r7, #16]
 80118a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118ac:	4b0f      	ldr	r3, [pc, #60]	; (80118ec <xTaskPriorityDisinherit+0xd4>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d903      	bls.n	80118bc <xTaskPriorityDisinherit+0xa4>
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118b8:	4a0c      	ldr	r2, [pc, #48]	; (80118ec <xTaskPriorityDisinherit+0xd4>)
 80118ba:	6013      	str	r3, [r2, #0]
 80118bc:	693b      	ldr	r3, [r7, #16]
 80118be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118c0:	4613      	mov	r3, r2
 80118c2:	009b      	lsls	r3, r3, #2
 80118c4:	4413      	add	r3, r2
 80118c6:	009b      	lsls	r3, r3, #2
 80118c8:	4a09      	ldr	r2, [pc, #36]	; (80118f0 <xTaskPriorityDisinherit+0xd8>)
 80118ca:	441a      	add	r2, r3
 80118cc:	693b      	ldr	r3, [r7, #16]
 80118ce:	3304      	adds	r3, #4
 80118d0:	4619      	mov	r1, r3
 80118d2:	4610      	mov	r0, r2
 80118d4:	f7fe fb53 	bl	800ff7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80118d8:	2301      	movs	r3, #1
 80118da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80118dc:	697b      	ldr	r3, [r7, #20]
	}
 80118de:	4618      	mov	r0, r3
 80118e0:	3718      	adds	r7, #24
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}
 80118e6:	bf00      	nop
 80118e8:	24000d38 	.word	0x24000d38
 80118ec:	24001214 	.word	0x24001214
 80118f0:	24000d3c 	.word	0x24000d3c

080118f4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80118f4:	b480      	push	{r7}
 80118f6:	b083      	sub	sp, #12
 80118f8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80118fa:	4b09      	ldr	r3, [pc, #36]	; (8011920 <uxTaskResetEventItemValue+0x2c>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	699b      	ldr	r3, [r3, #24]
 8011900:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011902:	4b07      	ldr	r3, [pc, #28]	; (8011920 <uxTaskResetEventItemValue+0x2c>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011908:	4b05      	ldr	r3, [pc, #20]	; (8011920 <uxTaskResetEventItemValue+0x2c>)
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8011910:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8011912:	687b      	ldr	r3, [r7, #4]
}
 8011914:	4618      	mov	r0, r3
 8011916:	370c      	adds	r7, #12
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr
 8011920:	24000d38 	.word	0x24000d38

08011924 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b084      	sub	sp, #16
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
 801192c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801192e:	4b21      	ldr	r3, [pc, #132]	; (80119b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011934:	4b20      	ldr	r3, [pc, #128]	; (80119b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	3304      	adds	r3, #4
 801193a:	4618      	mov	r0, r3
 801193c:	f7fe fb7c 	bl	8010038 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011946:	d10a      	bne.n	801195e <prvAddCurrentTaskToDelayedList+0x3a>
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d007      	beq.n	801195e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801194e:	4b1a      	ldr	r3, [pc, #104]	; (80119b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	3304      	adds	r3, #4
 8011954:	4619      	mov	r1, r3
 8011956:	4819      	ldr	r0, [pc, #100]	; (80119bc <prvAddCurrentTaskToDelayedList+0x98>)
 8011958:	f7fe fb11 	bl	800ff7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801195c:	e026      	b.n	80119ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801195e:	68fa      	ldr	r2, [r7, #12]
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	4413      	add	r3, r2
 8011964:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011966:	4b14      	ldr	r3, [pc, #80]	; (80119b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	68ba      	ldr	r2, [r7, #8]
 801196c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801196e:	68ba      	ldr	r2, [r7, #8]
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	429a      	cmp	r2, r3
 8011974:	d209      	bcs.n	801198a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011976:	4b12      	ldr	r3, [pc, #72]	; (80119c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	4b0f      	ldr	r3, [pc, #60]	; (80119b8 <prvAddCurrentTaskToDelayedList+0x94>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	3304      	adds	r3, #4
 8011980:	4619      	mov	r1, r3
 8011982:	4610      	mov	r0, r2
 8011984:	f7fe fb1f 	bl	800ffc6 <vListInsert>
}
 8011988:	e010      	b.n	80119ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801198a:	4b0e      	ldr	r3, [pc, #56]	; (80119c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801198c:	681a      	ldr	r2, [r3, #0]
 801198e:	4b0a      	ldr	r3, [pc, #40]	; (80119b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	3304      	adds	r3, #4
 8011994:	4619      	mov	r1, r3
 8011996:	4610      	mov	r0, r2
 8011998:	f7fe fb15 	bl	800ffc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801199c:	4b0a      	ldr	r3, [pc, #40]	; (80119c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	68ba      	ldr	r2, [r7, #8]
 80119a2:	429a      	cmp	r2, r3
 80119a4:	d202      	bcs.n	80119ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80119a6:	4a08      	ldr	r2, [pc, #32]	; (80119c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	6013      	str	r3, [r2, #0]
}
 80119ac:	bf00      	nop
 80119ae:	3710      	adds	r7, #16
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}
 80119b4:	24001210 	.word	0x24001210
 80119b8:	24000d38 	.word	0x24000d38
 80119bc:	240011f8 	.word	0x240011f8
 80119c0:	240011c8 	.word	0x240011c8
 80119c4:	240011c4 	.word	0x240011c4
 80119c8:	2400122c 	.word	0x2400122c

080119cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b08a      	sub	sp, #40	; 0x28
 80119d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80119d2:	2300      	movs	r3, #0
 80119d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80119d6:	f000 fb07 	bl	8011fe8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80119da:	4b1c      	ldr	r3, [pc, #112]	; (8011a4c <xTimerCreateTimerTask+0x80>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d021      	beq.n	8011a26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80119e2:	2300      	movs	r3, #0
 80119e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80119e6:	2300      	movs	r3, #0
 80119e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80119ea:	1d3a      	adds	r2, r7, #4
 80119ec:	f107 0108 	add.w	r1, r7, #8
 80119f0:	f107 030c 	add.w	r3, r7, #12
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7fe f88d 	bl	800fb14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80119fa:	6879      	ldr	r1, [r7, #4]
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	68fa      	ldr	r2, [r7, #12]
 8011a00:	9202      	str	r2, [sp, #8]
 8011a02:	9301      	str	r3, [sp, #4]
 8011a04:	2302      	movs	r3, #2
 8011a06:	9300      	str	r3, [sp, #0]
 8011a08:	2300      	movs	r3, #0
 8011a0a:	460a      	mov	r2, r1
 8011a0c:	4910      	ldr	r1, [pc, #64]	; (8011a50 <xTimerCreateTimerTask+0x84>)
 8011a0e:	4811      	ldr	r0, [pc, #68]	; (8011a54 <xTimerCreateTimerTask+0x88>)
 8011a10:	f7ff f828 	bl	8010a64 <xTaskCreateStatic>
 8011a14:	4603      	mov	r3, r0
 8011a16:	4a10      	ldr	r2, [pc, #64]	; (8011a58 <xTimerCreateTimerTask+0x8c>)
 8011a18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011a1a:	4b0f      	ldr	r3, [pc, #60]	; (8011a58 <xTimerCreateTimerTask+0x8c>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d001      	beq.n	8011a26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011a22:	2301      	movs	r3, #1
 8011a24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d10a      	bne.n	8011a42 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a30:	f383 8811 	msr	BASEPRI, r3
 8011a34:	f3bf 8f6f 	isb	sy
 8011a38:	f3bf 8f4f 	dsb	sy
 8011a3c:	613b      	str	r3, [r7, #16]
}
 8011a3e:	bf00      	nop
 8011a40:	e7fe      	b.n	8011a40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011a42:	697b      	ldr	r3, [r7, #20]
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	3718      	adds	r7, #24
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}
 8011a4c:	24001268 	.word	0x24001268
 8011a50:	08013cac 	.word	0x08013cac
 8011a54:	08011b91 	.word	0x08011b91
 8011a58:	2400126c 	.word	0x2400126c

08011a5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b08a      	sub	sp, #40	; 0x28
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	60f8      	str	r0, [r7, #12]
 8011a64:	60b9      	str	r1, [r7, #8]
 8011a66:	607a      	str	r2, [r7, #4]
 8011a68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d10a      	bne.n	8011a8a <xTimerGenericCommand+0x2e>
	__asm volatile
 8011a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a78:	f383 8811 	msr	BASEPRI, r3
 8011a7c:	f3bf 8f6f 	isb	sy
 8011a80:	f3bf 8f4f 	dsb	sy
 8011a84:	623b      	str	r3, [r7, #32]
}
 8011a86:	bf00      	nop
 8011a88:	e7fe      	b.n	8011a88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011a8a:	4b1a      	ldr	r3, [pc, #104]	; (8011af4 <xTimerGenericCommand+0x98>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d02a      	beq.n	8011ae8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	2b05      	cmp	r3, #5
 8011aa2:	dc18      	bgt.n	8011ad6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011aa4:	f7ff fe9a 	bl	80117dc <xTaskGetSchedulerState>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	2b02      	cmp	r3, #2
 8011aac:	d109      	bne.n	8011ac2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011aae:	4b11      	ldr	r3, [pc, #68]	; (8011af4 <xTimerGenericCommand+0x98>)
 8011ab0:	6818      	ldr	r0, [r3, #0]
 8011ab2:	f107 0110 	add.w	r1, r7, #16
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011aba:	f7fe fbeb 	bl	8010294 <xQueueGenericSend>
 8011abe:	6278      	str	r0, [r7, #36]	; 0x24
 8011ac0:	e012      	b.n	8011ae8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011ac2:	4b0c      	ldr	r3, [pc, #48]	; (8011af4 <xTimerGenericCommand+0x98>)
 8011ac4:	6818      	ldr	r0, [r3, #0]
 8011ac6:	f107 0110 	add.w	r1, r7, #16
 8011aca:	2300      	movs	r3, #0
 8011acc:	2200      	movs	r2, #0
 8011ace:	f7fe fbe1 	bl	8010294 <xQueueGenericSend>
 8011ad2:	6278      	str	r0, [r7, #36]	; 0x24
 8011ad4:	e008      	b.n	8011ae8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011ad6:	4b07      	ldr	r3, [pc, #28]	; (8011af4 <xTimerGenericCommand+0x98>)
 8011ad8:	6818      	ldr	r0, [r3, #0]
 8011ada:	f107 0110 	add.w	r1, r7, #16
 8011ade:	2300      	movs	r3, #0
 8011ae0:	683a      	ldr	r2, [r7, #0]
 8011ae2:	f7fe fcd5 	bl	8010490 <xQueueGenericSendFromISR>
 8011ae6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3728      	adds	r7, #40	; 0x28
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}
 8011af2:	bf00      	nop
 8011af4:	24001268 	.word	0x24001268

08011af8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b088      	sub	sp, #32
 8011afc:	af02      	add	r7, sp, #8
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b02:	4b22      	ldr	r3, [pc, #136]	; (8011b8c <prvProcessExpiredTimer+0x94>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	68db      	ldr	r3, [r3, #12]
 8011b08:	68db      	ldr	r3, [r3, #12]
 8011b0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	3304      	adds	r3, #4
 8011b10:	4618      	mov	r0, r3
 8011b12:	f7fe fa91 	bl	8010038 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011b16:	697b      	ldr	r3, [r7, #20]
 8011b18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b1c:	f003 0304 	and.w	r3, r3, #4
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d022      	beq.n	8011b6a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	699a      	ldr	r2, [r3, #24]
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	18d1      	adds	r1, r2, r3
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	683a      	ldr	r2, [r7, #0]
 8011b30:	6978      	ldr	r0, [r7, #20]
 8011b32:	f000 f8d1 	bl	8011cd8 <prvInsertTimerInActiveList>
 8011b36:	4603      	mov	r3, r0
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d01f      	beq.n	8011b7c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	9300      	str	r3, [sp, #0]
 8011b40:	2300      	movs	r3, #0
 8011b42:	687a      	ldr	r2, [r7, #4]
 8011b44:	2100      	movs	r1, #0
 8011b46:	6978      	ldr	r0, [r7, #20]
 8011b48:	f7ff ff88 	bl	8011a5c <xTimerGenericCommand>
 8011b4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d113      	bne.n	8011b7c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b58:	f383 8811 	msr	BASEPRI, r3
 8011b5c:	f3bf 8f6f 	isb	sy
 8011b60:	f3bf 8f4f 	dsb	sy
 8011b64:	60fb      	str	r3, [r7, #12]
}
 8011b66:	bf00      	nop
 8011b68:	e7fe      	b.n	8011b68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011b70:	f023 0301 	bic.w	r3, r3, #1
 8011b74:	b2da      	uxtb	r2, r3
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	6a1b      	ldr	r3, [r3, #32]
 8011b80:	6978      	ldr	r0, [r7, #20]
 8011b82:	4798      	blx	r3
}
 8011b84:	bf00      	nop
 8011b86:	3718      	adds	r7, #24
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}
 8011b8c:	24001260 	.word	0x24001260

08011b90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b084      	sub	sp, #16
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011b98:	f107 0308 	add.w	r3, r7, #8
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f000 f857 	bl	8011c50 <prvGetNextExpireTime>
 8011ba2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	68f8      	ldr	r0, [r7, #12]
 8011baa:	f000 f803 	bl	8011bb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011bae:	f000 f8d5 	bl	8011d5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011bb2:	e7f1      	b.n	8011b98 <prvTimerTask+0x8>

08011bb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b084      	sub	sp, #16
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011bbe:	f7ff f98d 	bl	8010edc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011bc2:	f107 0308 	add.w	r3, r7, #8
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f000 f866 	bl	8011c98 <prvSampleTimeNow>
 8011bcc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d130      	bne.n	8011c36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d10a      	bne.n	8011bf0 <prvProcessTimerOrBlockTask+0x3c>
 8011bda:	687a      	ldr	r2, [r7, #4]
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d806      	bhi.n	8011bf0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011be2:	f7ff f989 	bl	8010ef8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011be6:	68f9      	ldr	r1, [r7, #12]
 8011be8:	6878      	ldr	r0, [r7, #4]
 8011bea:	f7ff ff85 	bl	8011af8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011bee:	e024      	b.n	8011c3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d008      	beq.n	8011c08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011bf6:	4b13      	ldr	r3, [pc, #76]	; (8011c44 <prvProcessTimerOrBlockTask+0x90>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d101      	bne.n	8011c04 <prvProcessTimerOrBlockTask+0x50>
 8011c00:	2301      	movs	r3, #1
 8011c02:	e000      	b.n	8011c06 <prvProcessTimerOrBlockTask+0x52>
 8011c04:	2300      	movs	r3, #0
 8011c06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011c08:	4b0f      	ldr	r3, [pc, #60]	; (8011c48 <prvProcessTimerOrBlockTask+0x94>)
 8011c0a:	6818      	ldr	r0, [r3, #0]
 8011c0c:	687a      	ldr	r2, [r7, #4]
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	1ad3      	subs	r3, r2, r3
 8011c12:	683a      	ldr	r2, [r7, #0]
 8011c14:	4619      	mov	r1, r3
 8011c16:	f7fe fef1 	bl	80109fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011c1a:	f7ff f96d 	bl	8010ef8 <xTaskResumeAll>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d10a      	bne.n	8011c3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011c24:	4b09      	ldr	r3, [pc, #36]	; (8011c4c <prvProcessTimerOrBlockTask+0x98>)
 8011c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c2a:	601a      	str	r2, [r3, #0]
 8011c2c:	f3bf 8f4f 	dsb	sy
 8011c30:	f3bf 8f6f 	isb	sy
}
 8011c34:	e001      	b.n	8011c3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011c36:	f7ff f95f 	bl	8010ef8 <xTaskResumeAll>
}
 8011c3a:	bf00      	nop
 8011c3c:	3710      	adds	r7, #16
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
 8011c42:	bf00      	nop
 8011c44:	24001264 	.word	0x24001264
 8011c48:	24001268 	.word	0x24001268
 8011c4c:	e000ed04 	.word	0xe000ed04

08011c50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011c50:	b480      	push	{r7}
 8011c52:	b085      	sub	sp, #20
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011c58:	4b0e      	ldr	r3, [pc, #56]	; (8011c94 <prvGetNextExpireTime+0x44>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d101      	bne.n	8011c66 <prvGetNextExpireTime+0x16>
 8011c62:	2201      	movs	r2, #1
 8011c64:	e000      	b.n	8011c68 <prvGetNextExpireTime+0x18>
 8011c66:	2200      	movs	r2, #0
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d105      	bne.n	8011c80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011c74:	4b07      	ldr	r3, [pc, #28]	; (8011c94 <prvGetNextExpireTime+0x44>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	60fb      	str	r3, [r7, #12]
 8011c7e:	e001      	b.n	8011c84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011c80:	2300      	movs	r3, #0
 8011c82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011c84:	68fb      	ldr	r3, [r7, #12]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3714      	adds	r7, #20
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c90:	4770      	bx	lr
 8011c92:	bf00      	nop
 8011c94:	24001260 	.word	0x24001260

08011c98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b084      	sub	sp, #16
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011ca0:	f7ff f9c8 	bl	8011034 <xTaskGetTickCount>
 8011ca4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011ca6:	4b0b      	ldr	r3, [pc, #44]	; (8011cd4 <prvSampleTimeNow+0x3c>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	68fa      	ldr	r2, [r7, #12]
 8011cac:	429a      	cmp	r2, r3
 8011cae:	d205      	bcs.n	8011cbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011cb0:	f000 f936 	bl	8011f20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2201      	movs	r2, #1
 8011cb8:	601a      	str	r2, [r3, #0]
 8011cba:	e002      	b.n	8011cc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011cc2:	4a04      	ldr	r2, [pc, #16]	; (8011cd4 <prvSampleTimeNow+0x3c>)
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	3710      	adds	r7, #16
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	bd80      	pop	{r7, pc}
 8011cd2:	bf00      	nop
 8011cd4:	24001270 	.word	0x24001270

08011cd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b086      	sub	sp, #24
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	60f8      	str	r0, [r7, #12]
 8011ce0:	60b9      	str	r1, [r7, #8]
 8011ce2:	607a      	str	r2, [r7, #4]
 8011ce4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	68ba      	ldr	r2, [r7, #8]
 8011cee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	68fa      	ldr	r2, [r7, #12]
 8011cf4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011cf6:	68ba      	ldr	r2, [r7, #8]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	d812      	bhi.n	8011d24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011cfe:	687a      	ldr	r2, [r7, #4]
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	1ad2      	subs	r2, r2, r3
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	699b      	ldr	r3, [r3, #24]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d302      	bcc.n	8011d12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	617b      	str	r3, [r7, #20]
 8011d10:	e01b      	b.n	8011d4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011d12:	4b10      	ldr	r3, [pc, #64]	; (8011d54 <prvInsertTimerInActiveList+0x7c>)
 8011d14:	681a      	ldr	r2, [r3, #0]
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	3304      	adds	r3, #4
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	4610      	mov	r0, r2
 8011d1e:	f7fe f952 	bl	800ffc6 <vListInsert>
 8011d22:	e012      	b.n	8011d4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011d24:	687a      	ldr	r2, [r7, #4]
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d206      	bcs.n	8011d3a <prvInsertTimerInActiveList+0x62>
 8011d2c:	68ba      	ldr	r2, [r7, #8]
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d302      	bcc.n	8011d3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011d34:	2301      	movs	r3, #1
 8011d36:	617b      	str	r3, [r7, #20]
 8011d38:	e007      	b.n	8011d4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011d3a:	4b07      	ldr	r3, [pc, #28]	; (8011d58 <prvInsertTimerInActiveList+0x80>)
 8011d3c:	681a      	ldr	r2, [r3, #0]
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	3304      	adds	r3, #4
 8011d42:	4619      	mov	r1, r3
 8011d44:	4610      	mov	r0, r2
 8011d46:	f7fe f93e 	bl	800ffc6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011d4a:	697b      	ldr	r3, [r7, #20]
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3718      	adds	r7, #24
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}
 8011d54:	24001264 	.word	0x24001264
 8011d58:	24001260 	.word	0x24001260

08011d5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b08e      	sub	sp, #56	; 0x38
 8011d60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011d62:	e0ca      	b.n	8011efa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	da18      	bge.n	8011d9c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011d6a:	1d3b      	adds	r3, r7, #4
 8011d6c:	3304      	adds	r3, #4
 8011d6e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d10a      	bne.n	8011d8c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8011d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d7a:	f383 8811 	msr	BASEPRI, r3
 8011d7e:	f3bf 8f6f 	isb	sy
 8011d82:	f3bf 8f4f 	dsb	sy
 8011d86:	61fb      	str	r3, [r7, #28]
}
 8011d88:	bf00      	nop
 8011d8a:	e7fe      	b.n	8011d8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d92:	6850      	ldr	r0, [r2, #4]
 8011d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d96:	6892      	ldr	r2, [r2, #8]
 8011d98:	4611      	mov	r1, r2
 8011d9a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f2c0 80aa 	blt.w	8011ef8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011daa:	695b      	ldr	r3, [r3, #20]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d004      	beq.n	8011dba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011db2:	3304      	adds	r3, #4
 8011db4:	4618      	mov	r0, r3
 8011db6:	f7fe f93f 	bl	8010038 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011dba:	463b      	mov	r3, r7
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f7ff ff6b 	bl	8011c98 <prvSampleTimeNow>
 8011dc2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2b09      	cmp	r3, #9
 8011dc8:	f200 8097 	bhi.w	8011efa <prvProcessReceivedCommands+0x19e>
 8011dcc:	a201      	add	r2, pc, #4	; (adr r2, 8011dd4 <prvProcessReceivedCommands+0x78>)
 8011dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dd2:	bf00      	nop
 8011dd4:	08011dfd 	.word	0x08011dfd
 8011dd8:	08011dfd 	.word	0x08011dfd
 8011ddc:	08011dfd 	.word	0x08011dfd
 8011de0:	08011e71 	.word	0x08011e71
 8011de4:	08011e85 	.word	0x08011e85
 8011de8:	08011ecf 	.word	0x08011ecf
 8011dec:	08011dfd 	.word	0x08011dfd
 8011df0:	08011dfd 	.word	0x08011dfd
 8011df4:	08011e71 	.word	0x08011e71
 8011df8:	08011e85 	.word	0x08011e85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e02:	f043 0301 	orr.w	r3, r3, #1
 8011e06:	b2da      	uxtb	r2, r3
 8011e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011e0e:	68ba      	ldr	r2, [r7, #8]
 8011e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e12:	699b      	ldr	r3, [r3, #24]
 8011e14:	18d1      	adds	r1, r2, r3
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e1c:	f7ff ff5c 	bl	8011cd8 <prvInsertTimerInActiveList>
 8011e20:	4603      	mov	r3, r0
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d069      	beq.n	8011efa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e28:	6a1b      	ldr	r3, [r3, #32]
 8011e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e34:	f003 0304 	and.w	r3, r3, #4
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d05e      	beq.n	8011efa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011e3c:	68ba      	ldr	r2, [r7, #8]
 8011e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e40:	699b      	ldr	r3, [r3, #24]
 8011e42:	441a      	add	r2, r3
 8011e44:	2300      	movs	r3, #0
 8011e46:	9300      	str	r3, [sp, #0]
 8011e48:	2300      	movs	r3, #0
 8011e4a:	2100      	movs	r1, #0
 8011e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e4e:	f7ff fe05 	bl	8011a5c <xTimerGenericCommand>
 8011e52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011e54:	6a3b      	ldr	r3, [r7, #32]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d14f      	bne.n	8011efa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8011e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e5e:	f383 8811 	msr	BASEPRI, r3
 8011e62:	f3bf 8f6f 	isb	sy
 8011e66:	f3bf 8f4f 	dsb	sy
 8011e6a:	61bb      	str	r3, [r7, #24]
}
 8011e6c:	bf00      	nop
 8011e6e:	e7fe      	b.n	8011e6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e76:	f023 0301 	bic.w	r3, r3, #1
 8011e7a:	b2da      	uxtb	r2, r3
 8011e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011e82:	e03a      	b.n	8011efa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e8a:	f043 0301 	orr.w	r3, r3, #1
 8011e8e:	b2da      	uxtb	r2, r3
 8011e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011e96:	68ba      	ldr	r2, [r7, #8]
 8011e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e9e:	699b      	ldr	r3, [r3, #24]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d10a      	bne.n	8011eba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ea8:	f383 8811 	msr	BASEPRI, r3
 8011eac:	f3bf 8f6f 	isb	sy
 8011eb0:	f3bf 8f4f 	dsb	sy
 8011eb4:	617b      	str	r3, [r7, #20]
}
 8011eb6:	bf00      	nop
 8011eb8:	e7fe      	b.n	8011eb8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebc:	699a      	ldr	r2, [r3, #24]
 8011ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec0:	18d1      	adds	r1, r2, r3
 8011ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ec8:	f7ff ff06 	bl	8011cd8 <prvInsertTimerInActiveList>
					break;
 8011ecc:	e015      	b.n	8011efa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ed4:	f003 0302 	and.w	r3, r3, #2
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d103      	bne.n	8011ee4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ede:	f000 fbff 	bl	80126e0 <vPortFree>
 8011ee2:	e00a      	b.n	8011efa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011eea:	f023 0301 	bic.w	r3, r3, #1
 8011eee:	b2da      	uxtb	r2, r3
 8011ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011ef6:	e000      	b.n	8011efa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011ef8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011efa:	4b08      	ldr	r3, [pc, #32]	; (8011f1c <prvProcessReceivedCommands+0x1c0>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	1d39      	adds	r1, r7, #4
 8011f00:	2200      	movs	r2, #0
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7fe fb60 	bl	80105c8 <xQueueReceive>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	f47f af2a 	bne.w	8011d64 <prvProcessReceivedCommands+0x8>
	}
}
 8011f10:	bf00      	nop
 8011f12:	bf00      	nop
 8011f14:	3730      	adds	r7, #48	; 0x30
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	24001268 	.word	0x24001268

08011f20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b088      	sub	sp, #32
 8011f24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011f26:	e048      	b.n	8011fba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011f28:	4b2d      	ldr	r3, [pc, #180]	; (8011fe0 <prvSwitchTimerLists+0xc0>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	68db      	ldr	r3, [r3, #12]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f32:	4b2b      	ldr	r3, [pc, #172]	; (8011fe0 <prvSwitchTimerLists+0xc0>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	68db      	ldr	r3, [r3, #12]
 8011f3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	3304      	adds	r3, #4
 8011f40:	4618      	mov	r0, r3
 8011f42:	f7fe f879 	bl	8010038 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	6a1b      	ldr	r3, [r3, #32]
 8011f4a:	68f8      	ldr	r0, [r7, #12]
 8011f4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f54:	f003 0304 	and.w	r3, r3, #4
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d02e      	beq.n	8011fba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	699b      	ldr	r3, [r3, #24]
 8011f60:	693a      	ldr	r2, [r7, #16]
 8011f62:	4413      	add	r3, r2
 8011f64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011f66:	68ba      	ldr	r2, [r7, #8]
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d90e      	bls.n	8011f8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	68ba      	ldr	r2, [r7, #8]
 8011f72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	68fa      	ldr	r2, [r7, #12]
 8011f78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011f7a:	4b19      	ldr	r3, [pc, #100]	; (8011fe0 <prvSwitchTimerLists+0xc0>)
 8011f7c:	681a      	ldr	r2, [r3, #0]
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	3304      	adds	r3, #4
 8011f82:	4619      	mov	r1, r3
 8011f84:	4610      	mov	r0, r2
 8011f86:	f7fe f81e 	bl	800ffc6 <vListInsert>
 8011f8a:	e016      	b.n	8011fba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	9300      	str	r3, [sp, #0]
 8011f90:	2300      	movs	r3, #0
 8011f92:	693a      	ldr	r2, [r7, #16]
 8011f94:	2100      	movs	r1, #0
 8011f96:	68f8      	ldr	r0, [r7, #12]
 8011f98:	f7ff fd60 	bl	8011a5c <xTimerGenericCommand>
 8011f9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d10a      	bne.n	8011fba <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fa8:	f383 8811 	msr	BASEPRI, r3
 8011fac:	f3bf 8f6f 	isb	sy
 8011fb0:	f3bf 8f4f 	dsb	sy
 8011fb4:	603b      	str	r3, [r7, #0]
}
 8011fb6:	bf00      	nop
 8011fb8:	e7fe      	b.n	8011fb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011fba:	4b09      	ldr	r3, [pc, #36]	; (8011fe0 <prvSwitchTimerLists+0xc0>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d1b1      	bne.n	8011f28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011fc4:	4b06      	ldr	r3, [pc, #24]	; (8011fe0 <prvSwitchTimerLists+0xc0>)
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8011fca:	4b06      	ldr	r3, [pc, #24]	; (8011fe4 <prvSwitchTimerLists+0xc4>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	4a04      	ldr	r2, [pc, #16]	; (8011fe0 <prvSwitchTimerLists+0xc0>)
 8011fd0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011fd2:	4a04      	ldr	r2, [pc, #16]	; (8011fe4 <prvSwitchTimerLists+0xc4>)
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	6013      	str	r3, [r2, #0]
}
 8011fd8:	bf00      	nop
 8011fda:	3718      	adds	r7, #24
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd80      	pop	{r7, pc}
 8011fe0:	24001260 	.word	0x24001260
 8011fe4:	24001264 	.word	0x24001264

08011fe8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011fee:	f000 f989 	bl	8012304 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011ff2:	4b15      	ldr	r3, [pc, #84]	; (8012048 <prvCheckForValidListAndQueue+0x60>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d120      	bne.n	801203c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8011ffa:	4814      	ldr	r0, [pc, #80]	; (801204c <prvCheckForValidListAndQueue+0x64>)
 8011ffc:	f7fd ff92 	bl	800ff24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012000:	4813      	ldr	r0, [pc, #76]	; (8012050 <prvCheckForValidListAndQueue+0x68>)
 8012002:	f7fd ff8f 	bl	800ff24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012006:	4b13      	ldr	r3, [pc, #76]	; (8012054 <prvCheckForValidListAndQueue+0x6c>)
 8012008:	4a10      	ldr	r2, [pc, #64]	; (801204c <prvCheckForValidListAndQueue+0x64>)
 801200a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801200c:	4b12      	ldr	r3, [pc, #72]	; (8012058 <prvCheckForValidListAndQueue+0x70>)
 801200e:	4a10      	ldr	r2, [pc, #64]	; (8012050 <prvCheckForValidListAndQueue+0x68>)
 8012010:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012012:	2300      	movs	r3, #0
 8012014:	9300      	str	r3, [sp, #0]
 8012016:	4b11      	ldr	r3, [pc, #68]	; (801205c <prvCheckForValidListAndQueue+0x74>)
 8012018:	4a11      	ldr	r2, [pc, #68]	; (8012060 <prvCheckForValidListAndQueue+0x78>)
 801201a:	2110      	movs	r1, #16
 801201c:	200a      	movs	r0, #10
 801201e:	f7fe f89d 	bl	801015c <xQueueGenericCreateStatic>
 8012022:	4603      	mov	r3, r0
 8012024:	4a08      	ldr	r2, [pc, #32]	; (8012048 <prvCheckForValidListAndQueue+0x60>)
 8012026:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012028:	4b07      	ldr	r3, [pc, #28]	; (8012048 <prvCheckForValidListAndQueue+0x60>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d005      	beq.n	801203c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012030:	4b05      	ldr	r3, [pc, #20]	; (8012048 <prvCheckForValidListAndQueue+0x60>)
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	490b      	ldr	r1, [pc, #44]	; (8012064 <prvCheckForValidListAndQueue+0x7c>)
 8012036:	4618      	mov	r0, r3
 8012038:	f7fe fcb6 	bl	80109a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801203c:	f000 f992 	bl	8012364 <vPortExitCritical>
}
 8012040:	bf00      	nop
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
 8012046:	bf00      	nop
 8012048:	24001268 	.word	0x24001268
 801204c:	24001238 	.word	0x24001238
 8012050:	2400124c 	.word	0x2400124c
 8012054:	24001260 	.word	0x24001260
 8012058:	24001264 	.word	0x24001264
 801205c:	24001314 	.word	0x24001314
 8012060:	24001274 	.word	0x24001274
 8012064:	08013cb4 	.word	0x08013cb4

08012068 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012068:	b580      	push	{r7, lr}
 801206a:	b08a      	sub	sp, #40	; 0x28
 801206c:	af00      	add	r7, sp, #0
 801206e:	60f8      	str	r0, [r7, #12]
 8012070:	60b9      	str	r1, [r7, #8]
 8012072:	607a      	str	r2, [r7, #4]
 8012074:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8012076:	f06f 0301 	mvn.w	r3, #1
 801207a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012088:	4b06      	ldr	r3, [pc, #24]	; (80120a4 <xTimerPendFunctionCallFromISR+0x3c>)
 801208a:	6818      	ldr	r0, [r3, #0]
 801208c:	f107 0114 	add.w	r1, r7, #20
 8012090:	2300      	movs	r3, #0
 8012092:	683a      	ldr	r2, [r7, #0]
 8012094:	f7fe f9fc 	bl	8010490 <xQueueGenericSendFromISR>
 8012098:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801209c:	4618      	mov	r0, r3
 801209e:	3728      	adds	r7, #40	; 0x28
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	24001268 	.word	0x24001268

080120a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80120a8:	b480      	push	{r7}
 80120aa:	b085      	sub	sp, #20
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	60f8      	str	r0, [r7, #12]
 80120b0:	60b9      	str	r1, [r7, #8]
 80120b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	3b04      	subs	r3, #4
 80120b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80120c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	3b04      	subs	r3, #4
 80120c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	f023 0201 	bic.w	r2, r3, #1
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	3b04      	subs	r3, #4
 80120d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80120d8:	4a0c      	ldr	r2, [pc, #48]	; (801210c <pxPortInitialiseStack+0x64>)
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	3b14      	subs	r3, #20
 80120e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80120e4:	687a      	ldr	r2, [r7, #4]
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	3b04      	subs	r3, #4
 80120ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	f06f 0202 	mvn.w	r2, #2
 80120f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	3b20      	subs	r3, #32
 80120fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80120fe:	68fb      	ldr	r3, [r7, #12]
}
 8012100:	4618      	mov	r0, r3
 8012102:	3714      	adds	r7, #20
 8012104:	46bd      	mov	sp, r7
 8012106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210a:	4770      	bx	lr
 801210c:	08012111 	.word	0x08012111

08012110 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012110:	b480      	push	{r7}
 8012112:	b085      	sub	sp, #20
 8012114:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012116:	2300      	movs	r3, #0
 8012118:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801211a:	4b12      	ldr	r3, [pc, #72]	; (8012164 <prvTaskExitError+0x54>)
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012122:	d00a      	beq.n	801213a <prvTaskExitError+0x2a>
	__asm volatile
 8012124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012128:	f383 8811 	msr	BASEPRI, r3
 801212c:	f3bf 8f6f 	isb	sy
 8012130:	f3bf 8f4f 	dsb	sy
 8012134:	60fb      	str	r3, [r7, #12]
}
 8012136:	bf00      	nop
 8012138:	e7fe      	b.n	8012138 <prvTaskExitError+0x28>
	__asm volatile
 801213a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801213e:	f383 8811 	msr	BASEPRI, r3
 8012142:	f3bf 8f6f 	isb	sy
 8012146:	f3bf 8f4f 	dsb	sy
 801214a:	60bb      	str	r3, [r7, #8]
}
 801214c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801214e:	bf00      	nop
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d0fc      	beq.n	8012150 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012156:	bf00      	nop
 8012158:	bf00      	nop
 801215a:	3714      	adds	r7, #20
 801215c:	46bd      	mov	sp, r7
 801215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012162:	4770      	bx	lr
 8012164:	24000010 	.word	0x24000010
	...

08012170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012170:	4b07      	ldr	r3, [pc, #28]	; (8012190 <pxCurrentTCBConst2>)
 8012172:	6819      	ldr	r1, [r3, #0]
 8012174:	6808      	ldr	r0, [r1, #0]
 8012176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801217a:	f380 8809 	msr	PSP, r0
 801217e:	f3bf 8f6f 	isb	sy
 8012182:	f04f 0000 	mov.w	r0, #0
 8012186:	f380 8811 	msr	BASEPRI, r0
 801218a:	4770      	bx	lr
 801218c:	f3af 8000 	nop.w

08012190 <pxCurrentTCBConst2>:
 8012190:	24000d38 	.word	0x24000d38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012194:	bf00      	nop
 8012196:	bf00      	nop

08012198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012198:	4808      	ldr	r0, [pc, #32]	; (80121bc <prvPortStartFirstTask+0x24>)
 801219a:	6800      	ldr	r0, [r0, #0]
 801219c:	6800      	ldr	r0, [r0, #0]
 801219e:	f380 8808 	msr	MSP, r0
 80121a2:	f04f 0000 	mov.w	r0, #0
 80121a6:	f380 8814 	msr	CONTROL, r0
 80121aa:	b662      	cpsie	i
 80121ac:	b661      	cpsie	f
 80121ae:	f3bf 8f4f 	dsb	sy
 80121b2:	f3bf 8f6f 	isb	sy
 80121b6:	df00      	svc	0
 80121b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80121ba:	bf00      	nop
 80121bc:	e000ed08 	.word	0xe000ed08

080121c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b086      	sub	sp, #24
 80121c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80121c6:	4b46      	ldr	r3, [pc, #280]	; (80122e0 <xPortStartScheduler+0x120>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	4a46      	ldr	r2, [pc, #280]	; (80122e4 <xPortStartScheduler+0x124>)
 80121cc:	4293      	cmp	r3, r2
 80121ce:	d10a      	bne.n	80121e6 <xPortStartScheduler+0x26>
	__asm volatile
 80121d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d4:	f383 8811 	msr	BASEPRI, r3
 80121d8:	f3bf 8f6f 	isb	sy
 80121dc:	f3bf 8f4f 	dsb	sy
 80121e0:	613b      	str	r3, [r7, #16]
}
 80121e2:	bf00      	nop
 80121e4:	e7fe      	b.n	80121e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80121e6:	4b3e      	ldr	r3, [pc, #248]	; (80122e0 <xPortStartScheduler+0x120>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	4a3f      	ldr	r2, [pc, #252]	; (80122e8 <xPortStartScheduler+0x128>)
 80121ec:	4293      	cmp	r3, r2
 80121ee:	d10a      	bne.n	8012206 <xPortStartScheduler+0x46>
	__asm volatile
 80121f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f4:	f383 8811 	msr	BASEPRI, r3
 80121f8:	f3bf 8f6f 	isb	sy
 80121fc:	f3bf 8f4f 	dsb	sy
 8012200:	60fb      	str	r3, [r7, #12]
}
 8012202:	bf00      	nop
 8012204:	e7fe      	b.n	8012204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012206:	4b39      	ldr	r3, [pc, #228]	; (80122ec <xPortStartScheduler+0x12c>)
 8012208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	781b      	ldrb	r3, [r3, #0]
 801220e:	b2db      	uxtb	r3, r3
 8012210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	22ff      	movs	r2, #255	; 0xff
 8012216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012218:	697b      	ldr	r3, [r7, #20]
 801221a:	781b      	ldrb	r3, [r3, #0]
 801221c:	b2db      	uxtb	r3, r3
 801221e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012220:	78fb      	ldrb	r3, [r7, #3]
 8012222:	b2db      	uxtb	r3, r3
 8012224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012228:	b2da      	uxtb	r2, r3
 801222a:	4b31      	ldr	r3, [pc, #196]	; (80122f0 <xPortStartScheduler+0x130>)
 801222c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801222e:	4b31      	ldr	r3, [pc, #196]	; (80122f4 <xPortStartScheduler+0x134>)
 8012230:	2207      	movs	r2, #7
 8012232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012234:	e009      	b.n	801224a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012236:	4b2f      	ldr	r3, [pc, #188]	; (80122f4 <xPortStartScheduler+0x134>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	3b01      	subs	r3, #1
 801223c:	4a2d      	ldr	r2, [pc, #180]	; (80122f4 <xPortStartScheduler+0x134>)
 801223e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012240:	78fb      	ldrb	r3, [r7, #3]
 8012242:	b2db      	uxtb	r3, r3
 8012244:	005b      	lsls	r3, r3, #1
 8012246:	b2db      	uxtb	r3, r3
 8012248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801224a:	78fb      	ldrb	r3, [r7, #3]
 801224c:	b2db      	uxtb	r3, r3
 801224e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012252:	2b80      	cmp	r3, #128	; 0x80
 8012254:	d0ef      	beq.n	8012236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012256:	4b27      	ldr	r3, [pc, #156]	; (80122f4 <xPortStartScheduler+0x134>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	f1c3 0307 	rsb	r3, r3, #7
 801225e:	2b04      	cmp	r3, #4
 8012260:	d00a      	beq.n	8012278 <xPortStartScheduler+0xb8>
	__asm volatile
 8012262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012266:	f383 8811 	msr	BASEPRI, r3
 801226a:	f3bf 8f6f 	isb	sy
 801226e:	f3bf 8f4f 	dsb	sy
 8012272:	60bb      	str	r3, [r7, #8]
}
 8012274:	bf00      	nop
 8012276:	e7fe      	b.n	8012276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012278:	4b1e      	ldr	r3, [pc, #120]	; (80122f4 <xPortStartScheduler+0x134>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	021b      	lsls	r3, r3, #8
 801227e:	4a1d      	ldr	r2, [pc, #116]	; (80122f4 <xPortStartScheduler+0x134>)
 8012280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012282:	4b1c      	ldr	r3, [pc, #112]	; (80122f4 <xPortStartScheduler+0x134>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801228a:	4a1a      	ldr	r2, [pc, #104]	; (80122f4 <xPortStartScheduler+0x134>)
 801228c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	b2da      	uxtb	r2, r3
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012296:	4b18      	ldr	r3, [pc, #96]	; (80122f8 <xPortStartScheduler+0x138>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	4a17      	ldr	r2, [pc, #92]	; (80122f8 <xPortStartScheduler+0x138>)
 801229c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80122a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80122a2:	4b15      	ldr	r3, [pc, #84]	; (80122f8 <xPortStartScheduler+0x138>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	4a14      	ldr	r2, [pc, #80]	; (80122f8 <xPortStartScheduler+0x138>)
 80122a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80122ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80122ae:	f000 f8dd 	bl	801246c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80122b2:	4b12      	ldr	r3, [pc, #72]	; (80122fc <xPortStartScheduler+0x13c>)
 80122b4:	2200      	movs	r2, #0
 80122b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80122b8:	f000 f8fc 	bl	80124b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80122bc:	4b10      	ldr	r3, [pc, #64]	; (8012300 <xPortStartScheduler+0x140>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	4a0f      	ldr	r2, [pc, #60]	; (8012300 <xPortStartScheduler+0x140>)
 80122c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80122c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80122c8:	f7ff ff66 	bl	8012198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80122cc:	f7fe ff7c 	bl	80111c8 <vTaskSwitchContext>
	prvTaskExitError();
 80122d0:	f7ff ff1e 	bl	8012110 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80122d4:	2300      	movs	r3, #0
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3718      	adds	r7, #24
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}
 80122de:	bf00      	nop
 80122e0:	e000ed00 	.word	0xe000ed00
 80122e4:	410fc271 	.word	0x410fc271
 80122e8:	410fc270 	.word	0x410fc270
 80122ec:	e000e400 	.word	0xe000e400
 80122f0:	24001364 	.word	0x24001364
 80122f4:	24001368 	.word	0x24001368
 80122f8:	e000ed20 	.word	0xe000ed20
 80122fc:	24000010 	.word	0x24000010
 8012300:	e000ef34 	.word	0xe000ef34

08012304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012304:	b480      	push	{r7}
 8012306:	b083      	sub	sp, #12
 8012308:	af00      	add	r7, sp, #0
	__asm volatile
 801230a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801230e:	f383 8811 	msr	BASEPRI, r3
 8012312:	f3bf 8f6f 	isb	sy
 8012316:	f3bf 8f4f 	dsb	sy
 801231a:	607b      	str	r3, [r7, #4]
}
 801231c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801231e:	4b0f      	ldr	r3, [pc, #60]	; (801235c <vPortEnterCritical+0x58>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	3301      	adds	r3, #1
 8012324:	4a0d      	ldr	r2, [pc, #52]	; (801235c <vPortEnterCritical+0x58>)
 8012326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012328:	4b0c      	ldr	r3, [pc, #48]	; (801235c <vPortEnterCritical+0x58>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	2b01      	cmp	r3, #1
 801232e:	d10f      	bne.n	8012350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012330:	4b0b      	ldr	r3, [pc, #44]	; (8012360 <vPortEnterCritical+0x5c>)
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	b2db      	uxtb	r3, r3
 8012336:	2b00      	cmp	r3, #0
 8012338:	d00a      	beq.n	8012350 <vPortEnterCritical+0x4c>
	__asm volatile
 801233a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801233e:	f383 8811 	msr	BASEPRI, r3
 8012342:	f3bf 8f6f 	isb	sy
 8012346:	f3bf 8f4f 	dsb	sy
 801234a:	603b      	str	r3, [r7, #0]
}
 801234c:	bf00      	nop
 801234e:	e7fe      	b.n	801234e <vPortEnterCritical+0x4a>
	}
}
 8012350:	bf00      	nop
 8012352:	370c      	adds	r7, #12
 8012354:	46bd      	mov	sp, r7
 8012356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235a:	4770      	bx	lr
 801235c:	24000010 	.word	0x24000010
 8012360:	e000ed04 	.word	0xe000ed04

08012364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012364:	b480      	push	{r7}
 8012366:	b083      	sub	sp, #12
 8012368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801236a:	4b12      	ldr	r3, [pc, #72]	; (80123b4 <vPortExitCritical+0x50>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d10a      	bne.n	8012388 <vPortExitCritical+0x24>
	__asm volatile
 8012372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012376:	f383 8811 	msr	BASEPRI, r3
 801237a:	f3bf 8f6f 	isb	sy
 801237e:	f3bf 8f4f 	dsb	sy
 8012382:	607b      	str	r3, [r7, #4]
}
 8012384:	bf00      	nop
 8012386:	e7fe      	b.n	8012386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012388:	4b0a      	ldr	r3, [pc, #40]	; (80123b4 <vPortExitCritical+0x50>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	3b01      	subs	r3, #1
 801238e:	4a09      	ldr	r2, [pc, #36]	; (80123b4 <vPortExitCritical+0x50>)
 8012390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012392:	4b08      	ldr	r3, [pc, #32]	; (80123b4 <vPortExitCritical+0x50>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d105      	bne.n	80123a6 <vPortExitCritical+0x42>
 801239a:	2300      	movs	r3, #0
 801239c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	f383 8811 	msr	BASEPRI, r3
}
 80123a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80123a6:	bf00      	nop
 80123a8:	370c      	adds	r7, #12
 80123aa:	46bd      	mov	sp, r7
 80123ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b0:	4770      	bx	lr
 80123b2:	bf00      	nop
 80123b4:	24000010 	.word	0x24000010
	...

080123c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80123c0:	f3ef 8009 	mrs	r0, PSP
 80123c4:	f3bf 8f6f 	isb	sy
 80123c8:	4b15      	ldr	r3, [pc, #84]	; (8012420 <pxCurrentTCBConst>)
 80123ca:	681a      	ldr	r2, [r3, #0]
 80123cc:	f01e 0f10 	tst.w	lr, #16
 80123d0:	bf08      	it	eq
 80123d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80123d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123da:	6010      	str	r0, [r2, #0]
 80123dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80123e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80123e4:	f380 8811 	msr	BASEPRI, r0
 80123e8:	f3bf 8f4f 	dsb	sy
 80123ec:	f3bf 8f6f 	isb	sy
 80123f0:	f7fe feea 	bl	80111c8 <vTaskSwitchContext>
 80123f4:	f04f 0000 	mov.w	r0, #0
 80123f8:	f380 8811 	msr	BASEPRI, r0
 80123fc:	bc09      	pop	{r0, r3}
 80123fe:	6819      	ldr	r1, [r3, #0]
 8012400:	6808      	ldr	r0, [r1, #0]
 8012402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012406:	f01e 0f10 	tst.w	lr, #16
 801240a:	bf08      	it	eq
 801240c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012410:	f380 8809 	msr	PSP, r0
 8012414:	f3bf 8f6f 	isb	sy
 8012418:	4770      	bx	lr
 801241a:	bf00      	nop
 801241c:	f3af 8000 	nop.w

08012420 <pxCurrentTCBConst>:
 8012420:	24000d38 	.word	0x24000d38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012424:	bf00      	nop
 8012426:	bf00      	nop

08012428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
	__asm volatile
 801242e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012432:	f383 8811 	msr	BASEPRI, r3
 8012436:	f3bf 8f6f 	isb	sy
 801243a:	f3bf 8f4f 	dsb	sy
 801243e:	607b      	str	r3, [r7, #4]
}
 8012440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012442:	f7fe fe07 	bl	8011054 <xTaskIncrementTick>
 8012446:	4603      	mov	r3, r0
 8012448:	2b00      	cmp	r3, #0
 801244a:	d003      	beq.n	8012454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801244c:	4b06      	ldr	r3, [pc, #24]	; (8012468 <xPortSysTickHandler+0x40>)
 801244e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012452:	601a      	str	r2, [r3, #0]
 8012454:	2300      	movs	r3, #0
 8012456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	f383 8811 	msr	BASEPRI, r3
}
 801245e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012460:	bf00      	nop
 8012462:	3708      	adds	r7, #8
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}
 8012468:	e000ed04 	.word	0xe000ed04

0801246c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801246c:	b480      	push	{r7}
 801246e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012470:	4b0b      	ldr	r3, [pc, #44]	; (80124a0 <vPortSetupTimerInterrupt+0x34>)
 8012472:	2200      	movs	r2, #0
 8012474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012476:	4b0b      	ldr	r3, [pc, #44]	; (80124a4 <vPortSetupTimerInterrupt+0x38>)
 8012478:	2200      	movs	r2, #0
 801247a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801247c:	4b0a      	ldr	r3, [pc, #40]	; (80124a8 <vPortSetupTimerInterrupt+0x3c>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	4a0a      	ldr	r2, [pc, #40]	; (80124ac <vPortSetupTimerInterrupt+0x40>)
 8012482:	fba2 2303 	umull	r2, r3, r2, r3
 8012486:	099b      	lsrs	r3, r3, #6
 8012488:	4a09      	ldr	r2, [pc, #36]	; (80124b0 <vPortSetupTimerInterrupt+0x44>)
 801248a:	3b01      	subs	r3, #1
 801248c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801248e:	4b04      	ldr	r3, [pc, #16]	; (80124a0 <vPortSetupTimerInterrupt+0x34>)
 8012490:	2207      	movs	r2, #7
 8012492:	601a      	str	r2, [r3, #0]
}
 8012494:	bf00      	nop
 8012496:	46bd      	mov	sp, r7
 8012498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801249c:	4770      	bx	lr
 801249e:	bf00      	nop
 80124a0:	e000e010 	.word	0xe000e010
 80124a4:	e000e018 	.word	0xe000e018
 80124a8:	24000000 	.word	0x24000000
 80124ac:	10624dd3 	.word	0x10624dd3
 80124b0:	e000e014 	.word	0xe000e014

080124b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80124b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80124c4 <vPortEnableVFP+0x10>
 80124b8:	6801      	ldr	r1, [r0, #0]
 80124ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80124be:	6001      	str	r1, [r0, #0]
 80124c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80124c2:	bf00      	nop
 80124c4:	e000ed88 	.word	0xe000ed88

080124c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80124c8:	b480      	push	{r7}
 80124ca:	b085      	sub	sp, #20
 80124cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80124ce:	f3ef 8305 	mrs	r3, IPSR
 80124d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2b0f      	cmp	r3, #15
 80124d8:	d914      	bls.n	8012504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80124da:	4a17      	ldr	r2, [pc, #92]	; (8012538 <vPortValidateInterruptPriority+0x70>)
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	4413      	add	r3, r2
 80124e0:	781b      	ldrb	r3, [r3, #0]
 80124e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80124e4:	4b15      	ldr	r3, [pc, #84]	; (801253c <vPortValidateInterruptPriority+0x74>)
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	7afa      	ldrb	r2, [r7, #11]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d20a      	bcs.n	8012504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80124ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124f2:	f383 8811 	msr	BASEPRI, r3
 80124f6:	f3bf 8f6f 	isb	sy
 80124fa:	f3bf 8f4f 	dsb	sy
 80124fe:	607b      	str	r3, [r7, #4]
}
 8012500:	bf00      	nop
 8012502:	e7fe      	b.n	8012502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012504:	4b0e      	ldr	r3, [pc, #56]	; (8012540 <vPortValidateInterruptPriority+0x78>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801250c:	4b0d      	ldr	r3, [pc, #52]	; (8012544 <vPortValidateInterruptPriority+0x7c>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	429a      	cmp	r2, r3
 8012512:	d90a      	bls.n	801252a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012518:	f383 8811 	msr	BASEPRI, r3
 801251c:	f3bf 8f6f 	isb	sy
 8012520:	f3bf 8f4f 	dsb	sy
 8012524:	603b      	str	r3, [r7, #0]
}
 8012526:	bf00      	nop
 8012528:	e7fe      	b.n	8012528 <vPortValidateInterruptPriority+0x60>
	}
 801252a:	bf00      	nop
 801252c:	3714      	adds	r7, #20
 801252e:	46bd      	mov	sp, r7
 8012530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012534:	4770      	bx	lr
 8012536:	bf00      	nop
 8012538:	e000e3f0 	.word	0xe000e3f0
 801253c:	24001364 	.word	0x24001364
 8012540:	e000ed0c 	.word	0xe000ed0c
 8012544:	24001368 	.word	0x24001368

08012548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b08a      	sub	sp, #40	; 0x28
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012550:	2300      	movs	r3, #0
 8012552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012554:	f7fe fcc2 	bl	8010edc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012558:	4b5b      	ldr	r3, [pc, #364]	; (80126c8 <pvPortMalloc+0x180>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d101      	bne.n	8012564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012560:	f000 f920 	bl	80127a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012564:	4b59      	ldr	r3, [pc, #356]	; (80126cc <pvPortMalloc+0x184>)
 8012566:	681a      	ldr	r2, [r3, #0]
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	4013      	ands	r3, r2
 801256c:	2b00      	cmp	r3, #0
 801256e:	f040 8093 	bne.w	8012698 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d01d      	beq.n	80125b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012578:	2208      	movs	r2, #8
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	4413      	add	r3, r2
 801257e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f003 0307 	and.w	r3, r3, #7
 8012586:	2b00      	cmp	r3, #0
 8012588:	d014      	beq.n	80125b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f023 0307 	bic.w	r3, r3, #7
 8012590:	3308      	adds	r3, #8
 8012592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f003 0307 	and.w	r3, r3, #7
 801259a:	2b00      	cmp	r3, #0
 801259c:	d00a      	beq.n	80125b4 <pvPortMalloc+0x6c>
	__asm volatile
 801259e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a2:	f383 8811 	msr	BASEPRI, r3
 80125a6:	f3bf 8f6f 	isb	sy
 80125aa:	f3bf 8f4f 	dsb	sy
 80125ae:	617b      	str	r3, [r7, #20]
}
 80125b0:	bf00      	nop
 80125b2:	e7fe      	b.n	80125b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d06e      	beq.n	8012698 <pvPortMalloc+0x150>
 80125ba:	4b45      	ldr	r3, [pc, #276]	; (80126d0 <pvPortMalloc+0x188>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	687a      	ldr	r2, [r7, #4]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d869      	bhi.n	8012698 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80125c4:	4b43      	ldr	r3, [pc, #268]	; (80126d4 <pvPortMalloc+0x18c>)
 80125c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80125c8:	4b42      	ldr	r3, [pc, #264]	; (80126d4 <pvPortMalloc+0x18c>)
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80125ce:	e004      	b.n	80125da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80125d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80125d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80125da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125dc:	685b      	ldr	r3, [r3, #4]
 80125de:	687a      	ldr	r2, [r7, #4]
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d903      	bls.n	80125ec <pvPortMalloc+0xa4>
 80125e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d1f1      	bne.n	80125d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80125ec:	4b36      	ldr	r3, [pc, #216]	; (80126c8 <pvPortMalloc+0x180>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d050      	beq.n	8012698 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80125f6:	6a3b      	ldr	r3, [r7, #32]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	2208      	movs	r2, #8
 80125fc:	4413      	add	r3, r2
 80125fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012602:	681a      	ldr	r2, [r3, #0]
 8012604:	6a3b      	ldr	r3, [r7, #32]
 8012606:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801260a:	685a      	ldr	r2, [r3, #4]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	1ad2      	subs	r2, r2, r3
 8012610:	2308      	movs	r3, #8
 8012612:	005b      	lsls	r3, r3, #1
 8012614:	429a      	cmp	r2, r3
 8012616:	d91f      	bls.n	8012658 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	4413      	add	r3, r2
 801261e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012620:	69bb      	ldr	r3, [r7, #24]
 8012622:	f003 0307 	and.w	r3, r3, #7
 8012626:	2b00      	cmp	r3, #0
 8012628:	d00a      	beq.n	8012640 <pvPortMalloc+0xf8>
	__asm volatile
 801262a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801262e:	f383 8811 	msr	BASEPRI, r3
 8012632:	f3bf 8f6f 	isb	sy
 8012636:	f3bf 8f4f 	dsb	sy
 801263a:	613b      	str	r3, [r7, #16]
}
 801263c:	bf00      	nop
 801263e:	e7fe      	b.n	801263e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012642:	685a      	ldr	r2, [r3, #4]
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	1ad2      	subs	r2, r2, r3
 8012648:	69bb      	ldr	r3, [r7, #24]
 801264a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264e:	687a      	ldr	r2, [r7, #4]
 8012650:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012652:	69b8      	ldr	r0, [r7, #24]
 8012654:	f000 f908 	bl	8012868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012658:	4b1d      	ldr	r3, [pc, #116]	; (80126d0 <pvPortMalloc+0x188>)
 801265a:	681a      	ldr	r2, [r3, #0]
 801265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	1ad3      	subs	r3, r2, r3
 8012662:	4a1b      	ldr	r2, [pc, #108]	; (80126d0 <pvPortMalloc+0x188>)
 8012664:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012666:	4b1a      	ldr	r3, [pc, #104]	; (80126d0 <pvPortMalloc+0x188>)
 8012668:	681a      	ldr	r2, [r3, #0]
 801266a:	4b1b      	ldr	r3, [pc, #108]	; (80126d8 <pvPortMalloc+0x190>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	429a      	cmp	r2, r3
 8012670:	d203      	bcs.n	801267a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012672:	4b17      	ldr	r3, [pc, #92]	; (80126d0 <pvPortMalloc+0x188>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	4a18      	ldr	r2, [pc, #96]	; (80126d8 <pvPortMalloc+0x190>)
 8012678:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801267c:	685a      	ldr	r2, [r3, #4]
 801267e:	4b13      	ldr	r3, [pc, #76]	; (80126cc <pvPortMalloc+0x184>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	431a      	orrs	r2, r3
 8012684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012686:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268a:	2200      	movs	r2, #0
 801268c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801268e:	4b13      	ldr	r3, [pc, #76]	; (80126dc <pvPortMalloc+0x194>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	3301      	adds	r3, #1
 8012694:	4a11      	ldr	r2, [pc, #68]	; (80126dc <pvPortMalloc+0x194>)
 8012696:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012698:	f7fe fc2e 	bl	8010ef8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801269c:	69fb      	ldr	r3, [r7, #28]
 801269e:	f003 0307 	and.w	r3, r3, #7
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d00a      	beq.n	80126bc <pvPortMalloc+0x174>
	__asm volatile
 80126a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126aa:	f383 8811 	msr	BASEPRI, r3
 80126ae:	f3bf 8f6f 	isb	sy
 80126b2:	f3bf 8f4f 	dsb	sy
 80126b6:	60fb      	str	r3, [r7, #12]
}
 80126b8:	bf00      	nop
 80126ba:	e7fe      	b.n	80126ba <pvPortMalloc+0x172>
	return pvReturn;
 80126bc:	69fb      	ldr	r3, [r7, #28]
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3728      	adds	r7, #40	; 0x28
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
 80126c6:	bf00      	nop
 80126c8:	24004f74 	.word	0x24004f74
 80126cc:	24004f88 	.word	0x24004f88
 80126d0:	24004f78 	.word	0x24004f78
 80126d4:	24004f6c 	.word	0x24004f6c
 80126d8:	24004f7c 	.word	0x24004f7c
 80126dc:	24004f80 	.word	0x24004f80

080126e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b086      	sub	sp, #24
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d04d      	beq.n	801278e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80126f2:	2308      	movs	r3, #8
 80126f4:	425b      	negs	r3, r3
 80126f6:	697a      	ldr	r2, [r7, #20]
 80126f8:	4413      	add	r3, r2
 80126fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012700:	693b      	ldr	r3, [r7, #16]
 8012702:	685a      	ldr	r2, [r3, #4]
 8012704:	4b24      	ldr	r3, [pc, #144]	; (8012798 <vPortFree+0xb8>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	4013      	ands	r3, r2
 801270a:	2b00      	cmp	r3, #0
 801270c:	d10a      	bne.n	8012724 <vPortFree+0x44>
	__asm volatile
 801270e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012712:	f383 8811 	msr	BASEPRI, r3
 8012716:	f3bf 8f6f 	isb	sy
 801271a:	f3bf 8f4f 	dsb	sy
 801271e:	60fb      	str	r3, [r7, #12]
}
 8012720:	bf00      	nop
 8012722:	e7fe      	b.n	8012722 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012724:	693b      	ldr	r3, [r7, #16]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d00a      	beq.n	8012742 <vPortFree+0x62>
	__asm volatile
 801272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012730:	f383 8811 	msr	BASEPRI, r3
 8012734:	f3bf 8f6f 	isb	sy
 8012738:	f3bf 8f4f 	dsb	sy
 801273c:	60bb      	str	r3, [r7, #8]
}
 801273e:	bf00      	nop
 8012740:	e7fe      	b.n	8012740 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012742:	693b      	ldr	r3, [r7, #16]
 8012744:	685a      	ldr	r2, [r3, #4]
 8012746:	4b14      	ldr	r3, [pc, #80]	; (8012798 <vPortFree+0xb8>)
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	4013      	ands	r3, r2
 801274c:	2b00      	cmp	r3, #0
 801274e:	d01e      	beq.n	801278e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012750:	693b      	ldr	r3, [r7, #16]
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d11a      	bne.n	801278e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	685a      	ldr	r2, [r3, #4]
 801275c:	4b0e      	ldr	r3, [pc, #56]	; (8012798 <vPortFree+0xb8>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	43db      	mvns	r3, r3
 8012762:	401a      	ands	r2, r3
 8012764:	693b      	ldr	r3, [r7, #16]
 8012766:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012768:	f7fe fbb8 	bl	8010edc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801276c:	693b      	ldr	r3, [r7, #16]
 801276e:	685a      	ldr	r2, [r3, #4]
 8012770:	4b0a      	ldr	r3, [pc, #40]	; (801279c <vPortFree+0xbc>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	4413      	add	r3, r2
 8012776:	4a09      	ldr	r2, [pc, #36]	; (801279c <vPortFree+0xbc>)
 8012778:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801277a:	6938      	ldr	r0, [r7, #16]
 801277c:	f000 f874 	bl	8012868 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012780:	4b07      	ldr	r3, [pc, #28]	; (80127a0 <vPortFree+0xc0>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	3301      	adds	r3, #1
 8012786:	4a06      	ldr	r2, [pc, #24]	; (80127a0 <vPortFree+0xc0>)
 8012788:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801278a:	f7fe fbb5 	bl	8010ef8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801278e:	bf00      	nop
 8012790:	3718      	adds	r7, #24
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
 8012796:	bf00      	nop
 8012798:	24004f88 	.word	0x24004f88
 801279c:	24004f78 	.word	0x24004f78
 80127a0:	24004f84 	.word	0x24004f84

080127a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80127a4:	b480      	push	{r7}
 80127a6:	b085      	sub	sp, #20
 80127a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80127aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80127ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80127b0:	4b27      	ldr	r3, [pc, #156]	; (8012850 <prvHeapInit+0xac>)
 80127b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	f003 0307 	and.w	r3, r3, #7
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d00c      	beq.n	80127d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	3307      	adds	r3, #7
 80127c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	f023 0307 	bic.w	r3, r3, #7
 80127ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80127cc:	68ba      	ldr	r2, [r7, #8]
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	1ad3      	subs	r3, r2, r3
 80127d2:	4a1f      	ldr	r2, [pc, #124]	; (8012850 <prvHeapInit+0xac>)
 80127d4:	4413      	add	r3, r2
 80127d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80127dc:	4a1d      	ldr	r2, [pc, #116]	; (8012854 <prvHeapInit+0xb0>)
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80127e2:	4b1c      	ldr	r3, [pc, #112]	; (8012854 <prvHeapInit+0xb0>)
 80127e4:	2200      	movs	r2, #0
 80127e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	68ba      	ldr	r2, [r7, #8]
 80127ec:	4413      	add	r3, r2
 80127ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80127f0:	2208      	movs	r2, #8
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	1a9b      	subs	r3, r3, r2
 80127f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	f023 0307 	bic.w	r3, r3, #7
 80127fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	4a15      	ldr	r2, [pc, #84]	; (8012858 <prvHeapInit+0xb4>)
 8012804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012806:	4b14      	ldr	r3, [pc, #80]	; (8012858 <prvHeapInit+0xb4>)
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	2200      	movs	r2, #0
 801280c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801280e:	4b12      	ldr	r3, [pc, #72]	; (8012858 <prvHeapInit+0xb4>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	2200      	movs	r2, #0
 8012814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	68fa      	ldr	r2, [r7, #12]
 801281e:	1ad2      	subs	r2, r2, r3
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012824:	4b0c      	ldr	r3, [pc, #48]	; (8012858 <prvHeapInit+0xb4>)
 8012826:	681a      	ldr	r2, [r3, #0]
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	4a0a      	ldr	r2, [pc, #40]	; (801285c <prvHeapInit+0xb8>)
 8012832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	4a09      	ldr	r2, [pc, #36]	; (8012860 <prvHeapInit+0xbc>)
 801283a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801283c:	4b09      	ldr	r3, [pc, #36]	; (8012864 <prvHeapInit+0xc0>)
 801283e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012842:	601a      	str	r2, [r3, #0]
}
 8012844:	bf00      	nop
 8012846:	3714      	adds	r7, #20
 8012848:	46bd      	mov	sp, r7
 801284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284e:	4770      	bx	lr
 8012850:	2400136c 	.word	0x2400136c
 8012854:	24004f6c 	.word	0x24004f6c
 8012858:	24004f74 	.word	0x24004f74
 801285c:	24004f7c 	.word	0x24004f7c
 8012860:	24004f78 	.word	0x24004f78
 8012864:	24004f88 	.word	0x24004f88

08012868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012868:	b480      	push	{r7}
 801286a:	b085      	sub	sp, #20
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012870:	4b28      	ldr	r3, [pc, #160]	; (8012914 <prvInsertBlockIntoFreeList+0xac>)
 8012872:	60fb      	str	r3, [r7, #12]
 8012874:	e002      	b.n	801287c <prvInsertBlockIntoFreeList+0x14>
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	60fb      	str	r3, [r7, #12]
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	687a      	ldr	r2, [r7, #4]
 8012882:	429a      	cmp	r2, r3
 8012884:	d8f7      	bhi.n	8012876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	685b      	ldr	r3, [r3, #4]
 801288e:	68ba      	ldr	r2, [r7, #8]
 8012890:	4413      	add	r3, r2
 8012892:	687a      	ldr	r2, [r7, #4]
 8012894:	429a      	cmp	r2, r3
 8012896:	d108      	bne.n	80128aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	685a      	ldr	r2, [r3, #4]
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	685b      	ldr	r3, [r3, #4]
 80128a0:	441a      	add	r2, r3
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	685b      	ldr	r3, [r3, #4]
 80128b2:	68ba      	ldr	r2, [r7, #8]
 80128b4:	441a      	add	r2, r3
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d118      	bne.n	80128f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	4b15      	ldr	r3, [pc, #84]	; (8012918 <prvInsertBlockIntoFreeList+0xb0>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d00d      	beq.n	80128e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	685a      	ldr	r2, [r3, #4]
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	441a      	add	r2, r3
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	681a      	ldr	r2, [r3, #0]
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	601a      	str	r2, [r3, #0]
 80128e4:	e008      	b.n	80128f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80128e6:	4b0c      	ldr	r3, [pc, #48]	; (8012918 <prvInsertBlockIntoFreeList+0xb0>)
 80128e8:	681a      	ldr	r2, [r3, #0]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	601a      	str	r2, [r3, #0]
 80128ee:	e003      	b.n	80128f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	681a      	ldr	r2, [r3, #0]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80128f8:	68fa      	ldr	r2, [r7, #12]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d002      	beq.n	8012906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	687a      	ldr	r2, [r7, #4]
 8012904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012906:	bf00      	nop
 8012908:	3714      	adds	r7, #20
 801290a:	46bd      	mov	sp, r7
 801290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012910:	4770      	bx	lr
 8012912:	bf00      	nop
 8012914:	24004f6c 	.word	0x24004f6c
 8012918:	24004f74 	.word	0x24004f74

0801291c <__errno>:
 801291c:	4b01      	ldr	r3, [pc, #4]	; (8012924 <__errno+0x8>)
 801291e:	6818      	ldr	r0, [r3, #0]
 8012920:	4770      	bx	lr
 8012922:	bf00      	nop
 8012924:	24000014 	.word	0x24000014

08012928 <__libc_init_array>:
 8012928:	b570      	push	{r4, r5, r6, lr}
 801292a:	4d0d      	ldr	r5, [pc, #52]	; (8012960 <__libc_init_array+0x38>)
 801292c:	4c0d      	ldr	r4, [pc, #52]	; (8012964 <__libc_init_array+0x3c>)
 801292e:	1b64      	subs	r4, r4, r5
 8012930:	10a4      	asrs	r4, r4, #2
 8012932:	2600      	movs	r6, #0
 8012934:	42a6      	cmp	r6, r4
 8012936:	d109      	bne.n	801294c <__libc_init_array+0x24>
 8012938:	4d0b      	ldr	r5, [pc, #44]	; (8012968 <__libc_init_array+0x40>)
 801293a:	4c0c      	ldr	r4, [pc, #48]	; (801296c <__libc_init_array+0x44>)
 801293c:	f001 f8a0 	bl	8013a80 <_init>
 8012940:	1b64      	subs	r4, r4, r5
 8012942:	10a4      	asrs	r4, r4, #2
 8012944:	2600      	movs	r6, #0
 8012946:	42a6      	cmp	r6, r4
 8012948:	d105      	bne.n	8012956 <__libc_init_array+0x2e>
 801294a:	bd70      	pop	{r4, r5, r6, pc}
 801294c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012950:	4798      	blx	r3
 8012952:	3601      	adds	r6, #1
 8012954:	e7ee      	b.n	8012934 <__libc_init_array+0xc>
 8012956:	f855 3b04 	ldr.w	r3, [r5], #4
 801295a:	4798      	blx	r3
 801295c:	3601      	adds	r6, #1
 801295e:	e7f2      	b.n	8012946 <__libc_init_array+0x1e>
 8012960:	08013e50 	.word	0x08013e50
 8012964:	08013e50 	.word	0x08013e50
 8012968:	08013e50 	.word	0x08013e50
 801296c:	08013e54 	.word	0x08013e54

08012970 <malloc>:
 8012970:	4b02      	ldr	r3, [pc, #8]	; (801297c <malloc+0xc>)
 8012972:	4601      	mov	r1, r0
 8012974:	6818      	ldr	r0, [r3, #0]
 8012976:	f000 b88d 	b.w	8012a94 <_malloc_r>
 801297a:	bf00      	nop
 801297c:	24000014 	.word	0x24000014

08012980 <free>:
 8012980:	4b02      	ldr	r3, [pc, #8]	; (801298c <free+0xc>)
 8012982:	4601      	mov	r1, r0
 8012984:	6818      	ldr	r0, [r3, #0]
 8012986:	f000 b819 	b.w	80129bc <_free_r>
 801298a:	bf00      	nop
 801298c:	24000014 	.word	0x24000014

08012990 <memcpy>:
 8012990:	440a      	add	r2, r1
 8012992:	4291      	cmp	r1, r2
 8012994:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012998:	d100      	bne.n	801299c <memcpy+0xc>
 801299a:	4770      	bx	lr
 801299c:	b510      	push	{r4, lr}
 801299e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80129a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80129a6:	4291      	cmp	r1, r2
 80129a8:	d1f9      	bne.n	801299e <memcpy+0xe>
 80129aa:	bd10      	pop	{r4, pc}

080129ac <memset>:
 80129ac:	4402      	add	r2, r0
 80129ae:	4603      	mov	r3, r0
 80129b0:	4293      	cmp	r3, r2
 80129b2:	d100      	bne.n	80129b6 <memset+0xa>
 80129b4:	4770      	bx	lr
 80129b6:	f803 1b01 	strb.w	r1, [r3], #1
 80129ba:	e7f9      	b.n	80129b0 <memset+0x4>

080129bc <_free_r>:
 80129bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129be:	2900      	cmp	r1, #0
 80129c0:	d044      	beq.n	8012a4c <_free_r+0x90>
 80129c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129c6:	9001      	str	r0, [sp, #4]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	f1a1 0404 	sub.w	r4, r1, #4
 80129ce:	bfb8      	it	lt
 80129d0:	18e4      	addlt	r4, r4, r3
 80129d2:	f000 fc67 	bl	80132a4 <__malloc_lock>
 80129d6:	4a1e      	ldr	r2, [pc, #120]	; (8012a50 <_free_r+0x94>)
 80129d8:	9801      	ldr	r0, [sp, #4]
 80129da:	6813      	ldr	r3, [r2, #0]
 80129dc:	b933      	cbnz	r3, 80129ec <_free_r+0x30>
 80129de:	6063      	str	r3, [r4, #4]
 80129e0:	6014      	str	r4, [r2, #0]
 80129e2:	b003      	add	sp, #12
 80129e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80129e8:	f000 bc62 	b.w	80132b0 <__malloc_unlock>
 80129ec:	42a3      	cmp	r3, r4
 80129ee:	d908      	bls.n	8012a02 <_free_r+0x46>
 80129f0:	6825      	ldr	r5, [r4, #0]
 80129f2:	1961      	adds	r1, r4, r5
 80129f4:	428b      	cmp	r3, r1
 80129f6:	bf01      	itttt	eq
 80129f8:	6819      	ldreq	r1, [r3, #0]
 80129fa:	685b      	ldreq	r3, [r3, #4]
 80129fc:	1949      	addeq	r1, r1, r5
 80129fe:	6021      	streq	r1, [r4, #0]
 8012a00:	e7ed      	b.n	80129de <_free_r+0x22>
 8012a02:	461a      	mov	r2, r3
 8012a04:	685b      	ldr	r3, [r3, #4]
 8012a06:	b10b      	cbz	r3, 8012a0c <_free_r+0x50>
 8012a08:	42a3      	cmp	r3, r4
 8012a0a:	d9fa      	bls.n	8012a02 <_free_r+0x46>
 8012a0c:	6811      	ldr	r1, [r2, #0]
 8012a0e:	1855      	adds	r5, r2, r1
 8012a10:	42a5      	cmp	r5, r4
 8012a12:	d10b      	bne.n	8012a2c <_free_r+0x70>
 8012a14:	6824      	ldr	r4, [r4, #0]
 8012a16:	4421      	add	r1, r4
 8012a18:	1854      	adds	r4, r2, r1
 8012a1a:	42a3      	cmp	r3, r4
 8012a1c:	6011      	str	r1, [r2, #0]
 8012a1e:	d1e0      	bne.n	80129e2 <_free_r+0x26>
 8012a20:	681c      	ldr	r4, [r3, #0]
 8012a22:	685b      	ldr	r3, [r3, #4]
 8012a24:	6053      	str	r3, [r2, #4]
 8012a26:	4421      	add	r1, r4
 8012a28:	6011      	str	r1, [r2, #0]
 8012a2a:	e7da      	b.n	80129e2 <_free_r+0x26>
 8012a2c:	d902      	bls.n	8012a34 <_free_r+0x78>
 8012a2e:	230c      	movs	r3, #12
 8012a30:	6003      	str	r3, [r0, #0]
 8012a32:	e7d6      	b.n	80129e2 <_free_r+0x26>
 8012a34:	6825      	ldr	r5, [r4, #0]
 8012a36:	1961      	adds	r1, r4, r5
 8012a38:	428b      	cmp	r3, r1
 8012a3a:	bf04      	itt	eq
 8012a3c:	6819      	ldreq	r1, [r3, #0]
 8012a3e:	685b      	ldreq	r3, [r3, #4]
 8012a40:	6063      	str	r3, [r4, #4]
 8012a42:	bf04      	itt	eq
 8012a44:	1949      	addeq	r1, r1, r5
 8012a46:	6021      	streq	r1, [r4, #0]
 8012a48:	6054      	str	r4, [r2, #4]
 8012a4a:	e7ca      	b.n	80129e2 <_free_r+0x26>
 8012a4c:	b003      	add	sp, #12
 8012a4e:	bd30      	pop	{r4, r5, pc}
 8012a50:	24004f8c 	.word	0x24004f8c

08012a54 <sbrk_aligned>:
 8012a54:	b570      	push	{r4, r5, r6, lr}
 8012a56:	4e0e      	ldr	r6, [pc, #56]	; (8012a90 <sbrk_aligned+0x3c>)
 8012a58:	460c      	mov	r4, r1
 8012a5a:	6831      	ldr	r1, [r6, #0]
 8012a5c:	4605      	mov	r5, r0
 8012a5e:	b911      	cbnz	r1, 8012a66 <sbrk_aligned+0x12>
 8012a60:	f000 f930 	bl	8012cc4 <_sbrk_r>
 8012a64:	6030      	str	r0, [r6, #0]
 8012a66:	4621      	mov	r1, r4
 8012a68:	4628      	mov	r0, r5
 8012a6a:	f000 f92b 	bl	8012cc4 <_sbrk_r>
 8012a6e:	1c43      	adds	r3, r0, #1
 8012a70:	d00a      	beq.n	8012a88 <sbrk_aligned+0x34>
 8012a72:	1cc4      	adds	r4, r0, #3
 8012a74:	f024 0403 	bic.w	r4, r4, #3
 8012a78:	42a0      	cmp	r0, r4
 8012a7a:	d007      	beq.n	8012a8c <sbrk_aligned+0x38>
 8012a7c:	1a21      	subs	r1, r4, r0
 8012a7e:	4628      	mov	r0, r5
 8012a80:	f000 f920 	bl	8012cc4 <_sbrk_r>
 8012a84:	3001      	adds	r0, #1
 8012a86:	d101      	bne.n	8012a8c <sbrk_aligned+0x38>
 8012a88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	bd70      	pop	{r4, r5, r6, pc}
 8012a90:	24004f90 	.word	0x24004f90

08012a94 <_malloc_r>:
 8012a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a98:	1ccd      	adds	r5, r1, #3
 8012a9a:	f025 0503 	bic.w	r5, r5, #3
 8012a9e:	3508      	adds	r5, #8
 8012aa0:	2d0c      	cmp	r5, #12
 8012aa2:	bf38      	it	cc
 8012aa4:	250c      	movcc	r5, #12
 8012aa6:	2d00      	cmp	r5, #0
 8012aa8:	4607      	mov	r7, r0
 8012aaa:	db01      	blt.n	8012ab0 <_malloc_r+0x1c>
 8012aac:	42a9      	cmp	r1, r5
 8012aae:	d905      	bls.n	8012abc <_malloc_r+0x28>
 8012ab0:	230c      	movs	r3, #12
 8012ab2:	603b      	str	r3, [r7, #0]
 8012ab4:	2600      	movs	r6, #0
 8012ab6:	4630      	mov	r0, r6
 8012ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012abc:	4e2e      	ldr	r6, [pc, #184]	; (8012b78 <_malloc_r+0xe4>)
 8012abe:	f000 fbf1 	bl	80132a4 <__malloc_lock>
 8012ac2:	6833      	ldr	r3, [r6, #0]
 8012ac4:	461c      	mov	r4, r3
 8012ac6:	bb34      	cbnz	r4, 8012b16 <_malloc_r+0x82>
 8012ac8:	4629      	mov	r1, r5
 8012aca:	4638      	mov	r0, r7
 8012acc:	f7ff ffc2 	bl	8012a54 <sbrk_aligned>
 8012ad0:	1c43      	adds	r3, r0, #1
 8012ad2:	4604      	mov	r4, r0
 8012ad4:	d14d      	bne.n	8012b72 <_malloc_r+0xde>
 8012ad6:	6834      	ldr	r4, [r6, #0]
 8012ad8:	4626      	mov	r6, r4
 8012ada:	2e00      	cmp	r6, #0
 8012adc:	d140      	bne.n	8012b60 <_malloc_r+0xcc>
 8012ade:	6823      	ldr	r3, [r4, #0]
 8012ae0:	4631      	mov	r1, r6
 8012ae2:	4638      	mov	r0, r7
 8012ae4:	eb04 0803 	add.w	r8, r4, r3
 8012ae8:	f000 f8ec 	bl	8012cc4 <_sbrk_r>
 8012aec:	4580      	cmp	r8, r0
 8012aee:	d13a      	bne.n	8012b66 <_malloc_r+0xd2>
 8012af0:	6821      	ldr	r1, [r4, #0]
 8012af2:	3503      	adds	r5, #3
 8012af4:	1a6d      	subs	r5, r5, r1
 8012af6:	f025 0503 	bic.w	r5, r5, #3
 8012afa:	3508      	adds	r5, #8
 8012afc:	2d0c      	cmp	r5, #12
 8012afe:	bf38      	it	cc
 8012b00:	250c      	movcc	r5, #12
 8012b02:	4629      	mov	r1, r5
 8012b04:	4638      	mov	r0, r7
 8012b06:	f7ff ffa5 	bl	8012a54 <sbrk_aligned>
 8012b0a:	3001      	adds	r0, #1
 8012b0c:	d02b      	beq.n	8012b66 <_malloc_r+0xd2>
 8012b0e:	6823      	ldr	r3, [r4, #0]
 8012b10:	442b      	add	r3, r5
 8012b12:	6023      	str	r3, [r4, #0]
 8012b14:	e00e      	b.n	8012b34 <_malloc_r+0xa0>
 8012b16:	6822      	ldr	r2, [r4, #0]
 8012b18:	1b52      	subs	r2, r2, r5
 8012b1a:	d41e      	bmi.n	8012b5a <_malloc_r+0xc6>
 8012b1c:	2a0b      	cmp	r2, #11
 8012b1e:	d916      	bls.n	8012b4e <_malloc_r+0xba>
 8012b20:	1961      	adds	r1, r4, r5
 8012b22:	42a3      	cmp	r3, r4
 8012b24:	6025      	str	r5, [r4, #0]
 8012b26:	bf18      	it	ne
 8012b28:	6059      	strne	r1, [r3, #4]
 8012b2a:	6863      	ldr	r3, [r4, #4]
 8012b2c:	bf08      	it	eq
 8012b2e:	6031      	streq	r1, [r6, #0]
 8012b30:	5162      	str	r2, [r4, r5]
 8012b32:	604b      	str	r3, [r1, #4]
 8012b34:	4638      	mov	r0, r7
 8012b36:	f104 060b 	add.w	r6, r4, #11
 8012b3a:	f000 fbb9 	bl	80132b0 <__malloc_unlock>
 8012b3e:	f026 0607 	bic.w	r6, r6, #7
 8012b42:	1d23      	adds	r3, r4, #4
 8012b44:	1af2      	subs	r2, r6, r3
 8012b46:	d0b6      	beq.n	8012ab6 <_malloc_r+0x22>
 8012b48:	1b9b      	subs	r3, r3, r6
 8012b4a:	50a3      	str	r3, [r4, r2]
 8012b4c:	e7b3      	b.n	8012ab6 <_malloc_r+0x22>
 8012b4e:	6862      	ldr	r2, [r4, #4]
 8012b50:	42a3      	cmp	r3, r4
 8012b52:	bf0c      	ite	eq
 8012b54:	6032      	streq	r2, [r6, #0]
 8012b56:	605a      	strne	r2, [r3, #4]
 8012b58:	e7ec      	b.n	8012b34 <_malloc_r+0xa0>
 8012b5a:	4623      	mov	r3, r4
 8012b5c:	6864      	ldr	r4, [r4, #4]
 8012b5e:	e7b2      	b.n	8012ac6 <_malloc_r+0x32>
 8012b60:	4634      	mov	r4, r6
 8012b62:	6876      	ldr	r6, [r6, #4]
 8012b64:	e7b9      	b.n	8012ada <_malloc_r+0x46>
 8012b66:	230c      	movs	r3, #12
 8012b68:	603b      	str	r3, [r7, #0]
 8012b6a:	4638      	mov	r0, r7
 8012b6c:	f000 fba0 	bl	80132b0 <__malloc_unlock>
 8012b70:	e7a1      	b.n	8012ab6 <_malloc_r+0x22>
 8012b72:	6025      	str	r5, [r4, #0]
 8012b74:	e7de      	b.n	8012b34 <_malloc_r+0xa0>
 8012b76:	bf00      	nop
 8012b78:	24004f8c 	.word	0x24004f8c

08012b7c <iprintf>:
 8012b7c:	b40f      	push	{r0, r1, r2, r3}
 8012b7e:	4b0a      	ldr	r3, [pc, #40]	; (8012ba8 <iprintf+0x2c>)
 8012b80:	b513      	push	{r0, r1, r4, lr}
 8012b82:	681c      	ldr	r4, [r3, #0]
 8012b84:	b124      	cbz	r4, 8012b90 <iprintf+0x14>
 8012b86:	69a3      	ldr	r3, [r4, #24]
 8012b88:	b913      	cbnz	r3, 8012b90 <iprintf+0x14>
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	f000 fa84 	bl	8013098 <__sinit>
 8012b90:	ab05      	add	r3, sp, #20
 8012b92:	9a04      	ldr	r2, [sp, #16]
 8012b94:	68a1      	ldr	r1, [r4, #8]
 8012b96:	9301      	str	r3, [sp, #4]
 8012b98:	4620      	mov	r0, r4
 8012b9a:	f000 fbb9 	bl	8013310 <_vfiprintf_r>
 8012b9e:	b002      	add	sp, #8
 8012ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ba4:	b004      	add	sp, #16
 8012ba6:	4770      	bx	lr
 8012ba8:	24000014 	.word	0x24000014

08012bac <putchar>:
 8012bac:	4b09      	ldr	r3, [pc, #36]	; (8012bd4 <putchar+0x28>)
 8012bae:	b513      	push	{r0, r1, r4, lr}
 8012bb0:	681c      	ldr	r4, [r3, #0]
 8012bb2:	4601      	mov	r1, r0
 8012bb4:	b134      	cbz	r4, 8012bc4 <putchar+0x18>
 8012bb6:	69a3      	ldr	r3, [r4, #24]
 8012bb8:	b923      	cbnz	r3, 8012bc4 <putchar+0x18>
 8012bba:	9001      	str	r0, [sp, #4]
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	f000 fa6b 	bl	8013098 <__sinit>
 8012bc2:	9901      	ldr	r1, [sp, #4]
 8012bc4:	68a2      	ldr	r2, [r4, #8]
 8012bc6:	4620      	mov	r0, r4
 8012bc8:	b002      	add	sp, #8
 8012bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bce:	f000 be63 	b.w	8013898 <_putc_r>
 8012bd2:	bf00      	nop
 8012bd4:	24000014 	.word	0x24000014

08012bd8 <_puts_r>:
 8012bd8:	b570      	push	{r4, r5, r6, lr}
 8012bda:	460e      	mov	r6, r1
 8012bdc:	4605      	mov	r5, r0
 8012bde:	b118      	cbz	r0, 8012be8 <_puts_r+0x10>
 8012be0:	6983      	ldr	r3, [r0, #24]
 8012be2:	b90b      	cbnz	r3, 8012be8 <_puts_r+0x10>
 8012be4:	f000 fa58 	bl	8013098 <__sinit>
 8012be8:	69ab      	ldr	r3, [r5, #24]
 8012bea:	68ac      	ldr	r4, [r5, #8]
 8012bec:	b913      	cbnz	r3, 8012bf4 <_puts_r+0x1c>
 8012bee:	4628      	mov	r0, r5
 8012bf0:	f000 fa52 	bl	8013098 <__sinit>
 8012bf4:	4b2c      	ldr	r3, [pc, #176]	; (8012ca8 <_puts_r+0xd0>)
 8012bf6:	429c      	cmp	r4, r3
 8012bf8:	d120      	bne.n	8012c3c <_puts_r+0x64>
 8012bfa:	686c      	ldr	r4, [r5, #4]
 8012bfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012bfe:	07db      	lsls	r3, r3, #31
 8012c00:	d405      	bmi.n	8012c0e <_puts_r+0x36>
 8012c02:	89a3      	ldrh	r3, [r4, #12]
 8012c04:	0598      	lsls	r0, r3, #22
 8012c06:	d402      	bmi.n	8012c0e <_puts_r+0x36>
 8012c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c0a:	f000 fae3 	bl	80131d4 <__retarget_lock_acquire_recursive>
 8012c0e:	89a3      	ldrh	r3, [r4, #12]
 8012c10:	0719      	lsls	r1, r3, #28
 8012c12:	d51d      	bpl.n	8012c50 <_puts_r+0x78>
 8012c14:	6923      	ldr	r3, [r4, #16]
 8012c16:	b1db      	cbz	r3, 8012c50 <_puts_r+0x78>
 8012c18:	3e01      	subs	r6, #1
 8012c1a:	68a3      	ldr	r3, [r4, #8]
 8012c1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012c20:	3b01      	subs	r3, #1
 8012c22:	60a3      	str	r3, [r4, #8]
 8012c24:	bb39      	cbnz	r1, 8012c76 <_puts_r+0x9e>
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	da38      	bge.n	8012c9c <_puts_r+0xc4>
 8012c2a:	4622      	mov	r2, r4
 8012c2c:	210a      	movs	r1, #10
 8012c2e:	4628      	mov	r0, r5
 8012c30:	f000 f858 	bl	8012ce4 <__swbuf_r>
 8012c34:	3001      	adds	r0, #1
 8012c36:	d011      	beq.n	8012c5c <_puts_r+0x84>
 8012c38:	250a      	movs	r5, #10
 8012c3a:	e011      	b.n	8012c60 <_puts_r+0x88>
 8012c3c:	4b1b      	ldr	r3, [pc, #108]	; (8012cac <_puts_r+0xd4>)
 8012c3e:	429c      	cmp	r4, r3
 8012c40:	d101      	bne.n	8012c46 <_puts_r+0x6e>
 8012c42:	68ac      	ldr	r4, [r5, #8]
 8012c44:	e7da      	b.n	8012bfc <_puts_r+0x24>
 8012c46:	4b1a      	ldr	r3, [pc, #104]	; (8012cb0 <_puts_r+0xd8>)
 8012c48:	429c      	cmp	r4, r3
 8012c4a:	bf08      	it	eq
 8012c4c:	68ec      	ldreq	r4, [r5, #12]
 8012c4e:	e7d5      	b.n	8012bfc <_puts_r+0x24>
 8012c50:	4621      	mov	r1, r4
 8012c52:	4628      	mov	r0, r5
 8012c54:	f000 f898 	bl	8012d88 <__swsetup_r>
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	d0dd      	beq.n	8012c18 <_puts_r+0x40>
 8012c5c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8012c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012c62:	07da      	lsls	r2, r3, #31
 8012c64:	d405      	bmi.n	8012c72 <_puts_r+0x9a>
 8012c66:	89a3      	ldrh	r3, [r4, #12]
 8012c68:	059b      	lsls	r3, r3, #22
 8012c6a:	d402      	bmi.n	8012c72 <_puts_r+0x9a>
 8012c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012c6e:	f000 fab2 	bl	80131d6 <__retarget_lock_release_recursive>
 8012c72:	4628      	mov	r0, r5
 8012c74:	bd70      	pop	{r4, r5, r6, pc}
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	da04      	bge.n	8012c84 <_puts_r+0xac>
 8012c7a:	69a2      	ldr	r2, [r4, #24]
 8012c7c:	429a      	cmp	r2, r3
 8012c7e:	dc06      	bgt.n	8012c8e <_puts_r+0xb6>
 8012c80:	290a      	cmp	r1, #10
 8012c82:	d004      	beq.n	8012c8e <_puts_r+0xb6>
 8012c84:	6823      	ldr	r3, [r4, #0]
 8012c86:	1c5a      	adds	r2, r3, #1
 8012c88:	6022      	str	r2, [r4, #0]
 8012c8a:	7019      	strb	r1, [r3, #0]
 8012c8c:	e7c5      	b.n	8012c1a <_puts_r+0x42>
 8012c8e:	4622      	mov	r2, r4
 8012c90:	4628      	mov	r0, r5
 8012c92:	f000 f827 	bl	8012ce4 <__swbuf_r>
 8012c96:	3001      	adds	r0, #1
 8012c98:	d1bf      	bne.n	8012c1a <_puts_r+0x42>
 8012c9a:	e7df      	b.n	8012c5c <_puts_r+0x84>
 8012c9c:	6823      	ldr	r3, [r4, #0]
 8012c9e:	250a      	movs	r5, #10
 8012ca0:	1c5a      	adds	r2, r3, #1
 8012ca2:	6022      	str	r2, [r4, #0]
 8012ca4:	701d      	strb	r5, [r3, #0]
 8012ca6:	e7db      	b.n	8012c60 <_puts_r+0x88>
 8012ca8:	08013dd4 	.word	0x08013dd4
 8012cac:	08013df4 	.word	0x08013df4
 8012cb0:	08013db4 	.word	0x08013db4

08012cb4 <puts>:
 8012cb4:	4b02      	ldr	r3, [pc, #8]	; (8012cc0 <puts+0xc>)
 8012cb6:	4601      	mov	r1, r0
 8012cb8:	6818      	ldr	r0, [r3, #0]
 8012cba:	f7ff bf8d 	b.w	8012bd8 <_puts_r>
 8012cbe:	bf00      	nop
 8012cc0:	24000014 	.word	0x24000014

08012cc4 <_sbrk_r>:
 8012cc4:	b538      	push	{r3, r4, r5, lr}
 8012cc6:	4d06      	ldr	r5, [pc, #24]	; (8012ce0 <_sbrk_r+0x1c>)
 8012cc8:	2300      	movs	r3, #0
 8012cca:	4604      	mov	r4, r0
 8012ccc:	4608      	mov	r0, r1
 8012cce:	602b      	str	r3, [r5, #0]
 8012cd0:	f7ef fc7e 	bl	80025d0 <_sbrk>
 8012cd4:	1c43      	adds	r3, r0, #1
 8012cd6:	d102      	bne.n	8012cde <_sbrk_r+0x1a>
 8012cd8:	682b      	ldr	r3, [r5, #0]
 8012cda:	b103      	cbz	r3, 8012cde <_sbrk_r+0x1a>
 8012cdc:	6023      	str	r3, [r4, #0]
 8012cde:	bd38      	pop	{r3, r4, r5, pc}
 8012ce0:	24004f98 	.word	0x24004f98

08012ce4 <__swbuf_r>:
 8012ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ce6:	460e      	mov	r6, r1
 8012ce8:	4614      	mov	r4, r2
 8012cea:	4605      	mov	r5, r0
 8012cec:	b118      	cbz	r0, 8012cf6 <__swbuf_r+0x12>
 8012cee:	6983      	ldr	r3, [r0, #24]
 8012cf0:	b90b      	cbnz	r3, 8012cf6 <__swbuf_r+0x12>
 8012cf2:	f000 f9d1 	bl	8013098 <__sinit>
 8012cf6:	4b21      	ldr	r3, [pc, #132]	; (8012d7c <__swbuf_r+0x98>)
 8012cf8:	429c      	cmp	r4, r3
 8012cfa:	d12b      	bne.n	8012d54 <__swbuf_r+0x70>
 8012cfc:	686c      	ldr	r4, [r5, #4]
 8012cfe:	69a3      	ldr	r3, [r4, #24]
 8012d00:	60a3      	str	r3, [r4, #8]
 8012d02:	89a3      	ldrh	r3, [r4, #12]
 8012d04:	071a      	lsls	r2, r3, #28
 8012d06:	d52f      	bpl.n	8012d68 <__swbuf_r+0x84>
 8012d08:	6923      	ldr	r3, [r4, #16]
 8012d0a:	b36b      	cbz	r3, 8012d68 <__swbuf_r+0x84>
 8012d0c:	6923      	ldr	r3, [r4, #16]
 8012d0e:	6820      	ldr	r0, [r4, #0]
 8012d10:	1ac0      	subs	r0, r0, r3
 8012d12:	6963      	ldr	r3, [r4, #20]
 8012d14:	b2f6      	uxtb	r6, r6
 8012d16:	4283      	cmp	r3, r0
 8012d18:	4637      	mov	r7, r6
 8012d1a:	dc04      	bgt.n	8012d26 <__swbuf_r+0x42>
 8012d1c:	4621      	mov	r1, r4
 8012d1e:	4628      	mov	r0, r5
 8012d20:	f000 f926 	bl	8012f70 <_fflush_r>
 8012d24:	bb30      	cbnz	r0, 8012d74 <__swbuf_r+0x90>
 8012d26:	68a3      	ldr	r3, [r4, #8]
 8012d28:	3b01      	subs	r3, #1
 8012d2a:	60a3      	str	r3, [r4, #8]
 8012d2c:	6823      	ldr	r3, [r4, #0]
 8012d2e:	1c5a      	adds	r2, r3, #1
 8012d30:	6022      	str	r2, [r4, #0]
 8012d32:	701e      	strb	r6, [r3, #0]
 8012d34:	6963      	ldr	r3, [r4, #20]
 8012d36:	3001      	adds	r0, #1
 8012d38:	4283      	cmp	r3, r0
 8012d3a:	d004      	beq.n	8012d46 <__swbuf_r+0x62>
 8012d3c:	89a3      	ldrh	r3, [r4, #12]
 8012d3e:	07db      	lsls	r3, r3, #31
 8012d40:	d506      	bpl.n	8012d50 <__swbuf_r+0x6c>
 8012d42:	2e0a      	cmp	r6, #10
 8012d44:	d104      	bne.n	8012d50 <__swbuf_r+0x6c>
 8012d46:	4621      	mov	r1, r4
 8012d48:	4628      	mov	r0, r5
 8012d4a:	f000 f911 	bl	8012f70 <_fflush_r>
 8012d4e:	b988      	cbnz	r0, 8012d74 <__swbuf_r+0x90>
 8012d50:	4638      	mov	r0, r7
 8012d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d54:	4b0a      	ldr	r3, [pc, #40]	; (8012d80 <__swbuf_r+0x9c>)
 8012d56:	429c      	cmp	r4, r3
 8012d58:	d101      	bne.n	8012d5e <__swbuf_r+0x7a>
 8012d5a:	68ac      	ldr	r4, [r5, #8]
 8012d5c:	e7cf      	b.n	8012cfe <__swbuf_r+0x1a>
 8012d5e:	4b09      	ldr	r3, [pc, #36]	; (8012d84 <__swbuf_r+0xa0>)
 8012d60:	429c      	cmp	r4, r3
 8012d62:	bf08      	it	eq
 8012d64:	68ec      	ldreq	r4, [r5, #12]
 8012d66:	e7ca      	b.n	8012cfe <__swbuf_r+0x1a>
 8012d68:	4621      	mov	r1, r4
 8012d6a:	4628      	mov	r0, r5
 8012d6c:	f000 f80c 	bl	8012d88 <__swsetup_r>
 8012d70:	2800      	cmp	r0, #0
 8012d72:	d0cb      	beq.n	8012d0c <__swbuf_r+0x28>
 8012d74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012d78:	e7ea      	b.n	8012d50 <__swbuf_r+0x6c>
 8012d7a:	bf00      	nop
 8012d7c:	08013dd4 	.word	0x08013dd4
 8012d80:	08013df4 	.word	0x08013df4
 8012d84:	08013db4 	.word	0x08013db4

08012d88 <__swsetup_r>:
 8012d88:	4b32      	ldr	r3, [pc, #200]	; (8012e54 <__swsetup_r+0xcc>)
 8012d8a:	b570      	push	{r4, r5, r6, lr}
 8012d8c:	681d      	ldr	r5, [r3, #0]
 8012d8e:	4606      	mov	r6, r0
 8012d90:	460c      	mov	r4, r1
 8012d92:	b125      	cbz	r5, 8012d9e <__swsetup_r+0x16>
 8012d94:	69ab      	ldr	r3, [r5, #24]
 8012d96:	b913      	cbnz	r3, 8012d9e <__swsetup_r+0x16>
 8012d98:	4628      	mov	r0, r5
 8012d9a:	f000 f97d 	bl	8013098 <__sinit>
 8012d9e:	4b2e      	ldr	r3, [pc, #184]	; (8012e58 <__swsetup_r+0xd0>)
 8012da0:	429c      	cmp	r4, r3
 8012da2:	d10f      	bne.n	8012dc4 <__swsetup_r+0x3c>
 8012da4:	686c      	ldr	r4, [r5, #4]
 8012da6:	89a3      	ldrh	r3, [r4, #12]
 8012da8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012dac:	0719      	lsls	r1, r3, #28
 8012dae:	d42c      	bmi.n	8012e0a <__swsetup_r+0x82>
 8012db0:	06dd      	lsls	r5, r3, #27
 8012db2:	d411      	bmi.n	8012dd8 <__swsetup_r+0x50>
 8012db4:	2309      	movs	r3, #9
 8012db6:	6033      	str	r3, [r6, #0]
 8012db8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012dbc:	81a3      	strh	r3, [r4, #12]
 8012dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012dc2:	e03e      	b.n	8012e42 <__swsetup_r+0xba>
 8012dc4:	4b25      	ldr	r3, [pc, #148]	; (8012e5c <__swsetup_r+0xd4>)
 8012dc6:	429c      	cmp	r4, r3
 8012dc8:	d101      	bne.n	8012dce <__swsetup_r+0x46>
 8012dca:	68ac      	ldr	r4, [r5, #8]
 8012dcc:	e7eb      	b.n	8012da6 <__swsetup_r+0x1e>
 8012dce:	4b24      	ldr	r3, [pc, #144]	; (8012e60 <__swsetup_r+0xd8>)
 8012dd0:	429c      	cmp	r4, r3
 8012dd2:	bf08      	it	eq
 8012dd4:	68ec      	ldreq	r4, [r5, #12]
 8012dd6:	e7e6      	b.n	8012da6 <__swsetup_r+0x1e>
 8012dd8:	0758      	lsls	r0, r3, #29
 8012dda:	d512      	bpl.n	8012e02 <__swsetup_r+0x7a>
 8012ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012dde:	b141      	cbz	r1, 8012df2 <__swsetup_r+0x6a>
 8012de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012de4:	4299      	cmp	r1, r3
 8012de6:	d002      	beq.n	8012dee <__swsetup_r+0x66>
 8012de8:	4630      	mov	r0, r6
 8012dea:	f7ff fde7 	bl	80129bc <_free_r>
 8012dee:	2300      	movs	r3, #0
 8012df0:	6363      	str	r3, [r4, #52]	; 0x34
 8012df2:	89a3      	ldrh	r3, [r4, #12]
 8012df4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012df8:	81a3      	strh	r3, [r4, #12]
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	6063      	str	r3, [r4, #4]
 8012dfe:	6923      	ldr	r3, [r4, #16]
 8012e00:	6023      	str	r3, [r4, #0]
 8012e02:	89a3      	ldrh	r3, [r4, #12]
 8012e04:	f043 0308 	orr.w	r3, r3, #8
 8012e08:	81a3      	strh	r3, [r4, #12]
 8012e0a:	6923      	ldr	r3, [r4, #16]
 8012e0c:	b94b      	cbnz	r3, 8012e22 <__swsetup_r+0x9a>
 8012e0e:	89a3      	ldrh	r3, [r4, #12]
 8012e10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e18:	d003      	beq.n	8012e22 <__swsetup_r+0x9a>
 8012e1a:	4621      	mov	r1, r4
 8012e1c:	4630      	mov	r0, r6
 8012e1e:	f000 fa01 	bl	8013224 <__smakebuf_r>
 8012e22:	89a0      	ldrh	r0, [r4, #12]
 8012e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012e28:	f010 0301 	ands.w	r3, r0, #1
 8012e2c:	d00a      	beq.n	8012e44 <__swsetup_r+0xbc>
 8012e2e:	2300      	movs	r3, #0
 8012e30:	60a3      	str	r3, [r4, #8]
 8012e32:	6963      	ldr	r3, [r4, #20]
 8012e34:	425b      	negs	r3, r3
 8012e36:	61a3      	str	r3, [r4, #24]
 8012e38:	6923      	ldr	r3, [r4, #16]
 8012e3a:	b943      	cbnz	r3, 8012e4e <__swsetup_r+0xc6>
 8012e3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012e40:	d1ba      	bne.n	8012db8 <__swsetup_r+0x30>
 8012e42:	bd70      	pop	{r4, r5, r6, pc}
 8012e44:	0781      	lsls	r1, r0, #30
 8012e46:	bf58      	it	pl
 8012e48:	6963      	ldrpl	r3, [r4, #20]
 8012e4a:	60a3      	str	r3, [r4, #8]
 8012e4c:	e7f4      	b.n	8012e38 <__swsetup_r+0xb0>
 8012e4e:	2000      	movs	r0, #0
 8012e50:	e7f7      	b.n	8012e42 <__swsetup_r+0xba>
 8012e52:	bf00      	nop
 8012e54:	24000014 	.word	0x24000014
 8012e58:	08013dd4 	.word	0x08013dd4
 8012e5c:	08013df4 	.word	0x08013df4
 8012e60:	08013db4 	.word	0x08013db4

08012e64 <__sflush_r>:
 8012e64:	898a      	ldrh	r2, [r1, #12]
 8012e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e6a:	4605      	mov	r5, r0
 8012e6c:	0710      	lsls	r0, r2, #28
 8012e6e:	460c      	mov	r4, r1
 8012e70:	d458      	bmi.n	8012f24 <__sflush_r+0xc0>
 8012e72:	684b      	ldr	r3, [r1, #4]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	dc05      	bgt.n	8012e84 <__sflush_r+0x20>
 8012e78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	dc02      	bgt.n	8012e84 <__sflush_r+0x20>
 8012e7e:	2000      	movs	r0, #0
 8012e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012e86:	2e00      	cmp	r6, #0
 8012e88:	d0f9      	beq.n	8012e7e <__sflush_r+0x1a>
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012e90:	682f      	ldr	r7, [r5, #0]
 8012e92:	602b      	str	r3, [r5, #0]
 8012e94:	d032      	beq.n	8012efc <__sflush_r+0x98>
 8012e96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012e98:	89a3      	ldrh	r3, [r4, #12]
 8012e9a:	075a      	lsls	r2, r3, #29
 8012e9c:	d505      	bpl.n	8012eaa <__sflush_r+0x46>
 8012e9e:	6863      	ldr	r3, [r4, #4]
 8012ea0:	1ac0      	subs	r0, r0, r3
 8012ea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012ea4:	b10b      	cbz	r3, 8012eaa <__sflush_r+0x46>
 8012ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012ea8:	1ac0      	subs	r0, r0, r3
 8012eaa:	2300      	movs	r3, #0
 8012eac:	4602      	mov	r2, r0
 8012eae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012eb0:	6a21      	ldr	r1, [r4, #32]
 8012eb2:	4628      	mov	r0, r5
 8012eb4:	47b0      	blx	r6
 8012eb6:	1c43      	adds	r3, r0, #1
 8012eb8:	89a3      	ldrh	r3, [r4, #12]
 8012eba:	d106      	bne.n	8012eca <__sflush_r+0x66>
 8012ebc:	6829      	ldr	r1, [r5, #0]
 8012ebe:	291d      	cmp	r1, #29
 8012ec0:	d82c      	bhi.n	8012f1c <__sflush_r+0xb8>
 8012ec2:	4a2a      	ldr	r2, [pc, #168]	; (8012f6c <__sflush_r+0x108>)
 8012ec4:	40ca      	lsrs	r2, r1
 8012ec6:	07d6      	lsls	r6, r2, #31
 8012ec8:	d528      	bpl.n	8012f1c <__sflush_r+0xb8>
 8012eca:	2200      	movs	r2, #0
 8012ecc:	6062      	str	r2, [r4, #4]
 8012ece:	04d9      	lsls	r1, r3, #19
 8012ed0:	6922      	ldr	r2, [r4, #16]
 8012ed2:	6022      	str	r2, [r4, #0]
 8012ed4:	d504      	bpl.n	8012ee0 <__sflush_r+0x7c>
 8012ed6:	1c42      	adds	r2, r0, #1
 8012ed8:	d101      	bne.n	8012ede <__sflush_r+0x7a>
 8012eda:	682b      	ldr	r3, [r5, #0]
 8012edc:	b903      	cbnz	r3, 8012ee0 <__sflush_r+0x7c>
 8012ede:	6560      	str	r0, [r4, #84]	; 0x54
 8012ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ee2:	602f      	str	r7, [r5, #0]
 8012ee4:	2900      	cmp	r1, #0
 8012ee6:	d0ca      	beq.n	8012e7e <__sflush_r+0x1a>
 8012ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012eec:	4299      	cmp	r1, r3
 8012eee:	d002      	beq.n	8012ef6 <__sflush_r+0x92>
 8012ef0:	4628      	mov	r0, r5
 8012ef2:	f7ff fd63 	bl	80129bc <_free_r>
 8012ef6:	2000      	movs	r0, #0
 8012ef8:	6360      	str	r0, [r4, #52]	; 0x34
 8012efa:	e7c1      	b.n	8012e80 <__sflush_r+0x1c>
 8012efc:	6a21      	ldr	r1, [r4, #32]
 8012efe:	2301      	movs	r3, #1
 8012f00:	4628      	mov	r0, r5
 8012f02:	47b0      	blx	r6
 8012f04:	1c41      	adds	r1, r0, #1
 8012f06:	d1c7      	bne.n	8012e98 <__sflush_r+0x34>
 8012f08:	682b      	ldr	r3, [r5, #0]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d0c4      	beq.n	8012e98 <__sflush_r+0x34>
 8012f0e:	2b1d      	cmp	r3, #29
 8012f10:	d001      	beq.n	8012f16 <__sflush_r+0xb2>
 8012f12:	2b16      	cmp	r3, #22
 8012f14:	d101      	bne.n	8012f1a <__sflush_r+0xb6>
 8012f16:	602f      	str	r7, [r5, #0]
 8012f18:	e7b1      	b.n	8012e7e <__sflush_r+0x1a>
 8012f1a:	89a3      	ldrh	r3, [r4, #12]
 8012f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f20:	81a3      	strh	r3, [r4, #12]
 8012f22:	e7ad      	b.n	8012e80 <__sflush_r+0x1c>
 8012f24:	690f      	ldr	r7, [r1, #16]
 8012f26:	2f00      	cmp	r7, #0
 8012f28:	d0a9      	beq.n	8012e7e <__sflush_r+0x1a>
 8012f2a:	0793      	lsls	r3, r2, #30
 8012f2c:	680e      	ldr	r6, [r1, #0]
 8012f2e:	bf08      	it	eq
 8012f30:	694b      	ldreq	r3, [r1, #20]
 8012f32:	600f      	str	r7, [r1, #0]
 8012f34:	bf18      	it	ne
 8012f36:	2300      	movne	r3, #0
 8012f38:	eba6 0807 	sub.w	r8, r6, r7
 8012f3c:	608b      	str	r3, [r1, #8]
 8012f3e:	f1b8 0f00 	cmp.w	r8, #0
 8012f42:	dd9c      	ble.n	8012e7e <__sflush_r+0x1a>
 8012f44:	6a21      	ldr	r1, [r4, #32]
 8012f46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012f48:	4643      	mov	r3, r8
 8012f4a:	463a      	mov	r2, r7
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	47b0      	blx	r6
 8012f50:	2800      	cmp	r0, #0
 8012f52:	dc06      	bgt.n	8012f62 <__sflush_r+0xfe>
 8012f54:	89a3      	ldrh	r3, [r4, #12]
 8012f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f5a:	81a3      	strh	r3, [r4, #12]
 8012f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f60:	e78e      	b.n	8012e80 <__sflush_r+0x1c>
 8012f62:	4407      	add	r7, r0
 8012f64:	eba8 0800 	sub.w	r8, r8, r0
 8012f68:	e7e9      	b.n	8012f3e <__sflush_r+0xda>
 8012f6a:	bf00      	nop
 8012f6c:	20400001 	.word	0x20400001

08012f70 <_fflush_r>:
 8012f70:	b538      	push	{r3, r4, r5, lr}
 8012f72:	690b      	ldr	r3, [r1, #16]
 8012f74:	4605      	mov	r5, r0
 8012f76:	460c      	mov	r4, r1
 8012f78:	b913      	cbnz	r3, 8012f80 <_fflush_r+0x10>
 8012f7a:	2500      	movs	r5, #0
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	bd38      	pop	{r3, r4, r5, pc}
 8012f80:	b118      	cbz	r0, 8012f8a <_fflush_r+0x1a>
 8012f82:	6983      	ldr	r3, [r0, #24]
 8012f84:	b90b      	cbnz	r3, 8012f8a <_fflush_r+0x1a>
 8012f86:	f000 f887 	bl	8013098 <__sinit>
 8012f8a:	4b14      	ldr	r3, [pc, #80]	; (8012fdc <_fflush_r+0x6c>)
 8012f8c:	429c      	cmp	r4, r3
 8012f8e:	d11b      	bne.n	8012fc8 <_fflush_r+0x58>
 8012f90:	686c      	ldr	r4, [r5, #4]
 8012f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d0ef      	beq.n	8012f7a <_fflush_r+0xa>
 8012f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012f9c:	07d0      	lsls	r0, r2, #31
 8012f9e:	d404      	bmi.n	8012faa <_fflush_r+0x3a>
 8012fa0:	0599      	lsls	r1, r3, #22
 8012fa2:	d402      	bmi.n	8012faa <_fflush_r+0x3a>
 8012fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012fa6:	f000 f915 	bl	80131d4 <__retarget_lock_acquire_recursive>
 8012faa:	4628      	mov	r0, r5
 8012fac:	4621      	mov	r1, r4
 8012fae:	f7ff ff59 	bl	8012e64 <__sflush_r>
 8012fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012fb4:	07da      	lsls	r2, r3, #31
 8012fb6:	4605      	mov	r5, r0
 8012fb8:	d4e0      	bmi.n	8012f7c <_fflush_r+0xc>
 8012fba:	89a3      	ldrh	r3, [r4, #12]
 8012fbc:	059b      	lsls	r3, r3, #22
 8012fbe:	d4dd      	bmi.n	8012f7c <_fflush_r+0xc>
 8012fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012fc2:	f000 f908 	bl	80131d6 <__retarget_lock_release_recursive>
 8012fc6:	e7d9      	b.n	8012f7c <_fflush_r+0xc>
 8012fc8:	4b05      	ldr	r3, [pc, #20]	; (8012fe0 <_fflush_r+0x70>)
 8012fca:	429c      	cmp	r4, r3
 8012fcc:	d101      	bne.n	8012fd2 <_fflush_r+0x62>
 8012fce:	68ac      	ldr	r4, [r5, #8]
 8012fd0:	e7df      	b.n	8012f92 <_fflush_r+0x22>
 8012fd2:	4b04      	ldr	r3, [pc, #16]	; (8012fe4 <_fflush_r+0x74>)
 8012fd4:	429c      	cmp	r4, r3
 8012fd6:	bf08      	it	eq
 8012fd8:	68ec      	ldreq	r4, [r5, #12]
 8012fda:	e7da      	b.n	8012f92 <_fflush_r+0x22>
 8012fdc:	08013dd4 	.word	0x08013dd4
 8012fe0:	08013df4 	.word	0x08013df4
 8012fe4:	08013db4 	.word	0x08013db4

08012fe8 <std>:
 8012fe8:	2300      	movs	r3, #0
 8012fea:	b510      	push	{r4, lr}
 8012fec:	4604      	mov	r4, r0
 8012fee:	e9c0 3300 	strd	r3, r3, [r0]
 8012ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012ff6:	6083      	str	r3, [r0, #8]
 8012ff8:	8181      	strh	r1, [r0, #12]
 8012ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8012ffc:	81c2      	strh	r2, [r0, #14]
 8012ffe:	6183      	str	r3, [r0, #24]
 8013000:	4619      	mov	r1, r3
 8013002:	2208      	movs	r2, #8
 8013004:	305c      	adds	r0, #92	; 0x5c
 8013006:	f7ff fcd1 	bl	80129ac <memset>
 801300a:	4b05      	ldr	r3, [pc, #20]	; (8013020 <std+0x38>)
 801300c:	6263      	str	r3, [r4, #36]	; 0x24
 801300e:	4b05      	ldr	r3, [pc, #20]	; (8013024 <std+0x3c>)
 8013010:	62a3      	str	r3, [r4, #40]	; 0x28
 8013012:	4b05      	ldr	r3, [pc, #20]	; (8013028 <std+0x40>)
 8013014:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013016:	4b05      	ldr	r3, [pc, #20]	; (801302c <std+0x44>)
 8013018:	6224      	str	r4, [r4, #32]
 801301a:	6323      	str	r3, [r4, #48]	; 0x30
 801301c:	bd10      	pop	{r4, pc}
 801301e:	bf00      	nop
 8013020:	08013929 	.word	0x08013929
 8013024:	0801394b 	.word	0x0801394b
 8013028:	08013983 	.word	0x08013983
 801302c:	080139a7 	.word	0x080139a7

08013030 <_cleanup_r>:
 8013030:	4901      	ldr	r1, [pc, #4]	; (8013038 <_cleanup_r+0x8>)
 8013032:	f000 b8af 	b.w	8013194 <_fwalk_reent>
 8013036:	bf00      	nop
 8013038:	08012f71 	.word	0x08012f71

0801303c <__sfmoreglue>:
 801303c:	b570      	push	{r4, r5, r6, lr}
 801303e:	2268      	movs	r2, #104	; 0x68
 8013040:	1e4d      	subs	r5, r1, #1
 8013042:	4355      	muls	r5, r2
 8013044:	460e      	mov	r6, r1
 8013046:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801304a:	f7ff fd23 	bl	8012a94 <_malloc_r>
 801304e:	4604      	mov	r4, r0
 8013050:	b140      	cbz	r0, 8013064 <__sfmoreglue+0x28>
 8013052:	2100      	movs	r1, #0
 8013054:	e9c0 1600 	strd	r1, r6, [r0]
 8013058:	300c      	adds	r0, #12
 801305a:	60a0      	str	r0, [r4, #8]
 801305c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013060:	f7ff fca4 	bl	80129ac <memset>
 8013064:	4620      	mov	r0, r4
 8013066:	bd70      	pop	{r4, r5, r6, pc}

08013068 <__sfp_lock_acquire>:
 8013068:	4801      	ldr	r0, [pc, #4]	; (8013070 <__sfp_lock_acquire+0x8>)
 801306a:	f000 b8b3 	b.w	80131d4 <__retarget_lock_acquire_recursive>
 801306e:	bf00      	nop
 8013070:	24004f95 	.word	0x24004f95

08013074 <__sfp_lock_release>:
 8013074:	4801      	ldr	r0, [pc, #4]	; (801307c <__sfp_lock_release+0x8>)
 8013076:	f000 b8ae 	b.w	80131d6 <__retarget_lock_release_recursive>
 801307a:	bf00      	nop
 801307c:	24004f95 	.word	0x24004f95

08013080 <__sinit_lock_acquire>:
 8013080:	4801      	ldr	r0, [pc, #4]	; (8013088 <__sinit_lock_acquire+0x8>)
 8013082:	f000 b8a7 	b.w	80131d4 <__retarget_lock_acquire_recursive>
 8013086:	bf00      	nop
 8013088:	24004f96 	.word	0x24004f96

0801308c <__sinit_lock_release>:
 801308c:	4801      	ldr	r0, [pc, #4]	; (8013094 <__sinit_lock_release+0x8>)
 801308e:	f000 b8a2 	b.w	80131d6 <__retarget_lock_release_recursive>
 8013092:	bf00      	nop
 8013094:	24004f96 	.word	0x24004f96

08013098 <__sinit>:
 8013098:	b510      	push	{r4, lr}
 801309a:	4604      	mov	r4, r0
 801309c:	f7ff fff0 	bl	8013080 <__sinit_lock_acquire>
 80130a0:	69a3      	ldr	r3, [r4, #24]
 80130a2:	b11b      	cbz	r3, 80130ac <__sinit+0x14>
 80130a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130a8:	f7ff bff0 	b.w	801308c <__sinit_lock_release>
 80130ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80130b0:	6523      	str	r3, [r4, #80]	; 0x50
 80130b2:	4b13      	ldr	r3, [pc, #76]	; (8013100 <__sinit+0x68>)
 80130b4:	4a13      	ldr	r2, [pc, #76]	; (8013104 <__sinit+0x6c>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80130ba:	42a3      	cmp	r3, r4
 80130bc:	bf04      	itt	eq
 80130be:	2301      	moveq	r3, #1
 80130c0:	61a3      	streq	r3, [r4, #24]
 80130c2:	4620      	mov	r0, r4
 80130c4:	f000 f820 	bl	8013108 <__sfp>
 80130c8:	6060      	str	r0, [r4, #4]
 80130ca:	4620      	mov	r0, r4
 80130cc:	f000 f81c 	bl	8013108 <__sfp>
 80130d0:	60a0      	str	r0, [r4, #8]
 80130d2:	4620      	mov	r0, r4
 80130d4:	f000 f818 	bl	8013108 <__sfp>
 80130d8:	2200      	movs	r2, #0
 80130da:	60e0      	str	r0, [r4, #12]
 80130dc:	2104      	movs	r1, #4
 80130de:	6860      	ldr	r0, [r4, #4]
 80130e0:	f7ff ff82 	bl	8012fe8 <std>
 80130e4:	68a0      	ldr	r0, [r4, #8]
 80130e6:	2201      	movs	r2, #1
 80130e8:	2109      	movs	r1, #9
 80130ea:	f7ff ff7d 	bl	8012fe8 <std>
 80130ee:	68e0      	ldr	r0, [r4, #12]
 80130f0:	2202      	movs	r2, #2
 80130f2:	2112      	movs	r1, #18
 80130f4:	f7ff ff78 	bl	8012fe8 <std>
 80130f8:	2301      	movs	r3, #1
 80130fa:	61a3      	str	r3, [r4, #24]
 80130fc:	e7d2      	b.n	80130a4 <__sinit+0xc>
 80130fe:	bf00      	nop
 8013100:	08013db0 	.word	0x08013db0
 8013104:	08013031 	.word	0x08013031

08013108 <__sfp>:
 8013108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801310a:	4607      	mov	r7, r0
 801310c:	f7ff ffac 	bl	8013068 <__sfp_lock_acquire>
 8013110:	4b1e      	ldr	r3, [pc, #120]	; (801318c <__sfp+0x84>)
 8013112:	681e      	ldr	r6, [r3, #0]
 8013114:	69b3      	ldr	r3, [r6, #24]
 8013116:	b913      	cbnz	r3, 801311e <__sfp+0x16>
 8013118:	4630      	mov	r0, r6
 801311a:	f7ff ffbd 	bl	8013098 <__sinit>
 801311e:	3648      	adds	r6, #72	; 0x48
 8013120:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013124:	3b01      	subs	r3, #1
 8013126:	d503      	bpl.n	8013130 <__sfp+0x28>
 8013128:	6833      	ldr	r3, [r6, #0]
 801312a:	b30b      	cbz	r3, 8013170 <__sfp+0x68>
 801312c:	6836      	ldr	r6, [r6, #0]
 801312e:	e7f7      	b.n	8013120 <__sfp+0x18>
 8013130:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013134:	b9d5      	cbnz	r5, 801316c <__sfp+0x64>
 8013136:	4b16      	ldr	r3, [pc, #88]	; (8013190 <__sfp+0x88>)
 8013138:	60e3      	str	r3, [r4, #12]
 801313a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801313e:	6665      	str	r5, [r4, #100]	; 0x64
 8013140:	f000 f847 	bl	80131d2 <__retarget_lock_init_recursive>
 8013144:	f7ff ff96 	bl	8013074 <__sfp_lock_release>
 8013148:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801314c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013150:	6025      	str	r5, [r4, #0]
 8013152:	61a5      	str	r5, [r4, #24]
 8013154:	2208      	movs	r2, #8
 8013156:	4629      	mov	r1, r5
 8013158:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801315c:	f7ff fc26 	bl	80129ac <memset>
 8013160:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013164:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013168:	4620      	mov	r0, r4
 801316a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801316c:	3468      	adds	r4, #104	; 0x68
 801316e:	e7d9      	b.n	8013124 <__sfp+0x1c>
 8013170:	2104      	movs	r1, #4
 8013172:	4638      	mov	r0, r7
 8013174:	f7ff ff62 	bl	801303c <__sfmoreglue>
 8013178:	4604      	mov	r4, r0
 801317a:	6030      	str	r0, [r6, #0]
 801317c:	2800      	cmp	r0, #0
 801317e:	d1d5      	bne.n	801312c <__sfp+0x24>
 8013180:	f7ff ff78 	bl	8013074 <__sfp_lock_release>
 8013184:	230c      	movs	r3, #12
 8013186:	603b      	str	r3, [r7, #0]
 8013188:	e7ee      	b.n	8013168 <__sfp+0x60>
 801318a:	bf00      	nop
 801318c:	08013db0 	.word	0x08013db0
 8013190:	ffff0001 	.word	0xffff0001

08013194 <_fwalk_reent>:
 8013194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013198:	4606      	mov	r6, r0
 801319a:	4688      	mov	r8, r1
 801319c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80131a0:	2700      	movs	r7, #0
 80131a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80131a6:	f1b9 0901 	subs.w	r9, r9, #1
 80131aa:	d505      	bpl.n	80131b8 <_fwalk_reent+0x24>
 80131ac:	6824      	ldr	r4, [r4, #0]
 80131ae:	2c00      	cmp	r4, #0
 80131b0:	d1f7      	bne.n	80131a2 <_fwalk_reent+0xe>
 80131b2:	4638      	mov	r0, r7
 80131b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131b8:	89ab      	ldrh	r3, [r5, #12]
 80131ba:	2b01      	cmp	r3, #1
 80131bc:	d907      	bls.n	80131ce <_fwalk_reent+0x3a>
 80131be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80131c2:	3301      	adds	r3, #1
 80131c4:	d003      	beq.n	80131ce <_fwalk_reent+0x3a>
 80131c6:	4629      	mov	r1, r5
 80131c8:	4630      	mov	r0, r6
 80131ca:	47c0      	blx	r8
 80131cc:	4307      	orrs	r7, r0
 80131ce:	3568      	adds	r5, #104	; 0x68
 80131d0:	e7e9      	b.n	80131a6 <_fwalk_reent+0x12>

080131d2 <__retarget_lock_init_recursive>:
 80131d2:	4770      	bx	lr

080131d4 <__retarget_lock_acquire_recursive>:
 80131d4:	4770      	bx	lr

080131d6 <__retarget_lock_release_recursive>:
 80131d6:	4770      	bx	lr

080131d8 <__swhatbuf_r>:
 80131d8:	b570      	push	{r4, r5, r6, lr}
 80131da:	460e      	mov	r6, r1
 80131dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80131e0:	2900      	cmp	r1, #0
 80131e2:	b096      	sub	sp, #88	; 0x58
 80131e4:	4614      	mov	r4, r2
 80131e6:	461d      	mov	r5, r3
 80131e8:	da08      	bge.n	80131fc <__swhatbuf_r+0x24>
 80131ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80131ee:	2200      	movs	r2, #0
 80131f0:	602a      	str	r2, [r5, #0]
 80131f2:	061a      	lsls	r2, r3, #24
 80131f4:	d410      	bmi.n	8013218 <__swhatbuf_r+0x40>
 80131f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131fa:	e00e      	b.n	801321a <__swhatbuf_r+0x42>
 80131fc:	466a      	mov	r2, sp
 80131fe:	f000 fbf9 	bl	80139f4 <_fstat_r>
 8013202:	2800      	cmp	r0, #0
 8013204:	dbf1      	blt.n	80131ea <__swhatbuf_r+0x12>
 8013206:	9a01      	ldr	r2, [sp, #4]
 8013208:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801320c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013210:	425a      	negs	r2, r3
 8013212:	415a      	adcs	r2, r3
 8013214:	602a      	str	r2, [r5, #0]
 8013216:	e7ee      	b.n	80131f6 <__swhatbuf_r+0x1e>
 8013218:	2340      	movs	r3, #64	; 0x40
 801321a:	2000      	movs	r0, #0
 801321c:	6023      	str	r3, [r4, #0]
 801321e:	b016      	add	sp, #88	; 0x58
 8013220:	bd70      	pop	{r4, r5, r6, pc}
	...

08013224 <__smakebuf_r>:
 8013224:	898b      	ldrh	r3, [r1, #12]
 8013226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013228:	079d      	lsls	r5, r3, #30
 801322a:	4606      	mov	r6, r0
 801322c:	460c      	mov	r4, r1
 801322e:	d507      	bpl.n	8013240 <__smakebuf_r+0x1c>
 8013230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013234:	6023      	str	r3, [r4, #0]
 8013236:	6123      	str	r3, [r4, #16]
 8013238:	2301      	movs	r3, #1
 801323a:	6163      	str	r3, [r4, #20]
 801323c:	b002      	add	sp, #8
 801323e:	bd70      	pop	{r4, r5, r6, pc}
 8013240:	ab01      	add	r3, sp, #4
 8013242:	466a      	mov	r2, sp
 8013244:	f7ff ffc8 	bl	80131d8 <__swhatbuf_r>
 8013248:	9900      	ldr	r1, [sp, #0]
 801324a:	4605      	mov	r5, r0
 801324c:	4630      	mov	r0, r6
 801324e:	f7ff fc21 	bl	8012a94 <_malloc_r>
 8013252:	b948      	cbnz	r0, 8013268 <__smakebuf_r+0x44>
 8013254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013258:	059a      	lsls	r2, r3, #22
 801325a:	d4ef      	bmi.n	801323c <__smakebuf_r+0x18>
 801325c:	f023 0303 	bic.w	r3, r3, #3
 8013260:	f043 0302 	orr.w	r3, r3, #2
 8013264:	81a3      	strh	r3, [r4, #12]
 8013266:	e7e3      	b.n	8013230 <__smakebuf_r+0xc>
 8013268:	4b0d      	ldr	r3, [pc, #52]	; (80132a0 <__smakebuf_r+0x7c>)
 801326a:	62b3      	str	r3, [r6, #40]	; 0x28
 801326c:	89a3      	ldrh	r3, [r4, #12]
 801326e:	6020      	str	r0, [r4, #0]
 8013270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013274:	81a3      	strh	r3, [r4, #12]
 8013276:	9b00      	ldr	r3, [sp, #0]
 8013278:	6163      	str	r3, [r4, #20]
 801327a:	9b01      	ldr	r3, [sp, #4]
 801327c:	6120      	str	r0, [r4, #16]
 801327e:	b15b      	cbz	r3, 8013298 <__smakebuf_r+0x74>
 8013280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013284:	4630      	mov	r0, r6
 8013286:	f000 fbc7 	bl	8013a18 <_isatty_r>
 801328a:	b128      	cbz	r0, 8013298 <__smakebuf_r+0x74>
 801328c:	89a3      	ldrh	r3, [r4, #12]
 801328e:	f023 0303 	bic.w	r3, r3, #3
 8013292:	f043 0301 	orr.w	r3, r3, #1
 8013296:	81a3      	strh	r3, [r4, #12]
 8013298:	89a0      	ldrh	r0, [r4, #12]
 801329a:	4305      	orrs	r5, r0
 801329c:	81a5      	strh	r5, [r4, #12]
 801329e:	e7cd      	b.n	801323c <__smakebuf_r+0x18>
 80132a0:	08013031 	.word	0x08013031

080132a4 <__malloc_lock>:
 80132a4:	4801      	ldr	r0, [pc, #4]	; (80132ac <__malloc_lock+0x8>)
 80132a6:	f7ff bf95 	b.w	80131d4 <__retarget_lock_acquire_recursive>
 80132aa:	bf00      	nop
 80132ac:	24004f94 	.word	0x24004f94

080132b0 <__malloc_unlock>:
 80132b0:	4801      	ldr	r0, [pc, #4]	; (80132b8 <__malloc_unlock+0x8>)
 80132b2:	f7ff bf90 	b.w	80131d6 <__retarget_lock_release_recursive>
 80132b6:	bf00      	nop
 80132b8:	24004f94 	.word	0x24004f94

080132bc <__sfputc_r>:
 80132bc:	6893      	ldr	r3, [r2, #8]
 80132be:	3b01      	subs	r3, #1
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	b410      	push	{r4}
 80132c4:	6093      	str	r3, [r2, #8]
 80132c6:	da08      	bge.n	80132da <__sfputc_r+0x1e>
 80132c8:	6994      	ldr	r4, [r2, #24]
 80132ca:	42a3      	cmp	r3, r4
 80132cc:	db01      	blt.n	80132d2 <__sfputc_r+0x16>
 80132ce:	290a      	cmp	r1, #10
 80132d0:	d103      	bne.n	80132da <__sfputc_r+0x1e>
 80132d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132d6:	f7ff bd05 	b.w	8012ce4 <__swbuf_r>
 80132da:	6813      	ldr	r3, [r2, #0]
 80132dc:	1c58      	adds	r0, r3, #1
 80132de:	6010      	str	r0, [r2, #0]
 80132e0:	7019      	strb	r1, [r3, #0]
 80132e2:	4608      	mov	r0, r1
 80132e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132e8:	4770      	bx	lr

080132ea <__sfputs_r>:
 80132ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132ec:	4606      	mov	r6, r0
 80132ee:	460f      	mov	r7, r1
 80132f0:	4614      	mov	r4, r2
 80132f2:	18d5      	adds	r5, r2, r3
 80132f4:	42ac      	cmp	r4, r5
 80132f6:	d101      	bne.n	80132fc <__sfputs_r+0x12>
 80132f8:	2000      	movs	r0, #0
 80132fa:	e007      	b.n	801330c <__sfputs_r+0x22>
 80132fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013300:	463a      	mov	r2, r7
 8013302:	4630      	mov	r0, r6
 8013304:	f7ff ffda 	bl	80132bc <__sfputc_r>
 8013308:	1c43      	adds	r3, r0, #1
 801330a:	d1f3      	bne.n	80132f4 <__sfputs_r+0xa>
 801330c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013310 <_vfiprintf_r>:
 8013310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013314:	460d      	mov	r5, r1
 8013316:	b09d      	sub	sp, #116	; 0x74
 8013318:	4614      	mov	r4, r2
 801331a:	4698      	mov	r8, r3
 801331c:	4606      	mov	r6, r0
 801331e:	b118      	cbz	r0, 8013328 <_vfiprintf_r+0x18>
 8013320:	6983      	ldr	r3, [r0, #24]
 8013322:	b90b      	cbnz	r3, 8013328 <_vfiprintf_r+0x18>
 8013324:	f7ff feb8 	bl	8013098 <__sinit>
 8013328:	4b89      	ldr	r3, [pc, #548]	; (8013550 <_vfiprintf_r+0x240>)
 801332a:	429d      	cmp	r5, r3
 801332c:	d11b      	bne.n	8013366 <_vfiprintf_r+0x56>
 801332e:	6875      	ldr	r5, [r6, #4]
 8013330:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013332:	07d9      	lsls	r1, r3, #31
 8013334:	d405      	bmi.n	8013342 <_vfiprintf_r+0x32>
 8013336:	89ab      	ldrh	r3, [r5, #12]
 8013338:	059a      	lsls	r2, r3, #22
 801333a:	d402      	bmi.n	8013342 <_vfiprintf_r+0x32>
 801333c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801333e:	f7ff ff49 	bl	80131d4 <__retarget_lock_acquire_recursive>
 8013342:	89ab      	ldrh	r3, [r5, #12]
 8013344:	071b      	lsls	r3, r3, #28
 8013346:	d501      	bpl.n	801334c <_vfiprintf_r+0x3c>
 8013348:	692b      	ldr	r3, [r5, #16]
 801334a:	b9eb      	cbnz	r3, 8013388 <_vfiprintf_r+0x78>
 801334c:	4629      	mov	r1, r5
 801334e:	4630      	mov	r0, r6
 8013350:	f7ff fd1a 	bl	8012d88 <__swsetup_r>
 8013354:	b1c0      	cbz	r0, 8013388 <_vfiprintf_r+0x78>
 8013356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013358:	07dc      	lsls	r4, r3, #31
 801335a:	d50e      	bpl.n	801337a <_vfiprintf_r+0x6a>
 801335c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013360:	b01d      	add	sp, #116	; 0x74
 8013362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013366:	4b7b      	ldr	r3, [pc, #492]	; (8013554 <_vfiprintf_r+0x244>)
 8013368:	429d      	cmp	r5, r3
 801336a:	d101      	bne.n	8013370 <_vfiprintf_r+0x60>
 801336c:	68b5      	ldr	r5, [r6, #8]
 801336e:	e7df      	b.n	8013330 <_vfiprintf_r+0x20>
 8013370:	4b79      	ldr	r3, [pc, #484]	; (8013558 <_vfiprintf_r+0x248>)
 8013372:	429d      	cmp	r5, r3
 8013374:	bf08      	it	eq
 8013376:	68f5      	ldreq	r5, [r6, #12]
 8013378:	e7da      	b.n	8013330 <_vfiprintf_r+0x20>
 801337a:	89ab      	ldrh	r3, [r5, #12]
 801337c:	0598      	lsls	r0, r3, #22
 801337e:	d4ed      	bmi.n	801335c <_vfiprintf_r+0x4c>
 8013380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013382:	f7ff ff28 	bl	80131d6 <__retarget_lock_release_recursive>
 8013386:	e7e9      	b.n	801335c <_vfiprintf_r+0x4c>
 8013388:	2300      	movs	r3, #0
 801338a:	9309      	str	r3, [sp, #36]	; 0x24
 801338c:	2320      	movs	r3, #32
 801338e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013392:	f8cd 800c 	str.w	r8, [sp, #12]
 8013396:	2330      	movs	r3, #48	; 0x30
 8013398:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801355c <_vfiprintf_r+0x24c>
 801339c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80133a0:	f04f 0901 	mov.w	r9, #1
 80133a4:	4623      	mov	r3, r4
 80133a6:	469a      	mov	sl, r3
 80133a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80133ac:	b10a      	cbz	r2, 80133b2 <_vfiprintf_r+0xa2>
 80133ae:	2a25      	cmp	r2, #37	; 0x25
 80133b0:	d1f9      	bne.n	80133a6 <_vfiprintf_r+0x96>
 80133b2:	ebba 0b04 	subs.w	fp, sl, r4
 80133b6:	d00b      	beq.n	80133d0 <_vfiprintf_r+0xc0>
 80133b8:	465b      	mov	r3, fp
 80133ba:	4622      	mov	r2, r4
 80133bc:	4629      	mov	r1, r5
 80133be:	4630      	mov	r0, r6
 80133c0:	f7ff ff93 	bl	80132ea <__sfputs_r>
 80133c4:	3001      	adds	r0, #1
 80133c6:	f000 80aa 	beq.w	801351e <_vfiprintf_r+0x20e>
 80133ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133cc:	445a      	add	r2, fp
 80133ce:	9209      	str	r2, [sp, #36]	; 0x24
 80133d0:	f89a 3000 	ldrb.w	r3, [sl]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	f000 80a2 	beq.w	801351e <_vfiprintf_r+0x20e>
 80133da:	2300      	movs	r3, #0
 80133dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80133e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133e4:	f10a 0a01 	add.w	sl, sl, #1
 80133e8:	9304      	str	r3, [sp, #16]
 80133ea:	9307      	str	r3, [sp, #28]
 80133ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80133f0:	931a      	str	r3, [sp, #104]	; 0x68
 80133f2:	4654      	mov	r4, sl
 80133f4:	2205      	movs	r2, #5
 80133f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133fa:	4858      	ldr	r0, [pc, #352]	; (801355c <_vfiprintf_r+0x24c>)
 80133fc:	f7ec ff70 	bl	80002e0 <memchr>
 8013400:	9a04      	ldr	r2, [sp, #16]
 8013402:	b9d8      	cbnz	r0, 801343c <_vfiprintf_r+0x12c>
 8013404:	06d1      	lsls	r1, r2, #27
 8013406:	bf44      	itt	mi
 8013408:	2320      	movmi	r3, #32
 801340a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801340e:	0713      	lsls	r3, r2, #28
 8013410:	bf44      	itt	mi
 8013412:	232b      	movmi	r3, #43	; 0x2b
 8013414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013418:	f89a 3000 	ldrb.w	r3, [sl]
 801341c:	2b2a      	cmp	r3, #42	; 0x2a
 801341e:	d015      	beq.n	801344c <_vfiprintf_r+0x13c>
 8013420:	9a07      	ldr	r2, [sp, #28]
 8013422:	4654      	mov	r4, sl
 8013424:	2000      	movs	r0, #0
 8013426:	f04f 0c0a 	mov.w	ip, #10
 801342a:	4621      	mov	r1, r4
 801342c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013430:	3b30      	subs	r3, #48	; 0x30
 8013432:	2b09      	cmp	r3, #9
 8013434:	d94e      	bls.n	80134d4 <_vfiprintf_r+0x1c4>
 8013436:	b1b0      	cbz	r0, 8013466 <_vfiprintf_r+0x156>
 8013438:	9207      	str	r2, [sp, #28]
 801343a:	e014      	b.n	8013466 <_vfiprintf_r+0x156>
 801343c:	eba0 0308 	sub.w	r3, r0, r8
 8013440:	fa09 f303 	lsl.w	r3, r9, r3
 8013444:	4313      	orrs	r3, r2
 8013446:	9304      	str	r3, [sp, #16]
 8013448:	46a2      	mov	sl, r4
 801344a:	e7d2      	b.n	80133f2 <_vfiprintf_r+0xe2>
 801344c:	9b03      	ldr	r3, [sp, #12]
 801344e:	1d19      	adds	r1, r3, #4
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	9103      	str	r1, [sp, #12]
 8013454:	2b00      	cmp	r3, #0
 8013456:	bfbb      	ittet	lt
 8013458:	425b      	neglt	r3, r3
 801345a:	f042 0202 	orrlt.w	r2, r2, #2
 801345e:	9307      	strge	r3, [sp, #28]
 8013460:	9307      	strlt	r3, [sp, #28]
 8013462:	bfb8      	it	lt
 8013464:	9204      	strlt	r2, [sp, #16]
 8013466:	7823      	ldrb	r3, [r4, #0]
 8013468:	2b2e      	cmp	r3, #46	; 0x2e
 801346a:	d10c      	bne.n	8013486 <_vfiprintf_r+0x176>
 801346c:	7863      	ldrb	r3, [r4, #1]
 801346e:	2b2a      	cmp	r3, #42	; 0x2a
 8013470:	d135      	bne.n	80134de <_vfiprintf_r+0x1ce>
 8013472:	9b03      	ldr	r3, [sp, #12]
 8013474:	1d1a      	adds	r2, r3, #4
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	9203      	str	r2, [sp, #12]
 801347a:	2b00      	cmp	r3, #0
 801347c:	bfb8      	it	lt
 801347e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013482:	3402      	adds	r4, #2
 8013484:	9305      	str	r3, [sp, #20]
 8013486:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801356c <_vfiprintf_r+0x25c>
 801348a:	7821      	ldrb	r1, [r4, #0]
 801348c:	2203      	movs	r2, #3
 801348e:	4650      	mov	r0, sl
 8013490:	f7ec ff26 	bl	80002e0 <memchr>
 8013494:	b140      	cbz	r0, 80134a8 <_vfiprintf_r+0x198>
 8013496:	2340      	movs	r3, #64	; 0x40
 8013498:	eba0 000a 	sub.w	r0, r0, sl
 801349c:	fa03 f000 	lsl.w	r0, r3, r0
 80134a0:	9b04      	ldr	r3, [sp, #16]
 80134a2:	4303      	orrs	r3, r0
 80134a4:	3401      	adds	r4, #1
 80134a6:	9304      	str	r3, [sp, #16]
 80134a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134ac:	482c      	ldr	r0, [pc, #176]	; (8013560 <_vfiprintf_r+0x250>)
 80134ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80134b2:	2206      	movs	r2, #6
 80134b4:	f7ec ff14 	bl	80002e0 <memchr>
 80134b8:	2800      	cmp	r0, #0
 80134ba:	d03f      	beq.n	801353c <_vfiprintf_r+0x22c>
 80134bc:	4b29      	ldr	r3, [pc, #164]	; (8013564 <_vfiprintf_r+0x254>)
 80134be:	bb1b      	cbnz	r3, 8013508 <_vfiprintf_r+0x1f8>
 80134c0:	9b03      	ldr	r3, [sp, #12]
 80134c2:	3307      	adds	r3, #7
 80134c4:	f023 0307 	bic.w	r3, r3, #7
 80134c8:	3308      	adds	r3, #8
 80134ca:	9303      	str	r3, [sp, #12]
 80134cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134ce:	443b      	add	r3, r7
 80134d0:	9309      	str	r3, [sp, #36]	; 0x24
 80134d2:	e767      	b.n	80133a4 <_vfiprintf_r+0x94>
 80134d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80134d8:	460c      	mov	r4, r1
 80134da:	2001      	movs	r0, #1
 80134dc:	e7a5      	b.n	801342a <_vfiprintf_r+0x11a>
 80134de:	2300      	movs	r3, #0
 80134e0:	3401      	adds	r4, #1
 80134e2:	9305      	str	r3, [sp, #20]
 80134e4:	4619      	mov	r1, r3
 80134e6:	f04f 0c0a 	mov.w	ip, #10
 80134ea:	4620      	mov	r0, r4
 80134ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134f0:	3a30      	subs	r2, #48	; 0x30
 80134f2:	2a09      	cmp	r2, #9
 80134f4:	d903      	bls.n	80134fe <_vfiprintf_r+0x1ee>
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d0c5      	beq.n	8013486 <_vfiprintf_r+0x176>
 80134fa:	9105      	str	r1, [sp, #20]
 80134fc:	e7c3      	b.n	8013486 <_vfiprintf_r+0x176>
 80134fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8013502:	4604      	mov	r4, r0
 8013504:	2301      	movs	r3, #1
 8013506:	e7f0      	b.n	80134ea <_vfiprintf_r+0x1da>
 8013508:	ab03      	add	r3, sp, #12
 801350a:	9300      	str	r3, [sp, #0]
 801350c:	462a      	mov	r2, r5
 801350e:	4b16      	ldr	r3, [pc, #88]	; (8013568 <_vfiprintf_r+0x258>)
 8013510:	a904      	add	r1, sp, #16
 8013512:	4630      	mov	r0, r6
 8013514:	f3af 8000 	nop.w
 8013518:	4607      	mov	r7, r0
 801351a:	1c78      	adds	r0, r7, #1
 801351c:	d1d6      	bne.n	80134cc <_vfiprintf_r+0x1bc>
 801351e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013520:	07d9      	lsls	r1, r3, #31
 8013522:	d405      	bmi.n	8013530 <_vfiprintf_r+0x220>
 8013524:	89ab      	ldrh	r3, [r5, #12]
 8013526:	059a      	lsls	r2, r3, #22
 8013528:	d402      	bmi.n	8013530 <_vfiprintf_r+0x220>
 801352a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801352c:	f7ff fe53 	bl	80131d6 <__retarget_lock_release_recursive>
 8013530:	89ab      	ldrh	r3, [r5, #12]
 8013532:	065b      	lsls	r3, r3, #25
 8013534:	f53f af12 	bmi.w	801335c <_vfiprintf_r+0x4c>
 8013538:	9809      	ldr	r0, [sp, #36]	; 0x24
 801353a:	e711      	b.n	8013360 <_vfiprintf_r+0x50>
 801353c:	ab03      	add	r3, sp, #12
 801353e:	9300      	str	r3, [sp, #0]
 8013540:	462a      	mov	r2, r5
 8013542:	4b09      	ldr	r3, [pc, #36]	; (8013568 <_vfiprintf_r+0x258>)
 8013544:	a904      	add	r1, sp, #16
 8013546:	4630      	mov	r0, r6
 8013548:	f000 f880 	bl	801364c <_printf_i>
 801354c:	e7e4      	b.n	8013518 <_vfiprintf_r+0x208>
 801354e:	bf00      	nop
 8013550:	08013dd4 	.word	0x08013dd4
 8013554:	08013df4 	.word	0x08013df4
 8013558:	08013db4 	.word	0x08013db4
 801355c:	08013e14 	.word	0x08013e14
 8013560:	08013e1e 	.word	0x08013e1e
 8013564:	00000000 	.word	0x00000000
 8013568:	080132eb 	.word	0x080132eb
 801356c:	08013e1a 	.word	0x08013e1a

08013570 <_printf_common>:
 8013570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013574:	4616      	mov	r6, r2
 8013576:	4699      	mov	r9, r3
 8013578:	688a      	ldr	r2, [r1, #8]
 801357a:	690b      	ldr	r3, [r1, #16]
 801357c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013580:	4293      	cmp	r3, r2
 8013582:	bfb8      	it	lt
 8013584:	4613      	movlt	r3, r2
 8013586:	6033      	str	r3, [r6, #0]
 8013588:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801358c:	4607      	mov	r7, r0
 801358e:	460c      	mov	r4, r1
 8013590:	b10a      	cbz	r2, 8013596 <_printf_common+0x26>
 8013592:	3301      	adds	r3, #1
 8013594:	6033      	str	r3, [r6, #0]
 8013596:	6823      	ldr	r3, [r4, #0]
 8013598:	0699      	lsls	r1, r3, #26
 801359a:	bf42      	ittt	mi
 801359c:	6833      	ldrmi	r3, [r6, #0]
 801359e:	3302      	addmi	r3, #2
 80135a0:	6033      	strmi	r3, [r6, #0]
 80135a2:	6825      	ldr	r5, [r4, #0]
 80135a4:	f015 0506 	ands.w	r5, r5, #6
 80135a8:	d106      	bne.n	80135b8 <_printf_common+0x48>
 80135aa:	f104 0a19 	add.w	sl, r4, #25
 80135ae:	68e3      	ldr	r3, [r4, #12]
 80135b0:	6832      	ldr	r2, [r6, #0]
 80135b2:	1a9b      	subs	r3, r3, r2
 80135b4:	42ab      	cmp	r3, r5
 80135b6:	dc26      	bgt.n	8013606 <_printf_common+0x96>
 80135b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80135bc:	1e13      	subs	r3, r2, #0
 80135be:	6822      	ldr	r2, [r4, #0]
 80135c0:	bf18      	it	ne
 80135c2:	2301      	movne	r3, #1
 80135c4:	0692      	lsls	r2, r2, #26
 80135c6:	d42b      	bmi.n	8013620 <_printf_common+0xb0>
 80135c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80135cc:	4649      	mov	r1, r9
 80135ce:	4638      	mov	r0, r7
 80135d0:	47c0      	blx	r8
 80135d2:	3001      	adds	r0, #1
 80135d4:	d01e      	beq.n	8013614 <_printf_common+0xa4>
 80135d6:	6823      	ldr	r3, [r4, #0]
 80135d8:	68e5      	ldr	r5, [r4, #12]
 80135da:	6832      	ldr	r2, [r6, #0]
 80135dc:	f003 0306 	and.w	r3, r3, #6
 80135e0:	2b04      	cmp	r3, #4
 80135e2:	bf08      	it	eq
 80135e4:	1aad      	subeq	r5, r5, r2
 80135e6:	68a3      	ldr	r3, [r4, #8]
 80135e8:	6922      	ldr	r2, [r4, #16]
 80135ea:	bf0c      	ite	eq
 80135ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80135f0:	2500      	movne	r5, #0
 80135f2:	4293      	cmp	r3, r2
 80135f4:	bfc4      	itt	gt
 80135f6:	1a9b      	subgt	r3, r3, r2
 80135f8:	18ed      	addgt	r5, r5, r3
 80135fa:	2600      	movs	r6, #0
 80135fc:	341a      	adds	r4, #26
 80135fe:	42b5      	cmp	r5, r6
 8013600:	d11a      	bne.n	8013638 <_printf_common+0xc8>
 8013602:	2000      	movs	r0, #0
 8013604:	e008      	b.n	8013618 <_printf_common+0xa8>
 8013606:	2301      	movs	r3, #1
 8013608:	4652      	mov	r2, sl
 801360a:	4649      	mov	r1, r9
 801360c:	4638      	mov	r0, r7
 801360e:	47c0      	blx	r8
 8013610:	3001      	adds	r0, #1
 8013612:	d103      	bne.n	801361c <_printf_common+0xac>
 8013614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801361c:	3501      	adds	r5, #1
 801361e:	e7c6      	b.n	80135ae <_printf_common+0x3e>
 8013620:	18e1      	adds	r1, r4, r3
 8013622:	1c5a      	adds	r2, r3, #1
 8013624:	2030      	movs	r0, #48	; 0x30
 8013626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801362a:	4422      	add	r2, r4
 801362c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013630:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013634:	3302      	adds	r3, #2
 8013636:	e7c7      	b.n	80135c8 <_printf_common+0x58>
 8013638:	2301      	movs	r3, #1
 801363a:	4622      	mov	r2, r4
 801363c:	4649      	mov	r1, r9
 801363e:	4638      	mov	r0, r7
 8013640:	47c0      	blx	r8
 8013642:	3001      	adds	r0, #1
 8013644:	d0e6      	beq.n	8013614 <_printf_common+0xa4>
 8013646:	3601      	adds	r6, #1
 8013648:	e7d9      	b.n	80135fe <_printf_common+0x8e>
	...

0801364c <_printf_i>:
 801364c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013650:	7e0f      	ldrb	r7, [r1, #24]
 8013652:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013654:	2f78      	cmp	r7, #120	; 0x78
 8013656:	4691      	mov	r9, r2
 8013658:	4680      	mov	r8, r0
 801365a:	460c      	mov	r4, r1
 801365c:	469a      	mov	sl, r3
 801365e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013662:	d807      	bhi.n	8013674 <_printf_i+0x28>
 8013664:	2f62      	cmp	r7, #98	; 0x62
 8013666:	d80a      	bhi.n	801367e <_printf_i+0x32>
 8013668:	2f00      	cmp	r7, #0
 801366a:	f000 80d8 	beq.w	801381e <_printf_i+0x1d2>
 801366e:	2f58      	cmp	r7, #88	; 0x58
 8013670:	f000 80a3 	beq.w	80137ba <_printf_i+0x16e>
 8013674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801367c:	e03a      	b.n	80136f4 <_printf_i+0xa8>
 801367e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013682:	2b15      	cmp	r3, #21
 8013684:	d8f6      	bhi.n	8013674 <_printf_i+0x28>
 8013686:	a101      	add	r1, pc, #4	; (adr r1, 801368c <_printf_i+0x40>)
 8013688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801368c:	080136e5 	.word	0x080136e5
 8013690:	080136f9 	.word	0x080136f9
 8013694:	08013675 	.word	0x08013675
 8013698:	08013675 	.word	0x08013675
 801369c:	08013675 	.word	0x08013675
 80136a0:	08013675 	.word	0x08013675
 80136a4:	080136f9 	.word	0x080136f9
 80136a8:	08013675 	.word	0x08013675
 80136ac:	08013675 	.word	0x08013675
 80136b0:	08013675 	.word	0x08013675
 80136b4:	08013675 	.word	0x08013675
 80136b8:	08013805 	.word	0x08013805
 80136bc:	08013729 	.word	0x08013729
 80136c0:	080137e7 	.word	0x080137e7
 80136c4:	08013675 	.word	0x08013675
 80136c8:	08013675 	.word	0x08013675
 80136cc:	08013827 	.word	0x08013827
 80136d0:	08013675 	.word	0x08013675
 80136d4:	08013729 	.word	0x08013729
 80136d8:	08013675 	.word	0x08013675
 80136dc:	08013675 	.word	0x08013675
 80136e0:	080137ef 	.word	0x080137ef
 80136e4:	682b      	ldr	r3, [r5, #0]
 80136e6:	1d1a      	adds	r2, r3, #4
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	602a      	str	r2, [r5, #0]
 80136ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80136f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80136f4:	2301      	movs	r3, #1
 80136f6:	e0a3      	b.n	8013840 <_printf_i+0x1f4>
 80136f8:	6820      	ldr	r0, [r4, #0]
 80136fa:	6829      	ldr	r1, [r5, #0]
 80136fc:	0606      	lsls	r6, r0, #24
 80136fe:	f101 0304 	add.w	r3, r1, #4
 8013702:	d50a      	bpl.n	801371a <_printf_i+0xce>
 8013704:	680e      	ldr	r6, [r1, #0]
 8013706:	602b      	str	r3, [r5, #0]
 8013708:	2e00      	cmp	r6, #0
 801370a:	da03      	bge.n	8013714 <_printf_i+0xc8>
 801370c:	232d      	movs	r3, #45	; 0x2d
 801370e:	4276      	negs	r6, r6
 8013710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013714:	485e      	ldr	r0, [pc, #376]	; (8013890 <_printf_i+0x244>)
 8013716:	230a      	movs	r3, #10
 8013718:	e019      	b.n	801374e <_printf_i+0x102>
 801371a:	680e      	ldr	r6, [r1, #0]
 801371c:	602b      	str	r3, [r5, #0]
 801371e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013722:	bf18      	it	ne
 8013724:	b236      	sxthne	r6, r6
 8013726:	e7ef      	b.n	8013708 <_printf_i+0xbc>
 8013728:	682b      	ldr	r3, [r5, #0]
 801372a:	6820      	ldr	r0, [r4, #0]
 801372c:	1d19      	adds	r1, r3, #4
 801372e:	6029      	str	r1, [r5, #0]
 8013730:	0601      	lsls	r1, r0, #24
 8013732:	d501      	bpl.n	8013738 <_printf_i+0xec>
 8013734:	681e      	ldr	r6, [r3, #0]
 8013736:	e002      	b.n	801373e <_printf_i+0xf2>
 8013738:	0646      	lsls	r6, r0, #25
 801373a:	d5fb      	bpl.n	8013734 <_printf_i+0xe8>
 801373c:	881e      	ldrh	r6, [r3, #0]
 801373e:	4854      	ldr	r0, [pc, #336]	; (8013890 <_printf_i+0x244>)
 8013740:	2f6f      	cmp	r7, #111	; 0x6f
 8013742:	bf0c      	ite	eq
 8013744:	2308      	moveq	r3, #8
 8013746:	230a      	movne	r3, #10
 8013748:	2100      	movs	r1, #0
 801374a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801374e:	6865      	ldr	r5, [r4, #4]
 8013750:	60a5      	str	r5, [r4, #8]
 8013752:	2d00      	cmp	r5, #0
 8013754:	bfa2      	ittt	ge
 8013756:	6821      	ldrge	r1, [r4, #0]
 8013758:	f021 0104 	bicge.w	r1, r1, #4
 801375c:	6021      	strge	r1, [r4, #0]
 801375e:	b90e      	cbnz	r6, 8013764 <_printf_i+0x118>
 8013760:	2d00      	cmp	r5, #0
 8013762:	d04d      	beq.n	8013800 <_printf_i+0x1b4>
 8013764:	4615      	mov	r5, r2
 8013766:	fbb6 f1f3 	udiv	r1, r6, r3
 801376a:	fb03 6711 	mls	r7, r3, r1, r6
 801376e:	5dc7      	ldrb	r7, [r0, r7]
 8013770:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013774:	4637      	mov	r7, r6
 8013776:	42bb      	cmp	r3, r7
 8013778:	460e      	mov	r6, r1
 801377a:	d9f4      	bls.n	8013766 <_printf_i+0x11a>
 801377c:	2b08      	cmp	r3, #8
 801377e:	d10b      	bne.n	8013798 <_printf_i+0x14c>
 8013780:	6823      	ldr	r3, [r4, #0]
 8013782:	07de      	lsls	r6, r3, #31
 8013784:	d508      	bpl.n	8013798 <_printf_i+0x14c>
 8013786:	6923      	ldr	r3, [r4, #16]
 8013788:	6861      	ldr	r1, [r4, #4]
 801378a:	4299      	cmp	r1, r3
 801378c:	bfde      	ittt	le
 801378e:	2330      	movle	r3, #48	; 0x30
 8013790:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013794:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013798:	1b52      	subs	r2, r2, r5
 801379a:	6122      	str	r2, [r4, #16]
 801379c:	f8cd a000 	str.w	sl, [sp]
 80137a0:	464b      	mov	r3, r9
 80137a2:	aa03      	add	r2, sp, #12
 80137a4:	4621      	mov	r1, r4
 80137a6:	4640      	mov	r0, r8
 80137a8:	f7ff fee2 	bl	8013570 <_printf_common>
 80137ac:	3001      	adds	r0, #1
 80137ae:	d14c      	bne.n	801384a <_printf_i+0x1fe>
 80137b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80137b4:	b004      	add	sp, #16
 80137b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137ba:	4835      	ldr	r0, [pc, #212]	; (8013890 <_printf_i+0x244>)
 80137bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80137c0:	6829      	ldr	r1, [r5, #0]
 80137c2:	6823      	ldr	r3, [r4, #0]
 80137c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80137c8:	6029      	str	r1, [r5, #0]
 80137ca:	061d      	lsls	r5, r3, #24
 80137cc:	d514      	bpl.n	80137f8 <_printf_i+0x1ac>
 80137ce:	07df      	lsls	r7, r3, #31
 80137d0:	bf44      	itt	mi
 80137d2:	f043 0320 	orrmi.w	r3, r3, #32
 80137d6:	6023      	strmi	r3, [r4, #0]
 80137d8:	b91e      	cbnz	r6, 80137e2 <_printf_i+0x196>
 80137da:	6823      	ldr	r3, [r4, #0]
 80137dc:	f023 0320 	bic.w	r3, r3, #32
 80137e0:	6023      	str	r3, [r4, #0]
 80137e2:	2310      	movs	r3, #16
 80137e4:	e7b0      	b.n	8013748 <_printf_i+0xfc>
 80137e6:	6823      	ldr	r3, [r4, #0]
 80137e8:	f043 0320 	orr.w	r3, r3, #32
 80137ec:	6023      	str	r3, [r4, #0]
 80137ee:	2378      	movs	r3, #120	; 0x78
 80137f0:	4828      	ldr	r0, [pc, #160]	; (8013894 <_printf_i+0x248>)
 80137f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80137f6:	e7e3      	b.n	80137c0 <_printf_i+0x174>
 80137f8:	0659      	lsls	r1, r3, #25
 80137fa:	bf48      	it	mi
 80137fc:	b2b6      	uxthmi	r6, r6
 80137fe:	e7e6      	b.n	80137ce <_printf_i+0x182>
 8013800:	4615      	mov	r5, r2
 8013802:	e7bb      	b.n	801377c <_printf_i+0x130>
 8013804:	682b      	ldr	r3, [r5, #0]
 8013806:	6826      	ldr	r6, [r4, #0]
 8013808:	6961      	ldr	r1, [r4, #20]
 801380a:	1d18      	adds	r0, r3, #4
 801380c:	6028      	str	r0, [r5, #0]
 801380e:	0635      	lsls	r5, r6, #24
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	d501      	bpl.n	8013818 <_printf_i+0x1cc>
 8013814:	6019      	str	r1, [r3, #0]
 8013816:	e002      	b.n	801381e <_printf_i+0x1d2>
 8013818:	0670      	lsls	r0, r6, #25
 801381a:	d5fb      	bpl.n	8013814 <_printf_i+0x1c8>
 801381c:	8019      	strh	r1, [r3, #0]
 801381e:	2300      	movs	r3, #0
 8013820:	6123      	str	r3, [r4, #16]
 8013822:	4615      	mov	r5, r2
 8013824:	e7ba      	b.n	801379c <_printf_i+0x150>
 8013826:	682b      	ldr	r3, [r5, #0]
 8013828:	1d1a      	adds	r2, r3, #4
 801382a:	602a      	str	r2, [r5, #0]
 801382c:	681d      	ldr	r5, [r3, #0]
 801382e:	6862      	ldr	r2, [r4, #4]
 8013830:	2100      	movs	r1, #0
 8013832:	4628      	mov	r0, r5
 8013834:	f7ec fd54 	bl	80002e0 <memchr>
 8013838:	b108      	cbz	r0, 801383e <_printf_i+0x1f2>
 801383a:	1b40      	subs	r0, r0, r5
 801383c:	6060      	str	r0, [r4, #4]
 801383e:	6863      	ldr	r3, [r4, #4]
 8013840:	6123      	str	r3, [r4, #16]
 8013842:	2300      	movs	r3, #0
 8013844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013848:	e7a8      	b.n	801379c <_printf_i+0x150>
 801384a:	6923      	ldr	r3, [r4, #16]
 801384c:	462a      	mov	r2, r5
 801384e:	4649      	mov	r1, r9
 8013850:	4640      	mov	r0, r8
 8013852:	47d0      	blx	sl
 8013854:	3001      	adds	r0, #1
 8013856:	d0ab      	beq.n	80137b0 <_printf_i+0x164>
 8013858:	6823      	ldr	r3, [r4, #0]
 801385a:	079b      	lsls	r3, r3, #30
 801385c:	d413      	bmi.n	8013886 <_printf_i+0x23a>
 801385e:	68e0      	ldr	r0, [r4, #12]
 8013860:	9b03      	ldr	r3, [sp, #12]
 8013862:	4298      	cmp	r0, r3
 8013864:	bfb8      	it	lt
 8013866:	4618      	movlt	r0, r3
 8013868:	e7a4      	b.n	80137b4 <_printf_i+0x168>
 801386a:	2301      	movs	r3, #1
 801386c:	4632      	mov	r2, r6
 801386e:	4649      	mov	r1, r9
 8013870:	4640      	mov	r0, r8
 8013872:	47d0      	blx	sl
 8013874:	3001      	adds	r0, #1
 8013876:	d09b      	beq.n	80137b0 <_printf_i+0x164>
 8013878:	3501      	adds	r5, #1
 801387a:	68e3      	ldr	r3, [r4, #12]
 801387c:	9903      	ldr	r1, [sp, #12]
 801387e:	1a5b      	subs	r3, r3, r1
 8013880:	42ab      	cmp	r3, r5
 8013882:	dcf2      	bgt.n	801386a <_printf_i+0x21e>
 8013884:	e7eb      	b.n	801385e <_printf_i+0x212>
 8013886:	2500      	movs	r5, #0
 8013888:	f104 0619 	add.w	r6, r4, #25
 801388c:	e7f5      	b.n	801387a <_printf_i+0x22e>
 801388e:	bf00      	nop
 8013890:	08013e25 	.word	0x08013e25
 8013894:	08013e36 	.word	0x08013e36

08013898 <_putc_r>:
 8013898:	b570      	push	{r4, r5, r6, lr}
 801389a:	460d      	mov	r5, r1
 801389c:	4614      	mov	r4, r2
 801389e:	4606      	mov	r6, r0
 80138a0:	b118      	cbz	r0, 80138aa <_putc_r+0x12>
 80138a2:	6983      	ldr	r3, [r0, #24]
 80138a4:	b90b      	cbnz	r3, 80138aa <_putc_r+0x12>
 80138a6:	f7ff fbf7 	bl	8013098 <__sinit>
 80138aa:	4b1c      	ldr	r3, [pc, #112]	; (801391c <_putc_r+0x84>)
 80138ac:	429c      	cmp	r4, r3
 80138ae:	d124      	bne.n	80138fa <_putc_r+0x62>
 80138b0:	6874      	ldr	r4, [r6, #4]
 80138b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80138b4:	07d8      	lsls	r0, r3, #31
 80138b6:	d405      	bmi.n	80138c4 <_putc_r+0x2c>
 80138b8:	89a3      	ldrh	r3, [r4, #12]
 80138ba:	0599      	lsls	r1, r3, #22
 80138bc:	d402      	bmi.n	80138c4 <_putc_r+0x2c>
 80138be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80138c0:	f7ff fc88 	bl	80131d4 <__retarget_lock_acquire_recursive>
 80138c4:	68a3      	ldr	r3, [r4, #8]
 80138c6:	3b01      	subs	r3, #1
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	60a3      	str	r3, [r4, #8]
 80138cc:	da05      	bge.n	80138da <_putc_r+0x42>
 80138ce:	69a2      	ldr	r2, [r4, #24]
 80138d0:	4293      	cmp	r3, r2
 80138d2:	db1c      	blt.n	801390e <_putc_r+0x76>
 80138d4:	b2eb      	uxtb	r3, r5
 80138d6:	2b0a      	cmp	r3, #10
 80138d8:	d019      	beq.n	801390e <_putc_r+0x76>
 80138da:	6823      	ldr	r3, [r4, #0]
 80138dc:	1c5a      	adds	r2, r3, #1
 80138de:	6022      	str	r2, [r4, #0]
 80138e0:	701d      	strb	r5, [r3, #0]
 80138e2:	b2ed      	uxtb	r5, r5
 80138e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80138e6:	07da      	lsls	r2, r3, #31
 80138e8:	d405      	bmi.n	80138f6 <_putc_r+0x5e>
 80138ea:	89a3      	ldrh	r3, [r4, #12]
 80138ec:	059b      	lsls	r3, r3, #22
 80138ee:	d402      	bmi.n	80138f6 <_putc_r+0x5e>
 80138f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80138f2:	f7ff fc70 	bl	80131d6 <__retarget_lock_release_recursive>
 80138f6:	4628      	mov	r0, r5
 80138f8:	bd70      	pop	{r4, r5, r6, pc}
 80138fa:	4b09      	ldr	r3, [pc, #36]	; (8013920 <_putc_r+0x88>)
 80138fc:	429c      	cmp	r4, r3
 80138fe:	d101      	bne.n	8013904 <_putc_r+0x6c>
 8013900:	68b4      	ldr	r4, [r6, #8]
 8013902:	e7d6      	b.n	80138b2 <_putc_r+0x1a>
 8013904:	4b07      	ldr	r3, [pc, #28]	; (8013924 <_putc_r+0x8c>)
 8013906:	429c      	cmp	r4, r3
 8013908:	bf08      	it	eq
 801390a:	68f4      	ldreq	r4, [r6, #12]
 801390c:	e7d1      	b.n	80138b2 <_putc_r+0x1a>
 801390e:	4629      	mov	r1, r5
 8013910:	4622      	mov	r2, r4
 8013912:	4630      	mov	r0, r6
 8013914:	f7ff f9e6 	bl	8012ce4 <__swbuf_r>
 8013918:	4605      	mov	r5, r0
 801391a:	e7e3      	b.n	80138e4 <_putc_r+0x4c>
 801391c:	08013dd4 	.word	0x08013dd4
 8013920:	08013df4 	.word	0x08013df4
 8013924:	08013db4 	.word	0x08013db4

08013928 <__sread>:
 8013928:	b510      	push	{r4, lr}
 801392a:	460c      	mov	r4, r1
 801392c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013930:	f000 f894 	bl	8013a5c <_read_r>
 8013934:	2800      	cmp	r0, #0
 8013936:	bfab      	itete	ge
 8013938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801393a:	89a3      	ldrhlt	r3, [r4, #12]
 801393c:	181b      	addge	r3, r3, r0
 801393e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013942:	bfac      	ite	ge
 8013944:	6563      	strge	r3, [r4, #84]	; 0x54
 8013946:	81a3      	strhlt	r3, [r4, #12]
 8013948:	bd10      	pop	{r4, pc}

0801394a <__swrite>:
 801394a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801394e:	461f      	mov	r7, r3
 8013950:	898b      	ldrh	r3, [r1, #12]
 8013952:	05db      	lsls	r3, r3, #23
 8013954:	4605      	mov	r5, r0
 8013956:	460c      	mov	r4, r1
 8013958:	4616      	mov	r6, r2
 801395a:	d505      	bpl.n	8013968 <__swrite+0x1e>
 801395c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013960:	2302      	movs	r3, #2
 8013962:	2200      	movs	r2, #0
 8013964:	f000 f868 	bl	8013a38 <_lseek_r>
 8013968:	89a3      	ldrh	r3, [r4, #12]
 801396a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801396e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013972:	81a3      	strh	r3, [r4, #12]
 8013974:	4632      	mov	r2, r6
 8013976:	463b      	mov	r3, r7
 8013978:	4628      	mov	r0, r5
 801397a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801397e:	f000 b817 	b.w	80139b0 <_write_r>

08013982 <__sseek>:
 8013982:	b510      	push	{r4, lr}
 8013984:	460c      	mov	r4, r1
 8013986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801398a:	f000 f855 	bl	8013a38 <_lseek_r>
 801398e:	1c43      	adds	r3, r0, #1
 8013990:	89a3      	ldrh	r3, [r4, #12]
 8013992:	bf15      	itete	ne
 8013994:	6560      	strne	r0, [r4, #84]	; 0x54
 8013996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801399a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801399e:	81a3      	strheq	r3, [r4, #12]
 80139a0:	bf18      	it	ne
 80139a2:	81a3      	strhne	r3, [r4, #12]
 80139a4:	bd10      	pop	{r4, pc}

080139a6 <__sclose>:
 80139a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139aa:	f000 b813 	b.w	80139d4 <_close_r>
	...

080139b0 <_write_r>:
 80139b0:	b538      	push	{r3, r4, r5, lr}
 80139b2:	4d07      	ldr	r5, [pc, #28]	; (80139d0 <_write_r+0x20>)
 80139b4:	4604      	mov	r4, r0
 80139b6:	4608      	mov	r0, r1
 80139b8:	4611      	mov	r1, r2
 80139ba:	2200      	movs	r2, #0
 80139bc:	602a      	str	r2, [r5, #0]
 80139be:	461a      	mov	r2, r3
 80139c0:	f7ee fdb5 	bl	800252e <_write>
 80139c4:	1c43      	adds	r3, r0, #1
 80139c6:	d102      	bne.n	80139ce <_write_r+0x1e>
 80139c8:	682b      	ldr	r3, [r5, #0]
 80139ca:	b103      	cbz	r3, 80139ce <_write_r+0x1e>
 80139cc:	6023      	str	r3, [r4, #0]
 80139ce:	bd38      	pop	{r3, r4, r5, pc}
 80139d0:	24004f98 	.word	0x24004f98

080139d4 <_close_r>:
 80139d4:	b538      	push	{r3, r4, r5, lr}
 80139d6:	4d06      	ldr	r5, [pc, #24]	; (80139f0 <_close_r+0x1c>)
 80139d8:	2300      	movs	r3, #0
 80139da:	4604      	mov	r4, r0
 80139dc:	4608      	mov	r0, r1
 80139de:	602b      	str	r3, [r5, #0]
 80139e0:	f7ee fdc1 	bl	8002566 <_close>
 80139e4:	1c43      	adds	r3, r0, #1
 80139e6:	d102      	bne.n	80139ee <_close_r+0x1a>
 80139e8:	682b      	ldr	r3, [r5, #0]
 80139ea:	b103      	cbz	r3, 80139ee <_close_r+0x1a>
 80139ec:	6023      	str	r3, [r4, #0]
 80139ee:	bd38      	pop	{r3, r4, r5, pc}
 80139f0:	24004f98 	.word	0x24004f98

080139f4 <_fstat_r>:
 80139f4:	b538      	push	{r3, r4, r5, lr}
 80139f6:	4d07      	ldr	r5, [pc, #28]	; (8013a14 <_fstat_r+0x20>)
 80139f8:	2300      	movs	r3, #0
 80139fa:	4604      	mov	r4, r0
 80139fc:	4608      	mov	r0, r1
 80139fe:	4611      	mov	r1, r2
 8013a00:	602b      	str	r3, [r5, #0]
 8013a02:	f7ee fdbc 	bl	800257e <_fstat>
 8013a06:	1c43      	adds	r3, r0, #1
 8013a08:	d102      	bne.n	8013a10 <_fstat_r+0x1c>
 8013a0a:	682b      	ldr	r3, [r5, #0]
 8013a0c:	b103      	cbz	r3, 8013a10 <_fstat_r+0x1c>
 8013a0e:	6023      	str	r3, [r4, #0]
 8013a10:	bd38      	pop	{r3, r4, r5, pc}
 8013a12:	bf00      	nop
 8013a14:	24004f98 	.word	0x24004f98

08013a18 <_isatty_r>:
 8013a18:	b538      	push	{r3, r4, r5, lr}
 8013a1a:	4d06      	ldr	r5, [pc, #24]	; (8013a34 <_isatty_r+0x1c>)
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	4604      	mov	r4, r0
 8013a20:	4608      	mov	r0, r1
 8013a22:	602b      	str	r3, [r5, #0]
 8013a24:	f7ee fdbb 	bl	800259e <_isatty>
 8013a28:	1c43      	adds	r3, r0, #1
 8013a2a:	d102      	bne.n	8013a32 <_isatty_r+0x1a>
 8013a2c:	682b      	ldr	r3, [r5, #0]
 8013a2e:	b103      	cbz	r3, 8013a32 <_isatty_r+0x1a>
 8013a30:	6023      	str	r3, [r4, #0]
 8013a32:	bd38      	pop	{r3, r4, r5, pc}
 8013a34:	24004f98 	.word	0x24004f98

08013a38 <_lseek_r>:
 8013a38:	b538      	push	{r3, r4, r5, lr}
 8013a3a:	4d07      	ldr	r5, [pc, #28]	; (8013a58 <_lseek_r+0x20>)
 8013a3c:	4604      	mov	r4, r0
 8013a3e:	4608      	mov	r0, r1
 8013a40:	4611      	mov	r1, r2
 8013a42:	2200      	movs	r2, #0
 8013a44:	602a      	str	r2, [r5, #0]
 8013a46:	461a      	mov	r2, r3
 8013a48:	f7ee fdb4 	bl	80025b4 <_lseek>
 8013a4c:	1c43      	adds	r3, r0, #1
 8013a4e:	d102      	bne.n	8013a56 <_lseek_r+0x1e>
 8013a50:	682b      	ldr	r3, [r5, #0]
 8013a52:	b103      	cbz	r3, 8013a56 <_lseek_r+0x1e>
 8013a54:	6023      	str	r3, [r4, #0]
 8013a56:	bd38      	pop	{r3, r4, r5, pc}
 8013a58:	24004f98 	.word	0x24004f98

08013a5c <_read_r>:
 8013a5c:	b538      	push	{r3, r4, r5, lr}
 8013a5e:	4d07      	ldr	r5, [pc, #28]	; (8013a7c <_read_r+0x20>)
 8013a60:	4604      	mov	r4, r0
 8013a62:	4608      	mov	r0, r1
 8013a64:	4611      	mov	r1, r2
 8013a66:	2200      	movs	r2, #0
 8013a68:	602a      	str	r2, [r5, #0]
 8013a6a:	461a      	mov	r2, r3
 8013a6c:	f7ee fd42 	bl	80024f4 <_read>
 8013a70:	1c43      	adds	r3, r0, #1
 8013a72:	d102      	bne.n	8013a7a <_read_r+0x1e>
 8013a74:	682b      	ldr	r3, [r5, #0]
 8013a76:	b103      	cbz	r3, 8013a7a <_read_r+0x1e>
 8013a78:	6023      	str	r3, [r4, #0]
 8013a7a:	bd38      	pop	{r3, r4, r5, pc}
 8013a7c:	24004f98 	.word	0x24004f98

08013a80 <_init>:
 8013a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a82:	bf00      	nop
 8013a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a86:	bc08      	pop	{r3}
 8013a88:	469e      	mov	lr, r3
 8013a8a:	4770      	bx	lr

08013a8c <_fini>:
 8013a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a8e:	bf00      	nop
 8013a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a92:	bc08      	pop	{r3}
 8013a94:	469e      	mov	lr, r3
 8013a96:	4770      	bx	lr
