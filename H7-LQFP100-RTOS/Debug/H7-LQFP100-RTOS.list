
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a7c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0801aa60  0801aa60  0002aa60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801aef8  0801aef8  0002aef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801af00  0801af00  0002af00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801af04  0801af04  0002af04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000138  24000000  0801af08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000683c  24000140  0801b040  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  2400697c  0801b040  0003697c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 10 .debug_info   00040c69  00000000  00000000  00030166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007cc3  00000000  00000000  00070dcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bb8  00000000  00000000  00078a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002870  00000000  00000000  0007b650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00046837  00000000  00000000  0007dec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00043289  00000000  00000000  000c46f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00196ac2  00000000  00000000  00107980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0029e442  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bce4  00000000  00000000  0029e494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801aa48 	.word	0x0801aa48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	0801aa48 	.word	0x0801aa48

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f005 fc95 	bl	8005f98 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 f976 	bl	8003964 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f006 fdb0 	bl	80071e8 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 f969 	bl	8003964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f005 fef3 	bl	80064a0 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 f950 	bl	8003964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f005 fee5 	bl	80064a0 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 f942 	bl	8003964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f005 fed7 	bl	80064a0 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 f934 	bl	8003964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f005 fec9 	bl	80064a0 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 f926 	bl	8003964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f005 feba 	bl	80064a0 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 f917 	bl	8003964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f005 feab 	bl	80064a0 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 f908 	bl	8003964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f005 fe9c 	bl	80064a0 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 f8f9 	bl	8003964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f005 fe8d 	bl	80064a0 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 f8ea 	bl	8003964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f005 fe7e 	bl	80064a0 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 f8db 	bl	8003964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f005 fe6f 	bl	80064a0 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 f8cc 	bl	8003964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f005 fe60 	bl	80064a0 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 f8bd 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f005 fb7d 	bl	8005f98 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f003 f85e 	bl	8003964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f005 fde8 	bl	80064a0 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f003 f845 	bl	8003964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f005 fdda 	bl	80064a0 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f003 f837 	bl	8003964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f005 fdcc 	bl	80064a0 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f003 f829 	bl	8003964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f005 fdbe 	bl	80064a0 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f003 f81b 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00a fae8 	bl	800afd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00a fadc 	bl	800afd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00a fad0 	bl	800afd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f007 f97b 	bl	8007d70 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f002 ff70 	bl	8003964 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f005 f836 	bl	8005b50 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f005 f830 	bl	8005b50 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f007 f91b 	bl	8007d70 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f002 ff10 	bl	8003964 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f019 fa55 	bl	801a03c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f006 fce3 	bl	8007564 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f002 fede 	bl	8003964 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f006 fefe 	bl	80079c4 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f002 fec9 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00a f9bb 	bl	800afd0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f007 f866 	bl	8007d70 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f002 fe5b 	bl	8003964 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f006 fc28 	bl	8007514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f006 fc3f 	bl	8007548 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f006 fbff 	bl	8007514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f006 fc16 	bl	8007548 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f006 fbf7 	bl	8007514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f006 fc0e 	bl	8007548 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f006 fbef 	bl	8007514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f006 fc06 	bl	8007548 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f006 fbe7 	bl	8007514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f006 fbfe 	bl	8007548 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f006 fbdf 	bl	8007514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f006 fbf6 	bl	8007548 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f006 fbd7 	bl	8007514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f006 fbee 	bl	8007548 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f006 fbcf 	bl	8007514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f006 fbe6 	bl	8007548 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f006 fbc7 	bl	8007514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f006 fbde 	bl	8007548 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f019 f936 	bl	801a03c <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f009 ff3e 	bl	800acec <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f009 fee3 	bl	800acec <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f009 fd30 	bl	800aa1c <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	240003a0 	.word	0x240003a0
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1c      	cmp	r3, #28
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f009 fc84 	bl	800aa1c <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 fd90 	bl	800acec <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f009 fd2d 	bl	800acec <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f009 fb7a 	bl	800aa1c <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f009 fc58 	bl	800acec <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1c      	cmp	r3, #28
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f009 fa63 	bl	800aa1c <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f009 fb70 	bl	800acec <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	240003a0 	.word	0x240003a0
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f018 fc22 	bl	801a03c <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fa4b 	bl	800acec <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f009 f899 	bl	800aa1c <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f009 f9ad 	bl	800acec <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f018 fabd 	bl	801a03c <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f018 fab4 	bl	801a03c <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f008 ff65 	bl	800aa1c <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f008 ff52 	bl	800aa1c <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f018 f9ff 	bl	801a03c <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f018 f9f8 	bl	801a03c <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f008 feab 	bl	800aa1c <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1c      	cmp	r3, #28
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f008 fec3 	bl	800ab40 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f008 ff6b 	bl	800acec <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 fdb7 	bl	800aa1c <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	240003a0 	.word	0x240003a0
 8001f2c:	52002000 	.word	0x52002000

08001f30 <handle_error>:
uint16_t VirtAddVarTab[NB_OF_VAR] = {0x5550, 0x5551, 0x5552, 0x5553, 0x5554, 0x5555, 0x5556, 0x5557, 0x5558, 0x5559, 0x555A, 0x555B, 0x555C, 0x555D, 0x555E, 0x555F, 0x6660, 0x6661, 0x6662, 0x6663, 0x6664, 0x6665, 0x6666, 0x6667, 0x6668, 0x6669, 0x666A, 0x666B, 0x666C};
uint16_t VarDataTab[NB_OF_VAR] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

uint16_t local_cpy[NUM_ERROR_COUNTERS];

void handle_error(ERROR_STRUCT error) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	80b8      	strh	r0, [r7, #4]

	increment_error_counter(error);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f83b 	bl	8001fb4 <increment_error_counter>
	set_previous_error(error);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f89c 	bl	800207c <set_previous_error>
	send_current_error_packet(error);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 fa45 	bl	80023d4 <send_current_error_packet>
//		increment_error_counter(error);
//		break;
//	default:
//		break;
//	}
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <error_counter_init>:

void error_counter_init() {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
	// Starting up EEPROM Emulator
	HAL_FLASH_Unlock();
 8001f5a:	f008 fdf1 	bl	800ab40 <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 8001f5e:	f7fe ff1b 	bl	8000d98 <EE_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <error_counter_init+0x18>
		Error_Handler();
 8001f68:	f001 fcfc 	bl	8003964 <Error_Handler>
	}

	// Updating our local copy of error counters from EE
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	e013      	b.n	8001f9a <error_counter_init+0x46>
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK) {
 8001f72:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <error_counter_init+0x58>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	490c      	ldr	r1, [pc, #48]	; (8001fb0 <error_counter_init+0x5c>)
 8001f80:	440b      	add	r3, r1
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f7ff fbbf 	bl	8001708 <EE_ReadVariable>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <error_counter_init+0x40>
			Error_Handler();
 8001f90:	f001 fce8 	bl	8003964 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3301      	adds	r3, #1
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b1a      	cmp	r3, #26
 8001f9e:	dde8      	ble.n	8001f72 <error_counter_init+0x1e>
		}
	}
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	24000000 	.word	0x24000000
 8001fb0:	240003a4 	.word	0x240003a4

08001fb4 <increment_error_counter>:


void increment_error_counter(ERROR_STRUCT error) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	80b8      	strh	r0, [r7, #4]
	local_cpy[error.category]++;
 8001fbc:	793b      	ldrb	r3, [r7, #4]
 8001fbe:	4a0b      	ldr	r2, [pc, #44]	; (8001fec <increment_error_counter+0x38>)
 8001fc0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fc4:	3201      	adds	r2, #1
 8001fc6:	b291      	uxth	r1, r2
 8001fc8:	4a08      	ldr	r2, [pc, #32]	; (8001fec <increment_error_counter+0x38>)
 8001fca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 8001fce:	797b      	ldrb	r3, [r7, #5]
 8001fd0:	4a06      	ldr	r2, [pc, #24]	; (8001fec <increment_error_counter+0x38>)
 8001fd2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001fd6:	3201      	adds	r2, #1
 8001fd8:	b291      	uxth	r1, r2
 8001fda:	4a04      	ldr	r2, [pc, #16]	; (8001fec <increment_error_counter+0x38>)
 8001fdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	update_error_counter();
 8001fe0:	f000 f806 	bl	8001ff0 <update_error_counter>
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	240003a4 	.word	0x240003a4

08001ff0 <update_error_counter>:




void update_error_counter(){
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
	// Writes our local copy of the error counters to EE
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	e013      	b.n	8002024 <update_error_counter+0x34>
		if ((EE_WriteVariable(VirtAddVarTab[i], local_cpy[i])) != HAL_OK) {
 8001ffc:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <update_error_counter+0x44>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002004:	490c      	ldr	r1, [pc, #48]	; (8002038 <update_error_counter+0x48>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800200c:	4619      	mov	r1, r3
 800200e:	4610      	mov	r0, r2
 8002010:	f7ff fbc2 	bl	8001798 <EE_WriteVariable>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <update_error_counter+0x2e>
			Error_Handler();
 800201a:	f001 fca3 	bl	8003964 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3301      	adds	r3, #1
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b1a      	cmp	r3, #26
 8002028:	dde8      	ble.n	8001ffc <update_error_counter+0xc>
		}
	}
}
 800202a:	bf00      	nop
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	24000000 	.word	0x24000000
 8002038:	240003a4 	.word	0x240003a4

0800203c <reset_error_counters>:


void reset_error_counters() {
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
	// Resets all error counters to 0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	e00f      	b.n	8002068 <reset_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK) {
 8002048:	4a0b      	ldr	r2, [pc, #44]	; (8002078 <reset_error_counters+0x3c>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fba0 	bl	8001798 <EE_WriteVariable>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <reset_error_counters+0x26>
			Error_Handler();
 800205e:	f001 fc81 	bl	8003964 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3301      	adds	r3, #1
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b1a      	cmp	r3, #26
 800206c:	ddec      	ble.n	8002048 <reset_error_counters+0xc>
		}
	}
}
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	24000000 	.word	0x24000000

0800207c <set_previous_error>:
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], 0xFF)) != HAL_OK) {
		Error_Handler();
	}
}

void set_previous_error(ERROR_STRUCT error) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	80b8      	strh	r0, [r7, #4]
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], error.category)) != HAL_OK) {
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <set_previous_error+0x44>)
 8002086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002088:	793a      	ldrb	r2, [r7, #4]
 800208a:	b292      	uxth	r2, r2
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fb82 	bl	8001798 <EE_WriteVariable>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <set_previous_error+0x22>
		Error_Handler();
 800209a:	f001 fc63 	bl	8003964 <Error_Handler>
	}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], error.detail)) != HAL_OK) {
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <set_previous_error+0x44>)
 80020a0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80020a2:	797a      	ldrb	r2, [r7, #5]
 80020a4:	b292      	uxth	r2, r2
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fb75 	bl	8001798 <EE_WriteVariable>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <set_previous_error+0x3c>
		Error_Handler();
 80020b4:	f001 fc56 	bl	8003964 <Error_Handler>
	}
}
 80020b8:	bf00      	nop
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	24000000 	.word	0x24000000

080020c4 <get_previous_error>:

ERROR_STRUCT get_previous_error() {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint16_t category;
	uint16_t detail;

	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], &category)) != HAL_OK) {
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <get_previous_error+0x5c>)
 80020cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ce:	1dba      	adds	r2, r7, #6
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fb18 	bl	8001708 <EE_ReadVariable>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <get_previous_error+0x1e>
		Error_Handler();
 80020de:	f001 fc41 	bl	8003964 <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], &detail)) != HAL_OK) {
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <get_previous_error+0x5c>)
 80020e4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80020e6:	1d3a      	adds	r2, r7, #4
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fb0c 	bl	8001708 <EE_ReadVariable>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <get_previous_error+0x36>
		Error_Handler();
 80020f6:	f001 fc35 	bl	8003964 <Error_Handler>
	}
	prev_error.category = category;
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	723b      	strb	r3, [r7, #8]
	prev_error.detail = detail;
 8002100:	88bb      	ldrh	r3, [r7, #4]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	727b      	strb	r3, [r7, #9]

	return prev_error;
 8002106:	893b      	ldrh	r3, [r7, #8]
 8002108:	81bb      	strh	r3, [r7, #12]
 800210a:	2300      	movs	r3, #0
 800210c:	7b3a      	ldrb	r2, [r7, #12]
 800210e:	f362 0307 	bfi	r3, r2, #0, #8
 8002112:	7b7a      	ldrb	r2, [r7, #13]
 8002114:	f362 230f 	bfi	r3, r2, #8, #8
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	24000000 	.word	0x24000000

08002124 <send_error_counter_packet>:

void send_error_counter_packet() {
 8002124:	b580      	push	{r7, lr}
 8002126:	b08e      	sub	sp, #56	; 0x38
 8002128:	af00      	add	r7, sp, #0
	uint8_t buffer[ERROR_COUNTER_PACKET_SIZE];

	buffer[0] = ERROR_COUNTER_PACKET_SYNC;
 800212a:	23cc      	movs	r3, #204	; 0xcc
 800212c:	703b      	strb	r3, [r7, #0]
	buffer[1] = ERROR_COUNTER_PACKET_SYNC;
 800212e:	23cc      	movs	r3, #204	; 0xcc
 8002130:	707b      	strb	r3, [r7, #1]
	buffer[2] = ((local_cpy[0] & 0xFF00) >> 8);
 8002132:	4b98      	ldr	r3, [pc, #608]	; (8002394 <send_error_counter_packet+0x270>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	b29b      	uxth	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	70bb      	strb	r3, [r7, #2]
	buffer[3] = (local_cpy[0] & 0xFF);
 800213e:	4b95      	ldr	r3, [pc, #596]	; (8002394 <send_error_counter_packet+0x270>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	70fb      	strb	r3, [r7, #3]
	buffer[4] = ((local_cpy[1] & 0xFF00) >> 8);
 8002146:	4b93      	ldr	r3, [pc, #588]	; (8002394 <send_error_counter_packet+0x270>)
 8002148:	885b      	ldrh	r3, [r3, #2]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	b29b      	uxth	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	713b      	strb	r3, [r7, #4]
	buffer[5] = (local_cpy[1] & 0xFF);
 8002152:	4b90      	ldr	r3, [pc, #576]	; (8002394 <send_error_counter_packet+0x270>)
 8002154:	885b      	ldrh	r3, [r3, #2]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	717b      	strb	r3, [r7, #5]
	buffer[6] = ((local_cpy[2] & 0xFF00) >> 8);
 800215a:	4b8e      	ldr	r3, [pc, #568]	; (8002394 <send_error_counter_packet+0x270>)
 800215c:	889b      	ldrh	r3, [r3, #4]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	b29b      	uxth	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	71bb      	strb	r3, [r7, #6]
	buffer[7] = (local_cpy[2] & 0xFF);
 8002166:	4b8b      	ldr	r3, [pc, #556]	; (8002394 <send_error_counter_packet+0x270>)
 8002168:	889b      	ldrh	r3, [r3, #4]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	71fb      	strb	r3, [r7, #7]
	buffer[8] = ((local_cpy[3] & 0xFF00) >> 8);
 800216e:	4b89      	ldr	r3, [pc, #548]	; (8002394 <send_error_counter_packet+0x270>)
 8002170:	88db      	ldrh	r3, [r3, #6]
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	b29b      	uxth	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	723b      	strb	r3, [r7, #8]
	buffer[9] = (local_cpy[3] & 0xFF);
 800217a:	4b86      	ldr	r3, [pc, #536]	; (8002394 <send_error_counter_packet+0x270>)
 800217c:	88db      	ldrh	r3, [r3, #6]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	727b      	strb	r3, [r7, #9]
	buffer[10] = ((local_cpy[4] & 0xFF00) >> 8);
 8002182:	4b84      	ldr	r3, [pc, #528]	; (8002394 <send_error_counter_packet+0x270>)
 8002184:	891b      	ldrh	r3, [r3, #8]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	b29b      	uxth	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	72bb      	strb	r3, [r7, #10]
	buffer[11] = (local_cpy[4] & 0xFF);
 800218e:	4b81      	ldr	r3, [pc, #516]	; (8002394 <send_error_counter_packet+0x270>)
 8002190:	891b      	ldrh	r3, [r3, #8]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	72fb      	strb	r3, [r7, #11]
	buffer[12] = ((local_cpy[5] & 0xFF00) >> 8);
 8002196:	4b7f      	ldr	r3, [pc, #508]	; (8002394 <send_error_counter_packet+0x270>)
 8002198:	895b      	ldrh	r3, [r3, #10]
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	b29b      	uxth	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	733b      	strb	r3, [r7, #12]
	buffer[13] = (local_cpy[5] & 0xFF);
 80021a2:	4b7c      	ldr	r3, [pc, #496]	; (8002394 <send_error_counter_packet+0x270>)
 80021a4:	895b      	ldrh	r3, [r3, #10]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	737b      	strb	r3, [r7, #13]
	buffer[14] = ((local_cpy[6] & 0xFF00) >> 8);
 80021aa:	4b7a      	ldr	r3, [pc, #488]	; (8002394 <send_error_counter_packet+0x270>)
 80021ac:	899b      	ldrh	r3, [r3, #12]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	73bb      	strb	r3, [r7, #14]
	buffer[15] = (local_cpy[6] & 0xFF);
 80021b6:	4b77      	ldr	r3, [pc, #476]	; (8002394 <send_error_counter_packet+0x270>)
 80021b8:	899b      	ldrh	r3, [r3, #12]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	73fb      	strb	r3, [r7, #15]
	buffer[16] = ((local_cpy[7] & 0xFF00) >> 8);
 80021be:	4b75      	ldr	r3, [pc, #468]	; (8002394 <send_error_counter_packet+0x270>)
 80021c0:	89db      	ldrh	r3, [r3, #14]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	743b      	strb	r3, [r7, #16]
	buffer[17] = (local_cpy[7] & 0xFF);
 80021ca:	4b72      	ldr	r3, [pc, #456]	; (8002394 <send_error_counter_packet+0x270>)
 80021cc:	89db      	ldrh	r3, [r3, #14]
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	747b      	strb	r3, [r7, #17]
	buffer[18] = ((local_cpy[8] & 0xFF00) >> 8);
 80021d2:	4b70      	ldr	r3, [pc, #448]	; (8002394 <send_error_counter_packet+0x270>)
 80021d4:	8a1b      	ldrh	r3, [r3, #16]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	b29b      	uxth	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	74bb      	strb	r3, [r7, #18]
	buffer[19] = (local_cpy[8] & 0xFF);
 80021de:	4b6d      	ldr	r3, [pc, #436]	; (8002394 <send_error_counter_packet+0x270>)
 80021e0:	8a1b      	ldrh	r3, [r3, #16]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	74fb      	strb	r3, [r7, #19]
	buffer[20] = ((local_cpy[9] & 0xFF00) >> 8);
 80021e6:	4b6b      	ldr	r3, [pc, #428]	; (8002394 <send_error_counter_packet+0x270>)
 80021e8:	8a5b      	ldrh	r3, [r3, #18]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	753b      	strb	r3, [r7, #20]
	buffer[21] = (local_cpy[9] & 0xFF);
 80021f2:	4b68      	ldr	r3, [pc, #416]	; (8002394 <send_error_counter_packet+0x270>)
 80021f4:	8a5b      	ldrh	r3, [r3, #18]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	757b      	strb	r3, [r7, #21]
	buffer[22] = ((local_cpy[10] & 0xFF00) >> 8);
 80021fa:	4b66      	ldr	r3, [pc, #408]	; (8002394 <send_error_counter_packet+0x270>)
 80021fc:	8a9b      	ldrh	r3, [r3, #20]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	b29b      	uxth	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	75bb      	strb	r3, [r7, #22]
	buffer[23] = (local_cpy[10] & 0xFF);
 8002206:	4b63      	ldr	r3, [pc, #396]	; (8002394 <send_error_counter_packet+0x270>)
 8002208:	8a9b      	ldrh	r3, [r3, #20]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	75fb      	strb	r3, [r7, #23]
	buffer[24] = ((local_cpy[11] & 0xFF00) >> 8);
 800220e:	4b61      	ldr	r3, [pc, #388]	; (8002394 <send_error_counter_packet+0x270>)
 8002210:	8adb      	ldrh	r3, [r3, #22]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	b29b      	uxth	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	763b      	strb	r3, [r7, #24]
	buffer[25] = (local_cpy[11] & 0xFF);
 800221a:	4b5e      	ldr	r3, [pc, #376]	; (8002394 <send_error_counter_packet+0x270>)
 800221c:	8adb      	ldrh	r3, [r3, #22]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	767b      	strb	r3, [r7, #25]
	buffer[26] = ((local_cpy[12] & 0xFF00) >> 8);
 8002222:	4b5c      	ldr	r3, [pc, #368]	; (8002394 <send_error_counter_packet+0x270>)
 8002224:	8b1b      	ldrh	r3, [r3, #24]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	b29b      	uxth	r3, r3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	76bb      	strb	r3, [r7, #26]
	buffer[27] = (local_cpy[12] & 0xFF);
 800222e:	4b59      	ldr	r3, [pc, #356]	; (8002394 <send_error_counter_packet+0x270>)
 8002230:	8b1b      	ldrh	r3, [r3, #24]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	76fb      	strb	r3, [r7, #27]
	buffer[28] = ((local_cpy[13] & 0xFF00) >> 8);
 8002236:	4b57      	ldr	r3, [pc, #348]	; (8002394 <send_error_counter_packet+0x270>)
 8002238:	8b5b      	ldrh	r3, [r3, #26]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	b29b      	uxth	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	773b      	strb	r3, [r7, #28]
	buffer[29] = (local_cpy[13] & 0xFF);
 8002242:	4b54      	ldr	r3, [pc, #336]	; (8002394 <send_error_counter_packet+0x270>)
 8002244:	8b5b      	ldrh	r3, [r3, #26]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	777b      	strb	r3, [r7, #29]
	buffer[30] = ((local_cpy[14] & 0xFF00) >> 8);
 800224a:	4b52      	ldr	r3, [pc, #328]	; (8002394 <send_error_counter_packet+0x270>)
 800224c:	8b9b      	ldrh	r3, [r3, #28]
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	b29b      	uxth	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	77bb      	strb	r3, [r7, #30]
	buffer[31] = (local_cpy[14] & 0xFF);
 8002256:	4b4f      	ldr	r3, [pc, #316]	; (8002394 <send_error_counter_packet+0x270>)
 8002258:	8b9b      	ldrh	r3, [r3, #28]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	77fb      	strb	r3, [r7, #31]
	buffer[32] = ((local_cpy[15] & 0xFF00) >> 8);
 800225e:	4b4d      	ldr	r3, [pc, #308]	; (8002394 <send_error_counter_packet+0x270>)
 8002260:	8bdb      	ldrh	r3, [r3, #30]
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	b29b      	uxth	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[33] = (local_cpy[15] & 0xFF);
 800226c:	4b49      	ldr	r3, [pc, #292]	; (8002394 <send_error_counter_packet+0x270>)
 800226e:	8bdb      	ldrh	r3, [r3, #30]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[34] = ((local_cpy[16] & 0xFF00) >> 8);
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <send_error_counter_packet+0x270>)
 8002278:	8c1b      	ldrh	r3, [r3, #32]
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	b29b      	uxth	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[35] = (local_cpy[16] & 0xFF);
 8002284:	4b43      	ldr	r3, [pc, #268]	; (8002394 <send_error_counter_packet+0x270>)
 8002286:	8c1b      	ldrh	r3, [r3, #32]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[36] = ((local_cpy[17] & 0xFF00) >> 8);
 800228e:	4b41      	ldr	r3, [pc, #260]	; (8002394 <send_error_counter_packet+0x270>)
 8002290:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	b29b      	uxth	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[37] = (local_cpy[17] & 0xFF);
 800229c:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <send_error_counter_packet+0x270>)
 800229e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[38] = ((local_cpy[18] & 0xFF00) >> 8);
 80022a6:	4b3b      	ldr	r3, [pc, #236]	; (8002394 <send_error_counter_packet+0x270>)
 80022a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[39] = (local_cpy[18] & 0xFF);
 80022b4:	4b37      	ldr	r3, [pc, #220]	; (8002394 <send_error_counter_packet+0x270>)
 80022b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[40] = ((local_cpy[19] & 0xFF00) >> 8);
 80022be:	4b35      	ldr	r3, [pc, #212]	; (8002394 <send_error_counter_packet+0x270>)
 80022c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[41] = (local_cpy[19] & 0xFF);
 80022cc:	4b31      	ldr	r3, [pc, #196]	; (8002394 <send_error_counter_packet+0x270>)
 80022ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[42] = ((local_cpy[20] & 0xFF00) >> 8);
 80022d6:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <send_error_counter_packet+0x270>)
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	0a1b      	lsrs	r3, r3, #8
 80022dc:	b29b      	uxth	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[43] = (local_cpy[20] & 0xFF);
 80022e4:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <send_error_counter_packet+0x270>)
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[44] = ((local_cpy[21] & 0xFF00) >> 8);
 80022ee:	4b29      	ldr	r3, [pc, #164]	; (8002394 <send_error_counter_packet+0x270>)
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[45] = (local_cpy[21] & 0xFF);
 80022fc:	4b25      	ldr	r3, [pc, #148]	; (8002394 <send_error_counter_packet+0x270>)
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[46] = ((local_cpy[22] & 0xFF00) >> 8);
 8002306:	4b23      	ldr	r3, [pc, #140]	; (8002394 <send_error_counter_packet+0x270>)
 8002308:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	b29b      	uxth	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[47] = (local_cpy[22] & 0xFF);
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <send_error_counter_packet+0x270>)
 8002316:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[48] = ((local_cpy[23] & 0xFF00) >> 8);
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <send_error_counter_packet+0x270>)
 8002320:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	b29b      	uxth	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[49] = (local_cpy[23] & 0xFF);
 800232c:	4b19      	ldr	r3, [pc, #100]	; (8002394 <send_error_counter_packet+0x270>)
 800232e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[50] = ((local_cpy[24] & 0xFF00) >> 8);
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <send_error_counter_packet+0x270>)
 8002338:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[51] = (local_cpy[24] & 0xFF);
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <send_error_counter_packet+0x270>)
 8002346:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[52] = ((local_cpy[25] & 0xFF00) >> 8);
 800234e:	4b11      	ldr	r3, [pc, #68]	; (8002394 <send_error_counter_packet+0x270>)
 8002350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002352:	0a1b      	lsrs	r3, r3, #8
 8002354:	b29b      	uxth	r3, r3
 8002356:	b2db      	uxtb	r3, r3
 8002358:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[53] = (local_cpy[25] & 0xFF);
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <send_error_counter_packet+0x270>)
 800235e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002360:	b2db      	uxtb	r3, r3
 8002362:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[54] = ((local_cpy[26] & 0xFF00) >> 8);
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <send_error_counter_packet+0x270>)
 8002368:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	b29b      	uxth	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[55] = (local_cpy[26] & 0xFF);
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <send_error_counter_packet+0x270>)
 8002376:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002378:	b2db      	uxtb	r3, r3
 800237a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	HAL_UART_Transmit(&huart1, buffer, ERROR_COUNTER_PACKET_SIZE, 100);
 800237e:	4639      	mov	r1, r7
 8002380:	2364      	movs	r3, #100	; 0x64
 8002382:	2238      	movs	r2, #56	; 0x38
 8002384:	4804      	ldr	r0, [pc, #16]	; (8002398 <send_error_counter_packet+0x274>)
 8002386:	f011 fe2f 	bl	8013fe8 <HAL_UART_Transmit>
}
 800238a:	bf00      	nop
 800238c:	3738      	adds	r7, #56	; 0x38
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	240003a4 	.word	0x240003a4
 8002398:	24001e3c 	.word	0x24001e3c

0800239c <send_previous_error_packet>:

void send_previous_error_packet() {
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint8_t buffer[PREV_ERROR_PACKET_SIZE];

	prev_error = get_previous_error();
 80023a2:	f7ff fe8f 	bl	80020c4 <get_previous_error>
 80023a6:	4603      	mov	r3, r0
 80023a8:	80bb      	strh	r3, [r7, #4]

	buffer[0] = PREV_ERROR_PACKET_SYNC;
 80023aa:	23aa      	movs	r3, #170	; 0xaa
 80023ac:	703b      	strb	r3, [r7, #0]
	buffer[1] = PREV_ERROR_PACKET_SYNC;
 80023ae:	23aa      	movs	r3, #170	; 0xaa
 80023b0:	707b      	strb	r3, [r7, #1]
	buffer[2] = prev_error.category;
 80023b2:	793b      	ldrb	r3, [r7, #4]
 80023b4:	70bb      	strb	r3, [r7, #2]
	buffer[3] = prev_error.detail;
 80023b6:	797b      	ldrb	r3, [r7, #5]
 80023b8:	70fb      	strb	r3, [r7, #3]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 80023ba:	4639      	mov	r1, r7
 80023bc:	2364      	movs	r3, #100	; 0x64
 80023be:	2204      	movs	r2, #4
 80023c0:	4803      	ldr	r0, [pc, #12]	; (80023d0 <send_previous_error_packet+0x34>)
 80023c2:	f011 fe11 	bl	8013fe8 <HAL_UART_Transmit>

}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	24001e3c 	.word	0x24001e3c

080023d4 <send_current_error_packet>:

void send_current_error_packet(ERROR_STRUCT error) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	80b8      	strh	r0, [r7, #4]
	uint8_t buffer[CURRENT_ERROR_PACKET_SIZE];

	buffer[0] = CURRENT_ERROR_PACKET_SYNC;
 80023dc:	23bb      	movs	r3, #187	; 0xbb
 80023de:	733b      	strb	r3, [r7, #12]
	buffer[1] = CURRENT_ERROR_PACKET_SYNC;
 80023e0:	23bb      	movs	r3, #187	; 0xbb
 80023e2:	737b      	strb	r3, [r7, #13]
	buffer[2] = error.category;
 80023e4:	793b      	ldrb	r3, [r7, #4]
 80023e6:	73bb      	strb	r3, [r7, #14]
	buffer[3] = error.detail;
 80023e8:	797b      	ldrb	r3, [r7, #5]
 80023ea:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 80023ec:	f107 010c 	add.w	r1, r7, #12
 80023f0:	2364      	movs	r3, #100	; 0x64
 80023f2:	2204      	movs	r2, #4
 80023f4:	4803      	ldr	r0, [pc, #12]	; (8002404 <send_current_error_packet+0x30>)
 80023f6:	f011 fdf7 	bl	8013fe8 <HAL_UART_Transmit>
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	24001e3c 	.word	0x24001e3c

08002408 <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <vApplicationTickHook+0x18>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a03      	ldr	r2, [pc, #12]	; (8002420 <vApplicationTickHook+0x18>)
 8002414:	6013      	str	r3, [r2, #0]
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	24001ae0 	.word	0x24001ae0

08002424 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8002440:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <MX_FREERTOS_Init+0x98>)
 8002442:	2100      	movs	r1, #0
 8002444:	4824      	ldr	r0, [pc, #144]	; (80024d8 <MX_FREERTOS_Init+0x9c>)
 8002446:	f014 fc27 	bl	8016c98 <osThreadNew>
 800244a:	4603      	mov	r3, r0
 800244c:	4a23      	ldr	r2, [pc, #140]	; (80024dc <MX_FREERTOS_Init+0xa0>)
 800244e:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8002450:	4a23      	ldr	r2, [pc, #140]	; (80024e0 <MX_FREERTOS_Init+0xa4>)
 8002452:	2100      	movs	r1, #0
 8002454:	4823      	ldr	r0, [pc, #140]	; (80024e4 <MX_FREERTOS_Init+0xa8>)
 8002456:	f014 fc1f 	bl	8016c98 <osThreadNew>
 800245a:	4603      	mov	r3, r0
 800245c:	4a22      	ldr	r2, [pc, #136]	; (80024e8 <MX_FREERTOS_Init+0xac>)
 800245e:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8002460:	4a22      	ldr	r2, [pc, #136]	; (80024ec <MX_FREERTOS_Init+0xb0>)
 8002462:	2100      	movs	r1, #0
 8002464:	4822      	ldr	r0, [pc, #136]	; (80024f0 <MX_FREERTOS_Init+0xb4>)
 8002466:	f014 fc17 	bl	8016c98 <osThreadNew>
 800246a:	4603      	mov	r3, r0
 800246c:	4a21      	ldr	r2, [pc, #132]	; (80024f4 <MX_FREERTOS_Init+0xb8>)
 800246e:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8002470:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <MX_FREERTOS_Init+0xbc>)
 8002472:	2100      	movs	r1, #0
 8002474:	4821      	ldr	r0, [pc, #132]	; (80024fc <MX_FREERTOS_Init+0xc0>)
 8002476:	f014 fc0f 	bl	8016c98 <osThreadNew>
 800247a:	4603      	mov	r3, r0
 800247c:	4a20      	ldr	r2, [pc, #128]	; (8002500 <MX_FREERTOS_Init+0xc4>)
 800247e:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8002480:	4a20      	ldr	r2, [pc, #128]	; (8002504 <MX_FREERTOS_Init+0xc8>)
 8002482:	2100      	movs	r1, #0
 8002484:	4820      	ldr	r0, [pc, #128]	; (8002508 <MX_FREERTOS_Init+0xcc>)
 8002486:	f014 fc07 	bl	8016c98 <osThreadNew>
 800248a:	4603      	mov	r3, r0
 800248c:	4a1f      	ldr	r2, [pc, #124]	; (800250c <MX_FREERTOS_Init+0xd0>)
 800248e:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8002490:	4a1f      	ldr	r2, [pc, #124]	; (8002510 <MX_FREERTOS_Init+0xd4>)
 8002492:	2100      	movs	r1, #0
 8002494:	481f      	ldr	r0, [pc, #124]	; (8002514 <MX_FREERTOS_Init+0xd8>)
 8002496:	f014 fbff 	bl	8016c98 <osThreadNew>
 800249a:	4603      	mov	r3, r0
 800249c:	4a1e      	ldr	r2, [pc, #120]	; (8002518 <MX_FREERTOS_Init+0xdc>)
 800249e:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 80024a0:	4a1e      	ldr	r2, [pc, #120]	; (800251c <MX_FREERTOS_Init+0xe0>)
 80024a2:	2100      	movs	r1, #0
 80024a4:	481e      	ldr	r0, [pc, #120]	; (8002520 <MX_FREERTOS_Init+0xe4>)
 80024a6:	f014 fbf7 	bl	8016c98 <osThreadNew>
 80024aa:	4603      	mov	r3, r0
 80024ac:	4a1d      	ldr	r2, [pc, #116]	; (8002524 <MX_FREERTOS_Init+0xe8>)
 80024ae:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 80024b0:	4a1d      	ldr	r2, [pc, #116]	; (8002528 <MX_FREERTOS_Init+0xec>)
 80024b2:	2100      	movs	r1, #0
 80024b4:	481d      	ldr	r0, [pc, #116]	; (800252c <MX_FREERTOS_Init+0xf0>)
 80024b6:	f014 fbef 	bl	8016c98 <osThreadNew>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <MX_FREERTOS_Init+0xf4>)
 80024be:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 80024c0:	4a1c      	ldr	r2, [pc, #112]	; (8002534 <MX_FREERTOS_Init+0xf8>)
 80024c2:	2100      	movs	r1, #0
 80024c4:	481c      	ldr	r0, [pc, #112]	; (8002538 <MX_FREERTOS_Init+0xfc>)
 80024c6:	f014 fbe7 	bl	8016c98 <osThreadNew>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4a1b      	ldr	r2, [pc, #108]	; (800253c <MX_FREERTOS_Init+0x100>)
 80024ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	0801acc8 	.word	0x0801acc8
 80024d8:	08002541 	.word	0x08002541
 80024dc:	240003dc 	.word	0x240003dc
 80024e0:	0801acec 	.word	0x0801acec
 80024e4:	08002569 	.word	0x08002569
 80024e8:	2400063c 	.word	0x2400063c
 80024ec:	0801ad10 	.word	0x0801ad10
 80024f0:	08002591 	.word	0x08002591
 80024f4:	2400089c 	.word	0x2400089c
 80024f8:	0801ad34 	.word	0x0801ad34
 80024fc:	080025b9 	.word	0x080025b9
 8002500:	24000afc 	.word	0x24000afc
 8002504:	0801ad58 	.word	0x0801ad58
 8002508:	08002631 	.word	0x08002631
 800250c:	24000d5c 	.word	0x24000d5c
 8002510:	0801ad7c 	.word	0x0801ad7c
 8002514:	080026a9 	.word	0x080026a9
 8002518:	24000fbc 	.word	0x24000fbc
 800251c:	0801ada0 	.word	0x0801ada0
 8002520:	080026d9 	.word	0x080026d9
 8002524:	2400121c 	.word	0x2400121c
 8002528:	0801adc4 	.word	0x0801adc4
 800252c:	08002709 	.word	0x08002709
 8002530:	2400147c 	.word	0x2400147c
 8002534:	0801ade8 	.word	0x0801ade8
 8002538:	080027e9 	.word	0x080027e9
 800253c:	240016dc 	.word	0x240016dc

08002540 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <PMT_init+0x24>)
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002550:	2200      	movs	r2, #0
 8002552:	2101      	movs	r1, #1
 8002554:	f014 fd22 	bl	8016f9c <osEventFlagsWait>

		create_pmt_packet();
 8002558:	f001 fa12 	bl	8003980 <create_pmt_packet>

		osThreadYield();
 800255c:	f014 fc2e 	bl	8016dbc <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002560:	e7f2      	b.n	8002548 <PMT_init+0x8>
 8002562:	bf00      	nop
 8002564:	24001a90 	.word	0x24001a90

08002568 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <ERPA_init+0x24>)
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002578:	2200      	movs	r2, #0
 800257a:	2102      	movs	r1, #2
 800257c:	f014 fd0e 	bl	8016f9c <osEventFlagsWait>

		create_erpa_packet();
 8002580:	f001 fa44 	bl	8003a0c <create_erpa_packet>

		osThreadYield();
 8002584:	f014 fc1a 	bl	8016dbc <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002588:	e7f2      	b.n	8002570 <ERPA_init+0x8>
 800258a:	bf00      	nop
 800258c:	24001a90 	.word	0x24001a90

08002590 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HK_init+0x24>)
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025a0:	2200      	movs	r2, #0
 80025a2:	2104      	movs	r1, #4
 80025a4:	f014 fcfa 	bl	8016f9c <osEventFlagsWait>

		create_hk_packet();
 80025a8:	f001 fa8e 	bl	8003ac8 <create_hk_packet>

		osThreadYield();
 80025ac:	f014 fc06 	bl	8016dbc <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80025b0:	e7f2      	b.n	8002598 <HK_init+0x8>
 80025b2:	bf00      	nop
 80025b4:	24001a90 	.word	0x24001a90

080025b8 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <AUTOINIT_init+0x70>)
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025c8:	2200      	movs	r2, #0
 80025ca:	2104      	movs	r1, #4
 80025cc:	f014 fce6 	bl	8016f9c <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e012      	b.n	80025fc <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80025d6:	4a15      	ldr	r2, [pc, #84]	; (800262c <AUTOINIT_init+0x74>)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80025de:	4a13      	ldr	r2, [pc, #76]	; (800262c <AUTOINIT_init+0x74>)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	889b      	ldrh	r3, [r3, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	4619      	mov	r1, r3
 80025ec:	f008 feb8 	bl	800b360 <HAL_GPIO_WritePin>
			osDelay(100);
 80025f0:	2064      	movs	r0, #100	; 0x64
 80025f2:	f014 fc03 	bl	8016dfc <osDelay>
		for (int i = 0; i < 7; i++) {
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3301      	adds	r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b06      	cmp	r3, #6
 8002600:	dde9      	ble.n	80025d6 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8002602:	2308      	movs	r3, #8
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	e008      	b.n	800261a <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2101      	movs	r1, #1
 800260e:	4618      	mov	r0, r3
 8002610:	f003 f898 	bl	8005744 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	3301      	adds	r3, #1
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b0d      	cmp	r3, #13
 800261e:	ddf3      	ble.n	8002608 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8002620:	f014 fbcc 	bl	8016dbc <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002624:	e7cc      	b.n	80025c0 <AUTOINIT_init+0x8>
 8002626:	bf00      	nop
 8002628:	24001a94 	.word	0x24001a94
 800262c:	0801ae0c 	.word	0x0801ae0c

08002630 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <AUTODEINIT_init+0x70>)
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002640:	2200      	movs	r2, #0
 8002642:	2108      	movs	r1, #8
 8002644:	f014 fcaa 	bl	8016f9c <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8002648:	230d      	movs	r3, #13
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	e008      	b.n	8002660 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f003 f875 	bl	8005744 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3b01      	subs	r3, #1
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b07      	cmp	r3, #7
 8002664:	dcf3      	bgt.n	800264e <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8002666:	2306      	movs	r3, #6
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	e012      	b.n	8002692 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800266c:	4a0d      	ldr	r2, [pc, #52]	; (80026a4 <AUTODEINIT_init+0x74>)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002674:	4a0b      	ldr	r2, [pc, #44]	; (80026a4 <AUTODEINIT_init+0x74>)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	889b      	ldrh	r3, [r3, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	4619      	mov	r1, r3
 8002682:	f008 fe6d 	bl	800b360 <HAL_GPIO_WritePin>
			osDelay(100);
 8002686:	2064      	movs	r0, #100	; 0x64
 8002688:	f014 fbb8 	bl	8016dfc <osDelay>
		for (int i = 6; i >= 0; i--) {
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	3b01      	subs	r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	dae9      	bge.n	800266c <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8002698:	f014 fb90 	bl	8016dbc <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800269c:	e7cc      	b.n	8002638 <AUTODEINIT_init+0x8>
 800269e:	bf00      	nop
 80026a0:	24001a94 	.word	0x24001a94
 80026a4:	0801ae0c 	.word	0x0801ae0c

080026a8 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80026b0:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <Voltage_Monitor_init+0x28>)
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026b8:	2200      	movs	r2, #0
 80026ba:	2101      	movs	r1, #1
 80026bc:	f014 fc6e 	bl	8016f9c <osEventFlagsWait>
	  		osWaitForever);
	  HAL_IWDG_Refresh(&hiwdg1);
 80026c0:	4804      	ldr	r0, [pc, #16]	; (80026d4 <Voltage_Monitor_init+0x2c>)
 80026c2:	f00b f9cb 	bl	800da5c <HAL_IWDG_Refresh>
	  set_rail_monitor();
 80026c6:	f003 f85d 	bl	8005784 <set_rail_monitor>
	  monitor_rails();
 80026ca:	f003 f8df 	bl	800588c <monitor_rails>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80026ce:	e7ef      	b.n	80026b0 <Voltage_Monitor_init+0x8>
 80026d0:	24001a94 	.word	0x24001a94
 80026d4:	24001a80 	.word	0x24001a80

080026d8 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <STOP_init+0x2c>)
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026e8:	2200      	movs	r2, #0
 80026ea:	2102      	movs	r1, #2
 80026ec:	f014 fc56 	bl	8016f9c <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80026f0:	4b04      	ldr	r3, [pc, #16]	; (8002704 <STOP_init+0x2c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2102      	movs	r1, #2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f014 fc1e 	bl	8016f38 <osEventFlagsClear>

	  enter_stop();
 80026fc:	f001 f914 	bl	8003928 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002700:	e7ee      	b.n	80026e0 <STOP_init+0x8>
 8002702:	bf00      	nop
 8002704:	24001a94 	.word	0x24001a94

08002708 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af02      	add	r7, sp, #8
 800270e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002710:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <Science_init+0xbc>)
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002718:	2200      	movs	r2, #0
 800271a:	2101      	movs	r1, #1
 800271c:	f014 fc3e 	bl	8016f9c <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	e012      	b.n	800274c <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002726:	4a28      	ldr	r2, [pc, #160]	; (80027c8 <Science_init+0xc0>)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800272e:	4a26      	ldr	r2, [pc, #152]	; (80027c8 <Science_init+0xc0>)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	889b      	ldrh	r3, [r3, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	4619      	mov	r1, r3
 800273c:	f008 fe10 	bl	800b360 <HAL_GPIO_WritePin>
			osDelay(200);
 8002740:	20c8      	movs	r0, #200	; 0xc8
 8002742:	f014 fb5b 	bl	8016dfc <osDelay>
		for (int i = 0; i < 9; i++) {
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3301      	adds	r3, #1
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b08      	cmp	r3, #8
 8002750:	dde9      	ble.n	8002726 <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8002752:	2308      	movs	r3, #8
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	e008      	b.n	800276a <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2101      	movs	r1, #1
 800275e:	4618      	mov	r0, r3
 8002760:	f002 fff0 	bl	8005744 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	3301      	adds	r3, #1
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b10      	cmp	r3, #16
 800276e:	ddf3      	ble.n	8002758 <Science_init+0x50>
  __ASM volatile ("cpsid i" : : : "memory");
 8002770:	b672      	cpsid	i
}
 8002772:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8002774:	2300      	movs	r3, #0
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2320      	movs	r3, #32
 800277a:	4a14      	ldr	r2, [pc, #80]	; (80027cc <Science_init+0xc4>)
 800277c:	2100      	movs	r1, #0
 800277e:	4814      	ldr	r0, [pc, #80]	; (80027d0 <Science_init+0xc8>)
 8002780:	f004 ff6a 	bl	8007658 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <Science_init+0xcc>)
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 800278a:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <Science_init+0xd0>)
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <Science_init+0xd4>)
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 8002796:	f001 fae5 	bl	8003d64 <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <Science_init+0xd8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2104      	movs	r1, #4
 80027a0:	4618      	mov	r0, r3
 80027a2:	f014 fb85 	bl	8016eb0 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 80027a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027aa:	f44f 729c 	mov.w	r2, #312	; 0x138
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 80027b0:	2100      	movs	r1, #0
 80027b2:	480c      	ldr	r0, [pc, #48]	; (80027e4 <Science_init+0xdc>)
 80027b4:	f010 f88e 	bl	80128d4 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 80027b8:	b662      	cpsie	i
}
 80027ba:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 80027bc:	f014 fafe 	bl	8016dbc <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80027c0:	e7a6      	b.n	8002710 <Science_init+0x8>
 80027c2:	bf00      	nop
 80027c4:	24001a98 	.word	0x24001a98
 80027c8:	0801ae0c 	.word	0x0801ae0c
 80027cc:	2400003c 	.word	0x2400003c
 80027d0:	24000314 	.word	0x24000314
 80027d4:	24001adc 	.word	0x24001adc
 80027d8:	24001add 	.word	0x24001add
 80027dc:	24001ae0 	.word	0x24001ae0
 80027e0:	24001a90 	.word	0x24001a90
 80027e4:	24001da4 	.word	0x24001da4

080027e8 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80027f0:	4b22      	ldr	r3, [pc, #136]	; (800287c <Idle_init+0x94>)
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027f8:	2200      	movs	r2, #0
 80027fa:	2102      	movs	r1, #2
 80027fc:	f014 fbce 	bl	8016f9c <osEventFlagsWait>

		ERPA_ENABLED = 0;
 8002800:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <Idle_init+0x98>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800280a:	2200      	movs	r2, #0
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 800280e:	2100      	movs	r1, #0
 8002810:	481c      	ldr	r0, [pc, #112]	; (8002884 <Idle_init+0x9c>)
 8002812:	f010 f9b9 	bl	8012b88 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <Idle_init+0xa0>)
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 800281c:	2100      	movs	r1, #0
 800281e:	481b      	ldr	r0, [pc, #108]	; (800288c <Idle_init+0xa4>)
 8002820:	f004 ffda 	bl	80077d8 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002824:	2310      	movs	r3, #16
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	e008      	b.n	800283c <Idle_init+0x54>
			set_rail_monitor_enable(i, 0);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f002 ff87 	bl	8005744 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3b01      	subs	r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b07      	cmp	r3, #7
 8002840:	dcf3      	bgt.n	800282a <Idle_init+0x42>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8002842:	2308      	movs	r3, #8
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	e012      	b.n	800286e <Idle_init+0x86>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002848:	4a11      	ldr	r2, [pc, #68]	; (8002890 <Idle_init+0xa8>)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002850:	4a0f      	ldr	r2, [pc, #60]	; (8002890 <Idle_init+0xa8>)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4413      	add	r3, r2
 8002858:	889b      	ldrh	r3, [r3, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	4619      	mov	r1, r3
 800285e:	f008 fd7f 	bl	800b360 <HAL_GPIO_WritePin>
			osDelay(200);
 8002862:	20c8      	movs	r0, #200	; 0xc8
 8002864:	f014 faca 	bl	8016dfc <osDelay>
		for (int i = 8; i >= 0; i--) {
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	3b01      	subs	r3, #1
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	dae9      	bge.n	8002848 <Idle_init+0x60>
		}

		// Yield thread control
		osThreadYield();
 8002874:	f014 faa2 	bl	8016dbc <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002878:	e7ba      	b.n	80027f0 <Idle_init+0x8>
 800287a:	bf00      	nop
 800287c:	24001a98 	.word	0x24001a98
 8002880:	24001add 	.word	0x24001add
 8002884:	24001da4 	.word	0x24001da4
 8002888:	24001adc 	.word	0x24001adc
 800288c:	24000314 	.word	0x24000314
 8002890:	0801ae0c 	.word	0x0801ae0c

08002894 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	4b34      	ldr	r3, [pc, #208]	; (800297c <MX_GPIO_Init+0xe8>)
 80028ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b0:	4a32      	ldr	r2, [pc, #200]	; (800297c <MX_GPIO_Init+0xe8>)
 80028b2:	f043 0304 	orr.w	r3, r3, #4
 80028b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ba:	4b30      	ldr	r3, [pc, #192]	; (800297c <MX_GPIO_Init+0xe8>)
 80028bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028c8:	4b2c      	ldr	r3, [pc, #176]	; (800297c <MX_GPIO_Init+0xe8>)
 80028ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ce:	4a2b      	ldr	r2, [pc, #172]	; (800297c <MX_GPIO_Init+0xe8>)
 80028d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028d8:	4b28      	ldr	r3, [pc, #160]	; (800297c <MX_GPIO_Init+0xe8>)
 80028da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e6:	4b25      	ldr	r3, [pc, #148]	; (800297c <MX_GPIO_Init+0xe8>)
 80028e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ec:	4a23      	ldr	r2, [pc, #140]	; (800297c <MX_GPIO_Init+0xe8>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028f6:	4b21      	ldr	r3, [pc, #132]	; (800297c <MX_GPIO_Init+0xe8>)
 80028f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002904:	4b1d      	ldr	r3, [pc, #116]	; (800297c <MX_GPIO_Init+0xe8>)
 8002906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800290a:	4a1c      	ldr	r2, [pc, #112]	; (800297c <MX_GPIO_Init+0xe8>)
 800290c:	f043 0302 	orr.w	r3, r3, #2
 8002910:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <MX_GPIO_Init+0xe8>)
 8002916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002922:	2200      	movs	r2, #0
 8002924:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8002928:	4815      	ldr	r0, [pc, #84]	; (8002980 <MX_GPIO_Init+0xec>)
 800292a:	f008 fd19 	bl	800b360 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800292e:	2200      	movs	r2, #0
 8002930:	2164      	movs	r1, #100	; 0x64
 8002932:	4814      	ldr	r0, [pc, #80]	; (8002984 <MX_GPIO_Init+0xf0>)
 8002934:	f008 fd14 	bl	800b360 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002938:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 800293c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293e:	2301      	movs	r3, #1
 8002940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002942:	2302      	movs	r3, #2
 8002944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002946:	2300      	movs	r3, #0
 8002948:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4619      	mov	r1, r3
 8002950:	480b      	ldr	r0, [pc, #44]	; (8002980 <MX_GPIO_Init+0xec>)
 8002952:	f008 fb3d 	bl	800afd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002956:	2364      	movs	r3, #100	; 0x64
 8002958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295a:	2301      	movs	r3, #1
 800295c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800295e:	2302      	movs	r3, #2
 8002960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2300      	movs	r3, #0
 8002964:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	4619      	mov	r1, r3
 800296c:	4805      	ldr	r0, [pc, #20]	; (8002984 <MX_GPIO_Init+0xf0>)
 800296e:	f008 fb2f 	bl	800afd0 <HAL_GPIO_Init>

}
 8002972:	bf00      	nop
 8002974:	3728      	adds	r7, #40	; 0x28
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	58024400 	.word	0x58024400
 8002980:	58020800 	.word	0x58020800
 8002984:	58020400 	.word	0x58020400

08002988 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800298c:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <MX_I2C1_Init+0x78>)
 800298e:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <MX_I2C1_Init+0x7c>)
 8002990:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8002992:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <MX_I2C1_Init+0x78>)
 8002994:	4a1c      	ldr	r2, [pc, #112]	; (8002a08 <MX_I2C1_Init+0x80>)
 8002996:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <MX_I2C1_Init+0x78>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800299e:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <MX_I2C1_Init+0x78>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029a4:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <MX_I2C1_Init+0x78>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <MX_I2C1_Init+0x78>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <MX_I2C1_Init+0x78>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029b6:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <MX_I2C1_Init+0x78>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <MX_I2C1_Init+0x78>)
 80029be:	2200      	movs	r2, #0
 80029c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029c2:	480f      	ldr	r0, [pc, #60]	; (8002a00 <MX_I2C1_Init+0x78>)
 80029c4:	f008 fce6 	bl	800b394 <HAL_I2C_Init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029ce:	f000 ffc9 	bl	8003964 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029d2:	2100      	movs	r1, #0
 80029d4:	480a      	ldr	r0, [pc, #40]	; (8002a00 <MX_I2C1_Init+0x78>)
 80029d6:	f00a ff85 	bl	800d8e4 <HAL_I2CEx_ConfigAnalogFilter>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029e0:	f000 ffc0 	bl	8003964 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029e4:	2100      	movs	r1, #0
 80029e6:	4806      	ldr	r0, [pc, #24]	; (8002a00 <MX_I2C1_Init+0x78>)
 80029e8:	f00a ffc7 	bl	800d97a <HAL_I2CEx_ConfigDigitalFilter>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029f2:	f000 ffb7 	bl	8003964 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80029f6:	2001      	movs	r0, #1
 80029f8:	f00b f80c 	bl	800da14 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	2400193c 	.word	0x2400193c
 8002a04:	40005400 	.word	0x40005400
 8002a08:	00100517 	.word	0x00100517

08002a0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b0ba      	sub	sp, #232	; 0xe8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a24:	f107 0310 	add.w	r3, r7, #16
 8002a28:	22c0      	movs	r2, #192	; 0xc0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f017 fb05 	bl	801a03c <memset>
  if(i2cHandle->Instance==I2C1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a5d      	ldr	r2, [pc, #372]	; (8002bac <HAL_I2C_MspInit+0x1a0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	f040 80b3 	bne.w	8002ba4 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a3e:	f04f 0208 	mov.w	r2, #8
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a50:	f107 0310 	add.w	r3, r7, #16
 8002a54:	4618      	mov	r0, r3
 8002a56:	f00c f8af 	bl	800ebb8 <HAL_RCCEx_PeriphCLKConfig>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002a60:	f000 ff80 	bl	8003964 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a64:	4b52      	ldr	r3, [pc, #328]	; (8002bb0 <HAL_I2C_MspInit+0x1a4>)
 8002a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6a:	4a51      	ldr	r2, [pc, #324]	; (8002bb0 <HAL_I2C_MspInit+0x1a4>)
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a74:	4b4e      	ldr	r3, [pc, #312]	; (8002bb0 <HAL_I2C_MspInit+0x1a4>)
 8002a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a8a:	2312      	movs	r3, #18
 8002a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4842      	ldr	r0, [pc, #264]	; (8002bb4 <HAL_I2C_MspInit+0x1a8>)
 8002aaa:	f008 fa91 	bl	800afd0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aae:	4b40      	ldr	r3, [pc, #256]	; (8002bb0 <HAL_I2C_MspInit+0x1a4>)
 8002ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ab4:	4a3e      	ldr	r2, [pc, #248]	; (8002bb0 <HAL_I2C_MspInit+0x1a4>)
 8002ab6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002abe:	4b3c      	ldr	r3, [pc, #240]	; (8002bb0 <HAL_I2C_MspInit+0x1a4>)
 8002ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002acc:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <HAL_I2C_MspInit+0x1ac>)
 8002ace:	4a3b      	ldr	r2, [pc, #236]	; (8002bbc <HAL_I2C_MspInit+0x1b0>)
 8002ad0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002ad2:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <HAL_I2C_MspInit+0x1ac>)
 8002ad4:	2222      	movs	r2, #34	; 0x22
 8002ad6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ad8:	4b37      	ldr	r3, [pc, #220]	; (8002bb8 <HAL_I2C_MspInit+0x1ac>)
 8002ada:	2240      	movs	r2, #64	; 0x40
 8002adc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ade:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <HAL_I2C_MspInit+0x1ac>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae4:	4b34      	ldr	r3, [pc, #208]	; (8002bb8 <HAL_I2C_MspInit+0x1ac>)
 8002ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aec:	4b32      	ldr	r3, [pc, #200]	; (8002bb8 <HAL_I2C_MspInit+0x1ac>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002af2:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <HAL_I2C_MspInit+0x1ac>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002af8:	4b2f      	ldr	r3, [pc, #188]	; (8002bb8 <HAL_I2C_MspInit+0x1ac>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002afe:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <HAL_I2C_MspInit+0x1ac>)
 8002b00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b04:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b06:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <HAL_I2C_MspInit+0x1ac>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002b0c:	482a      	ldr	r0, [pc, #168]	; (8002bb8 <HAL_I2C_MspInit+0x1ac>)
 8002b0e:	f005 f92f 	bl	8007d70 <HAL_DMA_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002b18:	f000 ff24 	bl	8003964 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a26      	ldr	r2, [pc, #152]	; (8002bb8 <HAL_I2C_MspInit+0x1ac>)
 8002b20:	639a      	str	r2, [r3, #56]	; 0x38
 8002b22:	4a25      	ldr	r2, [pc, #148]	; (8002bb8 <HAL_I2C_MspInit+0x1ac>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002b28:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <HAL_I2C_MspInit+0x1b4>)
 8002b2a:	4a26      	ldr	r2, [pc, #152]	; (8002bc4 <HAL_I2C_MspInit+0x1b8>)
 8002b2c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002b2e:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <HAL_I2C_MspInit+0x1b4>)
 8002b30:	2221      	movs	r2, #33	; 0x21
 8002b32:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b34:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <HAL_I2C_MspInit+0x1b4>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_I2C_MspInit+0x1b4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b40:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_I2C_MspInit+0x1b4>)
 8002b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b46:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_I2C_MspInit+0x1b4>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <HAL_I2C_MspInit+0x1b4>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002b54:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <HAL_I2C_MspInit+0x1b4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_I2C_MspInit+0x1b4>)
 8002b5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b60:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b62:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <HAL_I2C_MspInit+0x1b4>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002b68:	4815      	ldr	r0, [pc, #84]	; (8002bc0 <HAL_I2C_MspInit+0x1b4>)
 8002b6a:	f005 f901 	bl	8007d70 <HAL_DMA_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002b74:	f000 fef6 	bl	8003964 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a11      	ldr	r2, [pc, #68]	; (8002bc0 <HAL_I2C_MspInit+0x1b4>)
 8002b7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b7e:	4a10      	ldr	r2, [pc, #64]	; (8002bc0 <HAL_I2C_MspInit+0x1b4>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2105      	movs	r1, #5
 8002b88:	201f      	movs	r0, #31
 8002b8a:	f004 fcc3 	bl	8007514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002b8e:	201f      	movs	r0, #31
 8002b90:	f004 fcda 	bl	8007548 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002b94:	2200      	movs	r2, #0
 8002b96:	2105      	movs	r1, #5
 8002b98:	2020      	movs	r0, #32
 8002b9a:	f004 fcbb 	bl	8007514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002b9e:	2020      	movs	r0, #32
 8002ba0:	f004 fcd2 	bl	8007548 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	37e8      	adds	r7, #232	; 0xe8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40005400 	.word	0x40005400
 8002bb0:	58024400 	.word	0x58024400
 8002bb4:	58020400 	.word	0x58020400
 8002bb8:	24001990 	.word	0x24001990
 8002bbc:	400200a0 	.word	0x400200a0
 8002bc0:	24001a08 	.word	0x24001a08
 8002bc4:	400200b8 	.word	0x400200b8

08002bc8 <__NVIC_SystemReset>:
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002bcc:	f3bf 8f4f 	dsb	sy
}
 8002bd0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <__NVIC_SystemReset+0x24>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002bda:	4904      	ldr	r1, [pc, #16]	; (8002bec <__NVIC_SystemReset+0x24>)
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <__NVIC_SystemReset+0x28>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002be2:	f3bf 8f4f 	dsb	sy
}
 8002be6:	bf00      	nop
    __NOP();
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <__NVIC_SystemReset+0x20>
 8002bec:	e000ed00 	.word	0xe000ed00
 8002bf0:	05fa0004 	.word	0x05fa0004

08002bf4 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a20      	ldr	r2, [pc, #128]	; (8002c80 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d106      	bne.n	8002c12 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8002c04:	4b1f      	ldr	r3, [pc, #124]	; (8002c84 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f014 f950 	bl	8016eb0 <osEventFlagsSet>
		HK_100_ms_counter++;

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8002c10:	e032      	b.n	8002c78 <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a1c      	ldr	r2, [pc, #112]	; (8002c88 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d12b      	bne.n	8002c72 <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8002c24:	4b17      	ldr	r3, [pc, #92]	; (8002c84 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2102      	movs	r1, #2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f014 f940 	bl	8016eb0 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8002c30:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d113      	bne.n	8002c62 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8002c3a:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4618      	mov	r0, r3
 8002c42:	f014 f935 	bl	8016eb0 <osEventFlagsSet>
			if (HK_ENABLED){
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2104      	movs	r1, #4
 8002c56:	4618      	mov	r0, r3
 8002c58:	f014 f92a 	bl	8016eb0 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	3301      	adds	r3, #1
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8002c6e:	701a      	strb	r2, [r3, #0]
}
 8002c70:	e002      	b.n	8002c78 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8002c72:	480a      	ldr	r0, [pc, #40]	; (8002c9c <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8002c74:	f017 fa58 	bl	801a128 <puts>
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	24001da4 	.word	0x24001da4
 8002c84:	24001a90 	.word	0x24001a90
 8002c88:	24001df0 	.word	0x24001df0
 8002c8c:	24001add 	.word	0x24001add
 8002c90:	24001ae4 	.word	0x24001ae4
 8002c94:	24001a94 	.word	0x24001a94
 8002c98:	24001adc 	.word	0x24001adc
 8002c9c:	0801aad8 	.word	0x0801aad8

08002ca0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002ca8:	2201      	movs	r2, #1
 8002caa:	49f7      	ldr	r1, [pc, #988]	; (8003088 <HAL_UART_RxCpltCallback+0x3e8>)
 8002cac:	48f7      	ldr	r0, [pc, #988]	; (800308c <HAL_UART_RxCpltCallback+0x3ec>)
 8002cae:	f011 faf1 	bl	8014294 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8002cb2:	4bf5      	ldr	r3, [pc, #980]	; (8003088 <HAL_UART_RxCpltCallback+0x3e8>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2bef      	cmp	r3, #239	; 0xef
 8002cbc:	f200 843e 	bhi.w	800353c <HAL_UART_RxCpltCallback+0x89c>
 8002cc0:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <HAL_UART_RxCpltCallback+0x28>)
 8002cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc6:	bf00      	nop
 8002cc8:	080030a5 	.word	0x080030a5
 8002ccc:	080030d5 	.word	0x080030d5
 8002cd0:	08003145 	.word	0x08003145
 8002cd4:	0800317f 	.word	0x0800317f
 8002cd8:	080031b7 	.word	0x080031b7
 8002cdc:	080031f1 	.word	0x080031f1
 8002ce0:	0800322d 	.word	0x0800322d
 8002ce4:	08003269 	.word	0x08003269
 8002ce8:	080032a3 	.word	0x080032a3
 8002cec:	080032d7 	.word	0x080032d7
 8002cf0:	0800330b 	.word	0x0800330b
 8002cf4:	0800333d 	.word	0x0800333d
 8002cf8:	08003367 	.word	0x08003367
 8002cfc:	08003443 	.word	0x08003443
 8002d00:	080034ab 	.word	0x080034ab
 8002d04:	080034d3 	.word	0x080034d3
 8002d08:	08003091 	.word	0x08003091
 8002d0c:	080030b9 	.word	0x080030b9
 8002d10:	08003127 	.word	0x08003127
 8002d14:	08003163 	.word	0x08003163
 8002d18:	0800319b 	.word	0x0800319b
 8002d1c:	080031d3 	.word	0x080031d3
 8002d20:	0800320f 	.word	0x0800320f
 8002d24:	0800324b 	.word	0x0800324b
 8002d28:	08003287 	.word	0x08003287
 8002d2c:	080032bf 	.word	0x080032bf
 8002d30:	080032e7 	.word	0x080032e7
 8002d34:	08003321 	.word	0x08003321
 8002d38:	0800334d 	.word	0x0800334d
 8002d3c:	08003401 	.word	0x08003401
 8002d40:	08003483 	.word	0x08003483
 8002d44:	0800353d 	.word	0x0800353d
 8002d48:	0800353d 	.word	0x0800353d
 8002d4c:	0800353d 	.word	0x0800353d
 8002d50:	0800353d 	.word	0x0800353d
 8002d54:	0800353d 	.word	0x0800353d
 8002d58:	0800353d 	.word	0x0800353d
 8002d5c:	0800353d 	.word	0x0800353d
 8002d60:	0800353d 	.word	0x0800353d
 8002d64:	0800353d 	.word	0x0800353d
 8002d68:	0800353d 	.word	0x0800353d
 8002d6c:	0800353d 	.word	0x0800353d
 8002d70:	0800353d 	.word	0x0800353d
 8002d74:	0800353d 	.word	0x0800353d
 8002d78:	0800353d 	.word	0x0800353d
 8002d7c:	0800353d 	.word	0x0800353d
 8002d80:	0800353d 	.word	0x0800353d
 8002d84:	0800353d 	.word	0x0800353d
 8002d88:	0800353d 	.word	0x0800353d
 8002d8c:	0800353d 	.word	0x0800353d
 8002d90:	0800353d 	.word	0x0800353d
 8002d94:	0800353d 	.word	0x0800353d
 8002d98:	0800353d 	.word	0x0800353d
 8002d9c:	0800353d 	.word	0x0800353d
 8002da0:	0800353d 	.word	0x0800353d
 8002da4:	0800353d 	.word	0x0800353d
 8002da8:	0800353d 	.word	0x0800353d
 8002dac:	0800353d 	.word	0x0800353d
 8002db0:	0800353d 	.word	0x0800353d
 8002db4:	0800353d 	.word	0x0800353d
 8002db8:	0800353d 	.word	0x0800353d
 8002dbc:	0800353d 	.word	0x0800353d
 8002dc0:	0800353d 	.word	0x0800353d
 8002dc4:	0800353d 	.word	0x0800353d
 8002dc8:	0800353d 	.word	0x0800353d
 8002dcc:	0800353d 	.word	0x0800353d
 8002dd0:	0800353d 	.word	0x0800353d
 8002dd4:	0800353d 	.word	0x0800353d
 8002dd8:	0800353d 	.word	0x0800353d
 8002ddc:	0800353d 	.word	0x0800353d
 8002de0:	0800353d 	.word	0x0800353d
 8002de4:	0800353d 	.word	0x0800353d
 8002de8:	0800353d 	.word	0x0800353d
 8002dec:	0800353d 	.word	0x0800353d
 8002df0:	0800353d 	.word	0x0800353d
 8002df4:	0800353d 	.word	0x0800353d
 8002df8:	0800353d 	.word	0x0800353d
 8002dfc:	0800353d 	.word	0x0800353d
 8002e00:	0800353d 	.word	0x0800353d
 8002e04:	0800353d 	.word	0x0800353d
 8002e08:	0800353d 	.word	0x0800353d
 8002e0c:	0800353d 	.word	0x0800353d
 8002e10:	0800353d 	.word	0x0800353d
 8002e14:	0800353d 	.word	0x0800353d
 8002e18:	0800353d 	.word	0x0800353d
 8002e1c:	0800353d 	.word	0x0800353d
 8002e20:	0800353d 	.word	0x0800353d
 8002e24:	0800353d 	.word	0x0800353d
 8002e28:	0800353d 	.word	0x0800353d
 8002e2c:	0800353d 	.word	0x0800353d
 8002e30:	0800353d 	.word	0x0800353d
 8002e34:	0800353d 	.word	0x0800353d
 8002e38:	0800353d 	.word	0x0800353d
 8002e3c:	0800353d 	.word	0x0800353d
 8002e40:	0800353d 	.word	0x0800353d
 8002e44:	0800353d 	.word	0x0800353d
 8002e48:	0800353d 	.word	0x0800353d
 8002e4c:	0800353d 	.word	0x0800353d
 8002e50:	0800353d 	.word	0x0800353d
 8002e54:	0800353d 	.word	0x0800353d
 8002e58:	0800353d 	.word	0x0800353d
 8002e5c:	0800353d 	.word	0x0800353d
 8002e60:	0800353d 	.word	0x0800353d
 8002e64:	0800353d 	.word	0x0800353d
 8002e68:	0800353d 	.word	0x0800353d
 8002e6c:	0800353d 	.word	0x0800353d
 8002e70:	0800353d 	.word	0x0800353d
 8002e74:	0800353d 	.word	0x0800353d
 8002e78:	0800353d 	.word	0x0800353d
 8002e7c:	0800353d 	.word	0x0800353d
 8002e80:	0800353d 	.word	0x0800353d
 8002e84:	0800353d 	.word	0x0800353d
 8002e88:	0800353d 	.word	0x0800353d
 8002e8c:	0800353d 	.word	0x0800353d
 8002e90:	0800353d 	.word	0x0800353d
 8002e94:	0800353d 	.word	0x0800353d
 8002e98:	0800353d 	.word	0x0800353d
 8002e9c:	0800353d 	.word	0x0800353d
 8002ea0:	0800353d 	.word	0x0800353d
 8002ea4:	0800353d 	.word	0x0800353d
 8002ea8:	0800353d 	.word	0x0800353d
 8002eac:	0800353d 	.word	0x0800353d
 8002eb0:	0800353d 	.word	0x0800353d
 8002eb4:	0800353d 	.word	0x0800353d
 8002eb8:	0800353d 	.word	0x0800353d
 8002ebc:	0800353d 	.word	0x0800353d
 8002ec0:	0800353d 	.word	0x0800353d
 8002ec4:	0800353d 	.word	0x0800353d
 8002ec8:	0800353d 	.word	0x0800353d
 8002ecc:	0800353d 	.word	0x0800353d
 8002ed0:	0800353d 	.word	0x0800353d
 8002ed4:	0800353d 	.word	0x0800353d
 8002ed8:	0800353d 	.word	0x0800353d
 8002edc:	0800353d 	.word	0x0800353d
 8002ee0:	0800353d 	.word	0x0800353d
 8002ee4:	0800353d 	.word	0x0800353d
 8002ee8:	0800353d 	.word	0x0800353d
 8002eec:	0800353d 	.word	0x0800353d
 8002ef0:	0800353d 	.word	0x0800353d
 8002ef4:	0800353d 	.word	0x0800353d
 8002ef8:	0800353d 	.word	0x0800353d
 8002efc:	0800353d 	.word	0x0800353d
 8002f00:	0800353d 	.word	0x0800353d
 8002f04:	0800353d 	.word	0x0800353d
 8002f08:	0800353d 	.word	0x0800353d
 8002f0c:	0800353d 	.word	0x0800353d
 8002f10:	0800353d 	.word	0x0800353d
 8002f14:	0800353d 	.word	0x0800353d
 8002f18:	0800353d 	.word	0x0800353d
 8002f1c:	0800353d 	.word	0x0800353d
 8002f20:	0800353d 	.word	0x0800353d
 8002f24:	0800353d 	.word	0x0800353d
 8002f28:	0800353d 	.word	0x0800353d
 8002f2c:	0800353d 	.word	0x0800353d
 8002f30:	0800353d 	.word	0x0800353d
 8002f34:	0800353d 	.word	0x0800353d
 8002f38:	0800353d 	.word	0x0800353d
 8002f3c:	0800353d 	.word	0x0800353d
 8002f40:	0800353d 	.word	0x0800353d
 8002f44:	0800353d 	.word	0x0800353d
 8002f48:	0800353d 	.word	0x0800353d
 8002f4c:	0800353d 	.word	0x0800353d
 8002f50:	0800353d 	.word	0x0800353d
 8002f54:	0800353d 	.word	0x0800353d
 8002f58:	0800353d 	.word	0x0800353d
 8002f5c:	0800353d 	.word	0x0800353d
 8002f60:	0800353d 	.word	0x0800353d
 8002f64:	0800353d 	.word	0x0800353d
 8002f68:	0800353d 	.word	0x0800353d
 8002f6c:	0800353d 	.word	0x0800353d
 8002f70:	0800353d 	.word	0x0800353d
 8002f74:	0800353d 	.word	0x0800353d
 8002f78:	0800353d 	.word	0x0800353d
 8002f7c:	0800353d 	.word	0x0800353d
 8002f80:	0800353d 	.word	0x0800353d
 8002f84:	0800350f 	.word	0x0800350f
 8002f88:	0800353d 	.word	0x0800353d
 8002f8c:	0800353d 	.word	0x0800353d
 8002f90:	0800353d 	.word	0x0800353d
 8002f94:	0800353d 	.word	0x0800353d
 8002f98:	0800353d 	.word	0x0800353d
 8002f9c:	0800353d 	.word	0x0800353d
 8002fa0:	0800353d 	.word	0x0800353d
 8002fa4:	0800353d 	.word	0x0800353d
 8002fa8:	0800353d 	.word	0x0800353d
 8002fac:	0800353d 	.word	0x0800353d
 8002fb0:	0800353d 	.word	0x0800353d
 8002fb4:	0800353d 	.word	0x0800353d
 8002fb8:	0800353d 	.word	0x0800353d
 8002fbc:	0800353d 	.word	0x0800353d
 8002fc0:	0800353d 	.word	0x0800353d
 8002fc4:	08003515 	.word	0x08003515
 8002fc8:	0800353d 	.word	0x0800353d
 8002fcc:	0800353d 	.word	0x0800353d
 8002fd0:	0800353d 	.word	0x0800353d
 8002fd4:	0800353d 	.word	0x0800353d
 8002fd8:	0800353d 	.word	0x0800353d
 8002fdc:	0800353d 	.word	0x0800353d
 8002fe0:	0800353d 	.word	0x0800353d
 8002fe4:	0800353d 	.word	0x0800353d
 8002fe8:	0800353d 	.word	0x0800353d
 8002fec:	0800353d 	.word	0x0800353d
 8002ff0:	0800353d 	.word	0x0800353d
 8002ff4:	0800353d 	.word	0x0800353d
 8002ff8:	0800353d 	.word	0x0800353d
 8002ffc:	0800353d 	.word	0x0800353d
 8003000:	0800353d 	.word	0x0800353d
 8003004:	08003523 	.word	0x08003523
 8003008:	080034fb 	.word	0x080034fb
 800300c:	0800353d 	.word	0x0800353d
 8003010:	0800353d 	.word	0x0800353d
 8003014:	0800353d 	.word	0x0800353d
 8003018:	0800353d 	.word	0x0800353d
 800301c:	0800353d 	.word	0x0800353d
 8003020:	0800353d 	.word	0x0800353d
 8003024:	0800353d 	.word	0x0800353d
 8003028:	0800353d 	.word	0x0800353d
 800302c:	0800353d 	.word	0x0800353d
 8003030:	0800353d 	.word	0x0800353d
 8003034:	0800353d 	.word	0x0800353d
 8003038:	0800353d 	.word	0x0800353d
 800303c:	0800353d 	.word	0x0800353d
 8003040:	0800353d 	.word	0x0800353d
 8003044:	08003531 	.word	0x08003531
 8003048:	080034e7 	.word	0x080034e7
 800304c:	0800353d 	.word	0x0800353d
 8003050:	0800353d 	.word	0x0800353d
 8003054:	0800353d 	.word	0x0800353d
 8003058:	0800353d 	.word	0x0800353d
 800305c:	0800353d 	.word	0x0800353d
 8003060:	0800353d 	.word	0x0800353d
 8003064:	0800353d 	.word	0x0800353d
 8003068:	0800353d 	.word	0x0800353d
 800306c:	0800353d 	.word	0x0800353d
 8003070:	0800353d 	.word	0x0800353d
 8003074:	0800353d 	.word	0x0800353d
 8003078:	0800353d 	.word	0x0800353d
 800307c:	0800353d 	.word	0x0800353d
 8003080:	0800353d 	.word	0x0800353d
 8003084:	08003537 	.word	0x08003537
 8003088:	24001a9c 	.word	0x24001a9c
 800308c:	24001e3c 	.word	0x24001e3c
	case 0x10: {
		printf("SDN1 ON\n");
 8003090:	48b8      	ldr	r0, [pc, #736]	; (8003374 <HAL_UART_RxCpltCallback+0x6d4>)
 8003092:	f017 f849 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8003096:	4bb8      	ldr	r3, [pc, #736]	; (8003378 <HAL_UART_RxCpltCallback+0x6d8>)
 8003098:	2104      	movs	r1, #4
 800309a:	2201      	movs	r2, #1
 800309c:	4618      	mov	r0, r3
 800309e:	f008 f95f 	bl	800b360 <HAL_GPIO_WritePin>
		break;
 80030a2:	e256      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 80030a4:	48b5      	ldr	r0, [pc, #724]	; (800337c <HAL_UART_RxCpltCallback+0x6dc>)
 80030a6:	f017 f83f 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 80030aa:	4bb3      	ldr	r3, [pc, #716]	; (8003378 <HAL_UART_RxCpltCallback+0x6d8>)
 80030ac:	2104      	movs	r1, #4
 80030ae:	2200      	movs	r2, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f008 f955 	bl	800b360 <HAL_GPIO_WritePin>
		break;
 80030b6:	e24c      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 80030b8:	48b1      	ldr	r0, [pc, #708]	; (8003380 <HAL_UART_RxCpltCallback+0x6e0>)
 80030ba:	f017 f835 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 80030be:	4bae      	ldr	r3, [pc, #696]	; (8003378 <HAL_UART_RxCpltCallback+0x6d8>)
 80030c0:	2120      	movs	r1, #32
 80030c2:	2201      	movs	r2, #1
 80030c4:	4618      	mov	r0, r3
 80030c6:	f008 f94b 	bl	800b360 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 80030ca:	2101      	movs	r1, #1
 80030cc:	2008      	movs	r0, #8
 80030ce:	f002 fb39 	bl	8005744 <set_rail_monitor_enable>
		break;
 80030d2:	e23e      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 80030d4:	48ab      	ldr	r0, [pc, #684]	; (8003384 <HAL_UART_RxCpltCallback+0x6e4>)
 80030d6:	f017 f827 	bl	801a128 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 80030da:	2308      	movs	r3, #8
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	e00f      	b.n	8003100 <HAL_UART_RxCpltCallback+0x460>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80030e0:	4aa9      	ldr	r2, [pc, #676]	; (8003388 <HAL_UART_RxCpltCallback+0x6e8>)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80030e8:	4aa7      	ldr	r2, [pc, #668]	; (8003388 <HAL_UART_RxCpltCallback+0x6e8>)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	889b      	ldrh	r3, [r3, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	4619      	mov	r1, r3
 80030f6:	f008 f933 	bl	800b360 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	dcec      	bgt.n	80030e0 <HAL_UART_RxCpltCallback+0x440>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003106:	2310      	movs	r3, #16
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	e008      	b.n	800311e <HAL_UART_RxCpltCallback+0x47e>
			set_rail_monitor_enable(i, 0);
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f002 fb16 	bl	8005744 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	3b01      	subs	r3, #1
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b07      	cmp	r3, #7
 8003122:	dcf3      	bgt.n	800310c <HAL_UART_RxCpltCallback+0x46c>
		}

		break;
 8003124:	e215      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8003126:	4899      	ldr	r0, [pc, #612]	; (800338c <HAL_UART_RxCpltCallback+0x6ec>)
 8003128:	f016 fffe 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 800312c:	4b98      	ldr	r3, [pc, #608]	; (8003390 <HAL_UART_RxCpltCallback+0x6f0>)
 800312e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003132:	2201      	movs	r2, #1
 8003134:	4618      	mov	r0, r3
 8003136:	f008 f913 	bl	800b360 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 800313a:	2101      	movs	r1, #1
 800313c:	2009      	movs	r0, #9
 800313e:	f002 fb01 	bl	8005744 <set_rail_monitor_enable>

		break;
 8003142:	e206      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8003144:	4893      	ldr	r0, [pc, #588]	; (8003394 <HAL_UART_RxCpltCallback+0x6f4>)
 8003146:	f016 ffef 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 800314a:	4b91      	ldr	r3, [pc, #580]	; (8003390 <HAL_UART_RxCpltCallback+0x6f0>)
 800314c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003150:	2200      	movs	r2, #0
 8003152:	4618      	mov	r0, r3
 8003154:	f008 f904 	bl	800b360 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8003158:	2100      	movs	r1, #0
 800315a:	2009      	movs	r0, #9
 800315c:	f002 faf2 	bl	8005744 <set_rail_monitor_enable>
		break;
 8003160:	e1f7      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8003162:	488d      	ldr	r0, [pc, #564]	; (8003398 <HAL_UART_RxCpltCallback+0x6f8>)
 8003164:	f016 ffe0 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8003168:	4b89      	ldr	r3, [pc, #548]	; (8003390 <HAL_UART_RxCpltCallback+0x6f0>)
 800316a:	2180      	movs	r1, #128	; 0x80
 800316c:	2201      	movs	r2, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f008 f8f6 	bl	800b360 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8003174:	2101      	movs	r1, #1
 8003176:	200a      	movs	r0, #10
 8003178:	f002 fae4 	bl	8005744 <set_rail_monitor_enable>

		break;
 800317c:	e1e9      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 800317e:	4887      	ldr	r0, [pc, #540]	; (800339c <HAL_UART_RxCpltCallback+0x6fc>)
 8003180:	f016 ffd2 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8003184:	4b82      	ldr	r3, [pc, #520]	; (8003390 <HAL_UART_RxCpltCallback+0x6f0>)
 8003186:	2180      	movs	r1, #128	; 0x80
 8003188:	2200      	movs	r2, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f008 f8e8 	bl	800b360 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8003190:	2100      	movs	r1, #0
 8003192:	200a      	movs	r0, #10
 8003194:	f002 fad6 	bl	8005744 <set_rail_monitor_enable>
		break;
 8003198:	e1db      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 800319a:	4881      	ldr	r0, [pc, #516]	; (80033a0 <HAL_UART_RxCpltCallback+0x700>)
 800319c:	f016 ffc4 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 80031a0:	4b7b      	ldr	r3, [pc, #492]	; (8003390 <HAL_UART_RxCpltCallback+0x6f0>)
 80031a2:	2140      	movs	r1, #64	; 0x40
 80031a4:	2201      	movs	r2, #1
 80031a6:	4618      	mov	r0, r3
 80031a8:	f008 f8da 	bl	800b360 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 80031ac:	2101      	movs	r1, #1
 80031ae:	200b      	movs	r0, #11
 80031b0:	f002 fac8 	bl	8005744 <set_rail_monitor_enable>

		break;
 80031b4:	e1cd      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 80031b6:	487b      	ldr	r0, [pc, #492]	; (80033a4 <HAL_UART_RxCpltCallback+0x704>)
 80031b8:	f016 ffb6 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80031bc:	4b74      	ldr	r3, [pc, #464]	; (8003390 <HAL_UART_RxCpltCallback+0x6f0>)
 80031be:	2140      	movs	r1, #64	; 0x40
 80031c0:	2200      	movs	r2, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f008 f8cc 	bl	800b360 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 80031c8:	2100      	movs	r1, #0
 80031ca:	200b      	movs	r0, #11
 80031cc:	f002 faba 	bl	8005744 <set_rail_monitor_enable>
		break;
 80031d0:	e1bf      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 80031d2:	4875      	ldr	r0, [pc, #468]	; (80033a8 <HAL_UART_RxCpltCallback+0x708>)
 80031d4:	f016 ffa8 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80031d8:	4b6d      	ldr	r3, [pc, #436]	; (8003390 <HAL_UART_RxCpltCallback+0x6f0>)
 80031da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031de:	2201      	movs	r2, #1
 80031e0:	4618      	mov	r0, r3
 80031e2:	f008 f8bd 	bl	800b360 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 80031e6:	2101      	movs	r1, #1
 80031e8:	200c      	movs	r0, #12
 80031ea:	f002 faab 	bl	8005744 <set_rail_monitor_enable>

		break;
 80031ee:	e1b0      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 80031f0:	486e      	ldr	r0, [pc, #440]	; (80033ac <HAL_UART_RxCpltCallback+0x70c>)
 80031f2:	f016 ff99 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80031f6:	4b66      	ldr	r3, [pc, #408]	; (8003390 <HAL_UART_RxCpltCallback+0x6f0>)
 80031f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031fc:	2200      	movs	r2, #0
 80031fe:	4618      	mov	r0, r3
 8003200:	f008 f8ae 	bl	800b360 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8003204:	2100      	movs	r1, #0
 8003206:	200c      	movs	r0, #12
 8003208:	f002 fa9c 	bl	8005744 <set_rail_monitor_enable>
		break;
 800320c:	e1a1      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 800320e:	4868      	ldr	r0, [pc, #416]	; (80033b0 <HAL_UART_RxCpltCallback+0x710>)
 8003210:	f016 ff8a 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8003214:	4b5e      	ldr	r3, [pc, #376]	; (8003390 <HAL_UART_RxCpltCallback+0x6f0>)
 8003216:	f44f 7100 	mov.w	r1, #512	; 0x200
 800321a:	2201      	movs	r2, #1
 800321c:	4618      	mov	r0, r3
 800321e:	f008 f89f 	bl	800b360 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8003222:	2101      	movs	r1, #1
 8003224:	200d      	movs	r0, #13
 8003226:	f002 fa8d 	bl	8005744 <set_rail_monitor_enable>

		break;
 800322a:	e192      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 800322c:	4861      	ldr	r0, [pc, #388]	; (80033b4 <HAL_UART_RxCpltCallback+0x714>)
 800322e:	f016 ff7b 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8003232:	4b57      	ldr	r3, [pc, #348]	; (8003390 <HAL_UART_RxCpltCallback+0x6f0>)
 8003234:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003238:	2200      	movs	r2, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f008 f890 	bl	800b360 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8003240:	2100      	movs	r1, #0
 8003242:	200d      	movs	r0, #13
 8003244:	f002 fa7e 	bl	8005744 <set_rail_monitor_enable>
		break;
 8003248:	e183      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 800324a:	485b      	ldr	r0, [pc, #364]	; (80033b8 <HAL_UART_RxCpltCallback+0x718>)
 800324c:	f016 ff6c 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8003250:	4b4f      	ldr	r3, [pc, #316]	; (8003390 <HAL_UART_RxCpltCallback+0x6f0>)
 8003252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003256:	2201      	movs	r2, #1
 8003258:	4618      	mov	r0, r3
 800325a:	f008 f881 	bl	800b360 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 800325e:	2101      	movs	r1, #1
 8003260:	200f      	movs	r0, #15
 8003262:	f002 fa6f 	bl	8005744 <set_rail_monitor_enable>

		break;
 8003266:	e174      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8003268:	4854      	ldr	r0, [pc, #336]	; (80033bc <HAL_UART_RxCpltCallback+0x71c>)
 800326a:	f016 ff5d 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 800326e:	4b48      	ldr	r3, [pc, #288]	; (8003390 <HAL_UART_RxCpltCallback+0x6f0>)
 8003270:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003274:	2200      	movs	r2, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f008 f872 	bl	800b360 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 800327c:	2100      	movs	r1, #0
 800327e:	200f      	movs	r0, #15
 8003280:	f002 fa60 	bl	8005744 <set_rail_monitor_enable>
		break;
 8003284:	e165      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8003286:	484e      	ldr	r0, [pc, #312]	; (80033c0 <HAL_UART_RxCpltCallback+0x720>)
 8003288:	f016 ff4e 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 800328c:	4b3a      	ldr	r3, [pc, #232]	; (8003378 <HAL_UART_RxCpltCallback+0x6d8>)
 800328e:	2140      	movs	r1, #64	; 0x40
 8003290:	2201      	movs	r2, #1
 8003292:	4618      	mov	r0, r3
 8003294:	f008 f864 	bl	800b360 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8003298:	2101      	movs	r1, #1
 800329a:	2010      	movs	r0, #16
 800329c:	f002 fa52 	bl	8005744 <set_rail_monitor_enable>

		break;
 80032a0:	e157      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 80032a2:	4848      	ldr	r0, [pc, #288]	; (80033c4 <HAL_UART_RxCpltCallback+0x724>)
 80032a4:	f016 ff40 	bl	801a128 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80032a8:	4b33      	ldr	r3, [pc, #204]	; (8003378 <HAL_UART_RxCpltCallback+0x6d8>)
 80032aa:	2140      	movs	r1, #64	; 0x40
 80032ac:	2200      	movs	r2, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f008 f856 	bl	800b360 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 80032b4:	2100      	movs	r1, #0
 80032b6:	2010      	movs	r0, #16
 80032b8:	f002 fa44 	bl	8005744 <set_rail_monitor_enable>
		break;
 80032bc:	e149      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 80032be:	4842      	ldr	r0, [pc, #264]	; (80033c8 <HAL_UART_RxCpltCallback+0x728>)
 80032c0:	f016 ff32 	bl	801a128 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 80032c4:	2300      	movs	r3, #0
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	2320      	movs	r3, #32
 80032ca:	4a40      	ldr	r2, [pc, #256]	; (80033cc <HAL_UART_RxCpltCallback+0x72c>)
 80032cc:	2100      	movs	r1, #0
 80032ce:	4840      	ldr	r0, [pc, #256]	; (80033d0 <HAL_UART_RxCpltCallback+0x730>)
 80032d0:	f004 f9c2 	bl	8007658 <HAL_DAC_Start_DMA>
		break;
 80032d4:	e13d      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 80032d6:	483f      	ldr	r0, [pc, #252]	; (80033d4 <HAL_UART_RxCpltCallback+0x734>)
 80032d8:	f016 ff26 	bl	801a128 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80032dc:	2100      	movs	r1, #0
 80032de:	483c      	ldr	r0, [pc, #240]	; (80033d0 <HAL_UART_RxCpltCallback+0x730>)
 80032e0:	f004 fa7a 	bl	80077d8 <HAL_DAC_Stop_DMA>
		break;
 80032e4:	e135      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 80032e6:	483c      	ldr	r0, [pc, #240]	; (80033d8 <HAL_UART_RxCpltCallback+0x738>)
 80032e8:	f016 ff1e 	bl	801a128 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80032ec:	4b3b      	ldr	r3, [pc, #236]	; (80033dc <HAL_UART_RxCpltCallback+0x73c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2102      	movs	r1, #2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f013 fddc 	bl	8016eb0 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 80032f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032fc:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 8003302:	4b37      	ldr	r3, [pc, #220]	; (80033e0 <HAL_UART_RxCpltCallback+0x740>)
 8003304:	2201      	movs	r2, #1
 8003306:	701a      	strb	r2, [r3, #0]

		break;
 8003308:	e123      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 800330a:	4836      	ldr	r0, [pc, #216]	; (80033e4 <HAL_UART_RxCpltCallback+0x744>)
 800330c:	f016 ff0c 	bl	801a128 <puts>
		ERPA_ENABLED = 0;
 8003310:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <HAL_UART_RxCpltCallback+0x740>)
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8003316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800331a:	2200      	movs	r2, #0
 800331c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800331e:	e118      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8003320:	4831      	ldr	r0, [pc, #196]	; (80033e8 <HAL_UART_RxCpltCallback+0x748>)
 8003322:	f016 ff01 	bl	801a128 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8003326:	2100      	movs	r1, #0
 8003328:	4830      	ldr	r0, [pc, #192]	; (80033ec <HAL_UART_RxCpltCallback+0x74c>)
 800332a:	f00f fad3 	bl	80128d4 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800332e:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <HAL_UART_RxCpltCallback+0x73c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2101      	movs	r1, #1
 8003334:	4618      	mov	r0, r3
 8003336:	f013 fdbb 	bl	8016eb0 <osEventFlagsSet>
		break;
 800333a:	e10a      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 800333c:	482c      	ldr	r0, [pc, #176]	; (80033f0 <HAL_UART_RxCpltCallback+0x750>)
 800333e:	f016 fef3 	bl	801a128 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8003342:	2100      	movs	r1, #0
 8003344:	4829      	ldr	r0, [pc, #164]	; (80033ec <HAL_UART_RxCpltCallback+0x74c>)
 8003346:	f00f fc1f 	bl	8012b88 <HAL_TIM_OC_Stop_IT>
		break;
 800334a:	e102      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x1C: {
		printf("HK ON \n");
 800334c:	4829      	ldr	r0, [pc, #164]	; (80033f4 <HAL_UART_RxCpltCallback+0x754>)
 800334e:	f016 feeb 	bl	801a128 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8003352:	4b22      	ldr	r3, [pc, #136]	; (80033dc <HAL_UART_RxCpltCallback+0x73c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2104      	movs	r1, #4
 8003358:	4618      	mov	r0, r3
 800335a:	f013 fda9 	bl	8016eb0 <osEventFlagsSet>
		HK_ENABLED = 1;
 800335e:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <HAL_UART_RxCpltCallback+0x758>)
 8003360:	2201      	movs	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]
		break;
 8003364:	e0f5      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8003366:	4825      	ldr	r0, [pc, #148]	; (80033fc <HAL_UART_RxCpltCallback+0x75c>)
 8003368:	f016 fede 	bl	801a128 <puts>
		HK_ENABLED = 0;
 800336c:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <HAL_UART_RxCpltCallback+0x758>)
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
		break;
 8003372:	e0ee      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
 8003374:	0801aaf0 	.word	0x0801aaf0
 8003378:	58020400 	.word	0x58020400
 800337c:	0801aaf8 	.word	0x0801aaf8
 8003380:	0801ab04 	.word	0x0801ab04
 8003384:	0801ab10 	.word	0x0801ab10
 8003388:	0801ae0c 	.word	0x0801ae0c
 800338c:	0801ab1c 	.word	0x0801ab1c
 8003390:	58020800 	.word	0x58020800
 8003394:	0801ab28 	.word	0x0801ab28
 8003398:	0801ab38 	.word	0x0801ab38
 800339c:	0801ab44 	.word	0x0801ab44
 80033a0:	0801ab50 	.word	0x0801ab50
 80033a4:	0801ab5c 	.word	0x0801ab5c
 80033a8:	0801ab6c 	.word	0x0801ab6c
 80033ac:	0801ab78 	.word	0x0801ab78
 80033b0:	0801ab84 	.word	0x0801ab84
 80033b4:	0801ab90 	.word	0x0801ab90
 80033b8:	0801ab9c 	.word	0x0801ab9c
 80033bc:	0801abac 	.word	0x0801abac
 80033c0:	0801abbc 	.word	0x0801abbc
 80033c4:	0801abc8 	.word	0x0801abc8
 80033c8:	0801abd8 	.word	0x0801abd8
 80033cc:	2400003c 	.word	0x2400003c
 80033d0:	24000314 	.word	0x24000314
 80033d4:	0801abe8 	.word	0x0801abe8
 80033d8:	0801abf8 	.word	0x0801abf8
 80033dc:	24001a90 	.word	0x24001a90
 80033e0:	24001add 	.word	0x24001add
 80033e4:	0801ac00 	.word	0x0801ac00
 80033e8:	0801ac0c 	.word	0x0801ac0c
 80033ec:	24001da4 	.word	0x24001da4
 80033f0:	0801ac14 	.word	0x0801ac14
 80033f4:	0801ac1c 	.word	0x0801ac1c
 80033f8:	24001adc 	.word	0x24001adc
 80033fc:	0801ac24 	.word	0x0801ac24
	}
	case 0x1D: {
		printf("Step Up\n");
 8003400:	4856      	ldr	r0, [pc, #344]	; (800355c <HAL_UART_RxCpltCallback+0x8bc>)
 8003402:	f016 fe91 	bl	801a128 <puts>
		if (step < 14) {
 8003406:	4b56      	ldr	r3, [pc, #344]	; (8003560 <HAL_UART_RxCpltCallback+0x8c0>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b0d      	cmp	r3, #13
 800340e:	f200 8099 	bhi.w	8003544 <HAL_UART_RxCpltCallback+0x8a4>
			step += 2;
 8003412:	4b53      	ldr	r3, [pc, #332]	; (8003560 <HAL_UART_RxCpltCallback+0x8c0>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	3302      	adds	r3, #2
 800341a:	b2da      	uxtb	r2, r3
 800341c:	4b50      	ldr	r3, [pc, #320]	; (8003560 <HAL_UART_RxCpltCallback+0x8c0>)
 800341e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8003420:	4b4f      	ldr	r3, [pc, #316]	; (8003560 <HAL_UART_RxCpltCallback+0x8c0>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	4b4e      	ldr	r3, [pc, #312]	; (8003564 <HAL_UART_RxCpltCallback+0x8c4>)
 800342a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342e:	2200      	movs	r2, #0
 8003430:	2100      	movs	r1, #0
 8003432:	484d      	ldr	r0, [pc, #308]	; (8003568 <HAL_UART_RxCpltCallback+0x8c8>)
 8003434:	f004 fa73 	bl	800791e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003438:	2100      	movs	r1, #0
 800343a:	484b      	ldr	r0, [pc, #300]	; (8003568 <HAL_UART_RxCpltCallback+0x8c8>)
 800343c:	f004 f8b4 	bl	80075a8 <HAL_DAC_Start>
		}
		break;
 8003440:	e080      	b.n	8003544 <HAL_UART_RxCpltCallback+0x8a4>
	}
	case 0x0D: {
		printf("Step Down\n");
 8003442:	484a      	ldr	r0, [pc, #296]	; (800356c <HAL_UART_RxCpltCallback+0x8cc>)
 8003444:	f016 fe70 	bl	801a128 <puts>
		if (step > 1) {
 8003448:	4b45      	ldr	r3, [pc, #276]	; (8003560 <HAL_UART_RxCpltCallback+0x8c0>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d97a      	bls.n	8003548 <HAL_UART_RxCpltCallback+0x8a8>
			step -= 2;
 8003452:	4b43      	ldr	r3, [pc, #268]	; (8003560 <HAL_UART_RxCpltCallback+0x8c0>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	3b02      	subs	r3, #2
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b40      	ldr	r3, [pc, #256]	; (8003560 <HAL_UART_RxCpltCallback+0x8c0>)
 800345e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8003460:	4b3f      	ldr	r3, [pc, #252]	; (8003560 <HAL_UART_RxCpltCallback+0x8c0>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	4b3e      	ldr	r3, [pc, #248]	; (8003564 <HAL_UART_RxCpltCallback+0x8c4>)
 800346a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800346e:	2200      	movs	r2, #0
 8003470:	2100      	movs	r1, #0
 8003472:	483d      	ldr	r0, [pc, #244]	; (8003568 <HAL_UART_RxCpltCallback+0x8c8>)
 8003474:	f004 fa53 	bl	800791e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003478:	2100      	movs	r1, #0
 800347a:	483b      	ldr	r0, [pc, #236]	; (8003568 <HAL_UART_RxCpltCallback+0x8c8>)
 800347c:	f004 f894 	bl	80075a8 <HAL_DAC_Start>
		}
		break;
 8003480:	e062      	b.n	8003548 <HAL_UART_RxCpltCallback+0x8a8>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8003482:	483b      	ldr	r0, [pc, #236]	; (8003570 <HAL_UART_RxCpltCallback+0x8d0>)
 8003484:	f016 fe50 	bl	801a128 <puts>
		if (cadence <= 50000) {
 8003488:	4b3a      	ldr	r3, [pc, #232]	; (8003574 <HAL_UART_RxCpltCallback+0x8d4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003490:	4293      	cmp	r3, r2
 8003492:	d85b      	bhi.n	800354c <HAL_UART_RxCpltCallback+0x8ac>
			cadence *= 2;
 8003494:	4b37      	ldr	r3, [pc, #220]	; (8003574 <HAL_UART_RxCpltCallback+0x8d4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4a36      	ldr	r2, [pc, #216]	; (8003574 <HAL_UART_RxCpltCallback+0x8d4>)
 800349c:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 800349e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034a2:	4b34      	ldr	r3, [pc, #208]	; (8003574 <HAL_UART_RxCpltCallback+0x8d4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80034a8:	e050      	b.n	800354c <HAL_UART_RxCpltCallback+0x8ac>
	}
	case 0x0E: {
		printf("Factor Down\n");
 80034aa:	4833      	ldr	r0, [pc, #204]	; (8003578 <HAL_UART_RxCpltCallback+0x8d8>)
 80034ac:	f016 fe3c 	bl	801a128 <puts>
		if (cadence >= 6250) {
 80034b0:	4b30      	ldr	r3, [pc, #192]	; (8003574 <HAL_UART_RxCpltCallback+0x8d4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f641 0269 	movw	r2, #6249	; 0x1869
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d949      	bls.n	8003550 <HAL_UART_RxCpltCallback+0x8b0>
			cadence /= 2;
 80034bc:	4b2d      	ldr	r3, [pc, #180]	; (8003574 <HAL_UART_RxCpltCallback+0x8d4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	4a2c      	ldr	r2, [pc, #176]	; (8003574 <HAL_UART_RxCpltCallback+0x8d4>)
 80034c4:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80034c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034ca:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <HAL_UART_RxCpltCallback+0x8d4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80034d0:	e03e      	b.n	8003550 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 80034d2:	482a      	ldr	r0, [pc, #168]	; (800357c <HAL_UART_RxCpltCallback+0x8dc>)
 80034d4:	f016 fe28 	bl	801a128 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 80034d8:	4b29      	ldr	r3, [pc, #164]	; (8003580 <HAL_UART_RxCpltCallback+0x8e0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2102      	movs	r1, #2
 80034de:	4618      	mov	r0, r3
 80034e0:	f013 fce6 	bl	8016eb0 <osEventFlagsSet>
		break;
 80034e4:	e035      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xE0: {
		printf("Auto Init\n");
 80034e6:	4827      	ldr	r0, [pc, #156]	; (8003584 <HAL_UART_RxCpltCallback+0x8e4>)
 80034e8:	f016 fe1e 	bl	801a128 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80034ec:	4b24      	ldr	r3, [pc, #144]	; (8003580 <HAL_UART_RxCpltCallback+0x8e0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2104      	movs	r1, #4
 80034f2:	4618      	mov	r0, r3
 80034f4:	f013 fcdc 	bl	8016eb0 <osEventFlagsSet>
		break;
 80034f8:	e02b      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 80034fa:	4823      	ldr	r0, [pc, #140]	; (8003588 <HAL_UART_RxCpltCallback+0x8e8>)
 80034fc:	f016 fe14 	bl	801a128 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8003500:	4b1f      	ldr	r3, [pc, #124]	; (8003580 <HAL_UART_RxCpltCallback+0x8e0>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2108      	movs	r1, #8
 8003506:	4618      	mov	r0, r3
 8003508:	f013 fcd2 	bl	8016eb0 <osEventFlagsSet>
		break;
 800350c:	e021      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xAF: {
		sync();
 800350e:	f000 f971 	bl	80037f4 <sync>
		break;
 8003512:	e01e      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_UART_RxCpltCallback+0x8ec>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2101      	movs	r1, #1
 800351a:	4618      	mov	r0, r3
 800351c:	f013 fcc8 	bl	8016eb0 <osEventFlagsSet>
		break;
 8003520:	e017      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8003522:	4b1a      	ldr	r3, [pc, #104]	; (800358c <HAL_UART_RxCpltCallback+0x8ec>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2102      	movs	r1, #2
 8003528:	4618      	mov	r0, r3
 800352a:	f013 fcc1 	bl	8016eb0 <osEventFlagsSet>
		break;
 800352e:	e010      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xDF: {
		reset_error_counters();
 8003530:	f7fe fd84 	bl	800203c <reset_error_counters>
		break;
 8003534:	e00d      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	case 0xEF: {
		send_previous_error_packet();
 8003536:	f7fe ff31 	bl	800239c <send_previous_error_packet>
		break;
 800353a:	e00a      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
	}
	default: {
		printf("Unknown Command\n");
 800353c:	4814      	ldr	r0, [pc, #80]	; (8003590 <HAL_UART_RxCpltCallback+0x8f0>)
 800353e:	f016 fdf3 	bl	801a128 <puts>
		break;
 8003542:	e006      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003544:	bf00      	nop
 8003546:	e004      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003548:	bf00      	nop
 800354a:	e002      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
		break;
 800354c:	bf00      	nop
 800354e:	e000      	b.n	8003552 <HAL_UART_RxCpltCallback+0x8b2>
		break;
 8003550:	bf00      	nop
	}
	}
}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	0801ac2c 	.word	0x0801ac2c
 8003560:	24001ade 	.word	0x24001ade
 8003564:	2400003c 	.word	0x2400003c
 8003568:	24000314 	.word	0x24000314
 800356c:	0801ac34 	.word	0x0801ac34
 8003570:	0801ac40 	.word	0x0801ac40
 8003574:	240000bc 	.word	0x240000bc
 8003578:	0801ac4c 	.word	0x0801ac4c
 800357c:	0801ac58 	.word	0x0801ac58
 8003580:	24001a94 	.word	0x24001a94
 8003584:	0801ac68 	.word	0x0801ac68
 8003588:	0801ac74 	.word	0x0801ac74
 800358c:	24001a98 	.word	0x24001a98
 8003590:	0801ac80 	.word	0x0801ac80

08003594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800359a:	f002 fa71 	bl	8005a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800359e:	f000 f82b 	bl	80035f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80035a2:	f000 f8ab 	bl	80036fc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035a6:	f7ff f975 	bl	8002894 <MX_GPIO_Init>
  MX_DMA_Init();
 80035aa:	f7fd fb9d 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80035ae:	f001 fe01 	bl	80051b4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80035b2:	f7ff f9e9 	bl	8002988 <MX_I2C1_Init>
  MX_SPI2_Init();
 80035b6:	f000 fe75 	bl	80042a4 <MX_SPI2_Init>
  MX_TIM2_Init();
 80035ba:	f001 fb61 	bl	8004c80 <MX_TIM2_Init>
  MX_TIM1_Init();
 80035be:	f001 fab1 	bl	8004b24 <MX_TIM1_Init>
  MX_ADC3_Init();
 80035c2:	f7fd f931 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 80035c6:	f7fd f80d 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 80035ca:	f7fd fad9 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 80035ce:	f000 fe11 	bl	80041f4 <MX_SPI1_Init>
  MX_RTC_Init();
 80035d2:	f000 fbdd 	bl	8003d90 <MX_RTC_Init>
 // MX_IWDG1_Init();
  /* USER CODE BEGIN 2 */
  //get_reset_cause();
  system_setup();
 80035d6:	f000 f8c1 	bl	800375c <system_setup>

  ERROR_STRUCT error;
  error.category = EC_watchdog;
 80035da:	2304      	movs	r3, #4
 80035dc:	713b      	strb	r3, [r7, #4]
  error.detail = ED_UNDEFINED;
 80035de:	231a      	movs	r3, #26
 80035e0:	717b      	strb	r3, [r7, #5]
  handle_error(error);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fe fca4 	bl	8001f30 <handle_error>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80035e8:	f013 fb0c 	bl	8016c04 <osKernelInitialize>
  MX_FREERTOS_Init();
 80035ec:	f7fe ff26 	bl	800243c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80035f0:	f013 fb2c 	bl	8016c4c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80035f4:	e7fe      	b.n	80035f4 <main+0x60>
	...

080035f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b09c      	sub	sp, #112	; 0x70
 80035fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003602:	224c      	movs	r2, #76	; 0x4c
 8003604:	2100      	movs	r1, #0
 8003606:	4618      	mov	r0, r3
 8003608:	f016 fd18 	bl	801a03c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	2220      	movs	r2, #32
 8003610:	2100      	movs	r1, #0
 8003612:	4618      	mov	r0, r3
 8003614:	f016 fd12 	bl	801a03c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003618:	2002      	movs	r0, #2
 800361a:	f00a fa6b 	bl	800daf4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800361e:	2300      	movs	r3, #0
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	4b34      	ldr	r3, [pc, #208]	; (80036f4 <SystemClock_Config+0xfc>)
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	4a33      	ldr	r2, [pc, #204]	; (80036f4 <SystemClock_Config+0xfc>)
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800362e:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <SystemClock_Config+0xfc>)
 8003630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <SystemClock_Config+0x100>)
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003640:	4a2d      	ldr	r2, [pc, #180]	; (80036f8 <SystemClock_Config+0x100>)
 8003642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003646:	6193      	str	r3, [r2, #24]
 8003648:	4b2b      	ldr	r3, [pc, #172]	; (80036f8 <SystemClock_Config+0x100>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003654:	bf00      	nop
 8003656:	4b28      	ldr	r3, [pc, #160]	; (80036f8 <SystemClock_Config+0x100>)
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800365e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003662:	d1f8      	bne.n	8003656 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003664:	230b      	movs	r3, #11
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 800366e:	2309      	movs	r3, #9
 8003670:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003672:	2340      	movs	r3, #64	; 0x40
 8003674:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003676:	2301      	movs	r3, #1
 8003678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800367a:	2302      	movs	r3, #2
 800367c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800367e:	2302      	movs	r3, #2
 8003680:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003682:	2304      	movs	r3, #4
 8003684:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8003686:	2318      	movs	r3, #24
 8003688:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800368a:	2302      	movs	r3, #2
 800368c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800368e:	2302      	movs	r3, #2
 8003690:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003692:	2302      	movs	r3, #2
 8003694:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003696:	2308      	movs	r3, #8
 8003698:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800369a:	2302      	movs	r3, #2
 800369c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a6:	4618      	mov	r0, r3
 80036a8:	f00a fa5e 	bl	800db68 <HAL_RCC_OscConfig>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80036b2:	f000 f957 	bl	8003964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036b6:	233f      	movs	r3, #63	; 0x3f
 80036b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036ba:	2303      	movs	r3, #3
 80036bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80036ca:	2340      	movs	r3, #64	; 0x40
 80036cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80036d2:	2300      	movs	r3, #0
 80036d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	2101      	movs	r1, #1
 80036da:	4618      	mov	r0, r3
 80036dc:	f00a fe9e 	bl	800e41c <HAL_RCC_ClockConfig>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80036e6:	f000 f93d 	bl	8003964 <Error_Handler>
  }
}
 80036ea:	bf00      	nop
 80036ec:	3770      	adds	r7, #112	; 0x70
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	58000400 	.word	0x58000400
 80036f8:	58024800 	.word	0x58024800

080036fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b0b0      	sub	sp, #192	; 0xc0
 8003700:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003702:	463b      	mov	r3, r7
 8003704:	22c0      	movs	r2, #192	; 0xc0
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f016 fc97 	bl	801a03c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800370e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800371a:	2304      	movs	r3, #4
 800371c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 800371e:	2318      	movs	r3, #24
 8003720:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8003722:	2308      	movs	r3, #8
 8003724:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003726:	2302      	movs	r3, #2
 8003728:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800372a:	2302      	movs	r3, #2
 800372c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003732:	2320      	movs	r3, #32
 8003734:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003740:	463b      	mov	r3, r7
 8003742:	4618      	mov	r0, r3
 8003744:	f00b fa38 	bl	800ebb8 <HAL_RCCEx_PeriphCLKConfig>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800374e:	f000 f909 	bl	8003964 <Error_Handler>
  }
}
 8003752:	bf00      	nop
 8003754:	37c0      	adds	r7, #192	; 0xc0
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
	// 3 -- Init rail monitor
	// 4 -- Start timer 3
	// 5 -- Set timer 2 PWM
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts
  	error_counter_init();
 8003760:	f7fe fbf8 	bl	8001f54 <error_counter_init>


	packet_event_flags = osEventFlagsNew(NULL);
 8003764:	2000      	movs	r0, #0
 8003766:	f013 fb64 	bl	8016e32 <osEventFlagsNew>
 800376a:	4603      	mov	r3, r0
 800376c:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <system_setup+0x80>)
 800376e:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8003770:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <system_setup+0x80>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d100      	bne.n	800377a <system_setup+0x1e>
        while (1);
 8003778:	e7fe      	b.n	8003778 <system_setup+0x1c>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 800377a:	2000      	movs	r0, #0
 800377c:	f013 fb59 	bl	8016e32 <osEventFlagsNew>
 8003780:	4603      	mov	r3, r0
 8003782:	4a17      	ldr	r2, [pc, #92]	; (80037e0 <system_setup+0x84>)
 8003784:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8003786:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <system_setup+0x84>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d100      	bne.n	8003790 <system_setup+0x34>
        while (1);
 800378e:	e7fe      	b.n	800378e <system_setup+0x32>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8003790:	2000      	movs	r0, #0
 8003792:	f013 fb4e 	bl	8016e32 <osEventFlagsNew>
 8003796:	4603      	mov	r3, r0
 8003798:	4a12      	ldr	r2, [pc, #72]	; (80037e4 <system_setup+0x88>)
 800379a:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <system_setup+0x88>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d100      	bne.n	80037a6 <system_setup+0x4a>
        while (1);
 80037a4:	e7fe      	b.n	80037a4 <system_setup+0x48>
    }

    TIM2->CCR4 = 0;
 80037a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037aa:	2200      	movs	r2, #0
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 80037ae:	210c      	movs	r1, #12
 80037b0:	480d      	ldr	r0, [pc, #52]	; (80037e8 <system_setup+0x8c>)
 80037b2:	f00f f88f 	bl	80128d4 <HAL_TIM_OC_Start_IT>

	if (!voltage_monitor_init()) {
 80037b6:	f001 fe07 	bl	80053c8 <voltage_monitor_init>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d100      	bne.n	80037c2 <system_setup+0x66>
		while (1);
 80037c0:	e7fe      	b.n	80037c0 <system_setup+0x64>
	}

	if (!init_adc_dma()) {
 80037c2:	f000 fb77 	bl	8003eb4 <init_adc_dma>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d100      	bne.n	80037ce <system_setup+0x72>
		while (1);
 80037cc:	e7fe      	b.n	80037cc <system_setup+0x70>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80037ce:	2201      	movs	r2, #1
 80037d0:	4906      	ldr	r1, [pc, #24]	; (80037ec <system_setup+0x90>)
 80037d2:	4807      	ldr	r0, [pc, #28]	; (80037f0 <system_setup+0x94>)
 80037d4:	f010 fd5e 	bl	8014294 <HAL_UART_Receive_IT>

}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	24001a90 	.word	0x24001a90
 80037e0:	24001a94 	.word	0x24001a94
 80037e4:	24001a98 	.word	0x24001a98
 80037e8:	24001df0 	.word	0x24001df0
 80037ec:	24001a9c 	.word	0x24001a9c
 80037f0:	24001e3c 	.word	0x24001e3c

080037f4 <sync>:

void sync() {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
	send_ACK();
 80037fa:	f000 f821 	bl	8003840 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 80037fe:	480e      	ldr	r0, [pc, #56]	; (8003838 <sync+0x44>)
 8003800:	f010 fd94 	bl	801432c <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8003804:	2364      	movs	r3, #100	; 0x64
 8003806:	2209      	movs	r2, #9
 8003808:	490c      	ldr	r1, [pc, #48]	; (800383c <sync+0x48>)
 800380a:	480b      	ldr	r0, [pc, #44]	; (8003838 <sync+0x44>)
 800380c:	f010 fc7a 	bl	8014104 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <sync+0x48>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	2bff      	cmp	r3, #255	; 0xff
 800381a:	d1f3      	bne.n	8003804 <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 800381c:	4807      	ldr	r0, [pc, #28]	; (800383c <sync+0x48>)
 800381e:	f001 fc07 	bl	8005030 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8003822:	2201      	movs	r2, #1
 8003824:	4905      	ldr	r1, [pc, #20]	; (800383c <sync+0x48>)
 8003826:	4804      	ldr	r0, [pc, #16]	; (8003838 <sync+0x44>)
 8003828:	f010 fd34 	bl	8014294 <HAL_UART_Receive_IT>
	send_error_counter_packet();
 800382c:	f7fe fc7a 	bl	8002124 <send_error_counter_packet>
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	24001e3c 	.word	0x24001e3c
 800383c:	24001a9c 	.word	0x24001a9c

08003840 <send_ACK>:

void send_ACK() {
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <send_ACK+0x1c>)
 8003846:	22ff      	movs	r2, #255	; 0xff
 8003848:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 800384a:	2364      	movs	r3, #100	; 0x64
 800384c:	2201      	movs	r2, #1
 800384e:	4903      	ldr	r1, [pc, #12]	; (800385c <send_ACK+0x1c>)
 8003850:	4803      	ldr	r0, [pc, #12]	; (8003860 <send_ACK+0x20>)
 8003852:	f010 fbc9 	bl	8013fe8 <HAL_UART_Transmit>
}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	24001ae8 	.word	0x24001ae8
 8003860:	24001e3c 	.word	0x24001e3c

08003864 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 800386a:	4b2e      	ldr	r3, [pc, #184]	; (8003924 <get_current_step+0xc0>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003876:	4293      	cmp	r3, r2
 8003878:	d04a      	beq.n	8003910 <get_current_step+0xac>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003880:	da48      	bge.n	8003914 <get_current_step+0xb0>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003888:	4293      	cmp	r3, r2
 800388a:	d03f      	beq.n	800390c <get_current_step+0xa8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003892:	4293      	cmp	r3, r2
 8003894:	dc3e      	bgt.n	8003914 <get_current_step+0xb0>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f640 421f 	movw	r2, #3103	; 0xc1f
 800389c:	4293      	cmp	r3, r2
 800389e:	d033      	beq.n	8003908 <get_current_step+0xa4>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80038a6:	da35      	bge.n	8003914 <get_current_step+0xb0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d028      	beq.n	8003904 <get_current_step+0xa0>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80038b8:	4293      	cmp	r3, r2
 80038ba:	dc2b      	bgt.n	8003914 <get_current_step+0xb0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f240 7245 	movw	r2, #1861	; 0x745
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d01c      	beq.n	8003900 <get_current_step+0x9c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f240 7245 	movw	r2, #1861	; 0x745
 80038cc:	4293      	cmp	r3, r2
 80038ce:	dc21      	bgt.n	8003914 <get_current_step+0xb0>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d010      	beq.n	80038fc <get_current_step+0x98>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80038e0:	4293      	cmp	r3, r2
 80038e2:	dc17      	bgt.n	8003914 <get_current_step+0xb0>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d004      	beq.n	80038f4 <get_current_step+0x90>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 80038f0:	d002      	beq.n	80038f8 <get_current_step+0x94>
 80038f2:	e00f      	b.n	8003914 <get_current_step+0xb0>
	case 0:
		return 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e00e      	b.n	8003916 <get_current_step+0xb2>
	case 620:
		return 1;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e00c      	b.n	8003916 <get_current_step+0xb2>
	case 1241:
		return 2;
 80038fc:	2302      	movs	r3, #2
 80038fe:	e00a      	b.n	8003916 <get_current_step+0xb2>
	case 1861:
		return 3;
 8003900:	2303      	movs	r3, #3
 8003902:	e008      	b.n	8003916 <get_current_step+0xb2>
	case 2482:
		return 4;
 8003904:	2304      	movs	r3, #4
 8003906:	e006      	b.n	8003916 <get_current_step+0xb2>
	case 3103:
		return 5;
 8003908:	2305      	movs	r3, #5
 800390a:	e004      	b.n	8003916 <get_current_step+0xb2>
	case 3723:
		return 6;
 800390c:	2306      	movs	r3, #6
 800390e:	e002      	b.n	8003916 <get_current_step+0xb2>
	case 4095:
		return 7;
 8003910:	2307      	movs	r3, #7
 8003912:	e000      	b.n	8003916 <get_current_step+0xb2>
	default:
		return -1;
 8003914:	23ff      	movs	r3, #255	; 0xff
	}
}
 8003916:	4618      	mov	r0, r3
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40007400 	.word	0x40007400

08003928 <enter_stop>:

void enter_stop() {
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
	  send_ACK();
 800392c:	f7ff ff88 	bl	8003840 <send_ACK>

	  vTaskSuspendAll();
 8003930:	f014 fe16 	bl	8018560 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003934:	2101      	movs	r1, #1
 8003936:	2001      	movs	r0, #1
 8003938:	f00a f8a0 	bl	800da7c <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 800393c:	f7ff f944 	bl	8002bc8 <__NVIC_SystemReset>

08003940 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a04      	ldr	r2, [pc, #16]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003952:	f002 f8d1 	bl	8005af8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40001000 	.word	0x40001000

08003964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 800396a:	2302      	movs	r3, #2
 800396c:	713b      	strb	r3, [r7, #4]
	error.detail = ED_UNDEFINED;
 800396e:	231a      	movs	r3, #26
 8003970:	717b      	strb	r3, [r7, #5]
	handle_error(error);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fe fadc 	bl	8001f30 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8003986:	bf00      	nop
 8003988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800398c:	481c      	ldr	r0, [pc, #112]	; (8003a00 <create_pmt_packet+0x80>)
 800398e:	f007 fccf 	bl	800b330 <HAL_GPIO_ReadPin>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f7      	bne.n	8003988 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003998:	1d3b      	adds	r3, r7, #4
 800399a:	4618      	mov	r0, r3
 800399c:	f001 faa8 	bl	8004ef0 <get_uptime>
	sample_pmt_spi(pmt_spi);
 80039a0:	f107 0308 	add.w	r3, r7, #8
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fad9 	bl	8003f5c <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 80039aa:	23ff      	movs	r3, #255	; 0xff
 80039ac:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 80039ae:	23ff      	movs	r3, #255	; 0xff
 80039b0:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80039b2:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <create_pmt_packet+0x84>)
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	0a1b      	lsrs	r3, r3, #8
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <create_pmt_packet+0x84>)
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 80039c6:	7a3b      	ldrb	r3, [r7, #8]
 80039c8:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 80039ca:	7a7b      	ldrb	r3, [r7, #9]
 80039cc:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 80039ce:	793b      	ldrb	r3, [r7, #4]
 80039d0:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 80039d2:	797b      	ldrb	r3, [r7, #5]
 80039d4:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 80039d6:	79bb      	ldrb	r3, [r7, #6]
 80039d8:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 80039de:	f107 010c 	add.w	r1, r7, #12
 80039e2:	2364      	movs	r3, #100	; 0x64
 80039e4:	220a      	movs	r2, #10
 80039e6:	4808      	ldr	r0, [pc, #32]	; (8003a08 <create_pmt_packet+0x88>)
 80039e8:	f010 fafe 	bl	8013fe8 <HAL_UART_Transmit>

	pmt_seq++;
 80039ec:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <create_pmt_packet+0x84>)
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	3301      	adds	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <create_pmt_packet+0x84>)
 80039f6:	801a      	strh	r2, [r3, #0]
}
 80039f8:	bf00      	nop
 80039fa:	3718      	adds	r7, #24
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	58020000 	.word	0x58020000
 8003a04:	24001aea 	.word	0x24001aea
 8003a08:	24001e3c 	.word	0x24001e3c

08003a0c <create_erpa_packet>:


void create_erpa_packet() {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003a12:	bf00      	nop
 8003a14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a18:	4828      	ldr	r0, [pc, #160]	; (8003abc <create_erpa_packet+0xb0>)
 8003a1a:	f007 fc89 	bl	800b330 <HAL_GPIO_ReadPin>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1f7      	bne.n	8003a14 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003a24:	23ff      	movs	r3, #255	; 0xff
 8003a26:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f001 fa60 	bl	8004ef0 <get_uptime>
	sweep_step = get_current_step();
 8003a30:	f7ff ff18 	bl	8003864 <get_current_step>
 8003a34:	4603      	mov	r3, r0
 8003a36:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8003a38:	f107 030c 	add.w	r3, r7, #12
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 faad 	bl	8003f9c <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003a42:	f107 0308 	add.w	r3, r7, #8
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fac8 	bl	8003fdc <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8003a4c:	23ee      	movs	r3, #238	; 0xee
 8003a4e:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003a50:	23ee      	movs	r3, #238	; 0xee
 8003a52:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8003a54:	4b1a      	ldr	r3, [pc, #104]	; (8003ac0 <create_erpa_packet+0xb4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8003a5e:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <create_erpa_packet+0xb4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8003a68:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <create_erpa_packet+0xb4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8003a70:	7ffb      	ldrb	r3, [r7, #31]
 8003a72:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003a74:	893b      	ldrh	r3, [r7, #8]
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003a7e:	893b      	ldrh	r3, [r7, #8]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8003a84:	7b3b      	ldrb	r3, [r7, #12]
 8003a86:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8003a88:	7b7b      	ldrb	r3, [r7, #13]
 8003a8a:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8003a8c:	793b      	ldrb	r3, [r7, #4]
 8003a8e:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8003a90:	797b      	ldrb	r3, [r7, #5]
 8003a92:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8003a94:	79bb      	ldrb	r3, [r7, #6]
 8003a96:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8003a9c:	f107 0110 	add.w	r1, r7, #16
 8003aa0:	2364      	movs	r3, #100	; 0x64
 8003aa2:	220e      	movs	r2, #14
 8003aa4:	4807      	ldr	r0, [pc, #28]	; (8003ac4 <create_erpa_packet+0xb8>)
 8003aa6:	f010 fa9f 	bl	8013fe8 <HAL_UART_Transmit>

	erpa_seq++;
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <create_erpa_packet+0xb4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	4a03      	ldr	r2, [pc, #12]	; (8003ac0 <create_erpa_packet+0xb4>)
 8003ab2:	6013      	str	r3, [r2, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	3720      	adds	r7, #32
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	58020400 	.word	0x58020400
 8003ac0:	24001aec 	.word	0x24001aec
 8003ac4:	24001e3c 	.word	0x24001e3c

08003ac8 <create_hk_packet>:


void create_hk_packet() {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b094      	sub	sp, #80	; 0x50
 8003acc:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003ace:	1d3b      	adds	r3, r7, #4
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f001 fa0d 	bl	8004ef0 <get_uptime>
	get_timestamp(timestamp);
 8003ad6:	f107 0308 	add.w	r3, r7, #8
 8003ada:	4618      	mov	r0, r3
 8003adc:	f001 fa58 	bl	8004f90 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8003ae0:	f001 feb2 	bl	8005848 <get_rail_monitor>
 8003ae4:	64f8      	str	r0, [r7, #76]	; 0x4c


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003ae6:	23dd      	movs	r3, #221	; 0xdd
 8003ae8:	753b      	strb	r3, [r7, #20]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8003aea:	23dd      	movs	r3, #221	; 0xdd
 8003aec:	757b      	strb	r3, [r7, #21]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003aee:	4b9b      	ldr	r3, [pc, #620]	; (8003d5c <create_hk_packet+0x294>)
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	75bb      	strb	r3, [r7, #22]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8003afa:	4b98      	ldr	r3, [pc, #608]	; (8003d5c <create_hk_packet+0x294>)
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	75fb      	strb	r3, [r7, #23]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b04:	889b      	ldrh	r3, [r3, #4]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	763b      	strb	r3, [r7, #24]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b10:	889b      	ldrh	r3, [r3, #4]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	767b      	strb	r3, [r7, #25]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b18:	330a      	adds	r3, #10
 8003b1a:	889b      	ldrh	r3, [r3, #4]
 8003b1c:	0a1b      	lsrs	r3, r3, #8
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	76bb      	strb	r3, [r7, #26]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b26:	330a      	adds	r3, #10
 8003b28:	889b      	ldrh	r3, [r3, #4]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	76fb      	strb	r3, [r7, #27]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b30:	3314      	adds	r3, #20
 8003b32:	889b      	ldrh	r3, [r3, #4]
 8003b34:	0a1b      	lsrs	r3, r3, #8
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	773b      	strb	r3, [r7, #28]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b3e:	3314      	adds	r3, #20
 8003b40:	889b      	ldrh	r3, [r3, #4]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	777b      	strb	r3, [r7, #29]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8003b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b48:	331e      	adds	r3, #30
 8003b4a:	889b      	ldrh	r3, [r3, #4]
 8003b4c:	0a1b      	lsrs	r3, r3, #8
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	77bb      	strb	r3, [r7, #30]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b56:	331e      	adds	r3, #30
 8003b58:	889b      	ldrh	r3, [r3, #4]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	77fb      	strb	r3, [r7, #31]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b60:	3328      	adds	r3, #40	; 0x28
 8003b62:	889b      	ldrh	r3, [r3, #4]
 8003b64:	0a1b      	lsrs	r3, r3, #8
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b70:	3328      	adds	r3, #40	; 0x28
 8003b72:	889b      	ldrh	r3, [r3, #4]
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8003b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7c:	3332      	adds	r3, #50	; 0x32
 8003b7e:	889b      	ldrh	r3, [r3, #4]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8003b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b8c:	3332      	adds	r3, #50	; 0x32
 8003b8e:	889b      	ldrh	r3, [r3, #4]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b98:	333c      	adds	r3, #60	; 0x3c
 8003b9a:	889b      	ldrh	r3, [r3, #4]
 8003b9c:	0a1b      	lsrs	r3, r3, #8
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8003ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba8:	333c      	adds	r3, #60	; 0x3c
 8003baa:	889b      	ldrh	r3, [r3, #4]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8003bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb4:	3346      	adds	r3, #70	; 0x46
 8003bb6:	889b      	ldrh	r3, [r3, #4]
 8003bb8:	0a1b      	lsrs	r3, r3, #8
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8003bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc4:	3346      	adds	r3, #70	; 0x46
 8003bc6:	889b      	ldrh	r3, [r3, #4]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8003bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd0:	3350      	adds	r3, #80	; 0x50
 8003bd2:	889b      	ldrh	r3, [r3, #4]
 8003bd4:	0a1b      	lsrs	r3, r3, #8
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8003bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be0:	3350      	adds	r3, #80	; 0x50
 8003be2:	889b      	ldrh	r3, [r3, #4]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8003bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bec:	335a      	adds	r3, #90	; 0x5a
 8003bee:	889b      	ldrh	r3, [r3, #4]
 8003bf0:	0a1b      	lsrs	r3, r3, #8
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8003bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bfc:	335a      	adds	r3, #90	; 0x5a
 8003bfe:	889b      	ldrh	r3, [r3, #4]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 8003c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c08:	3364      	adds	r3, #100	; 0x64
 8003c0a:	889b      	ldrh	r3, [r3, #4]
 8003c0c:	0a1b      	lsrs	r3, r3, #8
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 8003c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c18:	3364      	adds	r3, #100	; 0x64
 8003c1a:	889b      	ldrh	r3, [r3, #4]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 8003c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c24:	336e      	adds	r3, #110	; 0x6e
 8003c26:	889b      	ldrh	r3, [r3, #4]
 8003c28:	0a1b      	lsrs	r3, r3, #8
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 8003c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c34:	336e      	adds	r3, #110	; 0x6e
 8003c36:	889b      	ldrh	r3, [r3, #4]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 8003c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c40:	3378      	adds	r3, #120	; 0x78
 8003c42:	889b      	ldrh	r3, [r3, #4]
 8003c44:	0a1b      	lsrs	r3, r3, #8
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8003c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c50:	3378      	adds	r3, #120	; 0x78
 8003c52:	889b      	ldrh	r3, [r3, #4]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8003c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5c:	3382      	adds	r3, #130	; 0x82
 8003c5e:	889b      	ldrh	r3, [r3, #4]
 8003c60:	0a1b      	lsrs	r3, r3, #8
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8003c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c6c:	3382      	adds	r3, #130	; 0x82
 8003c6e:	889b      	ldrh	r3, [r3, #4]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8003c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c78:	338c      	adds	r3, #140	; 0x8c
 8003c7a:	889b      	ldrh	r3, [r3, #4]
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8003c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c88:	338c      	adds	r3, #140	; 0x8c
 8003c8a:	889b      	ldrh	r3, [r3, #4]
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8003c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c94:	3396      	adds	r3, #150	; 0x96
 8003c96:	889b      	ldrh	r3, [r3, #4]
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8003ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca4:	3396      	adds	r3, #150	; 0x96
 8003ca6:	889b      	ldrh	r3, [r3, #4]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8003cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb0:	33a0      	adds	r3, #160	; 0xa0
 8003cb2:	889b      	ldrh	r3, [r3, #4]
 8003cb4:	0a1b      	lsrs	r3, r3, #8
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8003cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc0:	33a0      	adds	r3, #160	; 0xa0
 8003cc2:	889b      	ldrh	r3, [r3, #4]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8003cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ccc:	33aa      	adds	r3, #170	; 0xaa
 8003cce:	889b      	ldrh	r3, [r3, #4]
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8003cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cdc:	33aa      	adds	r3, #170	; 0xaa
 8003cde:	889b      	ldrh	r3, [r3, #4]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[40] = timestamp[0];
 8003ce6:	7a3b      	ldrb	r3, [r7, #8]
 8003ce8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[41] = timestamp[1];
 8003cec:	7a7b      	ldrb	r3, [r7, #9]
 8003cee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[42] = timestamp[2];
 8003cf2:	7abb      	ldrb	r3, [r7, #10]
 8003cf4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[43] = timestamp[3];
 8003cf8:	7afb      	ldrb	r3, [r7, #11]
 8003cfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[44] = timestamp[4];
 8003cfe:	7b3b      	ldrb	r3, [r7, #12]
 8003d00:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[45] = timestamp[5];
 8003d04:	7b7b      	ldrb	r3, [r7, #13]
 8003d06:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	buffer[46] = timestamp[6];
 8003d0a:	7bbb      	ldrb	r3, [r7, #14]
 8003d0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	buffer[47] = timestamp[7];
 8003d10:	7bfb      	ldrb	r3, [r7, #15]
 8003d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	buffer[48] = timestamp[8];
 8003d16:	7c3b      	ldrb	r3, [r7, #16]
 8003d18:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer[49] = timestamp[9];
 8003d1c:	7c7b      	ldrb	r3, [r7, #17]
 8003d1e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer[50] = uptime[0];
 8003d22:	793b      	ldrb	r3, [r7, #4]
 8003d24:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer[51] = uptime[1];
 8003d28:	797b      	ldrb	r3, [r7, #5]
 8003d2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer[52] = uptime[2];
 8003d2e:	79bb      	ldrb	r3, [r7, #6]
 8003d30:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer[53] = uptime[3];
 8003d34:	79fb      	ldrb	r3, [r7, #7]
 8003d36:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8003d3a:	f107 0114 	add.w	r1, r7, #20
 8003d3e:	2364      	movs	r3, #100	; 0x64
 8003d40:	2236      	movs	r2, #54	; 0x36
 8003d42:	4807      	ldr	r0, [pc, #28]	; (8003d60 <create_hk_packet+0x298>)
 8003d44:	f010 f950 	bl	8013fe8 <HAL_UART_Transmit>

	hk_seq++;
 8003d48:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <create_hk_packet+0x294>)
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	4b02      	ldr	r3, [pc, #8]	; (8003d5c <create_hk_packet+0x294>)
 8003d52:	801a      	strh	r2, [r3, #0]
}
 8003d54:	bf00      	nop
 8003d56:	3750      	adds	r7, #80	; 0x50
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	24001af0 	.word	0x24001af0
 8003d60:	24001e3c 	.word	0x24001e3c

08003d64 <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <reset_packet_sequence_numbers+0x20>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <reset_packet_sequence_numbers+0x24>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <reset_packet_sequence_numbers+0x28>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	801a      	strh	r2, [r3, #0]
}
 8003d7a:	bf00      	nop
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	24001aea 	.word	0x24001aea
 8003d88:	24001aec 	.word	0x24001aec
 8003d8c:	24001af0 	.word	0x24001af0

08003d90 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003d96:	1d3b      	adds	r3, r7, #4
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	605a      	str	r2, [r3, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	60da      	str	r2, [r3, #12]
 8003da2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003da4:	2300      	movs	r3, #0
 8003da6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003da8:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <MX_RTC_Init+0xb4>)
 8003daa:	4a27      	ldr	r2, [pc, #156]	; (8003e48 <MX_RTC_Init+0xb8>)
 8003dac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003dae:	4b25      	ldr	r3, [pc, #148]	; (8003e44 <MX_RTC_Init+0xb4>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 8003db4:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <MX_RTC_Init+0xb4>)
 8003db6:	2263      	movs	r2, #99	; 0x63
 8003db8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8003dba:	4b22      	ldr	r3, [pc, #136]	; (8003e44 <MX_RTC_Init+0xb4>)
 8003dbc:	f242 720f 	movw	r2, #9999	; 0x270f
 8003dc0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003dc2:	4b20      	ldr	r3, [pc, #128]	; (8003e44 <MX_RTC_Init+0xb4>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003dc8:	4b1e      	ldr	r3, [pc, #120]	; (8003e44 <MX_RTC_Init+0xb4>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <MX_RTC_Init+0xb4>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <MX_RTC_Init+0xb4>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003dda:	481a      	ldr	r0, [pc, #104]	; (8003e44 <MX_RTC_Init+0xb4>)
 8003ddc:	f00d fbea 	bl	80115b4 <HAL_RTC_Init>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003de6:	f7ff fdbd 	bl	8003964 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003dfe:	1d3b      	adds	r3, r7, #4
 8003e00:	2201      	movs	r2, #1
 8003e02:	4619      	mov	r1, r3
 8003e04:	480f      	ldr	r0, [pc, #60]	; (8003e44 <MX_RTC_Init+0xb4>)
 8003e06:	f00d fc57 	bl	80116b8 <HAL_RTC_SetTime>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003e10:	f7ff fda8 	bl	8003964 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003e14:	2301      	movs	r3, #1
 8003e16:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003e24:	463b      	mov	r3, r7
 8003e26:	2201      	movs	r2, #1
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4806      	ldr	r0, [pc, #24]	; (8003e44 <MX_RTC_Init+0xb4>)
 8003e2c:	f00d fd3e 	bl	80118ac <HAL_RTC_SetDate>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003e36:	f7ff fd95 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003e3a:	bf00      	nop
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	24001af4 	.word	0x24001af4
 8003e48:	58004000 	.word	0x58004000

08003e4c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b0b2      	sub	sp, #200	; 0xc8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e54:	f107 0308 	add.w	r3, r7, #8
 8003e58:	22c0      	movs	r2, #192	; 0xc0
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f016 f8ed 	bl	801a03c <memset>
  if(rtcHandle->Instance==RTC)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a10      	ldr	r2, [pc, #64]	; (8003ea8 <HAL_RTC_MspInit+0x5c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d118      	bne.n	8003e9e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003e6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003e78:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <HAL_RTC_MspInit+0x60>)
 8003e7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e7e:	f107 0308 	add.w	r3, r7, #8
 8003e82:	4618      	mov	r0, r3
 8003e84:	f00a fe98 	bl	800ebb8 <HAL_RCCEx_PeriphCLKConfig>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8003e8e:	f7ff fd69 	bl	8003964 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003e92:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <HAL_RTC_MspInit+0x64>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a06      	ldr	r2, [pc, #24]	; (8003eb0 <HAL_RTC_MspInit+0x64>)
 8003e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003e9e:	bf00      	nop
 8003ea0:	37c8      	adds	r7, #200	; 0xc8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	58004000 	.word	0x58004000
 8003eac:	00019300 	.word	0x00019300
 8003eb0:	58024400 	.word	0x58024400

08003eb4 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8003ebe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003ec2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ec6:	481f      	ldr	r0, [pc, #124]	; (8003f44 <init_adc_dma+0x90>)
 8003ec8:	f003 f92a 	bl	8007120 <HAL_ADCEx_Calibration_Start>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003ed2:	f7ff fd47 	bl	8003964 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8003ed6:	220b      	movs	r2, #11
 8003ed8:	491b      	ldr	r1, [pc, #108]	; (8003f48 <init_adc_dma+0x94>)
 8003eda:	481a      	ldr	r0, [pc, #104]	; (8003f44 <init_adc_dma+0x90>)
 8003edc:	f002 f9fe 	bl	80062dc <HAL_ADC_Start_DMA>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003ee6:	f7ff fd3d 	bl	8003964 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8003eea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003eee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ef2:	4816      	ldr	r0, [pc, #88]	; (8003f4c <init_adc_dma+0x98>)
 8003ef4:	f003 f914 	bl	8007120 <HAL_ADCEx_Calibration_Start>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8003efe:	f7ff fd31 	bl	8003964 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8003f02:	2204      	movs	r2, #4
 8003f04:	4912      	ldr	r1, [pc, #72]	; (8003f50 <init_adc_dma+0x9c>)
 8003f06:	4811      	ldr	r0, [pc, #68]	; (8003f4c <init_adc_dma+0x98>)
 8003f08:	f002 f9e8 	bl	80062dc <HAL_ADC_Start_DMA>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8003f12:	f7ff fd27 	bl	8003964 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 8003f16:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <init_adc_dma+0xa0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <init_adc_dma+0xa0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f24:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 8003f26:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <init_adc_dma+0xa4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <init_adc_dma+0xa4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f34:	601a      	str	r2, [r3, #0]


	status = 1;
 8003f36:	2301      	movs	r3, #1
 8003f38:	71fb      	strb	r3, [r7, #7]

	return status;
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	2400015c 	.word	0x2400015c
 8003f48:	24001b20 	.word	0x24001b20
 8003f4c:	240001c0 	.word	0x240001c0
 8003f50:	24001b40 	.word	0x24001b40
 8003f54:	24001bdc 	.word	0x24001bdc
 8003f58:	24001b54 	.word	0x24001b54

08003f5c <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8003f64:	2201      	movs	r2, #1
 8003f66:	490b      	ldr	r1, [pc, #44]	; (8003f94 <sample_pmt_spi+0x38>)
 8003f68:	480b      	ldr	r0, [pc, #44]	; (8003f98 <sample_pmt_spi+0x3c>)
 8003f6a:	f00d ff69 	bl	8011e40 <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8003f6e:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <sample_pmt_spi+0x38>)
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <sample_pmt_spi+0x38>)
 8003f7a:	881b      	ldrh	r3, [r3, #0]
 8003f7c:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	7bfa      	ldrb	r2, [r7, #15]
 8003f82:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3301      	adds	r3, #1
 8003f88:	7bba      	ldrb	r2, [r7, #14]
 8003f8a:	701a      	strb	r2, [r3, #0]
}
 8003f8c:	bf00      	nop
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	24001b4c 	.word	0x24001b4c
 8003f98:	24001b54 	.word	0x24001b54

08003f9c <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	490b      	ldr	r1, [pc, #44]	; (8003fd4 <sample_erpa_spi+0x38>)
 8003fa8:	480b      	ldr	r0, [pc, #44]	; (8003fd8 <sample_erpa_spi+0x3c>)
 8003faa:	f00d ff49 	bl	8011e40 <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 8003fae:	4b09      	ldr	r3, [pc, #36]	; (8003fd4 <sample_erpa_spi+0x38>)
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <sample_erpa_spi+0x38>)
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	7bfa      	ldrb	r2, [r7, #15]
 8003fc2:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	7bba      	ldrb	r2, [r7, #14]
 8003fca:	701a      	strb	r2, [r3, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	24001b48 	.word	0x24001b48
 8003fd8:	24001bdc 	.word	0x24001bdc

08003fdc <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <sample_erpa_adc+0x20>)
 8003fe6:	885b      	ldrh	r3, [r3, #2]
 8003fe8:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	89fa      	ldrh	r2, [r7, #14]
 8003fee:	801a      	strh	r2, [r3, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	24001b20 	.word	0x24001b20

08004000 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8004008:	2390      	movs	r3, #144	; 0x90
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f8a2 	bl	8004154 <poll_i2c_sensor>
 8004010:	4603      	mov	r3, r0
 8004012:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8004014:	2394      	movs	r3, #148	; 0x94
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f89c 	bl	8004154 <poll_i2c_sensor>
 800401c:	4603      	mov	r3, r0
 800401e:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8004020:	2392      	movs	r3, #146	; 0x92
 8004022:	4618      	mov	r0, r3
 8004024:	f000 f896 	bl	8004154 <poll_i2c_sensor>
 8004028:	4603      	mov	r3, r0
 800402a:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 800402c:	2396      	movs	r3, #150	; 0x96
 800402e:	4618      	mov	r0, r3
 8004030:	f000 f890 	bl	8004154 <poll_i2c_sensor>
 8004034:	4603      	mov	r3, r0
 8004036:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	89fa      	ldrh	r2, [r7, #14]
 800403c:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3302      	adds	r3, #2
 8004042:	89ba      	ldrh	r2, [r7, #12]
 8004044:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3304      	adds	r3, #4
 800404a:	897a      	ldrh	r2, [r7, #10]
 800404c:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3306      	adds	r3, #6
 8004052:	893a      	ldrh	r2, [r7, #8]
 8004054:	801a      	strh	r2, [r3, #0]
}
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
	...

08004060 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8004060:	b480      	push	{r7}
 8004062:	b089      	sub	sp, #36	; 0x24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8004068:	4b25      	ldr	r3, [pc, #148]	; (8004100 <sample_hk_adc1+0xa0>)
 800406a:	8a9b      	ldrh	r3, [r3, #20]
 800406c:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 800406e:	4b24      	ldr	r3, [pc, #144]	; (8004100 <sample_hk_adc1+0xa0>)
 8004070:	8a1b      	ldrh	r3, [r3, #16]
 8004072:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8004074:	4b22      	ldr	r3, [pc, #136]	; (8004100 <sample_hk_adc1+0xa0>)
 8004076:	899b      	ldrh	r3, [r3, #12]
 8004078:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 800407a:	4b21      	ldr	r3, [pc, #132]	; (8004100 <sample_hk_adc1+0xa0>)
 800407c:	8a5b      	ldrh	r3, [r3, #18]
 800407e:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8004080:	4b1f      	ldr	r3, [pc, #124]	; (8004100 <sample_hk_adc1+0xa0>)
 8004082:	889b      	ldrh	r3, [r3, #4]
 8004084:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8004086:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <sample_hk_adc1+0xa0>)
 8004088:	88db      	ldrh	r3, [r3, #6]
 800408a:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 800408c:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <sample_hk_adc1+0xa0>)
 800408e:	89db      	ldrh	r3, [r3, #14]
 8004090:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8004092:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <sample_hk_adc1+0xa0>)
 8004094:	891b      	ldrh	r3, [r3, #8]
 8004096:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8004098:	4b19      	ldr	r3, [pc, #100]	; (8004100 <sample_hk_adc1+0xa0>)
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 800409e:	4b18      	ldr	r3, [pc, #96]	; (8004100 <sample_hk_adc1+0xa0>)
 80040a0:	895b      	ldrh	r3, [r3, #10]
 80040a2:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8bfa      	ldrh	r2, [r7, #30]
 80040a8:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3302      	adds	r3, #2
 80040ae:	8bba      	ldrh	r2, [r7, #28]
 80040b0:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3304      	adds	r3, #4
 80040b6:	8b7a      	ldrh	r2, [r7, #26]
 80040b8:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3306      	adds	r3, #6
 80040be:	8b3a      	ldrh	r2, [r7, #24]
 80040c0:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3308      	adds	r3, #8
 80040c6:	8afa      	ldrh	r2, [r7, #22]
 80040c8:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	330a      	adds	r3, #10
 80040ce:	8aba      	ldrh	r2, [r7, #20]
 80040d0:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	330c      	adds	r3, #12
 80040d6:	8a7a      	ldrh	r2, [r7, #18]
 80040d8:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	330e      	adds	r3, #14
 80040de:	8a3a      	ldrh	r2, [r7, #16]
 80040e0:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3310      	adds	r3, #16
 80040e6:	89fa      	ldrh	r2, [r7, #14]
 80040e8:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3312      	adds	r3, #18
 80040ee:	89ba      	ldrh	r2, [r7, #12]
 80040f0:	801a      	strh	r2, [r3, #0]
}
 80040f2:	bf00      	nop
 80040f4:	3724      	adds	r7, #36	; 0x24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	24001b20 	.word	0x24001b20

08004104 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 800410c:	4b10      	ldr	r3, [pc, #64]	; (8004150 <sample_hk_adc3+0x4c>)
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8004112:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <sample_hk_adc3+0x4c>)
 8004114:	885b      	ldrh	r3, [r3, #2]
 8004116:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8004118:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <sample_hk_adc3+0x4c>)
 800411a:	889b      	ldrh	r3, [r3, #4]
 800411c:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 800411e:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <sample_hk_adc3+0x4c>)
 8004120:	88db      	ldrh	r3, [r3, #6]
 8004122:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	89fa      	ldrh	r2, [r7, #14]
 8004128:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3302      	adds	r3, #2
 800412e:	89ba      	ldrh	r2, [r7, #12]
 8004130:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3304      	adds	r3, #4
 8004136:	897a      	ldrh	r2, [r7, #10]
 8004138:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	3306      	adds	r3, #6
 800413e:	893a      	ldrh	r2, [r7, #8]
 8004140:	801a      	strh	r2, [r3, #0]
}
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	24001b40 	.word	0x24001b40

08004154 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 800415e:	2200      	movs	r2, #0
 8004160:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <poll_i2c_sensor+0x90>)
 8004162:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	b299      	uxth	r1, r3
 8004168:	2301      	movs	r3, #1
 800416a:	4a1e      	ldr	r2, [pc, #120]	; (80041e4 <poll_i2c_sensor+0x90>)
 800416c:	481e      	ldr	r0, [pc, #120]	; (80041e8 <poll_i2c_sensor+0x94>)
 800416e:	f007 f9ad 	bl	800b4cc <HAL_I2C_Master_Transmit_DMA>
 8004172:	4603      	mov	r3, r0
 8004174:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8004176:	7b7b      	ldrb	r3, [r7, #13]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 800417c:	481b      	ldr	r0, [pc, #108]	; (80041ec <poll_i2c_sensor+0x98>)
 800417e:	f015 ffd3 	bl	801a128 <puts>
 8004182:	e028      	b.n	80041d6 <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 8004184:	bf00      	nop
 8004186:	4818      	ldr	r0, [pc, #96]	; (80041e8 <poll_i2c_sensor+0x94>)
 8004188:	f007 fc87 	bl	800ba9a <HAL_I2C_GetState>
 800418c:	4603      	mov	r3, r0
 800418e:	2b20      	cmp	r3, #32
 8004190:	d1f9      	bne.n	8004186 <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	b299      	uxth	r1, r3
 8004196:	2302      	movs	r3, #2
 8004198:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <poll_i2c_sensor+0x90>)
 800419a:	4813      	ldr	r0, [pc, #76]	; (80041e8 <poll_i2c_sensor+0x94>)
 800419c:	f007 faaa 	bl	800b6f4 <HAL_I2C_Master_Receive_DMA>
 80041a0:	4603      	mov	r3, r0
 80041a2:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 80041a4:	7b7b      	ldrb	r3, [r7, #13]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 80041aa:	4811      	ldr	r0, [pc, #68]	; (80041f0 <poll_i2c_sensor+0x9c>)
 80041ac:	f015 ffbc 	bl	801a128 <puts>
 80041b0:	e011      	b.n	80041d6 <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80041b2:	bf00      	nop
 80041b4:	480c      	ldr	r0, [pc, #48]	; (80041e8 <poll_i2c_sensor+0x94>)
 80041b6:	f007 fc70 	bl	800ba9a <HAL_I2C_GetState>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d1f9      	bne.n	80041b4 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 80041c0:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <poll_i2c_sensor+0x90>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 80041c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041cc:	4a05      	ldr	r2, [pc, #20]	; (80041e4 <poll_i2c_sensor+0x90>)
 80041ce:	7852      	ldrb	r2, [r2, #1]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	10db      	asrs	r3, r3, #3
 80041d4:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 80041d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	24001b50 	.word	0x24001b50
 80041e8:	2400193c 	.word	0x2400193c
 80041ec:	0801ac90 	.word	0x0801ac90
 80041f0:	0801aca0 	.word	0x0801aca0

080041f4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80041f8:	4b28      	ldr	r3, [pc, #160]	; (800429c <MX_SPI1_Init+0xa8>)
 80041fa:	4a29      	ldr	r2, [pc, #164]	; (80042a0 <MX_SPI1_Init+0xac>)
 80041fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80041fe:	4b27      	ldr	r3, [pc, #156]	; (800429c <MX_SPI1_Init+0xa8>)
 8004200:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004204:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004206:	4b25      	ldr	r3, [pc, #148]	; (800429c <MX_SPI1_Init+0xa8>)
 8004208:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800420c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800420e:	4b23      	ldr	r3, [pc, #140]	; (800429c <MX_SPI1_Init+0xa8>)
 8004210:	220f      	movs	r2, #15
 8004212:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004214:	4b21      	ldr	r3, [pc, #132]	; (800429c <MX_SPI1_Init+0xa8>)
 8004216:	2200      	movs	r2, #0
 8004218:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800421a:	4b20      	ldr	r3, [pc, #128]	; (800429c <MX_SPI1_Init+0xa8>)
 800421c:	2200      	movs	r2, #0
 800421e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004220:	4b1e      	ldr	r3, [pc, #120]	; (800429c <MX_SPI1_Init+0xa8>)
 8004222:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004226:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004228:	4b1c      	ldr	r3, [pc, #112]	; (800429c <MX_SPI1_Init+0xa8>)
 800422a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800422e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004230:	4b1a      	ldr	r3, [pc, #104]	; (800429c <MX_SPI1_Init+0xa8>)
 8004232:	2200      	movs	r2, #0
 8004234:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004236:	4b19      	ldr	r3, [pc, #100]	; (800429c <MX_SPI1_Init+0xa8>)
 8004238:	2200      	movs	r2, #0
 800423a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800423c:	4b17      	ldr	r3, [pc, #92]	; (800429c <MX_SPI1_Init+0xa8>)
 800423e:	2200      	movs	r2, #0
 8004240:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004242:	4b16      	ldr	r3, [pc, #88]	; (800429c <MX_SPI1_Init+0xa8>)
 8004244:	2200      	movs	r2, #0
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004248:	4b14      	ldr	r3, [pc, #80]	; (800429c <MX_SPI1_Init+0xa8>)
 800424a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800424e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004250:	4b12      	ldr	r3, [pc, #72]	; (800429c <MX_SPI1_Init+0xa8>)
 8004252:	2200      	movs	r2, #0
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004256:	4b11      	ldr	r3, [pc, #68]	; (800429c <MX_SPI1_Init+0xa8>)
 8004258:	2200      	movs	r2, #0
 800425a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800425c:	4b0f      	ldr	r3, [pc, #60]	; (800429c <MX_SPI1_Init+0xa8>)
 800425e:	2200      	movs	r2, #0
 8004260:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004262:	4b0e      	ldr	r3, [pc, #56]	; (800429c <MX_SPI1_Init+0xa8>)
 8004264:	2200      	movs	r2, #0
 8004266:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <MX_SPI1_Init+0xa8>)
 800426a:	2200      	movs	r2, #0
 800426c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <MX_SPI1_Init+0xa8>)
 8004270:	2200      	movs	r2, #0
 8004272:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004274:	4b09      	ldr	r3, [pc, #36]	; (800429c <MX_SPI1_Init+0xa8>)
 8004276:	2200      	movs	r2, #0
 8004278:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800427a:	4b08      	ldr	r3, [pc, #32]	; (800429c <MX_SPI1_Init+0xa8>)
 800427c:	2200      	movs	r2, #0
 800427e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004280:	4b06      	ldr	r3, [pc, #24]	; (800429c <MX_SPI1_Init+0xa8>)
 8004282:	2200      	movs	r2, #0
 8004284:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004286:	4805      	ldr	r0, [pc, #20]	; (800429c <MX_SPI1_Init+0xa8>)
 8004288:	f00d fcb6 	bl	8011bf8 <HAL_SPI_Init>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8004292:	f7ff fb67 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	24001b54 	.word	0x24001b54
 80042a0:	40013000 	.word	0x40013000

080042a4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80042a8:	4b28      	ldr	r3, [pc, #160]	; (800434c <MX_SPI2_Init+0xa8>)
 80042aa:	4a29      	ldr	r2, [pc, #164]	; (8004350 <MX_SPI2_Init+0xac>)
 80042ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80042ae:	4b27      	ldr	r3, [pc, #156]	; (800434c <MX_SPI2_Init+0xa8>)
 80042b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80042b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80042b6:	4b25      	ldr	r3, [pc, #148]	; (800434c <MX_SPI2_Init+0xa8>)
 80042b8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80042bc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80042be:	4b23      	ldr	r3, [pc, #140]	; (800434c <MX_SPI2_Init+0xa8>)
 80042c0:	220f      	movs	r2, #15
 80042c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042c4:	4b21      	ldr	r3, [pc, #132]	; (800434c <MX_SPI2_Init+0xa8>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042ca:	4b20      	ldr	r3, [pc, #128]	; (800434c <MX_SPI2_Init+0xa8>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80042d0:	4b1e      	ldr	r3, [pc, #120]	; (800434c <MX_SPI2_Init+0xa8>)
 80042d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80042d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80042d8:	4b1c      	ldr	r3, [pc, #112]	; (800434c <MX_SPI2_Init+0xa8>)
 80042da:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80042de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <MX_SPI2_Init+0xa8>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80042e6:	4b19      	ldr	r3, [pc, #100]	; (800434c <MX_SPI2_Init+0xa8>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ec:	4b17      	ldr	r3, [pc, #92]	; (800434c <MX_SPI2_Init+0xa8>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80042f2:	4b16      	ldr	r3, [pc, #88]	; (800434c <MX_SPI2_Init+0xa8>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80042f8:	4b14      	ldr	r3, [pc, #80]	; (800434c <MX_SPI2_Init+0xa8>)
 80042fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004300:	4b12      	ldr	r3, [pc, #72]	; (800434c <MX_SPI2_Init+0xa8>)
 8004302:	2200      	movs	r2, #0
 8004304:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004306:	4b11      	ldr	r3, [pc, #68]	; (800434c <MX_SPI2_Init+0xa8>)
 8004308:	2200      	movs	r2, #0
 800430a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800430c:	4b0f      	ldr	r3, [pc, #60]	; (800434c <MX_SPI2_Init+0xa8>)
 800430e:	2200      	movs	r2, #0
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004312:	4b0e      	ldr	r3, [pc, #56]	; (800434c <MX_SPI2_Init+0xa8>)
 8004314:	2200      	movs	r2, #0
 8004316:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <MX_SPI2_Init+0xa8>)
 800431a:	2200      	movs	r2, #0
 800431c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800431e:	4b0b      	ldr	r3, [pc, #44]	; (800434c <MX_SPI2_Init+0xa8>)
 8004320:	2200      	movs	r2, #0
 8004322:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004324:	4b09      	ldr	r3, [pc, #36]	; (800434c <MX_SPI2_Init+0xa8>)
 8004326:	2200      	movs	r2, #0
 8004328:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <MX_SPI2_Init+0xa8>)
 800432c:	2200      	movs	r2, #0
 800432e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004330:	4b06      	ldr	r3, [pc, #24]	; (800434c <MX_SPI2_Init+0xa8>)
 8004332:	2200      	movs	r2, #0
 8004334:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004336:	4805      	ldr	r0, [pc, #20]	; (800434c <MX_SPI2_Init+0xa8>)
 8004338:	f00d fc5e 	bl	8011bf8 <HAL_SPI_Init>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8004342:	f7ff fb0f 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004346:	bf00      	nop
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	24001bdc 	.word	0x24001bdc
 8004350:	40003800 	.word	0x40003800

08004354 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b0bc      	sub	sp, #240	; 0xf0
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800435c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	60da      	str	r2, [r3, #12]
 800436a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800436c:	f107 0318 	add.w	r3, r7, #24
 8004370:	22c0      	movs	r2, #192	; 0xc0
 8004372:	2100      	movs	r1, #0
 8004374:	4618      	mov	r0, r3
 8004376:	f015 fe61 	bl	801a03c <memset>
  if(spiHandle->Instance==SPI1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a83      	ldr	r2, [pc, #524]	; (800458c <HAL_SPI_MspInit+0x238>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d17c      	bne.n	800447e <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004384:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004390:	2300      	movs	r3, #0
 8004392:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004394:	f107 0318 	add.w	r3, r7, #24
 8004398:	4618      	mov	r0, r3
 800439a:	f00a fc0d 	bl	800ebb8 <HAL_RCCEx_PeriphCLKConfig>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80043a4:	f7ff fade 	bl	8003964 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80043a8:	4b79      	ldr	r3, [pc, #484]	; (8004590 <HAL_SPI_MspInit+0x23c>)
 80043aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043ae:	4a78      	ldr	r2, [pc, #480]	; (8004590 <HAL_SPI_MspInit+0x23c>)
 80043b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80043b8:	4b75      	ldr	r3, [pc, #468]	; (8004590 <HAL_SPI_MspInit+0x23c>)
 80043ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043c6:	4b72      	ldr	r3, [pc, #456]	; (8004590 <HAL_SPI_MspInit+0x23c>)
 80043c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043cc:	4a70      	ldr	r2, [pc, #448]	; (8004590 <HAL_SPI_MspInit+0x23c>)
 80043ce:	f043 0302 	orr.w	r3, r3, #2
 80043d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043d6:	4b6e      	ldr	r3, [pc, #440]	; (8004590 <HAL_SPI_MspInit+0x23c>)
 80043d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80043e4:	2318      	movs	r3, #24
 80043e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ea:	2302      	movs	r3, #2
 80043ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80043fc:	2305      	movs	r3, #5
 80043fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004402:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004406:	4619      	mov	r1, r3
 8004408:	4862      	ldr	r0, [pc, #392]	; (8004594 <HAL_SPI_MspInit+0x240>)
 800440a:	f006 fde1 	bl	800afd0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800440e:	4b62      	ldr	r3, [pc, #392]	; (8004598 <HAL_SPI_MspInit+0x244>)
 8004410:	4a62      	ldr	r2, [pc, #392]	; (800459c <HAL_SPI_MspInit+0x248>)
 8004412:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004414:	4b60      	ldr	r3, [pc, #384]	; (8004598 <HAL_SPI_MspInit+0x244>)
 8004416:	2225      	movs	r2, #37	; 0x25
 8004418:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800441a:	4b5f      	ldr	r3, [pc, #380]	; (8004598 <HAL_SPI_MspInit+0x244>)
 800441c:	2200      	movs	r2, #0
 800441e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004420:	4b5d      	ldr	r3, [pc, #372]	; (8004598 <HAL_SPI_MspInit+0x244>)
 8004422:	2200      	movs	r2, #0
 8004424:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004426:	4b5c      	ldr	r3, [pc, #368]	; (8004598 <HAL_SPI_MspInit+0x244>)
 8004428:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800442c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800442e:	4b5a      	ldr	r3, [pc, #360]	; (8004598 <HAL_SPI_MspInit+0x244>)
 8004430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004434:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004436:	4b58      	ldr	r3, [pc, #352]	; (8004598 <HAL_SPI_MspInit+0x244>)
 8004438:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800443c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800443e:	4b56      	ldr	r3, [pc, #344]	; (8004598 <HAL_SPI_MspInit+0x244>)
 8004440:	2200      	movs	r2, #0
 8004442:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004444:	4b54      	ldr	r3, [pc, #336]	; (8004598 <HAL_SPI_MspInit+0x244>)
 8004446:	2200      	movs	r2, #0
 8004448:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800444a:	4b53      	ldr	r3, [pc, #332]	; (8004598 <HAL_SPI_MspInit+0x244>)
 800444c:	2200      	movs	r2, #0
 800444e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004450:	4851      	ldr	r0, [pc, #324]	; (8004598 <HAL_SPI_MspInit+0x244>)
 8004452:	f003 fc8d 	bl	8007d70 <HAL_DMA_Init>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 800445c:	f7ff fa82 	bl	8003964 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a4d      	ldr	r2, [pc, #308]	; (8004598 <HAL_SPI_MspInit+0x244>)
 8004464:	67da      	str	r2, [r3, #124]	; 0x7c
 8004466:	4a4c      	ldr	r2, [pc, #304]	; (8004598 <HAL_SPI_MspInit+0x244>)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800446c:	2200      	movs	r2, #0
 800446e:	2105      	movs	r1, #5
 8004470:	2023      	movs	r0, #35	; 0x23
 8004472:	f003 f84f 	bl	8007514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004476:	2023      	movs	r0, #35	; 0x23
 8004478:	f003 f866 	bl	8007548 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800447c:	e081      	b.n	8004582 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a47      	ldr	r2, [pc, #284]	; (80045a0 <HAL_SPI_MspInit+0x24c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d17c      	bne.n	8004582 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8004488:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800448c:	f04f 0300 	mov.w	r3, #0
 8004490:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004494:	2300      	movs	r3, #0
 8004496:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004498:	f107 0318 	add.w	r3, r7, #24
 800449c:	4618      	mov	r0, r3
 800449e:	f00a fb8b 	bl	800ebb8 <HAL_RCCEx_PeriphCLKConfig>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_SPI_MspInit+0x158>
      Error_Handler();
 80044a8:	f7ff fa5c 	bl	8003964 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80044ac:	4b38      	ldr	r3, [pc, #224]	; (8004590 <HAL_SPI_MspInit+0x23c>)
 80044ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044b2:	4a37      	ldr	r2, [pc, #220]	; (8004590 <HAL_SPI_MspInit+0x23c>)
 80044b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044bc:	4b34      	ldr	r3, [pc, #208]	; (8004590 <HAL_SPI_MspInit+0x23c>)
 80044be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ca:	4b31      	ldr	r3, [pc, #196]	; (8004590 <HAL_SPI_MspInit+0x23c>)
 80044cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044d0:	4a2f      	ldr	r2, [pc, #188]	; (8004590 <HAL_SPI_MspInit+0x23c>)
 80044d2:	f043 0302 	orr.w	r3, r3, #2
 80044d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044da:	4b2d      	ldr	r3, [pc, #180]	; (8004590 <HAL_SPI_MspInit+0x23c>)
 80044dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80044e8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80044ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f0:	2302      	movs	r3, #2
 80044f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044fc:	2300      	movs	r3, #0
 80044fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004502:	2305      	movs	r3, #5
 8004504:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004508:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800450c:	4619      	mov	r1, r3
 800450e:	4821      	ldr	r0, [pc, #132]	; (8004594 <HAL_SPI_MspInit+0x240>)
 8004510:	f006 fd5e 	bl	800afd0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004514:	4b23      	ldr	r3, [pc, #140]	; (80045a4 <HAL_SPI_MspInit+0x250>)
 8004516:	4a24      	ldr	r2, [pc, #144]	; (80045a8 <HAL_SPI_MspInit+0x254>)
 8004518:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800451a:	4b22      	ldr	r3, [pc, #136]	; (80045a4 <HAL_SPI_MspInit+0x250>)
 800451c:	2227      	movs	r2, #39	; 0x27
 800451e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004520:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <HAL_SPI_MspInit+0x250>)
 8004522:	2200      	movs	r2, #0
 8004524:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004526:	4b1f      	ldr	r3, [pc, #124]	; (80045a4 <HAL_SPI_MspInit+0x250>)
 8004528:	2200      	movs	r2, #0
 800452a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800452c:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <HAL_SPI_MspInit+0x250>)
 800452e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004532:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004534:	4b1b      	ldr	r3, [pc, #108]	; (80045a4 <HAL_SPI_MspInit+0x250>)
 8004536:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800453a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800453c:	4b19      	ldr	r3, [pc, #100]	; (80045a4 <HAL_SPI_MspInit+0x250>)
 800453e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004542:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004544:	4b17      	ldr	r3, [pc, #92]	; (80045a4 <HAL_SPI_MspInit+0x250>)
 8004546:	2200      	movs	r2, #0
 8004548:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800454a:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <HAL_SPI_MspInit+0x250>)
 800454c:	2200      	movs	r2, #0
 800454e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004550:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <HAL_SPI_MspInit+0x250>)
 8004552:	2200      	movs	r2, #0
 8004554:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004556:	4813      	ldr	r0, [pc, #76]	; (80045a4 <HAL_SPI_MspInit+0x250>)
 8004558:	f003 fc0a 	bl	8007d70 <HAL_DMA_Init>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_SPI_MspInit+0x212>
      Error_Handler();
 8004562:	f7ff f9ff 	bl	8003964 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a0e      	ldr	r2, [pc, #56]	; (80045a4 <HAL_SPI_MspInit+0x250>)
 800456a:	67da      	str	r2, [r3, #124]	; 0x7c
 800456c:	4a0d      	ldr	r2, [pc, #52]	; (80045a4 <HAL_SPI_MspInit+0x250>)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004572:	2200      	movs	r2, #0
 8004574:	2105      	movs	r1, #5
 8004576:	2024      	movs	r0, #36	; 0x24
 8004578:	f002 ffcc 	bl	8007514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800457c:	2024      	movs	r0, #36	; 0x24
 800457e:	f002 ffe3 	bl	8007548 <HAL_NVIC_EnableIRQ>
}
 8004582:	bf00      	nop
 8004584:	37f0      	adds	r7, #240	; 0xf0
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40013000 	.word	0x40013000
 8004590:	58024400 	.word	0x58024400
 8004594:	58020400 	.word	0x58020400
 8004598:	24001c64 	.word	0x24001c64
 800459c:	40020070 	.word	0x40020070
 80045a0:	40003800 	.word	0x40003800
 80045a4:	24001cdc 	.word	0x24001cdc
 80045a8:	40020058 	.word	0x40020058

080045ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b2:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <HAL_MspInit+0x38>)
 80045b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045b8:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <HAL_MspInit+0x38>)
 80045ba:	f043 0302 	orr.w	r3, r3, #2
 80045be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <HAL_MspInit+0x38>)
 80045c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	607b      	str	r3, [r7, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80045d0:	2200      	movs	r2, #0
 80045d2:	210f      	movs	r1, #15
 80045d4:	f06f 0001 	mvn.w	r0, #1
 80045d8:	f002 ff9c 	bl	8007514 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	58024400 	.word	0x58024400

080045e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b090      	sub	sp, #64	; 0x40
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b0f      	cmp	r3, #15
 80045f4:	d827      	bhi.n	8004646 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80045f6:	2200      	movs	r2, #0
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	2036      	movs	r0, #54	; 0x36
 80045fc:	f002 ff8a 	bl	8007514 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004600:	2036      	movs	r0, #54	; 0x36
 8004602:	f002 ffa1 	bl	8007548 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004606:	4a29      	ldr	r2, [pc, #164]	; (80046ac <HAL_InitTick+0xc4>)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800460c:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <HAL_InitTick+0xc8>)
 800460e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004612:	4a27      	ldr	r2, [pc, #156]	; (80046b0 <HAL_InitTick+0xc8>)
 8004614:	f043 0310 	orr.w	r3, r3, #16
 8004618:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800461c:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_InitTick+0xc8>)
 800461e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800462a:	f107 0210 	add.w	r2, r7, #16
 800462e:	f107 0314 	add.w	r3, r7, #20
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f00a fa7d 	bl	800eb34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <HAL_InitTick+0x6a>
 8004644:	e001      	b.n	800464a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e02b      	b.n	80046a2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800464a:	f00a fa47 	bl	800eadc <HAL_RCC_GetPCLK1Freq>
 800464e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004650:	e004      	b.n	800465c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004652:	f00a fa43 	bl	800eadc <HAL_RCC_GetPCLK1Freq>
 8004656:	4603      	mov	r3, r0
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800465c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800465e:	4a15      	ldr	r2, [pc, #84]	; (80046b4 <HAL_InitTick+0xcc>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	0c9b      	lsrs	r3, r3, #18
 8004666:	3b01      	subs	r3, #1
 8004668:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <HAL_InitTick+0xd0>)
 800466c:	4a13      	ldr	r2, [pc, #76]	; (80046bc <HAL_InitTick+0xd4>)
 800466e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <HAL_InitTick+0xd0>)
 8004672:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004676:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004678:	4a0f      	ldr	r2, [pc, #60]	; (80046b8 <HAL_InitTick+0xd0>)
 800467a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800467e:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <HAL_InitTick+0xd0>)
 8004680:	2200      	movs	r2, #0
 8004682:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004684:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <HAL_InitTick+0xd0>)
 8004686:	2200      	movs	r2, #0
 8004688:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800468a:	480b      	ldr	r0, [pc, #44]	; (80046b8 <HAL_InitTick+0xd0>)
 800468c:	f00e f853 	bl	8012736 <HAL_TIM_Base_Init>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d104      	bne.n	80046a0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004696:	4808      	ldr	r0, [pc, #32]	; (80046b8 <HAL_InitTick+0xd0>)
 8004698:	f00e f8a4 	bl	80127e4 <HAL_TIM_Base_Start_IT>
 800469c:	4603      	mov	r3, r0
 800469e:	e000      	b.n	80046a2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3740      	adds	r7, #64	; 0x40
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	240000c8 	.word	0x240000c8
 80046b0:	58024400 	.word	0x58024400
 80046b4:	431bde83 	.word	0x431bde83
 80046b8:	24001d54 	.word	0x24001d54
 80046bc:	40001000 	.word	0x40001000

080046c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80046c4:	e7fe      	b.n	80046c4 <NMI_Handler+0x4>

080046c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046c6:	b480      	push	{r7}
 80046c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046ca:	e7fe      	b.n	80046ca <HardFault_Handler+0x4>

080046cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046d0:	e7fe      	b.n	80046d0 <MemManage_Handler+0x4>

080046d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046d2:	b480      	push	{r7}
 80046d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046d6:	e7fe      	b.n	80046d6 <BusFault_Handler+0x4>

080046d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046dc:	e7fe      	b.n	80046dc <UsageFault_Handler+0x4>

080046de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046de:	b480      	push	{r7}
 80046e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046e2:	bf00      	nop
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80046f0:	4802      	ldr	r0, [pc, #8]	; (80046fc <DMA1_Stream0_IRQHandler+0x10>)
 80046f2:	f004 fe67 	bl	80093c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80046f6:	bf00      	nop
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	24000224 	.word	0x24000224

08004700 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004704:	4802      	ldr	r0, [pc, #8]	; (8004710 <DMA1_Stream1_IRQHandler+0x10>)
 8004706:	f004 fe5d 	bl	80093c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	2400029c 	.word	0x2400029c

08004714 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004718:	4802      	ldr	r0, [pc, #8]	; (8004724 <DMA1_Stream2_IRQHandler+0x10>)
 800471a:	f004 fe53 	bl	80093c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800471e:	bf00      	nop
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	24001ed0 	.word	0x24001ed0

08004728 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800472c:	4802      	ldr	r0, [pc, #8]	; (8004738 <DMA1_Stream3_IRQHandler+0x10>)
 800472e:	f004 fe49 	bl	80093c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004732:	bf00      	nop
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	24001cdc 	.word	0x24001cdc

0800473c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004740:	4802      	ldr	r0, [pc, #8]	; (800474c <DMA1_Stream4_IRQHandler+0x10>)
 8004742:	f004 fe3f 	bl	80093c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	24001c64 	.word	0x24001c64

08004750 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004754:	4802      	ldr	r0, [pc, #8]	; (8004760 <DMA1_Stream5_IRQHandler+0x10>)
 8004756:	f004 fe35 	bl	80093c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	24000328 	.word	0x24000328

08004764 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004768:	4802      	ldr	r0, [pc, #8]	; (8004774 <DMA1_Stream6_IRQHandler+0x10>)
 800476a:	f004 fe2b 	bl	80093c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800476e:	bf00      	nop
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	24001990 	.word	0x24001990

08004778 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800477c:	4802      	ldr	r0, [pc, #8]	; (8004788 <TIM1_BRK_IRQHandler+0x10>)
 800477e:	f00e fb48 	bl	8012e12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	24001da4 	.word	0x24001da4

0800478c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004790:	4802      	ldr	r0, [pc, #8]	; (800479c <TIM1_UP_IRQHandler+0x10>)
 8004792:	f00e fb3e 	bl	8012e12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	24001da4 	.word	0x24001da4

080047a0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047a4:	4802      	ldr	r0, [pc, #8]	; (80047b0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80047a6:	f00e fb34 	bl	8012e12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	24001da4 	.word	0x24001da4

080047b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80047b8:	4802      	ldr	r0, [pc, #8]	; (80047c4 <TIM1_CC_IRQHandler+0x10>)
 80047ba:	f00e fb2a 	bl	8012e12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	24001da4 	.word	0x24001da4

080047c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80047cc:	4802      	ldr	r0, [pc, #8]	; (80047d8 <TIM2_IRQHandler+0x10>)
 80047ce:	f00e fb20 	bl	8012e12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	24001df0 	.word	0x24001df0

080047dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80047e0:	4802      	ldr	r0, [pc, #8]	; (80047ec <I2C1_EV_IRQHandler+0x10>)
 80047e2:	f007 f877 	bl	800b8d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	2400193c 	.word	0x2400193c

080047f0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80047f4:	4802      	ldr	r0, [pc, #8]	; (8004800 <I2C1_ER_IRQHandler+0x10>)
 80047f6:	f007 f887 	bl	800b908 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	2400193c 	.word	0x2400193c

08004804 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004808:	4802      	ldr	r0, [pc, #8]	; (8004814 <SPI1_IRQHandler+0x10>)
 800480a:	f00d fc61 	bl	80120d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800480e:	bf00      	nop
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	24001b54 	.word	0x24001b54

08004818 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800481c:	4802      	ldr	r0, [pc, #8]	; (8004828 <SPI2_IRQHandler+0x10>)
 800481e:	f00d fc57 	bl	80120d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004822:	bf00      	nop
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	24001bdc 	.word	0x24001bdc

0800482c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004830:	4802      	ldr	r0, [pc, #8]	; (800483c <USART1_IRQHandler+0x10>)
 8004832:	f00f fe31 	bl	8014498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	24001e3c 	.word	0x24001e3c

08004840 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004844:	4802      	ldr	r0, [pc, #8]	; (8004850 <DMA1_Stream7_IRQHandler+0x10>)
 8004846:	f004 fdbd 	bl	80093c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	24001a08 	.word	0x24001a08

08004854 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <TIM6_DAC_IRQHandler+0x20>)
 800485a:	791b      	ldrb	r3, [r3, #4]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8004862:	4804      	ldr	r0, [pc, #16]	; (8004874 <TIM6_DAC_IRQHandler+0x20>)
 8004864:	f003 f805 	bl	8007872 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004868:	4803      	ldr	r0, [pc, #12]	; (8004878 <TIM6_DAC_IRQHandler+0x24>)
 800486a:	f00e fad2 	bl	8012e12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800486e:	bf00      	nop
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	24000314 	.word	0x24000314
 8004878:	24001d54 	.word	0x24001d54

0800487c <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	4603      	mov	r3, r0
 8004884:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <ITM_SendChar+0x48>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a0e      	ldr	r2, [pc, #56]	; (80048c4 <ITM_SendChar+0x48>)
 800488c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004890:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8004892:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <ITM_SendChar+0x4c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a0c      	ldr	r2, [pc, #48]	; (80048c8 <ITM_SendChar+0x4c>)
 8004898:	f043 0301 	orr.w	r3, r3, #1
 800489c:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800489e:	bf00      	nop
 80048a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0f8      	beq.n	80048a0 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 80048ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	6013      	str	r3, [r2, #0]
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	e000edfc 	.word	0xe000edfc
 80048c8:	e0000e00 	.word	0xe0000e00

080048cc <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	e00a      	b.n	80048f4 <_read+0x28>
		*ptr++ = __io_getchar();
 80048de:	f3af 8000 	nop.w
 80048e2:	4601      	mov	r1, r0
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	60ba      	str	r2, [r7, #8]
 80048ea:	b2ca      	uxtb	r2, r1
 80048ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	3301      	adds	r3, #1
 80048f2:	617b      	str	r3, [r7, #20]
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	dbf0      	blt.n	80048de <_read+0x12>
	}

	return len;
 80048fc:	687b      	ldr	r3, [r7, #4]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8004906:	b580      	push	{r7, lr}
 8004908:	b086      	sub	sp, #24
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	e009      	b.n	800492c <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	60ba      	str	r2, [r7, #8]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ffab 	bl	800487c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	3301      	adds	r3, #1
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	dbf1      	blt.n	8004918 <_write+0x12>
	}
	return len;
 8004934:	687b      	ldr	r3, [r7, #4]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <_close>:

int _close(int file) {
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8004946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800494a:	4618      	mov	r0, r3
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <_fstat>:

int _fstat(int file, struct stat *st) {
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004966:	605a      	str	r2, [r3, #4]
	return 0;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <_isatty>:

int _isatty(int file) {
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800497e:	2301      	movs	r3, #1
}
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80049b2:	4b15      	ldr	r3, [pc, #84]	; (8004a08 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80049bc:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <_sbrk+0x64>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d102      	bne.n	80049ca <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80049c4:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <_sbrk+0x64>)
 80049c6:	4a12      	ldr	r2, [pc, #72]	; (8004a10 <_sbrk+0x68>)
 80049c8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80049ca:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <_sbrk+0x64>)
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d207      	bcs.n	80049e8 <_sbrk+0x40>
		errno = ENOMEM;
 80049d8:	f015 faf8 	bl	8019fcc <__errno>
 80049dc:	4603      	mov	r3, r0
 80049de:	220c      	movs	r2, #12
 80049e0:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80049e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049e6:	e009      	b.n	80049fc <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80049e8:	4b08      	ldr	r3, [pc, #32]	; (8004a0c <_sbrk+0x64>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80049ee:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <_sbrk+0x64>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4413      	add	r3, r2
 80049f6:	4a05      	ldr	r2, [pc, #20]	; (8004a0c <_sbrk+0x64>)
 80049f8:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80049fa:	68fb      	ldr	r3, [r7, #12]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	24080000 	.word	0x24080000
 8004a08:	00000400 	.word	0x00000400
 8004a0c:	24001da0 	.word	0x24001da0
 8004a10:	24006980 	.word	0x24006980

08004a14 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8004a18:	4b37      	ldr	r3, [pc, #220]	; (8004af8 <SystemInit+0xe4>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1e:	4a36      	ldr	r2, [pc, #216]	; (8004af8 <SystemInit+0xe4>)
 8004a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004a28:	4b34      	ldr	r3, [pc, #208]	; (8004afc <SystemInit+0xe8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	2b06      	cmp	r3, #6
 8004a32:	d807      	bhi.n	8004a44 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004a34:	4b31      	ldr	r3, [pc, #196]	; (8004afc <SystemInit+0xe8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 030f 	bic.w	r3, r3, #15
 8004a3c:	4a2f      	ldr	r2, [pc, #188]	; (8004afc <SystemInit+0xe8>)
 8004a3e:	f043 0307 	orr.w	r3, r3, #7
 8004a42:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8004a44:	4b2e      	ldr	r3, [pc, #184]	; (8004b00 <SystemInit+0xec>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a2d      	ldr	r2, [pc, #180]	; (8004b00 <SystemInit+0xec>)
 8004a4a:	f043 0301 	orr.w	r3, r3, #1
 8004a4e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8004a50:	4b2b      	ldr	r3, [pc, #172]	; (8004b00 <SystemInit+0xec>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8004a56:	4b2a      	ldr	r3, [pc, #168]	; (8004b00 <SystemInit+0xec>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4929      	ldr	r1, [pc, #164]	; (8004b00 <SystemInit+0xec>)
 8004a5c:	4b29      	ldr	r3, [pc, #164]	; (8004b04 <SystemInit+0xf0>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8004a62:	4b26      	ldr	r3, [pc, #152]	; (8004afc <SystemInit+0xe8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d007      	beq.n	8004a7e <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8004a6e:	4b23      	ldr	r3, [pc, #140]	; (8004afc <SystemInit+0xe8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f023 030f 	bic.w	r3, r3, #15
 8004a76:	4a21      	ldr	r2, [pc, #132]	; (8004afc <SystemInit+0xe8>)
 8004a78:	f043 0307 	orr.w	r3, r3, #7
 8004a7c:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8004a7e:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <SystemInit+0xec>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8004a84:	4b1e      	ldr	r3, [pc, #120]	; (8004b00 <SystemInit+0xec>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8004a8a:	4b1d      	ldr	r3, [pc, #116]	; (8004b00 <SystemInit+0xec>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8004a90:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <SystemInit+0xec>)
 8004a92:	4a1d      	ldr	r2, [pc, #116]	; (8004b08 <SystemInit+0xf4>)
 8004a94:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8004a96:	4b1a      	ldr	r3, [pc, #104]	; (8004b00 <SystemInit+0xec>)
 8004a98:	4a1c      	ldr	r2, [pc, #112]	; (8004b0c <SystemInit+0xf8>)
 8004a9a:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8004a9c:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <SystemInit+0xec>)
 8004a9e:	4a1c      	ldr	r2, [pc, #112]	; (8004b10 <SystemInit+0xfc>)
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8004aa2:	4b17      	ldr	r3, [pc, #92]	; (8004b00 <SystemInit+0xec>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8004aa8:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <SystemInit+0xec>)
 8004aaa:	4a19      	ldr	r2, [pc, #100]	; (8004b10 <SystemInit+0xfc>)
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8004aae:	4b14      	ldr	r3, [pc, #80]	; (8004b00 <SystemInit+0xec>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8004ab4:	4b12      	ldr	r3, [pc, #72]	; (8004b00 <SystemInit+0xec>)
 8004ab6:	4a16      	ldr	r2, [pc, #88]	; (8004b10 <SystemInit+0xfc>)
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8004aba:	4b11      	ldr	r3, [pc, #68]	; (8004b00 <SystemInit+0xec>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <SystemInit+0xec>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a0e      	ldr	r2, [pc, #56]	; (8004b00 <SystemInit+0xec>)
 8004ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aca:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8004acc:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <SystemInit+0xec>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8004ad2:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <SystemInit+0x100>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <SystemInit+0x104>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ade:	d202      	bcs.n	8004ae6 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8004ae0:	4b0e      	ldr	r3, [pc, #56]	; (8004b1c <SystemInit+0x108>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004ae6:	4b0e      	ldr	r3, [pc, #56]	; (8004b20 <SystemInit+0x10c>)
 8004ae8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004aec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004aee:	bf00      	nop
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	e000ed00 	.word	0xe000ed00
 8004afc:	52002000 	.word	0x52002000
 8004b00:	58024400 	.word	0x58024400
 8004b04:	eaf6ed7f 	.word	0xeaf6ed7f
 8004b08:	02020200 	.word	0x02020200
 8004b0c:	01ff0000 	.word	0x01ff0000
 8004b10:	01010280 	.word	0x01010280
 8004b14:	5c001000 	.word	0x5c001000
 8004b18:	ffff0000 	.word	0xffff0000
 8004b1c:	51008108 	.word	0x51008108
 8004b20:	52004000 	.word	0x52004000

08004b24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b09a      	sub	sp, #104	; 0x68
 8004b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	605a      	str	r2, [r3, #4]
 8004b34:	609a      	str	r2, [r3, #8]
 8004b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	605a      	str	r2, [r3, #4]
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	60da      	str	r2, [r3, #12]
 8004b52:	611a      	str	r2, [r3, #16]
 8004b54:	615a      	str	r2, [r3, #20]
 8004b56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004b58:	1d3b      	adds	r3, r7, #4
 8004b5a:	222c      	movs	r2, #44	; 0x2c
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f015 fa6c 	bl	801a03c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004b64:	4b44      	ldr	r3, [pc, #272]	; (8004c78 <MX_TIM1_Init+0x154>)
 8004b66:	4a45      	ldr	r2, [pc, #276]	; (8004c7c <MX_TIM1_Init+0x158>)
 8004b68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8004b6a:	4b43      	ldr	r3, [pc, #268]	; (8004c78 <MX_TIM1_Init+0x154>)
 8004b6c:	224a      	movs	r2, #74	; 0x4a
 8004b6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b70:	4b41      	ldr	r3, [pc, #260]	; (8004c78 <MX_TIM1_Init+0x154>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 8004b76:	4b40      	ldr	r3, [pc, #256]	; (8004c78 <MX_TIM1_Init+0x154>)
 8004b78:	f24f 4223 	movw	r2, #62499	; 0xf423
 8004b7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b7e:	4b3e      	ldr	r3, [pc, #248]	; (8004c78 <MX_TIM1_Init+0x154>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004b84:	4b3c      	ldr	r3, [pc, #240]	; (8004c78 <MX_TIM1_Init+0x154>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b8a:	4b3b      	ldr	r3, [pc, #236]	; (8004c78 <MX_TIM1_Init+0x154>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004b90:	4839      	ldr	r0, [pc, #228]	; (8004c78 <MX_TIM1_Init+0x154>)
 8004b92:	f00d fdd0 	bl	8012736 <HAL_TIM_Base_Init>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004b9c:	f7fe fee2 	bl	8003964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ba4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004ba6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004baa:	4619      	mov	r1, r3
 8004bac:	4832      	ldr	r0, [pc, #200]	; (8004c78 <MX_TIM1_Init+0x154>)
 8004bae:	f00e fb4b 	bl	8013248 <HAL_TIM_ConfigClockSource>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004bb8:	f7fe fed4 	bl	8003964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004bbc:	482e      	ldr	r0, [pc, #184]	; (8004c78 <MX_TIM1_Init+0x154>)
 8004bbe:	f00e f8c7 	bl	8012d50 <HAL_TIM_PWM_Init>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004bc8:	f7fe fecc 	bl	8003964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004bd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4826      	ldr	r0, [pc, #152]	; (8004c78 <MX_TIM1_Init+0x154>)
 8004be0:	f00f f888 	bl	8013cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004bea:	f7fe febb 	bl	8003964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004bee:	2360      	movs	r3, #96	; 0x60
 8004bf0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8004bf2:	f240 13df 	movw	r3, #479	; 0x1df
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c04:	2300      	movs	r3, #0
 8004c06:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c10:	2200      	movs	r2, #0
 8004c12:	4619      	mov	r1, r3
 8004c14:	4818      	ldr	r0, [pc, #96]	; (8004c78 <MX_TIM1_Init+0x154>)
 8004c16:	f00e fa03 	bl	8013020 <HAL_TIM_PWM_ConfigChannel>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004c20:	f7fe fea0 	bl	8003964 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004c24:	2300      	movs	r3, #0
 8004c26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004c50:	2300      	movs	r3, #0
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004c54:	1d3b      	adds	r3, r7, #4
 8004c56:	4619      	mov	r1, r3
 8004c58:	4807      	ldr	r0, [pc, #28]	; (8004c78 <MX_TIM1_Init+0x154>)
 8004c5a:	f00f f8d9 	bl	8013e10 <HAL_TIMEx_ConfigBreakDeadTime>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004c64:	f7fe fe7e 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004c68:	4803      	ldr	r0, [pc, #12]	; (8004c78 <MX_TIM1_Init+0x154>)
 8004c6a:	f000 f8dd 	bl	8004e28 <HAL_TIM_MspPostInit>

}
 8004c6e:	bf00      	nop
 8004c70:	3768      	adds	r7, #104	; 0x68
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	24001da4 	.word	0x24001da4
 8004c7c:	40010000 	.word	0x40010000

08004c80 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08e      	sub	sp, #56	; 0x38
 8004c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
 8004c8e:	605a      	str	r2, [r3, #4]
 8004c90:	609a      	str	r2, [r3, #8]
 8004c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c94:	f107 031c 	add.w	r3, r7, #28
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	605a      	str	r2, [r3, #4]
 8004c9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ca0:	463b      	mov	r3, r7
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	605a      	str	r2, [r3, #4]
 8004ca8:	609a      	str	r2, [r3, #8]
 8004caa:	60da      	str	r2, [r3, #12]
 8004cac:	611a      	str	r2, [r3, #16]
 8004cae:	615a      	str	r2, [r3, #20]
 8004cb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004cb2:	4b2d      	ldr	r3, [pc, #180]	; (8004d68 <MX_TIM2_Init+0xe8>)
 8004cb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 8004cba:	4b2b      	ldr	r3, [pc, #172]	; (8004d68 <MX_TIM2_Init+0xe8>)
 8004cbc:	224a      	movs	r2, #74	; 0x4a
 8004cbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cc0:	4b29      	ldr	r3, [pc, #164]	; (8004d68 <MX_TIM2_Init+0xe8>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8004cc6:	4b28      	ldr	r3, [pc, #160]	; (8004d68 <MX_TIM2_Init+0xe8>)
 8004cc8:	f640 4234 	movw	r2, #3124	; 0xc34
 8004ccc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cce:	4b26      	ldr	r3, [pc, #152]	; (8004d68 <MX_TIM2_Init+0xe8>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004cd4:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <MX_TIM2_Init+0xe8>)
 8004cd6:	2280      	movs	r2, #128	; 0x80
 8004cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004cda:	4823      	ldr	r0, [pc, #140]	; (8004d68 <MX_TIM2_Init+0xe8>)
 8004cdc:	f00d fd2b 	bl	8012736 <HAL_TIM_Base_Init>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004ce6:	f7fe fe3d 	bl	8003964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004cf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	481c      	ldr	r0, [pc, #112]	; (8004d68 <MX_TIM2_Init+0xe8>)
 8004cf8:	f00e faa6 	bl	8013248 <HAL_TIM_ConfigClockSource>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004d02:	f7fe fe2f 	bl	8003964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004d06:	4818      	ldr	r0, [pc, #96]	; (8004d68 <MX_TIM2_Init+0xe8>)
 8004d08:	f00e f822 	bl	8012d50 <HAL_TIM_PWM_Init>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004d12:	f7fe fe27 	bl	8003964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004d16:	2320      	movs	r3, #32
 8004d18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d1e:	f107 031c 	add.w	r3, r7, #28
 8004d22:	4619      	mov	r1, r3
 8004d24:	4810      	ldr	r0, [pc, #64]	; (8004d68 <MX_TIM2_Init+0xe8>)
 8004d26:	f00e ffe5 	bl	8013cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004d30:	f7fe fe18 	bl	8003964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d34:	2360      	movs	r3, #96	; 0x60
 8004d36:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d40:	2300      	movs	r3, #0
 8004d42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004d44:	463b      	mov	r3, r7
 8004d46:	220c      	movs	r2, #12
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4807      	ldr	r0, [pc, #28]	; (8004d68 <MX_TIM2_Init+0xe8>)
 8004d4c:	f00e f968 	bl	8013020 <HAL_TIM_PWM_ConfigChannel>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8004d56:	f7fe fe05 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004d5a:	4803      	ldr	r0, [pc, #12]	; (8004d68 <MX_TIM2_Init+0xe8>)
 8004d5c:	f000 f864 	bl	8004e28 <HAL_TIM_MspPostInit>

}
 8004d60:	bf00      	nop
 8004d62:	3738      	adds	r7, #56	; 0x38
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	24001df0 	.word	0x24001df0

08004d6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a29      	ldr	r2, [pc, #164]	; (8004e20 <HAL_TIM_Base_MspInit+0xb4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d12f      	bne.n	8004dde <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d7e:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <HAL_TIM_Base_MspInit+0xb8>)
 8004d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d84:	4a27      	ldr	r2, [pc, #156]	; (8004e24 <HAL_TIM_Base_MspInit+0xb8>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004d8e:	4b25      	ldr	r3, [pc, #148]	; (8004e24 <HAL_TIM_Base_MspInit+0xb8>)
 8004d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2105      	movs	r1, #5
 8004da0:	2018      	movs	r0, #24
 8004da2:	f002 fbb7 	bl	8007514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8004da6:	2018      	movs	r0, #24
 8004da8:	f002 fbce 	bl	8007548 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8004dac:	2200      	movs	r2, #0
 8004dae:	2105      	movs	r1, #5
 8004db0:	2019      	movs	r0, #25
 8004db2:	f002 fbaf 	bl	8007514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004db6:	2019      	movs	r0, #25
 8004db8:	f002 fbc6 	bl	8007548 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2105      	movs	r1, #5
 8004dc0:	201a      	movs	r0, #26
 8004dc2:	f002 fba7 	bl	8007514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8004dc6:	201a      	movs	r0, #26
 8004dc8:	f002 fbbe 	bl	8007548 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2105      	movs	r1, #5
 8004dd0:	201b      	movs	r0, #27
 8004dd2:	f002 fb9f 	bl	8007514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004dd6:	201b      	movs	r0, #27
 8004dd8:	f002 fbb6 	bl	8007548 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004ddc:	e01b      	b.n	8004e16 <HAL_TIM_Base_MspInit+0xaa>
  else if(tim_baseHandle->Instance==TIM2)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de6:	d116      	bne.n	8004e16 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004de8:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <HAL_TIM_Base_MspInit+0xb8>)
 8004dea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dee:	4a0d      	ldr	r2, [pc, #52]	; (8004e24 <HAL_TIM_Base_MspInit+0xb8>)
 8004df0:	f043 0301 	orr.w	r3, r3, #1
 8004df4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004df8:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <HAL_TIM_Base_MspInit+0xb8>)
 8004dfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	60bb      	str	r3, [r7, #8]
 8004e04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004e06:	2200      	movs	r2, #0
 8004e08:	2105      	movs	r1, #5
 8004e0a:	201c      	movs	r0, #28
 8004e0c:	f002 fb82 	bl	8007514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e10:	201c      	movs	r0, #28
 8004e12:	f002 fb99 	bl	8007548 <HAL_NVIC_EnableIRQ>
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40010000 	.word	0x40010000
 8004e24:	58024400 	.word	0x58024400

08004e28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	; 0x28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e30:	f107 0314 	add.w	r3, r7, #20
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a26      	ldr	r2, [pc, #152]	; (8004ee0 <HAL_TIM_MspPostInit+0xb8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d120      	bne.n	8004e8c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e4a:	4b26      	ldr	r3, [pc, #152]	; (8004ee4 <HAL_TIM_MspPostInit+0xbc>)
 8004e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e50:	4a24      	ldr	r2, [pc, #144]	; (8004ee4 <HAL_TIM_MspPostInit+0xbc>)
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e5a:	4b22      	ldr	r3, [pc, #136]	; (8004ee4 <HAL_TIM_MspPostInit+0xbc>)
 8004e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004e68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e76:	2300      	movs	r3, #0
 8004e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e7e:	f107 0314 	add.w	r3, r7, #20
 8004e82:	4619      	mov	r1, r3
 8004e84:	4818      	ldr	r0, [pc, #96]	; (8004ee8 <HAL_TIM_MspPostInit+0xc0>)
 8004e86:	f006 f8a3 	bl	800afd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004e8a:	e024      	b.n	8004ed6 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e94:	d11f      	bne.n	8004ed6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <HAL_TIM_MspPostInit+0xbc>)
 8004e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e9c:	4a11      	ldr	r2, [pc, #68]	; (8004ee4 <HAL_TIM_MspPostInit+0xbc>)
 8004e9e:	f043 0302 	orr.w	r3, r3, #2
 8004ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ea6:	4b0f      	ldr	r3, [pc, #60]	; (8004ee4 <HAL_TIM_MspPostInit+0xbc>)
 8004ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004eb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eba:	2302      	movs	r3, #2
 8004ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eca:	f107 0314 	add.w	r3, r7, #20
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4806      	ldr	r0, [pc, #24]	; (8004eec <HAL_TIM_MspPostInit+0xc4>)
 8004ed2:	f006 f87d 	bl	800afd0 <HAL_GPIO_Init>
}
 8004ed6:	bf00      	nop
 8004ed8:	3728      	adds	r7, #40	; 0x28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40010000 	.word	0x40010000
 8004ee4:	58024400 	.word	0x58024400
 8004ee8:	58020000 	.word	0x58020000
 8004eec:	58020400 	.word	0x58020400

08004ef0 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 8004efc:	4b21      	ldr	r3, [pc, #132]	; (8004f84 <get_uptime+0x94>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 8004f02:	4b21      	ldr	r3, [pc, #132]	; (8004f88 <get_uptime+0x98>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8004f08:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <get_uptime+0x94>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d005      	beq.n	8004f1e <get_uptime+0x2e>
		ms = uptime_millis;
 8004f12:	4b1c      	ldr	r3, [pc, #112]	; (8004f84 <get_uptime+0x94>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 8004f18:	4b1b      	ldr	r3, [pc, #108]	; (8004f88 <get_uptime+0x98>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f24:	fb03 f202 	mul.w	r2, r3, r2
 8004f28:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <get_uptime+0x98>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	4917      	ldr	r1, [pc, #92]	; (8004f8c <get_uptime+0x9c>)
 8004f30:	fba1 1303 	umull	r1, r3, r1, r3
 8004f34:	099b      	lsrs	r3, r3, #6
 8004f36:	68f9      	ldr	r1, [r7, #12]
 8004f38:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <get_uptime+0x5a>
		uptime = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	0e1b      	lsrs	r3, r3, #24
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	0c1a      	lsrs	r2, r3, #16
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	0a1a      	lsrs	r2, r3, #8
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3302      	adds	r3, #2
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3303      	adds	r3, #3
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	24001ae0 	.word	0x24001ae0
 8004f88:	e000e010 	.word	0xe000e010
 8004f8c:	10624dd3 	.word	0x10624dd3

08004f90 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	; 0x28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 8004f98:	f107 0310 	add.w	r3, r7, #16
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4821      	ldr	r0, [pc, #132]	; (8005028 <get_timestamp+0x98>)
 8004fa2:	f00c fc27 	bl	80117f4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 8004fa6:	f107 030c 	add.w	r3, r7, #12
 8004faa:	2200      	movs	r2, #0
 8004fac:	4619      	mov	r1, r3
 8004fae:	481e      	ldr	r0, [pc, #120]	; (8005028 <get_timestamp+0x98>)
 8004fb0:	f00c fd04 	bl	80119bc <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2264      	movs	r2, #100	; 0x64
 8004fb8:	fb03 f202 	mul.w	r2, r3, r2
 8004fbc:	4b1b      	ldr	r3, [pc, #108]	; (800502c <get_timestamp+0x9c>)
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 8004fc2:	7bfa      	ldrb	r2, [r7, #15]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	7b7a      	ldrb	r2, [r7, #13]
 8004fce:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	7bba      	ldrb	r2, [r7, #14]
 8004fd6:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3303      	adds	r3, #3
 8004fdc:	7c3a      	ldrb	r2, [r7, #16]
 8004fde:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	7c7a      	ldrb	r2, [r7, #17]
 8004fe6:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3305      	adds	r3, #5
 8004fec:	7cba      	ldrb	r2, [r7, #18]
 8004fee:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	0e1a      	lsrs	r2, r3, #24
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3306      	adds	r3, #6
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	0c1a      	lsrs	r2, r3, #16
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3307      	adds	r3, #7
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	0a1a      	lsrs	r2, r3, #8
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3308      	adds	r3, #8
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3309      	adds	r3, #9
 8005018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
}
 800501e:	bf00      	nop
 8005020:	3728      	adds	r7, #40	; 0x28
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	24001af4 	.word	0x24001af4
 800502c:	000f4240 	.word	0x000f4240

08005030 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 8005030:	b580      	push	{r7, lr}
 8005032:	b08c      	sub	sp, #48	; 0x30
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	785b      	ldrb	r3, [r3, #1]
 800503c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	789b      	ldrb	r3, [r3, #2]
 8005044:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	78db      	ldrb	r3, [r3, #3]
 800504c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	791b      	ldrb	r3, [r3, #4]
 8005054:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	795b      	ldrb	r3, [r3, #5]
 800505c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	799b      	ldrb	r3, [r3, #6]
 8005064:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3307      	adds	r3, #7
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	b21a      	sxth	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3308      	adds	r3, #8
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	b21b      	sxth	r3, r3
 800507a:	4313      	orrs	r3, r2
 800507c:	b21b      	sxth	r3, r3
 800507e:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8005080:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8005088:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800508c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8005090:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8005098:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800509c:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 800509e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050a2:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 80050a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80050a8:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 80050aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80050ac:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 80050ae:	f107 0320 	add.w	r3, r7, #32
 80050b2:	2200      	movs	r2, #0
 80050b4:	4619      	mov	r1, r3
 80050b6:	480b      	ldr	r0, [pc, #44]	; (80050e4 <calibrateRTC+0xb4>)
 80050b8:	f00c fbf8 	bl	80118ac <HAL_RTC_SetDate>
 80050bc:	4603      	mov	r3, r0
 80050be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 80050c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <calibrateRTC+0x9e>
		Error_Handler();
 80050ca:	f7fe fc4b 	bl	8003964 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 80050ce:	f107 030c 	add.w	r3, r7, #12
 80050d2:	2200      	movs	r2, #0
 80050d4:	4619      	mov	r1, r3
 80050d6:	4803      	ldr	r0, [pc, #12]	; (80050e4 <calibrateRTC+0xb4>)
 80050d8:	f000 f806 	bl	80050e8 <RTC_SetTime>
}
 80050dc:	bf00      	nop
 80050de:	3730      	adds	r7, #48	; 0x30
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	24001af4 	.word	0x24001af4

080050e8 <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <RTC_SetTime+0x1a>
 80050fe:	2302      	movs	r3, #2
 8005100:	e051      	b.n	80051a6 <RTC_SetTime+0xbe>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2202      	movs	r2, #2
 800510e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	22ca      	movs	r2, #202	; 0xca
 8005118:	625a      	str	r2, [r3, #36]	; 0x24
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2253      	movs	r2, #83	; 0x53
 8005120:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f00c fcbc 	bl	8011aa0 <RTC_EnterInitMode>
 8005128:	4603      	mov	r3, r0
 800512a:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 800512c:	7dfb      	ldrb	r3, [r7, #23]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d129      	bne.n	8005186 <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2200      	movs	r2, #0
 8005136:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	f00c fd21 	bl	8011b84 <RTC_ByteToBcd2>
 8005142:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8005144:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	785b      	ldrb	r3, [r3, #1]
 800514a:	4618      	mov	r0, r3
 800514c:	f00c fd1a 	bl	8011b84 <RTC_ByteToBcd2>
 8005150:	4603      	mov	r3, r0
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	789b      	ldrb	r3, [r3, #2]
 800515a:	4618      	mov	r0, r3
 800515c:	f00c fd12 	bl	8011b84 <RTC_ByteToBcd2>
 8005160:	4603      	mov	r3, r0
 8005162:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	78db      	ldrb	r3, [r3, #3]
 800516a:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 800516c:	4313      	orrs	r3, r2
 800516e:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	6939      	ldr	r1, [r7, #16]
 8005176:	4b0e      	ldr	r3, [pc, #56]	; (80051b0 <RTC_SetTime+0xc8>)
 8005178:	400b      	ands	r3, r1
 800517a:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f00c fcc3 	bl	8011b08 <RTC_ExitInitMode>
 8005182:	4603      	mov	r3, r0
 8005184:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	22ff      	movs	r2, #255	; 0xff
 800518c:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d103      	bne.n	800519c <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 80051a4:	7dfb      	ldrb	r3, [r7, #23]

}
 80051a6:	4618      	mov	r0, r3
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd90      	pop	{r4, r7, pc}
 80051ae:	bf00      	nop
 80051b0:	007f7f7f 	.word	0x007f7f7f

080051b4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80051b8:	4b30      	ldr	r3, [pc, #192]	; (800527c <MX_USART1_UART_Init+0xc8>)
 80051ba:	4a31      	ldr	r2, [pc, #196]	; (8005280 <MX_USART1_UART_Init+0xcc>)
 80051bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 80051be:	4b2f      	ldr	r3, [pc, #188]	; (800527c <MX_USART1_UART_Init+0xc8>)
 80051c0:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80051c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80051c6:	4b2d      	ldr	r3, [pc, #180]	; (800527c <MX_USART1_UART_Init+0xc8>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80051cc:	4b2b      	ldr	r3, [pc, #172]	; (800527c <MX_USART1_UART_Init+0xc8>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80051d2:	4b2a      	ldr	r3, [pc, #168]	; (800527c <MX_USART1_UART_Init+0xc8>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80051d8:	4b28      	ldr	r3, [pc, #160]	; (800527c <MX_USART1_UART_Init+0xc8>)
 80051da:	220c      	movs	r2, #12
 80051dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051de:	4b27      	ldr	r3, [pc, #156]	; (800527c <MX_USART1_UART_Init+0xc8>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80051e4:	4b25      	ldr	r3, [pc, #148]	; (800527c <MX_USART1_UART_Init+0xc8>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051ea:	4b24      	ldr	r3, [pc, #144]	; (800527c <MX_USART1_UART_Init+0xc8>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80051f0:	4b22      	ldr	r3, [pc, #136]	; (800527c <MX_USART1_UART_Init+0xc8>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051f6:	4b21      	ldr	r3, [pc, #132]	; (800527c <MX_USART1_UART_Init+0xc8>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80051fc:	481f      	ldr	r0, [pc, #124]	; (800527c <MX_USART1_UART_Init+0xc8>)
 80051fe:	f00e fea3 	bl	8013f48 <HAL_UART_Init>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005208:	f7fe fbac 	bl	8003964 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800520c:	2100      	movs	r1, #0
 800520e:	481b      	ldr	r0, [pc, #108]	; (800527c <MX_USART1_UART_Init+0xc8>)
 8005210:	f011 fbe9 	bl	80169e6 <HAL_UARTEx_SetTxFifoThreshold>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800521a:	f7fe fba3 	bl	8003964 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800521e:	2100      	movs	r1, #0
 8005220:	4816      	ldr	r0, [pc, #88]	; (800527c <MX_USART1_UART_Init+0xc8>)
 8005222:	f011 fc1e 	bl	8016a62 <HAL_UARTEx_SetRxFifoThreshold>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800522c:	f7fe fb9a 	bl	8003964 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005230:	4812      	ldr	r0, [pc, #72]	; (800527c <MX_USART1_UART_Init+0xc8>)
 8005232:	f011 fb9f 	bl	8016974 <HAL_UARTEx_DisableFifoMode>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800523c:	f7fe fb92 	bl	8003964 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8005240:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005244:	480d      	ldr	r0, [pc, #52]	; (800527c <MX_USART1_UART_Init+0xc8>)
 8005246:	f011 fc0c 	bl	8016a62 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 800524a:	480c      	ldr	r0, [pc, #48]	; (800527c <MX_USART1_UART_Init+0xc8>)
 800524c:	f011 fb57 	bl	80168fe <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8005250:	480a      	ldr	r0, [pc, #40]	; (800527c <MX_USART1_UART_Init+0xc8>)
 8005252:	f011 fb21 	bl	8016898 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8005256:	4b09      	ldr	r3, [pc, #36]	; (800527c <MX_USART1_UART_Init+0xc8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	4b07      	ldr	r3, [pc, #28]	; (800527c <MX_USART1_UART_Init+0xc8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005264:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <MX_USART1_UART_Init+0xc8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	4b03      	ldr	r3, [pc, #12]	; (800527c <MX_USART1_UART_Init+0xc8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005274:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8005276:	bf00      	nop
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	24001e3c 	.word	0x24001e3c
 8005280:	40011000 	.word	0x40011000

08005284 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b0ba      	sub	sp, #232	; 0xe8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800528c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	609a      	str	r2, [r3, #8]
 8005298:	60da      	str	r2, [r3, #12]
 800529a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800529c:	f107 0310 	add.w	r3, r7, #16
 80052a0:	22c0      	movs	r2, #192	; 0xc0
 80052a2:	2100      	movs	r1, #0
 80052a4:	4618      	mov	r0, r3
 80052a6:	f014 fec9 	bl	801a03c <memset>
  if(uartHandle->Instance==USART1)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a41      	ldr	r2, [pc, #260]	; (80053b4 <HAL_UART_MspInit+0x130>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d17b      	bne.n	80053ac <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80052b4:	f04f 0201 	mov.w	r2, #1
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 80052c0:	2318      	movs	r3, #24
 80052c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052c6:	f107 0310 	add.w	r3, r7, #16
 80052ca:	4618      	mov	r0, r3
 80052cc:	f009 fc74 	bl	800ebb8 <HAL_RCCEx_PeriphCLKConfig>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80052d6:	f7fe fb45 	bl	8003964 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80052da:	4b37      	ldr	r3, [pc, #220]	; (80053b8 <HAL_UART_MspInit+0x134>)
 80052dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052e0:	4a35      	ldr	r2, [pc, #212]	; (80053b8 <HAL_UART_MspInit+0x134>)
 80052e2:	f043 0310 	orr.w	r3, r3, #16
 80052e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80052ea:	4b33      	ldr	r3, [pc, #204]	; (80053b8 <HAL_UART_MspInit+0x134>)
 80052ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052f8:	4b2f      	ldr	r3, [pc, #188]	; (80053b8 <HAL_UART_MspInit+0x134>)
 80052fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052fe:	4a2e      	ldr	r2, [pc, #184]	; (80053b8 <HAL_UART_MspInit+0x134>)
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005308:	4b2b      	ldr	r3, [pc, #172]	; (80053b8 <HAL_UART_MspInit+0x134>)
 800530a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	60bb      	str	r3, [r7, #8]
 8005314:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005316:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800531a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800531e:	2302      	movs	r3, #2
 8005320:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005324:	2300      	movs	r3, #0
 8005326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800532a:	2300      	movs	r3, #0
 800532c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005330:	2307      	movs	r3, #7
 8005332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005336:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800533a:	4619      	mov	r1, r3
 800533c:	481f      	ldr	r0, [pc, #124]	; (80053bc <HAL_UART_MspInit+0x138>)
 800533e:	f005 fe47 	bl	800afd0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8005342:	4b1f      	ldr	r3, [pc, #124]	; (80053c0 <HAL_UART_MspInit+0x13c>)
 8005344:	4a1f      	ldr	r2, [pc, #124]	; (80053c4 <HAL_UART_MspInit+0x140>)
 8005346:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005348:	4b1d      	ldr	r3, [pc, #116]	; (80053c0 <HAL_UART_MspInit+0x13c>)
 800534a:	222a      	movs	r2, #42	; 0x2a
 800534c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800534e:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <HAL_UART_MspInit+0x13c>)
 8005350:	2240      	movs	r2, #64	; 0x40
 8005352:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005354:	4b1a      	ldr	r3, [pc, #104]	; (80053c0 <HAL_UART_MspInit+0x13c>)
 8005356:	2200      	movs	r2, #0
 8005358:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800535a:	4b19      	ldr	r3, [pc, #100]	; (80053c0 <HAL_UART_MspInit+0x13c>)
 800535c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005360:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005362:	4b17      	ldr	r3, [pc, #92]	; (80053c0 <HAL_UART_MspInit+0x13c>)
 8005364:	2200      	movs	r2, #0
 8005366:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005368:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <HAL_UART_MspInit+0x13c>)
 800536a:	2200      	movs	r2, #0
 800536c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800536e:	4b14      	ldr	r3, [pc, #80]	; (80053c0 <HAL_UART_MspInit+0x13c>)
 8005370:	2200      	movs	r2, #0
 8005372:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005374:	4b12      	ldr	r3, [pc, #72]	; (80053c0 <HAL_UART_MspInit+0x13c>)
 8005376:	2200      	movs	r2, #0
 8005378:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800537a:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <HAL_UART_MspInit+0x13c>)
 800537c:	2200      	movs	r2, #0
 800537e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005380:	480f      	ldr	r0, [pc, #60]	; (80053c0 <HAL_UART_MspInit+0x13c>)
 8005382:	f002 fcf5 	bl	8007d70 <HAL_DMA_Init>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800538c:	f7fe faea 	bl	8003964 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a0b      	ldr	r2, [pc, #44]	; (80053c0 <HAL_UART_MspInit+0x13c>)
 8005394:	67da      	str	r2, [r3, #124]	; 0x7c
 8005396:	4a0a      	ldr	r2, [pc, #40]	; (80053c0 <HAL_UART_MspInit+0x13c>)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800539c:	2200      	movs	r2, #0
 800539e:	2105      	movs	r1, #5
 80053a0:	2025      	movs	r0, #37	; 0x25
 80053a2:	f002 f8b7 	bl	8007514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053a6:	2025      	movs	r0, #37	; 0x25
 80053a8:	f002 f8ce 	bl	8007548 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80053ac:	bf00      	nop
 80053ae:	37e8      	adds	r7, #232	; 0xe8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40011000 	.word	0x40011000
 80053b8:	58024400 	.word	0x58024400
 80053bc:	58020000 	.word	0x58020000
 80053c0:	24001ed0 	.word	0x24001ed0
 80053c4:	40020040 	.word	0x40020040

080053c8 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 80053d2:	4bc2      	ldr	r3, [pc, #776]	; (80056dc <voltage_monitor_init+0x314>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 80053d8:	4bc0      	ldr	r3, [pc, #768]	; (80056dc <voltage_monitor_init+0x314>)
 80053da:	2200      	movs	r2, #0
 80053dc:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 80053de:	4bbf      	ldr	r3, [pc, #764]	; (80056dc <voltage_monitor_init+0x314>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 80053e4:	4bbd      	ldr	r3, [pc, #756]	; (80056dc <voltage_monitor_init+0x314>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 80053ea:	4bbc      	ldr	r3, [pc, #752]	; (80056dc <voltage_monitor_init+0x314>)
 80053ec:	f242 7210 	movw	r2, #10000	; 0x2710
 80053f0:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 80053f2:	4bba      	ldr	r3, [pc, #744]	; (80056dc <voltage_monitor_init+0x314>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 80053f8:	4bb8      	ldr	r3, [pc, #736]	; (80056dc <voltage_monitor_init+0x314>)
 80053fa:	2201      	movs	r2, #1
 80053fc:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 80053fe:	4bb7      	ldr	r3, [pc, #732]	; (80056dc <voltage_monitor_init+0x314>)
 8005400:	2200      	movs	r2, #0
 8005402:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8005404:	4bb5      	ldr	r3, [pc, #724]	; (80056dc <voltage_monitor_init+0x314>)
 8005406:	2201      	movs	r2, #1
 8005408:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 800540a:	4bb4      	ldr	r3, [pc, #720]	; (80056dc <voltage_monitor_init+0x314>)
 800540c:	2200      	movs	r2, #0
 800540e:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005410:	4bb2      	ldr	r3, [pc, #712]	; (80056dc <voltage_monitor_init+0x314>)
 8005412:	f242 7210 	movw	r2, #10000	; 0x2710
 8005416:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8005418:	4bb0      	ldr	r3, [pc, #704]	; (80056dc <voltage_monitor_init+0x314>)
 800541a:	2200      	movs	r2, #0
 800541c:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 800541e:	4baf      	ldr	r3, [pc, #700]	; (80056dc <voltage_monitor_init+0x314>)
 8005420:	2202      	movs	r2, #2
 8005422:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8005424:	4bad      	ldr	r3, [pc, #692]	; (80056dc <voltage_monitor_init+0x314>)
 8005426:	2200      	movs	r2, #0
 8005428:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 800542a:	4bac      	ldr	r3, [pc, #688]	; (80056dc <voltage_monitor_init+0x314>)
 800542c:	2201      	movs	r2, #1
 800542e:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8005430:	4baa      	ldr	r3, [pc, #680]	; (80056dc <voltage_monitor_init+0x314>)
 8005432:	2200      	movs	r2, #0
 8005434:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005436:	4ba9      	ldr	r3, [pc, #676]	; (80056dc <voltage_monitor_init+0x314>)
 8005438:	f242 7210 	movw	r2, #10000	; 0x2710
 800543c:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 800543e:	4ba7      	ldr	r3, [pc, #668]	; (80056dc <voltage_monitor_init+0x314>)
 8005440:	2200      	movs	r2, #0
 8005442:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8005444:	4ba5      	ldr	r3, [pc, #660]	; (80056dc <voltage_monitor_init+0x314>)
 8005446:	2203      	movs	r2, #3
 8005448:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 800544a:	4ba4      	ldr	r3, [pc, #656]	; (80056dc <voltage_monitor_init+0x314>)
 800544c:	2200      	movs	r2, #0
 800544e:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8005450:	4ba2      	ldr	r3, [pc, #648]	; (80056dc <voltage_monitor_init+0x314>)
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8005458:	4ba0      	ldr	r3, [pc, #640]	; (80056dc <voltage_monitor_init+0x314>)
 800545a:	2200      	movs	r2, #0
 800545c:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 800545e:	4b9f      	ldr	r3, [pc, #636]	; (80056dc <voltage_monitor_init+0x314>)
 8005460:	f242 7210 	movw	r2, #10000	; 0x2710
 8005464:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8005466:	4b9d      	ldr	r3, [pc, #628]	; (80056dc <voltage_monitor_init+0x314>)
 8005468:	2200      	movs	r2, #0
 800546a:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 800546c:	4b9b      	ldr	r3, [pc, #620]	; (80056dc <voltage_monitor_init+0x314>)
 800546e:	2204      	movs	r2, #4
 8005470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8005474:	4b99      	ldr	r3, [pc, #612]	; (80056dc <voltage_monitor_init+0x314>)
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 800547c:	4b97      	ldr	r3, [pc, #604]	; (80056dc <voltage_monitor_init+0x314>)
 800547e:	2201      	movs	r2, #1
 8005480:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8005484:	4b95      	ldr	r3, [pc, #596]	; (80056dc <voltage_monitor_init+0x314>)
 8005486:	2200      	movs	r2, #0
 8005488:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 800548a:	4b94      	ldr	r3, [pc, #592]	; (80056dc <voltage_monitor_init+0x314>)
 800548c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005490:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8005492:	4b92      	ldr	r3, [pc, #584]	; (80056dc <voltage_monitor_init+0x314>)
 8005494:	2200      	movs	r2, #0
 8005496:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8005498:	4b90      	ldr	r3, [pc, #576]	; (80056dc <voltage_monitor_init+0x314>)
 800549a:	2205      	movs	r2, #5
 800549c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 80054a0:	4b8e      	ldr	r3, [pc, #568]	; (80056dc <voltage_monitor_init+0x314>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 80054a8:	4b8c      	ldr	r3, [pc, #560]	; (80056dc <voltage_monitor_init+0x314>)
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 80054b0:	4b8a      	ldr	r3, [pc, #552]	; (80056dc <voltage_monitor_init+0x314>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 80054b6:	4b89      	ldr	r3, [pc, #548]	; (80056dc <voltage_monitor_init+0x314>)
 80054b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80054bc:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 80054be:	4b87      	ldr	r3, [pc, #540]	; (80056dc <voltage_monitor_init+0x314>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 80054c4:	4b85      	ldr	r3, [pc, #532]	; (80056dc <voltage_monitor_init+0x314>)
 80054c6:	2206      	movs	r2, #6
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 80054cc:	4b83      	ldr	r3, [pc, #524]	; (80056dc <voltage_monitor_init+0x314>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 80054d4:	4b81      	ldr	r3, [pc, #516]	; (80056dc <voltage_monitor_init+0x314>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 80054dc:	4b7f      	ldr	r3, [pc, #508]	; (80056dc <voltage_monitor_init+0x314>)
 80054de:	2200      	movs	r2, #0
 80054e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 80054e4:	4b7d      	ldr	r3, [pc, #500]	; (80056dc <voltage_monitor_init+0x314>)
 80054e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80054ea:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 80054ee:	4b7b      	ldr	r3, [pc, #492]	; (80056dc <voltage_monitor_init+0x314>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 80054f6:	4b79      	ldr	r3, [pc, #484]	; (80056dc <voltage_monitor_init+0x314>)
 80054f8:	2207      	movs	r2, #7
 80054fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 80054fe:	4b77      	ldr	r3, [pc, #476]	; (80056dc <voltage_monitor_init+0x314>)
 8005500:	2200      	movs	r2, #0
 8005502:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8005506:	4b75      	ldr	r3, [pc, #468]	; (80056dc <voltage_monitor_init+0x314>)
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 800550e:	4b73      	ldr	r3, [pc, #460]	; (80056dc <voltage_monitor_init+0x314>)
 8005510:	2200      	movs	r2, #0
 8005512:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8005516:	4b71      	ldr	r3, [pc, #452]	; (80056dc <voltage_monitor_init+0x314>)
 8005518:	f242 7210 	movw	r2, #10000	; 0x2710
 800551c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8005520:	4b6e      	ldr	r3, [pc, #440]	; (80056dc <voltage_monitor_init+0x314>)
 8005522:	2200      	movs	r2, #0
 8005524:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8005528:	4b6c      	ldr	r3, [pc, #432]	; (80056dc <voltage_monitor_init+0x314>)
 800552a:	2208      	movs	r2, #8
 800552c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8005530:	4b6a      	ldr	r3, [pc, #424]	; (80056dc <voltage_monitor_init+0x314>)
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8005538:	4b68      	ldr	r3, [pc, #416]	; (80056dc <voltage_monitor_init+0x314>)
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8005540:	4b66      	ldr	r3, [pc, #408]	; (80056dc <voltage_monitor_init+0x314>)
 8005542:	2200      	movs	r2, #0
 8005544:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8005548:	4b64      	ldr	r3, [pc, #400]	; (80056dc <voltage_monitor_init+0x314>)
 800554a:	f640 42b9 	movw	r2, #3257	; 0xcb9
 800554e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8005552:	4b62      	ldr	r3, [pc, #392]	; (80056dc <voltage_monitor_init+0x314>)
 8005554:	f640 3283 	movw	r2, #2947	; 0xb83
 8005558:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 800555c:	4b5f      	ldr	r3, [pc, #380]	; (80056dc <voltage_monitor_init+0x314>)
 800555e:	2209      	movs	r2, #9
 8005560:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8005564:	4b5d      	ldr	r3, [pc, #372]	; (80056dc <voltage_monitor_init+0x314>)
 8005566:	2200      	movs	r2, #0
 8005568:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 800556c:	4b5b      	ldr	r3, [pc, #364]	; (80056dc <voltage_monitor_init+0x314>)
 800556e:	2200      	movs	r2, #0
 8005570:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8005574:	4b59      	ldr	r3, [pc, #356]	; (80056dc <voltage_monitor_init+0x314>)
 8005576:	2200      	movs	r2, #0
 8005578:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 800557c:	4b57      	ldr	r3, [pc, #348]	; (80056dc <voltage_monitor_init+0x314>)
 800557e:	f640 7245 	movw	r2, #3909	; 0xf45
 8005582:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8005586:	4b55      	ldr	r3, [pc, #340]	; (80056dc <voltage_monitor_init+0x314>)
 8005588:	2200      	movs	r2, #0
 800558a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 800558e:	4b53      	ldr	r3, [pc, #332]	; (80056dc <voltage_monitor_init+0x314>)
 8005590:	220a      	movs	r2, #10
 8005592:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8005596:	4b51      	ldr	r3, [pc, #324]	; (80056dc <voltage_monitor_init+0x314>)
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 800559e:	4b4f      	ldr	r3, [pc, #316]	; (80056dc <voltage_monitor_init+0x314>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 80055a6:	4b4d      	ldr	r3, [pc, #308]	; (80056dc <voltage_monitor_init+0x314>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 80055ae:	4b4b      	ldr	r3, [pc, #300]	; (80056dc <voltage_monitor_init+0x314>)
 80055b0:	f640 7245 	movw	r2, #3909	; 0xf45
 80055b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3909;
 80055b8:	4b48      	ldr	r3, [pc, #288]	; (80056dc <voltage_monitor_init+0x314>)
 80055ba:	f640 7245 	movw	r2, #3909	; 0xf45
 80055be:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
//	rail_monitor[RAIL_5v].min_voltage = 3537;

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 80055c2:	4b46      	ldr	r3, [pc, #280]	; (80056dc <voltage_monitor_init+0x314>)
 80055c4:	220b      	movs	r2, #11
 80055c6:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 80055ca:	4b44      	ldr	r3, [pc, #272]	; (80056dc <voltage_monitor_init+0x314>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 80055d2:	4b42      	ldr	r3, [pc, #264]	; (80056dc <voltage_monitor_init+0x314>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 80055da:	4b40      	ldr	r3, [pc, #256]	; (80056dc <voltage_monitor_init+0x314>)
 80055dc:	2200      	movs	r2, #0
 80055de:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 80055e2:	4b3e      	ldr	r3, [pc, #248]	; (80056dc <voltage_monitor_init+0x314>)
 80055e4:	f640 72fb 	movw	r2, #4091	; 0xffb
 80055e8:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 80055ec:	4b3b      	ldr	r3, [pc, #236]	; (80056dc <voltage_monitor_init+0x314>)
 80055ee:	f640 6276 	movw	r2, #3702	; 0xe76
 80055f2:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 80055f6:	4b39      	ldr	r3, [pc, #228]	; (80056dc <voltage_monitor_init+0x314>)
 80055f8:	220c      	movs	r2, #12
 80055fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 80055fe:	4b37      	ldr	r3, [pc, #220]	; (80056dc <voltage_monitor_init+0x314>)
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 8005606:	4b35      	ldr	r3, [pc, #212]	; (80056dc <voltage_monitor_init+0x314>)
 8005608:	2200      	movs	r2, #0
 800560a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 800560e:	4b33      	ldr	r3, [pc, #204]	; (80056dc <voltage_monitor_init+0x314>)
 8005610:	2200      	movs	r2, #0
 8005612:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 8005616:	4b31      	ldr	r3, [pc, #196]	; (80056dc <voltage_monitor_init+0x314>)
 8005618:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800561c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8005620:	4b2e      	ldr	r3, [pc, #184]	; (80056dc <voltage_monitor_init+0x314>)
 8005622:	2200      	movs	r2, #0
 8005624:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 8005628:	4b2c      	ldr	r3, [pc, #176]	; (80056dc <voltage_monitor_init+0x314>)
 800562a:	220d      	movs	r2, #13
 800562c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8005630:	4b2a      	ldr	r3, [pc, #168]	; (80056dc <voltage_monitor_init+0x314>)
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 8005638:	4b28      	ldr	r3, [pc, #160]	; (80056dc <voltage_monitor_init+0x314>)
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8005640:	4b26      	ldr	r3, [pc, #152]	; (80056dc <voltage_monitor_init+0x314>)
 8005642:	2200      	movs	r2, #0
 8005644:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 8005648:	4b24      	ldr	r3, [pc, #144]	; (80056dc <voltage_monitor_init+0x314>)
 800564a:	f640 7238 	movw	r2, #3896	; 0xf38
 800564e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8005652:	4b22      	ldr	r3, [pc, #136]	; (80056dc <voltage_monitor_init+0x314>)
 8005654:	f640 52c5 	movw	r2, #3525	; 0xdc5
 8005658:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 800565c:	4b1f      	ldr	r3, [pc, #124]	; (80056dc <voltage_monitor_init+0x314>)
 800565e:	220e      	movs	r2, #14
 8005660:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8005664:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <voltage_monitor_init+0x314>)
 8005666:	2200      	movs	r2, #0
 8005668:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 800566c:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <voltage_monitor_init+0x314>)
 800566e:	2200      	movs	r2, #0
 8005670:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8005674:	4b19      	ldr	r3, [pc, #100]	; (80056dc <voltage_monitor_init+0x314>)
 8005676:	2200      	movs	r2, #0
 8005678:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 800567c:	4b17      	ldr	r3, [pc, #92]	; (80056dc <voltage_monitor_init+0x314>)
 800567e:	f640 7245 	movw	r2, #3909	; 0xf45
 8005682:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 8005686:	4b15      	ldr	r3, [pc, #84]	; (80056dc <voltage_monitor_init+0x314>)
 8005688:	f640 52d1 	movw	r2, #3537	; 0xdd1
 800568c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 8005690:	4b12      	ldr	r3, [pc, #72]	; (80056dc <voltage_monitor_init+0x314>)
 8005692:	220f      	movs	r2, #15
 8005694:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 8005698:	4b10      	ldr	r3, [pc, #64]	; (80056dc <voltage_monitor_init+0x314>)
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 80056a0:	4b0e      	ldr	r3, [pc, #56]	; (80056dc <voltage_monitor_init+0x314>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 80056a8:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <voltage_monitor_init+0x314>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 80056b0:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <voltage_monitor_init+0x314>)
 80056b2:	f241 0264 	movw	r2, #4196	; 0x1064
 80056b6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 80056ba:	4b08      	ldr	r3, [pc, #32]	; (80056dc <voltage_monitor_init+0x314>)
 80056bc:	2200      	movs	r2, #0
 80056be:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <voltage_monitor_init+0x314>)
 80056c4:	2210      	movs	r2, #16
 80056c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 80056ca:	4b04      	ldr	r3, [pc, #16]	; (80056dc <voltage_monitor_init+0x314>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 80056d2:	4b02      	ldr	r3, [pc, #8]	; (80056dc <voltage_monitor_init+0x314>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 80056da:	e001      	b.n	80056e0 <voltage_monitor_init+0x318>
 80056dc:	24001f48 	.word	0x24001f48
	rail_monitor[RAIL_n800v].data = 0;
 80056e0:	4b17      	ldr	r3, [pc, #92]	; (8005740 <voltage_monitor_init+0x378>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 80056e8:	4b15      	ldr	r3, [pc, #84]	; (8005740 <voltage_monitor_init+0x378>)
 80056ea:	f640 5208 	movw	r2, #3336	; 0xd08
 80056ee:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 80056f2:	4b13      	ldr	r3, [pc, #76]	; (8005740 <voltage_monitor_init+0x378>)
 80056f4:	f640 32ca 	movw	r2, #3018	; 0xbca
 80056f8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 80056fc:	4b10      	ldr	r3, [pc, #64]	; (8005740 <voltage_monitor_init+0x378>)
 80056fe:	2211      	movs	r2, #17
 8005700:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8005704:	4b0e      	ldr	r3, [pc, #56]	; (8005740 <voltage_monitor_init+0x378>)
 8005706:	2200      	movs	r2, #0
 8005708:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 800570c:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <voltage_monitor_init+0x378>)
 800570e:	2201      	movs	r2, #1
 8005710:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8005714:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <voltage_monitor_init+0x378>)
 8005716:	2200      	movs	r2, #0
 8005718:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 800571c:	4b08      	ldr	r3, [pc, #32]	; (8005740 <voltage_monitor_init+0x378>)
 800571e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005722:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 8005726:	4b06      	ldr	r3, [pc, #24]	; (8005740 <voltage_monitor_init+0x378>)
 8005728:	2200      	movs	r2, #0
 800572a:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 800572e:	2301      	movs	r3, #1
 8005730:	71fb      	strb	r3, [r7, #7]

	return status;
 8005732:	79fb      	ldrb	r3, [r7, #7]
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	24001f48 	.word	0x24001f48

08005744 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	460a      	mov	r2, r1
 800574e:	71fb      	strb	r3, [r7, #7]
 8005750:	4613      	mov	r3, r2
 8005752:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8005754:	2300      	movs	r3, #0
 8005756:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 8005758:	79fa      	ldrb	r2, [r7, #7]
 800575a:	4909      	ldr	r1, [pc, #36]	; (8005780 <set_rail_monitor_enable+0x3c>)
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	440b      	add	r3, r1
 8005766:	3302      	adds	r3, #2
 8005768:	79ba      	ldrb	r2, [r7, #6]
 800576a:	701a      	strb	r2, [r3, #0]
	status = 1;
 800576c:	2301      	movs	r3, #1
 800576e:	73fb      	strb	r3, [r7, #15]

	return status;
 8005770:	7bfb      	ldrb	r3, [r7, #15]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	24001f48 	.word	0x24001f48

08005784 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	; 0x28
 8005788:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 800578a:	2300      	movs	r3, #0
 800578c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 8005790:	463b      	mov	r3, r7
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe fc34 	bl	8004000 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 8005798:	f107 0310 	add.w	r3, r7, #16
 800579c:	4618      	mov	r0, r3
 800579e:	f7fe fc5f 	bl	8004060 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 80057a2:	f107 0308 	add.w	r3, r7, #8
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe fcac 	bl	8004104 <sample_hk_adc3>
 80057ac:	897a      	ldrh	r2, [r7, #10]

	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[1], sizeof(uint16_t));
 80057ae:	4b25      	ldr	r3, [pc, #148]	; (8005844 <set_rail_monitor+0xc0>)
 80057b0:	809a      	strh	r2, [r3, #4]
 80057b2:	893a      	ldrh	r2, [r7, #8]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[0], sizeof(uint16_t));
 80057b4:	4b23      	ldr	r3, [pc, #140]	; (8005844 <set_rail_monitor+0xc0>)
 80057b6:	81da      	strh	r2, [r3, #14]
 80057b8:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 80057ba:	4b22      	ldr	r3, [pc, #136]	; (8005844 <set_rail_monitor+0xc0>)
 80057bc:	831a      	strh	r2, [r3, #24]
 80057be:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 80057c0:	4b20      	ldr	r3, [pc, #128]	; (8005844 <set_rail_monitor+0xc0>)
 80057c2:	845a      	strh	r2, [r3, #34]	; 0x22
 80057c4:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 80057c6:	4b1f      	ldr	r3, [pc, #124]	; (8005844 <set_rail_monitor+0xc0>)
 80057c8:	859a      	strh	r2, [r3, #44]	; 0x2c
 80057ca:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 80057cc:	4b1d      	ldr	r3, [pc, #116]	; (8005844 <set_rail_monitor+0xc0>)
 80057ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80057d0:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 80057d2:	4b1c      	ldr	r3, [pc, #112]	; (8005844 <set_rail_monitor+0xc0>)
 80057d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80057d8:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 80057da:	4b1a      	ldr	r3, [pc, #104]	; (8005844 <set_rail_monitor+0xc0>)
 80057dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80057e0:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 80057e2:	4b18      	ldr	r3, [pc, #96]	; (8005844 <set_rail_monitor+0xc0>)
 80057e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80057e8:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 80057ea:	4b16      	ldr	r3, [pc, #88]	; (8005844 <set_rail_monitor+0xc0>)
 80057ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80057f0:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 80057f2:	4b14      	ldr	r3, [pc, #80]	; (8005844 <set_rail_monitor+0xc0>)
 80057f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80057f8:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 80057fa:	4b12      	ldr	r3, [pc, #72]	; (8005844 <set_rail_monitor+0xc0>)
 80057fc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005800:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8005802:	4b10      	ldr	r3, [pc, #64]	; (8005844 <set_rail_monitor+0xc0>)
 8005804:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005808:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 800580a:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <set_rail_monitor+0xc0>)
 800580c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005810:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8005812:	4b0c      	ldr	r3, [pc, #48]	; (8005844 <set_rail_monitor+0xc0>)
 8005814:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005818:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 800581a:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <set_rail_monitor+0xc0>)
 800581c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005820:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8005822:	4b08      	ldr	r3, [pc, #32]	; (8005844 <set_rail_monitor+0xc0>)
 8005824:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005828:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 800582a:	4b06      	ldr	r3, [pc, #24]	; (8005844 <set_rail_monitor+0xc0>)
 800582c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	status = 1;
 8005830:	2301      	movs	r3, #1
 8005832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 8005836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800583a:	4618      	mov	r0, r3
 800583c:	3728      	adds	r7, #40	; 0x28
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	24001f48 	.word	0x24001f48

08005848 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
	return rail_monitor;
 800584c:	4b02      	ldr	r3, [pc, #8]	; (8005858 <get_rail_monitor+0x10>)
}
 800584e:	4618      	mov	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	24001f48 	.word	0x24001f48

0800585c <in_range>:

uint8_t in_range(uint16_t raw, int min, int max) {
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	4603      	mov	r3, r0
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 800586a:	89fb      	ldrh	r3, [r7, #14]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	429a      	cmp	r2, r3
 8005870:	db05      	blt.n	800587e <in_range+0x22>
 8005872:	89fb      	ldrh	r3, [r7, #14]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	429a      	cmp	r2, r3
 8005878:	dc01      	bgt.n	800587e <in_range+0x22>
		return 1;
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <in_range+0x24>
	}
	return 0;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <monitor_rails>:


void monitor_rails() {
 800588c:	b590      	push	{r4, r7, lr}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005892:	2300      	movs	r3, #0
 8005894:	607b      	str	r3, [r7, #4]
 8005896:	e062      	b.n	800595e <monitor_rails+0xd2>
		if (rail_monitor[i].is_enabled){
 8005898:	4935      	ldr	r1, [pc, #212]	; (8005970 <monitor_rails+0xe4>)
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	440b      	add	r3, r1
 80058a6:	3302      	adds	r3, #2
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d054      	beq.n	8005958 <monitor_rails+0xcc>
			// If current rail is not in range...
			if (!in_range(rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage)){
 80058ae:	4930      	ldr	r1, [pc, #192]	; (8005970 <monitor_rails+0xe4>)
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	440b      	add	r3, r1
 80058bc:	3304      	adds	r3, #4
 80058be:	8818      	ldrh	r0, [r3, #0]
 80058c0:	492b      	ldr	r1, [pc, #172]	; (8005970 <monitor_rails+0xe4>)
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	440b      	add	r3, r1
 80058ce:	3308      	adds	r3, #8
 80058d0:	881b      	ldrh	r3, [r3, #0]
 80058d2:	461c      	mov	r4, r3
 80058d4:	4926      	ldr	r1, [pc, #152]	; (8005970 <monitor_rails+0xe4>)
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4613      	mov	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	005b      	lsls	r3, r3, #1
 80058e0:	440b      	add	r3, r1
 80058e2:	3306      	adds	r3, #6
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	461a      	mov	r2, r3
 80058e8:	4621      	mov	r1, r4
 80058ea:	f7ff ffb7 	bl	800585c <in_range>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d131      	bne.n	8005958 <monitor_rails+0xcc>
				// Increase that rails error count
				rail_monitor[i].error_count++;
 80058f4:	491e      	ldr	r1, [pc, #120]	; (8005970 <monitor_rails+0xe4>)
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	440b      	add	r3, r1
 8005902:	3301      	adds	r3, #1
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	3301      	adds	r3, #1
 8005908:	b2d8      	uxtb	r0, r3
 800590a:	4919      	ldr	r1, [pc, #100]	; (8005970 <monitor_rails+0xe4>)
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	440b      	add	r3, r1
 8005918:	3301      	adds	r3, #1
 800591a:	4602      	mov	r2, r0
 800591c:	701a      	strb	r2, [r3, #0]
				// If that rails' error count is at 3, proceed with error protocol for that rail
				if (rail_monitor[i].error_count == 3) {
 800591e:	4914      	ldr	r1, [pc, #80]	; (8005970 <monitor_rails+0xe4>)
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	440b      	add	r3, r1
 800592c:	3301      	adds	r3, #1
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b03      	cmp	r3, #3
 8005932:	d111      	bne.n	8005958 <monitor_rails+0xcc>
					ERROR_STRUCT error;
					error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 8005934:	490e      	ldr	r1, [pc, #56]	; (8005970 <monitor_rails+0xe4>)
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	4613      	mov	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4413      	add	r3, r2
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	440b      	add	r3, r1
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	4618      	mov	r0, r3
 8005946:	f000 f815 	bl	8005974 <get_rail_name_error_detail>
 800594a:	4603      	mov	r3, r0
 800594c:	707b      	strb	r3, [r7, #1]
					error.category = EC_power_supply_rail;
 800594e:	2300      	movs	r3, #0
 8005950:	703b      	strb	r3, [r7, #0]
					handle_error(error);
 8005952:	6838      	ldr	r0, [r7, #0]
 8005954:	f7fc faec 	bl	8001f30 <handle_error>
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3301      	adds	r3, #1
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b11      	cmp	r3, #17
 8005962:	dd99      	ble.n	8005898 <monitor_rails+0xc>
				}
			}
		}
	}
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	bd90      	pop	{r4, r7, pc}
 800596e:	bf00      	nop
 8005970:	24001f48 	.word	0x24001f48

08005974 <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 800597e:	79fb      	ldrb	r3, [r7, #7]
 8005980:	2b11      	cmp	r3, #17
 8005982:	d84b      	bhi.n	8005a1c <get_rail_name_error_detail+0xa8>
 8005984:	a201      	add	r2, pc, #4	; (adr r2, 800598c <get_rail_name_error_detail+0x18>)
 8005986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598a:	bf00      	nop
 800598c:	080059d5 	.word	0x080059d5
 8005990:	080059d9 	.word	0x080059d9
 8005994:	080059dd 	.word	0x080059dd
 8005998:	080059e1 	.word	0x080059e1
 800599c:	080059e5 	.word	0x080059e5
 80059a0:	080059e9 	.word	0x080059e9
 80059a4:	080059ed 	.word	0x080059ed
 80059a8:	080059f1 	.word	0x080059f1
 80059ac:	080059f5 	.word	0x080059f5
 80059b0:	080059f9 	.word	0x080059f9
 80059b4:	080059fd 	.word	0x080059fd
 80059b8:	08005a01 	.word	0x08005a01
 80059bc:	08005a05 	.word	0x08005a05
 80059c0:	08005a09 	.word	0x08005a09
 80059c4:	08005a0d 	.word	0x08005a0d
 80059c8:	08005a11 	.word	0x08005a11
 80059cc:	08005a15 	.word	0x08005a15
 80059d0:	08005a19 	.word	0x08005a19
	case RAIL_vsense:
		return ED_vsense;
 80059d4:	2306      	movs	r3, #6
 80059d6:	e022      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 80059d8:	2307      	movs	r3, #7
 80059da:	e020      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 80059dc:	2308      	movs	r3, #8
 80059de:	e01e      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 80059e0:	2309      	movs	r3, #9
 80059e2:	e01c      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 80059e4:	230a      	movs	r3, #10
 80059e6:	e01a      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 80059e8:	230b      	movs	r3, #11
 80059ea:	e018      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 80059ec:	230c      	movs	r3, #12
 80059ee:	e016      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 80059f0:	230d      	movs	r3, #13
 80059f2:	e014      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 80059f4:	230e      	movs	r3, #14
 80059f6:	e012      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 80059f8:	230f      	movs	r3, #15
 80059fa:	e010      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 80059fc:	2310      	movs	r3, #16
 80059fe:	e00e      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 8005a00:	2311      	movs	r3, #17
 8005a02:	e00c      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 8005a04:	2312      	movs	r3, #18
 8005a06:	e00a      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 8005a08:	2313      	movs	r3, #19
 8005a0a:	e008      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 8005a0c:	2314      	movs	r3, #20
 8005a0e:	e006      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 8005a10:	2315      	movs	r3, #21
 8005a12:	e004      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 8005a14:	2316      	movs	r3, #22
 8005a16:	e002      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8005a18:	2317      	movs	r3, #23
 8005a1a:	e000      	b.n	8005a1e <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8005a1c:	231a      	movs	r3, #26
	}
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop

08005a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005a30:	f7fe fff0 	bl	8004a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a34:	480c      	ldr	r0, [pc, #48]	; (8005a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005a36:	490d      	ldr	r1, [pc, #52]	; (8005a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005a38:	4a0d      	ldr	r2, [pc, #52]	; (8005a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a3c:	e002      	b.n	8005a44 <LoopCopyDataInit>

08005a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a42:	3304      	adds	r3, #4

08005a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a48:	d3f9      	bcc.n	8005a3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a4a:	4a0a      	ldr	r2, [pc, #40]	; (8005a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005a4c:	4c0a      	ldr	r4, [pc, #40]	; (8005a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a50:	e001      	b.n	8005a56 <LoopFillZerobss>

08005a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a54:	3204      	adds	r2, #4

08005a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a58:	d3fb      	bcc.n	8005a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a5a:	f014 fabd 	bl	8019fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a5e:	f7fd fd99 	bl	8003594 <main>
  bx  lr
 8005a62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a64:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005a68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005a6c:	24000138 	.word	0x24000138
  ldr r2, =_sidata
 8005a70:	0801af08 	.word	0x0801af08
  ldr r2, =_sbss
 8005a74:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8005a78:	2400697c 	.word	0x2400697c

08005a7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a7c:	e7fe      	b.n	8005a7c <ADC3_IRQHandler>
	...

08005a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a86:	2003      	movs	r0, #3
 8005a88:	f001 fd39 	bl	80074fe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a8c:	f008 fe7c 	bl	800e788 <HAL_RCC_GetSysClockFreq>
 8005a90:	4602      	mov	r2, r0
 8005a92:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <HAL_Init+0x68>)
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	0a1b      	lsrs	r3, r3, #8
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	4913      	ldr	r1, [pc, #76]	; (8005aec <HAL_Init+0x6c>)
 8005a9e:	5ccb      	ldrb	r3, [r1, r3]
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <HAL_Init+0x68>)
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	4a0e      	ldr	r2, [pc, #56]	; (8005aec <HAL_Init+0x6c>)
 8005ab4:	5cd3      	ldrb	r3, [r2, r3]
 8005ab6:	f003 031f 	and.w	r3, r3, #31
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac0:	4a0b      	ldr	r2, [pc, #44]	; (8005af0 <HAL_Init+0x70>)
 8005ac2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ac4:	4a0b      	ldr	r2, [pc, #44]	; (8005af4 <HAL_Init+0x74>)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005aca:	2005      	movs	r0, #5
 8005acc:	f7fe fd8c 	bl	80045e8 <HAL_InitTick>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e002      	b.n	8005ae0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005ada:	f7fe fd67 	bl	80045ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	58024400 	.word	0x58024400
 8005aec:	0801ae54 	.word	0x0801ae54
 8005af0:	240000c4 	.word	0x240000c4
 8005af4:	240000c0 	.word	0x240000c0

08005af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005afc:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <HAL_IncTick+0x20>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <HAL_IncTick+0x24>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4413      	add	r3, r2
 8005b08:	4a04      	ldr	r2, [pc, #16]	; (8005b1c <HAL_IncTick+0x24>)
 8005b0a:	6013      	str	r3, [r2, #0]
}
 8005b0c:	bf00      	nop
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	240000cc 	.word	0x240000cc
 8005b1c:	24001ffc 	.word	0x24001ffc

08005b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
  return uwTick;
 8005b24:	4b03      	ldr	r3, [pc, #12]	; (8005b34 <HAL_GetTick+0x14>)
 8005b26:	681b      	ldr	r3, [r3, #0]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	24001ffc 	.word	0x24001ffc

08005b38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8005b3c:	4b03      	ldr	r3, [pc, #12]	; (8005b4c <HAL_GetREVID+0x14>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	0c1b      	lsrs	r3, r3, #16
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	5c001000 	.word	0x5c001000

08005b50 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8005b5a:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	401a      	ands	r2, r3
 8005b64:	4904      	ldr	r1, [pc, #16]	; (8005b78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	604b      	str	r3, [r1, #4]
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	58000400 	.word	0x58000400

08005b7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	609a      	str	r2, [r3, #8]
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	609a      	str	r2, [r3, #8]
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b087      	sub	sp, #28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3360      	adds	r3, #96	; 0x60
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	430b      	orrs	r3, r1
 8005c12:	431a      	orrs	r2, r3
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8005c18:	bf00      	nop
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f003 031f 	and.w	r3, r3, #31
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	fa01 f303 	lsl.w	r3, r1, r3
 8005c44:	431a      	orrs	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	611a      	str	r2, [r3, #16]
}
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b087      	sub	sp, #28
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	60f8      	str	r0, [r7, #12]
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3360      	adds	r3, #96	; 0x60
 8005c66:	461a      	mov	r2, r3
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	601a      	str	r2, [r3, #0]
  }
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e000      	b.n	8005ca6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b087      	sub	sp, #28
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3330      	adds	r3, #48	; 0x30
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	0a1b      	lsrs	r3, r3, #8
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	f003 030c 	and.w	r3, r3, #12
 8005cce:	4413      	add	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	211f      	movs	r1, #31
 8005cde:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce2:	43db      	mvns	r3, r3
 8005ce4:	401a      	ands	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	0e9b      	lsrs	r3, r3, #26
 8005cea:	f003 011f 	and.w	r1, r3, #31
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f003 031f 	and.w	r3, r3, #31
 8005cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005cfe:	bf00      	nop
 8005d00:	371c      	adds	r7, #28
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f023 0203 	bic.w	r2, r3, #3
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	60da      	str	r2, [r3, #12]
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3314      	adds	r3, #20
 8005d40:	461a      	mov	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	0e5b      	lsrs	r3, r3, #25
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	4413      	add	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	0d1b      	lsrs	r3, r3, #20
 8005d58:	f003 031f 	and.w	r3, r3, #31
 8005d5c:	2107      	movs	r1, #7
 8005d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d62:	43db      	mvns	r3, r3
 8005d64:	401a      	ands	r2, r3
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	0d1b      	lsrs	r3, r3, #20
 8005d6a:	f003 031f 	and.w	r3, r3, #31
 8005d6e:	6879      	ldr	r1, [r7, #4]
 8005d70:	fa01 f303 	lsl.w	r3, r1, r3
 8005d74:	431a      	orrs	r2, r3
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005da0:	43db      	mvns	r3, r3
 8005da2:	401a      	ands	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f003 0318 	and.w	r3, r3, #24
 8005daa:	4908      	ldr	r1, [pc, #32]	; (8005dcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8005dac:	40d9      	lsrs	r1, r3
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	400b      	ands	r3, r1
 8005db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005db6:	431a      	orrs	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8005dbe:	bf00      	nop
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	000fffff 	.word	0x000fffff

08005dd0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f003 031f 	and.w	r3, r3, #31
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	4b04      	ldr	r3, [pc, #16]	; (8005e0c <LL_ADC_DisableDeepPowerDown+0x20>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6093      	str	r3, [r2, #8]
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	5fffffc0 	.word	0x5fffffc0

08005e10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e24:	d101      	bne.n	8005e2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e000      	b.n	8005e2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	4b05      	ldr	r3, [pc, #20]	; (8005e5c <LL_ADC_EnableInternalRegulator+0x24>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	6fffffc0 	.word	0x6fffffc0

08005e60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e74:	d101      	bne.n	8005e7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <LL_ADC_Enable+0x24>)
 8005e96:	4013      	ands	r3, r2
 8005e98:	f043 0201 	orr.w	r2, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	7fffffc0 	.word	0x7fffffc0

08005eb0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	4b05      	ldr	r3, [pc, #20]	; (8005ed4 <LL_ADC_Disable+0x24>)
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	f043 0202 	orr.w	r2, r3, #2
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	7fffffc0 	.word	0x7fffffc0

08005ed8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d101      	bne.n	8005ef0 <LL_ADC_IsEnabled+0x18>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e000      	b.n	8005ef2 <LL_ADC_IsEnabled+0x1a>
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d101      	bne.n	8005f16 <LL_ADC_IsDisableOngoing+0x18>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <LL_ADC_IsDisableOngoing+0x1a>
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	4b05      	ldr	r3, [pc, #20]	; (8005f48 <LL_ADC_REG_StartConversion+0x24>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	f043 0204 	orr.w	r2, r3, #4
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	7fffffc0 	.word	0x7fffffc0

08005f4c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	d101      	bne.n	8005f64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005f60:	2301      	movs	r3, #1
 8005f62:	e000      	b.n	8005f66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d101      	bne.n	8005f8a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005f98:	b590      	push	{r4, r7, lr}
 8005f9a:	b089      	sub	sp, #36	; 0x24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e18f      	b.n	80062d2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d109      	bne.n	8005fd4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fa fcc3 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff ff19 	bl	8005e10 <LL_ADC_IsDeepPowerDownEnabled>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d004      	beq.n	8005fee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff feff 	bl	8005dec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff ff34 	bl	8005e60 <LL_ADC_IsInternalRegulatorEnabled>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d114      	bne.n	8006028 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f7ff ff18 	bl	8005e38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006008:	4b87      	ldr	r3, [pc, #540]	; (8006228 <HAL_ADC_Init+0x290>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	099b      	lsrs	r3, r3, #6
 800600e:	4a87      	ldr	r2, [pc, #540]	; (800622c <HAL_ADC_Init+0x294>)
 8006010:	fba2 2303 	umull	r2, r3, r2, r3
 8006014:	099b      	lsrs	r3, r3, #6
 8006016:	3301      	adds	r3, #1
 8006018:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800601a:	e002      	b.n	8006022 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	3b01      	subs	r3, #1
 8006020:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1f9      	bne.n	800601c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff ff17 	bl	8005e60 <LL_ADC_IsInternalRegulatorEnabled>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10d      	bne.n	8006054 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603c:	f043 0210 	orr.w	r2, r3, #16
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006048:	f043 0201 	orr.w	r2, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4618      	mov	r0, r3
 800605a:	f7ff ff77 	bl	8005f4c <LL_ADC_REG_IsConversionOngoing>
 800605e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006064:	f003 0310 	and.w	r3, r3, #16
 8006068:	2b00      	cmp	r3, #0
 800606a:	f040 8129 	bne.w	80062c0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	f040 8125 	bne.w	80062c0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800607e:	f043 0202 	orr.w	r2, r3, #2
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff ff24 	bl	8005ed8 <LL_ADC_IsEnabled>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d136      	bne.n	8006104 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a65      	ldr	r2, [pc, #404]	; (8006230 <HAL_ADC_Init+0x298>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d004      	beq.n	80060aa <HAL_ADC_Init+0x112>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a63      	ldr	r2, [pc, #396]	; (8006234 <HAL_ADC_Init+0x29c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d10e      	bne.n	80060c8 <HAL_ADC_Init+0x130>
 80060aa:	4861      	ldr	r0, [pc, #388]	; (8006230 <HAL_ADC_Init+0x298>)
 80060ac:	f7ff ff14 	bl	8005ed8 <LL_ADC_IsEnabled>
 80060b0:	4604      	mov	r4, r0
 80060b2:	4860      	ldr	r0, [pc, #384]	; (8006234 <HAL_ADC_Init+0x29c>)
 80060b4:	f7ff ff10 	bl	8005ed8 <LL_ADC_IsEnabled>
 80060b8:	4603      	mov	r3, r0
 80060ba:	4323      	orrs	r3, r4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	bf0c      	ite	eq
 80060c0:	2301      	moveq	r3, #1
 80060c2:	2300      	movne	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	e008      	b.n	80060da <HAL_ADC_Init+0x142>
 80060c8:	485b      	ldr	r0, [pc, #364]	; (8006238 <HAL_ADC_Init+0x2a0>)
 80060ca:	f7ff ff05 	bl	8005ed8 <LL_ADC_IsEnabled>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	bf0c      	ite	eq
 80060d4:	2301      	moveq	r3, #1
 80060d6:	2300      	movne	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d012      	beq.n	8006104 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a53      	ldr	r2, [pc, #332]	; (8006230 <HAL_ADC_Init+0x298>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d004      	beq.n	80060f2 <HAL_ADC_Init+0x15a>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a51      	ldr	r2, [pc, #324]	; (8006234 <HAL_ADC_Init+0x29c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d101      	bne.n	80060f6 <HAL_ADC_Init+0x15e>
 80060f2:	4a52      	ldr	r2, [pc, #328]	; (800623c <HAL_ADC_Init+0x2a4>)
 80060f4:	e000      	b.n	80060f8 <HAL_ADC_Init+0x160>
 80060f6:	4a52      	ldr	r2, [pc, #328]	; (8006240 <HAL_ADC_Init+0x2a8>)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	4619      	mov	r1, r3
 80060fe:	4610      	mov	r0, r2
 8006100:	f7ff fd3c 	bl	8005b7c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006104:	f7ff fd18 	bl	8005b38 <HAL_GetREVID>
 8006108:	4603      	mov	r3, r0
 800610a:	f241 0203 	movw	r2, #4099	; 0x1003
 800610e:	4293      	cmp	r3, r2
 8006110:	d914      	bls.n	800613c <HAL_ADC_Init+0x1a4>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b10      	cmp	r3, #16
 8006118:	d110      	bne.n	800613c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	7d5b      	ldrb	r3, [r3, #21]
 800611e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006124:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800612a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	7f1b      	ldrb	r3, [r3, #28]
 8006130:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8006132:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006134:	f043 030c 	orr.w	r3, r3, #12
 8006138:	61bb      	str	r3, [r7, #24]
 800613a:	e00d      	b.n	8006158 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	7d5b      	ldrb	r3, [r3, #21]
 8006140:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006146:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800614c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	7f1b      	ldrb	r3, [r3, #28]
 8006152:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006154:	4313      	orrs	r3, r2
 8006156:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	7f1b      	ldrb	r3, [r3, #28]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d106      	bne.n	800616e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	3b01      	subs	r3, #1
 8006166:	045b      	lsls	r3, r3, #17
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	4313      	orrs	r3, r2
 800616c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	2b00      	cmp	r3, #0
 8006174:	d009      	beq.n	800618a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	4313      	orrs	r3, r2
 8006188:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	4b2c      	ldr	r3, [pc, #176]	; (8006244 <HAL_ADC_Init+0x2ac>)
 8006192:	4013      	ands	r3, r2
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6812      	ldr	r2, [r2, #0]
 8006198:	69b9      	ldr	r1, [r7, #24]
 800619a:	430b      	orrs	r3, r1
 800619c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff fed2 	bl	8005f4c <LL_ADC_REG_IsConversionOngoing>
 80061a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff fedf 	bl	8005f72 <LL_ADC_INJ_IsConversionOngoing>
 80061b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d15f      	bne.n	800627c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d15c      	bne.n	800627c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	7d1b      	ldrb	r3, [r3, #20]
 80061c6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80061cc:	4313      	orrs	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	4b1c      	ldr	r3, [pc, #112]	; (8006248 <HAL_ADC_Init+0x2b0>)
 80061d8:	4013      	ands	r3, r2
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	6812      	ldr	r2, [r2, #0]
 80061de:	69b9      	ldr	r1, [r7, #24]
 80061e0:	430b      	orrs	r3, r1
 80061e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d130      	bne.n	8006250 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	4b14      	ldr	r3, [pc, #80]	; (800624c <HAL_ADC_Init+0x2b4>)
 80061fc:	4013      	ands	r3, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006202:	3a01      	subs	r2, #1
 8006204:	0411      	lsls	r1, r2, #16
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800620a:	4311      	orrs	r1, r2
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006210:	4311      	orrs	r1, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006216:	430a      	orrs	r2, r1
 8006218:	431a      	orrs	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	611a      	str	r2, [r3, #16]
 8006224:	e01c      	b.n	8006260 <HAL_ADC_Init+0x2c8>
 8006226:	bf00      	nop
 8006228:	240000c0 	.word	0x240000c0
 800622c:	053e2d63 	.word	0x053e2d63
 8006230:	40022000 	.word	0x40022000
 8006234:	40022100 	.word	0x40022100
 8006238:	58026000 	.word	0x58026000
 800623c:	40022300 	.word	0x40022300
 8006240:	58026300 	.word	0x58026300
 8006244:	fff0c003 	.word	0xfff0c003
 8006248:	ffffbffc 	.word	0xffffbffc
 800624c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691a      	ldr	r2, [r3, #16]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0201 	bic.w	r2, r2, #1
 800625e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 fdec 	bl	8006e54 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d10c      	bne.n	800629e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	f023 010f 	bic.w	r1, r3, #15
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	1e5a      	subs	r2, r3, #1
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	631a      	str	r2, [r3, #48]	; 0x30
 800629c:	e007      	b.n	80062ae <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 020f 	bic.w	r2, r2, #15
 80062ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	f043 0201 	orr.w	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	655a      	str	r2, [r3, #84]	; 0x54
 80062be:	e007      	b.n	80062d0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c4:	f043 0210 	orr.w	r2, r3, #16
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80062d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3724      	adds	r7, #36	; 0x24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd90      	pop	{r4, r7, pc}
 80062da:	bf00      	nop

080062dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a55      	ldr	r2, [pc, #340]	; (8006444 <HAL_ADC_Start_DMA+0x168>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d004      	beq.n	80062fc <HAL_ADC_Start_DMA+0x20>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a54      	ldr	r2, [pc, #336]	; (8006448 <HAL_ADC_Start_DMA+0x16c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d101      	bne.n	8006300 <HAL_ADC_Start_DMA+0x24>
 80062fc:	4b53      	ldr	r3, [pc, #332]	; (800644c <HAL_ADC_Start_DMA+0x170>)
 80062fe:	e000      	b.n	8006302 <HAL_ADC_Start_DMA+0x26>
 8006300:	4b53      	ldr	r3, [pc, #332]	; (8006450 <HAL_ADC_Start_DMA+0x174>)
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff fd64 	bl	8005dd0 <LL_ADC_GetMultimode>
 8006308:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff fe1c 	bl	8005f4c <LL_ADC_REG_IsConversionOngoing>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	f040 808c 	bne.w	8006434 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006322:	2b01      	cmp	r3, #1
 8006324:	d101      	bne.n	800632a <HAL_ADC_Start_DMA+0x4e>
 8006326:	2302      	movs	r3, #2
 8006328:	e087      	b.n	800643a <HAL_ADC_Start_DMA+0x15e>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b05      	cmp	r3, #5
 800633c:	d002      	beq.n	8006344 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b09      	cmp	r3, #9
 8006342:	d170      	bne.n	8006426 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 fc07 	bl	8006b58 <ADC_Enable>
 800634a:	4603      	mov	r3, r0
 800634c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800634e:	7dfb      	ldrb	r3, [r7, #23]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d163      	bne.n	800641c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006358:	4b3e      	ldr	r3, [pc, #248]	; (8006454 <HAL_ADC_Start_DMA+0x178>)
 800635a:	4013      	ands	r3, r2
 800635c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a37      	ldr	r2, [pc, #220]	; (8006448 <HAL_ADC_Start_DMA+0x16c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d002      	beq.n	8006374 <HAL_ADC_Start_DMA+0x98>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	e000      	b.n	8006376 <HAL_ADC_Start_DMA+0x9a>
 8006374:	4b33      	ldr	r3, [pc, #204]	; (8006444 <HAL_ADC_Start_DMA+0x168>)
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	6812      	ldr	r2, [r2, #0]
 800637a:	4293      	cmp	r3, r2
 800637c:	d002      	beq.n	8006384 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d105      	bne.n	8006390 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006388:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d006      	beq.n	80063aa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a0:	f023 0206 	bic.w	r2, r3, #6
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	659a      	str	r2, [r3, #88]	; 0x58
 80063a8:	e002      	b.n	80063b0 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b4:	4a28      	ldr	r2, [pc, #160]	; (8006458 <HAL_ADC_Start_DMA+0x17c>)
 80063b6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063bc:	4a27      	ldr	r2, [pc, #156]	; (800645c <HAL_ADC_Start_DMA+0x180>)
 80063be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c4:	4a26      	ldr	r2, [pc, #152]	; (8006460 <HAL_ADC_Start_DMA+0x184>)
 80063c6:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	221c      	movs	r2, #28
 80063ce:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0210 	orr.w	r2, r2, #16
 80063e6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f0:	4619      	mov	r1, r3
 80063f2:	4610      	mov	r0, r2
 80063f4:	f7ff fc89 	bl	8005d0a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3340      	adds	r3, #64	; 0x40
 8006402:	4619      	mov	r1, r3
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f002 f80e 	bl	8008428 <HAL_DMA_Start_IT>
 800640c:	4603      	mov	r3, r0
 800640e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fd85 	bl	8005f24 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800641a:	e00d      	b.n	8006438 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8006424:	e008      	b.n	8006438 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006432:	e001      	b.n	8006438 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006434:	2302      	movs	r3, #2
 8006436:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006438:	7dfb      	ldrb	r3, [r7, #23]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40022000 	.word	0x40022000
 8006448:	40022100 	.word	0x40022100
 800644c:	40022300 	.word	0x40022300
 8006450:	58026300 	.word	0x58026300
 8006454:	fffff0fe 	.word	0xfffff0fe
 8006458:	08006d2b 	.word	0x08006d2b
 800645c:	08006e03 	.word	0x08006e03
 8006460:	08006e1f 	.word	0x08006e1f

08006464 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80064a0:	b590      	push	{r4, r7, lr}
 80064a2:	b0a1      	sub	sp, #132	; 0x84
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80064b0:	2300      	movs	r3, #0
 80064b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	4a65      	ldr	r2, [pc, #404]	; (8006650 <HAL_ADC_ConfigChannel+0x1b0>)
 80064ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_ADC_ConfigChannel+0x2a>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e32e      	b.n	8006b28 <HAL_ADC_ConfigChannel+0x688>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff fd38 	bl	8005f4c <LL_ADC_REG_IsConversionOngoing>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f040 8313 	bne.w	8006b0a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	db2c      	blt.n	8006546 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d108      	bne.n	800650a <HAL_ADC_ConfigChannel+0x6a>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	0e9b      	lsrs	r3, r3, #26
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	2201      	movs	r2, #1
 8006504:	fa02 f303 	lsl.w	r3, r2, r3
 8006508:	e016      	b.n	8006538 <HAL_ADC_ConfigChannel+0x98>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006512:	fa93 f3a3 	rbit	r3, r3
 8006516:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800651a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800651c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8006522:	2320      	movs	r3, #32
 8006524:	e003      	b.n	800652e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8006526:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006528:	fab3 f383 	clz	r3, r3
 800652c:	b2db      	uxtb	r3, r3
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	2201      	movs	r2, #1
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	69d1      	ldr	r1, [r2, #28]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6812      	ldr	r2, [r2, #0]
 8006542:	430b      	orrs	r3, r1
 8006544:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	6859      	ldr	r1, [r3, #4]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	f7ff fbad 	bl	8005cb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff fcf5 	bl	8005f4c <LL_ADC_REG_IsConversionOngoing>
 8006562:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff fd02 	bl	8005f72 <LL_ADC_INJ_IsConversionOngoing>
 800656e:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006572:	2b00      	cmp	r3, #0
 8006574:	f040 80b8 	bne.w	80066e8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800657a:	2b00      	cmp	r3, #0
 800657c:	f040 80b4 	bne.w	80066e8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	6819      	ldr	r1, [r3, #0]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	461a      	mov	r2, r3
 800658e:	f7ff fbcf 	bl	8005d30 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006592:	4b30      	ldr	r3, [pc, #192]	; (8006654 <HAL_ADC_ConfigChannel+0x1b4>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800659a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800659e:	d10b      	bne.n	80065b8 <HAL_ADC_ConfigChannel+0x118>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	695a      	ldr	r2, [r3, #20]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	089b      	lsrs	r3, r3, #2
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	e01d      	b.n	80065f4 <HAL_ADC_ConfigChannel+0x154>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f003 0310 	and.w	r3, r3, #16
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10b      	bne.n	80065de <HAL_ADC_ConfigChannel+0x13e>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	695a      	ldr	r2, [r3, #20]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	089b      	lsrs	r3, r3, #2
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	fa02 f303 	lsl.w	r3, r2, r3
 80065dc:	e00a      	b.n	80065f4 <HAL_ADC_ConfigChannel+0x154>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	695a      	ldr	r2, [r3, #20]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	089b      	lsrs	r3, r3, #2
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d02c      	beq.n	8006658 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	6919      	ldr	r1, [r3, #16]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800660c:	f7ff faea 	bl	8005be4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6818      	ldr	r0, [r3, #0]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	6919      	ldr	r1, [r3, #16]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	7e5b      	ldrb	r3, [r3, #25]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d102      	bne.n	8006626 <HAL_ADC_ConfigChannel+0x186>
 8006620:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006624:	e000      	b.n	8006628 <HAL_ADC_ConfigChannel+0x188>
 8006626:	2300      	movs	r3, #0
 8006628:	461a      	mov	r2, r3
 800662a:	f7ff fb14 	bl	8005c56 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	6919      	ldr	r1, [r3, #16]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	7e1b      	ldrb	r3, [r3, #24]
 800663a:	2b01      	cmp	r3, #1
 800663c:	d102      	bne.n	8006644 <HAL_ADC_ConfigChannel+0x1a4>
 800663e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006642:	e000      	b.n	8006646 <HAL_ADC_ConfigChannel+0x1a6>
 8006644:	2300      	movs	r3, #0
 8006646:	461a      	mov	r2, r3
 8006648:	f7ff faec 	bl	8005c24 <LL_ADC_SetDataRightShift>
 800664c:	e04c      	b.n	80066e8 <HAL_ADC_ConfigChannel+0x248>
 800664e:	bf00      	nop
 8006650:	47ff0000 	.word	0x47ff0000
 8006654:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	069b      	lsls	r3, r3, #26
 8006668:	429a      	cmp	r2, r3
 800666a:	d107      	bne.n	800667c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800667a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006682:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	069b      	lsls	r3, r3, #26
 800668c:	429a      	cmp	r2, r3
 800668e:	d107      	bne.n	80066a0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800669e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	069b      	lsls	r3, r3, #26
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d107      	bne.n	80066c4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80066c2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	069b      	lsls	r3, r3, #26
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d107      	bne.n	80066e8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80066e6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7ff fbf3 	bl	8005ed8 <LL_ADC_IsEnabled>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f040 8211 	bne.w	8006b1c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6818      	ldr	r0, [r3, #0]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	6819      	ldr	r1, [r3, #0]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	461a      	mov	r2, r3
 8006708:	f7ff fb3e 	bl	8005d88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	4aa1      	ldr	r2, [pc, #644]	; (8006998 <HAL_ADC_ConfigChannel+0x4f8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	f040 812e 	bne.w	8006974 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10b      	bne.n	8006740 <HAL_ADC_ConfigChannel+0x2a0>
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	0e9b      	lsrs	r3, r3, #26
 800672e:	3301      	adds	r3, #1
 8006730:	f003 031f 	and.w	r3, r3, #31
 8006734:	2b09      	cmp	r3, #9
 8006736:	bf94      	ite	ls
 8006738:	2301      	movls	r3, #1
 800673a:	2300      	movhi	r3, #0
 800673c:	b2db      	uxtb	r3, r3
 800673e:	e019      	b.n	8006774 <HAL_ADC_ConfigChannel+0x2d4>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006748:	fa93 f3a3 	rbit	r3, r3
 800674c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800674e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006750:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8006758:	2320      	movs	r3, #32
 800675a:	e003      	b.n	8006764 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800675c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800675e:	fab3 f383 	clz	r3, r3
 8006762:	b2db      	uxtb	r3, r3
 8006764:	3301      	adds	r3, #1
 8006766:	f003 031f 	and.w	r3, r3, #31
 800676a:	2b09      	cmp	r3, #9
 800676c:	bf94      	ite	ls
 800676e:	2301      	movls	r3, #1
 8006770:	2300      	movhi	r3, #0
 8006772:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006774:	2b00      	cmp	r3, #0
 8006776:	d079      	beq.n	800686c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006780:	2b00      	cmp	r3, #0
 8006782:	d107      	bne.n	8006794 <HAL_ADC_ConfigChannel+0x2f4>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	0e9b      	lsrs	r3, r3, #26
 800678a:	3301      	adds	r3, #1
 800678c:	069b      	lsls	r3, r3, #26
 800678e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006792:	e015      	b.n	80067c0 <HAL_ADC_ConfigChannel+0x320>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679c:	fa93 f3a3 	rbit	r3, r3
 80067a0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80067a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067a4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80067a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80067ac:	2320      	movs	r3, #32
 80067ae:	e003      	b.n	80067b8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80067b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067b2:	fab3 f383 	clz	r3, r3
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	3301      	adds	r3, #1
 80067ba:	069b      	lsls	r3, r3, #26
 80067bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d109      	bne.n	80067e0 <HAL_ADC_ConfigChannel+0x340>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	0e9b      	lsrs	r3, r3, #26
 80067d2:	3301      	adds	r3, #1
 80067d4:	f003 031f 	and.w	r3, r3, #31
 80067d8:	2101      	movs	r1, #1
 80067da:	fa01 f303 	lsl.w	r3, r1, r3
 80067de:	e017      	b.n	8006810 <HAL_ADC_ConfigChannel+0x370>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e8:	fa93 f3a3 	rbit	r3, r3
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80067ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80067f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80067f8:	2320      	movs	r3, #32
 80067fa:	e003      	b.n	8006804 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80067fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067fe:	fab3 f383 	clz	r3, r3
 8006802:	b2db      	uxtb	r3, r3
 8006804:	3301      	adds	r3, #1
 8006806:	f003 031f 	and.w	r3, r3, #31
 800680a:	2101      	movs	r1, #1
 800680c:	fa01 f303 	lsl.w	r3, r1, r3
 8006810:	ea42 0103 	orr.w	r1, r2, r3
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <HAL_ADC_ConfigChannel+0x396>
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	0e9b      	lsrs	r3, r3, #26
 8006826:	3301      	adds	r3, #1
 8006828:	f003 021f 	and.w	r2, r3, #31
 800682c:	4613      	mov	r3, r2
 800682e:	005b      	lsls	r3, r3, #1
 8006830:	4413      	add	r3, r2
 8006832:	051b      	lsls	r3, r3, #20
 8006834:	e018      	b.n	8006868 <HAL_ADC_ConfigChannel+0x3c8>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800683e:	fa93 f3a3 	rbit	r3, r3
 8006842:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800684e:	2320      	movs	r3, #32
 8006850:	e003      	b.n	800685a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	fab3 f383 	clz	r3, r3
 8006858:	b2db      	uxtb	r3, r3
 800685a:	3301      	adds	r3, #1
 800685c:	f003 021f 	and.w	r2, r3, #31
 8006860:	4613      	mov	r3, r2
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	4413      	add	r3, r2
 8006866:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006868:	430b      	orrs	r3, r1
 800686a:	e07e      	b.n	800696a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006874:	2b00      	cmp	r3, #0
 8006876:	d107      	bne.n	8006888 <HAL_ADC_ConfigChannel+0x3e8>
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	0e9b      	lsrs	r3, r3, #26
 800687e:	3301      	adds	r3, #1
 8006880:	069b      	lsls	r3, r3, #26
 8006882:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006886:	e015      	b.n	80068b4 <HAL_ADC_ConfigChannel+0x414>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	fa93 f3a3 	rbit	r3, r3
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800689a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80068a0:	2320      	movs	r3, #32
 80068a2:	e003      	b.n	80068ac <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	fab3 f383 	clz	r3, r3
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	3301      	adds	r3, #1
 80068ae:	069b      	lsls	r3, r3, #26
 80068b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <HAL_ADC_ConfigChannel+0x434>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	0e9b      	lsrs	r3, r3, #26
 80068c6:	3301      	adds	r3, #1
 80068c8:	f003 031f 	and.w	r3, r3, #31
 80068cc:	2101      	movs	r1, #1
 80068ce:	fa01 f303 	lsl.w	r3, r1, r3
 80068d2:	e017      	b.n	8006904 <HAL_ADC_ConfigChannel+0x464>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	fa93 f3a3 	rbit	r3, r3
 80068e0:	61bb      	str	r3, [r7, #24]
  return result;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80068ec:	2320      	movs	r3, #32
 80068ee:	e003      	b.n	80068f8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	fab3 f383 	clz	r3, r3
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	3301      	adds	r3, #1
 80068fa:	f003 031f 	and.w	r3, r3, #31
 80068fe:	2101      	movs	r1, #1
 8006900:	fa01 f303 	lsl.w	r3, r1, r3
 8006904:	ea42 0103 	orr.w	r1, r2, r3
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10d      	bne.n	8006930 <HAL_ADC_ConfigChannel+0x490>
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	0e9b      	lsrs	r3, r3, #26
 800691a:	3301      	adds	r3, #1
 800691c:	f003 021f 	and.w	r2, r3, #31
 8006920:	4613      	mov	r3, r2
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	4413      	add	r3, r2
 8006926:	3b1e      	subs	r3, #30
 8006928:	051b      	lsls	r3, r3, #20
 800692a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800692e:	e01b      	b.n	8006968 <HAL_ADC_ConfigChannel+0x4c8>
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	fa93 f3a3 	rbit	r3, r3
 800693c:	60fb      	str	r3, [r7, #12]
  return result;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8006948:	2320      	movs	r3, #32
 800694a:	e003      	b.n	8006954 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	fab3 f383 	clz	r3, r3
 8006952:	b2db      	uxtb	r3, r3
 8006954:	3301      	adds	r3, #1
 8006956:	f003 021f 	and.w	r2, r3, #31
 800695a:	4613      	mov	r3, r2
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	4413      	add	r3, r2
 8006960:	3b1e      	subs	r3, #30
 8006962:	051b      	lsls	r3, r3, #20
 8006964:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006968:	430b      	orrs	r3, r1
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	6892      	ldr	r2, [r2, #8]
 800696e:	4619      	mov	r1, r3
 8006970:	f7ff f9de 	bl	8005d30 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	f280 80cf 	bge.w	8006b1c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a06      	ldr	r2, [pc, #24]	; (800699c <HAL_ADC_ConfigChannel+0x4fc>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d004      	beq.n	8006992 <HAL_ADC_ConfigChannel+0x4f2>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a04      	ldr	r2, [pc, #16]	; (80069a0 <HAL_ADC_ConfigChannel+0x500>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d10a      	bne.n	80069a8 <HAL_ADC_ConfigChannel+0x508>
 8006992:	4b04      	ldr	r3, [pc, #16]	; (80069a4 <HAL_ADC_ConfigChannel+0x504>)
 8006994:	e009      	b.n	80069aa <HAL_ADC_ConfigChannel+0x50a>
 8006996:	bf00      	nop
 8006998:	47ff0000 	.word	0x47ff0000
 800699c:	40022000 	.word	0x40022000
 80069a0:	40022100 	.word	0x40022100
 80069a4:	40022300 	.word	0x40022300
 80069a8:	4b61      	ldr	r3, [pc, #388]	; (8006b30 <HAL_ADC_ConfigChannel+0x690>)
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff f90c 	bl	8005bc8 <LL_ADC_GetCommonPathInternalCh>
 80069b0:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a5f      	ldr	r2, [pc, #380]	; (8006b34 <HAL_ADC_ConfigChannel+0x694>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d004      	beq.n	80069c6 <HAL_ADC_ConfigChannel+0x526>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a5d      	ldr	r2, [pc, #372]	; (8006b38 <HAL_ADC_ConfigChannel+0x698>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d10e      	bne.n	80069e4 <HAL_ADC_ConfigChannel+0x544>
 80069c6:	485b      	ldr	r0, [pc, #364]	; (8006b34 <HAL_ADC_ConfigChannel+0x694>)
 80069c8:	f7ff fa86 	bl	8005ed8 <LL_ADC_IsEnabled>
 80069cc:	4604      	mov	r4, r0
 80069ce:	485a      	ldr	r0, [pc, #360]	; (8006b38 <HAL_ADC_ConfigChannel+0x698>)
 80069d0:	f7ff fa82 	bl	8005ed8 <LL_ADC_IsEnabled>
 80069d4:	4603      	mov	r3, r0
 80069d6:	4323      	orrs	r3, r4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bf0c      	ite	eq
 80069dc:	2301      	moveq	r3, #1
 80069de:	2300      	movne	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	e008      	b.n	80069f6 <HAL_ADC_ConfigChannel+0x556>
 80069e4:	4855      	ldr	r0, [pc, #340]	; (8006b3c <HAL_ADC_ConfigChannel+0x69c>)
 80069e6:	f7ff fa77 	bl	8005ed8 <LL_ADC_IsEnabled>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bf0c      	ite	eq
 80069f0:	2301      	moveq	r3, #1
 80069f2:	2300      	movne	r3, #0
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d07d      	beq.n	8006af6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a50      	ldr	r2, [pc, #320]	; (8006b40 <HAL_ADC_ConfigChannel+0x6a0>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d130      	bne.n	8006a66 <HAL_ADC_ConfigChannel+0x5c6>
 8006a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d12b      	bne.n	8006a66 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a4a      	ldr	r2, [pc, #296]	; (8006b3c <HAL_ADC_ConfigChannel+0x69c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	f040 8081 	bne.w	8006b1c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a45      	ldr	r2, [pc, #276]	; (8006b34 <HAL_ADC_ConfigChannel+0x694>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d004      	beq.n	8006a2e <HAL_ADC_ConfigChannel+0x58e>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a43      	ldr	r2, [pc, #268]	; (8006b38 <HAL_ADC_ConfigChannel+0x698>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d101      	bne.n	8006a32 <HAL_ADC_ConfigChannel+0x592>
 8006a2e:	4a45      	ldr	r2, [pc, #276]	; (8006b44 <HAL_ADC_ConfigChannel+0x6a4>)
 8006a30:	e000      	b.n	8006a34 <HAL_ADC_ConfigChannel+0x594>
 8006a32:	4a3f      	ldr	r2, [pc, #252]	; (8006b30 <HAL_ADC_ConfigChannel+0x690>)
 8006a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	f7ff f8b0 	bl	8005ba2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006a42:	4b41      	ldr	r3, [pc, #260]	; (8006b48 <HAL_ADC_ConfigChannel+0x6a8>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	099b      	lsrs	r3, r3, #6
 8006a48:	4a40      	ldr	r2, [pc, #256]	; (8006b4c <HAL_ADC_ConfigChannel+0x6ac>)
 8006a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4e:	099b      	lsrs	r3, r3, #6
 8006a50:	3301      	adds	r3, #1
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006a56:	e002      	b.n	8006a5e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1f9      	bne.n	8006a58 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006a64:	e05a      	b.n	8006b1c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a39      	ldr	r2, [pc, #228]	; (8006b50 <HAL_ADC_ConfigChannel+0x6b0>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d11e      	bne.n	8006aae <HAL_ADC_ConfigChannel+0x60e>
 8006a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d119      	bne.n	8006aae <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a2f      	ldr	r2, [pc, #188]	; (8006b3c <HAL_ADC_ConfigChannel+0x69c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d14b      	bne.n	8006b1c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a2a      	ldr	r2, [pc, #168]	; (8006b34 <HAL_ADC_ConfigChannel+0x694>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d004      	beq.n	8006a98 <HAL_ADC_ConfigChannel+0x5f8>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a29      	ldr	r2, [pc, #164]	; (8006b38 <HAL_ADC_ConfigChannel+0x698>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d101      	bne.n	8006a9c <HAL_ADC_ConfigChannel+0x5fc>
 8006a98:	4a2a      	ldr	r2, [pc, #168]	; (8006b44 <HAL_ADC_ConfigChannel+0x6a4>)
 8006a9a:	e000      	b.n	8006a9e <HAL_ADC_ConfigChannel+0x5fe>
 8006a9c:	4a24      	ldr	r2, [pc, #144]	; (8006b30 <HAL_ADC_ConfigChannel+0x690>)
 8006a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f7ff f87b 	bl	8005ba2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006aac:	e036      	b.n	8006b1c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a28      	ldr	r2, [pc, #160]	; (8006b54 <HAL_ADC_ConfigChannel+0x6b4>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d131      	bne.n	8006b1c <HAL_ADC_ConfigChannel+0x67c>
 8006ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d12c      	bne.n	8006b1c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a1d      	ldr	r2, [pc, #116]	; (8006b3c <HAL_ADC_ConfigChannel+0x69c>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d127      	bne.n	8006b1c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a18      	ldr	r2, [pc, #96]	; (8006b34 <HAL_ADC_ConfigChannel+0x694>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d004      	beq.n	8006ae0 <HAL_ADC_ConfigChannel+0x640>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a17      	ldr	r2, [pc, #92]	; (8006b38 <HAL_ADC_ConfigChannel+0x698>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d101      	bne.n	8006ae4 <HAL_ADC_ConfigChannel+0x644>
 8006ae0:	4a18      	ldr	r2, [pc, #96]	; (8006b44 <HAL_ADC_ConfigChannel+0x6a4>)
 8006ae2:	e000      	b.n	8006ae6 <HAL_ADC_ConfigChannel+0x646>
 8006ae4:	4a12      	ldr	r2, [pc, #72]	; (8006b30 <HAL_ADC_ConfigChannel+0x690>)
 8006ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f7ff f857 	bl	8005ba2 <LL_ADC_SetCommonPathInternalCh>
 8006af4:	e012      	b.n	8006b1c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afa:	f043 0220 	orr.w	r2, r3, #32
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006b08:	e008      	b.n	8006b1c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0e:	f043 0220 	orr.w	r2, r3, #32
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006b24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3784      	adds	r7, #132	; 0x84
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd90      	pop	{r4, r7, pc}
 8006b30:	58026300 	.word	0x58026300
 8006b34:	40022000 	.word	0x40022000
 8006b38:	40022100 	.word	0x40022100
 8006b3c:	58026000 	.word	0x58026000
 8006b40:	cb840000 	.word	0xcb840000
 8006b44:	40022300 	.word	0x40022300
 8006b48:	240000c0 	.word	0x240000c0
 8006b4c:	053e2d63 	.word	0x053e2d63
 8006b50:	c7520000 	.word	0xc7520000
 8006b54:	cfb80000 	.word	0xcfb80000

08006b58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7ff f9b7 	bl	8005ed8 <LL_ADC_IsEnabled>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d16e      	bne.n	8006c4e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	4b38      	ldr	r3, [pc, #224]	; (8006c58 <ADC_Enable+0x100>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00d      	beq.n	8006b9a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b82:	f043 0210 	orr.w	r2, r3, #16
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8e:	f043 0201 	orr.w	r2, r3, #1
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e05a      	b.n	8006c50 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff f972 	bl	8005e88 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006ba4:	f7fe ffbc 	bl	8005b20 <HAL_GetTick>
 8006ba8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a2b      	ldr	r2, [pc, #172]	; (8006c5c <ADC_Enable+0x104>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d004      	beq.n	8006bbe <ADC_Enable+0x66>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a29      	ldr	r2, [pc, #164]	; (8006c60 <ADC_Enable+0x108>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d101      	bne.n	8006bc2 <ADC_Enable+0x6a>
 8006bbe:	4b29      	ldr	r3, [pc, #164]	; (8006c64 <ADC_Enable+0x10c>)
 8006bc0:	e000      	b.n	8006bc4 <ADC_Enable+0x6c>
 8006bc2:	4b29      	ldr	r3, [pc, #164]	; (8006c68 <ADC_Enable+0x110>)
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7ff f903 	bl	8005dd0 <LL_ADC_GetMultimode>
 8006bca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a23      	ldr	r2, [pc, #140]	; (8006c60 <ADC_Enable+0x108>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d002      	beq.n	8006bdc <ADC_Enable+0x84>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	e000      	b.n	8006bde <ADC_Enable+0x86>
 8006bdc:	4b1f      	ldr	r3, [pc, #124]	; (8006c5c <ADC_Enable+0x104>)
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6812      	ldr	r2, [r2, #0]
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d02c      	beq.n	8006c40 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d130      	bne.n	8006c4e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006bec:	e028      	b.n	8006c40 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7ff f970 	bl	8005ed8 <LL_ADC_IsEnabled>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d104      	bne.n	8006c08 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff f940 	bl	8005e88 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006c08:	f7fe ff8a 	bl	8005b20 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d914      	bls.n	8006c40 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d00d      	beq.n	8006c40 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c28:	f043 0210 	orr.w	r2, r3, #16
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c34:	f043 0201 	orr.w	r2, r3, #1
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e007      	b.n	8006c50 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d1cf      	bne.n	8006bee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	8000003f 	.word	0x8000003f
 8006c5c:	40022000 	.word	0x40022000
 8006c60:	40022100 	.word	0x40022100
 8006c64:	40022300 	.word	0x40022300
 8006c68:	58026300 	.word	0x58026300

08006c6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff f940 	bl	8005efe <LL_ADC_IsDisableOngoing>
 8006c7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff f927 	bl	8005ed8 <LL_ADC_IsEnabled>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d047      	beq.n	8006d20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d144      	bne.n	8006d20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f003 030d 	and.w	r3, r3, #13
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d10c      	bne.n	8006cbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff f901 	bl	8005eb0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2203      	movs	r2, #3
 8006cb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006cb6:	f7fe ff33 	bl	8005b20 <HAL_GetTick>
 8006cba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006cbc:	e029      	b.n	8006d12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc2:	f043 0210 	orr.w	r2, r3, #16
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cce:	f043 0201 	orr.w	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e023      	b.n	8006d22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006cda:	f7fe ff21 	bl	8005b20 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d914      	bls.n	8006d12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00d      	beq.n	8006d12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfa:	f043 0210 	orr.w	r2, r3, #16
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d06:	f043 0201 	orr.w	r2, r3, #1
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e007      	b.n	8006d22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1dc      	bne.n	8006cda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b084      	sub	sp, #16
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d14b      	bne.n	8006ddc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0308 	and.w	r3, r3, #8
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d021      	beq.n	8006da2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fe ff92 	bl	8005c8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d032      	beq.n	8006dd4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d12b      	bne.n	8006dd4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d11f      	bne.n	8006dd4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d98:	f043 0201 	orr.w	r2, r3, #1
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	655a      	str	r2, [r3, #84]	; 0x54
 8006da0:	e018      	b.n	8006dd4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0303 	and.w	r3, r3, #3
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d111      	bne.n	8006dd4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d105      	bne.n	8006dd4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dcc:	f043 0201 	orr.w	r2, r3, #1
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7ff fb45 	bl	8006464 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006dda:	e00e      	b.n	8006dfa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de0:	f003 0310 	and.w	r3, r3, #16
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f7ff fb4f 	bl	800648c <HAL_ADC_ErrorCallback>
}
 8006dee:	e004      	b.n	8006dfa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	4798      	blx	r3
}
 8006dfa:	bf00      	nop
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f7ff fb31 	bl	8006478 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e16:	bf00      	nop
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b084      	sub	sp, #16
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e3c:	f043 0204 	orr.w	r2, r3, #4
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f7ff fb21 	bl	800648c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e4a:	bf00      	nop
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a7a      	ldr	r2, [pc, #488]	; (800704c <ADC_ConfigureBoostMode+0x1f8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d004      	beq.n	8006e70 <ADC_ConfigureBoostMode+0x1c>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a79      	ldr	r2, [pc, #484]	; (8007050 <ADC_ConfigureBoostMode+0x1fc>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d109      	bne.n	8006e84 <ADC_ConfigureBoostMode+0x30>
 8006e70:	4b78      	ldr	r3, [pc, #480]	; (8007054 <ADC_ConfigureBoostMode+0x200>)
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	bf14      	ite	ne
 8006e7c:	2301      	movne	r3, #1
 8006e7e:	2300      	moveq	r3, #0
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	e008      	b.n	8006e96 <ADC_ConfigureBoostMode+0x42>
 8006e84:	4b74      	ldr	r3, [pc, #464]	; (8007058 <ADC_ConfigureBoostMode+0x204>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	bf14      	ite	ne
 8006e90:	2301      	movne	r3, #1
 8006e92:	2300      	moveq	r3, #0
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d01c      	beq.n	8006ed4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006e9a:	f007 fdef 	bl	800ea7c <HAL_RCC_GetHCLKFreq>
 8006e9e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ea8:	d010      	beq.n	8006ecc <ADC_ConfigureBoostMode+0x78>
 8006eaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006eae:	d873      	bhi.n	8006f98 <ADC_ConfigureBoostMode+0x144>
 8006eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb4:	d002      	beq.n	8006ebc <ADC_ConfigureBoostMode+0x68>
 8006eb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eba:	d16d      	bne.n	8006f98 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	0c1b      	lsrs	r3, r3, #16
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec8:	60fb      	str	r3, [r7, #12]
        break;
 8006eca:	e068      	b.n	8006f9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	089b      	lsrs	r3, r3, #2
 8006ed0:	60fb      	str	r3, [r7, #12]
        break;
 8006ed2:	e064      	b.n	8006f9e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006ed4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006ed8:	f04f 0100 	mov.w	r1, #0
 8006edc:	f009 f876 	bl	800ffcc <HAL_RCCEx_GetPeriphCLKFreq>
 8006ee0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006eea:	d051      	beq.n	8006f90 <ADC_ConfigureBoostMode+0x13c>
 8006eec:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006ef0:	d854      	bhi.n	8006f9c <ADC_ConfigureBoostMode+0x148>
 8006ef2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006ef6:	d047      	beq.n	8006f88 <ADC_ConfigureBoostMode+0x134>
 8006ef8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006efc:	d84e      	bhi.n	8006f9c <ADC_ConfigureBoostMode+0x148>
 8006efe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006f02:	d03d      	beq.n	8006f80 <ADC_ConfigureBoostMode+0x12c>
 8006f04:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006f08:	d848      	bhi.n	8006f9c <ADC_ConfigureBoostMode+0x148>
 8006f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f0e:	d033      	beq.n	8006f78 <ADC_ConfigureBoostMode+0x124>
 8006f10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f14:	d842      	bhi.n	8006f9c <ADC_ConfigureBoostMode+0x148>
 8006f16:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006f1a:	d029      	beq.n	8006f70 <ADC_ConfigureBoostMode+0x11c>
 8006f1c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006f20:	d83c      	bhi.n	8006f9c <ADC_ConfigureBoostMode+0x148>
 8006f22:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006f26:	d01a      	beq.n	8006f5e <ADC_ConfigureBoostMode+0x10a>
 8006f28:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006f2c:	d836      	bhi.n	8006f9c <ADC_ConfigureBoostMode+0x148>
 8006f2e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006f32:	d014      	beq.n	8006f5e <ADC_ConfigureBoostMode+0x10a>
 8006f34:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006f38:	d830      	bhi.n	8006f9c <ADC_ConfigureBoostMode+0x148>
 8006f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f3e:	d00e      	beq.n	8006f5e <ADC_ConfigureBoostMode+0x10a>
 8006f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f44:	d82a      	bhi.n	8006f9c <ADC_ConfigureBoostMode+0x148>
 8006f46:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f4a:	d008      	beq.n	8006f5e <ADC_ConfigureBoostMode+0x10a>
 8006f4c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006f50:	d824      	bhi.n	8006f9c <ADC_ConfigureBoostMode+0x148>
 8006f52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f56:	d002      	beq.n	8006f5e <ADC_ConfigureBoostMode+0x10a>
 8006f58:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006f5c:	d11e      	bne.n	8006f9c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	0c9b      	lsrs	r3, r3, #18
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6c:	60fb      	str	r3, [r7, #12]
        break;
 8006f6e:	e016      	b.n	8006f9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	091b      	lsrs	r3, r3, #4
 8006f74:	60fb      	str	r3, [r7, #12]
        break;
 8006f76:	e012      	b.n	8006f9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	095b      	lsrs	r3, r3, #5
 8006f7c:	60fb      	str	r3, [r7, #12]
        break;
 8006f7e:	e00e      	b.n	8006f9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	099b      	lsrs	r3, r3, #6
 8006f84:	60fb      	str	r3, [r7, #12]
        break;
 8006f86:	e00a      	b.n	8006f9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	09db      	lsrs	r3, r3, #7
 8006f8c:	60fb      	str	r3, [r7, #12]
        break;
 8006f8e:	e006      	b.n	8006f9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	60fb      	str	r3, [r7, #12]
        break;
 8006f96:	e002      	b.n	8006f9e <ADC_ConfigureBoostMode+0x14a>
        break;
 8006f98:	bf00      	nop
 8006f9a:	e000      	b.n	8006f9e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006f9c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8006f9e:	f7fe fdcb 	bl	8005b38 <HAL_GetREVID>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d815      	bhi.n	8006fd8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4a2b      	ldr	r2, [pc, #172]	; (800705c <ADC_ConfigureBoostMode+0x208>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d908      	bls.n	8006fc6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689a      	ldr	r2, [r3, #8]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fc2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006fc4:	e03e      	b.n	8007044 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fd4:	609a      	str	r2, [r3, #8]
}
 8006fd6:	e035      	b.n	8007044 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	085b      	lsrs	r3, r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4a1f      	ldr	r2, [pc, #124]	; (8007060 <ADC_ConfigureBoostMode+0x20c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d808      	bhi.n	8006ff8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689a      	ldr	r2, [r3, #8]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006ff4:	609a      	str	r2, [r3, #8]
}
 8006ff6:	e025      	b.n	8007044 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4a1a      	ldr	r2, [pc, #104]	; (8007064 <ADC_ConfigureBoostMode+0x210>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d80a      	bhi.n	8007016 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007012:	609a      	str	r2, [r3, #8]
}
 8007014:	e016      	b.n	8007044 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	4a13      	ldr	r2, [pc, #76]	; (8007068 <ADC_ConfigureBoostMode+0x214>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d80a      	bhi.n	8007034 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007030:	609a      	str	r2, [r3, #8]
}
 8007032:	e007      	b.n	8007044 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007042:	609a      	str	r2, [r3, #8]
}
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	40022000 	.word	0x40022000
 8007050:	40022100 	.word	0x40022100
 8007054:	40022300 	.word	0x40022300
 8007058:	58026300 	.word	0x58026300
 800705c:	01312d00 	.word	0x01312d00
 8007060:	005f5e10 	.word	0x005f5e10
 8007064:	00bebc20 	.word	0x00bebc20
 8007068:	017d7840 	.word	0x017d7840

0800706c <LL_ADC_IsEnabled>:
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b01      	cmp	r3, #1
 800707e:	d101      	bne.n	8007084 <LL_ADC_IsEnabled+0x18>
 8007080:	2301      	movs	r3, #1
 8007082:	e000      	b.n	8007086 <LL_ADC_IsEnabled+0x1a>
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
	...

08007094 <LL_ADC_StartCalibration>:
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	4b09      	ldr	r3, [pc, #36]	; (80070cc <LL_ADC_StartCalibration+0x38>)
 80070a6:	4013      	ands	r3, r2
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80070b4:	430a      	orrs	r2, r1
 80070b6:	4313      	orrs	r3, r2
 80070b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	609a      	str	r2, [r3, #8]
}
 80070c0:	bf00      	nop
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	3ffeffc0 	.word	0x3ffeffc0

080070d0 <LL_ADC_IsCalibrationOnGoing>:
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070e4:	d101      	bne.n	80070ea <LL_ADC_IsCalibrationOnGoing+0x1a>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <LL_ADC_IsCalibrationOnGoing+0x1c>
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <LL_ADC_REG_IsConversionOngoing>:
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 0304 	and.w	r3, r3, #4
 8007108:	2b04      	cmp	r3, #4
 800710a:	d101      	bne.n	8007110 <LL_ADC_REG_IsConversionOngoing+0x18>
 800710c:	2301      	movs	r3, #1
 800710e:	e000      	b.n	8007112 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
	...

08007120 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800712c:	2300      	movs	r3, #0
 800712e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <HAL_ADCEx_Calibration_Start+0x1e>
 800713a:	2302      	movs	r3, #2
 800713c:	e04c      	b.n	80071d8 <HAL_ADCEx_Calibration_Start+0xb8>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f7ff fd90 	bl	8006c6c <ADC_Disable>
 800714c:	4603      	mov	r3, r0
 800714e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007150:	7dfb      	ldrb	r3, [r7, #23]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d135      	bne.n	80071c2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800715a:	4b21      	ldr	r3, [pc, #132]	; (80071e0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800715c:	4013      	ands	r3, r2
 800715e:	f043 0202 	orr.w	r2, r3, #2
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	4618      	mov	r0, r3
 8007170:	f7ff ff90 	bl	8007094 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007174:	e014      	b.n	80071a0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	3301      	adds	r3, #1
 800717a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	4a19      	ldr	r2, [pc, #100]	; (80071e4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d30d      	bcc.n	80071a0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007188:	f023 0312 	bic.w	r3, r3, #18
 800718c:	f043 0210 	orr.w	r2, r3, #16
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e01b      	b.n	80071d8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff ff93 	bl	80070d0 <LL_ADC_IsCalibrationOnGoing>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e2      	bne.n	8007176 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b4:	f023 0303 	bic.w	r3, r3, #3
 80071b8:	f043 0201 	orr.w	r2, r3, #1
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	655a      	str	r2, [r3, #84]	; 0x54
 80071c0:	e005      	b.n	80071ce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c6:	f043 0210 	orr.w	r2, r3, #16
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80071d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	ffffeefd 	.word	0xffffeefd
 80071e4:	25c3f800 	.word	0x25c3f800

080071e8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80071e8:	b590      	push	{r4, r7, lr}
 80071ea:	b09f      	sub	sp, #124	; 0x7c
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d101      	bne.n	8007206 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007202:	2302      	movs	r3, #2
 8007204:	e0be      	b.n	8007384 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800720e:	2300      	movs	r3, #0
 8007210:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007212:	2300      	movs	r3, #0
 8007214:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a5c      	ldr	r2, [pc, #368]	; (800738c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d102      	bne.n	8007226 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007220:	4b5b      	ldr	r3, [pc, #364]	; (8007390 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007222:	60bb      	str	r3, [r7, #8]
 8007224:	e001      	b.n	800722a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007226:	2300      	movs	r3, #0
 8007228:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10b      	bne.n	8007248 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007234:	f043 0220 	orr.w	r2, r3, #32
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e09d      	b.n	8007384 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff ff54 	bl	80070f8 <LL_ADC_REG_IsConversionOngoing>
 8007250:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff ff4e 	bl	80070f8 <LL_ADC_REG_IsConversionOngoing>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d17f      	bne.n	8007362 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007264:	2b00      	cmp	r3, #0
 8007266:	d17c      	bne.n	8007362 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a47      	ldr	r2, [pc, #284]	; (800738c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d004      	beq.n	800727c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a46      	ldr	r2, [pc, #280]	; (8007390 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d101      	bne.n	8007280 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800727c:	4b45      	ldr	r3, [pc, #276]	; (8007394 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800727e:	e000      	b.n	8007282 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007280:	4b45      	ldr	r3, [pc, #276]	; (8007398 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007282:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d039      	beq.n	8007300 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800728c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	431a      	orrs	r2, r3
 800729a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a3a      	ldr	r2, [pc, #232]	; (800738c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d004      	beq.n	80072b2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a38      	ldr	r2, [pc, #224]	; (8007390 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d10e      	bne.n	80072d0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80072b2:	4836      	ldr	r0, [pc, #216]	; (800738c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80072b4:	f7ff feda 	bl	800706c <LL_ADC_IsEnabled>
 80072b8:	4604      	mov	r4, r0
 80072ba:	4835      	ldr	r0, [pc, #212]	; (8007390 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80072bc:	f7ff fed6 	bl	800706c <LL_ADC_IsEnabled>
 80072c0:	4603      	mov	r3, r0
 80072c2:	4323      	orrs	r3, r4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bf0c      	ite	eq
 80072c8:	2301      	moveq	r3, #1
 80072ca:	2300      	movne	r3, #0
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	e008      	b.n	80072e2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80072d0:	4832      	ldr	r0, [pc, #200]	; (800739c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80072d2:	f7ff fecb 	bl	800706c <LL_ADC_IsEnabled>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	bf0c      	ite	eq
 80072dc:	2301      	moveq	r3, #1
 80072de:	2300      	movne	r3, #0
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d047      	beq.n	8007376 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80072e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e8:	689a      	ldr	r2, [r3, #8]
 80072ea:	4b2d      	ldr	r3, [pc, #180]	; (80073a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80072ec:	4013      	ands	r3, r2
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	6811      	ldr	r1, [r2, #0]
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	6892      	ldr	r2, [r2, #8]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	431a      	orrs	r2, r3
 80072fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80072fe:	e03a      	b.n	8007376 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800730a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a1e      	ldr	r2, [pc, #120]	; (800738c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d004      	beq.n	8007320 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a1d      	ldr	r2, [pc, #116]	; (8007390 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d10e      	bne.n	800733e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8007320:	481a      	ldr	r0, [pc, #104]	; (800738c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8007322:	f7ff fea3 	bl	800706c <LL_ADC_IsEnabled>
 8007326:	4604      	mov	r4, r0
 8007328:	4819      	ldr	r0, [pc, #100]	; (8007390 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800732a:	f7ff fe9f 	bl	800706c <LL_ADC_IsEnabled>
 800732e:	4603      	mov	r3, r0
 8007330:	4323      	orrs	r3, r4
 8007332:	2b00      	cmp	r3, #0
 8007334:	bf0c      	ite	eq
 8007336:	2301      	moveq	r3, #1
 8007338:	2300      	movne	r3, #0
 800733a:	b2db      	uxtb	r3, r3
 800733c:	e008      	b.n	8007350 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800733e:	4817      	ldr	r0, [pc, #92]	; (800739c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007340:	f7ff fe94 	bl	800706c <LL_ADC_IsEnabled>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	bf0c      	ite	eq
 800734a:	2301      	moveq	r3, #1
 800734c:	2300      	movne	r3, #0
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d010      	beq.n	8007376 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007356:	689a      	ldr	r2, [r3, #8]
 8007358:	4b11      	ldr	r3, [pc, #68]	; (80073a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800735a:	4013      	ands	r3, r2
 800735c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800735e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007360:	e009      	b.n	8007376 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007366:	f043 0220 	orr.w	r2, r3, #32
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007374:	e000      	b.n	8007378 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007376:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007380:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8007384:	4618      	mov	r0, r3
 8007386:	377c      	adds	r7, #124	; 0x7c
 8007388:	46bd      	mov	sp, r7
 800738a:	bd90      	pop	{r4, r7, pc}
 800738c:	40022000 	.word	0x40022000
 8007390:	40022100 	.word	0x40022100
 8007394:	40022300 	.word	0x40022300
 8007398:	58026300 	.word	0x58026300
 800739c:	58026000 	.word	0x58026000
 80073a0:	fffff0e0 	.word	0xfffff0e0

080073a4 <__NVIC_SetPriorityGrouping>:
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f003 0307 	and.w	r3, r3, #7
 80073b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073b4:	4b0b      	ldr	r3, [pc, #44]	; (80073e4 <__NVIC_SetPriorityGrouping+0x40>)
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80073c0:	4013      	ands	r3, r2
 80073c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80073cc:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <__NVIC_SetPriorityGrouping+0x44>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073d2:	4a04      	ldr	r2, [pc, #16]	; (80073e4 <__NVIC_SetPriorityGrouping+0x40>)
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	60d3      	str	r3, [r2, #12]
}
 80073d8:	bf00      	nop
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	e000ed00 	.word	0xe000ed00
 80073e8:	05fa0000 	.word	0x05fa0000

080073ec <__NVIC_GetPriorityGrouping>:
{
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80073f0:	4b04      	ldr	r3, [pc, #16]	; (8007404 <__NVIC_GetPriorityGrouping+0x18>)
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	0a1b      	lsrs	r3, r3, #8
 80073f6:	f003 0307 	and.w	r3, r3, #7
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	e000ed00 	.word	0xe000ed00

08007408 <__NVIC_EnableIRQ>:
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	4603      	mov	r3, r0
 8007410:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007412:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007416:	2b00      	cmp	r3, #0
 8007418:	db0b      	blt.n	8007432 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	f003 021f 	and.w	r2, r3, #31
 8007420:	4907      	ldr	r1, [pc, #28]	; (8007440 <__NVIC_EnableIRQ+0x38>)
 8007422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007426:	095b      	lsrs	r3, r3, #5
 8007428:	2001      	movs	r0, #1
 800742a:	fa00 f202 	lsl.w	r2, r0, r2
 800742e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007432:	bf00      	nop
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	e000e100 	.word	0xe000e100

08007444 <__NVIC_SetPriority>:
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007454:	2b00      	cmp	r3, #0
 8007456:	db0a      	blt.n	800746e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	b2da      	uxtb	r2, r3
 800745c:	490c      	ldr	r1, [pc, #48]	; (8007490 <__NVIC_SetPriority+0x4c>)
 800745e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007462:	0112      	lsls	r2, r2, #4
 8007464:	b2d2      	uxtb	r2, r2
 8007466:	440b      	add	r3, r1
 8007468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800746c:	e00a      	b.n	8007484 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	b2da      	uxtb	r2, r3
 8007472:	4908      	ldr	r1, [pc, #32]	; (8007494 <__NVIC_SetPriority+0x50>)
 8007474:	88fb      	ldrh	r3, [r7, #6]
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	3b04      	subs	r3, #4
 800747c:	0112      	lsls	r2, r2, #4
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	440b      	add	r3, r1
 8007482:	761a      	strb	r2, [r3, #24]
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	e000e100 	.word	0xe000e100
 8007494:	e000ed00 	.word	0xe000ed00

08007498 <NVIC_EncodePriority>:
{
 8007498:	b480      	push	{r7}
 800749a:	b089      	sub	sp, #36	; 0x24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f1c3 0307 	rsb	r3, r3, #7
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	bf28      	it	cs
 80074b6:	2304      	movcs	r3, #4
 80074b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	3304      	adds	r3, #4
 80074be:	2b06      	cmp	r3, #6
 80074c0:	d902      	bls.n	80074c8 <NVIC_EncodePriority+0x30>
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	3b03      	subs	r3, #3
 80074c6:	e000      	b.n	80074ca <NVIC_EncodePriority+0x32>
 80074c8:	2300      	movs	r3, #0
 80074ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	fa02 f303 	lsl.w	r3, r2, r3
 80074d6:	43da      	mvns	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	401a      	ands	r2, r3
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80074e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ea:	43d9      	mvns	r1, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074f0:	4313      	orrs	r3, r2
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3724      	adds	r7, #36	; 0x24
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff ff4c 	bl	80073a4 <__NVIC_SetPriorityGrouping>
}
 800750c:	bf00      	nop
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	4603      	mov	r3, r0
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007522:	f7ff ff63 	bl	80073ec <__NVIC_GetPriorityGrouping>
 8007526:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	68b9      	ldr	r1, [r7, #8]
 800752c:	6978      	ldr	r0, [r7, #20]
 800752e:	f7ff ffb3 	bl	8007498 <NVIC_EncodePriority>
 8007532:	4602      	mov	r2, r0
 8007534:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007538:	4611      	mov	r1, r2
 800753a:	4618      	mov	r0, r3
 800753c:	f7ff ff82 	bl	8007444 <__NVIC_SetPriority>
}
 8007540:	bf00      	nop
 8007542:	3718      	adds	r7, #24
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007556:	4618      	mov	r0, r3
 8007558:	f7ff ff56 	bl	8007408 <__NVIC_EnableIRQ>
}
 800755c:	bf00      	nop
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e014      	b.n	80075a0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	791b      	ldrb	r3, [r3, #4]
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	d105      	bne.n	800758c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7f9 fb2c 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e046      	b.n	800764a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	795b      	ldrb	r3, [r3, #5]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d101      	bne.n	80075c8 <HAL_DAC_Start+0x20>
 80075c4:	2302      	movs	r3, #2
 80075c6:	e040      	b.n	800764a <HAL_DAC_Start+0xa2>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2202      	movs	r2, #2
 80075d2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6819      	ldr	r1, [r3, #0]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	f003 0310 	and.w	r3, r3, #16
 80075e0:	2201      	movs	r2, #1
 80075e2:	409a      	lsls	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10f      	bne.n	8007612 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d11d      	bne.n	800763c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0201 	orr.w	r2, r2, #1
 800760e:	605a      	str	r2, [r3, #4]
 8007610:	e014      	b.n	800763c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	f003 0310 	and.w	r3, r3, #16
 8007622:	2102      	movs	r1, #2
 8007624:	fa01 f303 	lsl.w	r3, r1, r3
 8007628:	429a      	cmp	r2, r3
 800762a:	d107      	bne.n	800763c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0202 	orr.w	r2, r2, #2
 800763a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
	...

08007658 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e0a2      	b.n	80077b6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	795b      	ldrb	r3, [r3, #5]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d101      	bne.n	800767c <HAL_DAC_Start_DMA+0x24>
 8007678:	2302      	movs	r3, #2
 800767a:	e09c      	b.n	80077b6 <HAL_DAC_Start_DMA+0x15e>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2201      	movs	r2, #1
 8007680:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2202      	movs	r2, #2
 8007686:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d129      	bne.n	80076e2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	4a4b      	ldr	r2, [pc, #300]	; (80077c0 <HAL_DAC_Start_DMA+0x168>)
 8007694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	4a4a      	ldr	r2, [pc, #296]	; (80077c4 <HAL_DAC_Start_DMA+0x16c>)
 800769c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	4a49      	ldr	r2, [pc, #292]	; (80077c8 <HAL_DAC_Start_DMA+0x170>)
 80076a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076b4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d003      	beq.n	80076c4 <HAL_DAC_Start_DMA+0x6c>
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d005      	beq.n	80076ce <HAL_DAC_Start_DMA+0x76>
 80076c2:	e009      	b.n	80076d8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3308      	adds	r3, #8
 80076ca:	613b      	str	r3, [r7, #16]
        break;
 80076cc:	e033      	b.n	8007736 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	330c      	adds	r3, #12
 80076d4:	613b      	str	r3, [r7, #16]
        break;
 80076d6:	e02e      	b.n	8007736 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3310      	adds	r3, #16
 80076de:	613b      	str	r3, [r7, #16]
        break;
 80076e0:	e029      	b.n	8007736 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	4a39      	ldr	r2, [pc, #228]	; (80077cc <HAL_DAC_Start_DMA+0x174>)
 80076e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	4a38      	ldr	r2, [pc, #224]	; (80077d0 <HAL_DAC_Start_DMA+0x178>)
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	4a37      	ldr	r2, [pc, #220]	; (80077d4 <HAL_DAC_Start_DMA+0x17c>)
 80076f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007708:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d003      	beq.n	8007718 <HAL_DAC_Start_DMA+0xc0>
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	2b04      	cmp	r3, #4
 8007714:	d005      	beq.n	8007722 <HAL_DAC_Start_DMA+0xca>
 8007716:	e009      	b.n	800772c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3314      	adds	r3, #20
 800771e:	613b      	str	r3, [r7, #16]
        break;
 8007720:	e009      	b.n	8007736 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3318      	adds	r3, #24
 8007728:	613b      	str	r3, [r7, #16]
        break;
 800772a:	e004      	b.n	8007736 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	331c      	adds	r3, #28
 8007732:	613b      	str	r3, [r7, #16]
        break;
 8007734:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d111      	bne.n	8007760 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800774a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6898      	ldr	r0, [r3, #8]
 8007750:	6879      	ldr	r1, [r7, #4]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	f000 fe67 	bl	8008428 <HAL_DMA_Start_IT>
 800775a:	4603      	mov	r3, r0
 800775c:	75fb      	strb	r3, [r7, #23]
 800775e:	e010      	b.n	8007782 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800776e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68d8      	ldr	r0, [r3, #12]
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	f000 fe55 	bl	8008428 <HAL_DMA_Start_IT>
 800777e:	4603      	mov	r3, r0
 8007780:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10c      	bne.n	80077a8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6819      	ldr	r1, [r3, #0]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f003 0310 	and.w	r3, r3, #16
 800779a:	2201      	movs	r2, #1
 800779c:	409a      	lsls	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	e005      	b.n	80077b4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	f043 0204 	orr.w	r2, r3, #4
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3718      	adds	r7, #24
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	08007c49 	.word	0x08007c49
 80077c4:	08007c6b 	.word	0x08007c6b
 80077c8:	08007c87 	.word	0x08007c87
 80077cc:	08007d05 	.word	0x08007d05
 80077d0:	08007d27 	.word	0x08007d27
 80077d4:	08007d43 	.word	0x08007d43

080077d8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e03e      	b.n	800786a <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6819      	ldr	r1, [r3, #0]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	f003 0310 	and.w	r3, r3, #16
 80077f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80077fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007800:	43da      	mvns	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	400a      	ands	r2, r1
 8007808:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6819      	ldr	r1, [r3, #0]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	f003 0310 	and.w	r3, r3, #16
 8007816:	2201      	movs	r2, #1
 8007818:	fa02 f303 	lsl.w	r3, r2, r3
 800781c:	43da      	mvns	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	400a      	ands	r2, r1
 8007824:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10d      	bne.n	8007848 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	4618      	mov	r0, r3
 8007832:	f001 f863 	bl	80088fc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	e00c      	b.n	8007862 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	4618      	mov	r0, r3
 800784e:	f001 f855 	bl	80088fc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007860:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b084      	sub	sp, #16
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007888:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01d      	beq.n	80078d0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d018      	beq.n	80078d0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2204      	movs	r2, #4
 80078a2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	f043 0201 	orr.w	r2, r3, #1
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80078b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078c8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f86f 	bl	80079ae <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d01d      	beq.n	8007916 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d018      	beq.n	8007916 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2204      	movs	r2, #4
 80078e8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	f043 0202 	orr.w	r2, r3, #2
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80078fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800790e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f9ed 	bl	8007cf0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8007916:	bf00      	nop
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800791e:	b480      	push	{r7}
 8007920:	b087      	sub	sp, #28
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	607a      	str	r2, [r7, #4]
 800792a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800792c:	2300      	movs	r3, #0
 800792e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e015      	b.n	8007966 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d105      	bne.n	8007952 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4413      	add	r3, r2
 800794c:	3308      	adds	r3, #8
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	e004      	b.n	800795c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4413      	add	r3, r2
 8007958:	3314      	adds	r3, #20
 800795a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	461a      	mov	r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80079b6:	bf00      	nop
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
	...

080079c4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08a      	sub	sp, #40	; 0x28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <HAL_DAC_ConfigChannel+0x1e>
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e12a      	b.n	8007c3c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	795b      	ldrb	r3, [r3, #5]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d101      	bne.n	80079f2 <HAL_DAC_ConfigChannel+0x2e>
 80079ee:	2302      	movs	r3, #2
 80079f0:	e124      	b.n	8007c3c <HAL_DAC_ConfigChannel+0x278>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2201      	movs	r2, #1
 80079f6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2202      	movs	r2, #2
 80079fc:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	d17a      	bne.n	8007afc <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007a06:	f7fe f88b 	bl	8005b20 <HAL_GetTick>
 8007a0a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d13d      	bne.n	8007a8e <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007a12:	e018      	b.n	8007a46 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007a14:	f7fe f884 	bl	8005b20 <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d911      	bls.n	8007a46 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a28:	4b86      	ldr	r3, [pc, #536]	; (8007c44 <HAL_DAC_ConfigChannel+0x280>)
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00a      	beq.n	8007a46 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	f043 0208 	orr.w	r2, r3, #8
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2203      	movs	r2, #3
 8007a40:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e0fa      	b.n	8007c3c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a4c:	4b7d      	ldr	r3, [pc, #500]	; (8007c44 <HAL_DAC_ConfigChannel+0x280>)
 8007a4e:	4013      	ands	r3, r2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1df      	bne.n	8007a14 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	6992      	ldr	r2, [r2, #24]
 8007a5c:	641a      	str	r2, [r3, #64]	; 0x40
 8007a5e:	e020      	b.n	8007aa2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007a60:	f7fe f85e 	bl	8005b20 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d90f      	bls.n	8007a8e <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	da0a      	bge.n	8007a8e <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	f043 0208 	orr.w	r2, r3, #8
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2203      	movs	r2, #3
 8007a88:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e0d6      	b.n	8007c3c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	dbe3      	blt.n	8007a60 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	6992      	ldr	r2, [r2, #24]
 8007aa0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f003 0310 	and.w	r3, r3, #16
 8007aae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab6:	43db      	mvns	r3, r3
 8007ab8:	ea02 0103 	and.w	r1, r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	69da      	ldr	r2, [r3, #28]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f003 0310 	and.w	r3, r3, #16
 8007ac6:	409a      	lsls	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	430a      	orrs	r2, r1
 8007ace:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f003 0310 	and.w	r3, r3, #16
 8007adc:	21ff      	movs	r1, #255	; 0xff
 8007ade:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae2:	43db      	mvns	r3, r3
 8007ae4:	ea02 0103 	and.w	r1, r2, r3
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	6a1a      	ldr	r2, [r3, #32]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f003 0310 	and.w	r3, r3, #16
 8007af2:	409a      	lsls	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	430a      	orrs	r2, r1
 8007afa:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d11d      	bne.n	8007b40 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f003 0310 	and.w	r3, r3, #16
 8007b12:	221f      	movs	r2, #31
 8007b14:	fa02 f303 	lsl.w	r3, r2, r3
 8007b18:	43db      	mvns	r3, r3
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f003 0310 	and.w	r3, r3, #16
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b46:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f003 0310 	and.w	r3, r3, #16
 8007b4e:	2207      	movs	r2, #7
 8007b50:	fa02 f303 	lsl.w	r3, r2, r3
 8007b54:	43db      	mvns	r3, r3
 8007b56:	69ba      	ldr	r2, [r7, #24]
 8007b58:	4013      	ands	r3, r2
 8007b5a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d102      	bne.n	8007b6a <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8007b64:	2300      	movs	r3, #0
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
 8007b68:	e00f      	b.n	8007b8a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d102      	bne.n	8007b78 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007b72:	2301      	movs	r3, #1
 8007b74:	627b      	str	r3, [r7, #36]	; 0x24
 8007b76:	e008      	b.n	8007b8a <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d102      	bne.n	8007b86 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007b80:	2301      	movs	r3, #1
 8007b82:	627b      	str	r3, [r7, #36]	; 0x24
 8007b84:	e001      	b.n	8007b8a <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b96:	4313      	orrs	r3, r2
 8007b98:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f003 0310 	and.w	r3, r3, #16
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6819      	ldr	r1, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f003 0310 	and.w	r3, r3, #16
 8007bc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc8:	43da      	mvns	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	400a      	ands	r2, r1
 8007bd0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f003 0310 	and.w	r3, r3, #16
 8007be0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007be4:	fa02 f303 	lsl.w	r3, r2, r3
 8007be8:	43db      	mvns	r3, r3
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	4013      	ands	r3, r2
 8007bee:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f003 0310 	and.w	r3, r3, #16
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6819      	ldr	r1, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f003 0310 	and.w	r3, r3, #16
 8007c1c:	22c0      	movs	r2, #192	; 0xc0
 8007c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c22:	43da      	mvns	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	400a      	ands	r2, r1
 8007c2a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007c38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3728      	adds	r7, #40	; 0x28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	20008000 	.word	0x20008000

08007c48 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c54:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7ff fe8b 	bl	8007972 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	711a      	strb	r2, [r3, #4]
}
 8007c62:	bf00      	nop
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f7ff fe84 	bl	8007986 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	f043 0204 	orr.w	r2, r3, #4
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f7ff fe7a 	bl	800799a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	711a      	strb	r2, [r3, #4]
}
 8007cac:	bf00      	nop
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f7ff ffce 	bl	8007cb4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	711a      	strb	r2, [r3, #4]
}
 8007d1e:	bf00      	nop
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d32:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f7ff ffc7 	bl	8007cc8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007d3a:	bf00      	nop
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b084      	sub	sp, #16
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	f043 0204 	orr.w	r2, r3, #4
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7ff ffbd 	bl	8007cdc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2201      	movs	r2, #1
 8007d66:	711a      	strb	r2, [r3, #4]
}
 8007d68:	bf00      	nop
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007d78:	f7fd fed2 	bl	8005b20 <HAL_GetTick>
 8007d7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e316      	b.n	80083b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a66      	ldr	r2, [pc, #408]	; (8007f28 <HAL_DMA_Init+0x1b8>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d04a      	beq.n	8007e28 <HAL_DMA_Init+0xb8>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a65      	ldr	r2, [pc, #404]	; (8007f2c <HAL_DMA_Init+0x1bc>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d045      	beq.n	8007e28 <HAL_DMA_Init+0xb8>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a63      	ldr	r2, [pc, #396]	; (8007f30 <HAL_DMA_Init+0x1c0>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d040      	beq.n	8007e28 <HAL_DMA_Init+0xb8>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a62      	ldr	r2, [pc, #392]	; (8007f34 <HAL_DMA_Init+0x1c4>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d03b      	beq.n	8007e28 <HAL_DMA_Init+0xb8>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a60      	ldr	r2, [pc, #384]	; (8007f38 <HAL_DMA_Init+0x1c8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d036      	beq.n	8007e28 <HAL_DMA_Init+0xb8>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a5f      	ldr	r2, [pc, #380]	; (8007f3c <HAL_DMA_Init+0x1cc>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d031      	beq.n	8007e28 <HAL_DMA_Init+0xb8>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a5d      	ldr	r2, [pc, #372]	; (8007f40 <HAL_DMA_Init+0x1d0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d02c      	beq.n	8007e28 <HAL_DMA_Init+0xb8>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a5c      	ldr	r2, [pc, #368]	; (8007f44 <HAL_DMA_Init+0x1d4>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d027      	beq.n	8007e28 <HAL_DMA_Init+0xb8>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a5a      	ldr	r2, [pc, #360]	; (8007f48 <HAL_DMA_Init+0x1d8>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d022      	beq.n	8007e28 <HAL_DMA_Init+0xb8>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a59      	ldr	r2, [pc, #356]	; (8007f4c <HAL_DMA_Init+0x1dc>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d01d      	beq.n	8007e28 <HAL_DMA_Init+0xb8>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a57      	ldr	r2, [pc, #348]	; (8007f50 <HAL_DMA_Init+0x1e0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d018      	beq.n	8007e28 <HAL_DMA_Init+0xb8>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a56      	ldr	r2, [pc, #344]	; (8007f54 <HAL_DMA_Init+0x1e4>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d013      	beq.n	8007e28 <HAL_DMA_Init+0xb8>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a54      	ldr	r2, [pc, #336]	; (8007f58 <HAL_DMA_Init+0x1e8>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d00e      	beq.n	8007e28 <HAL_DMA_Init+0xb8>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a53      	ldr	r2, [pc, #332]	; (8007f5c <HAL_DMA_Init+0x1ec>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d009      	beq.n	8007e28 <HAL_DMA_Init+0xb8>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a51      	ldr	r2, [pc, #324]	; (8007f60 <HAL_DMA_Init+0x1f0>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d004      	beq.n	8007e28 <HAL_DMA_Init+0xb8>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a50      	ldr	r2, [pc, #320]	; (8007f64 <HAL_DMA_Init+0x1f4>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d101      	bne.n	8007e2c <HAL_DMA_Init+0xbc>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e000      	b.n	8007e2e <HAL_DMA_Init+0xbe>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 813b 	beq.w	80080aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a37      	ldr	r2, [pc, #220]	; (8007f28 <HAL_DMA_Init+0x1b8>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d04a      	beq.n	8007ee4 <HAL_DMA_Init+0x174>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a36      	ldr	r2, [pc, #216]	; (8007f2c <HAL_DMA_Init+0x1bc>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d045      	beq.n	8007ee4 <HAL_DMA_Init+0x174>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a34      	ldr	r2, [pc, #208]	; (8007f30 <HAL_DMA_Init+0x1c0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d040      	beq.n	8007ee4 <HAL_DMA_Init+0x174>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a33      	ldr	r2, [pc, #204]	; (8007f34 <HAL_DMA_Init+0x1c4>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d03b      	beq.n	8007ee4 <HAL_DMA_Init+0x174>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a31      	ldr	r2, [pc, #196]	; (8007f38 <HAL_DMA_Init+0x1c8>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d036      	beq.n	8007ee4 <HAL_DMA_Init+0x174>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a30      	ldr	r2, [pc, #192]	; (8007f3c <HAL_DMA_Init+0x1cc>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d031      	beq.n	8007ee4 <HAL_DMA_Init+0x174>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a2e      	ldr	r2, [pc, #184]	; (8007f40 <HAL_DMA_Init+0x1d0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d02c      	beq.n	8007ee4 <HAL_DMA_Init+0x174>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a2d      	ldr	r2, [pc, #180]	; (8007f44 <HAL_DMA_Init+0x1d4>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d027      	beq.n	8007ee4 <HAL_DMA_Init+0x174>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a2b      	ldr	r2, [pc, #172]	; (8007f48 <HAL_DMA_Init+0x1d8>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d022      	beq.n	8007ee4 <HAL_DMA_Init+0x174>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a2a      	ldr	r2, [pc, #168]	; (8007f4c <HAL_DMA_Init+0x1dc>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d01d      	beq.n	8007ee4 <HAL_DMA_Init+0x174>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a28      	ldr	r2, [pc, #160]	; (8007f50 <HAL_DMA_Init+0x1e0>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d018      	beq.n	8007ee4 <HAL_DMA_Init+0x174>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a27      	ldr	r2, [pc, #156]	; (8007f54 <HAL_DMA_Init+0x1e4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d013      	beq.n	8007ee4 <HAL_DMA_Init+0x174>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a25      	ldr	r2, [pc, #148]	; (8007f58 <HAL_DMA_Init+0x1e8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d00e      	beq.n	8007ee4 <HAL_DMA_Init+0x174>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a24      	ldr	r2, [pc, #144]	; (8007f5c <HAL_DMA_Init+0x1ec>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d009      	beq.n	8007ee4 <HAL_DMA_Init+0x174>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a22      	ldr	r2, [pc, #136]	; (8007f60 <HAL_DMA_Init+0x1f0>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d004      	beq.n	8007ee4 <HAL_DMA_Init+0x174>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a21      	ldr	r2, [pc, #132]	; (8007f64 <HAL_DMA_Init+0x1f4>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d108      	bne.n	8007ef6 <HAL_DMA_Init+0x186>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0201 	bic.w	r2, r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	e007      	b.n	8007f06 <HAL_DMA_Init+0x196>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f022 0201 	bic.w	r2, r2, #1
 8007f04:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007f06:	e02f      	b.n	8007f68 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f08:	f7fd fe0a 	bl	8005b20 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	d928      	bls.n	8007f68 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2203      	movs	r2, #3
 8007f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e246      	b.n	80083b6 <HAL_DMA_Init+0x646>
 8007f28:	40020010 	.word	0x40020010
 8007f2c:	40020028 	.word	0x40020028
 8007f30:	40020040 	.word	0x40020040
 8007f34:	40020058 	.word	0x40020058
 8007f38:	40020070 	.word	0x40020070
 8007f3c:	40020088 	.word	0x40020088
 8007f40:	400200a0 	.word	0x400200a0
 8007f44:	400200b8 	.word	0x400200b8
 8007f48:	40020410 	.word	0x40020410
 8007f4c:	40020428 	.word	0x40020428
 8007f50:	40020440 	.word	0x40020440
 8007f54:	40020458 	.word	0x40020458
 8007f58:	40020470 	.word	0x40020470
 8007f5c:	40020488 	.word	0x40020488
 8007f60:	400204a0 	.word	0x400204a0
 8007f64:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1c8      	bne.n	8007f08 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	4b83      	ldr	r3, [pc, #524]	; (8008190 <HAL_DMA_Init+0x420>)
 8007f82:	4013      	ands	r3, r2
 8007f84:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007f8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	699b      	ldr	r3, [r3, #24]
 8007fa0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fa6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d107      	bne.n	8007fcc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007fcc:	4b71      	ldr	r3, [pc, #452]	; (8008194 <HAL_DMA_Init+0x424>)
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	4b71      	ldr	r3, [pc, #452]	; (8008198 <HAL_DMA_Init+0x428>)
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fd8:	d328      	bcc.n	800802c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	2b28      	cmp	r3, #40	; 0x28
 8007fe0:	d903      	bls.n	8007fea <HAL_DMA_Init+0x27a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8007fe8:	d917      	bls.n	800801a <HAL_DMA_Init+0x2aa>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	2b3e      	cmp	r3, #62	; 0x3e
 8007ff0:	d903      	bls.n	8007ffa <HAL_DMA_Init+0x28a>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	2b42      	cmp	r3, #66	; 0x42
 8007ff8:	d90f      	bls.n	800801a <HAL_DMA_Init+0x2aa>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	2b46      	cmp	r3, #70	; 0x46
 8008000:	d903      	bls.n	800800a <HAL_DMA_Init+0x29a>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2b48      	cmp	r3, #72	; 0x48
 8008008:	d907      	bls.n	800801a <HAL_DMA_Init+0x2aa>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	2b4e      	cmp	r3, #78	; 0x4e
 8008010:	d905      	bls.n	800801e <HAL_DMA_Init+0x2ae>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	2b52      	cmp	r3, #82	; 0x52
 8008018:	d801      	bhi.n	800801e <HAL_DMA_Init+0x2ae>
 800801a:	2301      	movs	r3, #1
 800801c:	e000      	b.n	8008020 <HAL_DMA_Init+0x2b0>
 800801e:	2300      	movs	r3, #0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d003      	beq.n	800802c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800802a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f023 0307 	bic.w	r3, r3, #7
 8008042:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	2b04      	cmp	r3, #4
 8008054:	d117      	bne.n	8008086 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	4313      	orrs	r3, r2
 800805e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00e      	beq.n	8008086 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f002 fb4d 	bl	800a708 <DMA_CheckFifoParam>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d008      	beq.n	8008086 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2240      	movs	r2, #64	; 0x40
 8008078:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e197      	b.n	80083b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f002 fa88 	bl	800a5a4 <DMA_CalcBaseAndBitshift>
 8008094:	4603      	mov	r3, r0
 8008096:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800809c:	f003 031f 	and.w	r3, r3, #31
 80080a0:	223f      	movs	r2, #63	; 0x3f
 80080a2:	409a      	lsls	r2, r3
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	609a      	str	r2, [r3, #8]
 80080a8:	e0cd      	b.n	8008246 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a3b      	ldr	r2, [pc, #236]	; (800819c <HAL_DMA_Init+0x42c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d022      	beq.n	80080fa <HAL_DMA_Init+0x38a>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a39      	ldr	r2, [pc, #228]	; (80081a0 <HAL_DMA_Init+0x430>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d01d      	beq.n	80080fa <HAL_DMA_Init+0x38a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a38      	ldr	r2, [pc, #224]	; (80081a4 <HAL_DMA_Init+0x434>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d018      	beq.n	80080fa <HAL_DMA_Init+0x38a>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a36      	ldr	r2, [pc, #216]	; (80081a8 <HAL_DMA_Init+0x438>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d013      	beq.n	80080fa <HAL_DMA_Init+0x38a>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a35      	ldr	r2, [pc, #212]	; (80081ac <HAL_DMA_Init+0x43c>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d00e      	beq.n	80080fa <HAL_DMA_Init+0x38a>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a33      	ldr	r2, [pc, #204]	; (80081b0 <HAL_DMA_Init+0x440>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d009      	beq.n	80080fa <HAL_DMA_Init+0x38a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a32      	ldr	r2, [pc, #200]	; (80081b4 <HAL_DMA_Init+0x444>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d004      	beq.n	80080fa <HAL_DMA_Init+0x38a>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a30      	ldr	r2, [pc, #192]	; (80081b8 <HAL_DMA_Init+0x448>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d101      	bne.n	80080fe <HAL_DMA_Init+0x38e>
 80080fa:	2301      	movs	r3, #1
 80080fc:	e000      	b.n	8008100 <HAL_DMA_Init+0x390>
 80080fe:	2300      	movs	r3, #0
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 8097 	beq.w	8008234 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a24      	ldr	r2, [pc, #144]	; (800819c <HAL_DMA_Init+0x42c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d021      	beq.n	8008154 <HAL_DMA_Init+0x3e4>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a22      	ldr	r2, [pc, #136]	; (80081a0 <HAL_DMA_Init+0x430>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d01c      	beq.n	8008154 <HAL_DMA_Init+0x3e4>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a21      	ldr	r2, [pc, #132]	; (80081a4 <HAL_DMA_Init+0x434>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d017      	beq.n	8008154 <HAL_DMA_Init+0x3e4>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a1f      	ldr	r2, [pc, #124]	; (80081a8 <HAL_DMA_Init+0x438>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d012      	beq.n	8008154 <HAL_DMA_Init+0x3e4>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a1e      	ldr	r2, [pc, #120]	; (80081ac <HAL_DMA_Init+0x43c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d00d      	beq.n	8008154 <HAL_DMA_Init+0x3e4>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a1c      	ldr	r2, [pc, #112]	; (80081b0 <HAL_DMA_Init+0x440>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d008      	beq.n	8008154 <HAL_DMA_Init+0x3e4>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a1b      	ldr	r2, [pc, #108]	; (80081b4 <HAL_DMA_Init+0x444>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d003      	beq.n	8008154 <HAL_DMA_Init+0x3e4>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a19      	ldr	r2, [pc, #100]	; (80081b8 <HAL_DMA_Init+0x448>)
 8008152:	4293      	cmp	r3, r2
 8008154:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2202      	movs	r2, #2
 800815a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	4b12      	ldr	r3, [pc, #72]	; (80081bc <HAL_DMA_Init+0x44c>)
 8008172:	4013      	ands	r3, r2
 8008174:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	2b40      	cmp	r3, #64	; 0x40
 800817c:	d020      	beq.n	80081c0 <HAL_DMA_Init+0x450>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	2b80      	cmp	r3, #128	; 0x80
 8008184:	d102      	bne.n	800818c <HAL_DMA_Init+0x41c>
 8008186:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800818a:	e01a      	b.n	80081c2 <HAL_DMA_Init+0x452>
 800818c:	2300      	movs	r3, #0
 800818e:	e018      	b.n	80081c2 <HAL_DMA_Init+0x452>
 8008190:	fe10803f 	.word	0xfe10803f
 8008194:	5c001000 	.word	0x5c001000
 8008198:	ffff0000 	.word	0xffff0000
 800819c:	58025408 	.word	0x58025408
 80081a0:	5802541c 	.word	0x5802541c
 80081a4:	58025430 	.word	0x58025430
 80081a8:	58025444 	.word	0x58025444
 80081ac:	58025458 	.word	0x58025458
 80081b0:	5802546c 	.word	0x5802546c
 80081b4:	58025480 	.word	0x58025480
 80081b8:	58025494 	.word	0x58025494
 80081bc:	fffe000f 	.word	0xfffe000f
 80081c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	68d2      	ldr	r2, [r2, #12]
 80081c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80081c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80081d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80081d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80081e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80081e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80081f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	461a      	mov	r2, r3
 8008206:	4b6e      	ldr	r3, [pc, #440]	; (80083c0 <HAL_DMA_Init+0x650>)
 8008208:	4413      	add	r3, r2
 800820a:	4a6e      	ldr	r2, [pc, #440]	; (80083c4 <HAL_DMA_Init+0x654>)
 800820c:	fba2 2303 	umull	r2, r3, r2, r3
 8008210:	091b      	lsrs	r3, r3, #4
 8008212:	009a      	lsls	r2, r3, #2
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f002 f9c3 	bl	800a5a4 <DMA_CalcBaseAndBitshift>
 800821e:	4603      	mov	r3, r0
 8008220:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008226:	f003 031f 	and.w	r3, r3, #31
 800822a:	2201      	movs	r2, #1
 800822c:	409a      	lsls	r2, r3
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	605a      	str	r2, [r3, #4]
 8008232:	e008      	b.n	8008246 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2240      	movs	r2, #64	; 0x40
 8008238:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2203      	movs	r2, #3
 800823e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e0b7      	b.n	80083b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a5f      	ldr	r2, [pc, #380]	; (80083c8 <HAL_DMA_Init+0x658>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d072      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a5d      	ldr	r2, [pc, #372]	; (80083cc <HAL_DMA_Init+0x65c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d06d      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a5c      	ldr	r2, [pc, #368]	; (80083d0 <HAL_DMA_Init+0x660>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d068      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a5a      	ldr	r2, [pc, #360]	; (80083d4 <HAL_DMA_Init+0x664>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d063      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a59      	ldr	r2, [pc, #356]	; (80083d8 <HAL_DMA_Init+0x668>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d05e      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a57      	ldr	r2, [pc, #348]	; (80083dc <HAL_DMA_Init+0x66c>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d059      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a56      	ldr	r2, [pc, #344]	; (80083e0 <HAL_DMA_Init+0x670>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d054      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a54      	ldr	r2, [pc, #336]	; (80083e4 <HAL_DMA_Init+0x674>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d04f      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a53      	ldr	r2, [pc, #332]	; (80083e8 <HAL_DMA_Init+0x678>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d04a      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a51      	ldr	r2, [pc, #324]	; (80083ec <HAL_DMA_Init+0x67c>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d045      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a50      	ldr	r2, [pc, #320]	; (80083f0 <HAL_DMA_Init+0x680>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d040      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a4e      	ldr	r2, [pc, #312]	; (80083f4 <HAL_DMA_Init+0x684>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d03b      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a4d      	ldr	r2, [pc, #308]	; (80083f8 <HAL_DMA_Init+0x688>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d036      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a4b      	ldr	r2, [pc, #300]	; (80083fc <HAL_DMA_Init+0x68c>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d031      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a4a      	ldr	r2, [pc, #296]	; (8008400 <HAL_DMA_Init+0x690>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d02c      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a48      	ldr	r2, [pc, #288]	; (8008404 <HAL_DMA_Init+0x694>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d027      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a47      	ldr	r2, [pc, #284]	; (8008408 <HAL_DMA_Init+0x698>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d022      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a45      	ldr	r2, [pc, #276]	; (800840c <HAL_DMA_Init+0x69c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d01d      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a44      	ldr	r2, [pc, #272]	; (8008410 <HAL_DMA_Init+0x6a0>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d018      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a42      	ldr	r2, [pc, #264]	; (8008414 <HAL_DMA_Init+0x6a4>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d013      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a41      	ldr	r2, [pc, #260]	; (8008418 <HAL_DMA_Init+0x6a8>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d00e      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a3f      	ldr	r2, [pc, #252]	; (800841c <HAL_DMA_Init+0x6ac>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d009      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a3e      	ldr	r2, [pc, #248]	; (8008420 <HAL_DMA_Init+0x6b0>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d004      	beq.n	8008336 <HAL_DMA_Init+0x5c6>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a3c      	ldr	r2, [pc, #240]	; (8008424 <HAL_DMA_Init+0x6b4>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d101      	bne.n	800833a <HAL_DMA_Init+0x5ca>
 8008336:	2301      	movs	r3, #1
 8008338:	e000      	b.n	800833c <HAL_DMA_Init+0x5cc>
 800833a:	2300      	movs	r3, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d032      	beq.n	80083a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f002 fa5d 	bl	800a800 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	2b80      	cmp	r3, #128	; 0x80
 800834c:	d102      	bne.n	8008354 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800835c:	b2d2      	uxtb	r2, r2
 800835e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008368:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d010      	beq.n	8008394 <HAL_DMA_Init+0x624>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	2b08      	cmp	r3, #8
 8008378:	d80c      	bhi.n	8008394 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f002 fada 	bl	800a934 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008384:	2200      	movs	r2, #0
 8008386:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008390:	605a      	str	r2, [r3, #4]
 8008392:	e008      	b.n	80083a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	a7fdabf8 	.word	0xa7fdabf8
 80083c4:	cccccccd 	.word	0xcccccccd
 80083c8:	40020010 	.word	0x40020010
 80083cc:	40020028 	.word	0x40020028
 80083d0:	40020040 	.word	0x40020040
 80083d4:	40020058 	.word	0x40020058
 80083d8:	40020070 	.word	0x40020070
 80083dc:	40020088 	.word	0x40020088
 80083e0:	400200a0 	.word	0x400200a0
 80083e4:	400200b8 	.word	0x400200b8
 80083e8:	40020410 	.word	0x40020410
 80083ec:	40020428 	.word	0x40020428
 80083f0:	40020440 	.word	0x40020440
 80083f4:	40020458 	.word	0x40020458
 80083f8:	40020470 	.word	0x40020470
 80083fc:	40020488 	.word	0x40020488
 8008400:	400204a0 	.word	0x400204a0
 8008404:	400204b8 	.word	0x400204b8
 8008408:	58025408 	.word	0x58025408
 800840c:	5802541c 	.word	0x5802541c
 8008410:	58025430 	.word	0x58025430
 8008414:	58025444 	.word	0x58025444
 8008418:	58025458 	.word	0x58025458
 800841c:	5802546c 	.word	0x5802546c
 8008420:	58025480 	.word	0x58025480
 8008424:	58025494 	.word	0x58025494

08008428 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e226      	b.n	8008892 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800844a:	2b01      	cmp	r3, #1
 800844c:	d101      	bne.n	8008452 <HAL_DMA_Start_IT+0x2a>
 800844e:	2302      	movs	r3, #2
 8008450:	e21f      	b.n	8008892 <HAL_DMA_Start_IT+0x46a>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b01      	cmp	r3, #1
 8008464:	f040 820a 	bne.w	800887c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a68      	ldr	r2, [pc, #416]	; (800861c <HAL_DMA_Start_IT+0x1f4>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d04a      	beq.n	8008516 <HAL_DMA_Start_IT+0xee>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a66      	ldr	r2, [pc, #408]	; (8008620 <HAL_DMA_Start_IT+0x1f8>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d045      	beq.n	8008516 <HAL_DMA_Start_IT+0xee>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a65      	ldr	r2, [pc, #404]	; (8008624 <HAL_DMA_Start_IT+0x1fc>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d040      	beq.n	8008516 <HAL_DMA_Start_IT+0xee>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a63      	ldr	r2, [pc, #396]	; (8008628 <HAL_DMA_Start_IT+0x200>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d03b      	beq.n	8008516 <HAL_DMA_Start_IT+0xee>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a62      	ldr	r2, [pc, #392]	; (800862c <HAL_DMA_Start_IT+0x204>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d036      	beq.n	8008516 <HAL_DMA_Start_IT+0xee>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a60      	ldr	r2, [pc, #384]	; (8008630 <HAL_DMA_Start_IT+0x208>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d031      	beq.n	8008516 <HAL_DMA_Start_IT+0xee>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a5f      	ldr	r2, [pc, #380]	; (8008634 <HAL_DMA_Start_IT+0x20c>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d02c      	beq.n	8008516 <HAL_DMA_Start_IT+0xee>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a5d      	ldr	r2, [pc, #372]	; (8008638 <HAL_DMA_Start_IT+0x210>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d027      	beq.n	8008516 <HAL_DMA_Start_IT+0xee>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a5c      	ldr	r2, [pc, #368]	; (800863c <HAL_DMA_Start_IT+0x214>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d022      	beq.n	8008516 <HAL_DMA_Start_IT+0xee>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a5a      	ldr	r2, [pc, #360]	; (8008640 <HAL_DMA_Start_IT+0x218>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d01d      	beq.n	8008516 <HAL_DMA_Start_IT+0xee>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a59      	ldr	r2, [pc, #356]	; (8008644 <HAL_DMA_Start_IT+0x21c>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d018      	beq.n	8008516 <HAL_DMA_Start_IT+0xee>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a57      	ldr	r2, [pc, #348]	; (8008648 <HAL_DMA_Start_IT+0x220>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d013      	beq.n	8008516 <HAL_DMA_Start_IT+0xee>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a56      	ldr	r2, [pc, #344]	; (800864c <HAL_DMA_Start_IT+0x224>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d00e      	beq.n	8008516 <HAL_DMA_Start_IT+0xee>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a54      	ldr	r2, [pc, #336]	; (8008650 <HAL_DMA_Start_IT+0x228>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d009      	beq.n	8008516 <HAL_DMA_Start_IT+0xee>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a53      	ldr	r2, [pc, #332]	; (8008654 <HAL_DMA_Start_IT+0x22c>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d004      	beq.n	8008516 <HAL_DMA_Start_IT+0xee>
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a51      	ldr	r2, [pc, #324]	; (8008658 <HAL_DMA_Start_IT+0x230>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d108      	bne.n	8008528 <HAL_DMA_Start_IT+0x100>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f022 0201 	bic.w	r2, r2, #1
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	e007      	b.n	8008538 <HAL_DMA_Start_IT+0x110>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f022 0201 	bic.w	r2, r2, #1
 8008536:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	68b9      	ldr	r1, [r7, #8]
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f001 fe84 	bl	800a24c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a34      	ldr	r2, [pc, #208]	; (800861c <HAL_DMA_Start_IT+0x1f4>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d04a      	beq.n	80085e4 <HAL_DMA_Start_IT+0x1bc>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a33      	ldr	r2, [pc, #204]	; (8008620 <HAL_DMA_Start_IT+0x1f8>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d045      	beq.n	80085e4 <HAL_DMA_Start_IT+0x1bc>
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a31      	ldr	r2, [pc, #196]	; (8008624 <HAL_DMA_Start_IT+0x1fc>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d040      	beq.n	80085e4 <HAL_DMA_Start_IT+0x1bc>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a30      	ldr	r2, [pc, #192]	; (8008628 <HAL_DMA_Start_IT+0x200>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d03b      	beq.n	80085e4 <HAL_DMA_Start_IT+0x1bc>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a2e      	ldr	r2, [pc, #184]	; (800862c <HAL_DMA_Start_IT+0x204>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d036      	beq.n	80085e4 <HAL_DMA_Start_IT+0x1bc>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a2d      	ldr	r2, [pc, #180]	; (8008630 <HAL_DMA_Start_IT+0x208>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d031      	beq.n	80085e4 <HAL_DMA_Start_IT+0x1bc>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a2b      	ldr	r2, [pc, #172]	; (8008634 <HAL_DMA_Start_IT+0x20c>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d02c      	beq.n	80085e4 <HAL_DMA_Start_IT+0x1bc>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a2a      	ldr	r2, [pc, #168]	; (8008638 <HAL_DMA_Start_IT+0x210>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d027      	beq.n	80085e4 <HAL_DMA_Start_IT+0x1bc>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a28      	ldr	r2, [pc, #160]	; (800863c <HAL_DMA_Start_IT+0x214>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d022      	beq.n	80085e4 <HAL_DMA_Start_IT+0x1bc>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a27      	ldr	r2, [pc, #156]	; (8008640 <HAL_DMA_Start_IT+0x218>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d01d      	beq.n	80085e4 <HAL_DMA_Start_IT+0x1bc>
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a25      	ldr	r2, [pc, #148]	; (8008644 <HAL_DMA_Start_IT+0x21c>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d018      	beq.n	80085e4 <HAL_DMA_Start_IT+0x1bc>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a24      	ldr	r2, [pc, #144]	; (8008648 <HAL_DMA_Start_IT+0x220>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d013      	beq.n	80085e4 <HAL_DMA_Start_IT+0x1bc>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a22      	ldr	r2, [pc, #136]	; (800864c <HAL_DMA_Start_IT+0x224>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d00e      	beq.n	80085e4 <HAL_DMA_Start_IT+0x1bc>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a21      	ldr	r2, [pc, #132]	; (8008650 <HAL_DMA_Start_IT+0x228>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d009      	beq.n	80085e4 <HAL_DMA_Start_IT+0x1bc>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a1f      	ldr	r2, [pc, #124]	; (8008654 <HAL_DMA_Start_IT+0x22c>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d004      	beq.n	80085e4 <HAL_DMA_Start_IT+0x1bc>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a1e      	ldr	r2, [pc, #120]	; (8008658 <HAL_DMA_Start_IT+0x230>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d101      	bne.n	80085e8 <HAL_DMA_Start_IT+0x1c0>
 80085e4:	2301      	movs	r3, #1
 80085e6:	e000      	b.n	80085ea <HAL_DMA_Start_IT+0x1c2>
 80085e8:	2300      	movs	r3, #0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d036      	beq.n	800865c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f023 021e 	bic.w	r2, r3, #30
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f042 0216 	orr.w	r2, r2, #22
 8008600:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	2b00      	cmp	r3, #0
 8008608:	d03e      	beq.n	8008688 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f042 0208 	orr.w	r2, r2, #8
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	e035      	b.n	8008688 <HAL_DMA_Start_IT+0x260>
 800861c:	40020010 	.word	0x40020010
 8008620:	40020028 	.word	0x40020028
 8008624:	40020040 	.word	0x40020040
 8008628:	40020058 	.word	0x40020058
 800862c:	40020070 	.word	0x40020070
 8008630:	40020088 	.word	0x40020088
 8008634:	400200a0 	.word	0x400200a0
 8008638:	400200b8 	.word	0x400200b8
 800863c:	40020410 	.word	0x40020410
 8008640:	40020428 	.word	0x40020428
 8008644:	40020440 	.word	0x40020440
 8008648:	40020458 	.word	0x40020458
 800864c:	40020470 	.word	0x40020470
 8008650:	40020488 	.word	0x40020488
 8008654:	400204a0 	.word	0x400204a0
 8008658:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f023 020e 	bic.w	r2, r3, #14
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 020a 	orr.w	r2, r2, #10
 800866e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	2b00      	cmp	r3, #0
 8008676:	d007      	beq.n	8008688 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0204 	orr.w	r2, r2, #4
 8008686:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a83      	ldr	r2, [pc, #524]	; (800889c <HAL_DMA_Start_IT+0x474>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d072      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a82      	ldr	r2, [pc, #520]	; (80088a0 <HAL_DMA_Start_IT+0x478>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d06d      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a80      	ldr	r2, [pc, #512]	; (80088a4 <HAL_DMA_Start_IT+0x47c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d068      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a7f      	ldr	r2, [pc, #508]	; (80088a8 <HAL_DMA_Start_IT+0x480>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d063      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a7d      	ldr	r2, [pc, #500]	; (80088ac <HAL_DMA_Start_IT+0x484>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d05e      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a7c      	ldr	r2, [pc, #496]	; (80088b0 <HAL_DMA_Start_IT+0x488>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d059      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a7a      	ldr	r2, [pc, #488]	; (80088b4 <HAL_DMA_Start_IT+0x48c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d054      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a79      	ldr	r2, [pc, #484]	; (80088b8 <HAL_DMA_Start_IT+0x490>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d04f      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a77      	ldr	r2, [pc, #476]	; (80088bc <HAL_DMA_Start_IT+0x494>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d04a      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a76      	ldr	r2, [pc, #472]	; (80088c0 <HAL_DMA_Start_IT+0x498>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d045      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a74      	ldr	r2, [pc, #464]	; (80088c4 <HAL_DMA_Start_IT+0x49c>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d040      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a73      	ldr	r2, [pc, #460]	; (80088c8 <HAL_DMA_Start_IT+0x4a0>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d03b      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a71      	ldr	r2, [pc, #452]	; (80088cc <HAL_DMA_Start_IT+0x4a4>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d036      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a70      	ldr	r2, [pc, #448]	; (80088d0 <HAL_DMA_Start_IT+0x4a8>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d031      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a6e      	ldr	r2, [pc, #440]	; (80088d4 <HAL_DMA_Start_IT+0x4ac>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d02c      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a6d      	ldr	r2, [pc, #436]	; (80088d8 <HAL_DMA_Start_IT+0x4b0>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d027      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a6b      	ldr	r2, [pc, #428]	; (80088dc <HAL_DMA_Start_IT+0x4b4>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d022      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a6a      	ldr	r2, [pc, #424]	; (80088e0 <HAL_DMA_Start_IT+0x4b8>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d01d      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a68      	ldr	r2, [pc, #416]	; (80088e4 <HAL_DMA_Start_IT+0x4bc>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d018      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a67      	ldr	r2, [pc, #412]	; (80088e8 <HAL_DMA_Start_IT+0x4c0>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d013      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a65      	ldr	r2, [pc, #404]	; (80088ec <HAL_DMA_Start_IT+0x4c4>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d00e      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a64      	ldr	r2, [pc, #400]	; (80088f0 <HAL_DMA_Start_IT+0x4c8>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d009      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a62      	ldr	r2, [pc, #392]	; (80088f4 <HAL_DMA_Start_IT+0x4cc>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d004      	beq.n	8008778 <HAL_DMA_Start_IT+0x350>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a61      	ldr	r2, [pc, #388]	; (80088f8 <HAL_DMA_Start_IT+0x4d0>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d101      	bne.n	800877c <HAL_DMA_Start_IT+0x354>
 8008778:	2301      	movs	r3, #1
 800877a:	e000      	b.n	800877e <HAL_DMA_Start_IT+0x356>
 800877c:	2300      	movs	r3, #0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d01a      	beq.n	80087b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d007      	beq.n	80087a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800879a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800879e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d007      	beq.n	80087b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a37      	ldr	r2, [pc, #220]	; (800889c <HAL_DMA_Start_IT+0x474>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d04a      	beq.n	8008858 <HAL_DMA_Start_IT+0x430>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a36      	ldr	r2, [pc, #216]	; (80088a0 <HAL_DMA_Start_IT+0x478>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d045      	beq.n	8008858 <HAL_DMA_Start_IT+0x430>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a34      	ldr	r2, [pc, #208]	; (80088a4 <HAL_DMA_Start_IT+0x47c>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d040      	beq.n	8008858 <HAL_DMA_Start_IT+0x430>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a33      	ldr	r2, [pc, #204]	; (80088a8 <HAL_DMA_Start_IT+0x480>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d03b      	beq.n	8008858 <HAL_DMA_Start_IT+0x430>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a31      	ldr	r2, [pc, #196]	; (80088ac <HAL_DMA_Start_IT+0x484>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d036      	beq.n	8008858 <HAL_DMA_Start_IT+0x430>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a30      	ldr	r2, [pc, #192]	; (80088b0 <HAL_DMA_Start_IT+0x488>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d031      	beq.n	8008858 <HAL_DMA_Start_IT+0x430>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a2e      	ldr	r2, [pc, #184]	; (80088b4 <HAL_DMA_Start_IT+0x48c>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d02c      	beq.n	8008858 <HAL_DMA_Start_IT+0x430>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a2d      	ldr	r2, [pc, #180]	; (80088b8 <HAL_DMA_Start_IT+0x490>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d027      	beq.n	8008858 <HAL_DMA_Start_IT+0x430>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a2b      	ldr	r2, [pc, #172]	; (80088bc <HAL_DMA_Start_IT+0x494>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d022      	beq.n	8008858 <HAL_DMA_Start_IT+0x430>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a2a      	ldr	r2, [pc, #168]	; (80088c0 <HAL_DMA_Start_IT+0x498>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d01d      	beq.n	8008858 <HAL_DMA_Start_IT+0x430>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a28      	ldr	r2, [pc, #160]	; (80088c4 <HAL_DMA_Start_IT+0x49c>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d018      	beq.n	8008858 <HAL_DMA_Start_IT+0x430>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a27      	ldr	r2, [pc, #156]	; (80088c8 <HAL_DMA_Start_IT+0x4a0>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d013      	beq.n	8008858 <HAL_DMA_Start_IT+0x430>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a25      	ldr	r2, [pc, #148]	; (80088cc <HAL_DMA_Start_IT+0x4a4>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d00e      	beq.n	8008858 <HAL_DMA_Start_IT+0x430>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a24      	ldr	r2, [pc, #144]	; (80088d0 <HAL_DMA_Start_IT+0x4a8>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d009      	beq.n	8008858 <HAL_DMA_Start_IT+0x430>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a22      	ldr	r2, [pc, #136]	; (80088d4 <HAL_DMA_Start_IT+0x4ac>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d004      	beq.n	8008858 <HAL_DMA_Start_IT+0x430>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a21      	ldr	r2, [pc, #132]	; (80088d8 <HAL_DMA_Start_IT+0x4b0>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d108      	bne.n	800886a <HAL_DMA_Start_IT+0x442>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f042 0201 	orr.w	r2, r2, #1
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	e012      	b.n	8008890 <HAL_DMA_Start_IT+0x468>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 0201 	orr.w	r2, r2, #1
 8008878:	601a      	str	r2, [r3, #0]
 800887a:	e009      	b.n	8008890 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008882:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008890:	7dfb      	ldrb	r3, [r7, #23]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3718      	adds	r7, #24
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	40020010 	.word	0x40020010
 80088a0:	40020028 	.word	0x40020028
 80088a4:	40020040 	.word	0x40020040
 80088a8:	40020058 	.word	0x40020058
 80088ac:	40020070 	.word	0x40020070
 80088b0:	40020088 	.word	0x40020088
 80088b4:	400200a0 	.word	0x400200a0
 80088b8:	400200b8 	.word	0x400200b8
 80088bc:	40020410 	.word	0x40020410
 80088c0:	40020428 	.word	0x40020428
 80088c4:	40020440 	.word	0x40020440
 80088c8:	40020458 	.word	0x40020458
 80088cc:	40020470 	.word	0x40020470
 80088d0:	40020488 	.word	0x40020488
 80088d4:	400204a0 	.word	0x400204a0
 80088d8:	400204b8 	.word	0x400204b8
 80088dc:	58025408 	.word	0x58025408
 80088e0:	5802541c 	.word	0x5802541c
 80088e4:	58025430 	.word	0x58025430
 80088e8:	58025444 	.word	0x58025444
 80088ec:	58025458 	.word	0x58025458
 80088f0:	5802546c 	.word	0x5802546c
 80088f4:	58025480 	.word	0x58025480
 80088f8:	58025494 	.word	0x58025494

080088fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008904:	f7fd f90c 	bl	8005b20 <HAL_GetTick>
 8008908:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e2dc      	b.n	8008ece <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b02      	cmp	r3, #2
 800891e:	d008      	beq.n	8008932 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2280      	movs	r2, #128	; 0x80
 8008924:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e2cd      	b.n	8008ece <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a76      	ldr	r2, [pc, #472]	; (8008b10 <HAL_DMA_Abort+0x214>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d04a      	beq.n	80089d2 <HAL_DMA_Abort+0xd6>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a74      	ldr	r2, [pc, #464]	; (8008b14 <HAL_DMA_Abort+0x218>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d045      	beq.n	80089d2 <HAL_DMA_Abort+0xd6>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a73      	ldr	r2, [pc, #460]	; (8008b18 <HAL_DMA_Abort+0x21c>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d040      	beq.n	80089d2 <HAL_DMA_Abort+0xd6>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a71      	ldr	r2, [pc, #452]	; (8008b1c <HAL_DMA_Abort+0x220>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d03b      	beq.n	80089d2 <HAL_DMA_Abort+0xd6>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a70      	ldr	r2, [pc, #448]	; (8008b20 <HAL_DMA_Abort+0x224>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d036      	beq.n	80089d2 <HAL_DMA_Abort+0xd6>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a6e      	ldr	r2, [pc, #440]	; (8008b24 <HAL_DMA_Abort+0x228>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d031      	beq.n	80089d2 <HAL_DMA_Abort+0xd6>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a6d      	ldr	r2, [pc, #436]	; (8008b28 <HAL_DMA_Abort+0x22c>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d02c      	beq.n	80089d2 <HAL_DMA_Abort+0xd6>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a6b      	ldr	r2, [pc, #428]	; (8008b2c <HAL_DMA_Abort+0x230>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d027      	beq.n	80089d2 <HAL_DMA_Abort+0xd6>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a6a      	ldr	r2, [pc, #424]	; (8008b30 <HAL_DMA_Abort+0x234>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d022      	beq.n	80089d2 <HAL_DMA_Abort+0xd6>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a68      	ldr	r2, [pc, #416]	; (8008b34 <HAL_DMA_Abort+0x238>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d01d      	beq.n	80089d2 <HAL_DMA_Abort+0xd6>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a67      	ldr	r2, [pc, #412]	; (8008b38 <HAL_DMA_Abort+0x23c>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d018      	beq.n	80089d2 <HAL_DMA_Abort+0xd6>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a65      	ldr	r2, [pc, #404]	; (8008b3c <HAL_DMA_Abort+0x240>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d013      	beq.n	80089d2 <HAL_DMA_Abort+0xd6>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a64      	ldr	r2, [pc, #400]	; (8008b40 <HAL_DMA_Abort+0x244>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d00e      	beq.n	80089d2 <HAL_DMA_Abort+0xd6>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a62      	ldr	r2, [pc, #392]	; (8008b44 <HAL_DMA_Abort+0x248>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d009      	beq.n	80089d2 <HAL_DMA_Abort+0xd6>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a61      	ldr	r2, [pc, #388]	; (8008b48 <HAL_DMA_Abort+0x24c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d004      	beq.n	80089d2 <HAL_DMA_Abort+0xd6>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a5f      	ldr	r2, [pc, #380]	; (8008b4c <HAL_DMA_Abort+0x250>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d101      	bne.n	80089d6 <HAL_DMA_Abort+0xda>
 80089d2:	2301      	movs	r3, #1
 80089d4:	e000      	b.n	80089d8 <HAL_DMA_Abort+0xdc>
 80089d6:	2300      	movs	r3, #0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d013      	beq.n	8008a04 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f022 021e 	bic.w	r2, r2, #30
 80089ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	695a      	ldr	r2, [r3, #20]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	617b      	str	r3, [r7, #20]
 8008a02:	e00a      	b.n	8008a1a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 020e 	bic.w	r2, r2, #14
 8008a12:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a3c      	ldr	r2, [pc, #240]	; (8008b10 <HAL_DMA_Abort+0x214>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d072      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a3a      	ldr	r2, [pc, #232]	; (8008b14 <HAL_DMA_Abort+0x218>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d06d      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a39      	ldr	r2, [pc, #228]	; (8008b18 <HAL_DMA_Abort+0x21c>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d068      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a37      	ldr	r2, [pc, #220]	; (8008b1c <HAL_DMA_Abort+0x220>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d063      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a36      	ldr	r2, [pc, #216]	; (8008b20 <HAL_DMA_Abort+0x224>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d05e      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a34      	ldr	r2, [pc, #208]	; (8008b24 <HAL_DMA_Abort+0x228>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d059      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a33      	ldr	r2, [pc, #204]	; (8008b28 <HAL_DMA_Abort+0x22c>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d054      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a31      	ldr	r2, [pc, #196]	; (8008b2c <HAL_DMA_Abort+0x230>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d04f      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a30      	ldr	r2, [pc, #192]	; (8008b30 <HAL_DMA_Abort+0x234>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d04a      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a2e      	ldr	r2, [pc, #184]	; (8008b34 <HAL_DMA_Abort+0x238>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d045      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a2d      	ldr	r2, [pc, #180]	; (8008b38 <HAL_DMA_Abort+0x23c>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d040      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a2b      	ldr	r2, [pc, #172]	; (8008b3c <HAL_DMA_Abort+0x240>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d03b      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a2a      	ldr	r2, [pc, #168]	; (8008b40 <HAL_DMA_Abort+0x244>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d036      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a28      	ldr	r2, [pc, #160]	; (8008b44 <HAL_DMA_Abort+0x248>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d031      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a27      	ldr	r2, [pc, #156]	; (8008b48 <HAL_DMA_Abort+0x24c>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d02c      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a25      	ldr	r2, [pc, #148]	; (8008b4c <HAL_DMA_Abort+0x250>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d027      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a24      	ldr	r2, [pc, #144]	; (8008b50 <HAL_DMA_Abort+0x254>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d022      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a22      	ldr	r2, [pc, #136]	; (8008b54 <HAL_DMA_Abort+0x258>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d01d      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a21      	ldr	r2, [pc, #132]	; (8008b58 <HAL_DMA_Abort+0x25c>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d018      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a1f      	ldr	r2, [pc, #124]	; (8008b5c <HAL_DMA_Abort+0x260>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d013      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a1e      	ldr	r2, [pc, #120]	; (8008b60 <HAL_DMA_Abort+0x264>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d00e      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a1c      	ldr	r2, [pc, #112]	; (8008b64 <HAL_DMA_Abort+0x268>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d009      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a1b      	ldr	r2, [pc, #108]	; (8008b68 <HAL_DMA_Abort+0x26c>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d004      	beq.n	8008b0a <HAL_DMA_Abort+0x20e>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a19      	ldr	r2, [pc, #100]	; (8008b6c <HAL_DMA_Abort+0x270>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d132      	bne.n	8008b70 <HAL_DMA_Abort+0x274>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e031      	b.n	8008b72 <HAL_DMA_Abort+0x276>
 8008b0e:	bf00      	nop
 8008b10:	40020010 	.word	0x40020010
 8008b14:	40020028 	.word	0x40020028
 8008b18:	40020040 	.word	0x40020040
 8008b1c:	40020058 	.word	0x40020058
 8008b20:	40020070 	.word	0x40020070
 8008b24:	40020088 	.word	0x40020088
 8008b28:	400200a0 	.word	0x400200a0
 8008b2c:	400200b8 	.word	0x400200b8
 8008b30:	40020410 	.word	0x40020410
 8008b34:	40020428 	.word	0x40020428
 8008b38:	40020440 	.word	0x40020440
 8008b3c:	40020458 	.word	0x40020458
 8008b40:	40020470 	.word	0x40020470
 8008b44:	40020488 	.word	0x40020488
 8008b48:	400204a0 	.word	0x400204a0
 8008b4c:	400204b8 	.word	0x400204b8
 8008b50:	58025408 	.word	0x58025408
 8008b54:	5802541c 	.word	0x5802541c
 8008b58:	58025430 	.word	0x58025430
 8008b5c:	58025444 	.word	0x58025444
 8008b60:	58025458 	.word	0x58025458
 8008b64:	5802546c 	.word	0x5802546c
 8008b68:	58025480 	.word	0x58025480
 8008b6c:	58025494 	.word	0x58025494
 8008b70:	2300      	movs	r3, #0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d007      	beq.n	8008b86 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b84:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a6d      	ldr	r2, [pc, #436]	; (8008d40 <HAL_DMA_Abort+0x444>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d04a      	beq.n	8008c26 <HAL_DMA_Abort+0x32a>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a6b      	ldr	r2, [pc, #428]	; (8008d44 <HAL_DMA_Abort+0x448>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d045      	beq.n	8008c26 <HAL_DMA_Abort+0x32a>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a6a      	ldr	r2, [pc, #424]	; (8008d48 <HAL_DMA_Abort+0x44c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d040      	beq.n	8008c26 <HAL_DMA_Abort+0x32a>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a68      	ldr	r2, [pc, #416]	; (8008d4c <HAL_DMA_Abort+0x450>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d03b      	beq.n	8008c26 <HAL_DMA_Abort+0x32a>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a67      	ldr	r2, [pc, #412]	; (8008d50 <HAL_DMA_Abort+0x454>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d036      	beq.n	8008c26 <HAL_DMA_Abort+0x32a>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a65      	ldr	r2, [pc, #404]	; (8008d54 <HAL_DMA_Abort+0x458>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d031      	beq.n	8008c26 <HAL_DMA_Abort+0x32a>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a64      	ldr	r2, [pc, #400]	; (8008d58 <HAL_DMA_Abort+0x45c>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d02c      	beq.n	8008c26 <HAL_DMA_Abort+0x32a>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a62      	ldr	r2, [pc, #392]	; (8008d5c <HAL_DMA_Abort+0x460>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d027      	beq.n	8008c26 <HAL_DMA_Abort+0x32a>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a61      	ldr	r2, [pc, #388]	; (8008d60 <HAL_DMA_Abort+0x464>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d022      	beq.n	8008c26 <HAL_DMA_Abort+0x32a>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a5f      	ldr	r2, [pc, #380]	; (8008d64 <HAL_DMA_Abort+0x468>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d01d      	beq.n	8008c26 <HAL_DMA_Abort+0x32a>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a5e      	ldr	r2, [pc, #376]	; (8008d68 <HAL_DMA_Abort+0x46c>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d018      	beq.n	8008c26 <HAL_DMA_Abort+0x32a>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a5c      	ldr	r2, [pc, #368]	; (8008d6c <HAL_DMA_Abort+0x470>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d013      	beq.n	8008c26 <HAL_DMA_Abort+0x32a>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a5b      	ldr	r2, [pc, #364]	; (8008d70 <HAL_DMA_Abort+0x474>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d00e      	beq.n	8008c26 <HAL_DMA_Abort+0x32a>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a59      	ldr	r2, [pc, #356]	; (8008d74 <HAL_DMA_Abort+0x478>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d009      	beq.n	8008c26 <HAL_DMA_Abort+0x32a>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a58      	ldr	r2, [pc, #352]	; (8008d78 <HAL_DMA_Abort+0x47c>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d004      	beq.n	8008c26 <HAL_DMA_Abort+0x32a>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a56      	ldr	r2, [pc, #344]	; (8008d7c <HAL_DMA_Abort+0x480>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d108      	bne.n	8008c38 <HAL_DMA_Abort+0x33c>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f022 0201 	bic.w	r2, r2, #1
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	e007      	b.n	8008c48 <HAL_DMA_Abort+0x34c>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 0201 	bic.w	r2, r2, #1
 8008c46:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008c48:	e013      	b.n	8008c72 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008c4a:	f7fc ff69 	bl	8005b20 <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	2b05      	cmp	r3, #5
 8008c56:	d90c      	bls.n	8008c72 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2220      	movs	r2, #32
 8008c5c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2203      	movs	r2, #3
 8008c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e12d      	b.n	8008ece <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1e5      	bne.n	8008c4a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a2f      	ldr	r2, [pc, #188]	; (8008d40 <HAL_DMA_Abort+0x444>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d04a      	beq.n	8008d1e <HAL_DMA_Abort+0x422>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a2d      	ldr	r2, [pc, #180]	; (8008d44 <HAL_DMA_Abort+0x448>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d045      	beq.n	8008d1e <HAL_DMA_Abort+0x422>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a2c      	ldr	r2, [pc, #176]	; (8008d48 <HAL_DMA_Abort+0x44c>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d040      	beq.n	8008d1e <HAL_DMA_Abort+0x422>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a2a      	ldr	r2, [pc, #168]	; (8008d4c <HAL_DMA_Abort+0x450>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d03b      	beq.n	8008d1e <HAL_DMA_Abort+0x422>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a29      	ldr	r2, [pc, #164]	; (8008d50 <HAL_DMA_Abort+0x454>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d036      	beq.n	8008d1e <HAL_DMA_Abort+0x422>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a27      	ldr	r2, [pc, #156]	; (8008d54 <HAL_DMA_Abort+0x458>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d031      	beq.n	8008d1e <HAL_DMA_Abort+0x422>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a26      	ldr	r2, [pc, #152]	; (8008d58 <HAL_DMA_Abort+0x45c>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d02c      	beq.n	8008d1e <HAL_DMA_Abort+0x422>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a24      	ldr	r2, [pc, #144]	; (8008d5c <HAL_DMA_Abort+0x460>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d027      	beq.n	8008d1e <HAL_DMA_Abort+0x422>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a23      	ldr	r2, [pc, #140]	; (8008d60 <HAL_DMA_Abort+0x464>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d022      	beq.n	8008d1e <HAL_DMA_Abort+0x422>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a21      	ldr	r2, [pc, #132]	; (8008d64 <HAL_DMA_Abort+0x468>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d01d      	beq.n	8008d1e <HAL_DMA_Abort+0x422>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a20      	ldr	r2, [pc, #128]	; (8008d68 <HAL_DMA_Abort+0x46c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d018      	beq.n	8008d1e <HAL_DMA_Abort+0x422>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a1e      	ldr	r2, [pc, #120]	; (8008d6c <HAL_DMA_Abort+0x470>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d013      	beq.n	8008d1e <HAL_DMA_Abort+0x422>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a1d      	ldr	r2, [pc, #116]	; (8008d70 <HAL_DMA_Abort+0x474>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d00e      	beq.n	8008d1e <HAL_DMA_Abort+0x422>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a1b      	ldr	r2, [pc, #108]	; (8008d74 <HAL_DMA_Abort+0x478>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d009      	beq.n	8008d1e <HAL_DMA_Abort+0x422>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a1a      	ldr	r2, [pc, #104]	; (8008d78 <HAL_DMA_Abort+0x47c>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d004      	beq.n	8008d1e <HAL_DMA_Abort+0x422>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a18      	ldr	r2, [pc, #96]	; (8008d7c <HAL_DMA_Abort+0x480>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d101      	bne.n	8008d22 <HAL_DMA_Abort+0x426>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e000      	b.n	8008d24 <HAL_DMA_Abort+0x428>
 8008d22:	2300      	movs	r3, #0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d02b      	beq.n	8008d80 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d2c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d32:	f003 031f 	and.w	r3, r3, #31
 8008d36:	223f      	movs	r2, #63	; 0x3f
 8008d38:	409a      	lsls	r2, r3
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	609a      	str	r2, [r3, #8]
 8008d3e:	e02a      	b.n	8008d96 <HAL_DMA_Abort+0x49a>
 8008d40:	40020010 	.word	0x40020010
 8008d44:	40020028 	.word	0x40020028
 8008d48:	40020040 	.word	0x40020040
 8008d4c:	40020058 	.word	0x40020058
 8008d50:	40020070 	.word	0x40020070
 8008d54:	40020088 	.word	0x40020088
 8008d58:	400200a0 	.word	0x400200a0
 8008d5c:	400200b8 	.word	0x400200b8
 8008d60:	40020410 	.word	0x40020410
 8008d64:	40020428 	.word	0x40020428
 8008d68:	40020440 	.word	0x40020440
 8008d6c:	40020458 	.word	0x40020458
 8008d70:	40020470 	.word	0x40020470
 8008d74:	40020488 	.word	0x40020488
 8008d78:	400204a0 	.word	0x400204a0
 8008d7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d84:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d8a:	f003 031f 	and.w	r3, r3, #31
 8008d8e:	2201      	movs	r2, #1
 8008d90:	409a      	lsls	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a4f      	ldr	r2, [pc, #316]	; (8008ed8 <HAL_DMA_Abort+0x5dc>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d072      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a4d      	ldr	r2, [pc, #308]	; (8008edc <HAL_DMA_Abort+0x5e0>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d06d      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a4c      	ldr	r2, [pc, #304]	; (8008ee0 <HAL_DMA_Abort+0x5e4>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d068      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a4a      	ldr	r2, [pc, #296]	; (8008ee4 <HAL_DMA_Abort+0x5e8>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d063      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a49      	ldr	r2, [pc, #292]	; (8008ee8 <HAL_DMA_Abort+0x5ec>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d05e      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a47      	ldr	r2, [pc, #284]	; (8008eec <HAL_DMA_Abort+0x5f0>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d059      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a46      	ldr	r2, [pc, #280]	; (8008ef0 <HAL_DMA_Abort+0x5f4>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d054      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a44      	ldr	r2, [pc, #272]	; (8008ef4 <HAL_DMA_Abort+0x5f8>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d04f      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a43      	ldr	r2, [pc, #268]	; (8008ef8 <HAL_DMA_Abort+0x5fc>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d04a      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a41      	ldr	r2, [pc, #260]	; (8008efc <HAL_DMA_Abort+0x600>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d045      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a40      	ldr	r2, [pc, #256]	; (8008f00 <HAL_DMA_Abort+0x604>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d040      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a3e      	ldr	r2, [pc, #248]	; (8008f04 <HAL_DMA_Abort+0x608>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d03b      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a3d      	ldr	r2, [pc, #244]	; (8008f08 <HAL_DMA_Abort+0x60c>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d036      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a3b      	ldr	r2, [pc, #236]	; (8008f0c <HAL_DMA_Abort+0x610>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d031      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a3a      	ldr	r2, [pc, #232]	; (8008f10 <HAL_DMA_Abort+0x614>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d02c      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a38      	ldr	r2, [pc, #224]	; (8008f14 <HAL_DMA_Abort+0x618>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d027      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a37      	ldr	r2, [pc, #220]	; (8008f18 <HAL_DMA_Abort+0x61c>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d022      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a35      	ldr	r2, [pc, #212]	; (8008f1c <HAL_DMA_Abort+0x620>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d01d      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a34      	ldr	r2, [pc, #208]	; (8008f20 <HAL_DMA_Abort+0x624>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d018      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a32      	ldr	r2, [pc, #200]	; (8008f24 <HAL_DMA_Abort+0x628>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d013      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a31      	ldr	r2, [pc, #196]	; (8008f28 <HAL_DMA_Abort+0x62c>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d00e      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a2f      	ldr	r2, [pc, #188]	; (8008f2c <HAL_DMA_Abort+0x630>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d009      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a2e      	ldr	r2, [pc, #184]	; (8008f30 <HAL_DMA_Abort+0x634>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d004      	beq.n	8008e86 <HAL_DMA_Abort+0x58a>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a2c      	ldr	r2, [pc, #176]	; (8008f34 <HAL_DMA_Abort+0x638>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d101      	bne.n	8008e8a <HAL_DMA_Abort+0x58e>
 8008e86:	2301      	movs	r3, #1
 8008e88:	e000      	b.n	8008e8c <HAL_DMA_Abort+0x590>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d015      	beq.n	8008ebc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008e98:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00c      	beq.n	8008ebc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008eb0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008eba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3718      	adds	r7, #24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	40020010 	.word	0x40020010
 8008edc:	40020028 	.word	0x40020028
 8008ee0:	40020040 	.word	0x40020040
 8008ee4:	40020058 	.word	0x40020058
 8008ee8:	40020070 	.word	0x40020070
 8008eec:	40020088 	.word	0x40020088
 8008ef0:	400200a0 	.word	0x400200a0
 8008ef4:	400200b8 	.word	0x400200b8
 8008ef8:	40020410 	.word	0x40020410
 8008efc:	40020428 	.word	0x40020428
 8008f00:	40020440 	.word	0x40020440
 8008f04:	40020458 	.word	0x40020458
 8008f08:	40020470 	.word	0x40020470
 8008f0c:	40020488 	.word	0x40020488
 8008f10:	400204a0 	.word	0x400204a0
 8008f14:	400204b8 	.word	0x400204b8
 8008f18:	58025408 	.word	0x58025408
 8008f1c:	5802541c 	.word	0x5802541c
 8008f20:	58025430 	.word	0x58025430
 8008f24:	58025444 	.word	0x58025444
 8008f28:	58025458 	.word	0x58025458
 8008f2c:	5802546c 	.word	0x5802546c
 8008f30:	58025480 	.word	0x58025480
 8008f34:	58025494 	.word	0x58025494

08008f38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e237      	b.n	80093ba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d004      	beq.n	8008f60 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2280      	movs	r2, #128	; 0x80
 8008f5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e22c      	b.n	80093ba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a5c      	ldr	r2, [pc, #368]	; (80090d8 <HAL_DMA_Abort_IT+0x1a0>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d04a      	beq.n	8009000 <HAL_DMA_Abort_IT+0xc8>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a5b      	ldr	r2, [pc, #364]	; (80090dc <HAL_DMA_Abort_IT+0x1a4>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d045      	beq.n	8009000 <HAL_DMA_Abort_IT+0xc8>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a59      	ldr	r2, [pc, #356]	; (80090e0 <HAL_DMA_Abort_IT+0x1a8>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d040      	beq.n	8009000 <HAL_DMA_Abort_IT+0xc8>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a58      	ldr	r2, [pc, #352]	; (80090e4 <HAL_DMA_Abort_IT+0x1ac>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d03b      	beq.n	8009000 <HAL_DMA_Abort_IT+0xc8>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a56      	ldr	r2, [pc, #344]	; (80090e8 <HAL_DMA_Abort_IT+0x1b0>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d036      	beq.n	8009000 <HAL_DMA_Abort_IT+0xc8>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a55      	ldr	r2, [pc, #340]	; (80090ec <HAL_DMA_Abort_IT+0x1b4>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d031      	beq.n	8009000 <HAL_DMA_Abort_IT+0xc8>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a53      	ldr	r2, [pc, #332]	; (80090f0 <HAL_DMA_Abort_IT+0x1b8>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d02c      	beq.n	8009000 <HAL_DMA_Abort_IT+0xc8>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a52      	ldr	r2, [pc, #328]	; (80090f4 <HAL_DMA_Abort_IT+0x1bc>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d027      	beq.n	8009000 <HAL_DMA_Abort_IT+0xc8>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a50      	ldr	r2, [pc, #320]	; (80090f8 <HAL_DMA_Abort_IT+0x1c0>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d022      	beq.n	8009000 <HAL_DMA_Abort_IT+0xc8>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a4f      	ldr	r2, [pc, #316]	; (80090fc <HAL_DMA_Abort_IT+0x1c4>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d01d      	beq.n	8009000 <HAL_DMA_Abort_IT+0xc8>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a4d      	ldr	r2, [pc, #308]	; (8009100 <HAL_DMA_Abort_IT+0x1c8>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d018      	beq.n	8009000 <HAL_DMA_Abort_IT+0xc8>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a4c      	ldr	r2, [pc, #304]	; (8009104 <HAL_DMA_Abort_IT+0x1cc>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d013      	beq.n	8009000 <HAL_DMA_Abort_IT+0xc8>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a4a      	ldr	r2, [pc, #296]	; (8009108 <HAL_DMA_Abort_IT+0x1d0>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d00e      	beq.n	8009000 <HAL_DMA_Abort_IT+0xc8>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a49      	ldr	r2, [pc, #292]	; (800910c <HAL_DMA_Abort_IT+0x1d4>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d009      	beq.n	8009000 <HAL_DMA_Abort_IT+0xc8>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a47      	ldr	r2, [pc, #284]	; (8009110 <HAL_DMA_Abort_IT+0x1d8>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d004      	beq.n	8009000 <HAL_DMA_Abort_IT+0xc8>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a46      	ldr	r2, [pc, #280]	; (8009114 <HAL_DMA_Abort_IT+0x1dc>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d101      	bne.n	8009004 <HAL_DMA_Abort_IT+0xcc>
 8009000:	2301      	movs	r3, #1
 8009002:	e000      	b.n	8009006 <HAL_DMA_Abort_IT+0xce>
 8009004:	2300      	movs	r3, #0
 8009006:	2b00      	cmp	r3, #0
 8009008:	f000 8086 	beq.w	8009118 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2204      	movs	r2, #4
 8009010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a2f      	ldr	r2, [pc, #188]	; (80090d8 <HAL_DMA_Abort_IT+0x1a0>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d04a      	beq.n	80090b4 <HAL_DMA_Abort_IT+0x17c>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a2e      	ldr	r2, [pc, #184]	; (80090dc <HAL_DMA_Abort_IT+0x1a4>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d045      	beq.n	80090b4 <HAL_DMA_Abort_IT+0x17c>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a2c      	ldr	r2, [pc, #176]	; (80090e0 <HAL_DMA_Abort_IT+0x1a8>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d040      	beq.n	80090b4 <HAL_DMA_Abort_IT+0x17c>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a2b      	ldr	r2, [pc, #172]	; (80090e4 <HAL_DMA_Abort_IT+0x1ac>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d03b      	beq.n	80090b4 <HAL_DMA_Abort_IT+0x17c>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a29      	ldr	r2, [pc, #164]	; (80090e8 <HAL_DMA_Abort_IT+0x1b0>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d036      	beq.n	80090b4 <HAL_DMA_Abort_IT+0x17c>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a28      	ldr	r2, [pc, #160]	; (80090ec <HAL_DMA_Abort_IT+0x1b4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d031      	beq.n	80090b4 <HAL_DMA_Abort_IT+0x17c>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a26      	ldr	r2, [pc, #152]	; (80090f0 <HAL_DMA_Abort_IT+0x1b8>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d02c      	beq.n	80090b4 <HAL_DMA_Abort_IT+0x17c>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a25      	ldr	r2, [pc, #148]	; (80090f4 <HAL_DMA_Abort_IT+0x1bc>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d027      	beq.n	80090b4 <HAL_DMA_Abort_IT+0x17c>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a23      	ldr	r2, [pc, #140]	; (80090f8 <HAL_DMA_Abort_IT+0x1c0>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d022      	beq.n	80090b4 <HAL_DMA_Abort_IT+0x17c>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a22      	ldr	r2, [pc, #136]	; (80090fc <HAL_DMA_Abort_IT+0x1c4>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d01d      	beq.n	80090b4 <HAL_DMA_Abort_IT+0x17c>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a20      	ldr	r2, [pc, #128]	; (8009100 <HAL_DMA_Abort_IT+0x1c8>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d018      	beq.n	80090b4 <HAL_DMA_Abort_IT+0x17c>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a1f      	ldr	r2, [pc, #124]	; (8009104 <HAL_DMA_Abort_IT+0x1cc>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d013      	beq.n	80090b4 <HAL_DMA_Abort_IT+0x17c>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a1d      	ldr	r2, [pc, #116]	; (8009108 <HAL_DMA_Abort_IT+0x1d0>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d00e      	beq.n	80090b4 <HAL_DMA_Abort_IT+0x17c>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a1c      	ldr	r2, [pc, #112]	; (800910c <HAL_DMA_Abort_IT+0x1d4>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d009      	beq.n	80090b4 <HAL_DMA_Abort_IT+0x17c>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a1a      	ldr	r2, [pc, #104]	; (8009110 <HAL_DMA_Abort_IT+0x1d8>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d004      	beq.n	80090b4 <HAL_DMA_Abort_IT+0x17c>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a19      	ldr	r2, [pc, #100]	; (8009114 <HAL_DMA_Abort_IT+0x1dc>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d108      	bne.n	80090c6 <HAL_DMA_Abort_IT+0x18e>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 0201 	bic.w	r2, r2, #1
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	e178      	b.n	80093b8 <HAL_DMA_Abort_IT+0x480>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0201 	bic.w	r2, r2, #1
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	e16f      	b.n	80093b8 <HAL_DMA_Abort_IT+0x480>
 80090d8:	40020010 	.word	0x40020010
 80090dc:	40020028 	.word	0x40020028
 80090e0:	40020040 	.word	0x40020040
 80090e4:	40020058 	.word	0x40020058
 80090e8:	40020070 	.word	0x40020070
 80090ec:	40020088 	.word	0x40020088
 80090f0:	400200a0 	.word	0x400200a0
 80090f4:	400200b8 	.word	0x400200b8
 80090f8:	40020410 	.word	0x40020410
 80090fc:	40020428 	.word	0x40020428
 8009100:	40020440 	.word	0x40020440
 8009104:	40020458 	.word	0x40020458
 8009108:	40020470 	.word	0x40020470
 800910c:	40020488 	.word	0x40020488
 8009110:	400204a0 	.word	0x400204a0
 8009114:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f022 020e 	bic.w	r2, r2, #14
 8009126:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a6c      	ldr	r2, [pc, #432]	; (80092e0 <HAL_DMA_Abort_IT+0x3a8>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d04a      	beq.n	80091c8 <HAL_DMA_Abort_IT+0x290>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a6b      	ldr	r2, [pc, #428]	; (80092e4 <HAL_DMA_Abort_IT+0x3ac>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d045      	beq.n	80091c8 <HAL_DMA_Abort_IT+0x290>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a69      	ldr	r2, [pc, #420]	; (80092e8 <HAL_DMA_Abort_IT+0x3b0>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d040      	beq.n	80091c8 <HAL_DMA_Abort_IT+0x290>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a68      	ldr	r2, [pc, #416]	; (80092ec <HAL_DMA_Abort_IT+0x3b4>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d03b      	beq.n	80091c8 <HAL_DMA_Abort_IT+0x290>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a66      	ldr	r2, [pc, #408]	; (80092f0 <HAL_DMA_Abort_IT+0x3b8>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d036      	beq.n	80091c8 <HAL_DMA_Abort_IT+0x290>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a65      	ldr	r2, [pc, #404]	; (80092f4 <HAL_DMA_Abort_IT+0x3bc>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d031      	beq.n	80091c8 <HAL_DMA_Abort_IT+0x290>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a63      	ldr	r2, [pc, #396]	; (80092f8 <HAL_DMA_Abort_IT+0x3c0>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d02c      	beq.n	80091c8 <HAL_DMA_Abort_IT+0x290>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a62      	ldr	r2, [pc, #392]	; (80092fc <HAL_DMA_Abort_IT+0x3c4>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d027      	beq.n	80091c8 <HAL_DMA_Abort_IT+0x290>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a60      	ldr	r2, [pc, #384]	; (8009300 <HAL_DMA_Abort_IT+0x3c8>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d022      	beq.n	80091c8 <HAL_DMA_Abort_IT+0x290>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a5f      	ldr	r2, [pc, #380]	; (8009304 <HAL_DMA_Abort_IT+0x3cc>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d01d      	beq.n	80091c8 <HAL_DMA_Abort_IT+0x290>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a5d      	ldr	r2, [pc, #372]	; (8009308 <HAL_DMA_Abort_IT+0x3d0>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d018      	beq.n	80091c8 <HAL_DMA_Abort_IT+0x290>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a5c      	ldr	r2, [pc, #368]	; (800930c <HAL_DMA_Abort_IT+0x3d4>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d013      	beq.n	80091c8 <HAL_DMA_Abort_IT+0x290>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a5a      	ldr	r2, [pc, #360]	; (8009310 <HAL_DMA_Abort_IT+0x3d8>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d00e      	beq.n	80091c8 <HAL_DMA_Abort_IT+0x290>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a59      	ldr	r2, [pc, #356]	; (8009314 <HAL_DMA_Abort_IT+0x3dc>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d009      	beq.n	80091c8 <HAL_DMA_Abort_IT+0x290>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a57      	ldr	r2, [pc, #348]	; (8009318 <HAL_DMA_Abort_IT+0x3e0>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d004      	beq.n	80091c8 <HAL_DMA_Abort_IT+0x290>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a56      	ldr	r2, [pc, #344]	; (800931c <HAL_DMA_Abort_IT+0x3e4>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d108      	bne.n	80091da <HAL_DMA_Abort_IT+0x2a2>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f022 0201 	bic.w	r2, r2, #1
 80091d6:	601a      	str	r2, [r3, #0]
 80091d8:	e007      	b.n	80091ea <HAL_DMA_Abort_IT+0x2b2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 0201 	bic.w	r2, r2, #1
 80091e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a3c      	ldr	r2, [pc, #240]	; (80092e0 <HAL_DMA_Abort_IT+0x3a8>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d072      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a3a      	ldr	r2, [pc, #232]	; (80092e4 <HAL_DMA_Abort_IT+0x3ac>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d06d      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a39      	ldr	r2, [pc, #228]	; (80092e8 <HAL_DMA_Abort_IT+0x3b0>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d068      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a37      	ldr	r2, [pc, #220]	; (80092ec <HAL_DMA_Abort_IT+0x3b4>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d063      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a36      	ldr	r2, [pc, #216]	; (80092f0 <HAL_DMA_Abort_IT+0x3b8>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d05e      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a34      	ldr	r2, [pc, #208]	; (80092f4 <HAL_DMA_Abort_IT+0x3bc>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d059      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a33      	ldr	r2, [pc, #204]	; (80092f8 <HAL_DMA_Abort_IT+0x3c0>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d054      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a31      	ldr	r2, [pc, #196]	; (80092fc <HAL_DMA_Abort_IT+0x3c4>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d04f      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a30      	ldr	r2, [pc, #192]	; (8009300 <HAL_DMA_Abort_IT+0x3c8>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d04a      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a2e      	ldr	r2, [pc, #184]	; (8009304 <HAL_DMA_Abort_IT+0x3cc>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d045      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a2d      	ldr	r2, [pc, #180]	; (8009308 <HAL_DMA_Abort_IT+0x3d0>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d040      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a2b      	ldr	r2, [pc, #172]	; (800930c <HAL_DMA_Abort_IT+0x3d4>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d03b      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a2a      	ldr	r2, [pc, #168]	; (8009310 <HAL_DMA_Abort_IT+0x3d8>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d036      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a28      	ldr	r2, [pc, #160]	; (8009314 <HAL_DMA_Abort_IT+0x3dc>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d031      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a27      	ldr	r2, [pc, #156]	; (8009318 <HAL_DMA_Abort_IT+0x3e0>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d02c      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a25      	ldr	r2, [pc, #148]	; (800931c <HAL_DMA_Abort_IT+0x3e4>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d027      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a24      	ldr	r2, [pc, #144]	; (8009320 <HAL_DMA_Abort_IT+0x3e8>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d022      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a22      	ldr	r2, [pc, #136]	; (8009324 <HAL_DMA_Abort_IT+0x3ec>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d01d      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a21      	ldr	r2, [pc, #132]	; (8009328 <HAL_DMA_Abort_IT+0x3f0>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d018      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a1f      	ldr	r2, [pc, #124]	; (800932c <HAL_DMA_Abort_IT+0x3f4>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d013      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a1e      	ldr	r2, [pc, #120]	; (8009330 <HAL_DMA_Abort_IT+0x3f8>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d00e      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a1c      	ldr	r2, [pc, #112]	; (8009334 <HAL_DMA_Abort_IT+0x3fc>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d009      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a1b      	ldr	r2, [pc, #108]	; (8009338 <HAL_DMA_Abort_IT+0x400>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d004      	beq.n	80092da <HAL_DMA_Abort_IT+0x3a2>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a19      	ldr	r2, [pc, #100]	; (800933c <HAL_DMA_Abort_IT+0x404>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d132      	bne.n	8009340 <HAL_DMA_Abort_IT+0x408>
 80092da:	2301      	movs	r3, #1
 80092dc:	e031      	b.n	8009342 <HAL_DMA_Abort_IT+0x40a>
 80092de:	bf00      	nop
 80092e0:	40020010 	.word	0x40020010
 80092e4:	40020028 	.word	0x40020028
 80092e8:	40020040 	.word	0x40020040
 80092ec:	40020058 	.word	0x40020058
 80092f0:	40020070 	.word	0x40020070
 80092f4:	40020088 	.word	0x40020088
 80092f8:	400200a0 	.word	0x400200a0
 80092fc:	400200b8 	.word	0x400200b8
 8009300:	40020410 	.word	0x40020410
 8009304:	40020428 	.word	0x40020428
 8009308:	40020440 	.word	0x40020440
 800930c:	40020458 	.word	0x40020458
 8009310:	40020470 	.word	0x40020470
 8009314:	40020488 	.word	0x40020488
 8009318:	400204a0 	.word	0x400204a0
 800931c:	400204b8 	.word	0x400204b8
 8009320:	58025408 	.word	0x58025408
 8009324:	5802541c 	.word	0x5802541c
 8009328:	58025430 	.word	0x58025430
 800932c:	58025444 	.word	0x58025444
 8009330:	58025458 	.word	0x58025458
 8009334:	5802546c 	.word	0x5802546c
 8009338:	58025480 	.word	0x58025480
 800933c:	58025494 	.word	0x58025494
 8009340:	2300      	movs	r3, #0
 8009342:	2b00      	cmp	r3, #0
 8009344:	d028      	beq.n	8009398 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009354:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009360:	f003 031f 	and.w	r3, r3, #31
 8009364:	2201      	movs	r2, #1
 8009366:	409a      	lsls	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009374:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00c      	beq.n	8009398 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800938c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009396:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop

080093c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08a      	sub	sp, #40	; 0x28
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80093d0:	4b67      	ldr	r3, [pc, #412]	; (8009570 <HAL_DMA_IRQHandler+0x1ac>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a67      	ldr	r2, [pc, #412]	; (8009574 <HAL_DMA_IRQHandler+0x1b0>)
 80093d6:	fba2 2303 	umull	r2, r3, r2, r3
 80093da:	0a9b      	lsrs	r3, r3, #10
 80093dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80093ea:	6a3b      	ldr	r3, [r7, #32]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a5f      	ldr	r2, [pc, #380]	; (8009578 <HAL_DMA_IRQHandler+0x1b4>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d04a      	beq.n	8009496 <HAL_DMA_IRQHandler+0xd2>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a5d      	ldr	r2, [pc, #372]	; (800957c <HAL_DMA_IRQHandler+0x1b8>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d045      	beq.n	8009496 <HAL_DMA_IRQHandler+0xd2>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a5c      	ldr	r2, [pc, #368]	; (8009580 <HAL_DMA_IRQHandler+0x1bc>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d040      	beq.n	8009496 <HAL_DMA_IRQHandler+0xd2>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a5a      	ldr	r2, [pc, #360]	; (8009584 <HAL_DMA_IRQHandler+0x1c0>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d03b      	beq.n	8009496 <HAL_DMA_IRQHandler+0xd2>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a59      	ldr	r2, [pc, #356]	; (8009588 <HAL_DMA_IRQHandler+0x1c4>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d036      	beq.n	8009496 <HAL_DMA_IRQHandler+0xd2>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a57      	ldr	r2, [pc, #348]	; (800958c <HAL_DMA_IRQHandler+0x1c8>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d031      	beq.n	8009496 <HAL_DMA_IRQHandler+0xd2>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a56      	ldr	r2, [pc, #344]	; (8009590 <HAL_DMA_IRQHandler+0x1cc>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d02c      	beq.n	8009496 <HAL_DMA_IRQHandler+0xd2>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a54      	ldr	r2, [pc, #336]	; (8009594 <HAL_DMA_IRQHandler+0x1d0>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d027      	beq.n	8009496 <HAL_DMA_IRQHandler+0xd2>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a53      	ldr	r2, [pc, #332]	; (8009598 <HAL_DMA_IRQHandler+0x1d4>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d022      	beq.n	8009496 <HAL_DMA_IRQHandler+0xd2>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a51      	ldr	r2, [pc, #324]	; (800959c <HAL_DMA_IRQHandler+0x1d8>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d01d      	beq.n	8009496 <HAL_DMA_IRQHandler+0xd2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a50      	ldr	r2, [pc, #320]	; (80095a0 <HAL_DMA_IRQHandler+0x1dc>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d018      	beq.n	8009496 <HAL_DMA_IRQHandler+0xd2>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a4e      	ldr	r2, [pc, #312]	; (80095a4 <HAL_DMA_IRQHandler+0x1e0>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d013      	beq.n	8009496 <HAL_DMA_IRQHandler+0xd2>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a4d      	ldr	r2, [pc, #308]	; (80095a8 <HAL_DMA_IRQHandler+0x1e4>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d00e      	beq.n	8009496 <HAL_DMA_IRQHandler+0xd2>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a4b      	ldr	r2, [pc, #300]	; (80095ac <HAL_DMA_IRQHandler+0x1e8>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d009      	beq.n	8009496 <HAL_DMA_IRQHandler+0xd2>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a4a      	ldr	r2, [pc, #296]	; (80095b0 <HAL_DMA_IRQHandler+0x1ec>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d004      	beq.n	8009496 <HAL_DMA_IRQHandler+0xd2>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a48      	ldr	r2, [pc, #288]	; (80095b4 <HAL_DMA_IRQHandler+0x1f0>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d101      	bne.n	800949a <HAL_DMA_IRQHandler+0xd6>
 8009496:	2301      	movs	r3, #1
 8009498:	e000      	b.n	800949c <HAL_DMA_IRQHandler+0xd8>
 800949a:	2300      	movs	r3, #0
 800949c:	2b00      	cmp	r3, #0
 800949e:	f000 842b 	beq.w	8009cf8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094a6:	f003 031f 	and.w	r3, r3, #31
 80094aa:	2208      	movs	r2, #8
 80094ac:	409a      	lsls	r2, r3
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	4013      	ands	r3, r2
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f000 80a2 	beq.w	80095fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a2e      	ldr	r2, [pc, #184]	; (8009578 <HAL_DMA_IRQHandler+0x1b4>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d04a      	beq.n	8009558 <HAL_DMA_IRQHandler+0x194>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a2d      	ldr	r2, [pc, #180]	; (800957c <HAL_DMA_IRQHandler+0x1b8>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d045      	beq.n	8009558 <HAL_DMA_IRQHandler+0x194>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a2b      	ldr	r2, [pc, #172]	; (8009580 <HAL_DMA_IRQHandler+0x1bc>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d040      	beq.n	8009558 <HAL_DMA_IRQHandler+0x194>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a2a      	ldr	r2, [pc, #168]	; (8009584 <HAL_DMA_IRQHandler+0x1c0>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d03b      	beq.n	8009558 <HAL_DMA_IRQHandler+0x194>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a28      	ldr	r2, [pc, #160]	; (8009588 <HAL_DMA_IRQHandler+0x1c4>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d036      	beq.n	8009558 <HAL_DMA_IRQHandler+0x194>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a27      	ldr	r2, [pc, #156]	; (800958c <HAL_DMA_IRQHandler+0x1c8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d031      	beq.n	8009558 <HAL_DMA_IRQHandler+0x194>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a25      	ldr	r2, [pc, #148]	; (8009590 <HAL_DMA_IRQHandler+0x1cc>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d02c      	beq.n	8009558 <HAL_DMA_IRQHandler+0x194>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a24      	ldr	r2, [pc, #144]	; (8009594 <HAL_DMA_IRQHandler+0x1d0>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d027      	beq.n	8009558 <HAL_DMA_IRQHandler+0x194>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a22      	ldr	r2, [pc, #136]	; (8009598 <HAL_DMA_IRQHandler+0x1d4>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d022      	beq.n	8009558 <HAL_DMA_IRQHandler+0x194>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a21      	ldr	r2, [pc, #132]	; (800959c <HAL_DMA_IRQHandler+0x1d8>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d01d      	beq.n	8009558 <HAL_DMA_IRQHandler+0x194>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a1f      	ldr	r2, [pc, #124]	; (80095a0 <HAL_DMA_IRQHandler+0x1dc>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d018      	beq.n	8009558 <HAL_DMA_IRQHandler+0x194>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a1e      	ldr	r2, [pc, #120]	; (80095a4 <HAL_DMA_IRQHandler+0x1e0>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d013      	beq.n	8009558 <HAL_DMA_IRQHandler+0x194>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a1c      	ldr	r2, [pc, #112]	; (80095a8 <HAL_DMA_IRQHandler+0x1e4>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d00e      	beq.n	8009558 <HAL_DMA_IRQHandler+0x194>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a1b      	ldr	r2, [pc, #108]	; (80095ac <HAL_DMA_IRQHandler+0x1e8>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d009      	beq.n	8009558 <HAL_DMA_IRQHandler+0x194>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a19      	ldr	r2, [pc, #100]	; (80095b0 <HAL_DMA_IRQHandler+0x1ec>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d004      	beq.n	8009558 <HAL_DMA_IRQHandler+0x194>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a18      	ldr	r2, [pc, #96]	; (80095b4 <HAL_DMA_IRQHandler+0x1f0>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d12f      	bne.n	80095b8 <HAL_DMA_IRQHandler+0x1f4>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 0304 	and.w	r3, r3, #4
 8009562:	2b00      	cmp	r3, #0
 8009564:	bf14      	ite	ne
 8009566:	2301      	movne	r3, #1
 8009568:	2300      	moveq	r3, #0
 800956a:	b2db      	uxtb	r3, r3
 800956c:	e02e      	b.n	80095cc <HAL_DMA_IRQHandler+0x208>
 800956e:	bf00      	nop
 8009570:	240000c0 	.word	0x240000c0
 8009574:	1b4e81b5 	.word	0x1b4e81b5
 8009578:	40020010 	.word	0x40020010
 800957c:	40020028 	.word	0x40020028
 8009580:	40020040 	.word	0x40020040
 8009584:	40020058 	.word	0x40020058
 8009588:	40020070 	.word	0x40020070
 800958c:	40020088 	.word	0x40020088
 8009590:	400200a0 	.word	0x400200a0
 8009594:	400200b8 	.word	0x400200b8
 8009598:	40020410 	.word	0x40020410
 800959c:	40020428 	.word	0x40020428
 80095a0:	40020440 	.word	0x40020440
 80095a4:	40020458 	.word	0x40020458
 80095a8:	40020470 	.word	0x40020470
 80095ac:	40020488 	.word	0x40020488
 80095b0:	400204a0 	.word	0x400204a0
 80095b4:	400204b8 	.word	0x400204b8
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f003 0308 	and.w	r3, r3, #8
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	bf14      	ite	ne
 80095c6:	2301      	movne	r3, #1
 80095c8:	2300      	moveq	r3, #0
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d015      	beq.n	80095fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f022 0204 	bic.w	r2, r2, #4
 80095de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095e4:	f003 031f 	and.w	r3, r3, #31
 80095e8:	2208      	movs	r2, #8
 80095ea:	409a      	lsls	r2, r3
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f4:	f043 0201 	orr.w	r2, r3, #1
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009600:	f003 031f 	and.w	r3, r3, #31
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	fa22 f303 	lsr.w	r3, r2, r3
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d06e      	beq.n	80096f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a69      	ldr	r2, [pc, #420]	; (80097bc <HAL_DMA_IRQHandler+0x3f8>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d04a      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x2ee>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a67      	ldr	r2, [pc, #412]	; (80097c0 <HAL_DMA_IRQHandler+0x3fc>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d045      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x2ee>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a66      	ldr	r2, [pc, #408]	; (80097c4 <HAL_DMA_IRQHandler+0x400>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d040      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x2ee>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a64      	ldr	r2, [pc, #400]	; (80097c8 <HAL_DMA_IRQHandler+0x404>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d03b      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x2ee>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a63      	ldr	r2, [pc, #396]	; (80097cc <HAL_DMA_IRQHandler+0x408>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d036      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x2ee>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a61      	ldr	r2, [pc, #388]	; (80097d0 <HAL_DMA_IRQHandler+0x40c>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d031      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x2ee>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a60      	ldr	r2, [pc, #384]	; (80097d4 <HAL_DMA_IRQHandler+0x410>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d02c      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x2ee>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a5e      	ldr	r2, [pc, #376]	; (80097d8 <HAL_DMA_IRQHandler+0x414>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d027      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x2ee>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a5d      	ldr	r2, [pc, #372]	; (80097dc <HAL_DMA_IRQHandler+0x418>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d022      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x2ee>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a5b      	ldr	r2, [pc, #364]	; (80097e0 <HAL_DMA_IRQHandler+0x41c>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d01d      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x2ee>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a5a      	ldr	r2, [pc, #360]	; (80097e4 <HAL_DMA_IRQHandler+0x420>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d018      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x2ee>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a58      	ldr	r2, [pc, #352]	; (80097e8 <HAL_DMA_IRQHandler+0x424>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d013      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x2ee>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a57      	ldr	r2, [pc, #348]	; (80097ec <HAL_DMA_IRQHandler+0x428>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d00e      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x2ee>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a55      	ldr	r2, [pc, #340]	; (80097f0 <HAL_DMA_IRQHandler+0x42c>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d009      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x2ee>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a54      	ldr	r2, [pc, #336]	; (80097f4 <HAL_DMA_IRQHandler+0x430>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d004      	beq.n	80096b2 <HAL_DMA_IRQHandler+0x2ee>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a52      	ldr	r2, [pc, #328]	; (80097f8 <HAL_DMA_IRQHandler+0x434>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d10a      	bne.n	80096c8 <HAL_DMA_IRQHandler+0x304>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096bc:	2b00      	cmp	r3, #0
 80096be:	bf14      	ite	ne
 80096c0:	2301      	movne	r3, #1
 80096c2:	2300      	moveq	r3, #0
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	e003      	b.n	80096d0 <HAL_DMA_IRQHandler+0x30c>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2300      	movs	r3, #0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00d      	beq.n	80096f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096d8:	f003 031f 	and.w	r3, r3, #31
 80096dc:	2201      	movs	r2, #1
 80096de:	409a      	lsls	r2, r3
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096e8:	f043 0202 	orr.w	r2, r3, #2
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096f4:	f003 031f 	and.w	r3, r3, #31
 80096f8:	2204      	movs	r2, #4
 80096fa:	409a      	lsls	r2, r3
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	4013      	ands	r3, r2
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 808f 	beq.w	8009824 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a2c      	ldr	r2, [pc, #176]	; (80097bc <HAL_DMA_IRQHandler+0x3f8>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d04a      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x3e2>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a2a      	ldr	r2, [pc, #168]	; (80097c0 <HAL_DMA_IRQHandler+0x3fc>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d045      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x3e2>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a29      	ldr	r2, [pc, #164]	; (80097c4 <HAL_DMA_IRQHandler+0x400>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d040      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x3e2>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a27      	ldr	r2, [pc, #156]	; (80097c8 <HAL_DMA_IRQHandler+0x404>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d03b      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x3e2>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a26      	ldr	r2, [pc, #152]	; (80097cc <HAL_DMA_IRQHandler+0x408>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d036      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x3e2>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a24      	ldr	r2, [pc, #144]	; (80097d0 <HAL_DMA_IRQHandler+0x40c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d031      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x3e2>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a23      	ldr	r2, [pc, #140]	; (80097d4 <HAL_DMA_IRQHandler+0x410>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d02c      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x3e2>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a21      	ldr	r2, [pc, #132]	; (80097d8 <HAL_DMA_IRQHandler+0x414>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d027      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x3e2>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a20      	ldr	r2, [pc, #128]	; (80097dc <HAL_DMA_IRQHandler+0x418>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d022      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x3e2>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a1e      	ldr	r2, [pc, #120]	; (80097e0 <HAL_DMA_IRQHandler+0x41c>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d01d      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x3e2>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a1d      	ldr	r2, [pc, #116]	; (80097e4 <HAL_DMA_IRQHandler+0x420>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d018      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x3e2>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a1b      	ldr	r2, [pc, #108]	; (80097e8 <HAL_DMA_IRQHandler+0x424>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d013      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x3e2>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a1a      	ldr	r2, [pc, #104]	; (80097ec <HAL_DMA_IRQHandler+0x428>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d00e      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x3e2>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a18      	ldr	r2, [pc, #96]	; (80097f0 <HAL_DMA_IRQHandler+0x42c>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d009      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x3e2>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a17      	ldr	r2, [pc, #92]	; (80097f4 <HAL_DMA_IRQHandler+0x430>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d004      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x3e2>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a15      	ldr	r2, [pc, #84]	; (80097f8 <HAL_DMA_IRQHandler+0x434>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d12a      	bne.n	80097fc <HAL_DMA_IRQHandler+0x438>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 0302 	and.w	r3, r3, #2
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	bf14      	ite	ne
 80097b4:	2301      	movne	r3, #1
 80097b6:	2300      	moveq	r3, #0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	e023      	b.n	8009804 <HAL_DMA_IRQHandler+0x440>
 80097bc:	40020010 	.word	0x40020010
 80097c0:	40020028 	.word	0x40020028
 80097c4:	40020040 	.word	0x40020040
 80097c8:	40020058 	.word	0x40020058
 80097cc:	40020070 	.word	0x40020070
 80097d0:	40020088 	.word	0x40020088
 80097d4:	400200a0 	.word	0x400200a0
 80097d8:	400200b8 	.word	0x400200b8
 80097dc:	40020410 	.word	0x40020410
 80097e0:	40020428 	.word	0x40020428
 80097e4:	40020440 	.word	0x40020440
 80097e8:	40020458 	.word	0x40020458
 80097ec:	40020470 	.word	0x40020470
 80097f0:	40020488 	.word	0x40020488
 80097f4:	400204a0 	.word	0x400204a0
 80097f8:	400204b8 	.word	0x400204b8
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2300      	movs	r3, #0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00d      	beq.n	8009824 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800980c:	f003 031f 	and.w	r3, r3, #31
 8009810:	2204      	movs	r2, #4
 8009812:	409a      	lsls	r2, r3
 8009814:	6a3b      	ldr	r3, [r7, #32]
 8009816:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800981c:	f043 0204 	orr.w	r2, r3, #4
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009828:	f003 031f 	and.w	r3, r3, #31
 800982c:	2210      	movs	r2, #16
 800982e:	409a      	lsls	r2, r3
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	4013      	ands	r3, r2
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 80a6 	beq.w	8009986 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a85      	ldr	r2, [pc, #532]	; (8009a54 <HAL_DMA_IRQHandler+0x690>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d04a      	beq.n	80098da <HAL_DMA_IRQHandler+0x516>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a83      	ldr	r2, [pc, #524]	; (8009a58 <HAL_DMA_IRQHandler+0x694>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d045      	beq.n	80098da <HAL_DMA_IRQHandler+0x516>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a82      	ldr	r2, [pc, #520]	; (8009a5c <HAL_DMA_IRQHandler+0x698>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d040      	beq.n	80098da <HAL_DMA_IRQHandler+0x516>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a80      	ldr	r2, [pc, #512]	; (8009a60 <HAL_DMA_IRQHandler+0x69c>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d03b      	beq.n	80098da <HAL_DMA_IRQHandler+0x516>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a7f      	ldr	r2, [pc, #508]	; (8009a64 <HAL_DMA_IRQHandler+0x6a0>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d036      	beq.n	80098da <HAL_DMA_IRQHandler+0x516>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a7d      	ldr	r2, [pc, #500]	; (8009a68 <HAL_DMA_IRQHandler+0x6a4>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d031      	beq.n	80098da <HAL_DMA_IRQHandler+0x516>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a7c      	ldr	r2, [pc, #496]	; (8009a6c <HAL_DMA_IRQHandler+0x6a8>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d02c      	beq.n	80098da <HAL_DMA_IRQHandler+0x516>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a7a      	ldr	r2, [pc, #488]	; (8009a70 <HAL_DMA_IRQHandler+0x6ac>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d027      	beq.n	80098da <HAL_DMA_IRQHandler+0x516>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a79      	ldr	r2, [pc, #484]	; (8009a74 <HAL_DMA_IRQHandler+0x6b0>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d022      	beq.n	80098da <HAL_DMA_IRQHandler+0x516>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a77      	ldr	r2, [pc, #476]	; (8009a78 <HAL_DMA_IRQHandler+0x6b4>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d01d      	beq.n	80098da <HAL_DMA_IRQHandler+0x516>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a76      	ldr	r2, [pc, #472]	; (8009a7c <HAL_DMA_IRQHandler+0x6b8>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d018      	beq.n	80098da <HAL_DMA_IRQHandler+0x516>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a74      	ldr	r2, [pc, #464]	; (8009a80 <HAL_DMA_IRQHandler+0x6bc>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d013      	beq.n	80098da <HAL_DMA_IRQHandler+0x516>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a73      	ldr	r2, [pc, #460]	; (8009a84 <HAL_DMA_IRQHandler+0x6c0>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d00e      	beq.n	80098da <HAL_DMA_IRQHandler+0x516>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a71      	ldr	r2, [pc, #452]	; (8009a88 <HAL_DMA_IRQHandler+0x6c4>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d009      	beq.n	80098da <HAL_DMA_IRQHandler+0x516>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a70      	ldr	r2, [pc, #448]	; (8009a8c <HAL_DMA_IRQHandler+0x6c8>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d004      	beq.n	80098da <HAL_DMA_IRQHandler+0x516>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a6e      	ldr	r2, [pc, #440]	; (8009a90 <HAL_DMA_IRQHandler+0x6cc>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d10a      	bne.n	80098f0 <HAL_DMA_IRQHandler+0x52c>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0308 	and.w	r3, r3, #8
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	bf14      	ite	ne
 80098e8:	2301      	movne	r3, #1
 80098ea:	2300      	moveq	r3, #0
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	e009      	b.n	8009904 <HAL_DMA_IRQHandler+0x540>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 0304 	and.w	r3, r3, #4
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	bf14      	ite	ne
 80098fe:	2301      	movne	r3, #1
 8009900:	2300      	moveq	r3, #0
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2b00      	cmp	r3, #0
 8009906:	d03e      	beq.n	8009986 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800990c:	f003 031f 	and.w	r3, r3, #31
 8009910:	2210      	movs	r2, #16
 8009912:	409a      	lsls	r2, r3
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d018      	beq.n	8009958 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d108      	bne.n	8009946 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009938:	2b00      	cmp	r3, #0
 800993a:	d024      	beq.n	8009986 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	4798      	blx	r3
 8009944:	e01f      	b.n	8009986 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800994a:	2b00      	cmp	r3, #0
 800994c:	d01b      	beq.n	8009986 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	4798      	blx	r3
 8009956:	e016      	b.n	8009986 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009962:	2b00      	cmp	r3, #0
 8009964:	d107      	bne.n	8009976 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f022 0208 	bic.w	r2, r2, #8
 8009974:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997a:	2b00      	cmp	r3, #0
 800997c:	d003      	beq.n	8009986 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800998a:	f003 031f 	and.w	r3, r3, #31
 800998e:	2220      	movs	r2, #32
 8009990:	409a      	lsls	r2, r3
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	4013      	ands	r3, r2
 8009996:	2b00      	cmp	r3, #0
 8009998:	f000 8110 	beq.w	8009bbc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a2c      	ldr	r2, [pc, #176]	; (8009a54 <HAL_DMA_IRQHandler+0x690>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d04a      	beq.n	8009a3c <HAL_DMA_IRQHandler+0x678>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a2b      	ldr	r2, [pc, #172]	; (8009a58 <HAL_DMA_IRQHandler+0x694>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d045      	beq.n	8009a3c <HAL_DMA_IRQHandler+0x678>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a29      	ldr	r2, [pc, #164]	; (8009a5c <HAL_DMA_IRQHandler+0x698>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d040      	beq.n	8009a3c <HAL_DMA_IRQHandler+0x678>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a28      	ldr	r2, [pc, #160]	; (8009a60 <HAL_DMA_IRQHandler+0x69c>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d03b      	beq.n	8009a3c <HAL_DMA_IRQHandler+0x678>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a26      	ldr	r2, [pc, #152]	; (8009a64 <HAL_DMA_IRQHandler+0x6a0>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d036      	beq.n	8009a3c <HAL_DMA_IRQHandler+0x678>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a25      	ldr	r2, [pc, #148]	; (8009a68 <HAL_DMA_IRQHandler+0x6a4>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d031      	beq.n	8009a3c <HAL_DMA_IRQHandler+0x678>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a23      	ldr	r2, [pc, #140]	; (8009a6c <HAL_DMA_IRQHandler+0x6a8>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d02c      	beq.n	8009a3c <HAL_DMA_IRQHandler+0x678>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a22      	ldr	r2, [pc, #136]	; (8009a70 <HAL_DMA_IRQHandler+0x6ac>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d027      	beq.n	8009a3c <HAL_DMA_IRQHandler+0x678>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a20      	ldr	r2, [pc, #128]	; (8009a74 <HAL_DMA_IRQHandler+0x6b0>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d022      	beq.n	8009a3c <HAL_DMA_IRQHandler+0x678>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a1f      	ldr	r2, [pc, #124]	; (8009a78 <HAL_DMA_IRQHandler+0x6b4>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d01d      	beq.n	8009a3c <HAL_DMA_IRQHandler+0x678>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a1d      	ldr	r2, [pc, #116]	; (8009a7c <HAL_DMA_IRQHandler+0x6b8>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d018      	beq.n	8009a3c <HAL_DMA_IRQHandler+0x678>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a1c      	ldr	r2, [pc, #112]	; (8009a80 <HAL_DMA_IRQHandler+0x6bc>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d013      	beq.n	8009a3c <HAL_DMA_IRQHandler+0x678>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a1a      	ldr	r2, [pc, #104]	; (8009a84 <HAL_DMA_IRQHandler+0x6c0>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d00e      	beq.n	8009a3c <HAL_DMA_IRQHandler+0x678>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a19      	ldr	r2, [pc, #100]	; (8009a88 <HAL_DMA_IRQHandler+0x6c4>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d009      	beq.n	8009a3c <HAL_DMA_IRQHandler+0x678>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a17      	ldr	r2, [pc, #92]	; (8009a8c <HAL_DMA_IRQHandler+0x6c8>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d004      	beq.n	8009a3c <HAL_DMA_IRQHandler+0x678>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a16      	ldr	r2, [pc, #88]	; (8009a90 <HAL_DMA_IRQHandler+0x6cc>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d12b      	bne.n	8009a94 <HAL_DMA_IRQHandler+0x6d0>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 0310 	and.w	r3, r3, #16
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	bf14      	ite	ne
 8009a4a:	2301      	movne	r3, #1
 8009a4c:	2300      	moveq	r3, #0
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	e02a      	b.n	8009aa8 <HAL_DMA_IRQHandler+0x6e4>
 8009a52:	bf00      	nop
 8009a54:	40020010 	.word	0x40020010
 8009a58:	40020028 	.word	0x40020028
 8009a5c:	40020040 	.word	0x40020040
 8009a60:	40020058 	.word	0x40020058
 8009a64:	40020070 	.word	0x40020070
 8009a68:	40020088 	.word	0x40020088
 8009a6c:	400200a0 	.word	0x400200a0
 8009a70:	400200b8 	.word	0x400200b8
 8009a74:	40020410 	.word	0x40020410
 8009a78:	40020428 	.word	0x40020428
 8009a7c:	40020440 	.word	0x40020440
 8009a80:	40020458 	.word	0x40020458
 8009a84:	40020470 	.word	0x40020470
 8009a88:	40020488 	.word	0x40020488
 8009a8c:	400204a0 	.word	0x400204a0
 8009a90:	400204b8 	.word	0x400204b8
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 0302 	and.w	r3, r3, #2
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	bf14      	ite	ne
 8009aa2:	2301      	movne	r3, #1
 8009aa4:	2300      	moveq	r3, #0
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f000 8087 	beq.w	8009bbc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ab2:	f003 031f 	and.w	r3, r3, #31
 8009ab6:	2220      	movs	r2, #32
 8009ab8:	409a      	lsls	r2, r3
 8009aba:	6a3b      	ldr	r3, [r7, #32]
 8009abc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b04      	cmp	r3, #4
 8009ac8:	d139      	bne.n	8009b3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f022 0216 	bic.w	r2, r2, #22
 8009ad8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	695a      	ldr	r2, [r3, #20]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ae8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d103      	bne.n	8009afa <HAL_DMA_IRQHandler+0x736>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d007      	beq.n	8009b0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 0208 	bic.w	r2, r2, #8
 8009b08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b0e:	f003 031f 	and.w	r3, r3, #31
 8009b12:	223f      	movs	r2, #63	; 0x3f
 8009b14:	409a      	lsls	r2, r3
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 834a 	beq.w	800a1c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	4798      	blx	r3
          }
          return;
 8009b3c:	e344      	b.n	800a1c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d018      	beq.n	8009b7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d108      	bne.n	8009b6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d02c      	beq.n	8009bbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	4798      	blx	r3
 8009b6a:	e027      	b.n	8009bbc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d023      	beq.n	8009bbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	4798      	blx	r3
 8009b7c:	e01e      	b.n	8009bbc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10f      	bne.n	8009bac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f022 0210 	bic.w	r2, r2, #16
 8009b9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d003      	beq.n	8009bbc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 8306 	beq.w	800a1d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bca:	f003 0301 	and.w	r3, r3, #1
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 8088 	beq.w	8009ce4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2204      	movs	r2, #4
 8009bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a7a      	ldr	r2, [pc, #488]	; (8009dcc <HAL_DMA_IRQHandler+0xa08>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d04a      	beq.n	8009c7c <HAL_DMA_IRQHandler+0x8b8>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a79      	ldr	r2, [pc, #484]	; (8009dd0 <HAL_DMA_IRQHandler+0xa0c>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d045      	beq.n	8009c7c <HAL_DMA_IRQHandler+0x8b8>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a77      	ldr	r2, [pc, #476]	; (8009dd4 <HAL_DMA_IRQHandler+0xa10>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d040      	beq.n	8009c7c <HAL_DMA_IRQHandler+0x8b8>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a76      	ldr	r2, [pc, #472]	; (8009dd8 <HAL_DMA_IRQHandler+0xa14>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d03b      	beq.n	8009c7c <HAL_DMA_IRQHandler+0x8b8>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a74      	ldr	r2, [pc, #464]	; (8009ddc <HAL_DMA_IRQHandler+0xa18>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d036      	beq.n	8009c7c <HAL_DMA_IRQHandler+0x8b8>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a73      	ldr	r2, [pc, #460]	; (8009de0 <HAL_DMA_IRQHandler+0xa1c>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d031      	beq.n	8009c7c <HAL_DMA_IRQHandler+0x8b8>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a71      	ldr	r2, [pc, #452]	; (8009de4 <HAL_DMA_IRQHandler+0xa20>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d02c      	beq.n	8009c7c <HAL_DMA_IRQHandler+0x8b8>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a70      	ldr	r2, [pc, #448]	; (8009de8 <HAL_DMA_IRQHandler+0xa24>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d027      	beq.n	8009c7c <HAL_DMA_IRQHandler+0x8b8>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a6e      	ldr	r2, [pc, #440]	; (8009dec <HAL_DMA_IRQHandler+0xa28>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d022      	beq.n	8009c7c <HAL_DMA_IRQHandler+0x8b8>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a6d      	ldr	r2, [pc, #436]	; (8009df0 <HAL_DMA_IRQHandler+0xa2c>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d01d      	beq.n	8009c7c <HAL_DMA_IRQHandler+0x8b8>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a6b      	ldr	r2, [pc, #428]	; (8009df4 <HAL_DMA_IRQHandler+0xa30>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d018      	beq.n	8009c7c <HAL_DMA_IRQHandler+0x8b8>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a6a      	ldr	r2, [pc, #424]	; (8009df8 <HAL_DMA_IRQHandler+0xa34>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d013      	beq.n	8009c7c <HAL_DMA_IRQHandler+0x8b8>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a68      	ldr	r2, [pc, #416]	; (8009dfc <HAL_DMA_IRQHandler+0xa38>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d00e      	beq.n	8009c7c <HAL_DMA_IRQHandler+0x8b8>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a67      	ldr	r2, [pc, #412]	; (8009e00 <HAL_DMA_IRQHandler+0xa3c>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d009      	beq.n	8009c7c <HAL_DMA_IRQHandler+0x8b8>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a65      	ldr	r2, [pc, #404]	; (8009e04 <HAL_DMA_IRQHandler+0xa40>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d004      	beq.n	8009c7c <HAL_DMA_IRQHandler+0x8b8>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a64      	ldr	r2, [pc, #400]	; (8009e08 <HAL_DMA_IRQHandler+0xa44>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d108      	bne.n	8009c8e <HAL_DMA_IRQHandler+0x8ca>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f022 0201 	bic.w	r2, r2, #1
 8009c8a:	601a      	str	r2, [r3, #0]
 8009c8c:	e007      	b.n	8009c9e <HAL_DMA_IRQHandler+0x8da>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f022 0201 	bic.w	r2, r2, #1
 8009c9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	60fb      	str	r3, [r7, #12]
 8009ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d307      	bcc.n	8009cba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1f2      	bne.n	8009c9e <HAL_DMA_IRQHandler+0x8da>
 8009cb8:	e000      	b.n	8009cbc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009cba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d004      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2203      	movs	r2, #3
 8009cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009cd2:	e003      	b.n	8009cdc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 8272 	beq.w	800a1d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	4798      	blx	r3
 8009cf6:	e26c      	b.n	800a1d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a43      	ldr	r2, [pc, #268]	; (8009e0c <HAL_DMA_IRQHandler+0xa48>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d022      	beq.n	8009d48 <HAL_DMA_IRQHandler+0x984>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a42      	ldr	r2, [pc, #264]	; (8009e10 <HAL_DMA_IRQHandler+0xa4c>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d01d      	beq.n	8009d48 <HAL_DMA_IRQHandler+0x984>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a40      	ldr	r2, [pc, #256]	; (8009e14 <HAL_DMA_IRQHandler+0xa50>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d018      	beq.n	8009d48 <HAL_DMA_IRQHandler+0x984>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a3f      	ldr	r2, [pc, #252]	; (8009e18 <HAL_DMA_IRQHandler+0xa54>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d013      	beq.n	8009d48 <HAL_DMA_IRQHandler+0x984>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a3d      	ldr	r2, [pc, #244]	; (8009e1c <HAL_DMA_IRQHandler+0xa58>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d00e      	beq.n	8009d48 <HAL_DMA_IRQHandler+0x984>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a3c      	ldr	r2, [pc, #240]	; (8009e20 <HAL_DMA_IRQHandler+0xa5c>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d009      	beq.n	8009d48 <HAL_DMA_IRQHandler+0x984>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a3a      	ldr	r2, [pc, #232]	; (8009e24 <HAL_DMA_IRQHandler+0xa60>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d004      	beq.n	8009d48 <HAL_DMA_IRQHandler+0x984>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a39      	ldr	r2, [pc, #228]	; (8009e28 <HAL_DMA_IRQHandler+0xa64>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d101      	bne.n	8009d4c <HAL_DMA_IRQHandler+0x988>
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e000      	b.n	8009d4e <HAL_DMA_IRQHandler+0x98a>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f000 823f 	beq.w	800a1d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d60:	f003 031f 	and.w	r3, r3, #31
 8009d64:	2204      	movs	r2, #4
 8009d66:	409a      	lsls	r2, r3
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 80cd 	beq.w	8009f0c <HAL_DMA_IRQHandler+0xb48>
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	f003 0304 	and.w	r3, r3, #4
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 80c7 	beq.w	8009f0c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d82:	f003 031f 	and.w	r3, r3, #31
 8009d86:	2204      	movs	r2, #4
 8009d88:	409a      	lsls	r2, r3
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d049      	beq.n	8009e2c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d109      	bne.n	8009db6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 8210 	beq.w	800a1cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009db4:	e20a      	b.n	800a1cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f000 8206 	beq.w	800a1cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009dc8:	e200      	b.n	800a1cc <HAL_DMA_IRQHandler+0xe08>
 8009dca:	bf00      	nop
 8009dcc:	40020010 	.word	0x40020010
 8009dd0:	40020028 	.word	0x40020028
 8009dd4:	40020040 	.word	0x40020040
 8009dd8:	40020058 	.word	0x40020058
 8009ddc:	40020070 	.word	0x40020070
 8009de0:	40020088 	.word	0x40020088
 8009de4:	400200a0 	.word	0x400200a0
 8009de8:	400200b8 	.word	0x400200b8
 8009dec:	40020410 	.word	0x40020410
 8009df0:	40020428 	.word	0x40020428
 8009df4:	40020440 	.word	0x40020440
 8009df8:	40020458 	.word	0x40020458
 8009dfc:	40020470 	.word	0x40020470
 8009e00:	40020488 	.word	0x40020488
 8009e04:	400204a0 	.word	0x400204a0
 8009e08:	400204b8 	.word	0x400204b8
 8009e0c:	58025408 	.word	0x58025408
 8009e10:	5802541c 	.word	0x5802541c
 8009e14:	58025430 	.word	0x58025430
 8009e18:	58025444 	.word	0x58025444
 8009e1c:	58025458 	.word	0x58025458
 8009e20:	5802546c 	.word	0x5802546c
 8009e24:	58025480 	.word	0x58025480
 8009e28:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	f003 0320 	and.w	r3, r3, #32
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d160      	bne.n	8009ef8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a7f      	ldr	r2, [pc, #508]	; (800a038 <HAL_DMA_IRQHandler+0xc74>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d04a      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xb12>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a7d      	ldr	r2, [pc, #500]	; (800a03c <HAL_DMA_IRQHandler+0xc78>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d045      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xb12>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a7c      	ldr	r2, [pc, #496]	; (800a040 <HAL_DMA_IRQHandler+0xc7c>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d040      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xb12>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a7a      	ldr	r2, [pc, #488]	; (800a044 <HAL_DMA_IRQHandler+0xc80>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d03b      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xb12>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a79      	ldr	r2, [pc, #484]	; (800a048 <HAL_DMA_IRQHandler+0xc84>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d036      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xb12>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a77      	ldr	r2, [pc, #476]	; (800a04c <HAL_DMA_IRQHandler+0xc88>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d031      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xb12>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a76      	ldr	r2, [pc, #472]	; (800a050 <HAL_DMA_IRQHandler+0xc8c>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d02c      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xb12>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a74      	ldr	r2, [pc, #464]	; (800a054 <HAL_DMA_IRQHandler+0xc90>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d027      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xb12>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a73      	ldr	r2, [pc, #460]	; (800a058 <HAL_DMA_IRQHandler+0xc94>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d022      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xb12>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a71      	ldr	r2, [pc, #452]	; (800a05c <HAL_DMA_IRQHandler+0xc98>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d01d      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xb12>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a70      	ldr	r2, [pc, #448]	; (800a060 <HAL_DMA_IRQHandler+0xc9c>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d018      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xb12>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a6e      	ldr	r2, [pc, #440]	; (800a064 <HAL_DMA_IRQHandler+0xca0>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d013      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xb12>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a6d      	ldr	r2, [pc, #436]	; (800a068 <HAL_DMA_IRQHandler+0xca4>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d00e      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xb12>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a6b      	ldr	r2, [pc, #428]	; (800a06c <HAL_DMA_IRQHandler+0xca8>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d009      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xb12>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a6a      	ldr	r2, [pc, #424]	; (800a070 <HAL_DMA_IRQHandler+0xcac>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d004      	beq.n	8009ed6 <HAL_DMA_IRQHandler+0xb12>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a68      	ldr	r2, [pc, #416]	; (800a074 <HAL_DMA_IRQHandler+0xcb0>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d108      	bne.n	8009ee8 <HAL_DMA_IRQHandler+0xb24>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f022 0208 	bic.w	r2, r2, #8
 8009ee4:	601a      	str	r2, [r3, #0]
 8009ee6:	e007      	b.n	8009ef8 <HAL_DMA_IRQHandler+0xb34>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f022 0204 	bic.w	r2, r2, #4
 8009ef6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f000 8165 	beq.w	800a1cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f0a:	e15f      	b.n	800a1cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f10:	f003 031f 	and.w	r3, r3, #31
 8009f14:	2202      	movs	r2, #2
 8009f16:	409a      	lsls	r2, r3
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 80c5 	beq.w	800a0ac <HAL_DMA_IRQHandler+0xce8>
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	f003 0302 	and.w	r3, r3, #2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f000 80bf 	beq.w	800a0ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f32:	f003 031f 	and.w	r3, r3, #31
 8009f36:	2202      	movs	r2, #2
 8009f38:	409a      	lsls	r2, r3
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d018      	beq.n	8009f7a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d109      	bne.n	8009f66 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f000 813a 	beq.w	800a1d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f64:	e134      	b.n	800a1d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 8130 	beq.w	800a1d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f78:	e12a      	b.n	800a1d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	f003 0320 	and.w	r3, r3, #32
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f040 8089 	bne.w	800a098 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a2b      	ldr	r2, [pc, #172]	; (800a038 <HAL_DMA_IRQHandler+0xc74>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d04a      	beq.n	800a026 <HAL_DMA_IRQHandler+0xc62>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a29      	ldr	r2, [pc, #164]	; (800a03c <HAL_DMA_IRQHandler+0xc78>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d045      	beq.n	800a026 <HAL_DMA_IRQHandler+0xc62>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a28      	ldr	r2, [pc, #160]	; (800a040 <HAL_DMA_IRQHandler+0xc7c>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d040      	beq.n	800a026 <HAL_DMA_IRQHandler+0xc62>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a26      	ldr	r2, [pc, #152]	; (800a044 <HAL_DMA_IRQHandler+0xc80>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d03b      	beq.n	800a026 <HAL_DMA_IRQHandler+0xc62>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a25      	ldr	r2, [pc, #148]	; (800a048 <HAL_DMA_IRQHandler+0xc84>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d036      	beq.n	800a026 <HAL_DMA_IRQHandler+0xc62>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a23      	ldr	r2, [pc, #140]	; (800a04c <HAL_DMA_IRQHandler+0xc88>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d031      	beq.n	800a026 <HAL_DMA_IRQHandler+0xc62>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a22      	ldr	r2, [pc, #136]	; (800a050 <HAL_DMA_IRQHandler+0xc8c>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d02c      	beq.n	800a026 <HAL_DMA_IRQHandler+0xc62>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a20      	ldr	r2, [pc, #128]	; (800a054 <HAL_DMA_IRQHandler+0xc90>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d027      	beq.n	800a026 <HAL_DMA_IRQHandler+0xc62>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a1f      	ldr	r2, [pc, #124]	; (800a058 <HAL_DMA_IRQHandler+0xc94>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d022      	beq.n	800a026 <HAL_DMA_IRQHandler+0xc62>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a1d      	ldr	r2, [pc, #116]	; (800a05c <HAL_DMA_IRQHandler+0xc98>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d01d      	beq.n	800a026 <HAL_DMA_IRQHandler+0xc62>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a1c      	ldr	r2, [pc, #112]	; (800a060 <HAL_DMA_IRQHandler+0xc9c>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d018      	beq.n	800a026 <HAL_DMA_IRQHandler+0xc62>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a1a      	ldr	r2, [pc, #104]	; (800a064 <HAL_DMA_IRQHandler+0xca0>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d013      	beq.n	800a026 <HAL_DMA_IRQHandler+0xc62>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a19      	ldr	r2, [pc, #100]	; (800a068 <HAL_DMA_IRQHandler+0xca4>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d00e      	beq.n	800a026 <HAL_DMA_IRQHandler+0xc62>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a17      	ldr	r2, [pc, #92]	; (800a06c <HAL_DMA_IRQHandler+0xca8>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d009      	beq.n	800a026 <HAL_DMA_IRQHandler+0xc62>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a16      	ldr	r2, [pc, #88]	; (800a070 <HAL_DMA_IRQHandler+0xcac>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d004      	beq.n	800a026 <HAL_DMA_IRQHandler+0xc62>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a14      	ldr	r2, [pc, #80]	; (800a074 <HAL_DMA_IRQHandler+0xcb0>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d128      	bne.n	800a078 <HAL_DMA_IRQHandler+0xcb4>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f022 0214 	bic.w	r2, r2, #20
 800a034:	601a      	str	r2, [r3, #0]
 800a036:	e027      	b.n	800a088 <HAL_DMA_IRQHandler+0xcc4>
 800a038:	40020010 	.word	0x40020010
 800a03c:	40020028 	.word	0x40020028
 800a040:	40020040 	.word	0x40020040
 800a044:	40020058 	.word	0x40020058
 800a048:	40020070 	.word	0x40020070
 800a04c:	40020088 	.word	0x40020088
 800a050:	400200a0 	.word	0x400200a0
 800a054:	400200b8 	.word	0x400200b8
 800a058:	40020410 	.word	0x40020410
 800a05c:	40020428 	.word	0x40020428
 800a060:	40020440 	.word	0x40020440
 800a064:	40020458 	.word	0x40020458
 800a068:	40020470 	.word	0x40020470
 800a06c:	40020488 	.word	0x40020488
 800a070:	400204a0 	.word	0x400204a0
 800a074:	400204b8 	.word	0x400204b8
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f022 020a 	bic.w	r2, r2, #10
 800a086:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 8097 	beq.w	800a1d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a0aa:	e091      	b.n	800a1d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0b0:	f003 031f 	and.w	r3, r3, #31
 800a0b4:	2208      	movs	r2, #8
 800a0b6:	409a      	lsls	r2, r3
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f000 8088 	beq.w	800a1d2 <HAL_DMA_IRQHandler+0xe0e>
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	f003 0308 	and.w	r3, r3, #8
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 8082 	beq.w	800a1d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a41      	ldr	r2, [pc, #260]	; (800a1d8 <HAL_DMA_IRQHandler+0xe14>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d04a      	beq.n	800a16e <HAL_DMA_IRQHandler+0xdaa>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a3f      	ldr	r2, [pc, #252]	; (800a1dc <HAL_DMA_IRQHandler+0xe18>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d045      	beq.n	800a16e <HAL_DMA_IRQHandler+0xdaa>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a3e      	ldr	r2, [pc, #248]	; (800a1e0 <HAL_DMA_IRQHandler+0xe1c>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d040      	beq.n	800a16e <HAL_DMA_IRQHandler+0xdaa>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a3c      	ldr	r2, [pc, #240]	; (800a1e4 <HAL_DMA_IRQHandler+0xe20>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d03b      	beq.n	800a16e <HAL_DMA_IRQHandler+0xdaa>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a3b      	ldr	r2, [pc, #236]	; (800a1e8 <HAL_DMA_IRQHandler+0xe24>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d036      	beq.n	800a16e <HAL_DMA_IRQHandler+0xdaa>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a39      	ldr	r2, [pc, #228]	; (800a1ec <HAL_DMA_IRQHandler+0xe28>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d031      	beq.n	800a16e <HAL_DMA_IRQHandler+0xdaa>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a38      	ldr	r2, [pc, #224]	; (800a1f0 <HAL_DMA_IRQHandler+0xe2c>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d02c      	beq.n	800a16e <HAL_DMA_IRQHandler+0xdaa>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a36      	ldr	r2, [pc, #216]	; (800a1f4 <HAL_DMA_IRQHandler+0xe30>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d027      	beq.n	800a16e <HAL_DMA_IRQHandler+0xdaa>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a35      	ldr	r2, [pc, #212]	; (800a1f8 <HAL_DMA_IRQHandler+0xe34>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d022      	beq.n	800a16e <HAL_DMA_IRQHandler+0xdaa>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a33      	ldr	r2, [pc, #204]	; (800a1fc <HAL_DMA_IRQHandler+0xe38>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d01d      	beq.n	800a16e <HAL_DMA_IRQHandler+0xdaa>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a32      	ldr	r2, [pc, #200]	; (800a200 <HAL_DMA_IRQHandler+0xe3c>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d018      	beq.n	800a16e <HAL_DMA_IRQHandler+0xdaa>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a30      	ldr	r2, [pc, #192]	; (800a204 <HAL_DMA_IRQHandler+0xe40>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d013      	beq.n	800a16e <HAL_DMA_IRQHandler+0xdaa>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a2f      	ldr	r2, [pc, #188]	; (800a208 <HAL_DMA_IRQHandler+0xe44>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d00e      	beq.n	800a16e <HAL_DMA_IRQHandler+0xdaa>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a2d      	ldr	r2, [pc, #180]	; (800a20c <HAL_DMA_IRQHandler+0xe48>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d009      	beq.n	800a16e <HAL_DMA_IRQHandler+0xdaa>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a2c      	ldr	r2, [pc, #176]	; (800a210 <HAL_DMA_IRQHandler+0xe4c>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d004      	beq.n	800a16e <HAL_DMA_IRQHandler+0xdaa>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a2a      	ldr	r2, [pc, #168]	; (800a214 <HAL_DMA_IRQHandler+0xe50>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d108      	bne.n	800a180 <HAL_DMA_IRQHandler+0xdbc>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f022 021c 	bic.w	r2, r2, #28
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	e007      	b.n	800a190 <HAL_DMA_IRQHandler+0xdcc>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f022 020e 	bic.w	r2, r2, #14
 800a18e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a194:	f003 031f 	and.w	r3, r3, #31
 800a198:	2201      	movs	r2, #1
 800a19a:	409a      	lsls	r2, r3
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d009      	beq.n	800a1d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	4798      	blx	r3
 800a1c6:	e004      	b.n	800a1d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a1c8:	bf00      	nop
 800a1ca:	e002      	b.n	800a1d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a1cc:	bf00      	nop
 800a1ce:	e000      	b.n	800a1d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a1d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a1d2:	3728      	adds	r7, #40	; 0x28
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	40020010 	.word	0x40020010
 800a1dc:	40020028 	.word	0x40020028
 800a1e0:	40020040 	.word	0x40020040
 800a1e4:	40020058 	.word	0x40020058
 800a1e8:	40020070 	.word	0x40020070
 800a1ec:	40020088 	.word	0x40020088
 800a1f0:	400200a0 	.word	0x400200a0
 800a1f4:	400200b8 	.word	0x400200b8
 800a1f8:	40020410 	.word	0x40020410
 800a1fc:	40020428 	.word	0x40020428
 800a200:	40020440 	.word	0x40020440
 800a204:	40020458 	.word	0x40020458
 800a208:	40020470 	.word	0x40020470
 800a20c:	40020488 	.word	0x40020488
 800a210:	400204a0 	.word	0x400204a0
 800a214:	400204b8 	.word	0x400204b8

0800a218 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a226:	b2db      	uxtb	r3, r3
}
 800a228:	4618      	mov	r0, r3
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a240:	4618      	mov	r0, r3
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
 800a258:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a25e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a264:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a7f      	ldr	r2, [pc, #508]	; (800a468 <DMA_SetConfig+0x21c>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d072      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a7d      	ldr	r2, [pc, #500]	; (800a46c <DMA_SetConfig+0x220>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d06d      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a7c      	ldr	r2, [pc, #496]	; (800a470 <DMA_SetConfig+0x224>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d068      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a7a      	ldr	r2, [pc, #488]	; (800a474 <DMA_SetConfig+0x228>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d063      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a79      	ldr	r2, [pc, #484]	; (800a478 <DMA_SetConfig+0x22c>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d05e      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a77      	ldr	r2, [pc, #476]	; (800a47c <DMA_SetConfig+0x230>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d059      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a76      	ldr	r2, [pc, #472]	; (800a480 <DMA_SetConfig+0x234>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d054      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a74      	ldr	r2, [pc, #464]	; (800a484 <DMA_SetConfig+0x238>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d04f      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a73      	ldr	r2, [pc, #460]	; (800a488 <DMA_SetConfig+0x23c>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d04a      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a71      	ldr	r2, [pc, #452]	; (800a48c <DMA_SetConfig+0x240>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d045      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a70      	ldr	r2, [pc, #448]	; (800a490 <DMA_SetConfig+0x244>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d040      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a6e      	ldr	r2, [pc, #440]	; (800a494 <DMA_SetConfig+0x248>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d03b      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a6d      	ldr	r2, [pc, #436]	; (800a498 <DMA_SetConfig+0x24c>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d036      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a6b      	ldr	r2, [pc, #428]	; (800a49c <DMA_SetConfig+0x250>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d031      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a6a      	ldr	r2, [pc, #424]	; (800a4a0 <DMA_SetConfig+0x254>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d02c      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a68      	ldr	r2, [pc, #416]	; (800a4a4 <DMA_SetConfig+0x258>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d027      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a67      	ldr	r2, [pc, #412]	; (800a4a8 <DMA_SetConfig+0x25c>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d022      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a65      	ldr	r2, [pc, #404]	; (800a4ac <DMA_SetConfig+0x260>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d01d      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a64      	ldr	r2, [pc, #400]	; (800a4b0 <DMA_SetConfig+0x264>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d018      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a62      	ldr	r2, [pc, #392]	; (800a4b4 <DMA_SetConfig+0x268>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d013      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a61      	ldr	r2, [pc, #388]	; (800a4b8 <DMA_SetConfig+0x26c>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d00e      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a5f      	ldr	r2, [pc, #380]	; (800a4bc <DMA_SetConfig+0x270>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d009      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a5e      	ldr	r2, [pc, #376]	; (800a4c0 <DMA_SetConfig+0x274>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d004      	beq.n	800a356 <DMA_SetConfig+0x10a>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a5c      	ldr	r2, [pc, #368]	; (800a4c4 <DMA_SetConfig+0x278>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d101      	bne.n	800a35a <DMA_SetConfig+0x10e>
 800a356:	2301      	movs	r3, #1
 800a358:	e000      	b.n	800a35c <DMA_SetConfig+0x110>
 800a35a:	2300      	movs	r3, #0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00d      	beq.n	800a37c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a368:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d004      	beq.n	800a37c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a37a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a39      	ldr	r2, [pc, #228]	; (800a468 <DMA_SetConfig+0x21c>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d04a      	beq.n	800a41c <DMA_SetConfig+0x1d0>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a38      	ldr	r2, [pc, #224]	; (800a46c <DMA_SetConfig+0x220>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d045      	beq.n	800a41c <DMA_SetConfig+0x1d0>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a36      	ldr	r2, [pc, #216]	; (800a470 <DMA_SetConfig+0x224>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d040      	beq.n	800a41c <DMA_SetConfig+0x1d0>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a35      	ldr	r2, [pc, #212]	; (800a474 <DMA_SetConfig+0x228>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d03b      	beq.n	800a41c <DMA_SetConfig+0x1d0>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a33      	ldr	r2, [pc, #204]	; (800a478 <DMA_SetConfig+0x22c>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d036      	beq.n	800a41c <DMA_SetConfig+0x1d0>
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a32      	ldr	r2, [pc, #200]	; (800a47c <DMA_SetConfig+0x230>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d031      	beq.n	800a41c <DMA_SetConfig+0x1d0>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a30      	ldr	r2, [pc, #192]	; (800a480 <DMA_SetConfig+0x234>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d02c      	beq.n	800a41c <DMA_SetConfig+0x1d0>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a2f      	ldr	r2, [pc, #188]	; (800a484 <DMA_SetConfig+0x238>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d027      	beq.n	800a41c <DMA_SetConfig+0x1d0>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a2d      	ldr	r2, [pc, #180]	; (800a488 <DMA_SetConfig+0x23c>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d022      	beq.n	800a41c <DMA_SetConfig+0x1d0>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a2c      	ldr	r2, [pc, #176]	; (800a48c <DMA_SetConfig+0x240>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d01d      	beq.n	800a41c <DMA_SetConfig+0x1d0>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a2a      	ldr	r2, [pc, #168]	; (800a490 <DMA_SetConfig+0x244>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d018      	beq.n	800a41c <DMA_SetConfig+0x1d0>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a29      	ldr	r2, [pc, #164]	; (800a494 <DMA_SetConfig+0x248>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d013      	beq.n	800a41c <DMA_SetConfig+0x1d0>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a27      	ldr	r2, [pc, #156]	; (800a498 <DMA_SetConfig+0x24c>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d00e      	beq.n	800a41c <DMA_SetConfig+0x1d0>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a26      	ldr	r2, [pc, #152]	; (800a49c <DMA_SetConfig+0x250>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d009      	beq.n	800a41c <DMA_SetConfig+0x1d0>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a24      	ldr	r2, [pc, #144]	; (800a4a0 <DMA_SetConfig+0x254>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d004      	beq.n	800a41c <DMA_SetConfig+0x1d0>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a23      	ldr	r2, [pc, #140]	; (800a4a4 <DMA_SetConfig+0x258>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d101      	bne.n	800a420 <DMA_SetConfig+0x1d4>
 800a41c:	2301      	movs	r3, #1
 800a41e:	e000      	b.n	800a422 <DMA_SetConfig+0x1d6>
 800a420:	2300      	movs	r3, #0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d059      	beq.n	800a4da <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a42a:	f003 031f 	and.w	r3, r3, #31
 800a42e:	223f      	movs	r2, #63	; 0x3f
 800a430:	409a      	lsls	r2, r3
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a444:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	2b40      	cmp	r3, #64	; 0x40
 800a454:	d138      	bne.n	800a4c8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68ba      	ldr	r2, [r7, #8]
 800a464:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a466:	e086      	b.n	800a576 <DMA_SetConfig+0x32a>
 800a468:	40020010 	.word	0x40020010
 800a46c:	40020028 	.word	0x40020028
 800a470:	40020040 	.word	0x40020040
 800a474:	40020058 	.word	0x40020058
 800a478:	40020070 	.word	0x40020070
 800a47c:	40020088 	.word	0x40020088
 800a480:	400200a0 	.word	0x400200a0
 800a484:	400200b8 	.word	0x400200b8
 800a488:	40020410 	.word	0x40020410
 800a48c:	40020428 	.word	0x40020428
 800a490:	40020440 	.word	0x40020440
 800a494:	40020458 	.word	0x40020458
 800a498:	40020470 	.word	0x40020470
 800a49c:	40020488 	.word	0x40020488
 800a4a0:	400204a0 	.word	0x400204a0
 800a4a4:	400204b8 	.word	0x400204b8
 800a4a8:	58025408 	.word	0x58025408
 800a4ac:	5802541c 	.word	0x5802541c
 800a4b0:	58025430 	.word	0x58025430
 800a4b4:	58025444 	.word	0x58025444
 800a4b8:	58025458 	.word	0x58025458
 800a4bc:	5802546c 	.word	0x5802546c
 800a4c0:	58025480 	.word	0x58025480
 800a4c4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68ba      	ldr	r2, [r7, #8]
 800a4ce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	60da      	str	r2, [r3, #12]
}
 800a4d8:	e04d      	b.n	800a576 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	4a29      	ldr	r2, [pc, #164]	; (800a584 <DMA_SetConfig+0x338>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d022      	beq.n	800a52a <DMA_SetConfig+0x2de>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a27      	ldr	r2, [pc, #156]	; (800a588 <DMA_SetConfig+0x33c>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d01d      	beq.n	800a52a <DMA_SetConfig+0x2de>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a26      	ldr	r2, [pc, #152]	; (800a58c <DMA_SetConfig+0x340>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d018      	beq.n	800a52a <DMA_SetConfig+0x2de>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a24      	ldr	r2, [pc, #144]	; (800a590 <DMA_SetConfig+0x344>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d013      	beq.n	800a52a <DMA_SetConfig+0x2de>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a23      	ldr	r2, [pc, #140]	; (800a594 <DMA_SetConfig+0x348>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d00e      	beq.n	800a52a <DMA_SetConfig+0x2de>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a21      	ldr	r2, [pc, #132]	; (800a598 <DMA_SetConfig+0x34c>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d009      	beq.n	800a52a <DMA_SetConfig+0x2de>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a20      	ldr	r2, [pc, #128]	; (800a59c <DMA_SetConfig+0x350>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d004      	beq.n	800a52a <DMA_SetConfig+0x2de>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a1e      	ldr	r2, [pc, #120]	; (800a5a0 <DMA_SetConfig+0x354>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d101      	bne.n	800a52e <DMA_SetConfig+0x2e2>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e000      	b.n	800a530 <DMA_SetConfig+0x2e4>
 800a52e:	2300      	movs	r3, #0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d020      	beq.n	800a576 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a538:	f003 031f 	and.w	r3, r3, #31
 800a53c:	2201      	movs	r2, #1
 800a53e:	409a      	lsls	r2, r3
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	2b40      	cmp	r3, #64	; 0x40
 800a552:	d108      	bne.n	800a566 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	60da      	str	r2, [r3, #12]
}
 800a564:	e007      	b.n	800a576 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	60da      	str	r2, [r3, #12]
}
 800a576:	bf00      	nop
 800a578:	371c      	adds	r7, #28
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	58025408 	.word	0x58025408
 800a588:	5802541c 	.word	0x5802541c
 800a58c:	58025430 	.word	0x58025430
 800a590:	58025444 	.word	0x58025444
 800a594:	58025458 	.word	0x58025458
 800a598:	5802546c 	.word	0x5802546c
 800a59c:	58025480 	.word	0x58025480
 800a5a0:	58025494 	.word	0x58025494

0800a5a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a42      	ldr	r2, [pc, #264]	; (800a6bc <DMA_CalcBaseAndBitshift+0x118>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d04a      	beq.n	800a64c <DMA_CalcBaseAndBitshift+0xa8>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a41      	ldr	r2, [pc, #260]	; (800a6c0 <DMA_CalcBaseAndBitshift+0x11c>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d045      	beq.n	800a64c <DMA_CalcBaseAndBitshift+0xa8>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a3f      	ldr	r2, [pc, #252]	; (800a6c4 <DMA_CalcBaseAndBitshift+0x120>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d040      	beq.n	800a64c <DMA_CalcBaseAndBitshift+0xa8>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a3e      	ldr	r2, [pc, #248]	; (800a6c8 <DMA_CalcBaseAndBitshift+0x124>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d03b      	beq.n	800a64c <DMA_CalcBaseAndBitshift+0xa8>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a3c      	ldr	r2, [pc, #240]	; (800a6cc <DMA_CalcBaseAndBitshift+0x128>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d036      	beq.n	800a64c <DMA_CalcBaseAndBitshift+0xa8>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a3b      	ldr	r2, [pc, #236]	; (800a6d0 <DMA_CalcBaseAndBitshift+0x12c>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d031      	beq.n	800a64c <DMA_CalcBaseAndBitshift+0xa8>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a39      	ldr	r2, [pc, #228]	; (800a6d4 <DMA_CalcBaseAndBitshift+0x130>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d02c      	beq.n	800a64c <DMA_CalcBaseAndBitshift+0xa8>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a38      	ldr	r2, [pc, #224]	; (800a6d8 <DMA_CalcBaseAndBitshift+0x134>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d027      	beq.n	800a64c <DMA_CalcBaseAndBitshift+0xa8>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a36      	ldr	r2, [pc, #216]	; (800a6dc <DMA_CalcBaseAndBitshift+0x138>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d022      	beq.n	800a64c <DMA_CalcBaseAndBitshift+0xa8>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a35      	ldr	r2, [pc, #212]	; (800a6e0 <DMA_CalcBaseAndBitshift+0x13c>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d01d      	beq.n	800a64c <DMA_CalcBaseAndBitshift+0xa8>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a33      	ldr	r2, [pc, #204]	; (800a6e4 <DMA_CalcBaseAndBitshift+0x140>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d018      	beq.n	800a64c <DMA_CalcBaseAndBitshift+0xa8>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a32      	ldr	r2, [pc, #200]	; (800a6e8 <DMA_CalcBaseAndBitshift+0x144>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d013      	beq.n	800a64c <DMA_CalcBaseAndBitshift+0xa8>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a30      	ldr	r2, [pc, #192]	; (800a6ec <DMA_CalcBaseAndBitshift+0x148>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d00e      	beq.n	800a64c <DMA_CalcBaseAndBitshift+0xa8>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a2f      	ldr	r2, [pc, #188]	; (800a6f0 <DMA_CalcBaseAndBitshift+0x14c>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d009      	beq.n	800a64c <DMA_CalcBaseAndBitshift+0xa8>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a2d      	ldr	r2, [pc, #180]	; (800a6f4 <DMA_CalcBaseAndBitshift+0x150>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d004      	beq.n	800a64c <DMA_CalcBaseAndBitshift+0xa8>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a2c      	ldr	r2, [pc, #176]	; (800a6f8 <DMA_CalcBaseAndBitshift+0x154>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d101      	bne.n	800a650 <DMA_CalcBaseAndBitshift+0xac>
 800a64c:	2301      	movs	r3, #1
 800a64e:	e000      	b.n	800a652 <DMA_CalcBaseAndBitshift+0xae>
 800a650:	2300      	movs	r3, #0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d024      	beq.n	800a6a0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	3b10      	subs	r3, #16
 800a65e:	4a27      	ldr	r2, [pc, #156]	; (800a6fc <DMA_CalcBaseAndBitshift+0x158>)
 800a660:	fba2 2303 	umull	r2, r3, r2, r3
 800a664:	091b      	lsrs	r3, r3, #4
 800a666:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f003 0307 	and.w	r3, r3, #7
 800a66e:	4a24      	ldr	r2, [pc, #144]	; (800a700 <DMA_CalcBaseAndBitshift+0x15c>)
 800a670:	5cd3      	ldrb	r3, [r2, r3]
 800a672:	461a      	mov	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d908      	bls.n	800a690 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	4b1f      	ldr	r3, [pc, #124]	; (800a704 <DMA_CalcBaseAndBitshift+0x160>)
 800a686:	4013      	ands	r3, r2
 800a688:	1d1a      	adds	r2, r3, #4
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	659a      	str	r2, [r3, #88]	; 0x58
 800a68e:	e00d      	b.n	800a6ac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	461a      	mov	r2, r3
 800a696:	4b1b      	ldr	r3, [pc, #108]	; (800a704 <DMA_CalcBaseAndBitshift+0x160>)
 800a698:	4013      	ands	r3, r2
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	6593      	str	r3, [r2, #88]	; 0x58
 800a69e:	e005      	b.n	800a6ac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3714      	adds	r7, #20
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr
 800a6bc:	40020010 	.word	0x40020010
 800a6c0:	40020028 	.word	0x40020028
 800a6c4:	40020040 	.word	0x40020040
 800a6c8:	40020058 	.word	0x40020058
 800a6cc:	40020070 	.word	0x40020070
 800a6d0:	40020088 	.word	0x40020088
 800a6d4:	400200a0 	.word	0x400200a0
 800a6d8:	400200b8 	.word	0x400200b8
 800a6dc:	40020410 	.word	0x40020410
 800a6e0:	40020428 	.word	0x40020428
 800a6e4:	40020440 	.word	0x40020440
 800a6e8:	40020458 	.word	0x40020458
 800a6ec:	40020470 	.word	0x40020470
 800a6f0:	40020488 	.word	0x40020488
 800a6f4:	400204a0 	.word	0x400204a0
 800a6f8:	400204b8 	.word	0x400204b8
 800a6fc:	aaaaaaab 	.word	0xaaaaaaab
 800a700:	0801ae64 	.word	0x0801ae64
 800a704:	fffffc00 	.word	0xfffffc00

0800a708 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d120      	bne.n	800a75e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a720:	2b03      	cmp	r3, #3
 800a722:	d858      	bhi.n	800a7d6 <DMA_CheckFifoParam+0xce>
 800a724:	a201      	add	r2, pc, #4	; (adr r2, 800a72c <DMA_CheckFifoParam+0x24>)
 800a726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a72a:	bf00      	nop
 800a72c:	0800a73d 	.word	0x0800a73d
 800a730:	0800a74f 	.word	0x0800a74f
 800a734:	0800a73d 	.word	0x0800a73d
 800a738:	0800a7d7 	.word	0x0800a7d7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a744:	2b00      	cmp	r3, #0
 800a746:	d048      	beq.n	800a7da <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a74c:	e045      	b.n	800a7da <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a752:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a756:	d142      	bne.n	800a7de <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a75c:	e03f      	b.n	800a7de <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	699b      	ldr	r3, [r3, #24]
 800a762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a766:	d123      	bne.n	800a7b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d838      	bhi.n	800a7e2 <DMA_CheckFifoParam+0xda>
 800a770:	a201      	add	r2, pc, #4	; (adr r2, 800a778 <DMA_CheckFifoParam+0x70>)
 800a772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a776:	bf00      	nop
 800a778:	0800a789 	.word	0x0800a789
 800a77c:	0800a78f 	.word	0x0800a78f
 800a780:	0800a789 	.word	0x0800a789
 800a784:	0800a7a1 	.word	0x0800a7a1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	73fb      	strb	r3, [r7, #15]
        break;
 800a78c:	e030      	b.n	800a7f0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a796:	2b00      	cmp	r3, #0
 800a798:	d025      	beq.n	800a7e6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a79a:	2301      	movs	r3, #1
 800a79c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a79e:	e022      	b.n	800a7e6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a7a8:	d11f      	bne.n	800a7ea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a7ae:	e01c      	b.n	800a7ea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d902      	bls.n	800a7be <DMA_CheckFifoParam+0xb6>
 800a7b8:	2b03      	cmp	r3, #3
 800a7ba:	d003      	beq.n	800a7c4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a7bc:	e018      	b.n	800a7f0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	73fb      	strb	r3, [r7, #15]
        break;
 800a7c2:	e015      	b.n	800a7f0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00e      	beq.n	800a7ee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7d4:	e00b      	b.n	800a7ee <DMA_CheckFifoParam+0xe6>
        break;
 800a7d6:	bf00      	nop
 800a7d8:	e00a      	b.n	800a7f0 <DMA_CheckFifoParam+0xe8>
        break;
 800a7da:	bf00      	nop
 800a7dc:	e008      	b.n	800a7f0 <DMA_CheckFifoParam+0xe8>
        break;
 800a7de:	bf00      	nop
 800a7e0:	e006      	b.n	800a7f0 <DMA_CheckFifoParam+0xe8>
        break;
 800a7e2:	bf00      	nop
 800a7e4:	e004      	b.n	800a7f0 <DMA_CheckFifoParam+0xe8>
        break;
 800a7e6:	bf00      	nop
 800a7e8:	e002      	b.n	800a7f0 <DMA_CheckFifoParam+0xe8>
        break;
 800a7ea:	bf00      	nop
 800a7ec:	e000      	b.n	800a7f0 <DMA_CheckFifoParam+0xe8>
    break;
 800a7ee:	bf00      	nop
    }
  }

  return status;
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3714      	adds	r7, #20
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop

0800a800 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a800:	b480      	push	{r7}
 800a802:	b085      	sub	sp, #20
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a38      	ldr	r2, [pc, #224]	; (800a8f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d022      	beq.n	800a85e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a36      	ldr	r2, [pc, #216]	; (800a8f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d01d      	beq.n	800a85e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a35      	ldr	r2, [pc, #212]	; (800a8fc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d018      	beq.n	800a85e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a33      	ldr	r2, [pc, #204]	; (800a900 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d013      	beq.n	800a85e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a32      	ldr	r2, [pc, #200]	; (800a904 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d00e      	beq.n	800a85e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a30      	ldr	r2, [pc, #192]	; (800a908 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d009      	beq.n	800a85e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a2f      	ldr	r2, [pc, #188]	; (800a90c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d004      	beq.n	800a85e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a2d      	ldr	r2, [pc, #180]	; (800a910 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d101      	bne.n	800a862 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a85e:	2301      	movs	r3, #1
 800a860:	e000      	b.n	800a864 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a862:	2300      	movs	r3, #0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d01a      	beq.n	800a89e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	3b08      	subs	r3, #8
 800a870:	4a28      	ldr	r2, [pc, #160]	; (800a914 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a872:	fba2 2303 	umull	r2, r3, r2, r3
 800a876:	091b      	lsrs	r3, r3, #4
 800a878:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	4b26      	ldr	r3, [pc, #152]	; (800a918 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a87e:	4413      	add	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	461a      	mov	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a24      	ldr	r2, [pc, #144]	; (800a91c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a88c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f003 031f 	and.w	r3, r3, #31
 800a894:	2201      	movs	r2, #1
 800a896:	409a      	lsls	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a89c:	e024      	b.n	800a8e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	3b10      	subs	r3, #16
 800a8a6:	4a1e      	ldr	r2, [pc, #120]	; (800a920 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a8a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ac:	091b      	lsrs	r3, r3, #4
 800a8ae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	4a1c      	ldr	r2, [pc, #112]	; (800a924 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d806      	bhi.n	800a8c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	4a1b      	ldr	r2, [pc, #108]	; (800a928 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d902      	bls.n	800a8c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	3308      	adds	r3, #8
 800a8c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	4b18      	ldr	r3, [pc, #96]	; (800a92c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a8ca:	4413      	add	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a16      	ldr	r2, [pc, #88]	; (800a930 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a8d8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f003 031f 	and.w	r3, r3, #31
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	409a      	lsls	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a8e8:	bf00      	nop
 800a8ea:	3714      	adds	r7, #20
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	58025408 	.word	0x58025408
 800a8f8:	5802541c 	.word	0x5802541c
 800a8fc:	58025430 	.word	0x58025430
 800a900:	58025444 	.word	0x58025444
 800a904:	58025458 	.word	0x58025458
 800a908:	5802546c 	.word	0x5802546c
 800a90c:	58025480 	.word	0x58025480
 800a910:	58025494 	.word	0x58025494
 800a914:	cccccccd 	.word	0xcccccccd
 800a918:	16009600 	.word	0x16009600
 800a91c:	58025880 	.word	0x58025880
 800a920:	aaaaaaab 	.word	0xaaaaaaab
 800a924:	400204b8 	.word	0x400204b8
 800a928:	4002040f 	.word	0x4002040f
 800a92c:	10008200 	.word	0x10008200
 800a930:	40020880 	.word	0x40020880

0800a934 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	b2db      	uxtb	r3, r3
 800a942:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d04a      	beq.n	800a9e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2b08      	cmp	r3, #8
 800a94e:	d847      	bhi.n	800a9e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a25      	ldr	r2, [pc, #148]	; (800a9ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d022      	beq.n	800a9a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a24      	ldr	r2, [pc, #144]	; (800a9f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d01d      	beq.n	800a9a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a22      	ldr	r2, [pc, #136]	; (800a9f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d018      	beq.n	800a9a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a21      	ldr	r2, [pc, #132]	; (800a9f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d013      	beq.n	800a9a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a1f      	ldr	r2, [pc, #124]	; (800a9fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d00e      	beq.n	800a9a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a1e      	ldr	r2, [pc, #120]	; (800aa00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d009      	beq.n	800a9a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a1c      	ldr	r2, [pc, #112]	; (800aa04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d004      	beq.n	800a9a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a1b      	ldr	r2, [pc, #108]	; (800aa08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d101      	bne.n	800a9a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e000      	b.n	800a9a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d00a      	beq.n	800a9c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	4b17      	ldr	r3, [pc, #92]	; (800aa0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a9ae:	4413      	add	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a15      	ldr	r2, [pc, #84]	; (800aa10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a9bc:	671a      	str	r2, [r3, #112]	; 0x70
 800a9be:	e009      	b.n	800a9d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	4b14      	ldr	r3, [pc, #80]	; (800aa14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a9c4:	4413      	add	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a11      	ldr	r2, [pc, #68]	; (800aa18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a9d2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	2201      	movs	r2, #1
 800a9da:	409a      	lsls	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a9e0:	bf00      	nop
 800a9e2:	3714      	adds	r7, #20
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	58025408 	.word	0x58025408
 800a9f0:	5802541c 	.word	0x5802541c
 800a9f4:	58025430 	.word	0x58025430
 800a9f8:	58025444 	.word	0x58025444
 800a9fc:	58025458 	.word	0x58025458
 800aa00:	5802546c 	.word	0x5802546c
 800aa04:	58025480 	.word	0x58025480
 800aa08:	58025494 	.word	0x58025494
 800aa0c:	1600963f 	.word	0x1600963f
 800aa10:	58025940 	.word	0x58025940
 800aa14:	1000823f 	.word	0x1000823f
 800aa18:	40020940 	.word	0x40020940

0800aa1c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b08a      	sub	sp, #40	; 0x28
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800aa30:	2308      	movs	r3, #8
 800aa32:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800aa34:	4b40      	ldr	r3, [pc, #256]	; (800ab38 <HAL_FLASH_Program+0x11c>)
 800aa36:	7d1b      	ldrb	r3, [r3, #20]
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d101      	bne.n	800aa40 <HAL_FLASH_Program+0x24>
 800aa3c:	2302      	movs	r3, #2
 800aa3e:	e076      	b.n	800ab2e <HAL_FLASH_Program+0x112>
 800aa40:	4b3d      	ldr	r3, [pc, #244]	; (800ab38 <HAL_FLASH_Program+0x11c>)
 800aa42:	2201      	movs	r2, #1
 800aa44:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa4c:	d306      	bcc.n	800aa5c <HAL_FLASH_Program+0x40>
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800aa54:	d202      	bcs.n	800aa5c <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800aa56:	2301      	movs	r3, #1
 800aa58:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800aa5a:	e00c      	b.n	800aa76 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800aa62:	d306      	bcc.n	800aa72 <HAL_FLASH_Program+0x56>
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800aa6a:	d202      	bcs.n	800aa72 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	61bb      	str	r3, [r7, #24]
 800aa70:	e001      	b.n	800aa76 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	e05b      	b.n	800ab2e <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aa76:	4b30      	ldr	r3, [pc, #192]	; (800ab38 <HAL_FLASH_Program+0x11c>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800aa7c:	69b9      	ldr	r1, [r7, #24]
 800aa7e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aa82:	f000 f897 	bl	800abb4 <FLASH_WaitForLastOperation>
 800aa86:	4603      	mov	r3, r0
 800aa88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800aa8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d147      	bne.n	800ab24 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d106      	bne.n	800aaa8 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800aa9a:	4b28      	ldr	r3, [pc, #160]	; (800ab3c <HAL_FLASH_Program+0x120>)
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	4a27      	ldr	r2, [pc, #156]	; (800ab3c <HAL_FLASH_Program+0x120>)
 800aaa0:	f043 0302 	orr.w	r3, r3, #2
 800aaa4:	60d3      	str	r3, [r2, #12]
 800aaa6:	e007      	b.n	800aab8 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800aaa8:	4b24      	ldr	r3, [pc, #144]	; (800ab3c <HAL_FLASH_Program+0x120>)
 800aaaa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aaae:	4a23      	ldr	r2, [pc, #140]	; (800ab3c <HAL_FLASH_Program+0x120>)
 800aab0:	f043 0302 	orr.w	r3, r3, #2
 800aab4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800aab8:	f3bf 8f6f 	isb	sy
}
 800aabc:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800aabe:	f3bf 8f4f 	dsb	sy
}
 800aac2:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	6a3b      	ldr	r3, [r7, #32]
 800aaca:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800aacc:	6a3b      	ldr	r3, [r7, #32]
 800aace:	3304      	adds	r3, #4
 800aad0:	623b      	str	r3, [r7, #32]
        src_addr++;
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	3304      	adds	r3, #4
 800aad6:	61fb      	str	r3, [r7, #28]
        row_index--;
 800aad8:	7dfb      	ldrb	r3, [r7, #23]
 800aada:	3b01      	subs	r3, #1
 800aadc:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800aade:	7dfb      	ldrb	r3, [r7, #23]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1ef      	bne.n	800aac4 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800aae4:	f3bf 8f6f 	isb	sy
}
 800aae8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800aaea:	f3bf 8f4f 	dsb	sy
}
 800aaee:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800aaf0:	69b9      	ldr	r1, [r7, #24]
 800aaf2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aaf6:	f000 f85d 	bl	800abb4 <FLASH_WaitForLastOperation>
 800aafa:	4603      	mov	r3, r0
 800aafc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d106      	bne.n	800ab14 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800ab06:	4b0d      	ldr	r3, [pc, #52]	; (800ab3c <HAL_FLASH_Program+0x120>)
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	4a0c      	ldr	r2, [pc, #48]	; (800ab3c <HAL_FLASH_Program+0x120>)
 800ab0c:	f023 0302 	bic.w	r3, r3, #2
 800ab10:	60d3      	str	r3, [r2, #12]
 800ab12:	e007      	b.n	800ab24 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800ab14:	4b09      	ldr	r3, [pc, #36]	; (800ab3c <HAL_FLASH_Program+0x120>)
 800ab16:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ab1a:	4a08      	ldr	r2, [pc, #32]	; (800ab3c <HAL_FLASH_Program+0x120>)
 800ab1c:	f023 0302 	bic.w	r3, r3, #2
 800ab20:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ab24:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <HAL_FLASH_Program+0x11c>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	751a      	strb	r2, [r3, #20]

  return status;
 800ab2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3728      	adds	r7, #40	; 0x28
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	24002000 	.word	0x24002000
 800ab3c:	52002000 	.word	0x52002000

0800ab40 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ab40:	b480      	push	{r7}
 800ab42:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800ab44:	4b18      	ldr	r3, [pc, #96]	; (800aba8 <HAL_FLASH_Unlock+0x68>)
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	f003 0301 	and.w	r3, r3, #1
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00d      	beq.n	800ab6c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800ab50:	4b15      	ldr	r3, [pc, #84]	; (800aba8 <HAL_FLASH_Unlock+0x68>)
 800ab52:	4a16      	ldr	r2, [pc, #88]	; (800abac <HAL_FLASH_Unlock+0x6c>)
 800ab54:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800ab56:	4b14      	ldr	r3, [pc, #80]	; (800aba8 <HAL_FLASH_Unlock+0x68>)
 800ab58:	4a15      	ldr	r2, [pc, #84]	; (800abb0 <HAL_FLASH_Unlock+0x70>)
 800ab5a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800ab5c:	4b12      	ldr	r3, [pc, #72]	; (800aba8 <HAL_FLASH_Unlock+0x68>)
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e018      	b.n	800ab9e <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800ab6c:	4b0e      	ldr	r3, [pc, #56]	; (800aba8 <HAL_FLASH_Unlock+0x68>)
 800ab6e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ab72:	f003 0301 	and.w	r3, r3, #1
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d010      	beq.n	800ab9c <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800ab7a:	4b0b      	ldr	r3, [pc, #44]	; (800aba8 <HAL_FLASH_Unlock+0x68>)
 800ab7c:	4a0b      	ldr	r2, [pc, #44]	; (800abac <HAL_FLASH_Unlock+0x6c>)
 800ab7e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800ab82:	4b09      	ldr	r3, [pc, #36]	; (800aba8 <HAL_FLASH_Unlock+0x68>)
 800ab84:	4a0a      	ldr	r2, [pc, #40]	; (800abb0 <HAL_FLASH_Unlock+0x70>)
 800ab86:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800ab8a:	4b07      	ldr	r3, [pc, #28]	; (800aba8 <HAL_FLASH_Unlock+0x68>)
 800ab8c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ab90:	f003 0301 	and.w	r3, r3, #1
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d001      	beq.n	800ab9c <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e000      	b.n	800ab9e <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr
 800aba8:	52002000 	.word	0x52002000
 800abac:	45670123 	.word	0x45670123
 800abb0:	cdef89ab 	.word	0xcdef89ab

0800abb4 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800abbe:	2304      	movs	r3, #4
 800abc0:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800abc6:	f7fa ffab 	bl	8005b20 <HAL_GetTick>
 800abca:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	2b02      	cmp	r3, #2
 800abd0:	d113      	bne.n	800abfa <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800abd2:	4b41      	ldr	r3, [pc, #260]	; (800acd8 <FLASH_WaitForLastOperation+0x124>)
 800abd4:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800abd6:	e010      	b.n	800abfa <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abde:	d00c      	beq.n	800abfa <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800abe0:	f7fa ff9e 	bl	8005b20 <HAL_GetTick>
 800abe4:	4602      	mov	r2, r0
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	429a      	cmp	r2, r3
 800abee:	d302      	bcc.n	800abf6 <FLASH_WaitForLastOperation+0x42>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d101      	bne.n	800abfa <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800abf6:	2303      	movs	r3, #3
 800abf8:	e06a      	b.n	800acd0 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800abfa:	697a      	ldr	r2, [r7, #20]
 800abfc:	4b37      	ldr	r3, [pc, #220]	; (800acdc <FLASH_WaitForLastOperation+0x128>)
 800abfe:	4013      	ands	r3, r2
 800ac00:	697a      	ldr	r2, [r7, #20]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d10a      	bne.n	800ac1c <FLASH_WaitForLastOperation+0x68>
 800ac06:	4b36      	ldr	r3, [pc, #216]	; (800ace0 <FLASH_WaitForLastOperation+0x12c>)
 800ac08:	691a      	ldr	r2, [r3, #16]
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	bf0c      	ite	eq
 800ac14:	2301      	moveq	r3, #1
 800ac16:	2300      	movne	r3, #0
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	e00c      	b.n	800ac36 <FLASH_WaitForLastOperation+0x82>
 800ac1c:	4b30      	ldr	r3, [pc, #192]	; (800ace0 <FLASH_WaitForLastOperation+0x12c>)
 800ac1e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800ac22:	43da      	mvns	r2, r3
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	4013      	ands	r3, r2
 800ac28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	bf0c      	ite	eq
 800ac30:	2301      	moveq	r3, #1
 800ac32:	2300      	movne	r3, #0
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1ce      	bne.n	800abd8 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d105      	bne.n	800ac4c <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800ac40:	4b27      	ldr	r3, [pc, #156]	; (800ace0 <FLASH_WaitForLastOperation+0x12c>)
 800ac42:	691a      	ldr	r2, [r3, #16]
 800ac44:	4b27      	ldr	r3, [pc, #156]	; (800ace4 <FLASH_WaitForLastOperation+0x130>)
 800ac46:	4013      	ands	r3, r2
 800ac48:	613b      	str	r3, [r7, #16]
 800ac4a:	e007      	b.n	800ac5c <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800ac4c:	4b24      	ldr	r3, [pc, #144]	; (800ace0 <FLASH_WaitForLastOperation+0x12c>)
 800ac4e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800ac52:	4b24      	ldr	r3, [pc, #144]	; (800ace4 <FLASH_WaitForLastOperation+0x130>)
 800ac54:	4013      	ands	r3, r2
 800ac56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac5a:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d017      	beq.n	800ac96 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800ac66:	4b20      	ldr	r3, [pc, #128]	; (800ace8 <FLASH_WaitForLastOperation+0x134>)
 800ac68:	699a      	ldr	r2, [r3, #24]
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	4a1e      	ldr	r2, [pc, #120]	; (800ace8 <FLASH_WaitForLastOperation+0x134>)
 800ac70:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800ac72:	693a      	ldr	r2, [r7, #16]
 800ac74:	4b19      	ldr	r3, [pc, #100]	; (800acdc <FLASH_WaitForLastOperation+0x128>)
 800ac76:	4013      	ands	r3, r2
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d103      	bne.n	800ac86 <FLASH_WaitForLastOperation+0xd2>
 800ac7e:	4a18      	ldr	r2, [pc, #96]	; (800ace0 <FLASH_WaitForLastOperation+0x12c>)
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	6153      	str	r3, [r2, #20]
 800ac84:	e005      	b.n	800ac92 <FLASH_WaitForLastOperation+0xde>
 800ac86:	4a16      	ldr	r2, [pc, #88]	; (800ace0 <FLASH_WaitForLastOperation+0x12c>)
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac8e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e01c      	b.n	800acd0 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d10b      	bne.n	800acb4 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800ac9c:	4b10      	ldr	r3, [pc, #64]	; (800ace0 <FLASH_WaitForLastOperation+0x12c>)
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aca8:	d111      	bne.n	800acce <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800acaa:	4b0d      	ldr	r3, [pc, #52]	; (800ace0 <FLASH_WaitForLastOperation+0x12c>)
 800acac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800acb0:	615a      	str	r2, [r3, #20]
 800acb2:	e00c      	b.n	800acce <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800acb4:	4b0a      	ldr	r3, [pc, #40]	; (800ace0 <FLASH_WaitForLastOperation+0x12c>)
 800acb6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800acba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acc2:	d104      	bne.n	800acce <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800acc4:	4b06      	ldr	r3, [pc, #24]	; (800ace0 <FLASH_WaitForLastOperation+0x12c>)
 800acc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800acca:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3718      	adds	r7, #24
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	80000004 	.word	0x80000004
 800acdc:	1fef000f 	.word	0x1fef000f
 800ace0:	52002000 	.word	0x52002000
 800ace4:	17ee0000 	.word	0x17ee0000
 800ace8:	24002000 	.word	0x24002000

0800acec <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800acfa:	4b5e      	ldr	r3, [pc, #376]	; (800ae74 <HAL_FLASHEx_Erase+0x188>)
 800acfc:	7d1b      	ldrb	r3, [r3, #20]
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d101      	bne.n	800ad06 <HAL_FLASHEx_Erase+0x1a>
 800ad02:	2302      	movs	r3, #2
 800ad04:	e0b2      	b.n	800ae6c <HAL_FLASHEx_Erase+0x180>
 800ad06:	4b5b      	ldr	r3, [pc, #364]	; (800ae74 <HAL_FLASHEx_Erase+0x188>)
 800ad08:	2201      	movs	r2, #1
 800ad0a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ad0c:	4b59      	ldr	r3, [pc, #356]	; (800ae74 <HAL_FLASHEx_Erase+0x188>)
 800ad0e:	2200      	movs	r2, #0
 800ad10:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d009      	beq.n	800ad32 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800ad1e:	2101      	movs	r1, #1
 800ad20:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ad24:	f7ff ff46 	bl	800abb4 <FLASH_WaitForLastOperation>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d001      	beq.n	800ad32 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	f003 0302 	and.w	r3, r3, #2
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d009      	beq.n	800ad52 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800ad3e:	2102      	movs	r1, #2
 800ad40:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ad44:	f7ff ff36 	bl	800abb4 <FLASH_WaitForLastOperation>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	f040 8085 	bne.w	800ae64 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d136      	bne.n	800add0 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	691a      	ldr	r2, [r3, #16]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	f000 f887 	bl	800ae80 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	f003 0301 	and.w	r3, r3, #1
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00f      	beq.n	800ad9e <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800ad7e:	2101      	movs	r1, #1
 800ad80:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ad84:	f7ff ff16 	bl	800abb4 <FLASH_WaitForLastOperation>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800ad92:	4b39      	ldr	r3, [pc, #228]	; (800ae78 <HAL_FLASHEx_Erase+0x18c>)
 800ad94:	68db      	ldr	r3, [r3, #12]
 800ad96:	4a38      	ldr	r2, [pc, #224]	; (800ae78 <HAL_FLASHEx_Erase+0x18c>)
 800ad98:	f023 0308 	bic.w	r3, r3, #8
 800ad9c:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	f003 0302 	and.w	r3, r3, #2
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d05c      	beq.n	800ae64 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800adaa:	2102      	movs	r1, #2
 800adac:	f24c 3050 	movw	r0, #50000	; 0xc350
 800adb0:	f7ff ff00 	bl	800abb4 <FLASH_WaitForLastOperation>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800adbe:	4b2e      	ldr	r3, [pc, #184]	; (800ae78 <HAL_FLASHEx_Erase+0x18c>)
 800adc0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800adc4:	4a2c      	ldr	r2, [pc, #176]	; (800ae78 <HAL_FLASHEx_Erase+0x18c>)
 800adc6:	f023 0308 	bic.w	r3, r3, #8
 800adca:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800adce:	e049      	b.n	800ae64 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800add6:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	60bb      	str	r3, [r7, #8]
 800adde:	e039      	b.n	800ae54 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6859      	ldr	r1, [r3, #4]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	461a      	mov	r2, r3
 800adea:	68b8      	ldr	r0, [r7, #8]
 800adec:	f000 f8b2 	bl	800af54 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	f003 0301 	and.w	r3, r3, #1
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00c      	beq.n	800ae16 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800adfc:	2101      	movs	r1, #1
 800adfe:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae02:	f7ff fed7 	bl	800abb4 <FLASH_WaitForLastOperation>
 800ae06:	4603      	mov	r3, r0
 800ae08:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800ae0a:	4b1b      	ldr	r3, [pc, #108]	; (800ae78 <HAL_FLASHEx_Erase+0x18c>)
 800ae0c:	68da      	ldr	r2, [r3, #12]
 800ae0e:	491a      	ldr	r1, [pc, #104]	; (800ae78 <HAL_FLASHEx_Erase+0x18c>)
 800ae10:	4b1a      	ldr	r3, [pc, #104]	; (800ae7c <HAL_FLASHEx_Erase+0x190>)
 800ae12:	4013      	ands	r3, r2
 800ae14:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f003 0302 	and.w	r3, r3, #2
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00e      	beq.n	800ae40 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800ae22:	2102      	movs	r1, #2
 800ae24:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae28:	f7ff fec4 	bl	800abb4 <FLASH_WaitForLastOperation>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800ae30:	4b11      	ldr	r3, [pc, #68]	; (800ae78 <HAL_FLASHEx_Erase+0x18c>)
 800ae32:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800ae36:	4910      	ldr	r1, [pc, #64]	; (800ae78 <HAL_FLASHEx_Erase+0x18c>)
 800ae38:	4b10      	ldr	r3, [pc, #64]	; (800ae7c <HAL_FLASHEx_Erase+0x190>)
 800ae3a:	4013      	ands	r3, r2
 800ae3c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d003      	beq.n	800ae4e <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	601a      	str	r2, [r3, #0]
          break;
 800ae4c:	e00a      	b.n	800ae64 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	3301      	adds	r3, #1
 800ae52:	60bb      	str	r3, [r7, #8]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	68da      	ldr	r2, [r3, #12]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d3bd      	bcc.n	800ade0 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ae64:	4b03      	ldr	r3, [pc, #12]	; (800ae74 <HAL_FLASHEx_Erase+0x188>)
 800ae66:	2200      	movs	r2, #0
 800ae68:	751a      	strb	r2, [r3, #20]

  return status;
 800ae6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	24002000 	.word	0x24002000
 800ae78:	52002000 	.word	0x52002000
 800ae7c:	fffff8fb 	.word	0xfffff8fb

0800ae80 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	f003 0303 	and.w	r3, r3, #3
 800ae90:	2b03      	cmp	r3, #3
 800ae92:	d122      	bne.n	800aeda <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ae94:	4b2e      	ldr	r3, [pc, #184]	; (800af50 <FLASH_MassErase+0xd0>)
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	4a2d      	ldr	r2, [pc, #180]	; (800af50 <FLASH_MassErase+0xd0>)
 800ae9a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ae9e:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800aea0:	4b2b      	ldr	r3, [pc, #172]	; (800af50 <FLASH_MassErase+0xd0>)
 800aea2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800aea6:	4a2a      	ldr	r2, [pc, #168]	; (800af50 <FLASH_MassErase+0xd0>)
 800aea8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800aeac:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800aeb0:	4b27      	ldr	r3, [pc, #156]	; (800af50 <FLASH_MassErase+0xd0>)
 800aeb2:	68da      	ldr	r2, [r3, #12]
 800aeb4:	4926      	ldr	r1, [pc, #152]	; (800af50 <FLASH_MassErase+0xd0>)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800aebc:	4b24      	ldr	r3, [pc, #144]	; (800af50 <FLASH_MassErase+0xd0>)
 800aebe:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800aec2:	4923      	ldr	r1, [pc, #140]	; (800af50 <FLASH_MassErase+0xd0>)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800aecc:	4b20      	ldr	r3, [pc, #128]	; (800af50 <FLASH_MassErase+0xd0>)
 800aece:	699b      	ldr	r3, [r3, #24]
 800aed0:	4a1f      	ldr	r2, [pc, #124]	; (800af50 <FLASH_MassErase+0xd0>)
 800aed2:	f043 0310 	orr.w	r3, r3, #16
 800aed6:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800aed8:	e033      	b.n	800af42 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	f003 0301 	and.w	r3, r3, #1
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d011      	beq.n	800af08 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800aee4:	4b1a      	ldr	r3, [pc, #104]	; (800af50 <FLASH_MassErase+0xd0>)
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	4a19      	ldr	r2, [pc, #100]	; (800af50 <FLASH_MassErase+0xd0>)
 800aeea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800aeee:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800aef0:	4b17      	ldr	r3, [pc, #92]	; (800af50 <FLASH_MassErase+0xd0>)
 800aef2:	68da      	ldr	r2, [r3, #12]
 800aef4:	4916      	ldr	r1, [pc, #88]	; (800af50 <FLASH_MassErase+0xd0>)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800aefc:	4b14      	ldr	r3, [pc, #80]	; (800af50 <FLASH_MassErase+0xd0>)
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	4a13      	ldr	r2, [pc, #76]	; (800af50 <FLASH_MassErase+0xd0>)
 800af02:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800af06:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	f003 0302 	and.w	r3, r3, #2
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d017      	beq.n	800af42 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800af12:	4b0f      	ldr	r3, [pc, #60]	; (800af50 <FLASH_MassErase+0xd0>)
 800af14:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800af18:	4a0d      	ldr	r2, [pc, #52]	; (800af50 <FLASH_MassErase+0xd0>)
 800af1a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800af1e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800af22:	4b0b      	ldr	r3, [pc, #44]	; (800af50 <FLASH_MassErase+0xd0>)
 800af24:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800af28:	4909      	ldr	r1, [pc, #36]	; (800af50 <FLASH_MassErase+0xd0>)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	4313      	orrs	r3, r2
 800af2e:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800af32:	4b07      	ldr	r3, [pc, #28]	; (800af50 <FLASH_MassErase+0xd0>)
 800af34:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800af38:	4a05      	ldr	r2, [pc, #20]	; (800af50 <FLASH_MassErase+0xd0>)
 800af3a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800af3e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800af42:	bf00      	nop
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	52002000 	.word	0x52002000

0800af54 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	f003 0301 	and.w	r3, r3, #1
 800af66:	2b00      	cmp	r3, #0
 800af68:	d010      	beq.n	800af8c <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800af6a:	4b18      	ldr	r3, [pc, #96]	; (800afcc <FLASH_Erase_Sector+0x78>)
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	4a17      	ldr	r2, [pc, #92]	; (800afcc <FLASH_Erase_Sector+0x78>)
 800af70:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800af74:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800af76:	4b15      	ldr	r3, [pc, #84]	; (800afcc <FLASH_Erase_Sector+0x78>)
 800af78:	68da      	ldr	r2, [r3, #12]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	0219      	lsls	r1, r3, #8
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	430b      	orrs	r3, r1
 800af82:	4313      	orrs	r3, r2
 800af84:	4a11      	ldr	r2, [pc, #68]	; (800afcc <FLASH_Erase_Sector+0x78>)
 800af86:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800af8a:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	f003 0302 	and.w	r3, r3, #2
 800af92:	2b00      	cmp	r3, #0
 800af94:	d014      	beq.n	800afc0 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800af96:	4b0d      	ldr	r3, [pc, #52]	; (800afcc <FLASH_Erase_Sector+0x78>)
 800af98:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800af9c:	4a0b      	ldr	r2, [pc, #44]	; (800afcc <FLASH_Erase_Sector+0x78>)
 800af9e:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800afa2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800afa6:	4b09      	ldr	r3, [pc, #36]	; (800afcc <FLASH_Erase_Sector+0x78>)
 800afa8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	0219      	lsls	r1, r3, #8
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	430b      	orrs	r3, r1
 800afb4:	4313      	orrs	r3, r2
 800afb6:	4a05      	ldr	r2, [pc, #20]	; (800afcc <FLASH_Erase_Sector+0x78>)
 800afb8:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800afbc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800afc0:	bf00      	nop
 800afc2:	3714      	adds	r7, #20
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr
 800afcc:	52002000 	.word	0x52002000

0800afd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b089      	sub	sp, #36	; 0x24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800afda:	2300      	movs	r3, #0
 800afdc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800afde:	4b89      	ldr	r3, [pc, #548]	; (800b204 <HAL_GPIO_Init+0x234>)
 800afe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800afe2:	e194      	b.n	800b30e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	2101      	movs	r1, #1
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	fa01 f303 	lsl.w	r3, r1, r3
 800aff0:	4013      	ands	r3, r2
 800aff2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f000 8186 	beq.w	800b308 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	f003 0303 	and.w	r3, r3, #3
 800b004:	2b01      	cmp	r3, #1
 800b006:	d005      	beq.n	800b014 <HAL_GPIO_Init+0x44>
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	f003 0303 	and.w	r3, r3, #3
 800b010:	2b02      	cmp	r3, #2
 800b012:	d130      	bne.n	800b076 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	005b      	lsls	r3, r3, #1
 800b01e:	2203      	movs	r2, #3
 800b020:	fa02 f303 	lsl.w	r3, r2, r3
 800b024:	43db      	mvns	r3, r3
 800b026:	69ba      	ldr	r2, [r7, #24]
 800b028:	4013      	ands	r3, r2
 800b02a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	68da      	ldr	r2, [r3, #12]
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	005b      	lsls	r3, r3, #1
 800b034:	fa02 f303 	lsl.w	r3, r2, r3
 800b038:	69ba      	ldr	r2, [r7, #24]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	69ba      	ldr	r2, [r7, #24]
 800b042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b04a:	2201      	movs	r2, #1
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	fa02 f303 	lsl.w	r3, r2, r3
 800b052:	43db      	mvns	r3, r3
 800b054:	69ba      	ldr	r2, [r7, #24]
 800b056:	4013      	ands	r3, r2
 800b058:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	091b      	lsrs	r3, r3, #4
 800b060:	f003 0201 	and.w	r2, r3, #1
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	fa02 f303 	lsl.w	r3, r2, r3
 800b06a:	69ba      	ldr	r2, [r7, #24]
 800b06c:	4313      	orrs	r3, r2
 800b06e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	f003 0303 	and.w	r3, r3, #3
 800b07e:	2b03      	cmp	r3, #3
 800b080:	d017      	beq.n	800b0b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	005b      	lsls	r3, r3, #1
 800b08c:	2203      	movs	r2, #3
 800b08e:	fa02 f303 	lsl.w	r3, r2, r3
 800b092:	43db      	mvns	r3, r3
 800b094:	69ba      	ldr	r2, [r7, #24]
 800b096:	4013      	ands	r3, r2
 800b098:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	689a      	ldr	r2, [r3, #8]
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	005b      	lsls	r3, r3, #1
 800b0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a6:	69ba      	ldr	r2, [r7, #24]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	69ba      	ldr	r2, [r7, #24]
 800b0b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	f003 0303 	and.w	r3, r3, #3
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d123      	bne.n	800b106 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	08da      	lsrs	r2, r3, #3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	3208      	adds	r2, #8
 800b0c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	f003 0307 	and.w	r3, r3, #7
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	220f      	movs	r2, #15
 800b0d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0da:	43db      	mvns	r3, r3
 800b0dc:	69ba      	ldr	r2, [r7, #24]
 800b0de:	4013      	ands	r3, r2
 800b0e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	691a      	ldr	r2, [r3, #16]
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	f003 0307 	and.w	r3, r3, #7
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f2:	69ba      	ldr	r2, [r7, #24]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	08da      	lsrs	r2, r3, #3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	3208      	adds	r2, #8
 800b100:	69b9      	ldr	r1, [r7, #24]
 800b102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	005b      	lsls	r3, r3, #1
 800b110:	2203      	movs	r2, #3
 800b112:	fa02 f303 	lsl.w	r3, r2, r3
 800b116:	43db      	mvns	r3, r3
 800b118:	69ba      	ldr	r2, [r7, #24]
 800b11a:	4013      	ands	r3, r2
 800b11c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	f003 0203 	and.w	r2, r3, #3
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	005b      	lsls	r3, r3, #1
 800b12a:	fa02 f303 	lsl.w	r3, r2, r3
 800b12e:	69ba      	ldr	r2, [r7, #24]
 800b130:	4313      	orrs	r3, r2
 800b132:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b142:	2b00      	cmp	r3, #0
 800b144:	f000 80e0 	beq.w	800b308 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b148:	4b2f      	ldr	r3, [pc, #188]	; (800b208 <HAL_GPIO_Init+0x238>)
 800b14a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b14e:	4a2e      	ldr	r2, [pc, #184]	; (800b208 <HAL_GPIO_Init+0x238>)
 800b150:	f043 0302 	orr.w	r3, r3, #2
 800b154:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b158:	4b2b      	ldr	r3, [pc, #172]	; (800b208 <HAL_GPIO_Init+0x238>)
 800b15a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b15e:	f003 0302 	and.w	r3, r3, #2
 800b162:	60fb      	str	r3, [r7, #12]
 800b164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b166:	4a29      	ldr	r2, [pc, #164]	; (800b20c <HAL_GPIO_Init+0x23c>)
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	089b      	lsrs	r3, r3, #2
 800b16c:	3302      	adds	r3, #2
 800b16e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	f003 0303 	and.w	r3, r3, #3
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	220f      	movs	r2, #15
 800b17e:	fa02 f303 	lsl.w	r3, r2, r3
 800b182:	43db      	mvns	r3, r3
 800b184:	69ba      	ldr	r2, [r7, #24]
 800b186:	4013      	ands	r3, r2
 800b188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	4a20      	ldr	r2, [pc, #128]	; (800b210 <HAL_GPIO_Init+0x240>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d052      	beq.n	800b238 <HAL_GPIO_Init+0x268>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	4a1f      	ldr	r2, [pc, #124]	; (800b214 <HAL_GPIO_Init+0x244>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d031      	beq.n	800b1fe <HAL_GPIO_Init+0x22e>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	4a1e      	ldr	r2, [pc, #120]	; (800b218 <HAL_GPIO_Init+0x248>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d02b      	beq.n	800b1fa <HAL_GPIO_Init+0x22a>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4a1d      	ldr	r2, [pc, #116]	; (800b21c <HAL_GPIO_Init+0x24c>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d025      	beq.n	800b1f6 <HAL_GPIO_Init+0x226>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4a1c      	ldr	r2, [pc, #112]	; (800b220 <HAL_GPIO_Init+0x250>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d01f      	beq.n	800b1f2 <HAL_GPIO_Init+0x222>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4a1b      	ldr	r2, [pc, #108]	; (800b224 <HAL_GPIO_Init+0x254>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d019      	beq.n	800b1ee <HAL_GPIO_Init+0x21e>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4a1a      	ldr	r2, [pc, #104]	; (800b228 <HAL_GPIO_Init+0x258>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d013      	beq.n	800b1ea <HAL_GPIO_Init+0x21a>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4a19      	ldr	r2, [pc, #100]	; (800b22c <HAL_GPIO_Init+0x25c>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d00d      	beq.n	800b1e6 <HAL_GPIO_Init+0x216>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a18      	ldr	r2, [pc, #96]	; (800b230 <HAL_GPIO_Init+0x260>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d007      	beq.n	800b1e2 <HAL_GPIO_Init+0x212>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a17      	ldr	r2, [pc, #92]	; (800b234 <HAL_GPIO_Init+0x264>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d101      	bne.n	800b1de <HAL_GPIO_Init+0x20e>
 800b1da:	2309      	movs	r3, #9
 800b1dc:	e02d      	b.n	800b23a <HAL_GPIO_Init+0x26a>
 800b1de:	230a      	movs	r3, #10
 800b1e0:	e02b      	b.n	800b23a <HAL_GPIO_Init+0x26a>
 800b1e2:	2308      	movs	r3, #8
 800b1e4:	e029      	b.n	800b23a <HAL_GPIO_Init+0x26a>
 800b1e6:	2307      	movs	r3, #7
 800b1e8:	e027      	b.n	800b23a <HAL_GPIO_Init+0x26a>
 800b1ea:	2306      	movs	r3, #6
 800b1ec:	e025      	b.n	800b23a <HAL_GPIO_Init+0x26a>
 800b1ee:	2305      	movs	r3, #5
 800b1f0:	e023      	b.n	800b23a <HAL_GPIO_Init+0x26a>
 800b1f2:	2304      	movs	r3, #4
 800b1f4:	e021      	b.n	800b23a <HAL_GPIO_Init+0x26a>
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	e01f      	b.n	800b23a <HAL_GPIO_Init+0x26a>
 800b1fa:	2302      	movs	r3, #2
 800b1fc:	e01d      	b.n	800b23a <HAL_GPIO_Init+0x26a>
 800b1fe:	2301      	movs	r3, #1
 800b200:	e01b      	b.n	800b23a <HAL_GPIO_Init+0x26a>
 800b202:	bf00      	nop
 800b204:	58000080 	.word	0x58000080
 800b208:	58024400 	.word	0x58024400
 800b20c:	58000400 	.word	0x58000400
 800b210:	58020000 	.word	0x58020000
 800b214:	58020400 	.word	0x58020400
 800b218:	58020800 	.word	0x58020800
 800b21c:	58020c00 	.word	0x58020c00
 800b220:	58021000 	.word	0x58021000
 800b224:	58021400 	.word	0x58021400
 800b228:	58021800 	.word	0x58021800
 800b22c:	58021c00 	.word	0x58021c00
 800b230:	58022000 	.word	0x58022000
 800b234:	58022400 	.word	0x58022400
 800b238:	2300      	movs	r3, #0
 800b23a:	69fa      	ldr	r2, [r7, #28]
 800b23c:	f002 0203 	and.w	r2, r2, #3
 800b240:	0092      	lsls	r2, r2, #2
 800b242:	4093      	lsls	r3, r2
 800b244:	69ba      	ldr	r2, [r7, #24]
 800b246:	4313      	orrs	r3, r2
 800b248:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b24a:	4938      	ldr	r1, [pc, #224]	; (800b32c <HAL_GPIO_Init+0x35c>)
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	089b      	lsrs	r3, r3, #2
 800b250:	3302      	adds	r3, #2
 800b252:	69ba      	ldr	r2, [r7, #24]
 800b254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	43db      	mvns	r3, r3
 800b264:	69ba      	ldr	r2, [r7, #24]
 800b266:	4013      	ands	r3, r2
 800b268:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b272:	2b00      	cmp	r3, #0
 800b274:	d003      	beq.n	800b27e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b276:	69ba      	ldr	r2, [r7, #24]
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	4313      	orrs	r3, r2
 800b27c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b27e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	43db      	mvns	r3, r3
 800b292:	69ba      	ldr	r2, [r7, #24]
 800b294:	4013      	ands	r3, r2
 800b296:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d003      	beq.n	800b2ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b2a4:	69ba      	ldr	r2, [r7, #24]
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b2ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	43db      	mvns	r3, r3
 800b2be:	69ba      	ldr	r2, [r7, #24]
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d003      	beq.n	800b2d8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b2d0:	69ba      	ldr	r2, [r7, #24]
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	69ba      	ldr	r2, [r7, #24]
 800b2dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	43db      	mvns	r3, r3
 800b2e8:	69ba      	ldr	r2, [r7, #24]
 800b2ea:	4013      	ands	r3, r2
 800b2ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d003      	beq.n	800b302 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b2fa:	69ba      	ldr	r2, [r7, #24]
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	69ba      	ldr	r2, [r7, #24]
 800b306:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	3301      	adds	r3, #1
 800b30c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	fa22 f303 	lsr.w	r3, r2, r3
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f47f ae63 	bne.w	800afe4 <HAL_GPIO_Init+0x14>
  }
}
 800b31e:	bf00      	nop
 800b320:	bf00      	nop
 800b322:	3724      	adds	r7, #36	; 0x24
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	58000400 	.word	0x58000400

0800b330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	460b      	mov	r3, r1
 800b33a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	691a      	ldr	r2, [r3, #16]
 800b340:	887b      	ldrh	r3, [r7, #2]
 800b342:	4013      	ands	r3, r2
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b348:	2301      	movs	r3, #1
 800b34a:	73fb      	strb	r3, [r7, #15]
 800b34c:	e001      	b.n	800b352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b34e:	2300      	movs	r3, #0
 800b350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b352:	7bfb      	ldrb	r3, [r7, #15]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	460b      	mov	r3, r1
 800b36a:	807b      	strh	r3, [r7, #2]
 800b36c:	4613      	mov	r3, r2
 800b36e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b370:	787b      	ldrb	r3, [r7, #1]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d003      	beq.n	800b37e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b376:	887a      	ldrh	r2, [r7, #2]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b37c:	e003      	b.n	800b386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b37e:	887b      	ldrh	r3, [r7, #2]
 800b380:	041a      	lsls	r2, r3, #16
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	619a      	str	r2, [r3, #24]
}
 800b386:	bf00      	nop
 800b388:	370c      	adds	r7, #12
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr
	...

0800b394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d101      	bne.n	800b3a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e08b      	b.n	800b4be <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d106      	bne.n	800b3c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f7f7 fb26 	bl	8002a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2224      	movs	r2, #36	; 0x24
 800b3c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f022 0201 	bic.w	r2, r2, #1
 800b3d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	685a      	ldr	r2, [r3, #4]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b3e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	689a      	ldr	r2, [r3, #8]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b3f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d107      	bne.n	800b40e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	689a      	ldr	r2, [r3, #8]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b40a:	609a      	str	r2, [r3, #8]
 800b40c:	e006      	b.n	800b41c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	689a      	ldr	r2, [r3, #8]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b41a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	2b02      	cmp	r3, #2
 800b422:	d108      	bne.n	800b436 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	685a      	ldr	r2, [r3, #4]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b432:	605a      	str	r2, [r3, #4]
 800b434:	e007      	b.n	800b446 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b444:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	6859      	ldr	r1, [r3, #4]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	4b1d      	ldr	r3, [pc, #116]	; (800b4c8 <HAL_I2C_Init+0x134>)
 800b452:	430b      	orrs	r3, r1
 800b454:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68da      	ldr	r2, [r3, #12]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b464:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	691a      	ldr	r2, [r3, #16]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	695b      	ldr	r3, [r3, #20]
 800b46e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	430a      	orrs	r2, r1
 800b47e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	69d9      	ldr	r1, [r3, #28]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a1a      	ldr	r2, [r3, #32]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	430a      	orrs	r2, r1
 800b48e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f042 0201 	orr.w	r2, r2, #1
 800b49e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2220      	movs	r2, #32
 800b4aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3708      	adds	r7, #8
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	02008000 	.word	0x02008000

0800b4cc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b08a      	sub	sp, #40	; 0x28
 800b4d0:	af02      	add	r7, sp, #8
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	607a      	str	r2, [r7, #4]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	460b      	mov	r3, r1
 800b4da:	817b      	strh	r3, [r7, #10]
 800b4dc:	4613      	mov	r3, r2
 800b4de:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	2b20      	cmp	r3, #32
 800b4ee:	f040 80ef 	bne.w	800b6d0 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b500:	d101      	bne.n	800b506 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800b502:	2302      	movs	r3, #2
 800b504:	e0e5      	b.n	800b6d2 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d101      	bne.n	800b514 <HAL_I2C_Master_Transmit_DMA+0x48>
 800b510:	2302      	movs	r3, #2
 800b512:	e0de      	b.n	800b6d2 <HAL_I2C_Master_Transmit_DMA+0x206>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2221      	movs	r2, #33	; 0x21
 800b520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2210      	movs	r2, #16
 800b528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2200      	movs	r2, #0
 800b530:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	893a      	ldrh	r2, [r7, #8]
 800b53c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	4a66      	ldr	r2, [pc, #408]	; (800b6dc <HAL_I2C_Master_Transmit_DMA+0x210>)
 800b542:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	4a66      	ldr	r2, [pc, #408]	; (800b6e0 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800b548:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b54e:	b29b      	uxth	r3, r3
 800b550:	2bff      	cmp	r3, #255	; 0xff
 800b552:	d906      	bls.n	800b562 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	22ff      	movs	r2, #255	; 0xff
 800b558:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b55a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b55e:	61fb      	str	r3, [r7, #28]
 800b560:	e007      	b.n	800b572 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b566:	b29a      	uxth	r2, r3
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b56c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b570:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b576:	2b00      	cmp	r3, #0
 800b578:	d01a      	beq.n	800b5b0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57e:	781a      	ldrb	r2, [r3, #0]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58a:	1c5a      	adds	r2, r3, #1
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b594:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	3b01      	subs	r3, #1
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d074      	beq.n	800b6a2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d022      	beq.n	800b606 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c4:	4a47      	ldr	r2, [pc, #284]	; (800b6e4 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800b5c6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5cc:	4a46      	ldr	r2, [pc, #280]	; (800b6e8 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800b5ce:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5dc:	2200      	movs	r2, #0
 800b5de:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e8:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b5f0:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800b5f6:	f7fc ff17 	bl	8008428 <HAL_DMA_Start_IT>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b5fe:	7dfb      	ldrb	r3, [r7, #23]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d13a      	bne.n	800b67a <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800b604:	e013      	b.n	800b62e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2220      	movs	r2, #32
 800b60a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2200      	movs	r2, #0
 800b612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b61a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e051      	b.n	800b6d2 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b632:	b2db      	uxtb	r3, r3
 800b634:	3301      	adds	r3, #1
 800b636:	b2da      	uxtb	r2, r3
 800b638:	8979      	ldrh	r1, [r7, #10]
 800b63a:	4b2c      	ldr	r3, [pc, #176]	; (800b6ec <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f002 f83b 	bl	800d6bc <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	b29a      	uxth	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b660:	2110      	movs	r1, #16
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f002 f85c 	bl	800d720 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b676:	601a      	str	r2, [r3, #0]
 800b678:	e028      	b.n	800b6cc <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2220      	movs	r2, #32
 800b67e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2200      	movs	r2, #0
 800b686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b68e:	f043 0210 	orr.w	r2, r3, #16
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2200      	movs	r2, #0
 800b69a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e017      	b.n	800b6d2 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	4a12      	ldr	r2, [pc, #72]	; (800b6f0 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800b6a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	b2da      	uxtb	r2, r3
 800b6ac:	8979      	ldrh	r1, [r7, #10]
 800b6ae:	4b0f      	ldr	r3, [pc, #60]	; (800b6ec <HAL_I2C_Master_Transmit_DMA+0x220>)
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f002 f800 	bl	800d6bc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b6c4:	2101      	movs	r1, #1
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f002 f82a 	bl	800d720 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	e000      	b.n	800b6d2 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800b6d0:	2302      	movs	r3, #2
  }
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3720      	adds	r7, #32
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	ffff0000 	.word	0xffff0000
 800b6e0:	0800bf27 	.word	0x0800bf27
 800b6e4:	0800d2df 	.word	0x0800d2df
 800b6e8:	0800d40d 	.word	0x0800d40d
 800b6ec:	80002000 	.word	0x80002000
 800b6f0:	0800bab7 	.word	0x0800bab7

0800b6f4 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b088      	sub	sp, #32
 800b6f8:	af02      	add	r7, sp, #8
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	607a      	str	r2, [r7, #4]
 800b6fe:	461a      	mov	r2, r3
 800b700:	460b      	mov	r3, r1
 800b702:	817b      	strh	r3, [r7, #10]
 800b704:	4613      	mov	r3, r2
 800b706:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b20      	cmp	r3, #32
 800b712:	f040 80cd 	bne.w	800b8b0 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b724:	d101      	bne.n	800b72a <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800b726:	2302      	movs	r3, #2
 800b728:	e0c3      	b.n	800b8b2 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b730:	2b01      	cmp	r3, #1
 800b732:	d101      	bne.n	800b738 <HAL_I2C_Master_Receive_DMA+0x44>
 800b734:	2302      	movs	r3, #2
 800b736:	e0bc      	b.n	800b8b2 <HAL_I2C_Master_Receive_DMA+0x1be>
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2222      	movs	r2, #34	; 0x22
 800b744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2210      	movs	r2, #16
 800b74c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	2200      	movs	r2, #0
 800b754:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	893a      	ldrh	r2, [r7, #8]
 800b760:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	4a55      	ldr	r2, [pc, #340]	; (800b8bc <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800b766:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	4a55      	ldr	r2, [pc, #340]	; (800b8c0 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800b76c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b772:	b29b      	uxth	r3, r3
 800b774:	2bff      	cmp	r3, #255	; 0xff
 800b776:	d906      	bls.n	800b786 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	22ff      	movs	r2, #255	; 0xff
 800b77c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800b77e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b782:	617b      	str	r3, [r7, #20]
 800b784:	e007      	b.n	800b796 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b78a:	b29a      	uxth	r2, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b790:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b794:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d070      	beq.n	800b880 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d020      	beq.n	800b7e8 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7aa:	4a46      	ldr	r2, [pc, #280]	; (800b8c4 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800b7ac:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7b2:	4a45      	ldr	r2, [pc, #276]	; (800b8c8 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800b7b4:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	3324      	adds	r3, #36	; 0x24
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b7d8:	f7fc fe26 	bl	8008428 <HAL_DMA_Start_IT>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b7e0:	7cfb      	ldrb	r3, [r7, #19]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d138      	bne.n	800b858 <HAL_I2C_Master_Receive_DMA+0x164>
 800b7e6:	e013      	b.n	800b810 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2200      	movs	r2, #0
 800b808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e050      	b.n	800b8b2 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b814:	b2da      	uxtb	r2, r3
 800b816:	8979      	ldrh	r1, [r7, #10]
 800b818:	4b2c      	ldr	r3, [pc, #176]	; (800b8cc <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b81a:	9300      	str	r3, [sp, #0]
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	68f8      	ldr	r0, [r7, #12]
 800b820:	f001 ff4c 	bl	800d6bc <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b828:	b29a      	uxth	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	b29a      	uxth	r2, r3
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b83e:	2110      	movs	r1, #16
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f001 ff6d 	bl	800d720 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b854:	601a      	str	r2, [r3, #0]
 800b856:	e029      	b.n	800b8ac <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2220      	movs	r2, #32
 800b85c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2200      	movs	r2, #0
 800b864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b86c:	f043 0210 	orr.w	r2, r3, #16
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	e018      	b.n	800b8b2 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	4a13      	ldr	r2, [pc, #76]	; (800b8d0 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800b884:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b88a:	b2da      	uxtb	r2, r3
 800b88c:	8979      	ldrh	r1, [r7, #10]
 800b88e:	4b0f      	ldr	r3, [pc, #60]	; (800b8cc <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f001 ff10 	bl	800d6bc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b8a4:	2102      	movs	r1, #2
 800b8a6:	68f8      	ldr	r0, [r7, #12]
 800b8a8:	f001 ff3a 	bl	800d720 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	e000      	b.n	800b8b2 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800b8b0:	2302      	movs	r3, #2
  }
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3718      	adds	r7, #24
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	ffff0000 	.word	0xffff0000
 800b8c0:	0800bf27 	.word	0x0800bf27
 800b8c4:	0800d375 	.word	0x0800d375
 800b8c8:	0800d40d 	.word	0x0800d40d
 800b8cc:	80002400 	.word	0x80002400
 800b8d0:	0800bab7 	.word	0x0800bab7

0800b8d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	699b      	ldr	r3, [r3, #24]
 800b8e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d005      	beq.n	800b900 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	68f9      	ldr	r1, [r7, #12]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	4798      	blx	r3
  }
}
 800b900:	bf00      	nop
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	699b      	ldr	r3, [r3, #24]
 800b916:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	0a1b      	lsrs	r3, r3, #8
 800b924:	f003 0301 	and.w	r3, r3, #1
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d010      	beq.n	800b94e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	09db      	lsrs	r3, r3, #7
 800b930:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b934:	2b00      	cmp	r3, #0
 800b936:	d00a      	beq.n	800b94e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b93c:	f043 0201 	orr.w	r2, r3, #1
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b94c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	0a9b      	lsrs	r3, r3, #10
 800b952:	f003 0301 	and.w	r3, r3, #1
 800b956:	2b00      	cmp	r3, #0
 800b958:	d010      	beq.n	800b97c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	09db      	lsrs	r3, r3, #7
 800b95e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b962:	2b00      	cmp	r3, #0
 800b964:	d00a      	beq.n	800b97c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b96a:	f043 0208 	orr.w	r2, r3, #8
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b97a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	0a5b      	lsrs	r3, r3, #9
 800b980:	f003 0301 	and.w	r3, r3, #1
 800b984:	2b00      	cmp	r3, #0
 800b986:	d010      	beq.n	800b9aa <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	09db      	lsrs	r3, r3, #7
 800b98c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b990:	2b00      	cmp	r3, #0
 800b992:	d00a      	beq.n	800b9aa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b998:	f043 0202 	orr.w	r2, r3, #2
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9a8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f003 030b 	and.w	r3, r3, #11
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d003      	beq.n	800b9c2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800b9ba:	68f9      	ldr	r1, [r7, #12]
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f001 fb53 	bl	800d068 <I2C_ITError>
  }
}
 800b9c2:	bf00      	nop
 800b9c4:	3718      	adds	r7, #24
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}

0800b9ca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9ca:	b480      	push	{r7}
 800b9cc:	b083      	sub	sp, #12
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b9d2:	bf00      	nop
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b083      	sub	sp, #12
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b9e6:	bf00      	nop
 800b9e8:	370c      	adds	r7, #12
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b083      	sub	sp, #12
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b9fa:	bf00      	nop
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr

0800ba06 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba06:	b480      	push	{r7}
 800ba08:	b083      	sub	sp, #12
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ba0e:	bf00      	nop
 800ba10:	370c      	adds	r7, #12
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr

0800ba1a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ba1a:	b480      	push	{r7}
 800ba1c:	b083      	sub	sp, #12
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	460b      	mov	r3, r1
 800ba24:	70fb      	strb	r3, [r7, #3]
 800ba26:	4613      	mov	r3, r2
 800ba28:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ba2a:	bf00      	nop
 800ba2c:	370c      	adds	r7, #12
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr

0800ba36 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b083      	sub	sp, #12
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ba3e:	bf00      	nop
 800ba40:	370c      	adds	r7, #12
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr

0800ba4a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b083      	sub	sp, #12
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ba52:	bf00      	nop
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr

0800ba5e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba5e:	b480      	push	{r7}
 800ba60:	b083      	sub	sp, #12
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800ba66:	bf00      	nop
 800ba68:	370c      	adds	r7, #12
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr

0800ba72 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ba72:	b480      	push	{r7}
 800ba74:	b083      	sub	sp, #12
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ba7a:	bf00      	nop
 800ba7c:	370c      	adds	r7, #12
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr

0800ba86 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ba86:	b480      	push	{r7}
 800ba88:	b083      	sub	sp, #12
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ba8e:	bf00      	nop
 800ba90:	370c      	adds	r7, #12
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b083      	sub	sp, #12
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800baa8:	b2db      	uxtb	r3, r3
}
 800baaa:	4618      	mov	r0, r3
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b088      	sub	sp, #32
 800baba:	af02      	add	r7, sp, #8
 800babc:	60f8      	str	r0, [r7, #12]
 800babe:	60b9      	str	r1, [r7, #8]
 800bac0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d101      	bne.n	800bad4 <I2C_Master_ISR_IT+0x1e>
 800bad0:	2302      	movs	r3, #2
 800bad2:	e120      	b.n	800bd16 <I2C_Master_ISR_IT+0x260>
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	091b      	lsrs	r3, r3, #4
 800bae0:	f003 0301 	and.w	r3, r3, #1
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d013      	beq.n	800bb10 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	091b      	lsrs	r3, r3, #4
 800baec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00d      	beq.n	800bb10 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2210      	movs	r2, #16
 800bafa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb00:	f043 0204 	orr.w	r2, r3, #4
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f001 fbc4 	bl	800d296 <I2C_Flush_TXDR>
 800bb0e:	e0ed      	b.n	800bcec <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	089b      	lsrs	r3, r3, #2
 800bb14:	f003 0301 	and.w	r3, r3, #1
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d023      	beq.n	800bb64 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	089b      	lsrs	r3, r3, #2
 800bb20:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d01d      	beq.n	800bb64 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	f023 0304 	bic.w	r3, r3, #4
 800bb2e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3a:	b2d2      	uxtb	r2, r2
 800bb3c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb42:	1c5a      	adds	r2, r3, #1
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb62:	e0c3      	b.n	800bcec <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	099b      	lsrs	r3, r3, #6
 800bb68:	f003 0301 	and.w	r3, r3, #1
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d12a      	bne.n	800bbc6 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	085b      	lsrs	r3, r3, #1
 800bb74:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d024      	beq.n	800bbc6 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	085b      	lsrs	r3, r3, #1
 800bb80:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d01e      	beq.n	800bbc6 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb8c:	b29b      	uxth	r3, r3
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	f000 80ac 	beq.w	800bcec <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb98:	781a      	ldrb	r2, [r3, #0]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba4:	1c5a      	adds	r2, r3, #1
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	b29a      	uxth	r2, r3
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800bbc4:	e092      	b.n	800bcec <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	09db      	lsrs	r3, r3, #7
 800bbca:	f003 0301 	and.w	r3, r3, #1
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d05d      	beq.n	800bc8e <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	099b      	lsrs	r3, r3, #6
 800bbd6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d057      	beq.n	800bc8e <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d040      	beq.n	800bc6a <I2C_Master_ISR_IT+0x1b4>
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d13c      	bne.n	800bc6a <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbfc:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	2bff      	cmp	r3, #255	; 0xff
 800bc06:	d90e      	bls.n	800bc26 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	22ff      	movs	r2, #255	; 0xff
 800bc0c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	8a79      	ldrh	r1, [r7, #18]
 800bc16:	2300      	movs	r3, #0
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f001 fd4c 	bl	800d6bc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc24:	e032      	b.n	800bc8c <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc38:	d00b      	beq.n	800bc52 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc3e:	b2da      	uxtb	r2, r3
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc44:	8a79      	ldrh	r1, [r7, #18]
 800bc46:	2000      	movs	r0, #0
 800bc48:	9000      	str	r0, [sp, #0]
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f001 fd36 	bl	800d6bc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc50:	e01c      	b.n	800bc8c <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	8a79      	ldrh	r1, [r7, #18]
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	9300      	str	r3, [sp, #0]
 800bc5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f001 fd2a 	bl	800d6bc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc68:	e010      	b.n	800bc8c <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc78:	d003      	beq.n	800bc82 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f000 fdde 	bl	800c83c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc80:	e034      	b.n	800bcec <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bc82:	2140      	movs	r1, #64	; 0x40
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f001 f9ef 	bl	800d068 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc8a:	e02f      	b.n	800bcec <I2C_Master_ISR_IT+0x236>
 800bc8c:	e02e      	b.n	800bcec <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	099b      	lsrs	r3, r3, #6
 800bc92:	f003 0301 	and.w	r3, r3, #1
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d028      	beq.n	800bcec <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	099b      	lsrs	r3, r3, #6
 800bc9e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d022      	beq.n	800bcec <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d119      	bne.n	800bce4 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcbe:	d015      	beq.n	800bcec <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bcc8:	d108      	bne.n	800bcdc <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	685a      	ldr	r2, [r3, #4]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcd8:	605a      	str	r2, [r3, #4]
 800bcda:	e007      	b.n	800bcec <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f000 fdad 	bl	800c83c <I2C_ITMasterSeqCplt>
 800bce2:	e003      	b.n	800bcec <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bce4:	2140      	movs	r1, #64	; 0x40
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f001 f9be 	bl	800d068 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	095b      	lsrs	r3, r3, #5
 800bcf0:	f003 0301 	and.w	r3, r3, #1
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d009      	beq.n	800bd0c <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	095b      	lsrs	r3, r3, #5
 800bcfc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d003      	beq.n	800bd0c <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800bd04:	6979      	ldr	r1, [r7, #20]
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f000 fe34 	bl	800c974 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3718      	adds	r7, #24
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b086      	sub	sp, #24
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	60f8      	str	r0, [r7, #12]
 800bd26:	60b9      	str	r1, [r7, #8]
 800bd28:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d101      	bne.n	800bd42 <I2C_Slave_ISR_IT+0x24>
 800bd3e:	2302      	movs	r3, #2
 800bd40:	e0ed      	b.n	800bf1e <I2C_Slave_ISR_IT+0x200>
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	095b      	lsrs	r3, r3, #5
 800bd4e:	f003 0301 	and.w	r3, r3, #1
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00a      	beq.n	800bd6c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	095b      	lsrs	r3, r3, #5
 800bd5a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d004      	beq.n	800bd6c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bd62:	6939      	ldr	r1, [r7, #16]
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f000 fecf 	bl	800cb08 <I2C_ITSlaveCplt>
 800bd6a:	e0d3      	b.n	800bf14 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	091b      	lsrs	r3, r3, #4
 800bd70:	f003 0301 	and.w	r3, r3, #1
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d04d      	beq.n	800be14 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	091b      	lsrs	r3, r3, #4
 800bd7c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d047      	beq.n	800be14 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d128      	bne.n	800bde0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	2b28      	cmp	r3, #40	; 0x28
 800bd98:	d108      	bne.n	800bdac <I2C_Slave_ISR_IT+0x8e>
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bda0:	d104      	bne.n	800bdac <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800bda2:	6939      	ldr	r1, [r7, #16]
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f001 f909 	bl	800cfbc <I2C_ITListenCplt>
 800bdaa:	e032      	b.n	800be12 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	2b29      	cmp	r3, #41	; 0x29
 800bdb6:	d10e      	bne.n	800bdd6 <I2C_Slave_ISR_IT+0xb8>
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bdbe:	d00a      	beq.n	800bdd6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2210      	movs	r2, #16
 800bdc6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f001 fa64 	bl	800d296 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f000 fd71 	bl	800c8b6 <I2C_ITSlaveSeqCplt>
 800bdd4:	e01d      	b.n	800be12 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	2210      	movs	r2, #16
 800bddc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800bdde:	e096      	b.n	800bf0e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2210      	movs	r2, #16
 800bde6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdec:	f043 0204 	orr.w	r2, r3, #4
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d004      	beq.n	800be04 <I2C_Slave_ISR_IT+0xe6>
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be00:	f040 8085 	bne.w	800bf0e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be08:	4619      	mov	r1, r3
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	f001 f92c 	bl	800d068 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800be10:	e07d      	b.n	800bf0e <I2C_Slave_ISR_IT+0x1f0>
 800be12:	e07c      	b.n	800bf0e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	089b      	lsrs	r3, r3, #2
 800be18:	f003 0301 	and.w	r3, r3, #1
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d030      	beq.n	800be82 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	089b      	lsrs	r3, r3, #2
 800be24:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d02a      	beq.n	800be82 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be30:	b29b      	uxth	r3, r3
 800be32:	2b00      	cmp	r3, #0
 800be34:	d018      	beq.n	800be68 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be40:	b2d2      	uxtb	r2, r2
 800be42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be48:	1c5a      	adds	r2, r3, #1
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be52:	3b01      	subs	r3, #1
 800be54:	b29a      	uxth	r2, r3
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be5e:	b29b      	uxth	r3, r3
 800be60:	3b01      	subs	r3, #1
 800be62:	b29a      	uxth	r2, r3
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d14f      	bne.n	800bf12 <I2C_Slave_ISR_IT+0x1f4>
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800be78:	d04b      	beq.n	800bf12 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f000 fd1b 	bl	800c8b6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800be80:	e047      	b.n	800bf12 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	08db      	lsrs	r3, r3, #3
 800be86:	f003 0301 	and.w	r3, r3, #1
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00a      	beq.n	800bea4 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	08db      	lsrs	r3, r3, #3
 800be92:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800be96:	2b00      	cmp	r3, #0
 800be98:	d004      	beq.n	800bea4 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800be9a:	6939      	ldr	r1, [r7, #16]
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f000 fc49 	bl	800c734 <I2C_ITAddrCplt>
 800bea2:	e037      	b.n	800bf14 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	085b      	lsrs	r3, r3, #1
 800bea8:	f003 0301 	and.w	r3, r3, #1
 800beac:	2b00      	cmp	r3, #0
 800beae:	d031      	beq.n	800bf14 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	085b      	lsrs	r3, r3, #1
 800beb4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d02b      	beq.n	800bf14 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d018      	beq.n	800bef8 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beca:	781a      	ldrb	r2, [r3, #0]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed6:	1c5a      	adds	r2, r3, #1
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	3b01      	subs	r3, #1
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beee:	3b01      	subs	r3, #1
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	851a      	strh	r2, [r3, #40]	; 0x28
 800bef6:	e00d      	b.n	800bf14 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800befe:	d002      	beq.n	800bf06 <I2C_Slave_ISR_IT+0x1e8>
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d106      	bne.n	800bf14 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f000 fcd5 	bl	800c8b6 <I2C_ITSlaveSeqCplt>
 800bf0c:	e002      	b.n	800bf14 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800bf0e:	bf00      	nop
 800bf10:	e000      	b.n	800bf14 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800bf12:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3718      	adds	r7, #24
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b088      	sub	sp, #32
 800bf2a:	af02      	add	r7, sp, #8
 800bf2c:	60f8      	str	r0, [r7, #12]
 800bf2e:	60b9      	str	r1, [r7, #8]
 800bf30:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d101      	bne.n	800bf40 <I2C_Master_ISR_DMA+0x1a>
 800bf3c:	2302      	movs	r3, #2
 800bf3e:	e0e1      	b.n	800c104 <I2C_Master_ISR_DMA+0x1de>
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2201      	movs	r2, #1
 800bf44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	091b      	lsrs	r3, r3, #4
 800bf4c:	f003 0301 	and.w	r3, r3, #1
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d017      	beq.n	800bf84 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	091b      	lsrs	r3, r3, #4
 800bf58:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d011      	beq.n	800bf84 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2210      	movs	r2, #16
 800bf66:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf6c:	f043 0204 	orr.w	r2, r3, #4
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bf74:	2120      	movs	r1, #32
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f001 fbd2 	bl	800d720 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f001 f98a 	bl	800d296 <I2C_Flush_TXDR>
 800bf82:	e0ba      	b.n	800c0fa <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	09db      	lsrs	r3, r3, #7
 800bf88:	f003 0301 	and.w	r3, r3, #1
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d072      	beq.n	800c076 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	099b      	lsrs	r3, r3, #6
 800bf94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d06c      	beq.n	800c076 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	681a      	ldr	r2, [r3, #0]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bfaa:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfb0:	b29b      	uxth	r3, r3
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d04e      	beq.n	800c054 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfc2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	2bff      	cmp	r3, #255	; 0xff
 800bfcc:	d906      	bls.n	800bfdc <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	22ff      	movs	r2, #255	; 0xff
 800bfd2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800bfd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bfd8:	617b      	str	r3, [r7, #20]
 800bfda:	e010      	b.n	800bffe <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bfee:	d003      	beq.n	800bff8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff4:	617b      	str	r3, [r7, #20]
 800bff6:	e002      	b.n	800bffe <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800bff8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bffc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c002:	b2da      	uxtb	r2, r3
 800c004:	8a79      	ldrh	r1, [r7, #18]
 800c006:	2300      	movs	r3, #0
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f001 fb55 	bl	800d6bc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c016:	b29a      	uxth	r2, r3
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	b29a      	uxth	r2, r3
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	2b22      	cmp	r3, #34	; 0x22
 800c02e:	d108      	bne.n	800c042 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c03e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c040:	e05b      	b.n	800c0fa <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	681a      	ldr	r2, [r3, #0]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c050:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c052:	e052      	b.n	800c0fa <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c05e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c062:	d003      	beq.n	800c06c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c064:	68f8      	ldr	r0, [r7, #12]
 800c066:	f000 fbe9 	bl	800c83c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c06a:	e046      	b.n	800c0fa <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c06c:	2140      	movs	r1, #64	; 0x40
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f000 fffa 	bl	800d068 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c074:	e041      	b.n	800c0fa <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	099b      	lsrs	r3, r3, #6
 800c07a:	f003 0301 	and.w	r3, r3, #1
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d029      	beq.n	800c0d6 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	099b      	lsrs	r3, r3, #6
 800c086:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d023      	beq.n	800c0d6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c092:	b29b      	uxth	r3, r3
 800c094:	2b00      	cmp	r3, #0
 800c096:	d119      	bne.n	800c0cc <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0a6:	d027      	beq.n	800c0f8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c0b0:	d108      	bne.n	800c0c4 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	685a      	ldr	r2, [r3, #4]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c0c0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c0c2:	e019      	b.n	800c0f8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f000 fbb9 	bl	800c83c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c0ca:	e015      	b.n	800c0f8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c0cc:	2140      	movs	r1, #64	; 0x40
 800c0ce:	68f8      	ldr	r0, [r7, #12]
 800c0d0:	f000 ffca 	bl	800d068 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c0d4:	e010      	b.n	800c0f8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	095b      	lsrs	r3, r3, #5
 800c0da:	f003 0301 	and.w	r3, r3, #1
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00b      	beq.n	800c0fa <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	095b      	lsrs	r3, r3, #5
 800c0e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d005      	beq.n	800c0fa <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c0ee:	68b9      	ldr	r1, [r7, #8]
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f000 fc3f 	bl	800c974 <I2C_ITMasterCplt>
 800c0f6:	e000      	b.n	800c0fa <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800c0f8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c102:	2300      	movs	r3, #0
}
 800c104:	4618      	mov	r0, r3
 800c106:	3718      	adds	r7, #24
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b088      	sub	sp, #32
 800c110:	af02      	add	r7, sp, #8
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c118:	4b92      	ldr	r3, [pc, #584]	; (800c364 <I2C_Mem_ISR_DMA+0x258>)
 800c11a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c122:	2b01      	cmp	r3, #1
 800c124:	d101      	bne.n	800c12a <I2C_Mem_ISR_DMA+0x1e>
 800c126:	2302      	movs	r3, #2
 800c128:	e118      	b.n	800c35c <I2C_Mem_ISR_DMA+0x250>
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2201      	movs	r2, #1
 800c12e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	091b      	lsrs	r3, r3, #4
 800c136:	f003 0301 	and.w	r3, r3, #1
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d017      	beq.n	800c16e <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	091b      	lsrs	r3, r3, #4
 800c142:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c146:	2b00      	cmp	r3, #0
 800c148:	d011      	beq.n	800c16e <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2210      	movs	r2, #16
 800c150:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c156:	f043 0204 	orr.w	r2, r3, #4
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c15e:	2120      	movs	r1, #32
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f001 fadd 	bl	800d720 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c166:	68f8      	ldr	r0, [r7, #12]
 800c168:	f001 f895 	bl	800d296 <I2C_Flush_TXDR>
 800c16c:	e0f1      	b.n	800c352 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	085b      	lsrs	r3, r3, #1
 800c172:	f003 0301 	and.w	r3, r3, #1
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00f      	beq.n	800c19a <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	085b      	lsrs	r3, r3, #1
 800c17e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c182:	2b00      	cmp	r3, #0
 800c184:	d009      	beq.n	800c19a <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c18e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c196:	651a      	str	r2, [r3, #80]	; 0x50
 800c198:	e0db      	b.n	800c352 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	09db      	lsrs	r3, r3, #7
 800c19e:	f003 0301 	and.w	r3, r3, #1
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d060      	beq.n	800c268 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	099b      	lsrs	r3, r3, #6
 800c1aa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d05a      	beq.n	800c268 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c1b2:	2101      	movs	r1, #1
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f001 fb37 	bl	800d828 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c1ba:	2110      	movs	r1, #16
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	f001 faaf 	bl	800d720 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d048      	beq.n	800c25e <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	2bff      	cmp	r3, #255	; 0xff
 800c1d4:	d910      	bls.n	800c1f8 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	22ff      	movs	r2, #255	; 0xff
 800c1da:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1e0:	b299      	uxth	r1, r3
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1e6:	b2da      	uxtb	r2, r3
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c1f0:	68f8      	ldr	r0, [r7, #12]
 800c1f2:	f001 fa63 	bl	800d6bc <I2C_TransferConfig>
 800c1f6:	e011      	b.n	800c21c <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c206:	b299      	uxth	r1, r3
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	2300      	movs	r3, #0
 800c210:	9300      	str	r3, [sp, #0]
 800c212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	f001 fa50 	bl	800d6bc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c220:	b29a      	uxth	r2, r3
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	b29a      	uxth	r2, r3
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c234:	b2db      	uxtb	r3, r3
 800c236:	2b22      	cmp	r3, #34	; 0x22
 800c238:	d108      	bne.n	800c24c <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c248:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c24a:	e082      	b.n	800c352 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c25a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c25c:	e079      	b.n	800c352 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c25e:	2140      	movs	r1, #64	; 0x40
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	f000 ff01 	bl	800d068 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c266:	e074      	b.n	800c352 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	099b      	lsrs	r3, r3, #6
 800c26c:	f003 0301 	and.w	r3, r3, #1
 800c270:	2b00      	cmp	r3, #0
 800c272:	d05e      	beq.n	800c332 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	099b      	lsrs	r3, r3, #6
 800c278:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d058      	beq.n	800c332 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c280:	2101      	movs	r1, #1
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	f001 fad0 	bl	800d828 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c288:	2110      	movs	r1, #16
 800c28a:	68f8      	ldr	r0, [r7, #12]
 800c28c:	f001 fa48 	bl	800d720 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c296:	b2db      	uxtb	r3, r3
 800c298:	2b22      	cmp	r3, #34	; 0x22
 800c29a:	d101      	bne.n	800c2a0 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800c29c:	4b32      	ldr	r3, [pc, #200]	; (800c368 <I2C_Mem_ISR_DMA+0x25c>)
 800c29e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	2bff      	cmp	r3, #255	; 0xff
 800c2a8:	d910      	bls.n	800c2cc <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	22ff      	movs	r2, #255	; 0xff
 800c2ae:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2b4:	b299      	uxth	r1, r3
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2ba:	b2da      	uxtb	r2, r3
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c2c4:	68f8      	ldr	r0, [r7, #12]
 800c2c6:	f001 f9f9 	bl	800d6bc <I2C_TransferConfig>
 800c2ca:	e011      	b.n	800c2f0 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2da:	b299      	uxth	r1, r3
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2e0:	b2da      	uxtb	r2, r3
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	9300      	str	r3, [sp, #0]
 800c2e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f001 f9e6 	bl	800d6bc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2f4:	b29a      	uxth	r2, r3
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	2b22      	cmp	r3, #34	; 0x22
 800c30c:	d108      	bne.n	800c320 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c31c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c31e:	e018      	b.n	800c352 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c32e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c330:	e00f      	b.n	800c352 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	095b      	lsrs	r3, r3, #5
 800c336:	f003 0301 	and.w	r3, r3, #1
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d009      	beq.n	800c352 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	095b      	lsrs	r3, r3, #5
 800c342:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c346:	2b00      	cmp	r3, #0
 800c348:	d003      	beq.n	800c352 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c34a:	68b9      	ldr	r1, [r7, #8]
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f000 fb11 	bl	800c974 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2200      	movs	r2, #0
 800c356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c35a:	2300      	movs	r3, #0
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3718      	adds	r7, #24
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	80002000 	.word	0x80002000
 800c368:	80002400 	.word	0x80002400

0800c36c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b088      	sub	sp, #32
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c37c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c37e:	2300      	movs	r3, #0
 800c380:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d101      	bne.n	800c390 <I2C_Slave_ISR_DMA+0x24>
 800c38c:	2302      	movs	r3, #2
 800c38e:	e1cc      	b.n	800c72a <I2C_Slave_ISR_DMA+0x3be>
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2201      	movs	r2, #1
 800c394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	095b      	lsrs	r3, r3, #5
 800c39c:	f003 0301 	and.w	r3, r3, #1
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d00a      	beq.n	800c3ba <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	095b      	lsrs	r3, r3, #5
 800c3a8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d004      	beq.n	800c3ba <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c3b0:	68b9      	ldr	r1, [r7, #8]
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f000 fba8 	bl	800cb08 <I2C_ITSlaveCplt>
 800c3b8:	e1b2      	b.n	800c720 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	091b      	lsrs	r3, r3, #4
 800c3be:	f003 0301 	and.w	r3, r3, #1
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f000 819c 	beq.w	800c700 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	091b      	lsrs	r3, r3, #4
 800c3cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f000 8195 	beq.w	800c700 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	0b9b      	lsrs	r3, r3, #14
 800c3da:	f003 0301 	and.w	r3, r3, #1
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d106      	bne.n	800c3f0 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	0bdb      	lsrs	r3, r3, #15
 800c3e6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f000 8181 	beq.w	800c6f2 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d07c      	beq.n	800c4f2 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	0bdb      	lsrs	r3, r3, #15
 800c3fc:	f003 0301 	and.w	r3, r3, #1
 800c400:	2b00      	cmp	r3, #0
 800c402:	d076      	beq.n	800c4f2 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a75      	ldr	r2, [pc, #468]	; (800c5e0 <I2C_Slave_ISR_DMA+0x274>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d059      	beq.n	800c4c4 <I2C_Slave_ISR_DMA+0x158>
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a73      	ldr	r2, [pc, #460]	; (800c5e4 <I2C_Slave_ISR_DMA+0x278>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d053      	beq.n	800c4c4 <I2C_Slave_ISR_DMA+0x158>
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a71      	ldr	r2, [pc, #452]	; (800c5e8 <I2C_Slave_ISR_DMA+0x27c>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d04d      	beq.n	800c4c4 <I2C_Slave_ISR_DMA+0x158>
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a6f      	ldr	r2, [pc, #444]	; (800c5ec <I2C_Slave_ISR_DMA+0x280>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d047      	beq.n	800c4c4 <I2C_Slave_ISR_DMA+0x158>
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a6d      	ldr	r2, [pc, #436]	; (800c5f0 <I2C_Slave_ISR_DMA+0x284>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d041      	beq.n	800c4c4 <I2C_Slave_ISR_DMA+0x158>
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a6b      	ldr	r2, [pc, #428]	; (800c5f4 <I2C_Slave_ISR_DMA+0x288>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d03b      	beq.n	800c4c4 <I2C_Slave_ISR_DMA+0x158>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a69      	ldr	r2, [pc, #420]	; (800c5f8 <I2C_Slave_ISR_DMA+0x28c>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d035      	beq.n	800c4c4 <I2C_Slave_ISR_DMA+0x158>
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a67      	ldr	r2, [pc, #412]	; (800c5fc <I2C_Slave_ISR_DMA+0x290>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d02f      	beq.n	800c4c4 <I2C_Slave_ISR_DMA+0x158>
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a65      	ldr	r2, [pc, #404]	; (800c600 <I2C_Slave_ISR_DMA+0x294>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d029      	beq.n	800c4c4 <I2C_Slave_ISR_DMA+0x158>
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a63      	ldr	r2, [pc, #396]	; (800c604 <I2C_Slave_ISR_DMA+0x298>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d023      	beq.n	800c4c4 <I2C_Slave_ISR_DMA+0x158>
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a61      	ldr	r2, [pc, #388]	; (800c608 <I2C_Slave_ISR_DMA+0x29c>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d01d      	beq.n	800c4c4 <I2C_Slave_ISR_DMA+0x158>
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a5f      	ldr	r2, [pc, #380]	; (800c60c <I2C_Slave_ISR_DMA+0x2a0>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d017      	beq.n	800c4c4 <I2C_Slave_ISR_DMA+0x158>
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a5d      	ldr	r2, [pc, #372]	; (800c610 <I2C_Slave_ISR_DMA+0x2a4>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d011      	beq.n	800c4c4 <I2C_Slave_ISR_DMA+0x158>
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a5b      	ldr	r2, [pc, #364]	; (800c614 <I2C_Slave_ISR_DMA+0x2a8>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d00b      	beq.n	800c4c4 <I2C_Slave_ISR_DMA+0x158>
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a59      	ldr	r2, [pc, #356]	; (800c618 <I2C_Slave_ISR_DMA+0x2ac>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d005      	beq.n	800c4c4 <I2C_Slave_ISR_DMA+0x158>
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a57      	ldr	r2, [pc, #348]	; (800c61c <I2C_Slave_ISR_DMA+0x2b0>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d109      	bne.n	800c4d8 <I2C_Slave_ISR_DMA+0x16c>
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	bf0c      	ite	eq
 800c4d0:	2301      	moveq	r3, #1
 800c4d2:	2300      	movne	r3, #0
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	e008      	b.n	800c4ea <I2C_Slave_ISR_DMA+0x17e>
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	bf0c      	ite	eq
 800c4e4:	2301      	moveq	r3, #1
 800c4e6:	2300      	movne	r3, #0
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d001      	beq.n	800c4f2 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f000 809f 	beq.w	800c63a <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	0b9b      	lsrs	r3, r3, #14
 800c500:	f003 0301 	and.w	r3, r3, #1
 800c504:	2b00      	cmp	r3, #0
 800c506:	f000 8098 	beq.w	800c63a <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a33      	ldr	r2, [pc, #204]	; (800c5e0 <I2C_Slave_ISR_DMA+0x274>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d059      	beq.n	800c5ca <I2C_Slave_ISR_DMA+0x25e>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a31      	ldr	r2, [pc, #196]	; (800c5e4 <I2C_Slave_ISR_DMA+0x278>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d053      	beq.n	800c5ca <I2C_Slave_ISR_DMA+0x25e>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a2f      	ldr	r2, [pc, #188]	; (800c5e8 <I2C_Slave_ISR_DMA+0x27c>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d04d      	beq.n	800c5ca <I2C_Slave_ISR_DMA+0x25e>
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a2d      	ldr	r2, [pc, #180]	; (800c5ec <I2C_Slave_ISR_DMA+0x280>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d047      	beq.n	800c5ca <I2C_Slave_ISR_DMA+0x25e>
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a2b      	ldr	r2, [pc, #172]	; (800c5f0 <I2C_Slave_ISR_DMA+0x284>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d041      	beq.n	800c5ca <I2C_Slave_ISR_DMA+0x25e>
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a29      	ldr	r2, [pc, #164]	; (800c5f4 <I2C_Slave_ISR_DMA+0x288>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d03b      	beq.n	800c5ca <I2C_Slave_ISR_DMA+0x25e>
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a27      	ldr	r2, [pc, #156]	; (800c5f8 <I2C_Slave_ISR_DMA+0x28c>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d035      	beq.n	800c5ca <I2C_Slave_ISR_DMA+0x25e>
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a25      	ldr	r2, [pc, #148]	; (800c5fc <I2C_Slave_ISR_DMA+0x290>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d02f      	beq.n	800c5ca <I2C_Slave_ISR_DMA+0x25e>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a23      	ldr	r2, [pc, #140]	; (800c600 <I2C_Slave_ISR_DMA+0x294>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d029      	beq.n	800c5ca <I2C_Slave_ISR_DMA+0x25e>
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4a21      	ldr	r2, [pc, #132]	; (800c604 <I2C_Slave_ISR_DMA+0x298>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d023      	beq.n	800c5ca <I2C_Slave_ISR_DMA+0x25e>
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a1f      	ldr	r2, [pc, #124]	; (800c608 <I2C_Slave_ISR_DMA+0x29c>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d01d      	beq.n	800c5ca <I2C_Slave_ISR_DMA+0x25e>
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a1d      	ldr	r2, [pc, #116]	; (800c60c <I2C_Slave_ISR_DMA+0x2a0>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d017      	beq.n	800c5ca <I2C_Slave_ISR_DMA+0x25e>
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a1b      	ldr	r2, [pc, #108]	; (800c610 <I2C_Slave_ISR_DMA+0x2a4>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d011      	beq.n	800c5ca <I2C_Slave_ISR_DMA+0x25e>
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a19      	ldr	r2, [pc, #100]	; (800c614 <I2C_Slave_ISR_DMA+0x2a8>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d00b      	beq.n	800c5ca <I2C_Slave_ISR_DMA+0x25e>
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a17      	ldr	r2, [pc, #92]	; (800c618 <I2C_Slave_ISR_DMA+0x2ac>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d005      	beq.n	800c5ca <I2C_Slave_ISR_DMA+0x25e>
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a15      	ldr	r2, [pc, #84]	; (800c61c <I2C_Slave_ISR_DMA+0x2b0>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d12a      	bne.n	800c620 <I2C_Slave_ISR_DMA+0x2b4>
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	bf0c      	ite	eq
 800c5d6:	2301      	moveq	r3, #1
 800c5d8:	2300      	movne	r3, #0
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	e029      	b.n	800c632 <I2C_Slave_ISR_DMA+0x2c6>
 800c5de:	bf00      	nop
 800c5e0:	40020010 	.word	0x40020010
 800c5e4:	40020028 	.word	0x40020028
 800c5e8:	40020040 	.word	0x40020040
 800c5ec:	40020058 	.word	0x40020058
 800c5f0:	40020070 	.word	0x40020070
 800c5f4:	40020088 	.word	0x40020088
 800c5f8:	400200a0 	.word	0x400200a0
 800c5fc:	400200b8 	.word	0x400200b8
 800c600:	40020410 	.word	0x40020410
 800c604:	40020428 	.word	0x40020428
 800c608:	40020440 	.word	0x40020440
 800c60c:	40020458 	.word	0x40020458
 800c610:	40020470 	.word	0x40020470
 800c614:	40020488 	.word	0x40020488
 800c618:	400204a0 	.word	0x400204a0
 800c61c:	400204b8 	.word	0x400204b8
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	bf0c      	ite	eq
 800c62c:	2301      	moveq	r3, #1
 800c62e:	2300      	movne	r3, #0
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b00      	cmp	r3, #0
 800c634:	d001      	beq.n	800c63a <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800c636:	2301      	movs	r3, #1
 800c638:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d128      	bne.n	800c692 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c646:	b2db      	uxtb	r3, r3
 800c648:	2b28      	cmp	r3, #40	; 0x28
 800c64a:	d108      	bne.n	800c65e <I2C_Slave_ISR_DMA+0x2f2>
 800c64c:	69bb      	ldr	r3, [r7, #24]
 800c64e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c652:	d104      	bne.n	800c65e <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c654:	68b9      	ldr	r1, [r7, #8]
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	f000 fcb0 	bl	800cfbc <I2C_ITListenCplt>
 800c65c:	e048      	b.n	800c6f0 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c664:	b2db      	uxtb	r3, r3
 800c666:	2b29      	cmp	r3, #41	; 0x29
 800c668:	d10e      	bne.n	800c688 <I2C_Slave_ISR_DMA+0x31c>
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c670:	d00a      	beq.n	800c688 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2210      	movs	r2, #16
 800c678:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f000 fe0b 	bl	800d296 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f000 f918 	bl	800c8b6 <I2C_ITSlaveSeqCplt>
 800c686:	e033      	b.n	800c6f0 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2210      	movs	r2, #16
 800c68e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c690:	e034      	b.n	800c6fc <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2210      	movs	r2, #16
 800c698:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c69e:	f043 0204 	orr.w	r2, r3, #4
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6ac:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d003      	beq.n	800c6bc <I2C_Slave_ISR_DMA+0x350>
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c6ba:	d11f      	bne.n	800c6fc <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c6bc:	7dfb      	ldrb	r3, [r7, #23]
 800c6be:	2b21      	cmp	r3, #33	; 0x21
 800c6c0:	d002      	beq.n	800c6c8 <I2C_Slave_ISR_DMA+0x35c>
 800c6c2:	7dfb      	ldrb	r3, [r7, #23]
 800c6c4:	2b29      	cmp	r3, #41	; 0x29
 800c6c6:	d103      	bne.n	800c6d0 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2221      	movs	r2, #33	; 0x21
 800c6cc:	631a      	str	r2, [r3, #48]	; 0x30
 800c6ce:	e008      	b.n	800c6e2 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c6d0:	7dfb      	ldrb	r3, [r7, #23]
 800c6d2:	2b22      	cmp	r3, #34	; 0x22
 800c6d4:	d002      	beq.n	800c6dc <I2C_Slave_ISR_DMA+0x370>
 800c6d6:	7dfb      	ldrb	r3, [r7, #23]
 800c6d8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6da:	d102      	bne.n	800c6e2 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2222      	movs	r2, #34	; 0x22
 800c6e0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	68f8      	ldr	r0, [r7, #12]
 800c6ea:	f000 fcbd 	bl	800d068 <I2C_ITError>
      if (treatdmanack == 1U)
 800c6ee:	e005      	b.n	800c6fc <I2C_Slave_ISR_DMA+0x390>
 800c6f0:	e004      	b.n	800c6fc <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2210      	movs	r2, #16
 800c6f8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c6fa:	e011      	b.n	800c720 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800c6fc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c6fe:	e00f      	b.n	800c720 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	08db      	lsrs	r3, r3, #3
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d009      	beq.n	800c720 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	08db      	lsrs	r3, r3, #3
 800c710:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c714:	2b00      	cmp	r3, #0
 800c716:	d003      	beq.n	800c720 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c718:	68b9      	ldr	r1, [r7, #8]
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f000 f80a 	bl	800c734 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2200      	movs	r2, #0
 800c724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c728:	2300      	movs	r3, #0
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3720      	adds	r7, #32
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop

0800c734 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c744:	b2db      	uxtb	r3, r3
 800c746:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c74a:	2b28      	cmp	r3, #40	; 0x28
 800c74c:	d16a      	bne.n	800c824 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	699b      	ldr	r3, [r3, #24]
 800c754:	0c1b      	lsrs	r3, r3, #16
 800c756:	b2db      	uxtb	r3, r3
 800c758:	f003 0301 	and.w	r3, r3, #1
 800c75c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	699b      	ldr	r3, [r3, #24]
 800c764:	0c1b      	lsrs	r3, r3, #16
 800c766:	b29b      	uxth	r3, r3
 800c768:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c76c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	b29b      	uxth	r3, r3
 800c776:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c77a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	b29b      	uxth	r3, r3
 800c784:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c788:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	2b02      	cmp	r3, #2
 800c790:	d138      	bne.n	800c804 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c792:	897b      	ldrh	r3, [r7, #10]
 800c794:	09db      	lsrs	r3, r3, #7
 800c796:	b29a      	uxth	r2, r3
 800c798:	89bb      	ldrh	r3, [r7, #12]
 800c79a:	4053      	eors	r3, r2
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	f003 0306 	and.w	r3, r3, #6
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d11c      	bne.n	800c7e0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c7a6:	897b      	ldrh	r3, [r7, #10]
 800c7a8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7ae:	1c5a      	adds	r2, r3, #1
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7b8:	2b02      	cmp	r3, #2
 800c7ba:	d13b      	bne.n	800c834 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2208      	movs	r2, #8
 800c7c8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c7d2:	89ba      	ldrh	r2, [r7, #12]
 800c7d4:	7bfb      	ldrb	r3, [r7, #15]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f7ff f91e 	bl	800ba1a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c7de:	e029      	b.n	800c834 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c7e0:	893b      	ldrh	r3, [r7, #8]
 800c7e2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c7e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f001 f81d 	bl	800d828 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c7f6:	89ba      	ldrh	r2, [r7, #12]
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f7ff f90c 	bl	800ba1a <HAL_I2C_AddrCallback>
}
 800c802:	e017      	b.n	800c834 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f001 f80d 	bl	800d828 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c816:	89ba      	ldrh	r2, [r7, #12]
 800c818:	7bfb      	ldrb	r3, [r7, #15]
 800c81a:	4619      	mov	r1, r3
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f7ff f8fc 	bl	800ba1a <HAL_I2C_AddrCallback>
}
 800c822:	e007      	b.n	800c834 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2208      	movs	r2, #8
 800c82a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c834:	bf00      	nop
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c852:	b2db      	uxtb	r3, r3
 800c854:	2b21      	cmp	r3, #33	; 0x21
 800c856:	d115      	bne.n	800c884 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2220      	movs	r2, #32
 800c85c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2211      	movs	r2, #17
 800c864:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c86c:	2101      	movs	r1, #1
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 ffda 	bl	800d828 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7ff f8a4 	bl	800b9ca <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c882:	e014      	b.n	800c8ae <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2220      	movs	r2, #32
 800c888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2212      	movs	r2, #18
 800c890:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c898:	2102      	movs	r1, #2
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 ffc4 	bl	800d828 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f7ff f898 	bl	800b9de <HAL_I2C_MasterRxCpltCallback>
}
 800c8ae:	bf00      	nop
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b084      	sub	sp, #16
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	0b9b      	lsrs	r3, r3, #14
 800c8d2:	f003 0301 	and.w	r3, r3, #1
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d008      	beq.n	800c8ec <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c8e8:	601a      	str	r2, [r3, #0]
 800c8ea:	e00d      	b.n	800c908 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	0bdb      	lsrs	r3, r3, #15
 800c8f0:	f003 0301 	and.w	r3, r3, #1
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d007      	beq.n	800c908 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c906:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	2b29      	cmp	r3, #41	; 0x29
 800c912:	d112      	bne.n	800c93a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2228      	movs	r2, #40	; 0x28
 800c918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2221      	movs	r2, #33	; 0x21
 800c920:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c922:	2101      	movs	r1, #1
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 ff7f 	bl	800d828 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f7ff f85d 	bl	800b9f2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c938:	e017      	b.n	800c96a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c940:	b2db      	uxtb	r3, r3
 800c942:	2b2a      	cmp	r3, #42	; 0x2a
 800c944:	d111      	bne.n	800c96a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2228      	movs	r2, #40	; 0x28
 800c94a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	2222      	movs	r2, #34	; 0x22
 800c952:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c954:	2102      	movs	r1, #2
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 ff66 	bl	800d828 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f7ff f84e 	bl	800ba06 <HAL_I2C_SlaveRxCpltCallback>
}
 800c96a:	bf00      	nop
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
	...

0800c974 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b086      	sub	sp, #24
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2220      	movs	r2, #32
 800c988:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c990:	b2db      	uxtb	r3, r3
 800c992:	2b21      	cmp	r3, #33	; 0x21
 800c994:	d107      	bne.n	800c9a6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c996:	2101      	movs	r1, #1
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 ff45 	bl	800d828 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2211      	movs	r2, #17
 800c9a2:	631a      	str	r2, [r3, #48]	; 0x30
 800c9a4:	e00c      	b.n	800c9c0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	2b22      	cmp	r3, #34	; 0x22
 800c9b0:	d106      	bne.n	800c9c0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c9b2:	2102      	movs	r1, #2
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 ff37 	bl	800d828 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2212      	movs	r2, #18
 800c9be:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	6859      	ldr	r1, [r3, #4]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	4b4d      	ldr	r3, [pc, #308]	; (800cb00 <I2C_ITMasterCplt+0x18c>)
 800c9cc:	400b      	ands	r3, r1
 800c9ce:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	4a4a      	ldr	r2, [pc, #296]	; (800cb04 <I2C_ITMasterCplt+0x190>)
 800c9da:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	091b      	lsrs	r3, r3, #4
 800c9e0:	f003 0301 	and.w	r3, r3, #1
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d009      	beq.n	800c9fc <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	2210      	movs	r2, #16
 800c9ee:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9f4:	f043 0204 	orr.w	r2, r3, #4
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	2b60      	cmp	r3, #96	; 0x60
 800ca06:	d10b      	bne.n	800ca20 <I2C_ITMasterCplt+0xac>
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	089b      	lsrs	r3, r3, #2
 800ca0c:	f003 0301 	and.w	r3, r3, #1
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d005      	beq.n	800ca20 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f000 fc38 	bl	800d296 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca2a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	2b60      	cmp	r3, #96	; 0x60
 800ca36:	d002      	beq.n	800ca3e <I2C_ITMasterCplt+0xca>
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d006      	beq.n	800ca4c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca42:	4619      	mov	r1, r3
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 fb0f 	bl	800d068 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ca4a:	e054      	b.n	800caf6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	2b21      	cmp	r3, #33	; 0x21
 800ca56:	d124      	bne.n	800caa2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2220      	movs	r2, #32
 800ca5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	2b40      	cmp	r3, #64	; 0x40
 800ca70:	d10b      	bne.n	800ca8a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f7fe ffe1 	bl	800ba4a <HAL_I2C_MemTxCpltCallback>
}
 800ca88:	e035      	b.n	800caf6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2200      	movs	r2, #0
 800ca96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f7fe ff95 	bl	800b9ca <HAL_I2C_MasterTxCpltCallback>
}
 800caa0:	e029      	b.n	800caf6 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	2b22      	cmp	r3, #34	; 0x22
 800caac:	d123      	bne.n	800caf6 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2220      	movs	r2, #32
 800cab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	2b40      	cmp	r3, #64	; 0x40
 800cac6:	d10b      	bne.n	800cae0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f7fe ffc0 	bl	800ba5e <HAL_I2C_MemRxCpltCallback>
}
 800cade:	e00a      	b.n	800caf6 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f7fe ff74 	bl	800b9de <HAL_I2C_MasterRxCpltCallback>
}
 800caf6:	bf00      	nop
 800caf8:	3718      	adds	r7, #24
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	fe00e800 	.word	0xfe00e800
 800cb04:	ffff0000 	.word	0xffff0000

0800cb08 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb22:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb2a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2220      	movs	r2, #32
 800cb32:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cb34:	7afb      	ldrb	r3, [r7, #11]
 800cb36:	2b21      	cmp	r3, #33	; 0x21
 800cb38:	d002      	beq.n	800cb40 <I2C_ITSlaveCplt+0x38>
 800cb3a:	7afb      	ldrb	r3, [r7, #11]
 800cb3c:	2b29      	cmp	r3, #41	; 0x29
 800cb3e:	d108      	bne.n	800cb52 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800cb40:	f248 0101 	movw	r1, #32769	; 0x8001
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 fe6f 	bl	800d828 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2221      	movs	r2, #33	; 0x21
 800cb4e:	631a      	str	r2, [r3, #48]	; 0x30
 800cb50:	e019      	b.n	800cb86 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cb52:	7afb      	ldrb	r3, [r7, #11]
 800cb54:	2b22      	cmp	r3, #34	; 0x22
 800cb56:	d002      	beq.n	800cb5e <I2C_ITSlaveCplt+0x56>
 800cb58:	7afb      	ldrb	r3, [r7, #11]
 800cb5a:	2b2a      	cmp	r3, #42	; 0x2a
 800cb5c:	d108      	bne.n	800cb70 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800cb5e:	f248 0102 	movw	r1, #32770	; 0x8002
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 fe60 	bl	800d828 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2222      	movs	r2, #34	; 0x22
 800cb6c:	631a      	str	r2, [r3, #48]	; 0x30
 800cb6e:	e00a      	b.n	800cb86 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800cb70:	7afb      	ldrb	r3, [r7, #11]
 800cb72:	2b28      	cmp	r3, #40	; 0x28
 800cb74:	d107      	bne.n	800cb86 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800cb76:	f248 0103 	movw	r1, #32771	; 0x8003
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 fe54 	bl	800d828 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb94:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	6859      	ldr	r1, [r3, #4]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	4b80      	ldr	r3, [pc, #512]	; (800cda4 <I2C_ITSlaveCplt+0x29c>)
 800cba2:	400b      	ands	r3, r1
 800cba4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 fb75 	bl	800d296 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	0b9b      	lsrs	r3, r3, #14
 800cbb0:	f003 0301 	and.w	r3, r3, #1
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d07a      	beq.n	800ccae <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cbc6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f000 8112 	beq.w	800cdf6 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a73      	ldr	r2, [pc, #460]	; (800cda8 <I2C_ITSlaveCplt+0x2a0>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d059      	beq.n	800cc92 <I2C_ITSlaveCplt+0x18a>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a71      	ldr	r2, [pc, #452]	; (800cdac <I2C_ITSlaveCplt+0x2a4>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d053      	beq.n	800cc92 <I2C_ITSlaveCplt+0x18a>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a6f      	ldr	r2, [pc, #444]	; (800cdb0 <I2C_ITSlaveCplt+0x2a8>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d04d      	beq.n	800cc92 <I2C_ITSlaveCplt+0x18a>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a6d      	ldr	r2, [pc, #436]	; (800cdb4 <I2C_ITSlaveCplt+0x2ac>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d047      	beq.n	800cc92 <I2C_ITSlaveCplt+0x18a>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a6b      	ldr	r2, [pc, #428]	; (800cdb8 <I2C_ITSlaveCplt+0x2b0>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d041      	beq.n	800cc92 <I2C_ITSlaveCplt+0x18a>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a69      	ldr	r2, [pc, #420]	; (800cdbc <I2C_ITSlaveCplt+0x2b4>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d03b      	beq.n	800cc92 <I2C_ITSlaveCplt+0x18a>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a67      	ldr	r2, [pc, #412]	; (800cdc0 <I2C_ITSlaveCplt+0x2b8>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d035      	beq.n	800cc92 <I2C_ITSlaveCplt+0x18a>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a65      	ldr	r2, [pc, #404]	; (800cdc4 <I2C_ITSlaveCplt+0x2bc>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d02f      	beq.n	800cc92 <I2C_ITSlaveCplt+0x18a>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a63      	ldr	r2, [pc, #396]	; (800cdc8 <I2C_ITSlaveCplt+0x2c0>)
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d029      	beq.n	800cc92 <I2C_ITSlaveCplt+0x18a>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a61      	ldr	r2, [pc, #388]	; (800cdcc <I2C_ITSlaveCplt+0x2c4>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d023      	beq.n	800cc92 <I2C_ITSlaveCplt+0x18a>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a5f      	ldr	r2, [pc, #380]	; (800cdd0 <I2C_ITSlaveCplt+0x2c8>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d01d      	beq.n	800cc92 <I2C_ITSlaveCplt+0x18a>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a5d      	ldr	r2, [pc, #372]	; (800cdd4 <I2C_ITSlaveCplt+0x2cc>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d017      	beq.n	800cc92 <I2C_ITSlaveCplt+0x18a>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4a5b      	ldr	r2, [pc, #364]	; (800cdd8 <I2C_ITSlaveCplt+0x2d0>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d011      	beq.n	800cc92 <I2C_ITSlaveCplt+0x18a>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4a59      	ldr	r2, [pc, #356]	; (800cddc <I2C_ITSlaveCplt+0x2d4>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d00b      	beq.n	800cc92 <I2C_ITSlaveCplt+0x18a>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a57      	ldr	r2, [pc, #348]	; (800cde0 <I2C_ITSlaveCplt+0x2d8>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d005      	beq.n	800cc92 <I2C_ITSlaveCplt+0x18a>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4a55      	ldr	r2, [pc, #340]	; (800cde4 <I2C_ITSlaveCplt+0x2dc>)
 800cc8e:	4293      	cmp	r3, r2
 800cc90:	d105      	bne.n	800cc9e <I2C_ITSlaveCplt+0x196>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	e004      	b.n	800cca8 <I2C_ITSlaveCplt+0x1a0>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	8553      	strh	r3, [r2, #42]	; 0x2a
 800ccac:	e0a3      	b.n	800cdf6 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	0bdb      	lsrs	r3, r3, #15
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	f000 809d 	beq.w	800cdf6 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ccca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	f000 8090 	beq.w	800cdf6 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a32      	ldr	r2, [pc, #200]	; (800cda8 <I2C_ITSlaveCplt+0x2a0>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d059      	beq.n	800cd96 <I2C_ITSlaveCplt+0x28e>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a30      	ldr	r2, [pc, #192]	; (800cdac <I2C_ITSlaveCplt+0x2a4>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d053      	beq.n	800cd96 <I2C_ITSlaveCplt+0x28e>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a2e      	ldr	r2, [pc, #184]	; (800cdb0 <I2C_ITSlaveCplt+0x2a8>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d04d      	beq.n	800cd96 <I2C_ITSlaveCplt+0x28e>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a2c      	ldr	r2, [pc, #176]	; (800cdb4 <I2C_ITSlaveCplt+0x2ac>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d047      	beq.n	800cd96 <I2C_ITSlaveCplt+0x28e>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a2a      	ldr	r2, [pc, #168]	; (800cdb8 <I2C_ITSlaveCplt+0x2b0>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d041      	beq.n	800cd96 <I2C_ITSlaveCplt+0x28e>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a28      	ldr	r2, [pc, #160]	; (800cdbc <I2C_ITSlaveCplt+0x2b4>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d03b      	beq.n	800cd96 <I2C_ITSlaveCplt+0x28e>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a26      	ldr	r2, [pc, #152]	; (800cdc0 <I2C_ITSlaveCplt+0x2b8>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d035      	beq.n	800cd96 <I2C_ITSlaveCplt+0x28e>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a24      	ldr	r2, [pc, #144]	; (800cdc4 <I2C_ITSlaveCplt+0x2bc>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d02f      	beq.n	800cd96 <I2C_ITSlaveCplt+0x28e>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a22      	ldr	r2, [pc, #136]	; (800cdc8 <I2C_ITSlaveCplt+0x2c0>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d029      	beq.n	800cd96 <I2C_ITSlaveCplt+0x28e>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a20      	ldr	r2, [pc, #128]	; (800cdcc <I2C_ITSlaveCplt+0x2c4>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d023      	beq.n	800cd96 <I2C_ITSlaveCplt+0x28e>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a1e      	ldr	r2, [pc, #120]	; (800cdd0 <I2C_ITSlaveCplt+0x2c8>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d01d      	beq.n	800cd96 <I2C_ITSlaveCplt+0x28e>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a1c      	ldr	r2, [pc, #112]	; (800cdd4 <I2C_ITSlaveCplt+0x2cc>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d017      	beq.n	800cd96 <I2C_ITSlaveCplt+0x28e>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a1a      	ldr	r2, [pc, #104]	; (800cdd8 <I2C_ITSlaveCplt+0x2d0>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d011      	beq.n	800cd96 <I2C_ITSlaveCplt+0x28e>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a18      	ldr	r2, [pc, #96]	; (800cddc <I2C_ITSlaveCplt+0x2d4>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d00b      	beq.n	800cd96 <I2C_ITSlaveCplt+0x28e>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a16      	ldr	r2, [pc, #88]	; (800cde0 <I2C_ITSlaveCplt+0x2d8>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d005      	beq.n	800cd96 <I2C_ITSlaveCplt+0x28e>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a14      	ldr	r2, [pc, #80]	; (800cde4 <I2C_ITSlaveCplt+0x2dc>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d128      	bne.n	800cde8 <I2C_ITSlaveCplt+0x2e0>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	e027      	b.n	800cdf2 <I2C_ITSlaveCplt+0x2ea>
 800cda2:	bf00      	nop
 800cda4:	fe00e800 	.word	0xfe00e800
 800cda8:	40020010 	.word	0x40020010
 800cdac:	40020028 	.word	0x40020028
 800cdb0:	40020040 	.word	0x40020040
 800cdb4:	40020058 	.word	0x40020058
 800cdb8:	40020070 	.word	0x40020070
 800cdbc:	40020088 	.word	0x40020088
 800cdc0:	400200a0 	.word	0x400200a0
 800cdc4:	400200b8 	.word	0x400200b8
 800cdc8:	40020410 	.word	0x40020410
 800cdcc:	40020428 	.word	0x40020428
 800cdd0:	40020440 	.word	0x40020440
 800cdd4:	40020458 	.word	0x40020458
 800cdd8:	40020470 	.word	0x40020470
 800cddc:	40020488 	.word	0x40020488
 800cde0:	400204a0 	.word	0x400204a0
 800cde4:	400204b8 	.word	0x400204b8
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	089b      	lsrs	r3, r3, #2
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d020      	beq.n	800ce44 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	f023 0304 	bic.w	r3, r3, #4
 800ce08:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce14:	b2d2      	uxtb	r2, r2
 800ce16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1c:	1c5a      	adds	r2, r3, #1
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00c      	beq.n	800ce44 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	3b01      	subs	r3, #1
 800ce3e:	b29a      	uxth	r2, r3
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d005      	beq.n	800ce5a <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce52:	f043 0204 	orr.w	r2, r3, #4
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	091b      	lsrs	r3, r3, #4
 800ce5e:	f003 0301 	and.w	r3, r3, #1
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d04a      	beq.n	800cefc <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	091b      	lsrs	r3, r3, #4
 800ce6a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d044      	beq.n	800cefc <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d128      	bne.n	800cece <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	2b28      	cmp	r3, #40	; 0x28
 800ce86:	d108      	bne.n	800ce9a <I2C_ITSlaveCplt+0x392>
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce8e:	d104      	bne.n	800ce9a <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ce90:	6979      	ldr	r1, [r7, #20]
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 f892 	bl	800cfbc <I2C_ITListenCplt>
 800ce98:	e030      	b.n	800cefc <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	2b29      	cmp	r3, #41	; 0x29
 800cea4:	d10e      	bne.n	800cec4 <I2C_ITSlaveCplt+0x3bc>
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ceac:	d00a      	beq.n	800cec4 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2210      	movs	r2, #16
 800ceb4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f9ed 	bl	800d296 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f7ff fcfa 	bl	800c8b6 <I2C_ITSlaveSeqCplt>
 800cec2:	e01b      	b.n	800cefc <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2210      	movs	r2, #16
 800ceca:	61da      	str	r2, [r3, #28]
 800cecc:	e016      	b.n	800cefc <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2210      	movs	r2, #16
 800ced4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceda:	f043 0204 	orr.w	r2, r3, #4
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d003      	beq.n	800cef0 <I2C_ITSlaveCplt+0x3e8>
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ceee:	d105      	bne.n	800cefc <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cef4:	4619      	mov	r1, r3
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 f8b6 	bl	800d068 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2200      	movs	r2, #0
 800cf08:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d010      	beq.n	800cf34 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf16:	4619      	mov	r1, r3
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 f8a5 	bl	800d068 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	2b28      	cmp	r3, #40	; 0x28
 800cf28:	d141      	bne.n	800cfae <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cf2a:	6979      	ldr	r1, [r7, #20]
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 f845 	bl	800cfbc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cf32:	e03c      	b.n	800cfae <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cf3c:	d014      	beq.n	800cf68 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7ff fcb9 	bl	800c8b6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	4a1c      	ldr	r2, [pc, #112]	; (800cfb8 <I2C_ITSlaveCplt+0x4b0>)
 800cf48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2220      	movs	r2, #32
 800cf4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2200      	movs	r2, #0
 800cf56:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f7fe fd68 	bl	800ba36 <HAL_I2C_ListenCpltCallback>
}
 800cf66:	e022      	b.n	800cfae <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	2b22      	cmp	r3, #34	; 0x22
 800cf72:	d10e      	bne.n	800cf92 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2220      	movs	r2, #32
 800cf78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2200      	movs	r2, #0
 800cf86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7fe fd3b 	bl	800ba06 <HAL_I2C_SlaveRxCpltCallback>
}
 800cf90:	e00d      	b.n	800cfae <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2220      	movs	r2, #32
 800cf96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f7fe fd22 	bl	800b9f2 <HAL_I2C_SlaveTxCpltCallback>
}
 800cfae:	bf00      	nop
 800cfb0:	3718      	adds	r7, #24
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	ffff0000 	.word	0xffff0000

0800cfbc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	4a26      	ldr	r2, [pc, #152]	; (800d064 <I2C_ITListenCplt+0xa8>)
 800cfca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2220      	movs	r2, #32
 800cfd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	089b      	lsrs	r3, r3, #2
 800cfec:	f003 0301 	and.w	r3, r3, #1
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d022      	beq.n	800d03a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffe:	b2d2      	uxtb	r2, r2
 800d000:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d006:	1c5a      	adds	r2, r3, #1
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d010:	2b00      	cmp	r3, #0
 800d012:	d012      	beq.n	800d03a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d018:	3b01      	subs	r3, #1
 800d01a:	b29a      	uxth	r2, r3
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d024:	b29b      	uxth	r3, r3
 800d026:	3b01      	subs	r3, #1
 800d028:	b29a      	uxth	r2, r3
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d032:	f043 0204 	orr.w	r2, r3, #4
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d03a:	f248 0103 	movw	r1, #32771	; 0x8003
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fbf2 	bl	800d828 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2210      	movs	r2, #16
 800d04a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f7fe fcee 	bl	800ba36 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d05a:	bf00      	nop
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	ffff0000 	.word	0xffff0000

0800d068 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d078:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	4a6d      	ldr	r2, [pc, #436]	; (800d23c <I2C_ITError+0x1d4>)
 800d086:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	431a      	orrs	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d09a:	7bfb      	ldrb	r3, [r7, #15]
 800d09c:	2b28      	cmp	r3, #40	; 0x28
 800d09e:	d005      	beq.n	800d0ac <I2C_ITError+0x44>
 800d0a0:	7bfb      	ldrb	r3, [r7, #15]
 800d0a2:	2b29      	cmp	r3, #41	; 0x29
 800d0a4:	d002      	beq.n	800d0ac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d0a6:	7bfb      	ldrb	r3, [r7, #15]
 800d0a8:	2b2a      	cmp	r3, #42	; 0x2a
 800d0aa:	d10b      	bne.n	800d0c4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d0ac:	2103      	movs	r1, #3
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 fbba 	bl	800d828 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2228      	movs	r2, #40	; 0x28
 800d0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	4a60      	ldr	r2, [pc, #384]	; (800d240 <I2C_ITError+0x1d8>)
 800d0c0:	635a      	str	r2, [r3, #52]	; 0x34
 800d0c2:	e030      	b.n	800d126 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d0c4:	f248 0103 	movw	r1, #32771	; 0x8003
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 fbad 	bl	800d828 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f000 f8e1 	bl	800d296 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	2b60      	cmp	r3, #96	; 0x60
 800d0de:	d01f      	beq.n	800d120 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2220      	movs	r2, #32
 800d0e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	699b      	ldr	r3, [r3, #24]
 800d0ee:	f003 0320 	and.w	r3, r3, #32
 800d0f2:	2b20      	cmp	r3, #32
 800d0f4:	d114      	bne.n	800d120 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	699b      	ldr	r3, [r3, #24]
 800d0fc:	f003 0310 	and.w	r3, r3, #16
 800d100:	2b10      	cmp	r3, #16
 800d102:	d109      	bne.n	800d118 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2210      	movs	r2, #16
 800d10a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d110:	f043 0204 	orr.w	r2, r3, #4
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2220      	movs	r2, #32
 800d11e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2200      	movs	r2, #0
 800d124:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d12a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d130:	2b00      	cmp	r3, #0
 800d132:	d039      	beq.n	800d1a8 <I2C_ITError+0x140>
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	2b11      	cmp	r3, #17
 800d138:	d002      	beq.n	800d140 <I2C_ITError+0xd8>
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	2b21      	cmp	r3, #33	; 0x21
 800d13e:	d133      	bne.n	800d1a8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d14a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d14e:	d107      	bne.n	800d160 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d15e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d164:	4618      	mov	r0, r3
 800d166:	f7fd f857 	bl	800a218 <HAL_DMA_GetState>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d017      	beq.n	800d1a0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d174:	4a33      	ldr	r2, [pc, #204]	; (800d244 <I2C_ITError+0x1dc>)
 800d176:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d184:	4618      	mov	r0, r3
 800d186:	f7fb fed7 	bl	8008f38 <HAL_DMA_Abort_IT>
 800d18a:	4603      	mov	r3, r0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d04d      	beq.n	800d22c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d19a:	4610      	mov	r0, r2
 800d19c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d19e:	e045      	b.n	800d22c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 f851 	bl	800d248 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d1a6:	e041      	b.n	800d22c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d039      	beq.n	800d224 <I2C_ITError+0x1bc>
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	2b12      	cmp	r3, #18
 800d1b4:	d002      	beq.n	800d1bc <I2C_ITError+0x154>
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	2b22      	cmp	r3, #34	; 0x22
 800d1ba:	d133      	bne.n	800d224 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1ca:	d107      	bne.n	800d1dc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d1da:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7fd f819 	bl	800a218 <HAL_DMA_GetState>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	2b01      	cmp	r3, #1
 800d1ea:	d017      	beq.n	800d21c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1f0:	4a14      	ldr	r2, [pc, #80]	; (800d244 <I2C_ITError+0x1dc>)
 800d1f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d200:	4618      	mov	r0, r3
 800d202:	f7fb fe99 	bl	8008f38 <HAL_DMA_Abort_IT>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d011      	beq.n	800d230 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d216:	4610      	mov	r0, r2
 800d218:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d21a:	e009      	b.n	800d230 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 f813 	bl	800d248 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d222:	e005      	b.n	800d230 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f000 f80f 	bl	800d248 <I2C_TreatErrorCallback>
  }
}
 800d22a:	e002      	b.n	800d232 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d22c:	bf00      	nop
 800d22e:	e000      	b.n	800d232 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d230:	bf00      	nop
}
 800d232:	bf00      	nop
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	ffff0000 	.word	0xffff0000
 800d240:	0800bd1f 	.word	0x0800bd1f
 800d244:	0800d681 	.word	0x0800d681

0800d248 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d256:	b2db      	uxtb	r3, r3
 800d258:	2b60      	cmp	r3, #96	; 0x60
 800d25a:	d10e      	bne.n	800d27a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2220      	movs	r2, #32
 800d260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2200      	movs	r2, #0
 800d26e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f7fe fc07 	bl	800ba86 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d278:	e009      	b.n	800d28e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2200      	movs	r2, #0
 800d27e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2200      	movs	r2, #0
 800d284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f7fe fbf2 	bl	800ba72 <HAL_I2C_ErrorCallback>
}
 800d28e:	bf00      	nop
 800d290:	3708      	adds	r7, #8
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d296:	b480      	push	{r7}
 800d298:	b083      	sub	sp, #12
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	699b      	ldr	r3, [r3, #24]
 800d2a4:	f003 0302 	and.w	r3, r3, #2
 800d2a8:	2b02      	cmp	r3, #2
 800d2aa:	d103      	bne.n	800d2b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	699b      	ldr	r3, [r3, #24]
 800d2ba:	f003 0301 	and.w	r3, r3, #1
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d007      	beq.n	800d2d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	699a      	ldr	r2, [r3, #24]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f042 0201 	orr.w	r2, r2, #1
 800d2d0:	619a      	str	r2, [r3, #24]
  }
}
 800d2d2:	bf00      	nop
 800d2d4:	370c      	adds	r7, #12
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr

0800d2de <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b084      	sub	sp, #16
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ea:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	681a      	ldr	r2, [r3, #0]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d2fa:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d300:	b29b      	uxth	r3, r3
 800d302:	2b00      	cmp	r3, #0
 800d304:	d104      	bne.n	800d310 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d306:	2120      	movs	r1, #32
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f000 fa09 	bl	800d720 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d30e:	e02d      	b.n	800d36c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d318:	441a      	add	r2, r3
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d322:	b29b      	uxth	r3, r3
 800d324:	2bff      	cmp	r3, #255	; 0xff
 800d326:	d903      	bls.n	800d330 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	22ff      	movs	r2, #255	; 0xff
 800d32c:	851a      	strh	r2, [r3, #40]	; 0x28
 800d32e:	e004      	b.n	800d33a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d334:	b29a      	uxth	r2, r3
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d342:	4619      	mov	r1, r3
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	3328      	adds	r3, #40	; 0x28
 800d34a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d350:	f7fb f86a 	bl	8008428 <HAL_DMA_Start_IT>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d004      	beq.n	800d364 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d35a:	2110      	movs	r1, #16
 800d35c:	68f8      	ldr	r0, [r7, #12]
 800d35e:	f7ff fe83 	bl	800d068 <I2C_ITError>
}
 800d362:	e003      	b.n	800d36c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d364:	2140      	movs	r1, #64	; 0x40
 800d366:	68f8      	ldr	r0, [r7, #12]
 800d368:	f000 f9da 	bl	800d720 <I2C_Enable_IRQ>
}
 800d36c:	bf00      	nop
 800d36e:	3710      	adds	r7, #16
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}

0800d374 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b084      	sub	sp, #16
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d380:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	681a      	ldr	r2, [r3, #0]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d390:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d396:	b29b      	uxth	r3, r3
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d104      	bne.n	800d3a6 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d39c:	2120      	movs	r1, #32
 800d39e:	68f8      	ldr	r0, [r7, #12]
 800d3a0:	f000 f9be 	bl	800d720 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d3a4:	e02d      	b.n	800d402 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3aa:	68fa      	ldr	r2, [r7, #12]
 800d3ac:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d3ae:	441a      	add	r2, r3
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	2bff      	cmp	r3, #255	; 0xff
 800d3bc:	d903      	bls.n	800d3c6 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	22ff      	movs	r2, #255	; 0xff
 800d3c2:	851a      	strh	r2, [r3, #40]	; 0x28
 800d3c4:	e004      	b.n	800d3d0 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	3324      	adds	r3, #36	; 0x24
 800d3da:	4619      	mov	r1, r3
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e0:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d3e6:	f7fb f81f 	bl	8008428 <HAL_DMA_Start_IT>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d004      	beq.n	800d3fa <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d3f0:	2110      	movs	r1, #16
 800d3f2:	68f8      	ldr	r0, [r7, #12]
 800d3f4:	f7ff fe38 	bl	800d068 <I2C_ITError>
}
 800d3f8:	e003      	b.n	800d402 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d3fa:	2140      	movs	r1, #64	; 0x40
 800d3fc:	68f8      	ldr	r0, [r7, #12]
 800d3fe:	f000 f98f 	bl	800d720 <I2C_Enable_IRQ>
}
 800d402:	bf00      	nop
 800d404:	3710      	adds	r7, #16
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
	...

0800d40c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800d414:	2300      	movs	r3, #0
 800d416:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d422:	2b00      	cmp	r3, #0
 800d424:	d076      	beq.n	800d514 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a71      	ldr	r2, [pc, #452]	; (800d5f4 <I2C_DMAError+0x1e8>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d059      	beq.n	800d4e6 <I2C_DMAError+0xda>
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a6f      	ldr	r2, [pc, #444]	; (800d5f8 <I2C_DMAError+0x1ec>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d053      	beq.n	800d4e6 <I2C_DMAError+0xda>
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a6d      	ldr	r2, [pc, #436]	; (800d5fc <I2C_DMAError+0x1f0>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d04d      	beq.n	800d4e6 <I2C_DMAError+0xda>
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a6b      	ldr	r2, [pc, #428]	; (800d600 <I2C_DMAError+0x1f4>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d047      	beq.n	800d4e6 <I2C_DMAError+0xda>
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4a69      	ldr	r2, [pc, #420]	; (800d604 <I2C_DMAError+0x1f8>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d041      	beq.n	800d4e6 <I2C_DMAError+0xda>
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a67      	ldr	r2, [pc, #412]	; (800d608 <I2C_DMAError+0x1fc>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d03b      	beq.n	800d4e6 <I2C_DMAError+0xda>
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a65      	ldr	r2, [pc, #404]	; (800d60c <I2C_DMAError+0x200>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d035      	beq.n	800d4e6 <I2C_DMAError+0xda>
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a63      	ldr	r2, [pc, #396]	; (800d610 <I2C_DMAError+0x204>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d02f      	beq.n	800d4e6 <I2C_DMAError+0xda>
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a61      	ldr	r2, [pc, #388]	; (800d614 <I2C_DMAError+0x208>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d029      	beq.n	800d4e6 <I2C_DMAError+0xda>
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a5f      	ldr	r2, [pc, #380]	; (800d618 <I2C_DMAError+0x20c>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d023      	beq.n	800d4e6 <I2C_DMAError+0xda>
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a5d      	ldr	r2, [pc, #372]	; (800d61c <I2C_DMAError+0x210>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d01d      	beq.n	800d4e6 <I2C_DMAError+0xda>
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4a5b      	ldr	r2, [pc, #364]	; (800d620 <I2C_DMAError+0x214>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d017      	beq.n	800d4e6 <I2C_DMAError+0xda>
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a59      	ldr	r2, [pc, #356]	; (800d624 <I2C_DMAError+0x218>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d011      	beq.n	800d4e6 <I2C_DMAError+0xda>
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	4a57      	ldr	r2, [pc, #348]	; (800d628 <I2C_DMAError+0x21c>)
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d00b      	beq.n	800d4e6 <I2C_DMAError+0xda>
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	4a55      	ldr	r2, [pc, #340]	; (800d62c <I2C_DMAError+0x220>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d005      	beq.n	800d4e6 <I2C_DMAError+0xda>
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a53      	ldr	r2, [pc, #332]	; (800d630 <I2C_DMAError+0x224>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d109      	bne.n	800d4fa <I2C_DMAError+0xee>
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	bf0c      	ite	eq
 800d4f2:	2301      	moveq	r3, #1
 800d4f4:	2300      	movne	r3, #0
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	e008      	b.n	800d50c <I2C_DMAError+0x100>
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	bf0c      	ite	eq
 800d506:	2301      	moveq	r3, #1
 800d508:	2300      	movne	r3, #0
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d001      	beq.n	800d514 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800d510:	2301      	movs	r3, #1
 800d512:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f000 8098 	beq.w	800d64e <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a33      	ldr	r2, [pc, #204]	; (800d5f4 <I2C_DMAError+0x1e8>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d059      	beq.n	800d5de <I2C_DMAError+0x1d2>
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a31      	ldr	r2, [pc, #196]	; (800d5f8 <I2C_DMAError+0x1ec>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d053      	beq.n	800d5de <I2C_DMAError+0x1d2>
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a2f      	ldr	r2, [pc, #188]	; (800d5fc <I2C_DMAError+0x1f0>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d04d      	beq.n	800d5de <I2C_DMAError+0x1d2>
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a2d      	ldr	r2, [pc, #180]	; (800d600 <I2C_DMAError+0x1f4>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d047      	beq.n	800d5de <I2C_DMAError+0x1d2>
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a2b      	ldr	r2, [pc, #172]	; (800d604 <I2C_DMAError+0x1f8>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d041      	beq.n	800d5de <I2C_DMAError+0x1d2>
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a29      	ldr	r2, [pc, #164]	; (800d608 <I2C_DMAError+0x1fc>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d03b      	beq.n	800d5de <I2C_DMAError+0x1d2>
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	4a27      	ldr	r2, [pc, #156]	; (800d60c <I2C_DMAError+0x200>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d035      	beq.n	800d5de <I2C_DMAError+0x1d2>
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4a25      	ldr	r2, [pc, #148]	; (800d610 <I2C_DMAError+0x204>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d02f      	beq.n	800d5de <I2C_DMAError+0x1d2>
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4a23      	ldr	r2, [pc, #140]	; (800d614 <I2C_DMAError+0x208>)
 800d586:	4293      	cmp	r3, r2
 800d588:	d029      	beq.n	800d5de <I2C_DMAError+0x1d2>
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	4a21      	ldr	r2, [pc, #132]	; (800d618 <I2C_DMAError+0x20c>)
 800d592:	4293      	cmp	r3, r2
 800d594:	d023      	beq.n	800d5de <I2C_DMAError+0x1d2>
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4a1f      	ldr	r2, [pc, #124]	; (800d61c <I2C_DMAError+0x210>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d01d      	beq.n	800d5de <I2C_DMAError+0x1d2>
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4a1d      	ldr	r2, [pc, #116]	; (800d620 <I2C_DMAError+0x214>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d017      	beq.n	800d5de <I2C_DMAError+0x1d2>
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a1b      	ldr	r2, [pc, #108]	; (800d624 <I2C_DMAError+0x218>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d011      	beq.n	800d5de <I2C_DMAError+0x1d2>
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a19      	ldr	r2, [pc, #100]	; (800d628 <I2C_DMAError+0x21c>)
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d00b      	beq.n	800d5de <I2C_DMAError+0x1d2>
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a17      	ldr	r2, [pc, #92]	; (800d62c <I2C_DMAError+0x220>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d005      	beq.n	800d5de <I2C_DMAError+0x1d2>
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4a15      	ldr	r2, [pc, #84]	; (800d630 <I2C_DMAError+0x224>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d12a      	bne.n	800d634 <I2C_DMAError+0x228>
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	bf0c      	ite	eq
 800d5ea:	2301      	moveq	r3, #1
 800d5ec:	2300      	movne	r3, #0
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	e029      	b.n	800d646 <I2C_DMAError+0x23a>
 800d5f2:	bf00      	nop
 800d5f4:	40020010 	.word	0x40020010
 800d5f8:	40020028 	.word	0x40020028
 800d5fc:	40020040 	.word	0x40020040
 800d600:	40020058 	.word	0x40020058
 800d604:	40020070 	.word	0x40020070
 800d608:	40020088 	.word	0x40020088
 800d60c:	400200a0 	.word	0x400200a0
 800d610:	400200b8 	.word	0x400200b8
 800d614:	40020410 	.word	0x40020410
 800d618:	40020428 	.word	0x40020428
 800d61c:	40020440 	.word	0x40020440
 800d620:	40020458 	.word	0x40020458
 800d624:	40020470 	.word	0x40020470
 800d628:	40020488 	.word	0x40020488
 800d62c:	400204a0 	.word	0x400204a0
 800d630:	400204b8 	.word	0x400204b8
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	bf0c      	ite	eq
 800d640:	2301      	moveq	r3, #1
 800d642:	2300      	movne	r3, #0
 800d644:	b2db      	uxtb	r3, r3
 800d646:	2b00      	cmp	r3, #0
 800d648:	d001      	beq.n	800d64e <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800d64a:	2301      	movs	r3, #1
 800d64c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f7fc fdf0 	bl	800a234 <HAL_DMA_GetError>
 800d654:	4603      	mov	r3, r0
 800d656:	2b02      	cmp	r3, #2
 800d658:	d00e      	beq.n	800d678 <I2C_DMAError+0x26c>
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d00b      	beq.n	800d678 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	685a      	ldr	r2, [r3, #4]
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d66e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d670:	2110      	movs	r1, #16
 800d672:	68b8      	ldr	r0, [r7, #8]
 800d674:	f7ff fcf8 	bl	800d068 <I2C_ITError>
  }
}
 800d678:	bf00      	nop
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d68c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d692:	2b00      	cmp	r3, #0
 800d694:	d003      	beq.n	800d69e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d69a:	2200      	movs	r2, #0
 800d69c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d003      	beq.n	800d6ae <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800d6ae:	68f8      	ldr	r0, [r7, #12]
 800d6b0:	f7ff fdca 	bl	800d248 <I2C_TreatErrorCallback>
}
 800d6b4:	bf00      	nop
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b087      	sub	sp, #28
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	607b      	str	r3, [r7, #4]
 800d6c6:	460b      	mov	r3, r1
 800d6c8:	817b      	strh	r3, [r7, #10]
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d6ce:	897b      	ldrh	r3, [r7, #10]
 800d6d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d6d4:	7a7b      	ldrb	r3, [r7, #9]
 800d6d6:	041b      	lsls	r3, r3, #16
 800d6d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d6dc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d6e2:	6a3b      	ldr	r3, [r7, #32]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6ea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	685a      	ldr	r2, [r3, #4]
 800d6f2:	6a3b      	ldr	r3, [r7, #32]
 800d6f4:	0d5b      	lsrs	r3, r3, #21
 800d6f6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d6fa:	4b08      	ldr	r3, [pc, #32]	; (800d71c <I2C_TransferConfig+0x60>)
 800d6fc:	430b      	orrs	r3, r1
 800d6fe:	43db      	mvns	r3, r3
 800d700:	ea02 0103 	and.w	r1, r2, r3
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	697a      	ldr	r2, [r7, #20]
 800d70a:	430a      	orrs	r2, r1
 800d70c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d70e:	bf00      	nop
 800d710:	371c      	adds	r7, #28
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr
 800d71a:	bf00      	nop
 800d71c:	03ff63ff 	.word	0x03ff63ff

0800d720 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d720:	b480      	push	{r7}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	460b      	mov	r3, r1
 800d72a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d72c:	2300      	movs	r3, #0
 800d72e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d734:	4a39      	ldr	r2, [pc, #228]	; (800d81c <I2C_Enable_IRQ+0xfc>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d032      	beq.n	800d7a0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d73e:	4a38      	ldr	r2, [pc, #224]	; (800d820 <I2C_Enable_IRQ+0x100>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d02d      	beq.n	800d7a0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d748:	4a36      	ldr	r2, [pc, #216]	; (800d824 <I2C_Enable_IRQ+0x104>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d028      	beq.n	800d7a0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d74e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d752:	2b00      	cmp	r3, #0
 800d754:	da03      	bge.n	800d75e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d75c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d75e:	887b      	ldrh	r3, [r7, #2]
 800d760:	f003 0301 	and.w	r3, r3, #1
 800d764:	2b00      	cmp	r3, #0
 800d766:	d003      	beq.n	800d770 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d76e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d770:	887b      	ldrh	r3, [r7, #2]
 800d772:	f003 0302 	and.w	r3, r3, #2
 800d776:	2b00      	cmp	r3, #0
 800d778:	d003      	beq.n	800d782 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d780:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d782:	887b      	ldrh	r3, [r7, #2]
 800d784:	2b10      	cmp	r3, #16
 800d786:	d103      	bne.n	800d790 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d78e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d790:	887b      	ldrh	r3, [r7, #2]
 800d792:	2b20      	cmp	r3, #32
 800d794:	d133      	bne.n	800d7fe <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	f043 0320 	orr.w	r3, r3, #32
 800d79c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d79e:	e02e      	b.n	800d7fe <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d7a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	da03      	bge.n	800d7b0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d7ae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d7b0:	887b      	ldrh	r3, [r7, #2]
 800d7b2:	f003 0301 	and.w	r3, r3, #1
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d003      	beq.n	800d7c2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800d7c0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d7c2:	887b      	ldrh	r3, [r7, #2]
 800d7c4:	f003 0302 	and.w	r3, r3, #2
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d003      	beq.n	800d7d4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800d7d2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d7d4:	887b      	ldrh	r3, [r7, #2]
 800d7d6:	2b10      	cmp	r3, #16
 800d7d8:	d103      	bne.n	800d7e2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d7e0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d7e2:	887b      	ldrh	r3, [r7, #2]
 800d7e4:	2b20      	cmp	r3, #32
 800d7e6:	d103      	bne.n	800d7f0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d7ee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d7f0:	887b      	ldrh	r3, [r7, #2]
 800d7f2:	2b40      	cmp	r3, #64	; 0x40
 800d7f4:	d103      	bne.n	800d7fe <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7fc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	6819      	ldr	r1, [r3, #0]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	430a      	orrs	r2, r1
 800d80c:	601a      	str	r2, [r3, #0]
}
 800d80e:	bf00      	nop
 800d810:	3714      	adds	r7, #20
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr
 800d81a:	bf00      	nop
 800d81c:	0800bf27 	.word	0x0800bf27
 800d820:	0800c36d 	.word	0x0800c36d
 800d824:	0800c10d 	.word	0x0800c10d

0800d828 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	460b      	mov	r3, r1
 800d832:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d834:	2300      	movs	r3, #0
 800d836:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d838:	887b      	ldrh	r3, [r7, #2]
 800d83a:	f003 0301 	and.w	r3, r3, #1
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00f      	beq.n	800d862 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d848:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d850:	b2db      	uxtb	r3, r3
 800d852:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d856:	2b28      	cmp	r3, #40	; 0x28
 800d858:	d003      	beq.n	800d862 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d860:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d862:	887b      	ldrh	r3, [r7, #2]
 800d864:	f003 0302 	and.w	r3, r3, #2
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d00f      	beq.n	800d88c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d872:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d880:	2b28      	cmp	r3, #40	; 0x28
 800d882:	d003      	beq.n	800d88c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d88a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d88c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d890:	2b00      	cmp	r3, #0
 800d892:	da03      	bge.n	800d89c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d89a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d89c:	887b      	ldrh	r3, [r7, #2]
 800d89e:	2b10      	cmp	r3, #16
 800d8a0:	d103      	bne.n	800d8aa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d8a8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d8aa:	887b      	ldrh	r3, [r7, #2]
 800d8ac:	2b20      	cmp	r3, #32
 800d8ae:	d103      	bne.n	800d8b8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f043 0320 	orr.w	r3, r3, #32
 800d8b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d8b8:	887b      	ldrh	r3, [r7, #2]
 800d8ba:	2b40      	cmp	r3, #64	; 0x40
 800d8bc:	d103      	bne.n	800d8c6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8c4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	6819      	ldr	r1, [r3, #0]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	43da      	mvns	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	400a      	ands	r2, r1
 800d8d6:	601a      	str	r2, [r3, #0]
}
 800d8d8:	bf00      	nop
 800d8da:	3714      	adds	r7, #20
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr

0800d8e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	2b20      	cmp	r3, #32
 800d8f8:	d138      	bne.n	800d96c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d900:	2b01      	cmp	r3, #1
 800d902:	d101      	bne.n	800d908 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d904:	2302      	movs	r3, #2
 800d906:	e032      	b.n	800d96e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2201      	movs	r2, #1
 800d90c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2224      	movs	r2, #36	; 0x24
 800d914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f022 0201 	bic.w	r2, r2, #1
 800d926:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	681a      	ldr	r2, [r3, #0]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d936:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	6819      	ldr	r1, [r3, #0]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	683a      	ldr	r2, [r7, #0]
 800d944:	430a      	orrs	r2, r1
 800d946:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f042 0201 	orr.w	r2, r2, #1
 800d956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2220      	movs	r2, #32
 800d95c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2200      	movs	r2, #0
 800d964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d968:	2300      	movs	r3, #0
 800d96a:	e000      	b.n	800d96e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d96c:	2302      	movs	r3, #2
  }
}
 800d96e:	4618      	mov	r0, r3
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr

0800d97a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d97a:	b480      	push	{r7}
 800d97c:	b085      	sub	sp, #20
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
 800d982:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	2b20      	cmp	r3, #32
 800d98e:	d139      	bne.n	800da04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d996:	2b01      	cmp	r3, #1
 800d998:	d101      	bne.n	800d99e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d99a:	2302      	movs	r3, #2
 800d99c:	e033      	b.n	800da06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2224      	movs	r2, #36	; 0x24
 800d9aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	681a      	ldr	r2, [r3, #0]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f022 0201 	bic.w	r2, r2, #1
 800d9bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d9cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	021b      	lsls	r3, r3, #8
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f042 0201 	orr.w	r2, r2, #1
 800d9ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2220      	movs	r2, #32
 800d9f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800da00:	2300      	movs	r3, #0
 800da02:	e000      	b.n	800da06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800da04:	2302      	movs	r3, #2
  }
}
 800da06:	4618      	mov	r0, r3
 800da08:	3714      	adds	r7, #20
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
	...

0800da14 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800da14:	b480      	push	{r7}
 800da16:	b085      	sub	sp, #20
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800da1c:	4b0d      	ldr	r3, [pc, #52]	; (800da54 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800da1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800da22:	4a0c      	ldr	r2, [pc, #48]	; (800da54 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800da24:	f043 0302 	orr.w	r3, r3, #2
 800da28:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800da2c:	4b09      	ldr	r3, [pc, #36]	; (800da54 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800da2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800da32:	f003 0302 	and.w	r3, r3, #2
 800da36:	60fb      	str	r3, [r7, #12]
 800da38:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800da3a:	4b07      	ldr	r3, [pc, #28]	; (800da58 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800da3c:	685a      	ldr	r2, [r3, #4]
 800da3e:	4906      	ldr	r1, [pc, #24]	; (800da58 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	4313      	orrs	r3, r2
 800da44:	604b      	str	r3, [r1, #4]
}
 800da46:	bf00      	nop
 800da48:	3714      	adds	r7, #20
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop
 800da54:	58024400 	.word	0x58024400
 800da58:	58000400 	.word	0x58000400

0800da5c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800da6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800da6e:	2300      	movs	r3, #0
}
 800da70:	4618      	mov	r0, r3
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	460b      	mov	r3, r1
 800da86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800da88:	4b18      	ldr	r3, [pc, #96]	; (800daec <HAL_PWR_EnterSTOPMode+0x70>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f023 0201 	bic.w	r2, r3, #1
 800da90:	4916      	ldr	r1, [pc, #88]	; (800daec <HAL_PWR_EnterSTOPMode+0x70>)
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4313      	orrs	r3, r2
 800da96:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800da98:	4b14      	ldr	r3, [pc, #80]	; (800daec <HAL_PWR_EnterSTOPMode+0x70>)
 800da9a:	691b      	ldr	r3, [r3, #16]
 800da9c:	4a13      	ldr	r2, [pc, #76]	; (800daec <HAL_PWR_EnterSTOPMode+0x70>)
 800da9e:	f023 0305 	bic.w	r3, r3, #5
 800daa2:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800daa4:	4b11      	ldr	r3, [pc, #68]	; (800daec <HAL_PWR_EnterSTOPMode+0x70>)
 800daa6:	691b      	ldr	r3, [r3, #16]
 800daa8:	4a10      	ldr	r2, [pc, #64]	; (800daec <HAL_PWR_EnterSTOPMode+0x70>)
 800daaa:	f023 0302 	bic.w	r3, r3, #2
 800daae:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800dab0:	4b0f      	ldr	r3, [pc, #60]	; (800daf0 <HAL_PWR_EnterSTOPMode+0x74>)
 800dab2:	691b      	ldr	r3, [r3, #16]
 800dab4:	4a0e      	ldr	r2, [pc, #56]	; (800daf0 <HAL_PWR_EnterSTOPMode+0x74>)
 800dab6:	f043 0304 	orr.w	r3, r3, #4
 800daba:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800dabc:	f3bf 8f4f 	dsb	sy
}
 800dac0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800dac2:	f3bf 8f6f 	isb	sy
}
 800dac6:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800dac8:	78fb      	ldrb	r3, [r7, #3]
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d101      	bne.n	800dad2 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800dace:	bf30      	wfi
 800dad0:	e000      	b.n	800dad4 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800dad2:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800dad4:	4b06      	ldr	r3, [pc, #24]	; (800daf0 <HAL_PWR_EnterSTOPMode+0x74>)
 800dad6:	691b      	ldr	r3, [r3, #16]
 800dad8:	4a05      	ldr	r2, [pc, #20]	; (800daf0 <HAL_PWR_EnterSTOPMode+0x74>)
 800dada:	f023 0304 	bic.w	r3, r3, #4
 800dade:	6113      	str	r3, [r2, #16]
}
 800dae0:	bf00      	nop
 800dae2:	370c      	adds	r7, #12
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr
 800daec:	58024800 	.word	0x58024800
 800daf0:	e000ed00 	.word	0xe000ed00

0800daf4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800dafc:	4b19      	ldr	r3, [pc, #100]	; (800db64 <HAL_PWREx_ConfigSupply+0x70>)
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	f003 0304 	and.w	r3, r3, #4
 800db04:	2b04      	cmp	r3, #4
 800db06:	d00a      	beq.n	800db1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800db08:	4b16      	ldr	r3, [pc, #88]	; (800db64 <HAL_PWREx_ConfigSupply+0x70>)
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	f003 0307 	and.w	r3, r3, #7
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	429a      	cmp	r2, r3
 800db14:	d001      	beq.n	800db1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800db16:	2301      	movs	r3, #1
 800db18:	e01f      	b.n	800db5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800db1a:	2300      	movs	r3, #0
 800db1c:	e01d      	b.n	800db5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800db1e:	4b11      	ldr	r3, [pc, #68]	; (800db64 <HAL_PWREx_ConfigSupply+0x70>)
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	f023 0207 	bic.w	r2, r3, #7
 800db26:	490f      	ldr	r1, [pc, #60]	; (800db64 <HAL_PWREx_ConfigSupply+0x70>)
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	4313      	orrs	r3, r2
 800db2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800db2e:	f7f7 fff7 	bl	8005b20 <HAL_GetTick>
 800db32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800db34:	e009      	b.n	800db4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800db36:	f7f7 fff3 	bl	8005b20 <HAL_GetTick>
 800db3a:	4602      	mov	r2, r0
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	1ad3      	subs	r3, r2, r3
 800db40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800db44:	d901      	bls.n	800db4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800db46:	2301      	movs	r3, #1
 800db48:	e007      	b.n	800db5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800db4a:	4b06      	ldr	r3, [pc, #24]	; (800db64 <HAL_PWREx_ConfigSupply+0x70>)
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db56:	d1ee      	bne.n	800db36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800db58:	2300      	movs	r3, #0
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3710      	adds	r7, #16
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	58024800 	.word	0x58024800

0800db68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b08c      	sub	sp, #48	; 0x30
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d102      	bne.n	800db7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800db76:	2301      	movs	r3, #1
 800db78:	f000 bc48 	b.w	800e40c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	f003 0301 	and.w	r3, r3, #1
 800db84:	2b00      	cmp	r3, #0
 800db86:	f000 8088 	beq.w	800dc9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800db8a:	4b99      	ldr	r3, [pc, #612]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800db8c:	691b      	ldr	r3, [r3, #16]
 800db8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db92:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800db94:	4b96      	ldr	r3, [pc, #600]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800db96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db98:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800db9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9c:	2b10      	cmp	r3, #16
 800db9e:	d007      	beq.n	800dbb0 <HAL_RCC_OscConfig+0x48>
 800dba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba2:	2b18      	cmp	r3, #24
 800dba4:	d111      	bne.n	800dbca <HAL_RCC_OscConfig+0x62>
 800dba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba8:	f003 0303 	and.w	r3, r3, #3
 800dbac:	2b02      	cmp	r3, #2
 800dbae:	d10c      	bne.n	800dbca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dbb0:	4b8f      	ldr	r3, [pc, #572]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d06d      	beq.n	800dc98 <HAL_RCC_OscConfig+0x130>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d169      	bne.n	800dc98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	f000 bc21 	b.w	800e40c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbd2:	d106      	bne.n	800dbe2 <HAL_RCC_OscConfig+0x7a>
 800dbd4:	4b86      	ldr	r3, [pc, #536]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a85      	ldr	r2, [pc, #532]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dbda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dbde:	6013      	str	r3, [r2, #0]
 800dbe0:	e02e      	b.n	800dc40 <HAL_RCC_OscConfig+0xd8>
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d10c      	bne.n	800dc04 <HAL_RCC_OscConfig+0x9c>
 800dbea:	4b81      	ldr	r3, [pc, #516]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	4a80      	ldr	r2, [pc, #512]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dbf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dbf4:	6013      	str	r3, [r2, #0]
 800dbf6:	4b7e      	ldr	r3, [pc, #504]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4a7d      	ldr	r2, [pc, #500]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dbfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dc00:	6013      	str	r3, [r2, #0]
 800dc02:	e01d      	b.n	800dc40 <HAL_RCC_OscConfig+0xd8>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dc0c:	d10c      	bne.n	800dc28 <HAL_RCC_OscConfig+0xc0>
 800dc0e:	4b78      	ldr	r3, [pc, #480]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4a77      	ldr	r2, [pc, #476]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dc14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dc18:	6013      	str	r3, [r2, #0]
 800dc1a:	4b75      	ldr	r3, [pc, #468]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	4a74      	ldr	r2, [pc, #464]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dc20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dc24:	6013      	str	r3, [r2, #0]
 800dc26:	e00b      	b.n	800dc40 <HAL_RCC_OscConfig+0xd8>
 800dc28:	4b71      	ldr	r3, [pc, #452]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4a70      	ldr	r2, [pc, #448]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dc2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dc32:	6013      	str	r3, [r2, #0]
 800dc34:	4b6e      	ldr	r3, [pc, #440]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4a6d      	ldr	r2, [pc, #436]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dc3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dc3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d013      	beq.n	800dc70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc48:	f7f7 ff6a 	bl	8005b20 <HAL_GetTick>
 800dc4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dc4e:	e008      	b.n	800dc62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dc50:	f7f7 ff66 	bl	8005b20 <HAL_GetTick>
 800dc54:	4602      	mov	r2, r0
 800dc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	2b64      	cmp	r3, #100	; 0x64
 800dc5c:	d901      	bls.n	800dc62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800dc5e:	2303      	movs	r3, #3
 800dc60:	e3d4      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800dc62:	4b63      	ldr	r3, [pc, #396]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d0f0      	beq.n	800dc50 <HAL_RCC_OscConfig+0xe8>
 800dc6e:	e014      	b.n	800dc9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc70:	f7f7 ff56 	bl	8005b20 <HAL_GetTick>
 800dc74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dc76:	e008      	b.n	800dc8a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dc78:	f7f7 ff52 	bl	8005b20 <HAL_GetTick>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc80:	1ad3      	subs	r3, r2, r3
 800dc82:	2b64      	cmp	r3, #100	; 0x64
 800dc84:	d901      	bls.n	800dc8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800dc86:	2303      	movs	r3, #3
 800dc88:	e3c0      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800dc8a:	4b59      	ldr	r3, [pc, #356]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d1f0      	bne.n	800dc78 <HAL_RCC_OscConfig+0x110>
 800dc96:	e000      	b.n	800dc9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dc98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f003 0302 	and.w	r3, r3, #2
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	f000 80ca 	beq.w	800de3c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dca8:	4b51      	ldr	r3, [pc, #324]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dcaa:	691b      	ldr	r3, [r3, #16]
 800dcac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dcb0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dcb2:	4b4f      	ldr	r3, [pc, #316]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dcb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcb6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800dcb8:	6a3b      	ldr	r3, [r7, #32]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d007      	beq.n	800dcce <HAL_RCC_OscConfig+0x166>
 800dcbe:	6a3b      	ldr	r3, [r7, #32]
 800dcc0:	2b18      	cmp	r3, #24
 800dcc2:	d156      	bne.n	800dd72 <HAL_RCC_OscConfig+0x20a>
 800dcc4:	69fb      	ldr	r3, [r7, #28]
 800dcc6:	f003 0303 	and.w	r3, r3, #3
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d151      	bne.n	800dd72 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dcce:	4b48      	ldr	r3, [pc, #288]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f003 0304 	and.w	r3, r3, #4
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d005      	beq.n	800dce6 <HAL_RCC_OscConfig+0x17e>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	68db      	ldr	r3, [r3, #12]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d101      	bne.n	800dce6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800dce2:	2301      	movs	r3, #1
 800dce4:	e392      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dce6:	4b42      	ldr	r3, [pc, #264]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f023 0219 	bic.w	r2, r3, #25
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	493f      	ldr	r1, [pc, #252]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcf8:	f7f7 ff12 	bl	8005b20 <HAL_GetTick>
 800dcfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dcfe:	e008      	b.n	800dd12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dd00:	f7f7 ff0e 	bl	8005b20 <HAL_GetTick>
 800dd04:	4602      	mov	r2, r0
 800dd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd08:	1ad3      	subs	r3, r2, r3
 800dd0a:	2b02      	cmp	r3, #2
 800dd0c:	d901      	bls.n	800dd12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800dd0e:	2303      	movs	r3, #3
 800dd10:	e37c      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dd12:	4b37      	ldr	r3, [pc, #220]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	f003 0304 	and.w	r3, r3, #4
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d0f0      	beq.n	800dd00 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd1e:	f7f7 ff0b 	bl	8005b38 <HAL_GetREVID>
 800dd22:	4603      	mov	r3, r0
 800dd24:	f241 0203 	movw	r2, #4099	; 0x1003
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d817      	bhi.n	800dd5c <HAL_RCC_OscConfig+0x1f4>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	691b      	ldr	r3, [r3, #16]
 800dd30:	2b40      	cmp	r3, #64	; 0x40
 800dd32:	d108      	bne.n	800dd46 <HAL_RCC_OscConfig+0x1de>
 800dd34:	4b2e      	ldr	r3, [pc, #184]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800dd3c:	4a2c      	ldr	r2, [pc, #176]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dd3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd42:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dd44:	e07a      	b.n	800de3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd46:	4b2a      	ldr	r3, [pc, #168]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	031b      	lsls	r3, r3, #12
 800dd54:	4926      	ldr	r1, [pc, #152]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dd56:	4313      	orrs	r3, r2
 800dd58:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dd5a:	e06f      	b.n	800de3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd5c:	4b24      	ldr	r3, [pc, #144]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	691b      	ldr	r3, [r3, #16]
 800dd68:	061b      	lsls	r3, r3, #24
 800dd6a:	4921      	ldr	r1, [pc, #132]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dd6c:	4313      	orrs	r3, r2
 800dd6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dd70:	e064      	b.n	800de3c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d047      	beq.n	800de0a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800dd7a:	4b1d      	ldr	r3, [pc, #116]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f023 0219 	bic.w	r2, r3, #25
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	68db      	ldr	r3, [r3, #12]
 800dd86:	491a      	ldr	r1, [pc, #104]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd8c:	f7f7 fec8 	bl	8005b20 <HAL_GetTick>
 800dd90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dd92:	e008      	b.n	800dda6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dd94:	f7f7 fec4 	bl	8005b20 <HAL_GetTick>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd9c:	1ad3      	subs	r3, r2, r3
 800dd9e:	2b02      	cmp	r3, #2
 800dda0:	d901      	bls.n	800dda6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800dda2:	2303      	movs	r3, #3
 800dda4:	e332      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dda6:	4b12      	ldr	r3, [pc, #72]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f003 0304 	and.w	r3, r3, #4
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d0f0      	beq.n	800dd94 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ddb2:	f7f7 fec1 	bl	8005b38 <HAL_GetREVID>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	f241 0203 	movw	r2, #4099	; 0x1003
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d819      	bhi.n	800ddf4 <HAL_RCC_OscConfig+0x28c>
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	691b      	ldr	r3, [r3, #16]
 800ddc4:	2b40      	cmp	r3, #64	; 0x40
 800ddc6:	d108      	bne.n	800ddda <HAL_RCC_OscConfig+0x272>
 800ddc8:	4b09      	ldr	r3, [pc, #36]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ddd0:	4a07      	ldr	r2, [pc, #28]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800ddd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ddd6:	6053      	str	r3, [r2, #4]
 800ddd8:	e030      	b.n	800de3c <HAL_RCC_OscConfig+0x2d4>
 800ddda:	4b05      	ldr	r3, [pc, #20]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	691b      	ldr	r3, [r3, #16]
 800dde6:	031b      	lsls	r3, r3, #12
 800dde8:	4901      	ldr	r1, [pc, #4]	; (800ddf0 <HAL_RCC_OscConfig+0x288>)
 800ddea:	4313      	orrs	r3, r2
 800ddec:	604b      	str	r3, [r1, #4]
 800ddee:	e025      	b.n	800de3c <HAL_RCC_OscConfig+0x2d4>
 800ddf0:	58024400 	.word	0x58024400
 800ddf4:	4b9a      	ldr	r3, [pc, #616]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800ddf6:	685b      	ldr	r3, [r3, #4]
 800ddf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	691b      	ldr	r3, [r3, #16]
 800de00:	061b      	lsls	r3, r3, #24
 800de02:	4997      	ldr	r1, [pc, #604]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800de04:	4313      	orrs	r3, r2
 800de06:	604b      	str	r3, [r1, #4]
 800de08:	e018      	b.n	800de3c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800de0a:	4b95      	ldr	r3, [pc, #596]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	4a94      	ldr	r2, [pc, #592]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800de10:	f023 0301 	bic.w	r3, r3, #1
 800de14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de16:	f7f7 fe83 	bl	8005b20 <HAL_GetTick>
 800de1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800de1c:	e008      	b.n	800de30 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800de1e:	f7f7 fe7f 	bl	8005b20 <HAL_GetTick>
 800de22:	4602      	mov	r2, r0
 800de24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	2b02      	cmp	r3, #2
 800de2a:	d901      	bls.n	800de30 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800de2c:	2303      	movs	r3, #3
 800de2e:	e2ed      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800de30:	4b8b      	ldr	r3, [pc, #556]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f003 0304 	and.w	r3, r3, #4
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1f0      	bne.n	800de1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f003 0310 	and.w	r3, r3, #16
 800de44:	2b00      	cmp	r3, #0
 800de46:	f000 80a9 	beq.w	800df9c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de4a:	4b85      	ldr	r3, [pc, #532]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800de4c:	691b      	ldr	r3, [r3, #16]
 800de4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800de54:	4b82      	ldr	r3, [pc, #520]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800de56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de58:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800de5a:	69bb      	ldr	r3, [r7, #24]
 800de5c:	2b08      	cmp	r3, #8
 800de5e:	d007      	beq.n	800de70 <HAL_RCC_OscConfig+0x308>
 800de60:	69bb      	ldr	r3, [r7, #24]
 800de62:	2b18      	cmp	r3, #24
 800de64:	d13a      	bne.n	800dedc <HAL_RCC_OscConfig+0x374>
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	f003 0303 	and.w	r3, r3, #3
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	d135      	bne.n	800dedc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800de70:	4b7b      	ldr	r3, [pc, #492]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d005      	beq.n	800de88 <HAL_RCC_OscConfig+0x320>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	69db      	ldr	r3, [r3, #28]
 800de80:	2b80      	cmp	r3, #128	; 0x80
 800de82:	d001      	beq.n	800de88 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800de84:	2301      	movs	r3, #1
 800de86:	e2c1      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800de88:	f7f7 fe56 	bl	8005b38 <HAL_GetREVID>
 800de8c:	4603      	mov	r3, r0
 800de8e:	f241 0203 	movw	r2, #4099	; 0x1003
 800de92:	4293      	cmp	r3, r2
 800de94:	d817      	bhi.n	800dec6 <HAL_RCC_OscConfig+0x35e>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6a1b      	ldr	r3, [r3, #32]
 800de9a:	2b20      	cmp	r3, #32
 800de9c:	d108      	bne.n	800deb0 <HAL_RCC_OscConfig+0x348>
 800de9e:	4b70      	ldr	r3, [pc, #448]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800dea6:	4a6e      	ldr	r2, [pc, #440]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800dea8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800deac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800deae:	e075      	b.n	800df9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800deb0:	4b6b      	ldr	r3, [pc, #428]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6a1b      	ldr	r3, [r3, #32]
 800debc:	069b      	lsls	r3, r3, #26
 800debe:	4968      	ldr	r1, [pc, #416]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800dec0:	4313      	orrs	r3, r2
 800dec2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dec4:	e06a      	b.n	800df9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dec6:	4b66      	ldr	r3, [pc, #408]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6a1b      	ldr	r3, [r3, #32]
 800ded2:	061b      	lsls	r3, r3, #24
 800ded4:	4962      	ldr	r1, [pc, #392]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800ded6:	4313      	orrs	r3, r2
 800ded8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800deda:	e05f      	b.n	800df9c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	69db      	ldr	r3, [r3, #28]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d042      	beq.n	800df6a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800dee4:	4b5e      	ldr	r3, [pc, #376]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a5d      	ldr	r2, [pc, #372]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800deea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800deee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800def0:	f7f7 fe16 	bl	8005b20 <HAL_GetTick>
 800def4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800def6:	e008      	b.n	800df0a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800def8:	f7f7 fe12 	bl	8005b20 <HAL_GetTick>
 800defc:	4602      	mov	r2, r0
 800defe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df00:	1ad3      	subs	r3, r2, r3
 800df02:	2b02      	cmp	r3, #2
 800df04:	d901      	bls.n	800df0a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800df06:	2303      	movs	r3, #3
 800df08:	e280      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800df0a:	4b55      	ldr	r3, [pc, #340]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df12:	2b00      	cmp	r3, #0
 800df14:	d0f0      	beq.n	800def8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800df16:	f7f7 fe0f 	bl	8005b38 <HAL_GetREVID>
 800df1a:	4603      	mov	r3, r0
 800df1c:	f241 0203 	movw	r2, #4099	; 0x1003
 800df20:	4293      	cmp	r3, r2
 800df22:	d817      	bhi.n	800df54 <HAL_RCC_OscConfig+0x3ec>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6a1b      	ldr	r3, [r3, #32]
 800df28:	2b20      	cmp	r3, #32
 800df2a:	d108      	bne.n	800df3e <HAL_RCC_OscConfig+0x3d6>
 800df2c:	4b4c      	ldr	r3, [pc, #304]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800df34:	4a4a      	ldr	r2, [pc, #296]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800df36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df3a:	6053      	str	r3, [r2, #4]
 800df3c:	e02e      	b.n	800df9c <HAL_RCC_OscConfig+0x434>
 800df3e:	4b48      	ldr	r3, [pc, #288]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6a1b      	ldr	r3, [r3, #32]
 800df4a:	069b      	lsls	r3, r3, #26
 800df4c:	4944      	ldr	r1, [pc, #272]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800df4e:	4313      	orrs	r3, r2
 800df50:	604b      	str	r3, [r1, #4]
 800df52:	e023      	b.n	800df9c <HAL_RCC_OscConfig+0x434>
 800df54:	4b42      	ldr	r3, [pc, #264]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800df56:	68db      	ldr	r3, [r3, #12]
 800df58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6a1b      	ldr	r3, [r3, #32]
 800df60:	061b      	lsls	r3, r3, #24
 800df62:	493f      	ldr	r1, [pc, #252]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800df64:	4313      	orrs	r3, r2
 800df66:	60cb      	str	r3, [r1, #12]
 800df68:	e018      	b.n	800df9c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800df6a:	4b3d      	ldr	r3, [pc, #244]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	4a3c      	ldr	r2, [pc, #240]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800df70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df76:	f7f7 fdd3 	bl	8005b20 <HAL_GetTick>
 800df7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800df7c:	e008      	b.n	800df90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800df7e:	f7f7 fdcf 	bl	8005b20 <HAL_GetTick>
 800df82:	4602      	mov	r2, r0
 800df84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df86:	1ad3      	subs	r3, r2, r3
 800df88:	2b02      	cmp	r3, #2
 800df8a:	d901      	bls.n	800df90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800df8c:	2303      	movs	r3, #3
 800df8e:	e23d      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800df90:	4b33      	ldr	r3, [pc, #204]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1f0      	bne.n	800df7e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f003 0308 	and.w	r3, r3, #8
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d036      	beq.n	800e016 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	695b      	ldr	r3, [r3, #20]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d019      	beq.n	800dfe4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dfb0:	4b2b      	ldr	r3, [pc, #172]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800dfb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfb4:	4a2a      	ldr	r2, [pc, #168]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800dfb6:	f043 0301 	orr.w	r3, r3, #1
 800dfba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dfbc:	f7f7 fdb0 	bl	8005b20 <HAL_GetTick>
 800dfc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dfc2:	e008      	b.n	800dfd6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dfc4:	f7f7 fdac 	bl	8005b20 <HAL_GetTick>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfcc:	1ad3      	subs	r3, r2, r3
 800dfce:	2b02      	cmp	r3, #2
 800dfd0:	d901      	bls.n	800dfd6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800dfd2:	2303      	movs	r3, #3
 800dfd4:	e21a      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dfd6:	4b22      	ldr	r3, [pc, #136]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800dfd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfda:	f003 0302 	and.w	r3, r3, #2
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d0f0      	beq.n	800dfc4 <HAL_RCC_OscConfig+0x45c>
 800dfe2:	e018      	b.n	800e016 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dfe4:	4b1e      	ldr	r3, [pc, #120]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800dfe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfe8:	4a1d      	ldr	r2, [pc, #116]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800dfea:	f023 0301 	bic.w	r3, r3, #1
 800dfee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dff0:	f7f7 fd96 	bl	8005b20 <HAL_GetTick>
 800dff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800dff6:	e008      	b.n	800e00a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dff8:	f7f7 fd92 	bl	8005b20 <HAL_GetTick>
 800dffc:	4602      	mov	r2, r0
 800dffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e000:	1ad3      	subs	r3, r2, r3
 800e002:	2b02      	cmp	r3, #2
 800e004:	d901      	bls.n	800e00a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800e006:	2303      	movs	r3, #3
 800e008:	e200      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800e00a:	4b15      	ldr	r3, [pc, #84]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800e00c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e00e:	f003 0302 	and.w	r3, r3, #2
 800e012:	2b00      	cmp	r3, #0
 800e014:	d1f0      	bne.n	800dff8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f003 0320 	and.w	r3, r3, #32
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d039      	beq.n	800e096 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	699b      	ldr	r3, [r3, #24]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d01c      	beq.n	800e064 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e02a:	4b0d      	ldr	r3, [pc, #52]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	4a0c      	ldr	r2, [pc, #48]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800e030:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e034:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e036:	f7f7 fd73 	bl	8005b20 <HAL_GetTick>
 800e03a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e03c:	e008      	b.n	800e050 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e03e:	f7f7 fd6f 	bl	8005b20 <HAL_GetTick>
 800e042:	4602      	mov	r2, r0
 800e044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e046:	1ad3      	subs	r3, r2, r3
 800e048:	2b02      	cmp	r3, #2
 800e04a:	d901      	bls.n	800e050 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800e04c:	2303      	movs	r3, #3
 800e04e:	e1dd      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800e050:	4b03      	ldr	r3, [pc, #12]	; (800e060 <HAL_RCC_OscConfig+0x4f8>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d0f0      	beq.n	800e03e <HAL_RCC_OscConfig+0x4d6>
 800e05c:	e01b      	b.n	800e096 <HAL_RCC_OscConfig+0x52e>
 800e05e:	bf00      	nop
 800e060:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e064:	4b9b      	ldr	r3, [pc, #620]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a9a      	ldr	r2, [pc, #616]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e06a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e06e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800e070:	f7f7 fd56 	bl	8005b20 <HAL_GetTick>
 800e074:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e076:	e008      	b.n	800e08a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e078:	f7f7 fd52 	bl	8005b20 <HAL_GetTick>
 800e07c:	4602      	mov	r2, r0
 800e07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e080:	1ad3      	subs	r3, r2, r3
 800e082:	2b02      	cmp	r3, #2
 800e084:	d901      	bls.n	800e08a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800e086:	2303      	movs	r3, #3
 800e088:	e1c0      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800e08a:	4b92      	ldr	r3, [pc, #584]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e092:	2b00      	cmp	r3, #0
 800e094:	d1f0      	bne.n	800e078 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f003 0304 	and.w	r3, r3, #4
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	f000 8081 	beq.w	800e1a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e0a4:	4b8c      	ldr	r3, [pc, #560]	; (800e2d8 <HAL_RCC_OscConfig+0x770>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a8b      	ldr	r2, [pc, #556]	; (800e2d8 <HAL_RCC_OscConfig+0x770>)
 800e0aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e0ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e0b0:	f7f7 fd36 	bl	8005b20 <HAL_GetTick>
 800e0b4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e0b6:	e008      	b.n	800e0ca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e0b8:	f7f7 fd32 	bl	8005b20 <HAL_GetTick>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c0:	1ad3      	subs	r3, r2, r3
 800e0c2:	2b64      	cmp	r3, #100	; 0x64
 800e0c4:	d901      	bls.n	800e0ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800e0c6:	2303      	movs	r3, #3
 800e0c8:	e1a0      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e0ca:	4b83      	ldr	r3, [pc, #524]	; (800e2d8 <HAL_RCC_OscConfig+0x770>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d0f0      	beq.n	800e0b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	689b      	ldr	r3, [r3, #8]
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d106      	bne.n	800e0ec <HAL_RCC_OscConfig+0x584>
 800e0de:	4b7d      	ldr	r3, [pc, #500]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e0e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0e2:	4a7c      	ldr	r2, [pc, #496]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e0e4:	f043 0301 	orr.w	r3, r3, #1
 800e0e8:	6713      	str	r3, [r2, #112]	; 0x70
 800e0ea:	e02d      	b.n	800e148 <HAL_RCC_OscConfig+0x5e0>
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	689b      	ldr	r3, [r3, #8]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d10c      	bne.n	800e10e <HAL_RCC_OscConfig+0x5a6>
 800e0f4:	4b77      	ldr	r3, [pc, #476]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e0f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0f8:	4a76      	ldr	r2, [pc, #472]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e0fa:	f023 0301 	bic.w	r3, r3, #1
 800e0fe:	6713      	str	r3, [r2, #112]	; 0x70
 800e100:	4b74      	ldr	r3, [pc, #464]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e104:	4a73      	ldr	r2, [pc, #460]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e106:	f023 0304 	bic.w	r3, r3, #4
 800e10a:	6713      	str	r3, [r2, #112]	; 0x70
 800e10c:	e01c      	b.n	800e148 <HAL_RCC_OscConfig+0x5e0>
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	2b05      	cmp	r3, #5
 800e114:	d10c      	bne.n	800e130 <HAL_RCC_OscConfig+0x5c8>
 800e116:	4b6f      	ldr	r3, [pc, #444]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e11a:	4a6e      	ldr	r2, [pc, #440]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e11c:	f043 0304 	orr.w	r3, r3, #4
 800e120:	6713      	str	r3, [r2, #112]	; 0x70
 800e122:	4b6c      	ldr	r3, [pc, #432]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e126:	4a6b      	ldr	r2, [pc, #428]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e128:	f043 0301 	orr.w	r3, r3, #1
 800e12c:	6713      	str	r3, [r2, #112]	; 0x70
 800e12e:	e00b      	b.n	800e148 <HAL_RCC_OscConfig+0x5e0>
 800e130:	4b68      	ldr	r3, [pc, #416]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e134:	4a67      	ldr	r2, [pc, #412]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e136:	f023 0301 	bic.w	r3, r3, #1
 800e13a:	6713      	str	r3, [r2, #112]	; 0x70
 800e13c:	4b65      	ldr	r3, [pc, #404]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e140:	4a64      	ldr	r2, [pc, #400]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e142:	f023 0304 	bic.w	r3, r3, #4
 800e146:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	689b      	ldr	r3, [r3, #8]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d015      	beq.n	800e17c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e150:	f7f7 fce6 	bl	8005b20 <HAL_GetTick>
 800e154:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e156:	e00a      	b.n	800e16e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e158:	f7f7 fce2 	bl	8005b20 <HAL_GetTick>
 800e15c:	4602      	mov	r2, r0
 800e15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	f241 3288 	movw	r2, #5000	; 0x1388
 800e166:	4293      	cmp	r3, r2
 800e168:	d901      	bls.n	800e16e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800e16a:	2303      	movs	r3, #3
 800e16c:	e14e      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e16e:	4b59      	ldr	r3, [pc, #356]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e172:	f003 0302 	and.w	r3, r3, #2
 800e176:	2b00      	cmp	r3, #0
 800e178:	d0ee      	beq.n	800e158 <HAL_RCC_OscConfig+0x5f0>
 800e17a:	e014      	b.n	800e1a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e17c:	f7f7 fcd0 	bl	8005b20 <HAL_GetTick>
 800e180:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e182:	e00a      	b.n	800e19a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e184:	f7f7 fccc 	bl	8005b20 <HAL_GetTick>
 800e188:	4602      	mov	r2, r0
 800e18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18c:	1ad3      	subs	r3, r2, r3
 800e18e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e192:	4293      	cmp	r3, r2
 800e194:	d901      	bls.n	800e19a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800e196:	2303      	movs	r3, #3
 800e198:	e138      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800e19a:	4b4e      	ldr	r3, [pc, #312]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e19e:	f003 0302 	and.w	r3, r3, #2
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1ee      	bne.n	800e184 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f000 812d 	beq.w	800e40a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800e1b0:	4b48      	ldr	r3, [pc, #288]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e1b2:	691b      	ldr	r3, [r3, #16]
 800e1b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e1b8:	2b18      	cmp	r3, #24
 800e1ba:	f000 80bd 	beq.w	800e338 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c2:	2b02      	cmp	r3, #2
 800e1c4:	f040 809e 	bne.w	800e304 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e1c8:	4b42      	ldr	r3, [pc, #264]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4a41      	ldr	r2, [pc, #260]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e1ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e1d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1d4:	f7f7 fca4 	bl	8005b20 <HAL_GetTick>
 800e1d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e1da:	e008      	b.n	800e1ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e1dc:	f7f7 fca0 	bl	8005b20 <HAL_GetTick>
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	2b02      	cmp	r3, #2
 800e1e8:	d901      	bls.n	800e1ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800e1ea:	2303      	movs	r3, #3
 800e1ec:	e10e      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e1ee:	4b39      	ldr	r3, [pc, #228]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1f0      	bne.n	800e1dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e1fa:	4b36      	ldr	r3, [pc, #216]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e1fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e1fe:	4b37      	ldr	r3, [pc, #220]	; (800e2dc <HAL_RCC_OscConfig+0x774>)
 800e200:	4013      	ands	r3, r2
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e20a:	0112      	lsls	r2, r2, #4
 800e20c:	430a      	orrs	r2, r1
 800e20e:	4931      	ldr	r1, [pc, #196]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e210:	4313      	orrs	r3, r2
 800e212:	628b      	str	r3, [r1, #40]	; 0x28
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e218:	3b01      	subs	r3, #1
 800e21a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e222:	3b01      	subs	r3, #1
 800e224:	025b      	lsls	r3, r3, #9
 800e226:	b29b      	uxth	r3, r3
 800e228:	431a      	orrs	r2, r3
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e22e:	3b01      	subs	r3, #1
 800e230:	041b      	lsls	r3, r3, #16
 800e232:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e236:	431a      	orrs	r2, r3
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e23c:	3b01      	subs	r3, #1
 800e23e:	061b      	lsls	r3, r3, #24
 800e240:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e244:	4923      	ldr	r1, [pc, #140]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e246:	4313      	orrs	r3, r2
 800e248:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e24a:	4b22      	ldr	r3, [pc, #136]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e24e:	4a21      	ldr	r2, [pc, #132]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e250:	f023 0301 	bic.w	r3, r3, #1
 800e254:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e256:	4b1f      	ldr	r3, [pc, #124]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e25a:	4b21      	ldr	r3, [pc, #132]	; (800e2e0 <HAL_RCC_OscConfig+0x778>)
 800e25c:	4013      	ands	r3, r2
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e262:	00d2      	lsls	r2, r2, #3
 800e264:	491b      	ldr	r1, [pc, #108]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e266:	4313      	orrs	r3, r2
 800e268:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e26a:	4b1a      	ldr	r3, [pc, #104]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e26e:	f023 020c 	bic.w	r2, r3, #12
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e276:	4917      	ldr	r1, [pc, #92]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e278:	4313      	orrs	r3, r2
 800e27a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e27c:	4b15      	ldr	r3, [pc, #84]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e280:	f023 0202 	bic.w	r2, r3, #2
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e288:	4912      	ldr	r1, [pc, #72]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e28a:	4313      	orrs	r3, r2
 800e28c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e28e:	4b11      	ldr	r3, [pc, #68]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e292:	4a10      	ldr	r2, [pc, #64]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e298:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e29a:	4b0e      	ldr	r3, [pc, #56]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e29e:	4a0d      	ldr	r2, [pc, #52]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e2a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e2a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e2a6:	4b0b      	ldr	r3, [pc, #44]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2aa:	4a0a      	ldr	r2, [pc, #40]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e2ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e2b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e2b2:	4b08      	ldr	r3, [pc, #32]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2b6:	4a07      	ldr	r2, [pc, #28]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e2b8:	f043 0301 	orr.w	r3, r3, #1
 800e2bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e2be:	4b05      	ldr	r3, [pc, #20]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4a04      	ldr	r2, [pc, #16]	; (800e2d4 <HAL_RCC_OscConfig+0x76c>)
 800e2c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e2c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e2ca:	f7f7 fc29 	bl	8005b20 <HAL_GetTick>
 800e2ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e2d0:	e011      	b.n	800e2f6 <HAL_RCC_OscConfig+0x78e>
 800e2d2:	bf00      	nop
 800e2d4:	58024400 	.word	0x58024400
 800e2d8:	58024800 	.word	0x58024800
 800e2dc:	fffffc0c 	.word	0xfffffc0c
 800e2e0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e2e4:	f7f7 fc1c 	bl	8005b20 <HAL_GetTick>
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ec:	1ad3      	subs	r3, r2, r3
 800e2ee:	2b02      	cmp	r3, #2
 800e2f0:	d901      	bls.n	800e2f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e2f2:	2303      	movs	r3, #3
 800e2f4:	e08a      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e2f6:	4b47      	ldr	r3, [pc, #284]	; (800e414 <HAL_RCC_OscConfig+0x8ac>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d0f0      	beq.n	800e2e4 <HAL_RCC_OscConfig+0x77c>
 800e302:	e082      	b.n	800e40a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e304:	4b43      	ldr	r3, [pc, #268]	; (800e414 <HAL_RCC_OscConfig+0x8ac>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4a42      	ldr	r2, [pc, #264]	; (800e414 <HAL_RCC_OscConfig+0x8ac>)
 800e30a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e30e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e310:	f7f7 fc06 	bl	8005b20 <HAL_GetTick>
 800e314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e316:	e008      	b.n	800e32a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e318:	f7f7 fc02 	bl	8005b20 <HAL_GetTick>
 800e31c:	4602      	mov	r2, r0
 800e31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e320:	1ad3      	subs	r3, r2, r3
 800e322:	2b02      	cmp	r3, #2
 800e324:	d901      	bls.n	800e32a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e326:	2303      	movs	r3, #3
 800e328:	e070      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e32a:	4b3a      	ldr	r3, [pc, #232]	; (800e414 <HAL_RCC_OscConfig+0x8ac>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1f0      	bne.n	800e318 <HAL_RCC_OscConfig+0x7b0>
 800e336:	e068      	b.n	800e40a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e338:	4b36      	ldr	r3, [pc, #216]	; (800e414 <HAL_RCC_OscConfig+0x8ac>)
 800e33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e33c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e33e:	4b35      	ldr	r3, [pc, #212]	; (800e414 <HAL_RCC_OscConfig+0x8ac>)
 800e340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e342:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d031      	beq.n	800e3b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	f003 0203 	and.w	r2, r3, #3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e356:	429a      	cmp	r2, r3
 800e358:	d12a      	bne.n	800e3b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	091b      	lsrs	r3, r3, #4
 800e35e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e366:	429a      	cmp	r2, r3
 800e368:	d122      	bne.n	800e3b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e374:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e376:	429a      	cmp	r2, r3
 800e378:	d11a      	bne.n	800e3b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	0a5b      	lsrs	r3, r3, #9
 800e37e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e386:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e388:	429a      	cmp	r2, r3
 800e38a:	d111      	bne.n	800e3b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	0c1b      	lsrs	r3, r3, #16
 800e390:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e398:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d108      	bne.n	800e3b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	0e1b      	lsrs	r3, r3, #24
 800e3a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d001      	beq.n	800e3b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	e02b      	b.n	800e40c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e3b4:	4b17      	ldr	r3, [pc, #92]	; (800e414 <HAL_RCC_OscConfig+0x8ac>)
 800e3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3b8:	08db      	lsrs	r3, r3, #3
 800e3ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3c4:	693a      	ldr	r2, [r7, #16]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d01f      	beq.n	800e40a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e3ca:	4b12      	ldr	r3, [pc, #72]	; (800e414 <HAL_RCC_OscConfig+0x8ac>)
 800e3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ce:	4a11      	ldr	r2, [pc, #68]	; (800e414 <HAL_RCC_OscConfig+0x8ac>)
 800e3d0:	f023 0301 	bic.w	r3, r3, #1
 800e3d4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e3d6:	f7f7 fba3 	bl	8005b20 <HAL_GetTick>
 800e3da:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e3dc:	bf00      	nop
 800e3de:	f7f7 fb9f 	bl	8005b20 <HAL_GetTick>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e6:	4293      	cmp	r3, r2
 800e3e8:	d0f9      	beq.n	800e3de <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e3ea:	4b0a      	ldr	r3, [pc, #40]	; (800e414 <HAL_RCC_OscConfig+0x8ac>)
 800e3ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3ee:	4b0a      	ldr	r3, [pc, #40]	; (800e418 <HAL_RCC_OscConfig+0x8b0>)
 800e3f0:	4013      	ands	r3, r2
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e3f6:	00d2      	lsls	r2, r2, #3
 800e3f8:	4906      	ldr	r1, [pc, #24]	; (800e414 <HAL_RCC_OscConfig+0x8ac>)
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e3fe:	4b05      	ldr	r3, [pc, #20]	; (800e414 <HAL_RCC_OscConfig+0x8ac>)
 800e400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e402:	4a04      	ldr	r2, [pc, #16]	; (800e414 <HAL_RCC_OscConfig+0x8ac>)
 800e404:	f043 0301 	orr.w	r3, r3, #1
 800e408:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e40a:	2300      	movs	r3, #0
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3730      	adds	r7, #48	; 0x30
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}
 800e414:	58024400 	.word	0x58024400
 800e418:	ffff0007 	.word	0xffff0007

0800e41c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b086      	sub	sp, #24
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d101      	bne.n	800e430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e42c:	2301      	movs	r3, #1
 800e42e:	e19c      	b.n	800e76a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e430:	4b8a      	ldr	r3, [pc, #552]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f003 030f 	and.w	r3, r3, #15
 800e438:	683a      	ldr	r2, [r7, #0]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d910      	bls.n	800e460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e43e:	4b87      	ldr	r3, [pc, #540]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f023 020f 	bic.w	r2, r3, #15
 800e446:	4985      	ldr	r1, [pc, #532]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	4313      	orrs	r3, r2
 800e44c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e44e:	4b83      	ldr	r3, [pc, #524]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f003 030f 	and.w	r3, r3, #15
 800e456:	683a      	ldr	r2, [r7, #0]
 800e458:	429a      	cmp	r2, r3
 800e45a:	d001      	beq.n	800e460 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e45c:	2301      	movs	r3, #1
 800e45e:	e184      	b.n	800e76a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f003 0304 	and.w	r3, r3, #4
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d010      	beq.n	800e48e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	691a      	ldr	r2, [r3, #16]
 800e470:	4b7b      	ldr	r3, [pc, #492]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e472:	699b      	ldr	r3, [r3, #24]
 800e474:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e478:	429a      	cmp	r2, r3
 800e47a:	d908      	bls.n	800e48e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e47c:	4b78      	ldr	r3, [pc, #480]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e47e:	699b      	ldr	r3, [r3, #24]
 800e480:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	691b      	ldr	r3, [r3, #16]
 800e488:	4975      	ldr	r1, [pc, #468]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e48a:	4313      	orrs	r3, r2
 800e48c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	f003 0308 	and.w	r3, r3, #8
 800e496:	2b00      	cmp	r3, #0
 800e498:	d010      	beq.n	800e4bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	695a      	ldr	r2, [r3, #20]
 800e49e:	4b70      	ldr	r3, [pc, #448]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e4a0:	69db      	ldr	r3, [r3, #28]
 800e4a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e4a6:	429a      	cmp	r2, r3
 800e4a8:	d908      	bls.n	800e4bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e4aa:	4b6d      	ldr	r3, [pc, #436]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e4ac:	69db      	ldr	r3, [r3, #28]
 800e4ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	695b      	ldr	r3, [r3, #20]
 800e4b6:	496a      	ldr	r1, [pc, #424]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f003 0310 	and.w	r3, r3, #16
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d010      	beq.n	800e4ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	699a      	ldr	r2, [r3, #24]
 800e4cc:	4b64      	ldr	r3, [pc, #400]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e4ce:	69db      	ldr	r3, [r3, #28]
 800e4d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d908      	bls.n	800e4ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e4d8:	4b61      	ldr	r3, [pc, #388]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e4da:	69db      	ldr	r3, [r3, #28]
 800e4dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	699b      	ldr	r3, [r3, #24]
 800e4e4:	495e      	ldr	r1, [pc, #376]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f003 0320 	and.w	r3, r3, #32
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d010      	beq.n	800e518 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	69da      	ldr	r2, [r3, #28]
 800e4fa:	4b59      	ldr	r3, [pc, #356]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e4fc:	6a1b      	ldr	r3, [r3, #32]
 800e4fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e502:	429a      	cmp	r2, r3
 800e504:	d908      	bls.n	800e518 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e506:	4b56      	ldr	r3, [pc, #344]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e508:	6a1b      	ldr	r3, [r3, #32]
 800e50a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	69db      	ldr	r3, [r3, #28]
 800e512:	4953      	ldr	r1, [pc, #332]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e514:	4313      	orrs	r3, r2
 800e516:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f003 0302 	and.w	r3, r3, #2
 800e520:	2b00      	cmp	r3, #0
 800e522:	d010      	beq.n	800e546 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	68da      	ldr	r2, [r3, #12]
 800e528:	4b4d      	ldr	r3, [pc, #308]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e52a:	699b      	ldr	r3, [r3, #24]
 800e52c:	f003 030f 	and.w	r3, r3, #15
 800e530:	429a      	cmp	r2, r3
 800e532:	d908      	bls.n	800e546 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e534:	4b4a      	ldr	r3, [pc, #296]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e536:	699b      	ldr	r3, [r3, #24]
 800e538:	f023 020f 	bic.w	r2, r3, #15
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	4947      	ldr	r1, [pc, #284]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e542:	4313      	orrs	r3, r2
 800e544:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f003 0301 	and.w	r3, r3, #1
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d055      	beq.n	800e5fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e552:	4b43      	ldr	r3, [pc, #268]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e554:	699b      	ldr	r3, [r3, #24]
 800e556:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	4940      	ldr	r1, [pc, #256]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e560:	4313      	orrs	r3, r2
 800e562:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	685b      	ldr	r3, [r3, #4]
 800e568:	2b02      	cmp	r3, #2
 800e56a:	d107      	bne.n	800e57c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e56c:	4b3c      	ldr	r3, [pc, #240]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e574:	2b00      	cmp	r3, #0
 800e576:	d121      	bne.n	800e5bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e578:	2301      	movs	r3, #1
 800e57a:	e0f6      	b.n	800e76a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	685b      	ldr	r3, [r3, #4]
 800e580:	2b03      	cmp	r3, #3
 800e582:	d107      	bne.n	800e594 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e584:	4b36      	ldr	r3, [pc, #216]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d115      	bne.n	800e5bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e590:	2301      	movs	r3, #1
 800e592:	e0ea      	b.n	800e76a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d107      	bne.n	800e5ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e59c:	4b30      	ldr	r3, [pc, #192]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d109      	bne.n	800e5bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	e0de      	b.n	800e76a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e5ac:	4b2c      	ldr	r3, [pc, #176]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f003 0304 	and.w	r3, r3, #4
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d101      	bne.n	800e5bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	e0d6      	b.n	800e76a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e5bc:	4b28      	ldr	r3, [pc, #160]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e5be:	691b      	ldr	r3, [r3, #16]
 800e5c0:	f023 0207 	bic.w	r2, r3, #7
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	4925      	ldr	r1, [pc, #148]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e5ce:	f7f7 faa7 	bl	8005b20 <HAL_GetTick>
 800e5d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e5d4:	e00a      	b.n	800e5ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e5d6:	f7f7 faa3 	bl	8005b20 <HAL_GetTick>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	1ad3      	subs	r3, r2, r3
 800e5e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d901      	bls.n	800e5ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e5e8:	2303      	movs	r3, #3
 800e5ea:	e0be      	b.n	800e76a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e5ec:	4b1c      	ldr	r3, [pc, #112]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e5ee:	691b      	ldr	r3, [r3, #16]
 800e5f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	00db      	lsls	r3, r3, #3
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d1eb      	bne.n	800e5d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f003 0302 	and.w	r3, r3, #2
 800e606:	2b00      	cmp	r3, #0
 800e608:	d010      	beq.n	800e62c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	68da      	ldr	r2, [r3, #12]
 800e60e:	4b14      	ldr	r3, [pc, #80]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e610:	699b      	ldr	r3, [r3, #24]
 800e612:	f003 030f 	and.w	r3, r3, #15
 800e616:	429a      	cmp	r2, r3
 800e618:	d208      	bcs.n	800e62c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e61a:	4b11      	ldr	r3, [pc, #68]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e61c:	699b      	ldr	r3, [r3, #24]
 800e61e:	f023 020f 	bic.w	r2, r3, #15
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	68db      	ldr	r3, [r3, #12]
 800e626:	490e      	ldr	r1, [pc, #56]	; (800e660 <HAL_RCC_ClockConfig+0x244>)
 800e628:	4313      	orrs	r3, r2
 800e62a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e62c:	4b0b      	ldr	r3, [pc, #44]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f003 030f 	and.w	r3, r3, #15
 800e634:	683a      	ldr	r2, [r7, #0]
 800e636:	429a      	cmp	r2, r3
 800e638:	d214      	bcs.n	800e664 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e63a:	4b08      	ldr	r3, [pc, #32]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f023 020f 	bic.w	r2, r3, #15
 800e642:	4906      	ldr	r1, [pc, #24]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	4313      	orrs	r3, r2
 800e648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e64a:	4b04      	ldr	r3, [pc, #16]	; (800e65c <HAL_RCC_ClockConfig+0x240>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f003 030f 	and.w	r3, r3, #15
 800e652:	683a      	ldr	r2, [r7, #0]
 800e654:	429a      	cmp	r2, r3
 800e656:	d005      	beq.n	800e664 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e658:	2301      	movs	r3, #1
 800e65a:	e086      	b.n	800e76a <HAL_RCC_ClockConfig+0x34e>
 800e65c:	52002000 	.word	0x52002000
 800e660:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f003 0304 	and.w	r3, r3, #4
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d010      	beq.n	800e692 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	691a      	ldr	r2, [r3, #16]
 800e674:	4b3f      	ldr	r3, [pc, #252]	; (800e774 <HAL_RCC_ClockConfig+0x358>)
 800e676:	699b      	ldr	r3, [r3, #24]
 800e678:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d208      	bcs.n	800e692 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e680:	4b3c      	ldr	r3, [pc, #240]	; (800e774 <HAL_RCC_ClockConfig+0x358>)
 800e682:	699b      	ldr	r3, [r3, #24]
 800e684:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	691b      	ldr	r3, [r3, #16]
 800e68c:	4939      	ldr	r1, [pc, #228]	; (800e774 <HAL_RCC_ClockConfig+0x358>)
 800e68e:	4313      	orrs	r3, r2
 800e690:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f003 0308 	and.w	r3, r3, #8
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d010      	beq.n	800e6c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	695a      	ldr	r2, [r3, #20]
 800e6a2:	4b34      	ldr	r3, [pc, #208]	; (800e774 <HAL_RCC_ClockConfig+0x358>)
 800e6a4:	69db      	ldr	r3, [r3, #28]
 800e6a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d208      	bcs.n	800e6c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e6ae:	4b31      	ldr	r3, [pc, #196]	; (800e774 <HAL_RCC_ClockConfig+0x358>)
 800e6b0:	69db      	ldr	r3, [r3, #28]
 800e6b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	695b      	ldr	r3, [r3, #20]
 800e6ba:	492e      	ldr	r1, [pc, #184]	; (800e774 <HAL_RCC_ClockConfig+0x358>)
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f003 0310 	and.w	r3, r3, #16
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d010      	beq.n	800e6ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	699a      	ldr	r2, [r3, #24]
 800e6d0:	4b28      	ldr	r3, [pc, #160]	; (800e774 <HAL_RCC_ClockConfig+0x358>)
 800e6d2:	69db      	ldr	r3, [r3, #28]
 800e6d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d208      	bcs.n	800e6ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e6dc:	4b25      	ldr	r3, [pc, #148]	; (800e774 <HAL_RCC_ClockConfig+0x358>)
 800e6de:	69db      	ldr	r3, [r3, #28]
 800e6e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	699b      	ldr	r3, [r3, #24]
 800e6e8:	4922      	ldr	r1, [pc, #136]	; (800e774 <HAL_RCC_ClockConfig+0x358>)
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f003 0320 	and.w	r3, r3, #32
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d010      	beq.n	800e71c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	69da      	ldr	r2, [r3, #28]
 800e6fe:	4b1d      	ldr	r3, [pc, #116]	; (800e774 <HAL_RCC_ClockConfig+0x358>)
 800e700:	6a1b      	ldr	r3, [r3, #32]
 800e702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e706:	429a      	cmp	r2, r3
 800e708:	d208      	bcs.n	800e71c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e70a:	4b1a      	ldr	r3, [pc, #104]	; (800e774 <HAL_RCC_ClockConfig+0x358>)
 800e70c:	6a1b      	ldr	r3, [r3, #32]
 800e70e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	69db      	ldr	r3, [r3, #28]
 800e716:	4917      	ldr	r1, [pc, #92]	; (800e774 <HAL_RCC_ClockConfig+0x358>)
 800e718:	4313      	orrs	r3, r2
 800e71a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e71c:	f000 f834 	bl	800e788 <HAL_RCC_GetSysClockFreq>
 800e720:	4602      	mov	r2, r0
 800e722:	4b14      	ldr	r3, [pc, #80]	; (800e774 <HAL_RCC_ClockConfig+0x358>)
 800e724:	699b      	ldr	r3, [r3, #24]
 800e726:	0a1b      	lsrs	r3, r3, #8
 800e728:	f003 030f 	and.w	r3, r3, #15
 800e72c:	4912      	ldr	r1, [pc, #72]	; (800e778 <HAL_RCC_ClockConfig+0x35c>)
 800e72e:	5ccb      	ldrb	r3, [r1, r3]
 800e730:	f003 031f 	and.w	r3, r3, #31
 800e734:	fa22 f303 	lsr.w	r3, r2, r3
 800e738:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e73a:	4b0e      	ldr	r3, [pc, #56]	; (800e774 <HAL_RCC_ClockConfig+0x358>)
 800e73c:	699b      	ldr	r3, [r3, #24]
 800e73e:	f003 030f 	and.w	r3, r3, #15
 800e742:	4a0d      	ldr	r2, [pc, #52]	; (800e778 <HAL_RCC_ClockConfig+0x35c>)
 800e744:	5cd3      	ldrb	r3, [r2, r3]
 800e746:	f003 031f 	and.w	r3, r3, #31
 800e74a:	693a      	ldr	r2, [r7, #16]
 800e74c:	fa22 f303 	lsr.w	r3, r2, r3
 800e750:	4a0a      	ldr	r2, [pc, #40]	; (800e77c <HAL_RCC_ClockConfig+0x360>)
 800e752:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e754:	4a0a      	ldr	r2, [pc, #40]	; (800e780 <HAL_RCC_ClockConfig+0x364>)
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e75a:	4b0a      	ldr	r3, [pc, #40]	; (800e784 <HAL_RCC_ClockConfig+0x368>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	4618      	mov	r0, r3
 800e760:	f7f5 ff42 	bl	80045e8 <HAL_InitTick>
 800e764:	4603      	mov	r3, r0
 800e766:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e768:	7bfb      	ldrb	r3, [r7, #15]
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3718      	adds	r7, #24
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	58024400 	.word	0x58024400
 800e778:	0801ae54 	.word	0x0801ae54
 800e77c:	240000c4 	.word	0x240000c4
 800e780:	240000c0 	.word	0x240000c0
 800e784:	240000c8 	.word	0x240000c8

0800e788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e788:	b480      	push	{r7}
 800e78a:	b089      	sub	sp, #36	; 0x24
 800e78c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e78e:	4bb3      	ldr	r3, [pc, #716]	; (800ea5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e790:	691b      	ldr	r3, [r3, #16]
 800e792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e796:	2b18      	cmp	r3, #24
 800e798:	f200 8155 	bhi.w	800ea46 <HAL_RCC_GetSysClockFreq+0x2be>
 800e79c:	a201      	add	r2, pc, #4	; (adr r2, 800e7a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a2:	bf00      	nop
 800e7a4:	0800e809 	.word	0x0800e809
 800e7a8:	0800ea47 	.word	0x0800ea47
 800e7ac:	0800ea47 	.word	0x0800ea47
 800e7b0:	0800ea47 	.word	0x0800ea47
 800e7b4:	0800ea47 	.word	0x0800ea47
 800e7b8:	0800ea47 	.word	0x0800ea47
 800e7bc:	0800ea47 	.word	0x0800ea47
 800e7c0:	0800ea47 	.word	0x0800ea47
 800e7c4:	0800e82f 	.word	0x0800e82f
 800e7c8:	0800ea47 	.word	0x0800ea47
 800e7cc:	0800ea47 	.word	0x0800ea47
 800e7d0:	0800ea47 	.word	0x0800ea47
 800e7d4:	0800ea47 	.word	0x0800ea47
 800e7d8:	0800ea47 	.word	0x0800ea47
 800e7dc:	0800ea47 	.word	0x0800ea47
 800e7e0:	0800ea47 	.word	0x0800ea47
 800e7e4:	0800e835 	.word	0x0800e835
 800e7e8:	0800ea47 	.word	0x0800ea47
 800e7ec:	0800ea47 	.word	0x0800ea47
 800e7f0:	0800ea47 	.word	0x0800ea47
 800e7f4:	0800ea47 	.word	0x0800ea47
 800e7f8:	0800ea47 	.word	0x0800ea47
 800e7fc:	0800ea47 	.word	0x0800ea47
 800e800:	0800ea47 	.word	0x0800ea47
 800e804:	0800e83b 	.word	0x0800e83b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e808:	4b94      	ldr	r3, [pc, #592]	; (800ea5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f003 0320 	and.w	r3, r3, #32
 800e810:	2b00      	cmp	r3, #0
 800e812:	d009      	beq.n	800e828 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e814:	4b91      	ldr	r3, [pc, #580]	; (800ea5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	08db      	lsrs	r3, r3, #3
 800e81a:	f003 0303 	and.w	r3, r3, #3
 800e81e:	4a90      	ldr	r2, [pc, #576]	; (800ea60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e820:	fa22 f303 	lsr.w	r3, r2, r3
 800e824:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e826:	e111      	b.n	800ea4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e828:	4b8d      	ldr	r3, [pc, #564]	; (800ea60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e82a:	61bb      	str	r3, [r7, #24]
      break;
 800e82c:	e10e      	b.n	800ea4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e82e:	4b8d      	ldr	r3, [pc, #564]	; (800ea64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e830:	61bb      	str	r3, [r7, #24]
      break;
 800e832:	e10b      	b.n	800ea4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e834:	4b8c      	ldr	r3, [pc, #560]	; (800ea68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e836:	61bb      	str	r3, [r7, #24]
      break;
 800e838:	e108      	b.n	800ea4c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e83a:	4b88      	ldr	r3, [pc, #544]	; (800ea5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e83e:	f003 0303 	and.w	r3, r3, #3
 800e842:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e844:	4b85      	ldr	r3, [pc, #532]	; (800ea5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e848:	091b      	lsrs	r3, r3, #4
 800e84a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e84e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e850:	4b82      	ldr	r3, [pc, #520]	; (800ea5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e854:	f003 0301 	and.w	r3, r3, #1
 800e858:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e85a:	4b80      	ldr	r3, [pc, #512]	; (800ea5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e85c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e85e:	08db      	lsrs	r3, r3, #3
 800e860:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e864:	68fa      	ldr	r2, [r7, #12]
 800e866:	fb02 f303 	mul.w	r3, r2, r3
 800e86a:	ee07 3a90 	vmov	s15, r3
 800e86e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e872:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	f000 80e1 	beq.w	800ea40 <HAL_RCC_GetSysClockFreq+0x2b8>
 800e87e:	697b      	ldr	r3, [r7, #20]
 800e880:	2b02      	cmp	r3, #2
 800e882:	f000 8083 	beq.w	800e98c <HAL_RCC_GetSysClockFreq+0x204>
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	2b02      	cmp	r3, #2
 800e88a:	f200 80a1 	bhi.w	800e9d0 <HAL_RCC_GetSysClockFreq+0x248>
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d003      	beq.n	800e89c <HAL_RCC_GetSysClockFreq+0x114>
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	2b01      	cmp	r3, #1
 800e898:	d056      	beq.n	800e948 <HAL_RCC_GetSysClockFreq+0x1c0>
 800e89a:	e099      	b.n	800e9d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e89c:	4b6f      	ldr	r3, [pc, #444]	; (800ea5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f003 0320 	and.w	r3, r3, #32
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d02d      	beq.n	800e904 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e8a8:	4b6c      	ldr	r3, [pc, #432]	; (800ea5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	08db      	lsrs	r3, r3, #3
 800e8ae:	f003 0303 	and.w	r3, r3, #3
 800e8b2:	4a6b      	ldr	r2, [pc, #428]	; (800ea60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e8b4:	fa22 f303 	lsr.w	r3, r2, r3
 800e8b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	ee07 3a90 	vmov	s15, r3
 800e8c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	ee07 3a90 	vmov	s15, r3
 800e8ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e8ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e8d2:	4b62      	ldr	r3, [pc, #392]	; (800ea5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8da:	ee07 3a90 	vmov	s15, r3
 800e8de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e8e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e8e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ea6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800e8ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e8ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e8f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e8f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e8fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e8fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e902:	e087      	b.n	800ea14 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	ee07 3a90 	vmov	s15, r3
 800e90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e90e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ea70 <HAL_RCC_GetSysClockFreq+0x2e8>
 800e912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e916:	4b51      	ldr	r3, [pc, #324]	; (800ea5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e91e:	ee07 3a90 	vmov	s15, r3
 800e922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e926:	ed97 6a02 	vldr	s12, [r7, #8]
 800e92a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ea6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800e92e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e93a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e93e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e942:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e946:	e065      	b.n	800ea14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	ee07 3a90 	vmov	s15, r3
 800e94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e952:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ea74 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e95a:	4b40      	ldr	r3, [pc, #256]	; (800ea5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e95e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e962:	ee07 3a90 	vmov	s15, r3
 800e966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e96a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e96e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ea6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800e972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e97a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e97e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e982:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e986:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e98a:	e043      	b.n	800ea14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	ee07 3a90 	vmov	s15, r3
 800e992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e996:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ea78 <HAL_RCC_GetSysClockFreq+0x2f0>
 800e99a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e99e:	4b2f      	ldr	r3, [pc, #188]	; (800ea5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9a6:	ee07 3a90 	vmov	s15, r3
 800e9aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800e9b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ea6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800e9b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e9ce:	e021      	b.n	800ea14 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	ee07 3a90 	vmov	s15, r3
 800e9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9da:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ea74 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e9de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9e2:	4b1e      	ldr	r3, [pc, #120]	; (800ea5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9ea:	ee07 3a90 	vmov	s15, r3
 800e9ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e9f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ea6c <HAL_RCC_GetSysClockFreq+0x2e4>
 800e9fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ea12:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ea14:	4b11      	ldr	r3, [pc, #68]	; (800ea5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ea16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea18:	0a5b      	lsrs	r3, r3, #9
 800ea1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea1e:	3301      	adds	r3, #1
 800ea20:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	ee07 3a90 	vmov	s15, r3
 800ea28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ea2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ea30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea38:	ee17 3a90 	vmov	r3, s15
 800ea3c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ea3e:	e005      	b.n	800ea4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ea40:	2300      	movs	r3, #0
 800ea42:	61bb      	str	r3, [r7, #24]
      break;
 800ea44:	e002      	b.n	800ea4c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ea46:	4b07      	ldr	r3, [pc, #28]	; (800ea64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ea48:	61bb      	str	r3, [r7, #24]
      break;
 800ea4a:	bf00      	nop
  }

  return sysclockfreq;
 800ea4c:	69bb      	ldr	r3, [r7, #24]
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3724      	adds	r7, #36	; 0x24
 800ea52:	46bd      	mov	sp, r7
 800ea54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea58:	4770      	bx	lr
 800ea5a:	bf00      	nop
 800ea5c:	58024400 	.word	0x58024400
 800ea60:	03d09000 	.word	0x03d09000
 800ea64:	003d0900 	.word	0x003d0900
 800ea68:	017d7840 	.word	0x017d7840
 800ea6c:	46000000 	.word	0x46000000
 800ea70:	4c742400 	.word	0x4c742400
 800ea74:	4a742400 	.word	0x4a742400
 800ea78:	4bbebc20 	.word	0x4bbebc20

0800ea7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ea82:	f7ff fe81 	bl	800e788 <HAL_RCC_GetSysClockFreq>
 800ea86:	4602      	mov	r2, r0
 800ea88:	4b10      	ldr	r3, [pc, #64]	; (800eacc <HAL_RCC_GetHCLKFreq+0x50>)
 800ea8a:	699b      	ldr	r3, [r3, #24]
 800ea8c:	0a1b      	lsrs	r3, r3, #8
 800ea8e:	f003 030f 	and.w	r3, r3, #15
 800ea92:	490f      	ldr	r1, [pc, #60]	; (800ead0 <HAL_RCC_GetHCLKFreq+0x54>)
 800ea94:	5ccb      	ldrb	r3, [r1, r3]
 800ea96:	f003 031f 	and.w	r3, r3, #31
 800ea9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ea9e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800eaa0:	4b0a      	ldr	r3, [pc, #40]	; (800eacc <HAL_RCC_GetHCLKFreq+0x50>)
 800eaa2:	699b      	ldr	r3, [r3, #24]
 800eaa4:	f003 030f 	and.w	r3, r3, #15
 800eaa8:	4a09      	ldr	r2, [pc, #36]	; (800ead0 <HAL_RCC_GetHCLKFreq+0x54>)
 800eaaa:	5cd3      	ldrb	r3, [r2, r3]
 800eaac:	f003 031f 	and.w	r3, r3, #31
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	fa22 f303 	lsr.w	r3, r2, r3
 800eab6:	4a07      	ldr	r2, [pc, #28]	; (800ead4 <HAL_RCC_GetHCLKFreq+0x58>)
 800eab8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800eaba:	4a07      	ldr	r2, [pc, #28]	; (800ead8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800eac0:	4b04      	ldr	r3, [pc, #16]	; (800ead4 <HAL_RCC_GetHCLKFreq+0x58>)
 800eac2:	681b      	ldr	r3, [r3, #0]
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3708      	adds	r7, #8
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	58024400 	.word	0x58024400
 800ead0:	0801ae54 	.word	0x0801ae54
 800ead4:	240000c4 	.word	0x240000c4
 800ead8:	240000c0 	.word	0x240000c0

0800eadc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800eae0:	f7ff ffcc 	bl	800ea7c <HAL_RCC_GetHCLKFreq>
 800eae4:	4602      	mov	r2, r0
 800eae6:	4b06      	ldr	r3, [pc, #24]	; (800eb00 <HAL_RCC_GetPCLK1Freq+0x24>)
 800eae8:	69db      	ldr	r3, [r3, #28]
 800eaea:	091b      	lsrs	r3, r3, #4
 800eaec:	f003 0307 	and.w	r3, r3, #7
 800eaf0:	4904      	ldr	r1, [pc, #16]	; (800eb04 <HAL_RCC_GetPCLK1Freq+0x28>)
 800eaf2:	5ccb      	ldrb	r3, [r1, r3]
 800eaf4:	f003 031f 	and.w	r3, r3, #31
 800eaf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	bd80      	pop	{r7, pc}
 800eb00:	58024400 	.word	0x58024400
 800eb04:	0801ae54 	.word	0x0801ae54

0800eb08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800eb0c:	f7ff ffb6 	bl	800ea7c <HAL_RCC_GetHCLKFreq>
 800eb10:	4602      	mov	r2, r0
 800eb12:	4b06      	ldr	r3, [pc, #24]	; (800eb2c <HAL_RCC_GetPCLK2Freq+0x24>)
 800eb14:	69db      	ldr	r3, [r3, #28]
 800eb16:	0a1b      	lsrs	r3, r3, #8
 800eb18:	f003 0307 	and.w	r3, r3, #7
 800eb1c:	4904      	ldr	r1, [pc, #16]	; (800eb30 <HAL_RCC_GetPCLK2Freq+0x28>)
 800eb1e:	5ccb      	ldrb	r3, [r1, r3]
 800eb20:	f003 031f 	and.w	r3, r3, #31
 800eb24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	58024400 	.word	0x58024400
 800eb30:	0801ae54 	.word	0x0801ae54

0800eb34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	223f      	movs	r2, #63	; 0x3f
 800eb42:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800eb44:	4b1a      	ldr	r3, [pc, #104]	; (800ebb0 <HAL_RCC_GetClockConfig+0x7c>)
 800eb46:	691b      	ldr	r3, [r3, #16]
 800eb48:	f003 0207 	and.w	r2, r3, #7
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800eb50:	4b17      	ldr	r3, [pc, #92]	; (800ebb0 <HAL_RCC_GetClockConfig+0x7c>)
 800eb52:	699b      	ldr	r3, [r3, #24]
 800eb54:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800eb5c:	4b14      	ldr	r3, [pc, #80]	; (800ebb0 <HAL_RCC_GetClockConfig+0x7c>)
 800eb5e:	699b      	ldr	r3, [r3, #24]
 800eb60:	f003 020f 	and.w	r2, r3, #15
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800eb68:	4b11      	ldr	r3, [pc, #68]	; (800ebb0 <HAL_RCC_GetClockConfig+0x7c>)
 800eb6a:	699b      	ldr	r3, [r3, #24]
 800eb6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800eb74:	4b0e      	ldr	r3, [pc, #56]	; (800ebb0 <HAL_RCC_GetClockConfig+0x7c>)
 800eb76:	69db      	ldr	r3, [r3, #28]
 800eb78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800eb80:	4b0b      	ldr	r3, [pc, #44]	; (800ebb0 <HAL_RCC_GetClockConfig+0x7c>)
 800eb82:	69db      	ldr	r3, [r3, #28]
 800eb84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800eb8c:	4b08      	ldr	r3, [pc, #32]	; (800ebb0 <HAL_RCC_GetClockConfig+0x7c>)
 800eb8e:	6a1b      	ldr	r3, [r3, #32]
 800eb90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800eb98:	4b06      	ldr	r3, [pc, #24]	; (800ebb4 <HAL_RCC_GetClockConfig+0x80>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f003 020f 	and.w	r2, r3, #15
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	601a      	str	r2, [r3, #0]
}
 800eba4:	bf00      	nop
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr
 800ebb0:	58024400 	.word	0x58024400
 800ebb4:	52002000 	.word	0x52002000

0800ebb8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ebb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ebbc:	b0ca      	sub	sp, #296	; 0x128
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ebca:	2300      	movs	r3, #0
 800ebcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ebd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ebdc:	2500      	movs	r5, #0
 800ebde:	ea54 0305 	orrs.w	r3, r4, r5
 800ebe2:	d049      	beq.n	800ec78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ebe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ebee:	d02f      	beq.n	800ec50 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ebf0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ebf4:	d828      	bhi.n	800ec48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ebf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ebfa:	d01a      	beq.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ebfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec00:	d822      	bhi.n	800ec48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d003      	beq.n	800ec0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ec06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec0a:	d007      	beq.n	800ec1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ec0c:	e01c      	b.n	800ec48 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec0e:	4bb8      	ldr	r3, [pc, #736]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec12:	4ab7      	ldr	r2, [pc, #732]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ec1a:	e01a      	b.n	800ec52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ec1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec20:	3308      	adds	r3, #8
 800ec22:	2102      	movs	r1, #2
 800ec24:	4618      	mov	r0, r3
 800ec26:	f002 fb61 	bl	80112ec <RCCEx_PLL2_Config>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ec30:	e00f      	b.n	800ec52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ec32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec36:	3328      	adds	r3, #40	; 0x28
 800ec38:	2102      	movs	r1, #2
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f002 fc08 	bl	8011450 <RCCEx_PLL3_Config>
 800ec40:	4603      	mov	r3, r0
 800ec42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ec46:	e004      	b.n	800ec52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ec4e:	e000      	b.n	800ec52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ec50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d10a      	bne.n	800ec70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ec5a:	4ba5      	ldr	r3, [pc, #660]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ec62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec68:	4aa1      	ldr	r2, [pc, #644]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ec6a:	430b      	orrs	r3, r1
 800ec6c:	6513      	str	r3, [r2, #80]	; 0x50
 800ec6e:	e003      	b.n	800ec78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ec78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec80:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ec84:	f04f 0900 	mov.w	r9, #0
 800ec88:	ea58 0309 	orrs.w	r3, r8, r9
 800ec8c:	d047      	beq.n	800ed1e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ec8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec94:	2b04      	cmp	r3, #4
 800ec96:	d82a      	bhi.n	800ecee <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ec98:	a201      	add	r2, pc, #4	; (adr r2, 800eca0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ec9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec9e:	bf00      	nop
 800eca0:	0800ecb5 	.word	0x0800ecb5
 800eca4:	0800ecc3 	.word	0x0800ecc3
 800eca8:	0800ecd9 	.word	0x0800ecd9
 800ecac:	0800ecf7 	.word	0x0800ecf7
 800ecb0:	0800ecf7 	.word	0x0800ecf7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ecb4:	4b8e      	ldr	r3, [pc, #568]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ecb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb8:	4a8d      	ldr	r2, [pc, #564]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ecba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ecbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ecc0:	e01a      	b.n	800ecf8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ecc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecc6:	3308      	adds	r3, #8
 800ecc8:	2100      	movs	r1, #0
 800ecca:	4618      	mov	r0, r3
 800eccc:	f002 fb0e 	bl	80112ec <RCCEx_PLL2_Config>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ecd6:	e00f      	b.n	800ecf8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ecd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecdc:	3328      	adds	r3, #40	; 0x28
 800ecde:	2100      	movs	r1, #0
 800ece0:	4618      	mov	r0, r3
 800ece2:	f002 fbb5 	bl	8011450 <RCCEx_PLL3_Config>
 800ece6:	4603      	mov	r3, r0
 800ece8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ecec:	e004      	b.n	800ecf8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ecf4:	e000      	b.n	800ecf8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ecf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ecf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d10a      	bne.n	800ed16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ed00:	4b7b      	ldr	r3, [pc, #492]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed04:	f023 0107 	bic.w	r1, r3, #7
 800ed08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed0e:	4a78      	ldr	r2, [pc, #480]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed10:	430b      	orrs	r3, r1
 800ed12:	6513      	str	r3, [r2, #80]	; 0x50
 800ed14:	e003      	b.n	800ed1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ed1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ed1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed26:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ed2a:	f04f 0b00 	mov.w	fp, #0
 800ed2e:	ea5a 030b 	orrs.w	r3, sl, fp
 800ed32:	d04c      	beq.n	800edce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ed34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed3e:	d030      	beq.n	800eda2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ed40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed44:	d829      	bhi.n	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ed46:	2bc0      	cmp	r3, #192	; 0xc0
 800ed48:	d02d      	beq.n	800eda6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ed4a:	2bc0      	cmp	r3, #192	; 0xc0
 800ed4c:	d825      	bhi.n	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ed4e:	2b80      	cmp	r3, #128	; 0x80
 800ed50:	d018      	beq.n	800ed84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ed52:	2b80      	cmp	r3, #128	; 0x80
 800ed54:	d821      	bhi.n	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d002      	beq.n	800ed60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ed5a:	2b40      	cmp	r3, #64	; 0x40
 800ed5c:	d007      	beq.n	800ed6e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ed5e:	e01c      	b.n	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed60:	4b63      	ldr	r3, [pc, #396]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed64:	4a62      	ldr	r2, [pc, #392]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ed66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ed6c:	e01c      	b.n	800eda8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed72:	3308      	adds	r3, #8
 800ed74:	2100      	movs	r1, #0
 800ed76:	4618      	mov	r0, r3
 800ed78:	f002 fab8 	bl	80112ec <RCCEx_PLL2_Config>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ed82:	e011      	b.n	800eda8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ed84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed88:	3328      	adds	r3, #40	; 0x28
 800ed8a:	2100      	movs	r1, #0
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f002 fb5f 	bl	8011450 <RCCEx_PLL3_Config>
 800ed92:	4603      	mov	r3, r0
 800ed94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ed98:	e006      	b.n	800eda8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eda0:	e002      	b.n	800eda8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800eda2:	bf00      	nop
 800eda4:	e000      	b.n	800eda8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800eda6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eda8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800edac:	2b00      	cmp	r3, #0
 800edae:	d10a      	bne.n	800edc6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800edb0:	4b4f      	ldr	r3, [pc, #316]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800edb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edb4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800edb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edbe:	4a4c      	ldr	r2, [pc, #304]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800edc0:	430b      	orrs	r3, r1
 800edc2:	6513      	str	r3, [r2, #80]	; 0x50
 800edc4:	e003      	b.n	800edce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800edca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800edce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800edda:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800edde:	2300      	movs	r3, #0
 800ede0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ede4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ede8:	460b      	mov	r3, r1
 800edea:	4313      	orrs	r3, r2
 800edec:	d053      	beq.n	800ee96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800edee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800edf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800edfa:	d035      	beq.n	800ee68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800edfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ee00:	d82e      	bhi.n	800ee60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ee02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ee06:	d031      	beq.n	800ee6c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ee08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ee0c:	d828      	bhi.n	800ee60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ee0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee12:	d01a      	beq.n	800ee4a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ee14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee18:	d822      	bhi.n	800ee60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d003      	beq.n	800ee26 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ee1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ee22:	d007      	beq.n	800ee34 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ee24:	e01c      	b.n	800ee60 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee26:	4b32      	ldr	r3, [pc, #200]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ee28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee2a:	4a31      	ldr	r2, [pc, #196]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ee2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ee30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ee32:	e01c      	b.n	800ee6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ee34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee38:	3308      	adds	r3, #8
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f002 fa55 	bl	80112ec <RCCEx_PLL2_Config>
 800ee42:	4603      	mov	r3, r0
 800ee44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ee48:	e011      	b.n	800ee6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ee4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee4e:	3328      	adds	r3, #40	; 0x28
 800ee50:	2100      	movs	r1, #0
 800ee52:	4618      	mov	r0, r3
 800ee54:	f002 fafc 	bl	8011450 <RCCEx_PLL3_Config>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ee5e:	e006      	b.n	800ee6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ee60:	2301      	movs	r3, #1
 800ee62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ee66:	e002      	b.n	800ee6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ee68:	bf00      	nop
 800ee6a:	e000      	b.n	800ee6e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ee6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d10b      	bne.n	800ee8e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ee76:	4b1e      	ldr	r3, [pc, #120]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ee78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee7a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ee7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ee86:	4a1a      	ldr	r2, [pc, #104]	; (800eef0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ee88:	430b      	orrs	r3, r1
 800ee8a:	6593      	str	r3, [r2, #88]	; 0x58
 800ee8c:	e003      	b.n	800ee96 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ee96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800eea2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800eea6:	2300      	movs	r3, #0
 800eea8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800eeac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800eeb0:	460b      	mov	r3, r1
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	d056      	beq.n	800ef64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800eeb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eeba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eebe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eec2:	d038      	beq.n	800ef36 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800eec4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eec8:	d831      	bhi.n	800ef2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800eeca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800eece:	d034      	beq.n	800ef3a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800eed0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800eed4:	d82b      	bhi.n	800ef2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800eed6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eeda:	d01d      	beq.n	800ef18 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800eedc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eee0:	d825      	bhi.n	800ef2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d006      	beq.n	800eef4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800eee6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800eeea:	d00a      	beq.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800eeec:	e01f      	b.n	800ef2e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800eeee:	bf00      	nop
 800eef0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eef4:	4ba2      	ldr	r3, [pc, #648]	; (800f180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef8:	4aa1      	ldr	r2, [pc, #644]	; (800f180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eefa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eefe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ef00:	e01c      	b.n	800ef3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ef02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef06:	3308      	adds	r3, #8
 800ef08:	2100      	movs	r1, #0
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f002 f9ee 	bl	80112ec <RCCEx_PLL2_Config>
 800ef10:	4603      	mov	r3, r0
 800ef12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ef16:	e011      	b.n	800ef3c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ef18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef1c:	3328      	adds	r3, #40	; 0x28
 800ef1e:	2100      	movs	r1, #0
 800ef20:	4618      	mov	r0, r3
 800ef22:	f002 fa95 	bl	8011450 <RCCEx_PLL3_Config>
 800ef26:	4603      	mov	r3, r0
 800ef28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ef2c:	e006      	b.n	800ef3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ef2e:	2301      	movs	r3, #1
 800ef30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ef34:	e002      	b.n	800ef3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ef36:	bf00      	nop
 800ef38:	e000      	b.n	800ef3c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ef3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d10b      	bne.n	800ef5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ef44:	4b8e      	ldr	r3, [pc, #568]	; (800f180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef48:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ef4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ef54:	4a8a      	ldr	r2, [pc, #552]	; (800f180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ef56:	430b      	orrs	r3, r1
 800ef58:	6593      	str	r3, [r2, #88]	; 0x58
 800ef5a:	e003      	b.n	800ef64 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ef64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ef70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ef74:	2300      	movs	r3, #0
 800ef76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ef7a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ef7e:	460b      	mov	r3, r1
 800ef80:	4313      	orrs	r3, r2
 800ef82:	d03a      	beq.n	800effa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ef84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ef8a:	2b30      	cmp	r3, #48	; 0x30
 800ef8c:	d01f      	beq.n	800efce <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ef8e:	2b30      	cmp	r3, #48	; 0x30
 800ef90:	d819      	bhi.n	800efc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ef92:	2b20      	cmp	r3, #32
 800ef94:	d00c      	beq.n	800efb0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ef96:	2b20      	cmp	r3, #32
 800ef98:	d815      	bhi.n	800efc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d019      	beq.n	800efd2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ef9e:	2b10      	cmp	r3, #16
 800efa0:	d111      	bne.n	800efc6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800efa2:	4b77      	ldr	r3, [pc, #476]	; (800f180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800efa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efa6:	4a76      	ldr	r2, [pc, #472]	; (800f180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800efa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800efac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800efae:	e011      	b.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800efb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efb4:	3308      	adds	r3, #8
 800efb6:	2102      	movs	r1, #2
 800efb8:	4618      	mov	r0, r3
 800efba:	f002 f997 	bl	80112ec <RCCEx_PLL2_Config>
 800efbe:	4603      	mov	r3, r0
 800efc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800efc4:	e006      	b.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800efc6:	2301      	movs	r3, #1
 800efc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800efcc:	e002      	b.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800efce:	bf00      	nop
 800efd0:	e000      	b.n	800efd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800efd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800efd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d10a      	bne.n	800eff2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800efdc:	4b68      	ldr	r3, [pc, #416]	; (800f180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800efde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efe0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800efe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800efe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efea:	4a65      	ldr	r2, [pc, #404]	; (800f180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800efec:	430b      	orrs	r3, r1
 800efee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800eff0:	e003      	b.n	800effa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eff2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eff6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800effa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800effe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f002:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800f006:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800f00a:	2300      	movs	r3, #0
 800f00c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f010:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800f014:	460b      	mov	r3, r1
 800f016:	4313      	orrs	r3, r2
 800f018:	d051      	beq.n	800f0be <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800f01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f01e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f024:	d035      	beq.n	800f092 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800f026:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f02a:	d82e      	bhi.n	800f08a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f02c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f030:	d031      	beq.n	800f096 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800f032:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f036:	d828      	bhi.n	800f08a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f03c:	d01a      	beq.n	800f074 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800f03e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f042:	d822      	bhi.n	800f08a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800f044:	2b00      	cmp	r3, #0
 800f046:	d003      	beq.n	800f050 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800f048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f04c:	d007      	beq.n	800f05e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800f04e:	e01c      	b.n	800f08a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f050:	4b4b      	ldr	r3, [pc, #300]	; (800f180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f054:	4a4a      	ldr	r2, [pc, #296]	; (800f180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f056:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f05a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f05c:	e01c      	b.n	800f098 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f062:	3308      	adds	r3, #8
 800f064:	2100      	movs	r1, #0
 800f066:	4618      	mov	r0, r3
 800f068:	f002 f940 	bl	80112ec <RCCEx_PLL2_Config>
 800f06c:	4603      	mov	r3, r0
 800f06e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f072:	e011      	b.n	800f098 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f078:	3328      	adds	r3, #40	; 0x28
 800f07a:	2100      	movs	r1, #0
 800f07c:	4618      	mov	r0, r3
 800f07e:	f002 f9e7 	bl	8011450 <RCCEx_PLL3_Config>
 800f082:	4603      	mov	r3, r0
 800f084:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800f088:	e006      	b.n	800f098 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f08a:	2301      	movs	r3, #1
 800f08c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f090:	e002      	b.n	800f098 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f092:	bf00      	nop
 800f094:	e000      	b.n	800f098 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800f096:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f098:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d10a      	bne.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f0a0:	4b37      	ldr	r3, [pc, #220]	; (800f180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f0a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0a4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800f0a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f0ae:	4a34      	ldr	r2, [pc, #208]	; (800f180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f0b0:	430b      	orrs	r3, r1
 800f0b2:	6513      	str	r3, [r2, #80]	; 0x50
 800f0b4:	e003      	b.n	800f0be <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f0ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800f0ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800f0d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800f0d8:	460b      	mov	r3, r1
 800f0da:	4313      	orrs	r3, r2
 800f0dc:	d056      	beq.n	800f18c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800f0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f0e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f0e8:	d033      	beq.n	800f152 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800f0ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f0ee:	d82c      	bhi.n	800f14a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f0f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f0f4:	d02f      	beq.n	800f156 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800f0f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f0fa:	d826      	bhi.n	800f14a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f0fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f100:	d02b      	beq.n	800f15a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800f102:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f106:	d820      	bhi.n	800f14a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f10c:	d012      	beq.n	800f134 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800f10e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f112:	d81a      	bhi.n	800f14a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800f114:	2b00      	cmp	r3, #0
 800f116:	d022      	beq.n	800f15e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800f118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f11c:	d115      	bne.n	800f14a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f122:	3308      	adds	r3, #8
 800f124:	2101      	movs	r1, #1
 800f126:	4618      	mov	r0, r3
 800f128:	f002 f8e0 	bl	80112ec <RCCEx_PLL2_Config>
 800f12c:	4603      	mov	r3, r0
 800f12e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f132:	e015      	b.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f138:	3328      	adds	r3, #40	; 0x28
 800f13a:	2101      	movs	r1, #1
 800f13c:	4618      	mov	r0, r3
 800f13e:	f002 f987 	bl	8011450 <RCCEx_PLL3_Config>
 800f142:	4603      	mov	r3, r0
 800f144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800f148:	e00a      	b.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f14a:	2301      	movs	r3, #1
 800f14c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f150:	e006      	b.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f152:	bf00      	nop
 800f154:	e004      	b.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f156:	bf00      	nop
 800f158:	e002      	b.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f15a:	bf00      	nop
 800f15c:	e000      	b.n	800f160 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800f15e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f160:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f164:	2b00      	cmp	r3, #0
 800f166:	d10d      	bne.n	800f184 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f168:	4b05      	ldr	r3, [pc, #20]	; (800f180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f16a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f16c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800f170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f176:	4a02      	ldr	r2, [pc, #8]	; (800f180 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800f178:	430b      	orrs	r3, r1
 800f17a:	6513      	str	r3, [r2, #80]	; 0x50
 800f17c:	e006      	b.n	800f18c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800f17e:	bf00      	nop
 800f180:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f188:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f18c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f194:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800f198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800f19c:	2300      	movs	r3, #0
 800f19e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f1a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800f1a6:	460b      	mov	r3, r1
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	d055      	beq.n	800f258 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800f1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f1b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f1b8:	d033      	beq.n	800f222 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800f1ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f1be:	d82c      	bhi.n	800f21a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f1c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1c4:	d02f      	beq.n	800f226 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800f1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1ca:	d826      	bhi.n	800f21a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f1cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f1d0:	d02b      	beq.n	800f22a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800f1d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f1d6:	d820      	bhi.n	800f21a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f1d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1dc:	d012      	beq.n	800f204 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800f1de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1e2:	d81a      	bhi.n	800f21a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d022      	beq.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800f1e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f1ec:	d115      	bne.n	800f21a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f1ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f1f2:	3308      	adds	r3, #8
 800f1f4:	2101      	movs	r1, #1
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f002 f878 	bl	80112ec <RCCEx_PLL2_Config>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f202:	e015      	b.n	800f230 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f208:	3328      	adds	r3, #40	; 0x28
 800f20a:	2101      	movs	r1, #1
 800f20c:	4618      	mov	r0, r3
 800f20e:	f002 f91f 	bl	8011450 <RCCEx_PLL3_Config>
 800f212:	4603      	mov	r3, r0
 800f214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800f218:	e00a      	b.n	800f230 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800f21a:	2301      	movs	r3, #1
 800f21c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f220:	e006      	b.n	800f230 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f222:	bf00      	nop
 800f224:	e004      	b.n	800f230 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f226:	bf00      	nop
 800f228:	e002      	b.n	800f230 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f22a:	bf00      	nop
 800f22c:	e000      	b.n	800f230 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800f22e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f230:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f234:	2b00      	cmp	r3, #0
 800f236:	d10b      	bne.n	800f250 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f238:	4ba3      	ldr	r3, [pc, #652]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f23a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f23c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f244:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f248:	4a9f      	ldr	r2, [pc, #636]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f24a:	430b      	orrs	r3, r1
 800f24c:	6593      	str	r3, [r2, #88]	; 0x58
 800f24e:	e003      	b.n	800f258 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f250:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f254:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f260:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800f264:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f268:	2300      	movs	r3, #0
 800f26a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f26e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800f272:	460b      	mov	r3, r1
 800f274:	4313      	orrs	r3, r2
 800f276:	d037      	beq.n	800f2e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800f278:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f27c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f27e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f282:	d00e      	beq.n	800f2a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800f284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f288:	d816      	bhi.n	800f2b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d018      	beq.n	800f2c0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800f28e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f292:	d111      	bne.n	800f2b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f294:	4b8c      	ldr	r3, [pc, #560]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f298:	4a8b      	ldr	r2, [pc, #556]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f29a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f29e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f2a0:	e00f      	b.n	800f2c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2a6:	3308      	adds	r3, #8
 800f2a8:	2101      	movs	r1, #1
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f002 f81e 	bl	80112ec <RCCEx_PLL2_Config>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f2b6:	e004      	b.n	800f2c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f2be:	e000      	b.n	800f2c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f2c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f2c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d10a      	bne.n	800f2e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f2ca:	4b7f      	ldr	r3, [pc, #508]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f2cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2ce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800f2d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2d8:	4a7b      	ldr	r2, [pc, #492]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f2da:	430b      	orrs	r3, r1
 800f2dc:	6513      	str	r3, [r2, #80]	; 0x50
 800f2de:	e003      	b.n	800f2e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f2e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f2e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800f2f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f2fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800f302:	460b      	mov	r3, r1
 800f304:	4313      	orrs	r3, r2
 800f306:	d039      	beq.n	800f37c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f30c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f30e:	2b03      	cmp	r3, #3
 800f310:	d81c      	bhi.n	800f34c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f312:	a201      	add	r2, pc, #4	; (adr r2, 800f318 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f318:	0800f355 	.word	0x0800f355
 800f31c:	0800f329 	.word	0x0800f329
 800f320:	0800f337 	.word	0x0800f337
 800f324:	0800f355 	.word	0x0800f355
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f328:	4b67      	ldr	r3, [pc, #412]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f32c:	4a66      	ldr	r2, [pc, #408]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f32e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f332:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f334:	e00f      	b.n	800f356 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f33a:	3308      	adds	r3, #8
 800f33c:	2102      	movs	r1, #2
 800f33e:	4618      	mov	r0, r3
 800f340:	f001 ffd4 	bl	80112ec <RCCEx_PLL2_Config>
 800f344:	4603      	mov	r3, r0
 800f346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f34a:	e004      	b.n	800f356 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f34c:	2301      	movs	r3, #1
 800f34e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f352:	e000      	b.n	800f356 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f354:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d10a      	bne.n	800f374 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f35e:	4b5a      	ldr	r3, [pc, #360]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f362:	f023 0103 	bic.w	r1, r3, #3
 800f366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f36a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f36c:	4a56      	ldr	r2, [pc, #344]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f36e:	430b      	orrs	r3, r1
 800f370:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f372:	e003      	b.n	800f37c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f374:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f378:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f37c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f384:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800f388:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f38c:	2300      	movs	r3, #0
 800f38e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f392:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800f396:	460b      	mov	r3, r1
 800f398:	4313      	orrs	r3, r2
 800f39a:	f000 809f 	beq.w	800f4dc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f39e:	4b4b      	ldr	r3, [pc, #300]	; (800f4cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	4a4a      	ldr	r2, [pc, #296]	; (800f4cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f3a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f3a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f3aa:	f7f6 fbb9 	bl	8005b20 <HAL_GetTick>
 800f3ae:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f3b2:	e00b      	b.n	800f3cc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f3b4:	f7f6 fbb4 	bl	8005b20 <HAL_GetTick>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f3be:	1ad3      	subs	r3, r2, r3
 800f3c0:	2b64      	cmp	r3, #100	; 0x64
 800f3c2:	d903      	bls.n	800f3cc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f3c4:	2303      	movs	r3, #3
 800f3c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f3ca:	e005      	b.n	800f3d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f3cc:	4b3f      	ldr	r3, [pc, #252]	; (800f4cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d0ed      	beq.n	800f3b4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f3d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d179      	bne.n	800f4d4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f3e0:	4b39      	ldr	r3, [pc, #228]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f3e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f3ec:	4053      	eors	r3, r2
 800f3ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d015      	beq.n	800f422 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f3f6:	4b34      	ldr	r3, [pc, #208]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f402:	4b31      	ldr	r3, [pc, #196]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f406:	4a30      	ldr	r2, [pc, #192]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f40c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f40e:	4b2e      	ldr	r3, [pc, #184]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f412:	4a2d      	ldr	r2, [pc, #180]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f418:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f41a:	4a2b      	ldr	r2, [pc, #172]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f41c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f420:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f426:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f42a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f42e:	d118      	bne.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f430:	f7f6 fb76 	bl	8005b20 <HAL_GetTick>
 800f434:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f438:	e00d      	b.n	800f456 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f43a:	f7f6 fb71 	bl	8005b20 <HAL_GetTick>
 800f43e:	4602      	mov	r2, r0
 800f440:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f444:	1ad2      	subs	r2, r2, r3
 800f446:	f241 3388 	movw	r3, #5000	; 0x1388
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d903      	bls.n	800f456 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f44e:	2303      	movs	r3, #3
 800f450:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800f454:	e005      	b.n	800f462 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f456:	4b1c      	ldr	r3, [pc, #112]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f45a:	f003 0302 	and.w	r3, r3, #2
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d0eb      	beq.n	800f43a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f466:	2b00      	cmp	r3, #0
 800f468:	d129      	bne.n	800f4be <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f46e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f47a:	d10e      	bne.n	800f49a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f47c:	4b12      	ldr	r3, [pc, #72]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f47e:	691b      	ldr	r3, [r3, #16]
 800f480:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800f484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f488:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f48c:	091a      	lsrs	r2, r3, #4
 800f48e:	4b10      	ldr	r3, [pc, #64]	; (800f4d0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f490:	4013      	ands	r3, r2
 800f492:	4a0d      	ldr	r2, [pc, #52]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f494:	430b      	orrs	r3, r1
 800f496:	6113      	str	r3, [r2, #16]
 800f498:	e005      	b.n	800f4a6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f49a:	4b0b      	ldr	r3, [pc, #44]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f49c:	691b      	ldr	r3, [r3, #16]
 800f49e:	4a0a      	ldr	r2, [pc, #40]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f4a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f4a4:	6113      	str	r3, [r2, #16]
 800f4a6:	4b08      	ldr	r3, [pc, #32]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f4a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800f4b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f4b6:	4a04      	ldr	r2, [pc, #16]	; (800f4c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f4b8:	430b      	orrs	r3, r1
 800f4ba:	6713      	str	r3, [r2, #112]	; 0x70
 800f4bc:	e00e      	b.n	800f4dc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f4be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f4c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800f4c6:	e009      	b.n	800f4dc <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f4c8:	58024400 	.word	0x58024400
 800f4cc:	58024800 	.word	0x58024800
 800f4d0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f4d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e4:	f002 0301 	and.w	r3, r2, #1
 800f4e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f4f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800f4f6:	460b      	mov	r3, r1
 800f4f8:	4313      	orrs	r3, r2
 800f4fa:	f000 8089 	beq.w	800f610 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f502:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f504:	2b28      	cmp	r3, #40	; 0x28
 800f506:	d86b      	bhi.n	800f5e0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f508:	a201      	add	r2, pc, #4	; (adr r2, 800f510 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f50e:	bf00      	nop
 800f510:	0800f5e9 	.word	0x0800f5e9
 800f514:	0800f5e1 	.word	0x0800f5e1
 800f518:	0800f5e1 	.word	0x0800f5e1
 800f51c:	0800f5e1 	.word	0x0800f5e1
 800f520:	0800f5e1 	.word	0x0800f5e1
 800f524:	0800f5e1 	.word	0x0800f5e1
 800f528:	0800f5e1 	.word	0x0800f5e1
 800f52c:	0800f5e1 	.word	0x0800f5e1
 800f530:	0800f5b5 	.word	0x0800f5b5
 800f534:	0800f5e1 	.word	0x0800f5e1
 800f538:	0800f5e1 	.word	0x0800f5e1
 800f53c:	0800f5e1 	.word	0x0800f5e1
 800f540:	0800f5e1 	.word	0x0800f5e1
 800f544:	0800f5e1 	.word	0x0800f5e1
 800f548:	0800f5e1 	.word	0x0800f5e1
 800f54c:	0800f5e1 	.word	0x0800f5e1
 800f550:	0800f5cb 	.word	0x0800f5cb
 800f554:	0800f5e1 	.word	0x0800f5e1
 800f558:	0800f5e1 	.word	0x0800f5e1
 800f55c:	0800f5e1 	.word	0x0800f5e1
 800f560:	0800f5e1 	.word	0x0800f5e1
 800f564:	0800f5e1 	.word	0x0800f5e1
 800f568:	0800f5e1 	.word	0x0800f5e1
 800f56c:	0800f5e1 	.word	0x0800f5e1
 800f570:	0800f5e9 	.word	0x0800f5e9
 800f574:	0800f5e1 	.word	0x0800f5e1
 800f578:	0800f5e1 	.word	0x0800f5e1
 800f57c:	0800f5e1 	.word	0x0800f5e1
 800f580:	0800f5e1 	.word	0x0800f5e1
 800f584:	0800f5e1 	.word	0x0800f5e1
 800f588:	0800f5e1 	.word	0x0800f5e1
 800f58c:	0800f5e1 	.word	0x0800f5e1
 800f590:	0800f5e9 	.word	0x0800f5e9
 800f594:	0800f5e1 	.word	0x0800f5e1
 800f598:	0800f5e1 	.word	0x0800f5e1
 800f59c:	0800f5e1 	.word	0x0800f5e1
 800f5a0:	0800f5e1 	.word	0x0800f5e1
 800f5a4:	0800f5e1 	.word	0x0800f5e1
 800f5a8:	0800f5e1 	.word	0x0800f5e1
 800f5ac:	0800f5e1 	.word	0x0800f5e1
 800f5b0:	0800f5e9 	.word	0x0800f5e9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5b8:	3308      	adds	r3, #8
 800f5ba:	2101      	movs	r1, #1
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f001 fe95 	bl	80112ec <RCCEx_PLL2_Config>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f5c8:	e00f      	b.n	800f5ea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5ce:	3328      	adds	r3, #40	; 0x28
 800f5d0:	2101      	movs	r1, #1
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f001 ff3c 	bl	8011450 <RCCEx_PLL3_Config>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f5de:	e004      	b.n	800f5ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f5e6:	e000      	b.n	800f5ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f5e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f5ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d10a      	bne.n	800f608 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f5f2:	4bbf      	ldr	r3, [pc, #764]	; (800f8f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f5f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5f6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800f5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f600:	4abb      	ldr	r2, [pc, #748]	; (800f8f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f602:	430b      	orrs	r3, r1
 800f604:	6553      	str	r3, [r2, #84]	; 0x54
 800f606:	e003      	b.n	800f610 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f608:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f60c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f618:	f002 0302 	and.w	r3, r2, #2
 800f61c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f620:	2300      	movs	r3, #0
 800f622:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800f626:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800f62a:	460b      	mov	r3, r1
 800f62c:	4313      	orrs	r3, r2
 800f62e:	d041      	beq.n	800f6b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f636:	2b05      	cmp	r3, #5
 800f638:	d824      	bhi.n	800f684 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f63a:	a201      	add	r2, pc, #4	; (adr r2, 800f640 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f640:	0800f68d 	.word	0x0800f68d
 800f644:	0800f659 	.word	0x0800f659
 800f648:	0800f66f 	.word	0x0800f66f
 800f64c:	0800f68d 	.word	0x0800f68d
 800f650:	0800f68d 	.word	0x0800f68d
 800f654:	0800f68d 	.word	0x0800f68d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f65c:	3308      	adds	r3, #8
 800f65e:	2101      	movs	r1, #1
 800f660:	4618      	mov	r0, r3
 800f662:	f001 fe43 	bl	80112ec <RCCEx_PLL2_Config>
 800f666:	4603      	mov	r3, r0
 800f668:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f66c:	e00f      	b.n	800f68e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f66e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f672:	3328      	adds	r3, #40	; 0x28
 800f674:	2101      	movs	r1, #1
 800f676:	4618      	mov	r0, r3
 800f678:	f001 feea 	bl	8011450 <RCCEx_PLL3_Config>
 800f67c:	4603      	mov	r3, r0
 800f67e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f682:	e004      	b.n	800f68e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f684:	2301      	movs	r3, #1
 800f686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f68a:	e000      	b.n	800f68e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f68c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f68e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f692:	2b00      	cmp	r3, #0
 800f694:	d10a      	bne.n	800f6ac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f696:	4b96      	ldr	r3, [pc, #600]	; (800f8f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f69a:	f023 0107 	bic.w	r1, r3, #7
 800f69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f6a4:	4a92      	ldr	r2, [pc, #584]	; (800f8f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f6a6:	430b      	orrs	r3, r1
 800f6a8:	6553      	str	r3, [r2, #84]	; 0x54
 800f6aa:	e003      	b.n	800f6b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f6b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f6b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6bc:	f002 0304 	and.w	r3, r2, #4
 800f6c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f6ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800f6ce:	460b      	mov	r3, r1
 800f6d0:	4313      	orrs	r3, r2
 800f6d2:	d044      	beq.n	800f75e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f6d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f6d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f6dc:	2b05      	cmp	r3, #5
 800f6de:	d825      	bhi.n	800f72c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800f6e0:	a201      	add	r2, pc, #4	; (adr r2, 800f6e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800f6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e6:	bf00      	nop
 800f6e8:	0800f735 	.word	0x0800f735
 800f6ec:	0800f701 	.word	0x0800f701
 800f6f0:	0800f717 	.word	0x0800f717
 800f6f4:	0800f735 	.word	0x0800f735
 800f6f8:	0800f735 	.word	0x0800f735
 800f6fc:	0800f735 	.word	0x0800f735
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f704:	3308      	adds	r3, #8
 800f706:	2101      	movs	r1, #1
 800f708:	4618      	mov	r0, r3
 800f70a:	f001 fdef 	bl	80112ec <RCCEx_PLL2_Config>
 800f70e:	4603      	mov	r3, r0
 800f710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f714:	e00f      	b.n	800f736 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f71a:	3328      	adds	r3, #40	; 0x28
 800f71c:	2101      	movs	r1, #1
 800f71e:	4618      	mov	r0, r3
 800f720:	f001 fe96 	bl	8011450 <RCCEx_PLL3_Config>
 800f724:	4603      	mov	r3, r0
 800f726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f72a:	e004      	b.n	800f736 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f72c:	2301      	movs	r3, #1
 800f72e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f732:	e000      	b.n	800f736 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800f734:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f736:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d10b      	bne.n	800f756 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f73e:	4b6c      	ldr	r3, [pc, #432]	; (800f8f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f742:	f023 0107 	bic.w	r1, r3, #7
 800f746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f74a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f74e:	4a68      	ldr	r2, [pc, #416]	; (800f8f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f750:	430b      	orrs	r3, r1
 800f752:	6593      	str	r3, [r2, #88]	; 0x58
 800f754:	e003      	b.n	800f75e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f756:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f75a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f75e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f766:	f002 0320 	and.w	r3, r2, #32
 800f76a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800f76e:	2300      	movs	r3, #0
 800f770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f774:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800f778:	460b      	mov	r3, r1
 800f77a:	4313      	orrs	r3, r2
 800f77c:	d055      	beq.n	800f82a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f78a:	d033      	beq.n	800f7f4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800f78c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f790:	d82c      	bhi.n	800f7ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f796:	d02f      	beq.n	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800f798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f79c:	d826      	bhi.n	800f7ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f79e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f7a2:	d02b      	beq.n	800f7fc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800f7a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f7a8:	d820      	bhi.n	800f7ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f7aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f7ae:	d012      	beq.n	800f7d6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f7b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f7b4:	d81a      	bhi.n	800f7ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d022      	beq.n	800f800 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800f7ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f7be:	d115      	bne.n	800f7ec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7c4:	3308      	adds	r3, #8
 800f7c6:	2100      	movs	r1, #0
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f001 fd8f 	bl	80112ec <RCCEx_PLL2_Config>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f7d4:	e015      	b.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f7da:	3328      	adds	r3, #40	; 0x28
 800f7dc:	2102      	movs	r1, #2
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f001 fe36 	bl	8011450 <RCCEx_PLL3_Config>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f7ea:	e00a      	b.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f7f2:	e006      	b.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f7f4:	bf00      	nop
 800f7f6:	e004      	b.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f7f8:	bf00      	nop
 800f7fa:	e002      	b.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f7fc:	bf00      	nop
 800f7fe:	e000      	b.n	800f802 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f800:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f806:	2b00      	cmp	r3, #0
 800f808:	d10b      	bne.n	800f822 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f80a:	4b39      	ldr	r3, [pc, #228]	; (800f8f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f80e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800f812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f81a:	4a35      	ldr	r2, [pc, #212]	; (800f8f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f81c:	430b      	orrs	r3, r1
 800f81e:	6553      	str	r3, [r2, #84]	; 0x54
 800f820:	e003      	b.n	800f82a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f822:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f826:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f832:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800f836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800f83a:	2300      	movs	r3, #0
 800f83c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800f840:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800f844:	460b      	mov	r3, r1
 800f846:	4313      	orrs	r3, r2
 800f848:	d058      	beq.n	800f8fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f84a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f84e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f852:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f856:	d033      	beq.n	800f8c0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f858:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f85c:	d82c      	bhi.n	800f8b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f85e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f862:	d02f      	beq.n	800f8c4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f868:	d826      	bhi.n	800f8b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f86a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f86e:	d02b      	beq.n	800f8c8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f870:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f874:	d820      	bhi.n	800f8b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f876:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f87a:	d012      	beq.n	800f8a2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f87c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f880:	d81a      	bhi.n	800f8b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f882:	2b00      	cmp	r3, #0
 800f884:	d022      	beq.n	800f8cc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f88a:	d115      	bne.n	800f8b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f88c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f890:	3308      	adds	r3, #8
 800f892:	2100      	movs	r1, #0
 800f894:	4618      	mov	r0, r3
 800f896:	f001 fd29 	bl	80112ec <RCCEx_PLL2_Config>
 800f89a:	4603      	mov	r3, r0
 800f89c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f8a0:	e015      	b.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8a6:	3328      	adds	r3, #40	; 0x28
 800f8a8:	2102      	movs	r1, #2
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f001 fdd0 	bl	8011450 <RCCEx_PLL3_Config>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f8b6:	e00a      	b.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f8be:	e006      	b.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f8c0:	bf00      	nop
 800f8c2:	e004      	b.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f8c4:	bf00      	nop
 800f8c6:	e002      	b.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f8c8:	bf00      	nop
 800f8ca:	e000      	b.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f8cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d10e      	bne.n	800f8f4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f8d6:	4b06      	ldr	r3, [pc, #24]	; (800f8f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f8d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8da:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800f8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f8e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f8e6:	4a02      	ldr	r2, [pc, #8]	; (800f8f0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f8e8:	430b      	orrs	r3, r1
 800f8ea:	6593      	str	r3, [r2, #88]	; 0x58
 800f8ec:	e006      	b.n	800f8fc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f8ee:	bf00      	nop
 800f8f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f8f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f8fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f904:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800f908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f90c:	2300      	movs	r3, #0
 800f90e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f912:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800f916:	460b      	mov	r3, r1
 800f918:	4313      	orrs	r3, r2
 800f91a:	d055      	beq.n	800f9c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f920:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f924:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f928:	d033      	beq.n	800f992 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f92a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800f92e:	d82c      	bhi.n	800f98a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f934:	d02f      	beq.n	800f996 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f93a:	d826      	bhi.n	800f98a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f93c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f940:	d02b      	beq.n	800f99a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f942:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800f946:	d820      	bhi.n	800f98a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f948:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f94c:	d012      	beq.n	800f974 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f94e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f952:	d81a      	bhi.n	800f98a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f954:	2b00      	cmp	r3, #0
 800f956:	d022      	beq.n	800f99e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f95c:	d115      	bne.n	800f98a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f962:	3308      	adds	r3, #8
 800f964:	2100      	movs	r1, #0
 800f966:	4618      	mov	r0, r3
 800f968:	f001 fcc0 	bl	80112ec <RCCEx_PLL2_Config>
 800f96c:	4603      	mov	r3, r0
 800f96e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f972:	e015      	b.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f978:	3328      	adds	r3, #40	; 0x28
 800f97a:	2102      	movs	r1, #2
 800f97c:	4618      	mov	r0, r3
 800f97e:	f001 fd67 	bl	8011450 <RCCEx_PLL3_Config>
 800f982:	4603      	mov	r3, r0
 800f984:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f988:	e00a      	b.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f98a:	2301      	movs	r3, #1
 800f98c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800f990:	e006      	b.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f992:	bf00      	nop
 800f994:	e004      	b.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f996:	bf00      	nop
 800f998:	e002      	b.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f99a:	bf00      	nop
 800f99c:	e000      	b.n	800f9a0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f99e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f9a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d10b      	bne.n	800f9c0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f9a8:	4ba1      	ldr	r3, [pc, #644]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f9aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9ac:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800f9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f9b8:	4a9d      	ldr	r2, [pc, #628]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f9ba:	430b      	orrs	r3, r1
 800f9bc:	6593      	str	r3, [r2, #88]	; 0x58
 800f9be:	e003      	b.n	800f9c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800f9c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d0:	f002 0308 	and.w	r3, r2, #8
 800f9d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f9d8:	2300      	movs	r3, #0
 800f9da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f9de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800f9e2:	460b      	mov	r3, r1
 800f9e4:	4313      	orrs	r3, r2
 800f9e6:	d01e      	beq.n	800fa26 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f9e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f9f4:	d10c      	bne.n	800fa10 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f9fa:	3328      	adds	r3, #40	; 0x28
 800f9fc:	2102      	movs	r1, #2
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f001 fd26 	bl	8011450 <RCCEx_PLL3_Config>
 800fa04:	4603      	mov	r3, r0
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d002      	beq.n	800fa10 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800fa10:	4b87      	ldr	r3, [pc, #540]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fa18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa20:	4a83      	ldr	r2, [pc, #524]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa22:	430b      	orrs	r3, r1
 800fa24:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800fa26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2e:	f002 0310 	and.w	r3, r2, #16
 800fa32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fa36:	2300      	movs	r3, #0
 800fa38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fa3c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800fa40:	460b      	mov	r3, r1
 800fa42:	4313      	orrs	r3, r2
 800fa44:	d01e      	beq.n	800fa84 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800fa46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fa4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa52:	d10c      	bne.n	800fa6e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fa54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa58:	3328      	adds	r3, #40	; 0x28
 800fa5a:	2102      	movs	r1, #2
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f001 fcf7 	bl	8011450 <RCCEx_PLL3_Config>
 800fa62:	4603      	mov	r3, r0
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d002      	beq.n	800fa6e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800fa6e:	4b70      	ldr	r3, [pc, #448]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fa76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fa7e:	4a6c      	ldr	r2, [pc, #432]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fa80:	430b      	orrs	r3, r1
 800fa82:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fa84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fa88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa8c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800fa90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fa94:	2300      	movs	r3, #0
 800fa96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fa9a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800fa9e:	460b      	mov	r3, r1
 800faa0:	4313      	orrs	r3, r2
 800faa2:	d03e      	beq.n	800fb22 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800faa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800faa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800faac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fab0:	d022      	beq.n	800faf8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800fab2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fab6:	d81b      	bhi.n	800faf0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d003      	beq.n	800fac4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800fabc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fac0:	d00b      	beq.n	800fada <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800fac2:	e015      	b.n	800faf0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fac8:	3308      	adds	r3, #8
 800faca:	2100      	movs	r1, #0
 800facc:	4618      	mov	r0, r3
 800face:	f001 fc0d 	bl	80112ec <RCCEx_PLL2_Config>
 800fad2:	4603      	mov	r3, r0
 800fad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800fad8:	e00f      	b.n	800fafa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fade:	3328      	adds	r3, #40	; 0x28
 800fae0:	2102      	movs	r1, #2
 800fae2:	4618      	mov	r0, r3
 800fae4:	f001 fcb4 	bl	8011450 <RCCEx_PLL3_Config>
 800fae8:	4603      	mov	r3, r0
 800faea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800faee:	e004      	b.n	800fafa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800faf0:	2301      	movs	r3, #1
 800faf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800faf6:	e000      	b.n	800fafa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800faf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fafa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d10b      	bne.n	800fb1a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fb02:	4b4b      	ldr	r3, [pc, #300]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb06:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800fb0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fb12:	4a47      	ldr	r2, [pc, #284]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb14:	430b      	orrs	r3, r1
 800fb16:	6593      	str	r3, [r2, #88]	; 0x58
 800fb18:	e003      	b.n	800fb22 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800fb22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800fb2e:	67bb      	str	r3, [r7, #120]	; 0x78
 800fb30:	2300      	movs	r3, #0
 800fb32:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fb34:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800fb38:	460b      	mov	r3, r1
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	d03b      	beq.n	800fbb6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800fb3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fb4a:	d01f      	beq.n	800fb8c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800fb4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800fb50:	d818      	bhi.n	800fb84 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800fb52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb56:	d003      	beq.n	800fb60 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800fb58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fb5c:	d007      	beq.n	800fb6e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800fb5e:	e011      	b.n	800fb84 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fb60:	4b33      	ldr	r3, [pc, #204]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb64:	4a32      	ldr	r2, [pc, #200]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fb6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800fb6c:	e00f      	b.n	800fb8e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb72:	3328      	adds	r3, #40	; 0x28
 800fb74:	2101      	movs	r1, #1
 800fb76:	4618      	mov	r0, r3
 800fb78:	f001 fc6a 	bl	8011450 <RCCEx_PLL3_Config>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800fb82:	e004      	b.n	800fb8e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fb84:	2301      	movs	r3, #1
 800fb86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fb8a:	e000      	b.n	800fb8e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800fb8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d10b      	bne.n	800fbae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fb96:	4b26      	ldr	r3, [pc, #152]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fb9a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800fb9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fba6:	4a22      	ldr	r2, [pc, #136]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fba8:	430b      	orrs	r3, r1
 800fbaa:	6553      	str	r3, [r2, #84]	; 0x54
 800fbac:	e003      	b.n	800fbb6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fbb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800fbb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbbe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800fbc2:	673b      	str	r3, [r7, #112]	; 0x70
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	677b      	str	r3, [r7, #116]	; 0x74
 800fbc8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800fbcc:	460b      	mov	r3, r1
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	d034      	beq.n	800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800fbd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d003      	beq.n	800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800fbdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbe0:	d007      	beq.n	800fbf2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800fbe2:	e011      	b.n	800fc08 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fbe4:	4b12      	ldr	r3, [pc, #72]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbe8:	4a11      	ldr	r2, [pc, #68]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fbea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fbee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fbf0:	e00e      	b.n	800fc10 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fbf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fbf6:	3308      	adds	r3, #8
 800fbf8:	2102      	movs	r1, #2
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f001 fb76 	bl	80112ec <RCCEx_PLL2_Config>
 800fc00:	4603      	mov	r3, r0
 800fc02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800fc06:	e003      	b.n	800fc10 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800fc08:	2301      	movs	r3, #1
 800fc0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fc0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fc10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d10d      	bne.n	800fc34 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800fc18:	4b05      	ldr	r3, [pc, #20]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fc1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fc20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc26:	4a02      	ldr	r2, [pc, #8]	; (800fc30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800fc28:	430b      	orrs	r3, r1
 800fc2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800fc2c:	e006      	b.n	800fc3c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800fc2e:	bf00      	nop
 800fc30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fc38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800fc3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc44:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800fc48:	66bb      	str	r3, [r7, #104]	; 0x68
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fc4e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800fc52:	460b      	mov	r3, r1
 800fc54:	4313      	orrs	r3, r2
 800fc56:	d00c      	beq.n	800fc72 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800fc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc5c:	3328      	adds	r3, #40	; 0x28
 800fc5e:	2102      	movs	r1, #2
 800fc60:	4618      	mov	r0, r3
 800fc62:	f001 fbf5 	bl	8011450 <RCCEx_PLL3_Config>
 800fc66:	4603      	mov	r3, r0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d002      	beq.n	800fc72 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800fc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800fc7e:	663b      	str	r3, [r7, #96]	; 0x60
 800fc80:	2300      	movs	r3, #0
 800fc82:	667b      	str	r3, [r7, #100]	; 0x64
 800fc84:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800fc88:	460b      	mov	r3, r1
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	d038      	beq.n	800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800fc8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fc92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fc96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fc9a:	d018      	beq.n	800fcce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800fc9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fca0:	d811      	bhi.n	800fcc6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fca2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fca6:	d014      	beq.n	800fcd2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800fca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcac:	d80b      	bhi.n	800fcc6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d011      	beq.n	800fcd6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800fcb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fcb6:	d106      	bne.n	800fcc6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fcb8:	4bc3      	ldr	r3, [pc, #780]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcbc:	4ac2      	ldr	r2, [pc, #776]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fcc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800fcc4:	e008      	b.n	800fcd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800fccc:	e004      	b.n	800fcd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fcce:	bf00      	nop
 800fcd0:	e002      	b.n	800fcd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fcd2:	bf00      	nop
 800fcd4:	e000      	b.n	800fcd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fcd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fcd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d10b      	bne.n	800fcf8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fce0:	4bb9      	ldr	r3, [pc, #740]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fce4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fcec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fcf0:	4ab5      	ldr	r2, [pc, #724]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fcf2:	430b      	orrs	r3, r1
 800fcf4:	6553      	str	r3, [r2, #84]	; 0x54
 800fcf6:	e003      	b.n	800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fcfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd08:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800fd0c:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd0e:	2300      	movs	r3, #0
 800fd10:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd12:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800fd16:	460b      	mov	r3, r1
 800fd18:	4313      	orrs	r3, r2
 800fd1a:	d009      	beq.n	800fd30 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fd1c:	4baa      	ldr	r3, [pc, #680]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fd24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd2a:	4aa7      	ldr	r2, [pc, #668]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd2c:	430b      	orrs	r3, r1
 800fd2e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800fd30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd38:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800fd3c:	653b      	str	r3, [r7, #80]	; 0x50
 800fd3e:	2300      	movs	r3, #0
 800fd40:	657b      	str	r3, [r7, #84]	; 0x54
 800fd42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800fd46:	460b      	mov	r3, r1
 800fd48:	4313      	orrs	r3, r2
 800fd4a:	d00a      	beq.n	800fd62 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800fd4c:	4b9e      	ldr	r3, [pc, #632]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd4e:	691b      	ldr	r3, [r3, #16]
 800fd50:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800fd54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fd5c:	4a9a      	ldr	r2, [pc, #616]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd5e:	430b      	orrs	r3, r1
 800fd60:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fd62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd6a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800fd6e:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd70:	2300      	movs	r3, #0
 800fd72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd74:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800fd78:	460b      	mov	r3, r1
 800fd7a:	4313      	orrs	r3, r2
 800fd7c:	d009      	beq.n	800fd92 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fd7e:	4b92      	ldr	r3, [pc, #584]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd82:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800fd86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd8c:	4a8e      	ldr	r2, [pc, #568]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fd8e:	430b      	orrs	r3, r1
 800fd90:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800fd92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd9a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800fd9e:	643b      	str	r3, [r7, #64]	; 0x40
 800fda0:	2300      	movs	r3, #0
 800fda2:	647b      	str	r3, [r7, #68]	; 0x44
 800fda4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800fda8:	460b      	mov	r3, r1
 800fdaa:	4313      	orrs	r3, r2
 800fdac:	d00e      	beq.n	800fdcc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fdae:	4b86      	ldr	r3, [pc, #536]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fdb0:	691b      	ldr	r3, [r3, #16]
 800fdb2:	4a85      	ldr	r2, [pc, #532]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fdb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800fdb8:	6113      	str	r3, [r2, #16]
 800fdba:	4b83      	ldr	r3, [pc, #524]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fdbc:	6919      	ldr	r1, [r3, #16]
 800fdbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fdc6:	4a80      	ldr	r2, [pc, #512]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fdc8:	430b      	orrs	r3, r1
 800fdca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fdcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdd4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800fdd8:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdda:	2300      	movs	r3, #0
 800fddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fdde:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800fde2:	460b      	mov	r3, r1
 800fde4:	4313      	orrs	r3, r2
 800fde6:	d009      	beq.n	800fdfc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fde8:	4b77      	ldr	r3, [pc, #476]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fdea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdec:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800fdf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdf6:	4a74      	ldr	r2, [pc, #464]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fdf8:	430b      	orrs	r3, r1
 800fdfa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fdfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe04:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800fe08:	633b      	str	r3, [r7, #48]	; 0x30
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	637b      	str	r3, [r7, #52]	; 0x34
 800fe0e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800fe12:	460b      	mov	r3, r1
 800fe14:	4313      	orrs	r3, r2
 800fe16:	d00a      	beq.n	800fe2e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fe18:	4b6b      	ldr	r3, [pc, #428]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fe1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe1c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800fe20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe28:	4a67      	ldr	r2, [pc, #412]	; (800ffc8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fe2a:	430b      	orrs	r3, r1
 800fe2c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800fe2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe36:	2100      	movs	r1, #0
 800fe38:	62b9      	str	r1, [r7, #40]	; 0x28
 800fe3a:	f003 0301 	and.w	r3, r3, #1
 800fe3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe40:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800fe44:	460b      	mov	r3, r1
 800fe46:	4313      	orrs	r3, r2
 800fe48:	d011      	beq.n	800fe6e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fe4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe4e:	3308      	adds	r3, #8
 800fe50:	2100      	movs	r1, #0
 800fe52:	4618      	mov	r0, r3
 800fe54:	f001 fa4a 	bl	80112ec <RCCEx_PLL2_Config>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fe5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d003      	beq.n	800fe6e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fe6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fe6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe76:	2100      	movs	r1, #0
 800fe78:	6239      	str	r1, [r7, #32]
 800fe7a:	f003 0302 	and.w	r3, r3, #2
 800fe7e:	627b      	str	r3, [r7, #36]	; 0x24
 800fe80:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800fe84:	460b      	mov	r3, r1
 800fe86:	4313      	orrs	r3, r2
 800fe88:	d011      	beq.n	800feae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fe8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fe8e:	3308      	adds	r3, #8
 800fe90:	2101      	movs	r1, #1
 800fe92:	4618      	mov	r0, r3
 800fe94:	f001 fa2a 	bl	80112ec <RCCEx_PLL2_Config>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fe9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d003      	beq.n	800feae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800feaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800feae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800feb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb6:	2100      	movs	r1, #0
 800feb8:	61b9      	str	r1, [r7, #24]
 800feba:	f003 0304 	and.w	r3, r3, #4
 800febe:	61fb      	str	r3, [r7, #28]
 800fec0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fec4:	460b      	mov	r3, r1
 800fec6:	4313      	orrs	r3, r2
 800fec8:	d011      	beq.n	800feee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800feca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fece:	3308      	adds	r3, #8
 800fed0:	2102      	movs	r1, #2
 800fed2:	4618      	mov	r0, r3
 800fed4:	f001 fa0a 	bl	80112ec <RCCEx_PLL2_Config>
 800fed8:	4603      	mov	r3, r0
 800feda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800fede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d003      	beq.n	800feee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800feea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800feee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef6:	2100      	movs	r1, #0
 800fef8:	6139      	str	r1, [r7, #16]
 800fefa:	f003 0308 	and.w	r3, r3, #8
 800fefe:	617b      	str	r3, [r7, #20]
 800ff00:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ff04:	460b      	mov	r3, r1
 800ff06:	4313      	orrs	r3, r2
 800ff08:	d011      	beq.n	800ff2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ff0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff0e:	3328      	adds	r3, #40	; 0x28
 800ff10:	2100      	movs	r1, #0
 800ff12:	4618      	mov	r0, r3
 800ff14:	f001 fa9c 	bl	8011450 <RCCEx_PLL3_Config>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ff1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d003      	beq.n	800ff2e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ff2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff36:	2100      	movs	r1, #0
 800ff38:	60b9      	str	r1, [r7, #8]
 800ff3a:	f003 0310 	and.w	r3, r3, #16
 800ff3e:	60fb      	str	r3, [r7, #12]
 800ff40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ff44:	460b      	mov	r3, r1
 800ff46:	4313      	orrs	r3, r2
 800ff48:	d011      	beq.n	800ff6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ff4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff4e:	3328      	adds	r3, #40	; 0x28
 800ff50:	2101      	movs	r1, #1
 800ff52:	4618      	mov	r0, r3
 800ff54:	f001 fa7c 	bl	8011450 <RCCEx_PLL3_Config>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ff5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d003      	beq.n	800ff6e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ff6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ff6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff76:	2100      	movs	r1, #0
 800ff78:	6039      	str	r1, [r7, #0]
 800ff7a:	f003 0320 	and.w	r3, r3, #32
 800ff7e:	607b      	str	r3, [r7, #4]
 800ff80:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ff84:	460b      	mov	r3, r1
 800ff86:	4313      	orrs	r3, r2
 800ff88:	d011      	beq.n	800ffae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ff8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ff8e:	3328      	adds	r3, #40	; 0x28
 800ff90:	2102      	movs	r1, #2
 800ff92:	4618      	mov	r0, r3
 800ff94:	f001 fa5c 	bl	8011450 <RCCEx_PLL3_Config>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ff9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d003      	beq.n	800ffae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ffa6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ffaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ffae:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d101      	bne.n	800ffba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	e000      	b.n	800ffbc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ffba:	2301      	movs	r3, #1
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ffc8:	58024400 	.word	0x58024400

0800ffcc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b090      	sub	sp, #64	; 0x40
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ffd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffda:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ffde:	430b      	orrs	r3, r1
 800ffe0:	f040 8094 	bne.w	801010c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ffe4:	4b9e      	ldr	r3, [pc, #632]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ffe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffe8:	f003 0307 	and.w	r3, r3, #7
 800ffec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ffee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff0:	2b04      	cmp	r3, #4
 800fff2:	f200 8087 	bhi.w	8010104 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800fff6:	a201      	add	r2, pc, #4	; (adr r2, 800fffc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800fff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fffc:	08010011 	.word	0x08010011
 8010000:	08010039 	.word	0x08010039
 8010004:	08010061 	.word	0x08010061
 8010008:	080100fd 	.word	0x080100fd
 801000c:	08010089 	.word	0x08010089
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010010:	4b93      	ldr	r3, [pc, #588]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801001c:	d108      	bne.n	8010030 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801001e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010022:	4618      	mov	r0, r3
 8010024:	f001 f810 	bl	8011048 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801002a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801002c:	f000 bd45 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010030:	2300      	movs	r3, #0
 8010032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010034:	f000 bd41 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010038:	4b89      	ldr	r3, [pc, #548]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010044:	d108      	bne.n	8010058 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010046:	f107 0318 	add.w	r3, r7, #24
 801004a:	4618      	mov	r0, r3
 801004c:	f000 fd54 	bl	8010af8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010050:	69bb      	ldr	r3, [r7, #24]
 8010052:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010054:	f000 bd31 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010058:	2300      	movs	r3, #0
 801005a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801005c:	f000 bd2d 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010060:	4b7f      	ldr	r3, [pc, #508]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801006c:	d108      	bne.n	8010080 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801006e:	f107 030c 	add.w	r3, r7, #12
 8010072:	4618      	mov	r0, r3
 8010074:	f000 fe94 	bl	8010da0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801007c:	f000 bd1d 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010080:	2300      	movs	r3, #0
 8010082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010084:	f000 bd19 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010088:	4b75      	ldr	r3, [pc, #468]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801008a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801008c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010090:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010092:	4b73      	ldr	r3, [pc, #460]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f003 0304 	and.w	r3, r3, #4
 801009a:	2b04      	cmp	r3, #4
 801009c:	d10c      	bne.n	80100b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801009e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d109      	bne.n	80100b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80100a4:	4b6e      	ldr	r3, [pc, #440]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	08db      	lsrs	r3, r3, #3
 80100aa:	f003 0303 	and.w	r3, r3, #3
 80100ae:	4a6d      	ldr	r2, [pc, #436]	; (8010264 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80100b0:	fa22 f303 	lsr.w	r3, r2, r3
 80100b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100b6:	e01f      	b.n	80100f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80100b8:	4b69      	ldr	r3, [pc, #420]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100c4:	d106      	bne.n	80100d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80100c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80100cc:	d102      	bne.n	80100d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80100ce:	4b66      	ldr	r3, [pc, #408]	; (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80100d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100d2:	e011      	b.n	80100f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80100d4:	4b62      	ldr	r3, [pc, #392]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80100dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80100e0:	d106      	bne.n	80100f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80100e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80100e8:	d102      	bne.n	80100f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80100ea:	4b60      	ldr	r3, [pc, #384]	; (801026c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80100ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100ee:	e003      	b.n	80100f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80100f0:	2300      	movs	r3, #0
 80100f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80100f4:	f000 bce1 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80100f8:	f000 bcdf 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80100fc:	4b5c      	ldr	r3, [pc, #368]	; (8010270 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80100fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010100:	f000 bcdb 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010104:	2300      	movs	r3, #0
 8010106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010108:	f000 bcd7 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 801010c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010110:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8010114:	430b      	orrs	r3, r1
 8010116:	f040 80ad 	bne.w	8010274 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 801011a:	4b51      	ldr	r3, [pc, #324]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801011c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801011e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8010122:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8010124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801012a:	d056      	beq.n	80101da <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 801012c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010132:	f200 8090 	bhi.w	8010256 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010138:	2bc0      	cmp	r3, #192	; 0xc0
 801013a:	f000 8088 	beq.w	801024e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 801013e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010140:	2bc0      	cmp	r3, #192	; 0xc0
 8010142:	f200 8088 	bhi.w	8010256 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010148:	2b80      	cmp	r3, #128	; 0x80
 801014a:	d032      	beq.n	80101b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801014c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801014e:	2b80      	cmp	r3, #128	; 0x80
 8010150:	f200 8081 	bhi.w	8010256 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010156:	2b00      	cmp	r3, #0
 8010158:	d003      	beq.n	8010162 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 801015a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015c:	2b40      	cmp	r3, #64	; 0x40
 801015e:	d014      	beq.n	801018a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8010160:	e079      	b.n	8010256 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010162:	4b3f      	ldr	r3, [pc, #252]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801016a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801016e:	d108      	bne.n	8010182 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010174:	4618      	mov	r0, r3
 8010176:	f000 ff67 	bl	8011048 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801017a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801017c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801017e:	f000 bc9c 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010182:	2300      	movs	r3, #0
 8010184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010186:	f000 bc98 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801018a:	4b35      	ldr	r3, [pc, #212]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010196:	d108      	bne.n	80101aa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010198:	f107 0318 	add.w	r3, r7, #24
 801019c:	4618      	mov	r0, r3
 801019e:	f000 fcab 	bl	8010af8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80101a2:	69bb      	ldr	r3, [r7, #24]
 80101a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101a6:	f000 bc88 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101aa:	2300      	movs	r3, #0
 80101ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101ae:	f000 bc84 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80101b2:	4b2b      	ldr	r3, [pc, #172]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80101ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80101be:	d108      	bne.n	80101d2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80101c0:	f107 030c 	add.w	r3, r7, #12
 80101c4:	4618      	mov	r0, r3
 80101c6:	f000 fdeb 	bl	8010da0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101ce:	f000 bc74 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101d2:	2300      	movs	r3, #0
 80101d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80101d6:	f000 bc70 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80101da:	4b21      	ldr	r3, [pc, #132]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80101dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80101e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80101e4:	4b1e      	ldr	r3, [pc, #120]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	f003 0304 	and.w	r3, r3, #4
 80101ec:	2b04      	cmp	r3, #4
 80101ee:	d10c      	bne.n	801020a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80101f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d109      	bne.n	801020a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80101f6:	4b1a      	ldr	r3, [pc, #104]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	08db      	lsrs	r3, r3, #3
 80101fc:	f003 0303 	and.w	r3, r3, #3
 8010200:	4a18      	ldr	r2, [pc, #96]	; (8010264 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010202:	fa22 f303 	lsr.w	r3, r2, r3
 8010206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010208:	e01f      	b.n	801024a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801020a:	4b15      	ldr	r3, [pc, #84]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010216:	d106      	bne.n	8010226 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801021a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801021e:	d102      	bne.n	8010226 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010220:	4b11      	ldr	r3, [pc, #68]	; (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010224:	e011      	b.n	801024a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010226:	4b0e      	ldr	r3, [pc, #56]	; (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801022e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010232:	d106      	bne.n	8010242 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8010234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801023a:	d102      	bne.n	8010242 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801023c:	4b0b      	ldr	r3, [pc, #44]	; (801026c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801023e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010240:	e003      	b.n	801024a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010242:	2300      	movs	r3, #0
 8010244:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010246:	f000 bc38 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801024a:	f000 bc36 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801024e:	4b08      	ldr	r3, [pc, #32]	; (8010270 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010250:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010252:	f000 bc32 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010256:	2300      	movs	r3, #0
 8010258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801025a:	f000 bc2e 	b.w	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801025e:	bf00      	nop
 8010260:	58024400 	.word	0x58024400
 8010264:	03d09000 	.word	0x03d09000
 8010268:	003d0900 	.word	0x003d0900
 801026c:	017d7840 	.word	0x017d7840
 8010270:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010278:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 801027c:	430b      	orrs	r3, r1
 801027e:	f040 809c 	bne.w	80103ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8010282:	4b9e      	ldr	r3, [pc, #632]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010286:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801028a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801028c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010292:	d054      	beq.n	801033e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8010294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010296:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801029a:	f200 808b 	bhi.w	80103b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801029e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80102a4:	f000 8083 	beq.w	80103ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80102a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80102ae:	f200 8081 	bhi.w	80103b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80102b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80102b8:	d02f      	beq.n	801031a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80102ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80102c0:	d878      	bhi.n	80103b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80102c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d004      	beq.n	80102d2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80102c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80102ce:	d012      	beq.n	80102f6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80102d0:	e070      	b.n	80103b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80102d2:	4b8a      	ldr	r3, [pc, #552]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80102da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80102de:	d107      	bne.n	80102f0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80102e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102e4:	4618      	mov	r0, r3
 80102e6:	f000 feaf 	bl	8011048 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80102ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102ee:	e3e4      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102f0:	2300      	movs	r3, #0
 80102f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80102f4:	e3e1      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80102f6:	4b81      	ldr	r3, [pc, #516]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80102fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010302:	d107      	bne.n	8010314 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010304:	f107 0318 	add.w	r3, r7, #24
 8010308:	4618      	mov	r0, r3
 801030a:	f000 fbf5 	bl	8010af8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801030e:	69bb      	ldr	r3, [r7, #24]
 8010310:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010312:	e3d2      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010314:	2300      	movs	r3, #0
 8010316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010318:	e3cf      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801031a:	4b78      	ldr	r3, [pc, #480]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010326:	d107      	bne.n	8010338 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010328:	f107 030c 	add.w	r3, r7, #12
 801032c:	4618      	mov	r0, r3
 801032e:	f000 fd37 	bl	8010da0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010336:	e3c0      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010338:	2300      	movs	r3, #0
 801033a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801033c:	e3bd      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801033e:	4b6f      	ldr	r3, [pc, #444]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010342:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010346:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010348:	4b6c      	ldr	r3, [pc, #432]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f003 0304 	and.w	r3, r3, #4
 8010350:	2b04      	cmp	r3, #4
 8010352:	d10c      	bne.n	801036e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8010354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010356:	2b00      	cmp	r3, #0
 8010358:	d109      	bne.n	801036e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801035a:	4b68      	ldr	r3, [pc, #416]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	08db      	lsrs	r3, r3, #3
 8010360:	f003 0303 	and.w	r3, r3, #3
 8010364:	4a66      	ldr	r2, [pc, #408]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8010366:	fa22 f303 	lsr.w	r3, r2, r3
 801036a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801036c:	e01e      	b.n	80103ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801036e:	4b63      	ldr	r3, [pc, #396]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801037a:	d106      	bne.n	801038a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 801037c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801037e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010382:	d102      	bne.n	801038a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010384:	4b5f      	ldr	r3, [pc, #380]	; (8010504 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010388:	e010      	b.n	80103ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801038a:	4b5c      	ldr	r3, [pc, #368]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010392:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010396:	d106      	bne.n	80103a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8010398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801039a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801039e:	d102      	bne.n	80103a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80103a0:	4b59      	ldr	r3, [pc, #356]	; (8010508 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80103a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103a4:	e002      	b.n	80103ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80103a6:	2300      	movs	r3, #0
 80103a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80103aa:	e386      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80103ac:	e385      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80103ae:	4b57      	ldr	r3, [pc, #348]	; (801050c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80103b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103b2:	e382      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80103b4:	2300      	movs	r3, #0
 80103b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80103b8:	e37f      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80103ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103be:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80103c2:	430b      	orrs	r3, r1
 80103c4:	f040 80a7 	bne.w	8010516 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80103c8:	4b4c      	ldr	r3, [pc, #304]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80103ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103cc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80103d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80103d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80103d8:	d055      	beq.n	8010486 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80103da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80103e0:	f200 8096 	bhi.w	8010510 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80103e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80103ea:	f000 8084 	beq.w	80104f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80103ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80103f4:	f200 808c 	bhi.w	8010510 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80103f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80103fe:	d030      	beq.n	8010462 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010402:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010406:	f200 8083 	bhi.w	8010510 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801040a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801040c:	2b00      	cmp	r3, #0
 801040e:	d004      	beq.n	801041a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010412:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010416:	d012      	beq.n	801043e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010418:	e07a      	b.n	8010510 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801041a:	4b38      	ldr	r3, [pc, #224]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010422:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010426:	d107      	bne.n	8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801042c:	4618      	mov	r0, r3
 801042e:	f000 fe0b 	bl	8011048 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010434:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010436:	e340      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010438:	2300      	movs	r3, #0
 801043a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801043c:	e33d      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801043e:	4b2f      	ldr	r3, [pc, #188]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801044a:	d107      	bne.n	801045c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801044c:	f107 0318 	add.w	r3, r7, #24
 8010450:	4618      	mov	r0, r3
 8010452:	f000 fb51 	bl	8010af8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010456:	69bb      	ldr	r3, [r7, #24]
 8010458:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801045a:	e32e      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801045c:	2300      	movs	r3, #0
 801045e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010460:	e32b      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010462:	4b26      	ldr	r3, [pc, #152]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801046a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801046e:	d107      	bne.n	8010480 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010470:	f107 030c 	add.w	r3, r7, #12
 8010474:	4618      	mov	r0, r3
 8010476:	f000 fc93 	bl	8010da0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801047e:	e31c      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010480:	2300      	movs	r3, #0
 8010482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010484:	e319      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010486:	4b1d      	ldr	r3, [pc, #116]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801048a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801048e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010490:	4b1a      	ldr	r3, [pc, #104]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f003 0304 	and.w	r3, r3, #4
 8010498:	2b04      	cmp	r3, #4
 801049a:	d10c      	bne.n	80104b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 801049c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d109      	bne.n	80104b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80104a2:	4b16      	ldr	r3, [pc, #88]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	08db      	lsrs	r3, r3, #3
 80104a8:	f003 0303 	and.w	r3, r3, #3
 80104ac:	4a14      	ldr	r2, [pc, #80]	; (8010500 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80104ae:	fa22 f303 	lsr.w	r3, r2, r3
 80104b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104b4:	e01e      	b.n	80104f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80104b6:	4b11      	ldr	r3, [pc, #68]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104c2:	d106      	bne.n	80104d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80104c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80104ca:	d102      	bne.n	80104d2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80104cc:	4b0d      	ldr	r3, [pc, #52]	; (8010504 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80104ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104d0:	e010      	b.n	80104f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80104d2:	4b0a      	ldr	r3, [pc, #40]	; (80104fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80104da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80104de:	d106      	bne.n	80104ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80104e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104e6:	d102      	bne.n	80104ee <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80104e8:	4b07      	ldr	r3, [pc, #28]	; (8010508 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80104ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80104ec:	e002      	b.n	80104f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80104ee:	2300      	movs	r3, #0
 80104f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80104f2:	e2e2      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80104f4:	e2e1      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80104f6:	4b05      	ldr	r3, [pc, #20]	; (801050c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80104f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80104fa:	e2de      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80104fc:	58024400 	.word	0x58024400
 8010500:	03d09000 	.word	0x03d09000
 8010504:	003d0900 	.word	0x003d0900
 8010508:	017d7840 	.word	0x017d7840
 801050c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010510:	2300      	movs	r3, #0
 8010512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010514:	e2d1      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010516:	e9d7 2300 	ldrd	r2, r3, [r7]
 801051a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801051e:	430b      	orrs	r3, r1
 8010520:	f040 809c 	bne.w	801065c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010524:	4b93      	ldr	r3, [pc, #588]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010528:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801052c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801052e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010534:	d054      	beq.n	80105e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8010536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801053c:	f200 808b 	bhi.w	8010656 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010542:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010546:	f000 8083 	beq.w	8010650 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 801054a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801054c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010550:	f200 8081 	bhi.w	8010656 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801055a:	d02f      	beq.n	80105bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 801055c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801055e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010562:	d878      	bhi.n	8010656 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010566:	2b00      	cmp	r3, #0
 8010568:	d004      	beq.n	8010574 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 801056a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801056c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010570:	d012      	beq.n	8010598 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8010572:	e070      	b.n	8010656 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010574:	4b7f      	ldr	r3, [pc, #508]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801057c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010580:	d107      	bne.n	8010592 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010586:	4618      	mov	r0, r3
 8010588:	f000 fd5e 	bl	8011048 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801058c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010590:	e293      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010592:	2300      	movs	r3, #0
 8010594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010596:	e290      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010598:	4b76      	ldr	r3, [pc, #472]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80105a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80105a4:	d107      	bne.n	80105b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80105a6:	f107 0318 	add.w	r3, r7, #24
 80105aa:	4618      	mov	r0, r3
 80105ac:	f000 faa4 	bl	8010af8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80105b0:	69bb      	ldr	r3, [r7, #24]
 80105b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80105b4:	e281      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80105b6:	2300      	movs	r3, #0
 80105b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105ba:	e27e      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80105bc:	4b6d      	ldr	r3, [pc, #436]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80105c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80105c8:	d107      	bne.n	80105da <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80105ca:	f107 030c 	add.w	r3, r7, #12
 80105ce:	4618      	mov	r0, r3
 80105d0:	f000 fbe6 	bl	8010da0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80105d8:	e26f      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80105da:	2300      	movs	r3, #0
 80105dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105de:	e26c      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80105e0:	4b64      	ldr	r3, [pc, #400]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80105e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80105e8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80105ea:	4b62      	ldr	r3, [pc, #392]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	f003 0304 	and.w	r3, r3, #4
 80105f2:	2b04      	cmp	r3, #4
 80105f4:	d10c      	bne.n	8010610 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80105f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d109      	bne.n	8010610 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80105fc:	4b5d      	ldr	r3, [pc, #372]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	08db      	lsrs	r3, r3, #3
 8010602:	f003 0303 	and.w	r3, r3, #3
 8010606:	4a5c      	ldr	r2, [pc, #368]	; (8010778 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010608:	fa22 f303 	lsr.w	r3, r2, r3
 801060c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801060e:	e01e      	b.n	801064e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010610:	4b58      	ldr	r3, [pc, #352]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801061c:	d106      	bne.n	801062c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801061e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010620:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010624:	d102      	bne.n	801062c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010626:	4b55      	ldr	r3, [pc, #340]	; (801077c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010628:	63fb      	str	r3, [r7, #60]	; 0x3c
 801062a:	e010      	b.n	801064e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801062c:	4b51      	ldr	r3, [pc, #324]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010634:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010638:	d106      	bne.n	8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 801063a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801063c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010640:	d102      	bne.n	8010648 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010642:	4b4f      	ldr	r3, [pc, #316]	; (8010780 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010646:	e002      	b.n	801064e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010648:	2300      	movs	r3, #0
 801064a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801064c:	e235      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801064e:	e234      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010650:	4b4c      	ldr	r3, [pc, #304]	; (8010784 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8010652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010654:	e231      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010656:	2300      	movs	r3, #0
 8010658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801065a:	e22e      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801065c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010660:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8010664:	430b      	orrs	r3, r1
 8010666:	f040 808f 	bne.w	8010788 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801066a:	4b42      	ldr	r3, [pc, #264]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801066c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801066e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8010672:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8010674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010676:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801067a:	d06b      	beq.n	8010754 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 801067c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801067e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010682:	d874      	bhi.n	801076e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010686:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801068a:	d056      	beq.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 801068c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801068e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010692:	d86c      	bhi.n	801076e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010696:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801069a:	d03b      	beq.n	8010714 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 801069c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80106a2:	d864      	bhi.n	801076e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80106a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106aa:	d021      	beq.n	80106f0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80106ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106b2:	d85c      	bhi.n	801076e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80106b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d004      	beq.n	80106c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80106ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106c0:	d004      	beq.n	80106cc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80106c2:	e054      	b.n	801076e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80106c4:	f7fe fa0a 	bl	800eadc <HAL_RCC_GetPCLK1Freq>
 80106c8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80106ca:	e1f6      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80106cc:	4b29      	ldr	r3, [pc, #164]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80106d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80106d8:	d107      	bne.n	80106ea <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80106da:	f107 0318 	add.w	r3, r7, #24
 80106de:	4618      	mov	r0, r3
 80106e0:	f000 fa0a 	bl	8010af8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80106e4:	69fb      	ldr	r3, [r7, #28]
 80106e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106e8:	e1e7      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106ea:	2300      	movs	r3, #0
 80106ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80106ee:	e1e4      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80106f0:	4b20      	ldr	r3, [pc, #128]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80106f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106fc:	d107      	bne.n	801070e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80106fe:	f107 030c 	add.w	r3, r7, #12
 8010702:	4618      	mov	r0, r3
 8010704:	f000 fb4c 	bl	8010da0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801070c:	e1d5      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801070e:	2300      	movs	r3, #0
 8010710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010712:	e1d2      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010714:	4b17      	ldr	r3, [pc, #92]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f003 0304 	and.w	r3, r3, #4
 801071c:	2b04      	cmp	r3, #4
 801071e:	d109      	bne.n	8010734 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010720:	4b14      	ldr	r3, [pc, #80]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	08db      	lsrs	r3, r3, #3
 8010726:	f003 0303 	and.w	r3, r3, #3
 801072a:	4a13      	ldr	r2, [pc, #76]	; (8010778 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801072c:	fa22 f303 	lsr.w	r3, r2, r3
 8010730:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010732:	e1c2      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010734:	2300      	movs	r3, #0
 8010736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010738:	e1bf      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801073a:	4b0e      	ldr	r3, [pc, #56]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010746:	d102      	bne.n	801074e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8010748:	4b0c      	ldr	r3, [pc, #48]	; (801077c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801074a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801074c:	e1b5      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801074e:	2300      	movs	r3, #0
 8010750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010752:	e1b2      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010754:	4b07      	ldr	r3, [pc, #28]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801075c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010760:	d102      	bne.n	8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8010762:	4b07      	ldr	r3, [pc, #28]	; (8010780 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8010764:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010766:	e1a8      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010768:	2300      	movs	r3, #0
 801076a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801076c:	e1a5      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801076e:	2300      	movs	r3, #0
 8010770:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010772:	e1a2      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010774:	58024400 	.word	0x58024400
 8010778:	03d09000 	.word	0x03d09000
 801077c:	003d0900 	.word	0x003d0900
 8010780:	017d7840 	.word	0x017d7840
 8010784:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010788:	e9d7 2300 	ldrd	r2, r3, [r7]
 801078c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8010790:	430b      	orrs	r3, r1
 8010792:	d173      	bne.n	801087c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010794:	4b9c      	ldr	r3, [pc, #624]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010798:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801079c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801079e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107a4:	d02f      	beq.n	8010806 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80107a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107ac:	d863      	bhi.n	8010876 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80107ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d004      	beq.n	80107be <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80107b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107ba:	d012      	beq.n	80107e2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80107bc:	e05b      	b.n	8010876 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80107be:	4b92      	ldr	r3, [pc, #584]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80107c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80107ca:	d107      	bne.n	80107dc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80107cc:	f107 0318 	add.w	r3, r7, #24
 80107d0:	4618      	mov	r0, r3
 80107d2:	f000 f991 	bl	8010af8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107da:	e16e      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107dc:	2300      	movs	r3, #0
 80107de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107e0:	e16b      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80107e2:	4b89      	ldr	r3, [pc, #548]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80107ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107ee:	d107      	bne.n	8010800 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80107f0:	f107 030c 	add.w	r3, r7, #12
 80107f4:	4618      	mov	r0, r3
 80107f6:	f000 fad3 	bl	8010da0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107fe:	e15c      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010800:	2300      	movs	r3, #0
 8010802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010804:	e159      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010806:	4b80      	ldr	r3, [pc, #512]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801080a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801080e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010810:	4b7d      	ldr	r3, [pc, #500]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	f003 0304 	and.w	r3, r3, #4
 8010818:	2b04      	cmp	r3, #4
 801081a:	d10c      	bne.n	8010836 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 801081c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801081e:	2b00      	cmp	r3, #0
 8010820:	d109      	bne.n	8010836 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010822:	4b79      	ldr	r3, [pc, #484]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	08db      	lsrs	r3, r3, #3
 8010828:	f003 0303 	and.w	r3, r3, #3
 801082c:	4a77      	ldr	r2, [pc, #476]	; (8010a0c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801082e:	fa22 f303 	lsr.w	r3, r2, r3
 8010832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010834:	e01e      	b.n	8010874 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010836:	4b74      	ldr	r3, [pc, #464]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801083e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010842:	d106      	bne.n	8010852 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8010844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801084a:	d102      	bne.n	8010852 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801084c:	4b70      	ldr	r3, [pc, #448]	; (8010a10 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801084e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010850:	e010      	b.n	8010874 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010852:	4b6d      	ldr	r3, [pc, #436]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801085a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801085e:	d106      	bne.n	801086e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8010860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010866:	d102      	bne.n	801086e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010868:	4b6a      	ldr	r3, [pc, #424]	; (8010a14 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801086a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801086c:	e002      	b.n	8010874 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801086e:	2300      	movs	r3, #0
 8010870:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8010872:	e122      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010874:	e121      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010876:	2300      	movs	r3, #0
 8010878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801087a:	e11e      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801087c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010880:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8010884:	430b      	orrs	r3, r1
 8010886:	d133      	bne.n	80108f0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8010888:	4b5f      	ldr	r3, [pc, #380]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801088c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010890:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010894:	2b00      	cmp	r3, #0
 8010896:	d004      	beq.n	80108a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8010898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801089a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801089e:	d012      	beq.n	80108c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80108a0:	e023      	b.n	80108ea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80108a2:	4b59      	ldr	r3, [pc, #356]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80108aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80108ae:	d107      	bne.n	80108c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80108b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80108b4:	4618      	mov	r0, r3
 80108b6:	f000 fbc7 	bl	8011048 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80108ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108be:	e0fc      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108c0:	2300      	movs	r3, #0
 80108c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108c4:	e0f9      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80108c6:	4b50      	ldr	r3, [pc, #320]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80108ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80108d2:	d107      	bne.n	80108e4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80108d4:	f107 0318 	add.w	r3, r7, #24
 80108d8:	4618      	mov	r0, r3
 80108da:	f000 f90d 	bl	8010af8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80108de:	6a3b      	ldr	r3, [r7, #32]
 80108e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80108e2:	e0ea      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80108e4:	2300      	movs	r3, #0
 80108e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108e8:	e0e7      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80108ea:	2300      	movs	r3, #0
 80108ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80108ee:	e0e4      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80108f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108f4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80108f8:	430b      	orrs	r3, r1
 80108fa:	f040 808d 	bne.w	8010a18 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80108fe:	4b42      	ldr	r3, [pc, #264]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010902:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8010906:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801090a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801090e:	d06b      	beq.n	80109e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010912:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010916:	d874      	bhi.n	8010a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801091a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801091e:	d056      	beq.n	80109ce <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010926:	d86c      	bhi.n	8010a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801092e:	d03b      	beq.n	80109a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8010930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010932:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010936:	d864      	bhi.n	8010a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801093a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801093e:	d021      	beq.n	8010984 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8010940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010946:	d85c      	bhi.n	8010a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801094a:	2b00      	cmp	r3, #0
 801094c:	d004      	beq.n	8010958 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 801094e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010954:	d004      	beq.n	8010960 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8010956:	e054      	b.n	8010a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8010958:	f000 f8b8 	bl	8010acc <HAL_RCCEx_GetD3PCLK1Freq>
 801095c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801095e:	e0ac      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010960:	4b29      	ldr	r3, [pc, #164]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801096c:	d107      	bne.n	801097e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801096e:	f107 0318 	add.w	r3, r7, #24
 8010972:	4618      	mov	r0, r3
 8010974:	f000 f8c0 	bl	8010af8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801097c:	e09d      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801097e:	2300      	movs	r3, #0
 8010980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010982:	e09a      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010984:	4b20      	ldr	r3, [pc, #128]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801098c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010990:	d107      	bne.n	80109a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010992:	f107 030c 	add.w	r3, r7, #12
 8010996:	4618      	mov	r0, r3
 8010998:	f000 fa02 	bl	8010da0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801099c:	693b      	ldr	r3, [r7, #16]
 801099e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109a0:	e08b      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109a2:	2300      	movs	r3, #0
 80109a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109a6:	e088      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80109a8:	4b17      	ldr	r3, [pc, #92]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	f003 0304 	and.w	r3, r3, #4
 80109b0:	2b04      	cmp	r3, #4
 80109b2:	d109      	bne.n	80109c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80109b4:	4b14      	ldr	r3, [pc, #80]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	08db      	lsrs	r3, r3, #3
 80109ba:	f003 0303 	and.w	r3, r3, #3
 80109be:	4a13      	ldr	r2, [pc, #76]	; (8010a0c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80109c0:	fa22 f303 	lsr.w	r3, r2, r3
 80109c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109c6:	e078      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109c8:	2300      	movs	r3, #0
 80109ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109cc:	e075      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80109ce:	4b0e      	ldr	r3, [pc, #56]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109da:	d102      	bne.n	80109e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80109dc:	4b0c      	ldr	r3, [pc, #48]	; (8010a10 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80109de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109e0:	e06b      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109e2:	2300      	movs	r3, #0
 80109e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109e6:	e068      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80109e8:	4b07      	ldr	r3, [pc, #28]	; (8010a08 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80109f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80109f4:	d102      	bne.n	80109fc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80109f6:	4b07      	ldr	r3, [pc, #28]	; (8010a14 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80109f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80109fa:	e05e      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80109fc:	2300      	movs	r3, #0
 80109fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a00:	e05b      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010a02:	2300      	movs	r3, #0
 8010a04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a06:	e058      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010a08:	58024400 	.word	0x58024400
 8010a0c:	03d09000 	.word	0x03d09000
 8010a10:	003d0900 	.word	0x003d0900
 8010a14:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010a1c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8010a20:	430b      	orrs	r3, r1
 8010a22:	d148      	bne.n	8010ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010a24:	4b27      	ldr	r3, [pc, #156]	; (8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010a2c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8010a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a34:	d02a      	beq.n	8010a8c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8010a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a3c:	d838      	bhi.n	8010ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8010a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d004      	beq.n	8010a4e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8010a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010a4a:	d00d      	beq.n	8010a68 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8010a4c:	e030      	b.n	8010ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010a4e:	4b1d      	ldr	r3, [pc, #116]	; (8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010a5a:	d102      	bne.n	8010a62 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8010a5c:	4b1a      	ldr	r3, [pc, #104]	; (8010ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8010a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a60:	e02b      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a62:	2300      	movs	r3, #0
 8010a64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a66:	e028      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010a68:	4b16      	ldr	r3, [pc, #88]	; (8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010a74:	d107      	bne.n	8010a86 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	f000 fae4 	bl	8011048 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010a84:	e019      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010a86:	2300      	movs	r3, #0
 8010a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010a8a:	e016      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010a8c:	4b0d      	ldr	r3, [pc, #52]	; (8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010a94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010a98:	d107      	bne.n	8010aaa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a9a:	f107 0318 	add.w	r3, r7, #24
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f000 f82a 	bl	8010af8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010aa4:	69fb      	ldr	r3, [r7, #28]
 8010aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010aa8:	e007      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010aae:	e004      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ab4:	e001      	b.n	8010aba <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8010aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010abc:	4618      	mov	r0, r3
 8010abe:	3740      	adds	r7, #64	; 0x40
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	58024400 	.word	0x58024400
 8010ac8:	017d7840 	.word	0x017d7840

08010acc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010ad0:	f7fd ffd4 	bl	800ea7c <HAL_RCC_GetHCLKFreq>
 8010ad4:	4602      	mov	r2, r0
 8010ad6:	4b06      	ldr	r3, [pc, #24]	; (8010af0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010ad8:	6a1b      	ldr	r3, [r3, #32]
 8010ada:	091b      	lsrs	r3, r3, #4
 8010adc:	f003 0307 	and.w	r3, r3, #7
 8010ae0:	4904      	ldr	r1, [pc, #16]	; (8010af4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010ae2:	5ccb      	ldrb	r3, [r1, r3]
 8010ae4:	f003 031f 	and.w	r3, r3, #31
 8010ae8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	bd80      	pop	{r7, pc}
 8010af0:	58024400 	.word	0x58024400
 8010af4:	0801ae54 	.word	0x0801ae54

08010af8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b089      	sub	sp, #36	; 0x24
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010b00:	4ba1      	ldr	r3, [pc, #644]	; (8010d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b04:	f003 0303 	and.w	r3, r3, #3
 8010b08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010b0a:	4b9f      	ldr	r3, [pc, #636]	; (8010d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b0e:	0b1b      	lsrs	r3, r3, #12
 8010b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b14:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010b16:	4b9c      	ldr	r3, [pc, #624]	; (8010d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b1a:	091b      	lsrs	r3, r3, #4
 8010b1c:	f003 0301 	and.w	r3, r3, #1
 8010b20:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010b22:	4b99      	ldr	r3, [pc, #612]	; (8010d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b26:	08db      	lsrs	r3, r3, #3
 8010b28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b2c:	693a      	ldr	r2, [r7, #16]
 8010b2e:	fb02 f303 	mul.w	r3, r2, r3
 8010b32:	ee07 3a90 	vmov	s15, r3
 8010b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b3a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	f000 8111 	beq.w	8010d68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010b46:	69bb      	ldr	r3, [r7, #24]
 8010b48:	2b02      	cmp	r3, #2
 8010b4a:	f000 8083 	beq.w	8010c54 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010b4e:	69bb      	ldr	r3, [r7, #24]
 8010b50:	2b02      	cmp	r3, #2
 8010b52:	f200 80a1 	bhi.w	8010c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d003      	beq.n	8010b64 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010b5c:	69bb      	ldr	r3, [r7, #24]
 8010b5e:	2b01      	cmp	r3, #1
 8010b60:	d056      	beq.n	8010c10 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010b62:	e099      	b.n	8010c98 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b64:	4b88      	ldr	r3, [pc, #544]	; (8010d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f003 0320 	and.w	r3, r3, #32
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d02d      	beq.n	8010bcc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010b70:	4b85      	ldr	r3, [pc, #532]	; (8010d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	08db      	lsrs	r3, r3, #3
 8010b76:	f003 0303 	and.w	r3, r3, #3
 8010b7a:	4a84      	ldr	r2, [pc, #528]	; (8010d8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8010b80:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	ee07 3a90 	vmov	s15, r3
 8010b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	ee07 3a90 	vmov	s15, r3
 8010b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b9a:	4b7b      	ldr	r3, [pc, #492]	; (8010d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ba2:	ee07 3a90 	vmov	s15, r3
 8010ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010bca:	e087      	b.n	8010cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	ee07 3a90 	vmov	s15, r3
 8010bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bd6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010d94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010bde:	4b6a      	ldr	r3, [pc, #424]	; (8010d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010be6:	ee07 3a90 	vmov	s15, r3
 8010bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bf2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c0e:	e065      	b.n	8010cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	ee07 3a90 	vmov	s15, r3
 8010c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c1a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c22:	4b59      	ldr	r3, [pc, #356]	; (8010d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c2a:	ee07 3a90 	vmov	s15, r3
 8010c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c36:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c52:	e043      	b.n	8010cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	ee07 3a90 	vmov	s15, r3
 8010c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c5e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010d9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c66:	4b48      	ldr	r3, [pc, #288]	; (8010d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c6e:	ee07 3a90 	vmov	s15, r3
 8010c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c7a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c96:	e021      	b.n	8010cdc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	ee07 3a90 	vmov	s15, r3
 8010c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ca2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010caa:	4b37      	ldr	r3, [pc, #220]	; (8010d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cb2:	ee07 3a90 	vmov	s15, r3
 8010cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8010cbe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010d90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010cda:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010cdc:	4b2a      	ldr	r3, [pc, #168]	; (8010d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ce0:	0a5b      	lsrs	r3, r3, #9
 8010ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ce6:	ee07 3a90 	vmov	s15, r3
 8010cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010cf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010cf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8010cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d02:	ee17 2a90 	vmov	r2, s15
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8010d0a:	4b1f      	ldr	r3, [pc, #124]	; (8010d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d0e:	0c1b      	lsrs	r3, r3, #16
 8010d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d14:	ee07 3a90 	vmov	s15, r3
 8010d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d24:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d30:	ee17 2a90 	vmov	r2, s15
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8010d38:	4b13      	ldr	r3, [pc, #76]	; (8010d88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d3c:	0e1b      	lsrs	r3, r3, #24
 8010d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d42:	ee07 3a90 	vmov	s15, r3
 8010d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d5e:	ee17 2a90 	vmov	r2, s15
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010d66:	e008      	b.n	8010d7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2200      	movs	r2, #0
 8010d72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2200      	movs	r2, #0
 8010d78:	609a      	str	r2, [r3, #8]
}
 8010d7a:	bf00      	nop
 8010d7c:	3724      	adds	r7, #36	; 0x24
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d84:	4770      	bx	lr
 8010d86:	bf00      	nop
 8010d88:	58024400 	.word	0x58024400
 8010d8c:	03d09000 	.word	0x03d09000
 8010d90:	46000000 	.word	0x46000000
 8010d94:	4c742400 	.word	0x4c742400
 8010d98:	4a742400 	.word	0x4a742400
 8010d9c:	4bbebc20 	.word	0x4bbebc20

08010da0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010da0:	b480      	push	{r7}
 8010da2:	b089      	sub	sp, #36	; 0x24
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010da8:	4ba1      	ldr	r3, [pc, #644]	; (8011030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dac:	f003 0303 	and.w	r3, r3, #3
 8010db0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010db2:	4b9f      	ldr	r3, [pc, #636]	; (8011030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010db6:	0d1b      	lsrs	r3, r3, #20
 8010db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010dbc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010dbe:	4b9c      	ldr	r3, [pc, #624]	; (8011030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dc2:	0a1b      	lsrs	r3, r3, #8
 8010dc4:	f003 0301 	and.w	r3, r3, #1
 8010dc8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010dca:	4b99      	ldr	r3, [pc, #612]	; (8011030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dce:	08db      	lsrs	r3, r3, #3
 8010dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010dd4:	693a      	ldr	r2, [r7, #16]
 8010dd6:	fb02 f303 	mul.w	r3, r2, r3
 8010dda:	ee07 3a90 	vmov	s15, r3
 8010dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010de2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	f000 8111 	beq.w	8011010 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010dee:	69bb      	ldr	r3, [r7, #24]
 8010df0:	2b02      	cmp	r3, #2
 8010df2:	f000 8083 	beq.w	8010efc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010df6:	69bb      	ldr	r3, [r7, #24]
 8010df8:	2b02      	cmp	r3, #2
 8010dfa:	f200 80a1 	bhi.w	8010f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010dfe:	69bb      	ldr	r3, [r7, #24]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d003      	beq.n	8010e0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010e04:	69bb      	ldr	r3, [r7, #24]
 8010e06:	2b01      	cmp	r3, #1
 8010e08:	d056      	beq.n	8010eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010e0a:	e099      	b.n	8010f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e0c:	4b88      	ldr	r3, [pc, #544]	; (8011030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	f003 0320 	and.w	r3, r3, #32
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d02d      	beq.n	8010e74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010e18:	4b85      	ldr	r3, [pc, #532]	; (8011030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	08db      	lsrs	r3, r3, #3
 8010e1e:	f003 0303 	and.w	r3, r3, #3
 8010e22:	4a84      	ldr	r2, [pc, #528]	; (8011034 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010e24:	fa22 f303 	lsr.w	r3, r2, r3
 8010e28:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	ee07 3a90 	vmov	s15, r3
 8010e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	ee07 3a90 	vmov	s15, r3
 8010e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e42:	4b7b      	ldr	r3, [pc, #492]	; (8011030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e4a:	ee07 3a90 	vmov	s15, r3
 8010e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8011038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010e72:	e087      	b.n	8010f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	ee07 3a90 	vmov	s15, r3
 8010e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801103c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e86:	4b6a      	ldr	r3, [pc, #424]	; (8011030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e8e:	ee07 3a90 	vmov	s15, r3
 8010e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8011038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010eb6:	e065      	b.n	8010f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	ee07 3a90 	vmov	s15, r3
 8010ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ec2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8011040 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010eca:	4b59      	ldr	r3, [pc, #356]	; (8011030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ed2:	ee07 3a90 	vmov	s15, r3
 8010ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ede:	eddf 5a56 	vldr	s11, [pc, #344]	; 8011038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010efa:	e043      	b.n	8010f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	ee07 3a90 	vmov	s15, r3
 8010f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8011044 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f0e:	4b48      	ldr	r3, [pc, #288]	; (8011030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f16:	ee07 3a90 	vmov	s15, r3
 8010f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8011038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f3e:	e021      	b.n	8010f84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	ee07 3a90 	vmov	s15, r3
 8010f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8011040 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f52:	4b37      	ldr	r3, [pc, #220]	; (8011030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f5a:	ee07 3a90 	vmov	s15, r3
 8010f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8011038 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010f84:	4b2a      	ldr	r3, [pc, #168]	; (8011030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f88:	0a5b      	lsrs	r3, r3, #9
 8010f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f8e:	ee07 3a90 	vmov	s15, r3
 8010f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010faa:	ee17 2a90 	vmov	r2, s15
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010fb2:	4b1f      	ldr	r3, [pc, #124]	; (8011030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fb6:	0c1b      	lsrs	r3, r3, #16
 8010fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fbc:	ee07 3a90 	vmov	s15, r3
 8010fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010fc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010fcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8010fd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fd8:	ee17 2a90 	vmov	r2, s15
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010fe0:	4b13      	ldr	r3, [pc, #76]	; (8011030 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fe4:	0e1b      	lsrs	r3, r3, #24
 8010fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fea:	ee07 3a90 	vmov	s15, r3
 8010fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ff2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011006:	ee17 2a90 	vmov	r2, s15
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801100e:	e008      	b.n	8011022 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2200      	movs	r2, #0
 8011014:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2200      	movs	r2, #0
 801101a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2200      	movs	r2, #0
 8011020:	609a      	str	r2, [r3, #8]
}
 8011022:	bf00      	nop
 8011024:	3724      	adds	r7, #36	; 0x24
 8011026:	46bd      	mov	sp, r7
 8011028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop
 8011030:	58024400 	.word	0x58024400
 8011034:	03d09000 	.word	0x03d09000
 8011038:	46000000 	.word	0x46000000
 801103c:	4c742400 	.word	0x4c742400
 8011040:	4a742400 	.word	0x4a742400
 8011044:	4bbebc20 	.word	0x4bbebc20

08011048 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8011048:	b480      	push	{r7}
 801104a:	b089      	sub	sp, #36	; 0x24
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011050:	4ba0      	ldr	r3, [pc, #640]	; (80112d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011054:	f003 0303 	and.w	r3, r3, #3
 8011058:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801105a:	4b9e      	ldr	r3, [pc, #632]	; (80112d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801105c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801105e:	091b      	lsrs	r3, r3, #4
 8011060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011064:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8011066:	4b9b      	ldr	r3, [pc, #620]	; (80112d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801106a:	f003 0301 	and.w	r3, r3, #1
 801106e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011070:	4b98      	ldr	r3, [pc, #608]	; (80112d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011074:	08db      	lsrs	r3, r3, #3
 8011076:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801107a:	693a      	ldr	r2, [r7, #16]
 801107c:	fb02 f303 	mul.w	r3, r2, r3
 8011080:	ee07 3a90 	vmov	s15, r3
 8011084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011088:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801108c:	697b      	ldr	r3, [r7, #20]
 801108e:	2b00      	cmp	r3, #0
 8011090:	f000 8111 	beq.w	80112b6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8011094:	69bb      	ldr	r3, [r7, #24]
 8011096:	2b02      	cmp	r3, #2
 8011098:	f000 8083 	beq.w	80111a2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801109c:	69bb      	ldr	r3, [r7, #24]
 801109e:	2b02      	cmp	r3, #2
 80110a0:	f200 80a1 	bhi.w	80111e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80110a4:	69bb      	ldr	r3, [r7, #24]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d003      	beq.n	80110b2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80110aa:	69bb      	ldr	r3, [r7, #24]
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d056      	beq.n	801115e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80110b0:	e099      	b.n	80111e6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80110b2:	4b88      	ldr	r3, [pc, #544]	; (80112d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	f003 0320 	and.w	r3, r3, #32
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d02d      	beq.n	801111a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80110be:	4b85      	ldr	r3, [pc, #532]	; (80112d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	08db      	lsrs	r3, r3, #3
 80110c4:	f003 0303 	and.w	r3, r3, #3
 80110c8:	4a83      	ldr	r2, [pc, #524]	; (80112d8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80110ca:	fa22 f303 	lsr.w	r3, r2, r3
 80110ce:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	ee07 3a90 	vmov	s15, r3
 80110d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	ee07 3a90 	vmov	s15, r3
 80110e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80110e8:	4b7a      	ldr	r3, [pc, #488]	; (80112d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110f0:	ee07 3a90 	vmov	s15, r3
 80110f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80110f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80110fc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80112dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801110c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011114:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011118:	e087      	b.n	801122a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	ee07 3a90 	vmov	s15, r3
 8011120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011124:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80112e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801112c:	4b69      	ldr	r3, [pc, #420]	; (80112d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011134:	ee07 3a90 	vmov	s15, r3
 8011138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801113c:	ed97 6a03 	vldr	s12, [r7, #12]
 8011140:	eddf 5a66 	vldr	s11, [pc, #408]	; 80112dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801114c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011158:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801115c:	e065      	b.n	801122a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	ee07 3a90 	vmov	s15, r3
 8011164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011168:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80112e4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801116c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011170:	4b58      	ldr	r3, [pc, #352]	; (80112d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011178:	ee07 3a90 	vmov	s15, r3
 801117c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011180:	ed97 6a03 	vldr	s12, [r7, #12]
 8011184:	eddf 5a55 	vldr	s11, [pc, #340]	; 80112dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011188:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801118c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011190:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011194:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011198:	ee67 7a27 	vmul.f32	s15, s14, s15
 801119c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80111a0:	e043      	b.n	801122a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	ee07 3a90 	vmov	s15, r3
 80111a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111ac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80112e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80111b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80111b4:	4b47      	ldr	r3, [pc, #284]	; (80112d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80111b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111bc:	ee07 3a90 	vmov	s15, r3
 80111c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80111c8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80112dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80111cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80111e4:	e021      	b.n	801122a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	ee07 3a90 	vmov	s15, r3
 80111ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111f0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80112e0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80111f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80111f8:	4b36      	ldr	r3, [pc, #216]	; (80112d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80111fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011200:	ee07 3a90 	vmov	s15, r3
 8011204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011208:	ed97 6a03 	vldr	s12, [r7, #12]
 801120c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80112dc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011210:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011214:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011218:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801121c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011224:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011228:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801122a:	4b2a      	ldr	r3, [pc, #168]	; (80112d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801122e:	0a5b      	lsrs	r3, r3, #9
 8011230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011234:	ee07 3a90 	vmov	s15, r3
 8011238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801123c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011240:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011244:	edd7 6a07 	vldr	s13, [r7, #28]
 8011248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801124c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011250:	ee17 2a90 	vmov	r2, s15
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8011258:	4b1e      	ldr	r3, [pc, #120]	; (80112d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801125c:	0c1b      	lsrs	r3, r3, #16
 801125e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011262:	ee07 3a90 	vmov	s15, r3
 8011266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801126a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801126e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011272:	edd7 6a07 	vldr	s13, [r7, #28]
 8011276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801127a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801127e:	ee17 2a90 	vmov	r2, s15
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8011286:	4b13      	ldr	r3, [pc, #76]	; (80112d4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801128a:	0e1b      	lsrs	r3, r3, #24
 801128c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011290:	ee07 3a90 	vmov	s15, r3
 8011294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011298:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801129c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80112a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112ac:	ee17 2a90 	vmov	r2, s15
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80112b4:	e008      	b.n	80112c8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2200      	movs	r2, #0
 80112ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2200      	movs	r2, #0
 80112c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2200      	movs	r2, #0
 80112c6:	609a      	str	r2, [r3, #8]
}
 80112c8:	bf00      	nop
 80112ca:	3724      	adds	r7, #36	; 0x24
 80112cc:	46bd      	mov	sp, r7
 80112ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d2:	4770      	bx	lr
 80112d4:	58024400 	.word	0x58024400
 80112d8:	03d09000 	.word	0x03d09000
 80112dc:	46000000 	.word	0x46000000
 80112e0:	4c742400 	.word	0x4c742400
 80112e4:	4a742400 	.word	0x4a742400
 80112e8:	4bbebc20 	.word	0x4bbebc20

080112ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80112f6:	2300      	movs	r3, #0
 80112f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80112fa:	4b53      	ldr	r3, [pc, #332]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 80112fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112fe:	f003 0303 	and.w	r3, r3, #3
 8011302:	2b03      	cmp	r3, #3
 8011304:	d101      	bne.n	801130a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011306:	2301      	movs	r3, #1
 8011308:	e099      	b.n	801143e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801130a:	4b4f      	ldr	r3, [pc, #316]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	4a4e      	ldr	r2, [pc, #312]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 8011310:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011316:	f7f4 fc03 	bl	8005b20 <HAL_GetTick>
 801131a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801131c:	e008      	b.n	8011330 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801131e:	f7f4 fbff 	bl	8005b20 <HAL_GetTick>
 8011322:	4602      	mov	r2, r0
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	1ad3      	subs	r3, r2, r3
 8011328:	2b02      	cmp	r3, #2
 801132a:	d901      	bls.n	8011330 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801132c:	2303      	movs	r3, #3
 801132e:	e086      	b.n	801143e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011330:	4b45      	ldr	r3, [pc, #276]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011338:	2b00      	cmp	r3, #0
 801133a:	d1f0      	bne.n	801131e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801133c:	4b42      	ldr	r3, [pc, #264]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 801133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011340:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	031b      	lsls	r3, r3, #12
 801134a:	493f      	ldr	r1, [pc, #252]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 801134c:	4313      	orrs	r3, r2
 801134e:	628b      	str	r3, [r1, #40]	; 0x28
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	685b      	ldr	r3, [r3, #4]
 8011354:	3b01      	subs	r3, #1
 8011356:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	689b      	ldr	r3, [r3, #8]
 801135e:	3b01      	subs	r3, #1
 8011360:	025b      	lsls	r3, r3, #9
 8011362:	b29b      	uxth	r3, r3
 8011364:	431a      	orrs	r2, r3
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	68db      	ldr	r3, [r3, #12]
 801136a:	3b01      	subs	r3, #1
 801136c:	041b      	lsls	r3, r3, #16
 801136e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011372:	431a      	orrs	r2, r3
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	691b      	ldr	r3, [r3, #16]
 8011378:	3b01      	subs	r3, #1
 801137a:	061b      	lsls	r3, r3, #24
 801137c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011380:	4931      	ldr	r1, [pc, #196]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 8011382:	4313      	orrs	r3, r2
 8011384:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8011386:	4b30      	ldr	r3, [pc, #192]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 8011388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801138a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	695b      	ldr	r3, [r3, #20]
 8011392:	492d      	ldr	r1, [pc, #180]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 8011394:	4313      	orrs	r3, r2
 8011396:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011398:	4b2b      	ldr	r3, [pc, #172]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 801139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801139c:	f023 0220 	bic.w	r2, r3, #32
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	699b      	ldr	r3, [r3, #24]
 80113a4:	4928      	ldr	r1, [pc, #160]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 80113a6:	4313      	orrs	r3, r2
 80113a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80113aa:	4b27      	ldr	r3, [pc, #156]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 80113ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113ae:	4a26      	ldr	r2, [pc, #152]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 80113b0:	f023 0310 	bic.w	r3, r3, #16
 80113b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80113b6:	4b24      	ldr	r3, [pc, #144]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 80113b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80113ba:	4b24      	ldr	r3, [pc, #144]	; (801144c <RCCEx_PLL2_Config+0x160>)
 80113bc:	4013      	ands	r3, r2
 80113be:	687a      	ldr	r2, [r7, #4]
 80113c0:	69d2      	ldr	r2, [r2, #28]
 80113c2:	00d2      	lsls	r2, r2, #3
 80113c4:	4920      	ldr	r1, [pc, #128]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 80113c6:	4313      	orrs	r3, r2
 80113c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80113ca:	4b1f      	ldr	r3, [pc, #124]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 80113cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113ce:	4a1e      	ldr	r2, [pc, #120]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 80113d0:	f043 0310 	orr.w	r3, r3, #16
 80113d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d106      	bne.n	80113ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80113dc:	4b1a      	ldr	r3, [pc, #104]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 80113de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113e0:	4a19      	ldr	r2, [pc, #100]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 80113e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80113e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80113e8:	e00f      	b.n	801140a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	d106      	bne.n	80113fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80113f0:	4b15      	ldr	r3, [pc, #84]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 80113f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f4:	4a14      	ldr	r2, [pc, #80]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 80113f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80113fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80113fc:	e005      	b.n	801140a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80113fe:	4b12      	ldr	r3, [pc, #72]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 8011400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011402:	4a11      	ldr	r2, [pc, #68]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 8011404:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011408:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801140a:	4b0f      	ldr	r3, [pc, #60]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	4a0e      	ldr	r2, [pc, #56]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 8011410:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011416:	f7f4 fb83 	bl	8005b20 <HAL_GetTick>
 801141a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801141c:	e008      	b.n	8011430 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801141e:	f7f4 fb7f 	bl	8005b20 <HAL_GetTick>
 8011422:	4602      	mov	r2, r0
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	1ad3      	subs	r3, r2, r3
 8011428:	2b02      	cmp	r3, #2
 801142a:	d901      	bls.n	8011430 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801142c:	2303      	movs	r3, #3
 801142e:	e006      	b.n	801143e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011430:	4b05      	ldr	r3, [pc, #20]	; (8011448 <RCCEx_PLL2_Config+0x15c>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011438:	2b00      	cmp	r3, #0
 801143a:	d0f0      	beq.n	801141e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801143c:	7bfb      	ldrb	r3, [r7, #15]
}
 801143e:	4618      	mov	r0, r3
 8011440:	3710      	adds	r7, #16
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}
 8011446:	bf00      	nop
 8011448:	58024400 	.word	0x58024400
 801144c:	ffff0007 	.word	0xffff0007

08011450 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801145a:	2300      	movs	r3, #0
 801145c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801145e:	4b53      	ldr	r3, [pc, #332]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011462:	f003 0303 	and.w	r3, r3, #3
 8011466:	2b03      	cmp	r3, #3
 8011468:	d101      	bne.n	801146e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801146a:	2301      	movs	r3, #1
 801146c:	e099      	b.n	80115a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801146e:	4b4f      	ldr	r3, [pc, #316]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	4a4e      	ldr	r2, [pc, #312]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011478:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801147a:	f7f4 fb51 	bl	8005b20 <HAL_GetTick>
 801147e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011480:	e008      	b.n	8011494 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011482:	f7f4 fb4d 	bl	8005b20 <HAL_GetTick>
 8011486:	4602      	mov	r2, r0
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	1ad3      	subs	r3, r2, r3
 801148c:	2b02      	cmp	r3, #2
 801148e:	d901      	bls.n	8011494 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011490:	2303      	movs	r3, #3
 8011492:	e086      	b.n	80115a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011494:	4b45      	ldr	r3, [pc, #276]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801149c:	2b00      	cmp	r3, #0
 801149e:	d1f0      	bne.n	8011482 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80114a0:	4b42      	ldr	r3, [pc, #264]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 80114a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	051b      	lsls	r3, r3, #20
 80114ae:	493f      	ldr	r1, [pc, #252]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 80114b0:	4313      	orrs	r3, r2
 80114b2:	628b      	str	r3, [r1, #40]	; 0x28
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	3b01      	subs	r3, #1
 80114ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	689b      	ldr	r3, [r3, #8]
 80114c2:	3b01      	subs	r3, #1
 80114c4:	025b      	lsls	r3, r3, #9
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	431a      	orrs	r2, r3
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	3b01      	subs	r3, #1
 80114d0:	041b      	lsls	r3, r3, #16
 80114d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80114d6:	431a      	orrs	r2, r3
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	691b      	ldr	r3, [r3, #16]
 80114dc:	3b01      	subs	r3, #1
 80114de:	061b      	lsls	r3, r3, #24
 80114e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80114e4:	4931      	ldr	r1, [pc, #196]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 80114e6:	4313      	orrs	r3, r2
 80114e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80114ea:	4b30      	ldr	r3, [pc, #192]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 80114ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	695b      	ldr	r3, [r3, #20]
 80114f6:	492d      	ldr	r1, [pc, #180]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 80114f8:	4313      	orrs	r3, r2
 80114fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80114fc:	4b2b      	ldr	r3, [pc, #172]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 80114fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011500:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	699b      	ldr	r3, [r3, #24]
 8011508:	4928      	ldr	r1, [pc, #160]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 801150a:	4313      	orrs	r3, r2
 801150c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801150e:	4b27      	ldr	r3, [pc, #156]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011512:	4a26      	ldr	r2, [pc, #152]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011518:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801151a:	4b24      	ldr	r3, [pc, #144]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 801151c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801151e:	4b24      	ldr	r3, [pc, #144]	; (80115b0 <RCCEx_PLL3_Config+0x160>)
 8011520:	4013      	ands	r3, r2
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	69d2      	ldr	r2, [r2, #28]
 8011526:	00d2      	lsls	r2, r2, #3
 8011528:	4920      	ldr	r1, [pc, #128]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 801152a:	4313      	orrs	r3, r2
 801152c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801152e:	4b1f      	ldr	r3, [pc, #124]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011532:	4a1e      	ldr	r2, [pc, #120]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011538:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801153a:	683b      	ldr	r3, [r7, #0]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d106      	bne.n	801154e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011540:	4b1a      	ldr	r3, [pc, #104]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011544:	4a19      	ldr	r2, [pc, #100]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011546:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801154a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801154c:	e00f      	b.n	801156e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	2b01      	cmp	r3, #1
 8011552:	d106      	bne.n	8011562 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8011554:	4b15      	ldr	r3, [pc, #84]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011558:	4a14      	ldr	r2, [pc, #80]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 801155a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801155e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011560:	e005      	b.n	801156e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8011562:	4b12      	ldr	r3, [pc, #72]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011566:	4a11      	ldr	r2, [pc, #68]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801156c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801156e:	4b0f      	ldr	r3, [pc, #60]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	4a0e      	ldr	r2, [pc, #56]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801157a:	f7f4 fad1 	bl	8005b20 <HAL_GetTick>
 801157e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011580:	e008      	b.n	8011594 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8011582:	f7f4 facd 	bl	8005b20 <HAL_GetTick>
 8011586:	4602      	mov	r2, r0
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	1ad3      	subs	r3, r2, r3
 801158c:	2b02      	cmp	r3, #2
 801158e:	d901      	bls.n	8011594 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011590:	2303      	movs	r3, #3
 8011592:	e006      	b.n	80115a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011594:	4b05      	ldr	r3, [pc, #20]	; (80115ac <RCCEx_PLL3_Config+0x15c>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801159c:	2b00      	cmp	r3, #0
 801159e:	d0f0      	beq.n	8011582 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80115a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3710      	adds	r7, #16
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}
 80115aa:	bf00      	nop
 80115ac:	58024400 	.word	0x58024400
 80115b0:	ffff0007 	.word	0xffff0007

080115b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b084      	sub	sp, #16
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80115bc:	2301      	movs	r3, #1
 80115be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d071      	beq.n	80116aa <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80115cc:	b2db      	uxtb	r3, r3
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d106      	bne.n	80115e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2200      	movs	r2, #0
 80115d6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f7f2 fc36 	bl	8003e4c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	2202      	movs	r2, #2
 80115e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	68db      	ldr	r3, [r3, #12]
 80115ee:	f003 0310 	and.w	r3, r3, #16
 80115f2:	2b10      	cmp	r3, #16
 80115f4:	d050      	beq.n	8011698 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	22ca      	movs	r2, #202	; 0xca
 80115fc:	625a      	str	r2, [r3, #36]	; 0x24
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	2253      	movs	r2, #83	; 0x53
 8011604:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f000 fa4a 	bl	8011aa0 <RTC_EnterInitMode>
 801160c:	4603      	mov	r3, r0
 801160e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8011610:	7bfb      	ldrb	r3, [r7, #15]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d124      	bne.n	8011660 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	6899      	ldr	r1, [r3, #8]
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681a      	ldr	r2, [r3, #0]
 8011620:	4b24      	ldr	r3, [pc, #144]	; (80116b4 <HAL_RTC_Init+0x100>)
 8011622:	400b      	ands	r3, r1
 8011624:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	6899      	ldr	r1, [r3, #8]
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	685a      	ldr	r2, [r3, #4]
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	691b      	ldr	r3, [r3, #16]
 8011634:	431a      	orrs	r2, r3
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	699b      	ldr	r3, [r3, #24]
 801163a:	431a      	orrs	r2, r3
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	430a      	orrs	r2, r1
 8011642:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	689b      	ldr	r3, [r3, #8]
 8011648:	0419      	lsls	r1, r3, #16
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	68da      	ldr	r2, [r3, #12]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	430a      	orrs	r2, r1
 8011654:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f000 fa56 	bl	8011b08 <RTC_ExitInitMode>
 801165c:	4603      	mov	r3, r0
 801165e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8011660:	7bfb      	ldrb	r3, [r7, #15]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d113      	bne.n	801168e <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	f022 0203 	bic.w	r2, r2, #3
 8011674:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	69da      	ldr	r2, [r3, #28]
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	695b      	ldr	r3, [r3, #20]
 8011684:	431a      	orrs	r2, r3
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	430a      	orrs	r2, r1
 801168c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	22ff      	movs	r2, #255	; 0xff
 8011694:	625a      	str	r2, [r3, #36]	; 0x24
 8011696:	e001      	b.n	801169c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8011698:	2300      	movs	r3, #0
 801169a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 801169c:	7bfb      	ldrb	r3, [r7, #15]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d103      	bne.n	80116aa <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2201      	movs	r2, #1
 80116a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80116aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80116ac:	4618      	mov	r0, r3
 80116ae:	3710      	adds	r7, #16
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}
 80116b4:	ff8fffbf 	.word	0xff8fffbf

080116b8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80116b8:	b590      	push	{r4, r7, lr}
 80116ba:	b087      	sub	sp, #28
 80116bc:	af00      	add	r7, sp, #0
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	60b9      	str	r1, [r7, #8]
 80116c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80116ca:	2b01      	cmp	r3, #1
 80116cc:	d101      	bne.n	80116d2 <HAL_RTC_SetTime+0x1a>
 80116ce:	2302      	movs	r3, #2
 80116d0:	e089      	b.n	80117e6 <HAL_RTC_SetTime+0x12e>
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	2201      	movs	r2, #1
 80116d6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	2202      	movs	r2, #2
 80116de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	22ca      	movs	r2, #202	; 0xca
 80116e8:	625a      	str	r2, [r3, #36]	; 0x24
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	2253      	movs	r2, #83	; 0x53
 80116f0:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80116f2:	68f8      	ldr	r0, [r7, #12]
 80116f4:	f000 f9d4 	bl	8011aa0 <RTC_EnterInitMode>
 80116f8:	4603      	mov	r3, r0
 80116fa:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80116fc:	7cfb      	ldrb	r3, [r7, #19]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d161      	bne.n	80117c6 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d126      	bne.n	8011756 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	689b      	ldr	r3, [r3, #8]
 801170e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011712:	2b00      	cmp	r3, #0
 8011714:	d102      	bne.n	801171c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011716:	68bb      	ldr	r3, [r7, #8]
 8011718:	2200      	movs	r2, #0
 801171a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	781b      	ldrb	r3, [r3, #0]
 8011720:	4618      	mov	r0, r3
 8011722:	f000 fa2f 	bl	8011b84 <RTC_ByteToBcd2>
 8011726:	4603      	mov	r3, r0
 8011728:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	785b      	ldrb	r3, [r3, #1]
 801172e:	4618      	mov	r0, r3
 8011730:	f000 fa28 	bl	8011b84 <RTC_ByteToBcd2>
 8011734:	4603      	mov	r3, r0
 8011736:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011738:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	789b      	ldrb	r3, [r3, #2]
 801173e:	4618      	mov	r0, r3
 8011740:	f000 fa20 	bl	8011b84 <RTC_ByteToBcd2>
 8011744:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011746:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	78db      	ldrb	r3, [r3, #3]
 801174e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011750:	4313      	orrs	r3, r2
 8011752:	617b      	str	r3, [r7, #20]
 8011754:	e018      	b.n	8011788 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	689b      	ldr	r3, [r3, #8]
 801175c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011760:	2b00      	cmp	r3, #0
 8011762:	d102      	bne.n	801176a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	2200      	movs	r2, #0
 8011768:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	781b      	ldrb	r3, [r3, #0]
 801176e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	785b      	ldrb	r3, [r3, #1]
 8011774:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011776:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8011778:	68ba      	ldr	r2, [r7, #8]
 801177a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 801177c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	78db      	ldrb	r3, [r3, #3]
 8011782:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8011784:	4313      	orrs	r3, r2
 8011786:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	681a      	ldr	r2, [r3, #0]
 801178c:	6979      	ldr	r1, [r7, #20]
 801178e:	4b18      	ldr	r3, [pc, #96]	; (80117f0 <HAL_RTC_SetTime+0x138>)
 8011790:	400b      	ands	r3, r1
 8011792:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	689a      	ldr	r2, [r3, #8]
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80117a2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	6899      	ldr	r1, [r3, #8]
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	68da      	ldr	r2, [r3, #12]
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	691b      	ldr	r3, [r3, #16]
 80117b2:	431a      	orrs	r2, r3
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	430a      	orrs	r2, r1
 80117ba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80117bc:	68f8      	ldr	r0, [r7, #12]
 80117be:	f000 f9a3 	bl	8011b08 <RTC_ExitInitMode>
 80117c2:	4603      	mov	r3, r0
 80117c4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	22ff      	movs	r2, #255	; 0xff
 80117cc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80117ce:	7cfb      	ldrb	r3, [r7, #19]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d103      	bne.n	80117dc <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2201      	movs	r2, #1
 80117d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2200      	movs	r2, #0
 80117e0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80117e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	371c      	adds	r7, #28
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd90      	pop	{r4, r7, pc}
 80117ee:	bf00      	nop
 80117f0:	007f7f7f 	.word	0x007f7f7f

080117f4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b086      	sub	sp, #24
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	60f8      	str	r0, [r7, #12]
 80117fc:	60b9      	str	r1, [r7, #8]
 80117fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	691b      	ldr	r3, [r3, #16]
 8011810:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	681a      	ldr	r2, [r3, #0]
 801181e:	4b22      	ldr	r3, [pc, #136]	; (80118a8 <HAL_RTC_GetTime+0xb4>)
 8011820:	4013      	ands	r3, r2
 8011822:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	0c1b      	lsrs	r3, r3, #16
 8011828:	b2db      	uxtb	r3, r3
 801182a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801182e:	b2da      	uxtb	r2, r3
 8011830:	68bb      	ldr	r3, [r7, #8]
 8011832:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	0a1b      	lsrs	r3, r3, #8
 8011838:	b2db      	uxtb	r3, r3
 801183a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801183e:	b2da      	uxtb	r2, r3
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	b2db      	uxtb	r3, r3
 8011848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801184c:	b2da      	uxtb	r2, r3
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	0d9b      	lsrs	r3, r3, #22
 8011856:	b2db      	uxtb	r3, r3
 8011858:	f003 0301 	and.w	r3, r3, #1
 801185c:	b2da      	uxtb	r2, r3
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d11a      	bne.n	801189e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	4618      	mov	r0, r3
 801186e:	f000 f9a9 	bl	8011bc4 <RTC_Bcd2ToByte>
 8011872:	4603      	mov	r3, r0
 8011874:	461a      	mov	r2, r3
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	785b      	ldrb	r3, [r3, #1]
 801187e:	4618      	mov	r0, r3
 8011880:	f000 f9a0 	bl	8011bc4 <RTC_Bcd2ToByte>
 8011884:	4603      	mov	r3, r0
 8011886:	461a      	mov	r2, r3
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	789b      	ldrb	r3, [r3, #2]
 8011890:	4618      	mov	r0, r3
 8011892:	f000 f997 	bl	8011bc4 <RTC_Bcd2ToByte>
 8011896:	4603      	mov	r3, r0
 8011898:	461a      	mov	r2, r3
 801189a:	68bb      	ldr	r3, [r7, #8]
 801189c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 801189e:	2300      	movs	r3, #0
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	3718      	adds	r7, #24
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}
 80118a8:	007f7f7f 	.word	0x007f7f7f

080118ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80118ac:	b590      	push	{r4, r7, lr}
 80118ae:	b087      	sub	sp, #28
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80118be:	2b01      	cmp	r3, #1
 80118c0:	d101      	bne.n	80118c6 <HAL_RTC_SetDate+0x1a>
 80118c2:	2302      	movs	r3, #2
 80118c4:	e073      	b.n	80119ae <HAL_RTC_SetDate+0x102>
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	2201      	movs	r2, #1
 80118ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	2202      	movs	r2, #2
 80118d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d10e      	bne.n	80118fa <HAL_RTC_SetDate+0x4e>
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	785b      	ldrb	r3, [r3, #1]
 80118e0:	f003 0310 	and.w	r3, r3, #16
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d008      	beq.n	80118fa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80118e8:	68bb      	ldr	r3, [r7, #8]
 80118ea:	785b      	ldrb	r3, [r3, #1]
 80118ec:	f023 0310 	bic.w	r3, r3, #16
 80118f0:	b2db      	uxtb	r3, r3
 80118f2:	330a      	adds	r3, #10
 80118f4:	b2da      	uxtb	r2, r3
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d11c      	bne.n	801193a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	78db      	ldrb	r3, [r3, #3]
 8011904:	4618      	mov	r0, r3
 8011906:	f000 f93d 	bl	8011b84 <RTC_ByteToBcd2>
 801190a:	4603      	mov	r3, r0
 801190c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	785b      	ldrb	r3, [r3, #1]
 8011912:	4618      	mov	r0, r3
 8011914:	f000 f936 	bl	8011b84 <RTC_ByteToBcd2>
 8011918:	4603      	mov	r3, r0
 801191a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801191c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	789b      	ldrb	r3, [r3, #2]
 8011922:	4618      	mov	r0, r3
 8011924:	f000 f92e 	bl	8011b84 <RTC_ByteToBcd2>
 8011928:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801192a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	781b      	ldrb	r3, [r3, #0]
 8011932:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8011934:	4313      	orrs	r3, r2
 8011936:	617b      	str	r3, [r7, #20]
 8011938:	e00e      	b.n	8011958 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	78db      	ldrb	r3, [r3, #3]
 801193e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	785b      	ldrb	r3, [r3, #1]
 8011944:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011946:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8011948:	68ba      	ldr	r2, [r7, #8]
 801194a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801194c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8011954:	4313      	orrs	r3, r2
 8011956:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	22ca      	movs	r2, #202	; 0xca
 801195e:	625a      	str	r2, [r3, #36]	; 0x24
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	2253      	movs	r2, #83	; 0x53
 8011966:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8011968:	68f8      	ldr	r0, [r7, #12]
 801196a:	f000 f899 	bl	8011aa0 <RTC_EnterInitMode>
 801196e:	4603      	mov	r3, r0
 8011970:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8011972:	7cfb      	ldrb	r3, [r7, #19]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d10a      	bne.n	801198e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	681a      	ldr	r2, [r3, #0]
 801197c:	6979      	ldr	r1, [r7, #20]
 801197e:	4b0e      	ldr	r3, [pc, #56]	; (80119b8 <HAL_RTC_SetDate+0x10c>)
 8011980:	400b      	ands	r3, r1
 8011982:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8011984:	68f8      	ldr	r0, [r7, #12]
 8011986:	f000 f8bf 	bl	8011b08 <RTC_ExitInitMode>
 801198a:	4603      	mov	r3, r0
 801198c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	22ff      	movs	r2, #255	; 0xff
 8011994:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8011996:	7cfb      	ldrb	r3, [r7, #19]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d103      	bne.n	80119a4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	2201      	movs	r2, #1
 80119a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2200      	movs	r2, #0
 80119a8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80119ac:	7cfb      	ldrb	r3, [r7, #19]


}
 80119ae:	4618      	mov	r0, r3
 80119b0:	371c      	adds	r7, #28
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd90      	pop	{r4, r7, pc}
 80119b6:	bf00      	nop
 80119b8:	00ffff3f 	.word	0x00ffff3f

080119bc <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b086      	sub	sp, #24
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	60f8      	str	r0, [r7, #12]
 80119c4:	60b9      	str	r1, [r7, #8]
 80119c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	685a      	ldr	r2, [r3, #4]
 80119ce:	4b21      	ldr	r3, [pc, #132]	; (8011a54 <HAL_RTC_GetDate+0x98>)
 80119d0:	4013      	ands	r3, r2
 80119d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80119d4:	697b      	ldr	r3, [r7, #20]
 80119d6:	0c1b      	lsrs	r3, r3, #16
 80119d8:	b2da      	uxtb	r2, r3
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80119de:	697b      	ldr	r3, [r7, #20]
 80119e0:	0a1b      	lsrs	r3, r3, #8
 80119e2:	b2db      	uxtb	r3, r3
 80119e4:	f003 031f 	and.w	r3, r3, #31
 80119e8:	b2da      	uxtb	r2, r3
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80119f6:	b2da      	uxtb	r2, r3
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	0b5b      	lsrs	r3, r3, #13
 8011a00:	b2db      	uxtb	r3, r3
 8011a02:	f003 0307 	and.w	r3, r3, #7
 8011a06:	b2da      	uxtb	r2, r3
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d11a      	bne.n	8011a48 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	78db      	ldrb	r3, [r3, #3]
 8011a16:	4618      	mov	r0, r3
 8011a18:	f000 f8d4 	bl	8011bc4 <RTC_Bcd2ToByte>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	461a      	mov	r2, r3
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	785b      	ldrb	r3, [r3, #1]
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f000 f8cb 	bl	8011bc4 <RTC_Bcd2ToByte>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	461a      	mov	r2, r3
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	789b      	ldrb	r3, [r3, #2]
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f000 f8c2 	bl	8011bc4 <RTC_Bcd2ToByte>
 8011a40:	4603      	mov	r3, r0
 8011a42:	461a      	mov	r2, r3
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8011a48:	2300      	movs	r3, #0
}
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	3718      	adds	r7, #24
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}
 8011a52:	bf00      	nop
 8011a54:	00ffff3f 	.word	0x00ffff3f

08011a58 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b084      	sub	sp, #16
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	4a0d      	ldr	r2, [pc, #52]	; (8011a9c <HAL_RTC_WaitForSynchro+0x44>)
 8011a66:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8011a68:	f7f4 f85a 	bl	8005b20 <HAL_GetTick>
 8011a6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011a6e:	e009      	b.n	8011a84 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011a70:	f7f4 f856 	bl	8005b20 <HAL_GetTick>
 8011a74:	4602      	mov	r2, r0
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	1ad3      	subs	r3, r2, r3
 8011a7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011a7e:	d901      	bls.n	8011a84 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8011a80:	2303      	movs	r3, #3
 8011a82:	e007      	b.n	8011a94 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	68db      	ldr	r3, [r3, #12]
 8011a8a:	f003 0320 	and.w	r3, r3, #32
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d0ee      	beq.n	8011a70 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8011a92:	2300      	movs	r3, #0
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	3710      	adds	r7, #16
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd80      	pop	{r7, pc}
 8011a9c:	0003ff5f 	.word	0x0003ff5f

08011aa0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b084      	sub	sp, #16
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	68db      	ldr	r3, [r3, #12]
 8011ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d120      	bne.n	8011afc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011ac2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8011ac4:	f7f4 f82c 	bl	8005b20 <HAL_GetTick>
 8011ac8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011aca:	e00d      	b.n	8011ae8 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8011acc:	f7f4 f828 	bl	8005b20 <HAL_GetTick>
 8011ad0:	4602      	mov	r2, r0
 8011ad2:	68bb      	ldr	r3, [r7, #8]
 8011ad4:	1ad3      	subs	r3, r2, r3
 8011ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011ada:	d905      	bls.n	8011ae8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8011adc:	2303      	movs	r3, #3
 8011ade:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2203      	movs	r2, #3
 8011ae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	68db      	ldr	r3, [r3, #12]
 8011aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d102      	bne.n	8011afc <RTC_EnterInitMode+0x5c>
 8011af6:	7bfb      	ldrb	r3, [r7, #15]
 8011af8:	2b03      	cmp	r3, #3
 8011afa:	d1e7      	bne.n	8011acc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8011afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3710      	adds	r7, #16
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
	...

08011b08 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b084      	sub	sp, #16
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011b10:	2300      	movs	r3, #0
 8011b12:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8011b14:	4b1a      	ldr	r3, [pc, #104]	; (8011b80 <RTC_ExitInitMode+0x78>)
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	4a19      	ldr	r2, [pc, #100]	; (8011b80 <RTC_ExitInitMode+0x78>)
 8011b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b1e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8011b20:	4b17      	ldr	r3, [pc, #92]	; (8011b80 <RTC_ExitInitMode+0x78>)
 8011b22:	689b      	ldr	r3, [r3, #8]
 8011b24:	f003 0320 	and.w	r3, r3, #32
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d10c      	bne.n	8011b46 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f7ff ff93 	bl	8011a58 <HAL_RTC_WaitForSynchro>
 8011b32:	4603      	mov	r3, r0
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d01e      	beq.n	8011b76 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2203      	movs	r2, #3
 8011b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011b40:	2303      	movs	r3, #3
 8011b42:	73fb      	strb	r3, [r7, #15]
 8011b44:	e017      	b.n	8011b76 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011b46:	4b0e      	ldr	r3, [pc, #56]	; (8011b80 <RTC_ExitInitMode+0x78>)
 8011b48:	689b      	ldr	r3, [r3, #8]
 8011b4a:	4a0d      	ldr	r2, [pc, #52]	; (8011b80 <RTC_ExitInitMode+0x78>)
 8011b4c:	f023 0320 	bic.w	r3, r3, #32
 8011b50:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f7ff ff80 	bl	8011a58 <HAL_RTC_WaitForSynchro>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d005      	beq.n	8011b6a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2203      	movs	r2, #3
 8011b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8011b66:	2303      	movs	r3, #3
 8011b68:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8011b6a:	4b05      	ldr	r3, [pc, #20]	; (8011b80 <RTC_ExitInitMode+0x78>)
 8011b6c:	689b      	ldr	r3, [r3, #8]
 8011b6e:	4a04      	ldr	r2, [pc, #16]	; (8011b80 <RTC_ExitInitMode+0x78>)
 8011b70:	f043 0320 	orr.w	r3, r3, #32
 8011b74:	6093      	str	r3, [r2, #8]
  }

  return status;
 8011b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3710      	adds	r7, #16
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}
 8011b80:	58004000 	.word	0x58004000

08011b84 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011b84:	b480      	push	{r7}
 8011b86:	b085      	sub	sp, #20
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8011b92:	79fb      	ldrb	r3, [r7, #7]
 8011b94:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8011b96:	e005      	b.n	8011ba4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	3301      	adds	r3, #1
 8011b9c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8011b9e:	7afb      	ldrb	r3, [r7, #11]
 8011ba0:	3b0a      	subs	r3, #10
 8011ba2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8011ba4:	7afb      	ldrb	r3, [r7, #11]
 8011ba6:	2b09      	cmp	r3, #9
 8011ba8:	d8f6      	bhi.n	8011b98 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	b2db      	uxtb	r3, r3
 8011bae:	011b      	lsls	r3, r3, #4
 8011bb0:	b2da      	uxtb	r2, r3
 8011bb2:	7afb      	ldrb	r3, [r7, #11]
 8011bb4:	4313      	orrs	r3, r2
 8011bb6:	b2db      	uxtb	r3, r3
}
 8011bb8:	4618      	mov	r0, r3
 8011bba:	3714      	adds	r7, #20
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc2:	4770      	bx	lr

08011bc4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011bc4:	b480      	push	{r7}
 8011bc6:	b085      	sub	sp, #20
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	4603      	mov	r3, r0
 8011bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8011bce:	79fb      	ldrb	r3, [r7, #7]
 8011bd0:	091b      	lsrs	r3, r3, #4
 8011bd2:	b2db      	uxtb	r3, r3
 8011bd4:	461a      	mov	r2, r3
 8011bd6:	0092      	lsls	r2, r2, #2
 8011bd8:	4413      	add	r3, r2
 8011bda:	005b      	lsls	r3, r3, #1
 8011bdc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8011bde:	79fb      	ldrb	r3, [r7, #7]
 8011be0:	f003 030f 	and.w	r3, r3, #15
 8011be4:	b2da      	uxtb	r2, r3
 8011be6:	7bfb      	ldrb	r3, [r7, #15]
 8011be8:	4413      	add	r3, r2
 8011bea:	b2db      	uxtb	r3, r3
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3714      	adds	r7, #20
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf6:	4770      	bx	lr

08011bf8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d101      	bne.n	8011c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011c06:	2301      	movs	r3, #1
 8011c08:	e10f      	b.n	8011e2a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	4a87      	ldr	r2, [pc, #540]	; (8011e34 <HAL_SPI_Init+0x23c>)
 8011c16:	4293      	cmp	r3, r2
 8011c18:	d00f      	beq.n	8011c3a <HAL_SPI_Init+0x42>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	4a86      	ldr	r2, [pc, #536]	; (8011e38 <HAL_SPI_Init+0x240>)
 8011c20:	4293      	cmp	r3, r2
 8011c22:	d00a      	beq.n	8011c3a <HAL_SPI_Init+0x42>
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	4a84      	ldr	r2, [pc, #528]	; (8011e3c <HAL_SPI_Init+0x244>)
 8011c2a:	4293      	cmp	r3, r2
 8011c2c:	d005      	beq.n	8011c3a <HAL_SPI_Init+0x42>
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	68db      	ldr	r3, [r3, #12]
 8011c32:	2b0f      	cmp	r3, #15
 8011c34:	d901      	bls.n	8011c3a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011c36:	2301      	movs	r3, #1
 8011c38:	e0f7      	b.n	8011e2a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f000 fd60 	bl	8012700 <SPI_GetPacketSize>
 8011c40:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	4a7b      	ldr	r2, [pc, #492]	; (8011e34 <HAL_SPI_Init+0x23c>)
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	d00c      	beq.n	8011c66 <HAL_SPI_Init+0x6e>
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	4a79      	ldr	r2, [pc, #484]	; (8011e38 <HAL_SPI_Init+0x240>)
 8011c52:	4293      	cmp	r3, r2
 8011c54:	d007      	beq.n	8011c66 <HAL_SPI_Init+0x6e>
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	4a78      	ldr	r2, [pc, #480]	; (8011e3c <HAL_SPI_Init+0x244>)
 8011c5c:	4293      	cmp	r3, r2
 8011c5e:	d002      	beq.n	8011c66 <HAL_SPI_Init+0x6e>
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	2b08      	cmp	r3, #8
 8011c64:	d811      	bhi.n	8011c8a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011c6a:	4a72      	ldr	r2, [pc, #456]	; (8011e34 <HAL_SPI_Init+0x23c>)
 8011c6c:	4293      	cmp	r3, r2
 8011c6e:	d009      	beq.n	8011c84 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	4a70      	ldr	r2, [pc, #448]	; (8011e38 <HAL_SPI_Init+0x240>)
 8011c76:	4293      	cmp	r3, r2
 8011c78:	d004      	beq.n	8011c84 <HAL_SPI_Init+0x8c>
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	4a6f      	ldr	r2, [pc, #444]	; (8011e3c <HAL_SPI_Init+0x244>)
 8011c80:	4293      	cmp	r3, r2
 8011c82:	d104      	bne.n	8011c8e <HAL_SPI_Init+0x96>
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	2b10      	cmp	r3, #16
 8011c88:	d901      	bls.n	8011c8e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	e0cd      	b.n	8011e2a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011c94:	b2db      	uxtb	r3, r3
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d106      	bne.n	8011ca8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2200      	movs	r2, #0
 8011c9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f7f2 fb56 	bl	8004354 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2202      	movs	r2, #2
 8011cac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	681a      	ldr	r2, [r3, #0]
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	f022 0201 	bic.w	r2, r2, #1
 8011cbe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	689b      	ldr	r3, [r3, #8]
 8011cc6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011cca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	699b      	ldr	r3, [r3, #24]
 8011cd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011cd4:	d119      	bne.n	8011d0a <HAL_SPI_Init+0x112>
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	685b      	ldr	r3, [r3, #4]
 8011cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011cde:	d103      	bne.n	8011ce8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d008      	beq.n	8011cfa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d10c      	bne.n	8011d0a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011cf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011cf8:	d107      	bne.n	8011d0a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011d08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	685b      	ldr	r3, [r3, #4]
 8011d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d00f      	beq.n	8011d36 <HAL_SPI_Init+0x13e>
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	68db      	ldr	r3, [r3, #12]
 8011d1a:	2b06      	cmp	r3, #6
 8011d1c:	d90b      	bls.n	8011d36 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	430a      	orrs	r2, r1
 8011d32:	601a      	str	r2, [r3, #0]
 8011d34:	e007      	b.n	8011d46 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	681a      	ldr	r2, [r3, #0]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011d44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	69da      	ldr	r2, [r3, #28]
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d4e:	431a      	orrs	r2, r3
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	431a      	orrs	r2, r3
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d58:	ea42 0103 	orr.w	r1, r2, r3
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	68da      	ldr	r2, [r3, #12]
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	430a      	orrs	r2, r1
 8011d66:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d70:	431a      	orrs	r2, r3
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d76:	431a      	orrs	r2, r3
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	699b      	ldr	r3, [r3, #24]
 8011d7c:	431a      	orrs	r2, r3
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	691b      	ldr	r3, [r3, #16]
 8011d82:	431a      	orrs	r2, r3
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	695b      	ldr	r3, [r3, #20]
 8011d88:	431a      	orrs	r2, r3
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6a1b      	ldr	r3, [r3, #32]
 8011d8e:	431a      	orrs	r2, r3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	685b      	ldr	r3, [r3, #4]
 8011d94:	431a      	orrs	r2, r3
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d9a:	431a      	orrs	r2, r3
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	689b      	ldr	r3, [r3, #8]
 8011da0:	431a      	orrs	r2, r3
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011da6:	ea42 0103 	orr.w	r1, r2, r3
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	430a      	orrs	r2, r1
 8011db4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	685b      	ldr	r3, [r3, #4]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d113      	bne.n	8011de6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	689b      	ldr	r3, [r3, #8]
 8011dc4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011dd0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	689b      	ldr	r3, [r3, #8]
 8011dd8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011de4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	f022 0201 	bic.w	r2, r2, #1
 8011df4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	685b      	ldr	r3, [r3, #4]
 8011dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d00a      	beq.n	8011e18 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	68db      	ldr	r3, [r3, #12]
 8011e08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	430a      	orrs	r2, r1
 8011e16:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2201      	movs	r2, #1
 8011e24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011e28:	2300      	movs	r3, #0
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3710      	adds	r7, #16
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	40013000 	.word	0x40013000
 8011e38:	40003800 	.word	0x40003800
 8011e3c:	40003c00 	.word	0x40003c00

08011e40 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b084      	sub	sp, #16
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	60f8      	str	r0, [r7, #12]
 8011e48:	60b9      	str	r1, [r7, #8]
 8011e4a:	4613      	mov	r3, r2
 8011e4c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	d005      	beq.n	8011e66 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 8011e62:	2302      	movs	r3, #2
 8011e64:	e127      	b.n	80120b6 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d002      	beq.n	8011e72 <HAL_SPI_Receive_DMA+0x32>
 8011e6c:	88fb      	ldrh	r3, [r7, #6]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d105      	bne.n	8011e7e <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	2200      	movs	r2, #0
 8011e76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	e11b      	b.n	80120b6 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011e84:	2b01      	cmp	r3, #1
 8011e86:	d101      	bne.n	8011e8c <HAL_SPI_Receive_DMA+0x4c>
 8011e88:	2302      	movs	r3, #2
 8011e8a:	e114      	b.n	80120b6 <HAL_SPI_Receive_DMA+0x276>
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	2201      	movs	r2, #1
 8011e90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	2204      	movs	r2, #4
 8011e98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	68ba      	ldr	r2, [r7, #8]
 8011ea8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	88fa      	ldrh	r2, [r7, #6]
 8011eae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	88fa      	ldrh	r2, [r7, #6]
 8011eb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	2200      	movs	r2, #0
 8011eca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2200      	movs	r2, #0
 8011ed2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	689b      	ldr	r3, [r3, #8]
 8011eda:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011ede:	d108      	bne.n	8011ef2 <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	681a      	ldr	r2, [r3, #0]
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011eee:	601a      	str	r2, [r3, #0]
 8011ef0:	e009      	b.n	8011f06 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	68db      	ldr	r3, [r3, #12]
 8011ef8:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8011f04:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	68db      	ldr	r3, [r3, #12]
 8011f0a:	2b0f      	cmp	r3, #15
 8011f0c:	d905      	bls.n	8011f1a <HAL_SPI_Receive_DMA+0xda>
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f12:	699b      	ldr	r3, [r3, #24]
 8011f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f18:	d10f      	bne.n	8011f3a <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011f1e:	2b07      	cmp	r3, #7
 8011f20:	d911      	bls.n	8011f46 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f26:	699b      	ldr	r3, [r3, #24]
 8011f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f2c:	d00b      	beq.n	8011f46 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f32:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f38:	d005      	beq.n	8011f46 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8011f42:	2301      	movs	r3, #1
 8011f44:	e0b7      	b.n	80120b6 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	689a      	ldr	r2, [r3, #8]
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011f54:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	68db      	ldr	r3, [r3, #12]
 8011f5a:	2b07      	cmp	r3, #7
 8011f5c:	d820      	bhi.n	8011fa0 <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f62:	699b      	ldr	r3, [r3, #24]
 8011f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f68:	d109      	bne.n	8011f7e <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	3301      	adds	r3, #1
 8011f74:	105b      	asrs	r3, r3, #1
 8011f76:	b29a      	uxth	r2, r3
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f82:	699b      	ldr	r3, [r3, #24]
 8011f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f88:	d11e      	bne.n	8011fc8 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f90:	b29b      	uxth	r3, r3
 8011f92:	3303      	adds	r3, #3
 8011f94:	109b      	asrs	r3, r3, #2
 8011f96:	b29a      	uxth	r2, r3
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011f9e:	e013      	b.n	8011fc8 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	68db      	ldr	r3, [r3, #12]
 8011fa4:	2b0f      	cmp	r3, #15
 8011fa6:	d80f      	bhi.n	8011fc8 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fac:	699b      	ldr	r3, [r3, #24]
 8011fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011fb2:	d109      	bne.n	8011fc8 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011fba:	b29b      	uxth	r3, r3
 8011fbc:	3301      	adds	r3, #1
 8011fbe:	105b      	asrs	r3, r3, #1
 8011fc0:	b29a      	uxth	r2, r3
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fcc:	4a3c      	ldr	r2, [pc, #240]	; (80120c0 <HAL_SPI_Receive_DMA+0x280>)
 8011fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fd4:	4a3b      	ldr	r2, [pc, #236]	; (80120c4 <HAL_SPI_Receive_DMA+0x284>)
 8011fd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fdc:	4a3a      	ldr	r2, [pc, #232]	; (80120c8 <HAL_SPI_Receive_DMA+0x288>)
 8011fde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	3330      	adds	r3, #48	; 0x30
 8011ff2:	4619      	mov	r1, r3
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ff8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012000:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8012002:	f7f6 fa11 	bl	8008428 <HAL_DMA_Start_IT>
 8012006:	4603      	mov	r3, r0
 8012008:	2b00      	cmp	r3, #0
 801200a:	d011      	beq.n	8012030 <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012012:	f043 0210 	orr.w	r2, r3, #16
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	2201      	movs	r2, #1
 8012020:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	2200      	movs	r2, #0
 8012028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 801202c:	2301      	movs	r3, #1
 801202e:	e042      	b.n	80120b6 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012034:	69db      	ldr	r3, [r3, #28]
 8012036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801203a:	d108      	bne.n	801204e <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	6859      	ldr	r1, [r3, #4]
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	681a      	ldr	r2, [r3, #0]
 8012046:	4b21      	ldr	r3, [pc, #132]	; (80120cc <HAL_SPI_Receive_DMA+0x28c>)
 8012048:	400b      	ands	r3, r1
 801204a:	6053      	str	r3, [r2, #4]
 801204c:	e009      	b.n	8012062 <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	685a      	ldr	r2, [r3, #4]
 8012054:	4b1d      	ldr	r3, [pc, #116]	; (80120cc <HAL_SPI_Receive_DMA+0x28c>)
 8012056:	4013      	ands	r3, r2
 8012058:	88f9      	ldrh	r1, [r7, #6]
 801205a:	68fa      	ldr	r2, [r7, #12]
 801205c:	6812      	ldr	r2, [r2, #0]
 801205e:	430b      	orrs	r3, r1
 8012060:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	689a      	ldr	r2, [r3, #8]
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012070:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	691a      	ldr	r2, [r3, #16]
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8012080:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	681a      	ldr	r2, [r3, #0]
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	f042 0201 	orr.w	r2, r2, #1
 8012090:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801209a:	d107      	bne.n	80120ac <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	681a      	ldr	r2, [r3, #0]
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80120aa:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	2200      	movs	r2, #0
 80120b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80120b4:	2300      	movs	r3, #0
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3710      	adds	r7, #16
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
 80120be:	bf00      	nop
 80120c0:	0801252b 	.word	0x0801252b
 80120c4:	080124e5 	.word	0x080124e5
 80120c8:	08012547 	.word	0x08012547
 80120cc:	ffff0000 	.word	0xffff0000

080120d0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b08a      	sub	sp, #40	; 0x28
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	691b      	ldr	r3, [r3, #16]
 80120de:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	695b      	ldr	r3, [r3, #20]
 80120e6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80120e8:	6a3a      	ldr	r2, [r7, #32]
 80120ea:	69fb      	ldr	r3, [r7, #28]
 80120ec:	4013      	ands	r3, r2
 80120ee:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	689b      	ldr	r3, [r3, #8]
 80120f6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80120f8:	2300      	movs	r3, #0
 80120fa:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012102:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	3330      	adds	r3, #48	; 0x30
 801210a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801210c:	69fb      	ldr	r3, [r7, #28]
 801210e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012112:	2b00      	cmp	r3, #0
 8012114:	d010      	beq.n	8012138 <HAL_SPI_IRQHandler+0x68>
 8012116:	6a3b      	ldr	r3, [r7, #32]
 8012118:	f003 0308 	and.w	r3, r3, #8
 801211c:	2b00      	cmp	r3, #0
 801211e:	d00b      	beq.n	8012138 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	699a      	ldr	r2, [r3, #24]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801212e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8012130:	6878      	ldr	r0, [r7, #4]
 8012132:	f000 f9cd 	bl	80124d0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8012136:	e192      	b.n	801245e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012138:	69bb      	ldr	r3, [r7, #24]
 801213a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801213e:	2b00      	cmp	r3, #0
 8012140:	d113      	bne.n	801216a <HAL_SPI_IRQHandler+0x9a>
 8012142:	69bb      	ldr	r3, [r7, #24]
 8012144:	f003 0320 	and.w	r3, r3, #32
 8012148:	2b00      	cmp	r3, #0
 801214a:	d10e      	bne.n	801216a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801214c:	69bb      	ldr	r3, [r7, #24]
 801214e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012152:	2b00      	cmp	r3, #0
 8012154:	d009      	beq.n	801216a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	4798      	blx	r3
    hspi->RxISR(hspi);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	4798      	blx	r3
    handled = 1UL;
 8012166:	2301      	movs	r3, #1
 8012168:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801216a:	69bb      	ldr	r3, [r7, #24]
 801216c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012170:	2b00      	cmp	r3, #0
 8012172:	d10f      	bne.n	8012194 <HAL_SPI_IRQHandler+0xc4>
 8012174:	69bb      	ldr	r3, [r7, #24]
 8012176:	f003 0301 	and.w	r3, r3, #1
 801217a:	2b00      	cmp	r3, #0
 801217c:	d00a      	beq.n	8012194 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801217e:	69bb      	ldr	r3, [r7, #24]
 8012180:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012184:	2b00      	cmp	r3, #0
 8012186:	d105      	bne.n	8012194 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	4798      	blx	r3
    handled = 1UL;
 8012190:	2301      	movs	r3, #1
 8012192:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012194:	69bb      	ldr	r3, [r7, #24]
 8012196:	f003 0320 	and.w	r3, r3, #32
 801219a:	2b00      	cmp	r3, #0
 801219c:	d10f      	bne.n	80121be <HAL_SPI_IRQHandler+0xee>
 801219e:	69bb      	ldr	r3, [r7, #24]
 80121a0:	f003 0302 	and.w	r3, r3, #2
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d00a      	beq.n	80121be <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80121a8:	69bb      	ldr	r3, [r7, #24]
 80121aa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d105      	bne.n	80121be <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	4798      	blx	r3
    handled = 1UL;
 80121ba:	2301      	movs	r3, #1
 80121bc:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80121be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	f040 8147 	bne.w	8012454 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	f003 0308 	and.w	r3, r3, #8
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	f000 808b 	beq.w	80122e8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	699a      	ldr	r2, [r3, #24]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	f042 0208 	orr.w	r2, r2, #8
 80121e0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	699a      	ldr	r2, [r3, #24]
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	f042 0210 	orr.w	r2, r2, #16
 80121f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	699a      	ldr	r2, [r3, #24]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012200:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	691a      	ldr	r2, [r3, #16]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	f022 0208 	bic.w	r2, r2, #8
 8012210:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	689b      	ldr	r3, [r3, #8]
 8012218:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801221c:	2b00      	cmp	r3, #0
 801221e:	d13d      	bne.n	801229c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8012220:	e036      	b.n	8012290 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	68db      	ldr	r3, [r3, #12]
 8012226:	2b0f      	cmp	r3, #15
 8012228:	d90b      	bls.n	8012242 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	681a      	ldr	r2, [r3, #0]
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012232:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012234:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801223a:	1d1a      	adds	r2, r3, #4
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	665a      	str	r2, [r3, #100]	; 0x64
 8012240:	e01d      	b.n	801227e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	68db      	ldr	r3, [r3, #12]
 8012246:	2b07      	cmp	r3, #7
 8012248:	d90b      	bls.n	8012262 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801224e:	68fa      	ldr	r2, [r7, #12]
 8012250:	8812      	ldrh	r2, [r2, #0]
 8012252:	b292      	uxth	r2, r2
 8012254:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801225a:	1c9a      	adds	r2, r3, #2
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	665a      	str	r2, [r3, #100]	; 0x64
 8012260:	e00d      	b.n	801227e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801226e:	7812      	ldrb	r2, [r2, #0]
 8012270:	b2d2      	uxtb	r2, r2
 8012272:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012278:	1c5a      	adds	r2, r3, #1
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012284:	b29b      	uxth	r3, r3
 8012286:	3b01      	subs	r3, #1
 8012288:	b29a      	uxth	r2, r3
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012296:	b29b      	uxth	r3, r3
 8012298:	2b00      	cmp	r3, #0
 801229a:	d1c2      	bne.n	8012222 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f000 f98f 	bl	80125c0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	2201      	movs	r2, #1
 80122a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d003      	beq.n	80122bc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f000 f901 	bl	80124bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80122ba:	e0d0      	b.n	801245e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80122bc:	7cfb      	ldrb	r3, [r7, #19]
 80122be:	2b05      	cmp	r3, #5
 80122c0:	d103      	bne.n	80122ca <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80122c2:	6878      	ldr	r0, [r7, #4]
 80122c4:	f000 f8e6 	bl	8012494 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80122c8:	e0c6      	b.n	8012458 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80122ca:	7cfb      	ldrb	r3, [r7, #19]
 80122cc:	2b04      	cmp	r3, #4
 80122ce:	d103      	bne.n	80122d8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f000 f8d5 	bl	8012480 <HAL_SPI_RxCpltCallback>
    return;
 80122d6:	e0bf      	b.n	8012458 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80122d8:	7cfb      	ldrb	r3, [r7, #19]
 80122da:	2b03      	cmp	r3, #3
 80122dc:	f040 80bc 	bne.w	8012458 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f000 f8c3 	bl	801246c <HAL_SPI_TxCpltCallback>
    return;
 80122e6:	e0b7      	b.n	8012458 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80122e8:	69bb      	ldr	r3, [r7, #24]
 80122ea:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	f000 80b5 	beq.w	801245e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80122f4:	69bb      	ldr	r3, [r7, #24]
 80122f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d00f      	beq.n	801231e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012304:	f043 0204 	orr.w	r2, r3, #4
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	699a      	ldr	r2, [r3, #24]
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801231c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801231e:	69bb      	ldr	r3, [r7, #24]
 8012320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012324:	2b00      	cmp	r3, #0
 8012326:	d00f      	beq.n	8012348 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801232e:	f043 0201 	orr.w	r2, r3, #1
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	699a      	ldr	r2, [r3, #24]
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012346:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8012348:	69bb      	ldr	r3, [r7, #24]
 801234a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801234e:	2b00      	cmp	r3, #0
 8012350:	d00f      	beq.n	8012372 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012358:	f043 0208 	orr.w	r2, r3, #8
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	699a      	ldr	r2, [r3, #24]
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012370:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8012372:	69bb      	ldr	r3, [r7, #24]
 8012374:	f003 0320 	and.w	r3, r3, #32
 8012378:	2b00      	cmp	r3, #0
 801237a:	d00f      	beq.n	801239c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012382:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	699a      	ldr	r2, [r3, #24]
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	f042 0220 	orr.w	r2, r2, #32
 801239a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d05a      	beq.n	801245c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	681a      	ldr	r2, [r3, #0]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	f022 0201 	bic.w	r2, r2, #1
 80123b4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	6919      	ldr	r1, [r3, #16]
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681a      	ldr	r2, [r3, #0]
 80123c0:	4b28      	ldr	r3, [pc, #160]	; (8012464 <HAL_SPI_IRQHandler+0x394>)
 80123c2:	400b      	ands	r3, r1
 80123c4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80123cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80123d0:	d138      	bne.n	8012444 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	689a      	ldr	r2, [r3, #8]
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80123e0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d013      	beq.n	8012412 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123ee:	4a1e      	ldr	r2, [pc, #120]	; (8012468 <HAL_SPI_IRQHandler+0x398>)
 80123f0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7f6 fd9e 	bl	8008f38 <HAL_DMA_Abort_IT>
 80123fc:	4603      	mov	r3, r0
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d007      	beq.n	8012412 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012408:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012416:	2b00      	cmp	r3, #0
 8012418:	d020      	beq.n	801245c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801241e:	4a12      	ldr	r2, [pc, #72]	; (8012468 <HAL_SPI_IRQHandler+0x398>)
 8012420:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012426:	4618      	mov	r0, r3
 8012428:	f7f6 fd86 	bl	8008f38 <HAL_DMA_Abort_IT>
 801242c:	4603      	mov	r3, r0
 801242e:	2b00      	cmp	r3, #0
 8012430:	d014      	beq.n	801245c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012438:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8012442:	e00b      	b.n	801245c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2201      	movs	r2, #1
 8012448:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f000 f835 	bl	80124bc <HAL_SPI_ErrorCallback>
    return;
 8012452:	e003      	b.n	801245c <HAL_SPI_IRQHandler+0x38c>
    return;
 8012454:	bf00      	nop
 8012456:	e002      	b.n	801245e <HAL_SPI_IRQHandler+0x38e>
    return;
 8012458:	bf00      	nop
 801245a:	e000      	b.n	801245e <HAL_SPI_IRQHandler+0x38e>
    return;
 801245c:	bf00      	nop
  }
}
 801245e:	3728      	adds	r7, #40	; 0x28
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}
 8012464:	fffffc94 	.word	0xfffffc94
 8012468:	0801258d 	.word	0x0801258d

0801246c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801246c:	b480      	push	{r7}
 801246e:	b083      	sub	sp, #12
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8012474:	bf00      	nop
 8012476:	370c      	adds	r7, #12
 8012478:	46bd      	mov	sp, r7
 801247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247e:	4770      	bx	lr

08012480 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012480:	b480      	push	{r7}
 8012482:	b083      	sub	sp, #12
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012488:	bf00      	nop
 801248a:	370c      	adds	r7, #12
 801248c:	46bd      	mov	sp, r7
 801248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012492:	4770      	bx	lr

08012494 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012494:	b480      	push	{r7}
 8012496:	b083      	sub	sp, #12
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801249c:	bf00      	nop
 801249e:	370c      	adds	r7, #12
 80124a0:	46bd      	mov	sp, r7
 80124a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a6:	4770      	bx	lr

080124a8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80124a8:	b480      	push	{r7}
 80124aa:	b083      	sub	sp, #12
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80124b0:	bf00      	nop
 80124b2:	370c      	adds	r7, #12
 80124b4:	46bd      	mov	sp, r7
 80124b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ba:	4770      	bx	lr

080124bc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80124bc:	b480      	push	{r7}
 80124be:	b083      	sub	sp, #12
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80124c4:	bf00      	nop
 80124c6:	370c      	adds	r7, #12
 80124c8:	46bd      	mov	sp, r7
 80124ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ce:	4770      	bx	lr

080124d0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80124d0:	b480      	push	{r7}
 80124d2:	b083      	sub	sp, #12
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80124d8:	bf00      	nop
 80124da:	370c      	adds	r7, #12
 80124dc:	46bd      	mov	sp, r7
 80124de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e2:	4770      	bx	lr

080124e4 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b084      	sub	sp, #16
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124f0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	2b07      	cmp	r3, #7
 80124fc:	d011      	beq.n	8012522 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012502:	69db      	ldr	r3, [r3, #28]
 8012504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012508:	d103      	bne.n	8012512 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 801250a:	68f8      	ldr	r0, [r7, #12]
 801250c:	f7ff ffb8 	bl	8012480 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8012510:	e007      	b.n	8012522 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	691a      	ldr	r2, [r3, #16]
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	f042 0208 	orr.w	r2, r2, #8
 8012520:	611a      	str	r2, [r3, #16]
}
 8012522:	bf00      	nop
 8012524:	3710      	adds	r7, #16
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}

0801252a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801252a:	b580      	push	{r7, lr}
 801252c:	b084      	sub	sp, #16
 801252e:	af00      	add	r7, sp, #0
 8012530:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012536:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8012538:	68f8      	ldr	r0, [r7, #12]
 801253a:	f7ff ffb5 	bl	80124a8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801253e:	bf00      	nop
 8012540:	3710      	adds	r7, #16
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}

08012546 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012546:	b580      	push	{r7, lr}
 8012548:	b084      	sub	sp, #16
 801254a:	af00      	add	r7, sp, #0
 801254c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012552:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f7f7 fe6d 	bl	800a234 <HAL_DMA_GetError>
 801255a:	4603      	mov	r3, r0
 801255c:	2b02      	cmp	r3, #2
 801255e:	d011      	beq.n	8012584 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8012560:	68f8      	ldr	r0, [r7, #12]
 8012562:	f000 f82d 	bl	80125c0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801256c:	f043 0210 	orr.w	r2, r3, #16
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	2201      	movs	r2, #1
 801257a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801257e:	68f8      	ldr	r0, [r7, #12]
 8012580:	f7ff ff9c 	bl	80124bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012584:	bf00      	nop
 8012586:	3710      	adds	r7, #16
 8012588:	46bd      	mov	sp, r7
 801258a:	bd80      	pop	{r7, pc}

0801258c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b084      	sub	sp, #16
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012598:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	2200      	movs	r2, #0
 801259e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	2200      	movs	r2, #0
 80125a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	2201      	movs	r2, #1
 80125ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80125b2:	68f8      	ldr	r0, [r7, #12]
 80125b4:	f7ff ff82 	bl	80124bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80125b8:	bf00      	nop
 80125ba:	3710      	adds	r7, #16
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd80      	pop	{r7, pc}

080125c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80125c0:	b480      	push	{r7}
 80125c2:	b085      	sub	sp, #20
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	695b      	ldr	r3, [r3, #20]
 80125ce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	699a      	ldr	r2, [r3, #24]
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	f042 0208 	orr.w	r2, r2, #8
 80125de:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	699a      	ldr	r2, [r3, #24]
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	f042 0210 	orr.w	r2, r2, #16
 80125ee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	681a      	ldr	r2, [r3, #0]
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	f022 0201 	bic.w	r2, r2, #1
 80125fe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	6919      	ldr	r1, [r3, #16]
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681a      	ldr	r2, [r3, #0]
 801260a:	4b3c      	ldr	r3, [pc, #240]	; (80126fc <SPI_CloseTransfer+0x13c>)
 801260c:	400b      	ands	r3, r1
 801260e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	689a      	ldr	r2, [r3, #8]
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801261e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012626:	b2db      	uxtb	r3, r3
 8012628:	2b04      	cmp	r3, #4
 801262a:	d014      	beq.n	8012656 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	f003 0320 	and.w	r3, r3, #32
 8012632:	2b00      	cmp	r3, #0
 8012634:	d00f      	beq.n	8012656 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801263c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	699a      	ldr	r2, [r3, #24]
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	f042 0220 	orr.w	r2, r2, #32
 8012654:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801265c:	b2db      	uxtb	r3, r3
 801265e:	2b03      	cmp	r3, #3
 8012660:	d014      	beq.n	801268c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012668:	2b00      	cmp	r3, #0
 801266a:	d00f      	beq.n	801268c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012672:	f043 0204 	orr.w	r2, r3, #4
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	699a      	ldr	r2, [r3, #24]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801268a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012692:	2b00      	cmp	r3, #0
 8012694:	d00f      	beq.n	80126b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801269c:	f043 0201 	orr.w	r2, r3, #1
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	699a      	ldr	r2, [r3, #24]
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80126b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d00f      	beq.n	80126e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80126c6:	f043 0208 	orr.w	r2, r3, #8
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	699a      	ldr	r2, [r3, #24]
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80126de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2200      	movs	r2, #0
 80126e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2200      	movs	r2, #0
 80126ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80126f0:	bf00      	nop
 80126f2:	3714      	adds	r7, #20
 80126f4:	46bd      	mov	sp, r7
 80126f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fa:	4770      	bx	lr
 80126fc:	fffffc90 	.word	0xfffffc90

08012700 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012700:	b480      	push	{r7}
 8012702:	b085      	sub	sp, #20
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801270c:	095b      	lsrs	r3, r3, #5
 801270e:	3301      	adds	r3, #1
 8012710:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	68db      	ldr	r3, [r3, #12]
 8012716:	3301      	adds	r3, #1
 8012718:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	3307      	adds	r3, #7
 801271e:	08db      	lsrs	r3, r3, #3
 8012720:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	68fa      	ldr	r2, [r7, #12]
 8012726:	fb02 f303 	mul.w	r3, r2, r3
}
 801272a:	4618      	mov	r0, r3
 801272c:	3714      	adds	r7, #20
 801272e:	46bd      	mov	sp, r7
 8012730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012734:	4770      	bx	lr

08012736 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012736:	b580      	push	{r7, lr}
 8012738:	b082      	sub	sp, #8
 801273a:	af00      	add	r7, sp, #0
 801273c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d101      	bne.n	8012748 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012744:	2301      	movs	r3, #1
 8012746:	e049      	b.n	80127dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801274e:	b2db      	uxtb	r3, r3
 8012750:	2b00      	cmp	r3, #0
 8012752:	d106      	bne.n	8012762 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2200      	movs	r2, #0
 8012758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f7f2 fb05 	bl	8004d6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	2202      	movs	r2, #2
 8012766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	681a      	ldr	r2, [r3, #0]
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	3304      	adds	r3, #4
 8012772:	4619      	mov	r1, r3
 8012774:	4610      	mov	r0, r2
 8012776:	f000 fe7d 	bl	8013474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	2201      	movs	r2, #1
 801277e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2201      	movs	r2, #1
 8012786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	2201      	movs	r2, #1
 801278e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2201      	movs	r2, #1
 8012796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	2201      	movs	r2, #1
 801279e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2201      	movs	r2, #1
 80127a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	2201      	movs	r2, #1
 80127ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	2201      	movs	r2, #1
 80127b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	2201      	movs	r2, #1
 80127be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	2201      	movs	r2, #1
 80127c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	2201      	movs	r2, #1
 80127ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2201      	movs	r2, #1
 80127d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80127da:	2300      	movs	r3, #0
}
 80127dc:	4618      	mov	r0, r3
 80127de:	3708      	adds	r7, #8
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd80      	pop	{r7, pc}

080127e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80127e4:	b480      	push	{r7}
 80127e6:	b085      	sub	sp, #20
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80127f2:	b2db      	uxtb	r3, r3
 80127f4:	2b01      	cmp	r3, #1
 80127f6:	d001      	beq.n	80127fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80127f8:	2301      	movs	r3, #1
 80127fa:	e054      	b.n	80128a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2202      	movs	r2, #2
 8012800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	68da      	ldr	r2, [r3, #12]
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	f042 0201 	orr.w	r2, r2, #1
 8012812:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	4a26      	ldr	r2, [pc, #152]	; (80128b4 <HAL_TIM_Base_Start_IT+0xd0>)
 801281a:	4293      	cmp	r3, r2
 801281c:	d022      	beq.n	8012864 <HAL_TIM_Base_Start_IT+0x80>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012826:	d01d      	beq.n	8012864 <HAL_TIM_Base_Start_IT+0x80>
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	4a22      	ldr	r2, [pc, #136]	; (80128b8 <HAL_TIM_Base_Start_IT+0xd4>)
 801282e:	4293      	cmp	r3, r2
 8012830:	d018      	beq.n	8012864 <HAL_TIM_Base_Start_IT+0x80>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	4a21      	ldr	r2, [pc, #132]	; (80128bc <HAL_TIM_Base_Start_IT+0xd8>)
 8012838:	4293      	cmp	r3, r2
 801283a:	d013      	beq.n	8012864 <HAL_TIM_Base_Start_IT+0x80>
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	4a1f      	ldr	r2, [pc, #124]	; (80128c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8012842:	4293      	cmp	r3, r2
 8012844:	d00e      	beq.n	8012864 <HAL_TIM_Base_Start_IT+0x80>
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	4a1e      	ldr	r2, [pc, #120]	; (80128c4 <HAL_TIM_Base_Start_IT+0xe0>)
 801284c:	4293      	cmp	r3, r2
 801284e:	d009      	beq.n	8012864 <HAL_TIM_Base_Start_IT+0x80>
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	4a1c      	ldr	r2, [pc, #112]	; (80128c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8012856:	4293      	cmp	r3, r2
 8012858:	d004      	beq.n	8012864 <HAL_TIM_Base_Start_IT+0x80>
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	4a1b      	ldr	r2, [pc, #108]	; (80128cc <HAL_TIM_Base_Start_IT+0xe8>)
 8012860:	4293      	cmp	r3, r2
 8012862:	d115      	bne.n	8012890 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	689a      	ldr	r2, [r3, #8]
 801286a:	4b19      	ldr	r3, [pc, #100]	; (80128d0 <HAL_TIM_Base_Start_IT+0xec>)
 801286c:	4013      	ands	r3, r2
 801286e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	2b06      	cmp	r3, #6
 8012874:	d015      	beq.n	80128a2 <HAL_TIM_Base_Start_IT+0xbe>
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801287c:	d011      	beq.n	80128a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	681a      	ldr	r2, [r3, #0]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	f042 0201 	orr.w	r2, r2, #1
 801288c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801288e:	e008      	b.n	80128a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	681a      	ldr	r2, [r3, #0]
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	f042 0201 	orr.w	r2, r2, #1
 801289e:	601a      	str	r2, [r3, #0]
 80128a0:	e000      	b.n	80128a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80128a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80128a4:	2300      	movs	r3, #0
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	3714      	adds	r7, #20
 80128aa:	46bd      	mov	sp, r7
 80128ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b0:	4770      	bx	lr
 80128b2:	bf00      	nop
 80128b4:	40010000 	.word	0x40010000
 80128b8:	40000400 	.word	0x40000400
 80128bc:	40000800 	.word	0x40000800
 80128c0:	40000c00 	.word	0x40000c00
 80128c4:	40010400 	.word	0x40010400
 80128c8:	40001800 	.word	0x40001800
 80128cc:	40014000 	.word	0x40014000
 80128d0:	00010007 	.word	0x00010007

080128d4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b084      	sub	sp, #16
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80128de:	2300      	movs	r3, #0
 80128e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d109      	bne.n	80128fc <HAL_TIM_OC_Start_IT+0x28>
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80128ee:	b2db      	uxtb	r3, r3
 80128f0:	2b01      	cmp	r3, #1
 80128f2:	bf14      	ite	ne
 80128f4:	2301      	movne	r3, #1
 80128f6:	2300      	moveq	r3, #0
 80128f8:	b2db      	uxtb	r3, r3
 80128fa:	e03c      	b.n	8012976 <HAL_TIM_OC_Start_IT+0xa2>
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	2b04      	cmp	r3, #4
 8012900:	d109      	bne.n	8012916 <HAL_TIM_OC_Start_IT+0x42>
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012908:	b2db      	uxtb	r3, r3
 801290a:	2b01      	cmp	r3, #1
 801290c:	bf14      	ite	ne
 801290e:	2301      	movne	r3, #1
 8012910:	2300      	moveq	r3, #0
 8012912:	b2db      	uxtb	r3, r3
 8012914:	e02f      	b.n	8012976 <HAL_TIM_OC_Start_IT+0xa2>
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	2b08      	cmp	r3, #8
 801291a:	d109      	bne.n	8012930 <HAL_TIM_OC_Start_IT+0x5c>
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012922:	b2db      	uxtb	r3, r3
 8012924:	2b01      	cmp	r3, #1
 8012926:	bf14      	ite	ne
 8012928:	2301      	movne	r3, #1
 801292a:	2300      	moveq	r3, #0
 801292c:	b2db      	uxtb	r3, r3
 801292e:	e022      	b.n	8012976 <HAL_TIM_OC_Start_IT+0xa2>
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	2b0c      	cmp	r3, #12
 8012934:	d109      	bne.n	801294a <HAL_TIM_OC_Start_IT+0x76>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801293c:	b2db      	uxtb	r3, r3
 801293e:	2b01      	cmp	r3, #1
 8012940:	bf14      	ite	ne
 8012942:	2301      	movne	r3, #1
 8012944:	2300      	moveq	r3, #0
 8012946:	b2db      	uxtb	r3, r3
 8012948:	e015      	b.n	8012976 <HAL_TIM_OC_Start_IT+0xa2>
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	2b10      	cmp	r3, #16
 801294e:	d109      	bne.n	8012964 <HAL_TIM_OC_Start_IT+0x90>
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012956:	b2db      	uxtb	r3, r3
 8012958:	2b01      	cmp	r3, #1
 801295a:	bf14      	ite	ne
 801295c:	2301      	movne	r3, #1
 801295e:	2300      	moveq	r3, #0
 8012960:	b2db      	uxtb	r3, r3
 8012962:	e008      	b.n	8012976 <HAL_TIM_OC_Start_IT+0xa2>
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801296a:	b2db      	uxtb	r3, r3
 801296c:	2b01      	cmp	r3, #1
 801296e:	bf14      	ite	ne
 8012970:	2301      	movne	r3, #1
 8012972:	2300      	moveq	r3, #0
 8012974:	b2db      	uxtb	r3, r3
 8012976:	2b00      	cmp	r3, #0
 8012978:	d001      	beq.n	801297e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 801297a:	2301      	movs	r3, #1
 801297c:	e0ec      	b.n	8012b58 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801297e:	683b      	ldr	r3, [r7, #0]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d104      	bne.n	801298e <HAL_TIM_OC_Start_IT+0xba>
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2202      	movs	r2, #2
 8012988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801298c:	e023      	b.n	80129d6 <HAL_TIM_OC_Start_IT+0x102>
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	2b04      	cmp	r3, #4
 8012992:	d104      	bne.n	801299e <HAL_TIM_OC_Start_IT+0xca>
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2202      	movs	r2, #2
 8012998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801299c:	e01b      	b.n	80129d6 <HAL_TIM_OC_Start_IT+0x102>
 801299e:	683b      	ldr	r3, [r7, #0]
 80129a0:	2b08      	cmp	r3, #8
 80129a2:	d104      	bne.n	80129ae <HAL_TIM_OC_Start_IT+0xda>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2202      	movs	r2, #2
 80129a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80129ac:	e013      	b.n	80129d6 <HAL_TIM_OC_Start_IT+0x102>
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	2b0c      	cmp	r3, #12
 80129b2:	d104      	bne.n	80129be <HAL_TIM_OC_Start_IT+0xea>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2202      	movs	r2, #2
 80129b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80129bc:	e00b      	b.n	80129d6 <HAL_TIM_OC_Start_IT+0x102>
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	2b10      	cmp	r3, #16
 80129c2:	d104      	bne.n	80129ce <HAL_TIM_OC_Start_IT+0xfa>
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2202      	movs	r2, #2
 80129c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80129cc:	e003      	b.n	80129d6 <HAL_TIM_OC_Start_IT+0x102>
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	2202      	movs	r2, #2
 80129d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	2b0c      	cmp	r3, #12
 80129da:	d841      	bhi.n	8012a60 <HAL_TIM_OC_Start_IT+0x18c>
 80129dc:	a201      	add	r2, pc, #4	; (adr r2, 80129e4 <HAL_TIM_OC_Start_IT+0x110>)
 80129de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129e2:	bf00      	nop
 80129e4:	08012a19 	.word	0x08012a19
 80129e8:	08012a61 	.word	0x08012a61
 80129ec:	08012a61 	.word	0x08012a61
 80129f0:	08012a61 	.word	0x08012a61
 80129f4:	08012a2b 	.word	0x08012a2b
 80129f8:	08012a61 	.word	0x08012a61
 80129fc:	08012a61 	.word	0x08012a61
 8012a00:	08012a61 	.word	0x08012a61
 8012a04:	08012a3d 	.word	0x08012a3d
 8012a08:	08012a61 	.word	0x08012a61
 8012a0c:	08012a61 	.word	0x08012a61
 8012a10:	08012a61 	.word	0x08012a61
 8012a14:	08012a4f 	.word	0x08012a4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	68da      	ldr	r2, [r3, #12]
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	f042 0202 	orr.w	r2, r2, #2
 8012a26:	60da      	str	r2, [r3, #12]
      break;
 8012a28:	e01d      	b.n	8012a66 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	68da      	ldr	r2, [r3, #12]
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	f042 0204 	orr.w	r2, r2, #4
 8012a38:	60da      	str	r2, [r3, #12]
      break;
 8012a3a:	e014      	b.n	8012a66 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	68da      	ldr	r2, [r3, #12]
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	f042 0208 	orr.w	r2, r2, #8
 8012a4a:	60da      	str	r2, [r3, #12]
      break;
 8012a4c:	e00b      	b.n	8012a66 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	68da      	ldr	r2, [r3, #12]
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	f042 0210 	orr.w	r2, r2, #16
 8012a5c:	60da      	str	r2, [r3, #12]
      break;
 8012a5e:	e002      	b.n	8012a66 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8012a60:	2301      	movs	r3, #1
 8012a62:	73fb      	strb	r3, [r7, #15]
      break;
 8012a64:	bf00      	nop
  }

  if (status == HAL_OK)
 8012a66:	7bfb      	ldrb	r3, [r7, #15]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d174      	bne.n	8012b56 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	2201      	movs	r2, #1
 8012a72:	6839      	ldr	r1, [r7, #0]
 8012a74:	4618      	mov	r0, r3
 8012a76:	f001 f917 	bl	8013ca8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	4a38      	ldr	r2, [pc, #224]	; (8012b60 <HAL_TIM_OC_Start_IT+0x28c>)
 8012a80:	4293      	cmp	r3, r2
 8012a82:	d013      	beq.n	8012aac <HAL_TIM_OC_Start_IT+0x1d8>
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	4a36      	ldr	r2, [pc, #216]	; (8012b64 <HAL_TIM_OC_Start_IT+0x290>)
 8012a8a:	4293      	cmp	r3, r2
 8012a8c:	d00e      	beq.n	8012aac <HAL_TIM_OC_Start_IT+0x1d8>
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	4a35      	ldr	r2, [pc, #212]	; (8012b68 <HAL_TIM_OC_Start_IT+0x294>)
 8012a94:	4293      	cmp	r3, r2
 8012a96:	d009      	beq.n	8012aac <HAL_TIM_OC_Start_IT+0x1d8>
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	4a33      	ldr	r2, [pc, #204]	; (8012b6c <HAL_TIM_OC_Start_IT+0x298>)
 8012a9e:	4293      	cmp	r3, r2
 8012aa0:	d004      	beq.n	8012aac <HAL_TIM_OC_Start_IT+0x1d8>
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	4a32      	ldr	r2, [pc, #200]	; (8012b70 <HAL_TIM_OC_Start_IT+0x29c>)
 8012aa8:	4293      	cmp	r3, r2
 8012aaa:	d101      	bne.n	8012ab0 <HAL_TIM_OC_Start_IT+0x1dc>
 8012aac:	2301      	movs	r3, #1
 8012aae:	e000      	b.n	8012ab2 <HAL_TIM_OC_Start_IT+0x1de>
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d007      	beq.n	8012ac6 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012ac4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	4a25      	ldr	r2, [pc, #148]	; (8012b60 <HAL_TIM_OC_Start_IT+0x28c>)
 8012acc:	4293      	cmp	r3, r2
 8012ace:	d022      	beq.n	8012b16 <HAL_TIM_OC_Start_IT+0x242>
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012ad8:	d01d      	beq.n	8012b16 <HAL_TIM_OC_Start_IT+0x242>
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	4a25      	ldr	r2, [pc, #148]	; (8012b74 <HAL_TIM_OC_Start_IT+0x2a0>)
 8012ae0:	4293      	cmp	r3, r2
 8012ae2:	d018      	beq.n	8012b16 <HAL_TIM_OC_Start_IT+0x242>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	4a23      	ldr	r2, [pc, #140]	; (8012b78 <HAL_TIM_OC_Start_IT+0x2a4>)
 8012aea:	4293      	cmp	r3, r2
 8012aec:	d013      	beq.n	8012b16 <HAL_TIM_OC_Start_IT+0x242>
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	4a22      	ldr	r2, [pc, #136]	; (8012b7c <HAL_TIM_OC_Start_IT+0x2a8>)
 8012af4:	4293      	cmp	r3, r2
 8012af6:	d00e      	beq.n	8012b16 <HAL_TIM_OC_Start_IT+0x242>
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	4a19      	ldr	r2, [pc, #100]	; (8012b64 <HAL_TIM_OC_Start_IT+0x290>)
 8012afe:	4293      	cmp	r3, r2
 8012b00:	d009      	beq.n	8012b16 <HAL_TIM_OC_Start_IT+0x242>
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	4a1e      	ldr	r2, [pc, #120]	; (8012b80 <HAL_TIM_OC_Start_IT+0x2ac>)
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	d004      	beq.n	8012b16 <HAL_TIM_OC_Start_IT+0x242>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	4a15      	ldr	r2, [pc, #84]	; (8012b68 <HAL_TIM_OC_Start_IT+0x294>)
 8012b12:	4293      	cmp	r3, r2
 8012b14:	d115      	bne.n	8012b42 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	689a      	ldr	r2, [r3, #8]
 8012b1c:	4b19      	ldr	r3, [pc, #100]	; (8012b84 <HAL_TIM_OC_Start_IT+0x2b0>)
 8012b1e:	4013      	ands	r3, r2
 8012b20:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	2b06      	cmp	r3, #6
 8012b26:	d015      	beq.n	8012b54 <HAL_TIM_OC_Start_IT+0x280>
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b2e:	d011      	beq.n	8012b54 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	681a      	ldr	r2, [r3, #0]
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	f042 0201 	orr.w	r2, r2, #1
 8012b3e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b40:	e008      	b.n	8012b54 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	681a      	ldr	r2, [r3, #0]
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	f042 0201 	orr.w	r2, r2, #1
 8012b50:	601a      	str	r2, [r3, #0]
 8012b52:	e000      	b.n	8012b56 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012b54:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3710      	adds	r7, #16
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}
 8012b60:	40010000 	.word	0x40010000
 8012b64:	40010400 	.word	0x40010400
 8012b68:	40014000 	.word	0x40014000
 8012b6c:	40014400 	.word	0x40014400
 8012b70:	40014800 	.word	0x40014800
 8012b74:	40000400 	.word	0x40000400
 8012b78:	40000800 	.word	0x40000800
 8012b7c:	40000c00 	.word	0x40000c00
 8012b80:	40001800 	.word	0x40001800
 8012b84:	00010007 	.word	0x00010007

08012b88 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b084      	sub	sp, #16
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012b92:	2300      	movs	r3, #0
 8012b94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	2b0c      	cmp	r3, #12
 8012b9a:	d841      	bhi.n	8012c20 <HAL_TIM_OC_Stop_IT+0x98>
 8012b9c:	a201      	add	r2, pc, #4	; (adr r2, 8012ba4 <HAL_TIM_OC_Stop_IT+0x1c>)
 8012b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ba2:	bf00      	nop
 8012ba4:	08012bd9 	.word	0x08012bd9
 8012ba8:	08012c21 	.word	0x08012c21
 8012bac:	08012c21 	.word	0x08012c21
 8012bb0:	08012c21 	.word	0x08012c21
 8012bb4:	08012beb 	.word	0x08012beb
 8012bb8:	08012c21 	.word	0x08012c21
 8012bbc:	08012c21 	.word	0x08012c21
 8012bc0:	08012c21 	.word	0x08012c21
 8012bc4:	08012bfd 	.word	0x08012bfd
 8012bc8:	08012c21 	.word	0x08012c21
 8012bcc:	08012c21 	.word	0x08012c21
 8012bd0:	08012c21 	.word	0x08012c21
 8012bd4:	08012c0f 	.word	0x08012c0f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	68da      	ldr	r2, [r3, #12]
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	f022 0202 	bic.w	r2, r2, #2
 8012be6:	60da      	str	r2, [r3, #12]
      break;
 8012be8:	e01d      	b.n	8012c26 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	68da      	ldr	r2, [r3, #12]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	f022 0204 	bic.w	r2, r2, #4
 8012bf8:	60da      	str	r2, [r3, #12]
      break;
 8012bfa:	e014      	b.n	8012c26 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	68da      	ldr	r2, [r3, #12]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	f022 0208 	bic.w	r2, r2, #8
 8012c0a:	60da      	str	r2, [r3, #12]
      break;
 8012c0c:	e00b      	b.n	8012c26 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	68da      	ldr	r2, [r3, #12]
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	f022 0210 	bic.w	r2, r2, #16
 8012c1c:	60da      	str	r2, [r3, #12]
      break;
 8012c1e:	e002      	b.n	8012c26 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8012c20:	2301      	movs	r3, #1
 8012c22:	73fb      	strb	r3, [r7, #15]
      break;
 8012c24:	bf00      	nop
  }

  if (status == HAL_OK)
 8012c26:	7bfb      	ldrb	r3, [r7, #15]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	f040 8081 	bne.w	8012d30 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	2200      	movs	r2, #0
 8012c34:	6839      	ldr	r1, [r7, #0]
 8012c36:	4618      	mov	r0, r3
 8012c38:	f001 f836 	bl	8013ca8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	4a3e      	ldr	r2, [pc, #248]	; (8012d3c <HAL_TIM_OC_Stop_IT+0x1b4>)
 8012c42:	4293      	cmp	r3, r2
 8012c44:	d013      	beq.n	8012c6e <HAL_TIM_OC_Stop_IT+0xe6>
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	4a3d      	ldr	r2, [pc, #244]	; (8012d40 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8012c4c:	4293      	cmp	r3, r2
 8012c4e:	d00e      	beq.n	8012c6e <HAL_TIM_OC_Stop_IT+0xe6>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	4a3b      	ldr	r2, [pc, #236]	; (8012d44 <HAL_TIM_OC_Stop_IT+0x1bc>)
 8012c56:	4293      	cmp	r3, r2
 8012c58:	d009      	beq.n	8012c6e <HAL_TIM_OC_Stop_IT+0xe6>
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	4a3a      	ldr	r2, [pc, #232]	; (8012d48 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8012c60:	4293      	cmp	r3, r2
 8012c62:	d004      	beq.n	8012c6e <HAL_TIM_OC_Stop_IT+0xe6>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	4a38      	ldr	r2, [pc, #224]	; (8012d4c <HAL_TIM_OC_Stop_IT+0x1c4>)
 8012c6a:	4293      	cmp	r3, r2
 8012c6c:	d101      	bne.n	8012c72 <HAL_TIM_OC_Stop_IT+0xea>
 8012c6e:	2301      	movs	r3, #1
 8012c70:	e000      	b.n	8012c74 <HAL_TIM_OC_Stop_IT+0xec>
 8012c72:	2300      	movs	r3, #0
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d017      	beq.n	8012ca8 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	6a1a      	ldr	r2, [r3, #32]
 8012c7e:	f241 1311 	movw	r3, #4369	; 0x1111
 8012c82:	4013      	ands	r3, r2
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d10f      	bne.n	8012ca8 <HAL_TIM_OC_Stop_IT+0x120>
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	6a1a      	ldr	r2, [r3, #32]
 8012c8e:	f240 4344 	movw	r3, #1092	; 0x444
 8012c92:	4013      	ands	r3, r2
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d107      	bne.n	8012ca8 <HAL_TIM_OC_Stop_IT+0x120>
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012ca6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	6a1a      	ldr	r2, [r3, #32]
 8012cae:	f241 1311 	movw	r3, #4369	; 0x1111
 8012cb2:	4013      	ands	r3, r2
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d10f      	bne.n	8012cd8 <HAL_TIM_OC_Stop_IT+0x150>
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	6a1a      	ldr	r2, [r3, #32]
 8012cbe:	f240 4344 	movw	r3, #1092	; 0x444
 8012cc2:	4013      	ands	r3, r2
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d107      	bne.n	8012cd8 <HAL_TIM_OC_Stop_IT+0x150>
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	681a      	ldr	r2, [r3, #0]
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	f022 0201 	bic.w	r2, r2, #1
 8012cd6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d104      	bne.n	8012ce8 <HAL_TIM_OC_Stop_IT+0x160>
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	2201      	movs	r2, #1
 8012ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012ce6:	e023      	b.n	8012d30 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	2b04      	cmp	r3, #4
 8012cec:	d104      	bne.n	8012cf8 <HAL_TIM_OC_Stop_IT+0x170>
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2201      	movs	r2, #1
 8012cf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012cf6:	e01b      	b.n	8012d30 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	2b08      	cmp	r3, #8
 8012cfc:	d104      	bne.n	8012d08 <HAL_TIM_OC_Stop_IT+0x180>
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	2201      	movs	r2, #1
 8012d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012d06:	e013      	b.n	8012d30 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	2b0c      	cmp	r3, #12
 8012d0c:	d104      	bne.n	8012d18 <HAL_TIM_OC_Stop_IT+0x190>
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	2201      	movs	r2, #1
 8012d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012d16:	e00b      	b.n	8012d30 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	2b10      	cmp	r3, #16
 8012d1c:	d104      	bne.n	8012d28 <HAL_TIM_OC_Stop_IT+0x1a0>
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	2201      	movs	r2, #1
 8012d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012d26:	e003      	b.n	8012d30 <HAL_TIM_OC_Stop_IT+0x1a8>
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8012d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d32:	4618      	mov	r0, r3
 8012d34:	3710      	adds	r7, #16
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}
 8012d3a:	bf00      	nop
 8012d3c:	40010000 	.word	0x40010000
 8012d40:	40010400 	.word	0x40010400
 8012d44:	40014000 	.word	0x40014000
 8012d48:	40014400 	.word	0x40014400
 8012d4c:	40014800 	.word	0x40014800

08012d50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b082      	sub	sp, #8
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d101      	bne.n	8012d62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012d5e:	2301      	movs	r3, #1
 8012d60:	e049      	b.n	8012df6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012d68:	b2db      	uxtb	r3, r3
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d106      	bne.n	8012d7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	2200      	movs	r2, #0
 8012d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f000 f841 	bl	8012dfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2202      	movs	r2, #2
 8012d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681a      	ldr	r2, [r3, #0]
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	3304      	adds	r3, #4
 8012d8c:	4619      	mov	r1, r3
 8012d8e:	4610      	mov	r0, r2
 8012d90:	f000 fb70 	bl	8013474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2201      	movs	r2, #1
 8012d98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2201      	movs	r2, #1
 8012da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	2201      	movs	r2, #1
 8012da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2201      	movs	r2, #1
 8012db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	2201      	movs	r2, #1
 8012db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2201      	movs	r2, #1
 8012dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	2201      	movs	r2, #1
 8012dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	2201      	movs	r2, #1
 8012dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2201      	movs	r2, #1
 8012dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	2201      	movs	r2, #1
 8012de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2201      	movs	r2, #1
 8012de8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	2201      	movs	r2, #1
 8012df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012df4:	2300      	movs	r3, #0
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	3708      	adds	r7, #8
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}

08012dfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012dfe:	b480      	push	{r7}
 8012e00:	b083      	sub	sp, #12
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012e06:	bf00      	nop
 8012e08:	370c      	adds	r7, #12
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e10:	4770      	bx	lr

08012e12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012e12:	b580      	push	{r7, lr}
 8012e14:	b084      	sub	sp, #16
 8012e16:	af00      	add	r7, sp, #0
 8012e18:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	68db      	ldr	r3, [r3, #12]
 8012e20:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	691b      	ldr	r3, [r3, #16]
 8012e28:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	f003 0302 	and.w	r3, r3, #2
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d020      	beq.n	8012e76 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	f003 0302 	and.w	r3, r3, #2
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d01b      	beq.n	8012e76 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	f06f 0202 	mvn.w	r2, #2
 8012e46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	2201      	movs	r2, #1
 8012e4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	699b      	ldr	r3, [r3, #24]
 8012e54:	f003 0303 	and.w	r3, r3, #3
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d003      	beq.n	8012e64 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f000 faeb 	bl	8013438 <HAL_TIM_IC_CaptureCallback>
 8012e62:	e005      	b.n	8012e70 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f7ef fec5 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f000 faee 	bl	801344c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2200      	movs	r2, #0
 8012e74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	f003 0304 	and.w	r3, r3, #4
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d020      	beq.n	8012ec2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	f003 0304 	and.w	r3, r3, #4
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d01b      	beq.n	8012ec2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	f06f 0204 	mvn.w	r2, #4
 8012e92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	2202      	movs	r2, #2
 8012e98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	699b      	ldr	r3, [r3, #24]
 8012ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d003      	beq.n	8012eb0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f000 fac5 	bl	8013438 <HAL_TIM_IC_CaptureCallback>
 8012eae:	e005      	b.n	8012ebc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012eb0:	6878      	ldr	r0, [r7, #4]
 8012eb2:	f7ef fe9f 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f000 fac8 	bl	801344c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	f003 0308 	and.w	r3, r3, #8
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d020      	beq.n	8012f0e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	f003 0308 	and.w	r3, r3, #8
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d01b      	beq.n	8012f0e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	f06f 0208 	mvn.w	r2, #8
 8012ede:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2204      	movs	r2, #4
 8012ee4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	69db      	ldr	r3, [r3, #28]
 8012eec:	f003 0303 	and.w	r3, r3, #3
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d003      	beq.n	8012efc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f000 fa9f 	bl	8013438 <HAL_TIM_IC_CaptureCallback>
 8012efa:	e005      	b.n	8012f08 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f7ef fe79 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	f000 faa2 	bl	801344c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	f003 0310 	and.w	r3, r3, #16
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d020      	beq.n	8012f5a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	f003 0310 	and.w	r3, r3, #16
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d01b      	beq.n	8012f5a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	f06f 0210 	mvn.w	r2, #16
 8012f2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2208      	movs	r2, #8
 8012f30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	69db      	ldr	r3, [r3, #28]
 8012f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d003      	beq.n	8012f48 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f000 fa79 	bl	8013438 <HAL_TIM_IC_CaptureCallback>
 8012f46:	e005      	b.n	8012f54 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f7ef fe53 	bl	8002bf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f000 fa7c 	bl	801344c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2200      	movs	r2, #0
 8012f58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012f5a:	68bb      	ldr	r3, [r7, #8]
 8012f5c:	f003 0301 	and.w	r3, r3, #1
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d00c      	beq.n	8012f7e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	f003 0301 	and.w	r3, r3, #1
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d007      	beq.n	8012f7e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	f06f 0201 	mvn.w	r2, #1
 8012f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012f78:	6878      	ldr	r0, [r7, #4]
 8012f7a:	f7f0 fce1 	bl	8003940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d104      	bne.n	8012f92 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d00c      	beq.n	8012fac <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d007      	beq.n	8012fac <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8012fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f000 ffba 	bl	8013f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8012fac:	68bb      	ldr	r3, [r7, #8]
 8012fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d00c      	beq.n	8012fd0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d007      	beq.n	8012fd0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8012fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f000 ffb2 	bl	8013f34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d00c      	beq.n	8012ff4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d007      	beq.n	8012ff4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8012fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f000 fa36 	bl	8013460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	f003 0320 	and.w	r3, r3, #32
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d00c      	beq.n	8013018 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	f003 0320 	and.w	r3, r3, #32
 8013004:	2b00      	cmp	r3, #0
 8013006:	d007      	beq.n	8013018 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	f06f 0220 	mvn.w	r2, #32
 8013010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013012:	6878      	ldr	r0, [r7, #4]
 8013014:	f000 ff7a 	bl	8013f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013018:	bf00      	nop
 801301a:	3710      	adds	r7, #16
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}

08013020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b086      	sub	sp, #24
 8013024:	af00      	add	r7, sp, #0
 8013026:	60f8      	str	r0, [r7, #12]
 8013028:	60b9      	str	r1, [r7, #8]
 801302a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801302c:	2300      	movs	r3, #0
 801302e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013036:	2b01      	cmp	r3, #1
 8013038:	d101      	bne.n	801303e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801303a:	2302      	movs	r3, #2
 801303c:	e0ff      	b.n	801323e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	2201      	movs	r2, #1
 8013042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2b14      	cmp	r3, #20
 801304a:	f200 80f0 	bhi.w	801322e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801304e:	a201      	add	r2, pc, #4	; (adr r2, 8013054 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013054:	080130a9 	.word	0x080130a9
 8013058:	0801322f 	.word	0x0801322f
 801305c:	0801322f 	.word	0x0801322f
 8013060:	0801322f 	.word	0x0801322f
 8013064:	080130e9 	.word	0x080130e9
 8013068:	0801322f 	.word	0x0801322f
 801306c:	0801322f 	.word	0x0801322f
 8013070:	0801322f 	.word	0x0801322f
 8013074:	0801312b 	.word	0x0801312b
 8013078:	0801322f 	.word	0x0801322f
 801307c:	0801322f 	.word	0x0801322f
 8013080:	0801322f 	.word	0x0801322f
 8013084:	0801316b 	.word	0x0801316b
 8013088:	0801322f 	.word	0x0801322f
 801308c:	0801322f 	.word	0x0801322f
 8013090:	0801322f 	.word	0x0801322f
 8013094:	080131ad 	.word	0x080131ad
 8013098:	0801322f 	.word	0x0801322f
 801309c:	0801322f 	.word	0x0801322f
 80130a0:	0801322f 	.word	0x0801322f
 80130a4:	080131ed 	.word	0x080131ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	68b9      	ldr	r1, [r7, #8]
 80130ae:	4618      	mov	r0, r3
 80130b0:	f000 fa86 	bl	80135c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	699a      	ldr	r2, [r3, #24]
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	f042 0208 	orr.w	r2, r2, #8
 80130c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	699a      	ldr	r2, [r3, #24]
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	f022 0204 	bic.w	r2, r2, #4
 80130d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	6999      	ldr	r1, [r3, #24]
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	691a      	ldr	r2, [r3, #16]
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	430a      	orrs	r2, r1
 80130e4:	619a      	str	r2, [r3, #24]
      break;
 80130e6:	e0a5      	b.n	8013234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	68b9      	ldr	r1, [r7, #8]
 80130ee:	4618      	mov	r0, r3
 80130f0:	f000 faf6 	bl	80136e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	699a      	ldr	r2, [r3, #24]
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	699a      	ldr	r2, [r3, #24]
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	6999      	ldr	r1, [r3, #24]
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	691b      	ldr	r3, [r3, #16]
 801311e:	021a      	lsls	r2, r3, #8
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	430a      	orrs	r2, r1
 8013126:	619a      	str	r2, [r3, #24]
      break;
 8013128:	e084      	b.n	8013234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	68b9      	ldr	r1, [r7, #8]
 8013130:	4618      	mov	r0, r3
 8013132:	f000 fb5f 	bl	80137f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	69da      	ldr	r2, [r3, #28]
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	f042 0208 	orr.w	r2, r2, #8
 8013144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	69da      	ldr	r2, [r3, #28]
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	f022 0204 	bic.w	r2, r2, #4
 8013154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	69d9      	ldr	r1, [r3, #28]
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	691a      	ldr	r2, [r3, #16]
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	430a      	orrs	r2, r1
 8013166:	61da      	str	r2, [r3, #28]
      break;
 8013168:	e064      	b.n	8013234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	68b9      	ldr	r1, [r7, #8]
 8013170:	4618      	mov	r0, r3
 8013172:	f000 fbc7 	bl	8013904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	69da      	ldr	r2, [r3, #28]
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	69da      	ldr	r2, [r3, #28]
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	69d9      	ldr	r1, [r3, #28]
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	691b      	ldr	r3, [r3, #16]
 80131a0:	021a      	lsls	r2, r3, #8
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	430a      	orrs	r2, r1
 80131a8:	61da      	str	r2, [r3, #28]
      break;
 80131aa:	e043      	b.n	8013234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	68b9      	ldr	r1, [r7, #8]
 80131b2:	4618      	mov	r0, r3
 80131b4:	f000 fc10 	bl	80139d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	f042 0208 	orr.w	r2, r2, #8
 80131c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	f022 0204 	bic.w	r2, r2, #4
 80131d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	691a      	ldr	r2, [r3, #16]
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	430a      	orrs	r2, r1
 80131e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80131ea:	e023      	b.n	8013234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	68b9      	ldr	r1, [r7, #8]
 80131f2:	4618      	mov	r0, r3
 80131f4:	f000 fc54 	bl	8013aa0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013206:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013216:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	691b      	ldr	r3, [r3, #16]
 8013222:	021a      	lsls	r2, r3, #8
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	430a      	orrs	r2, r1
 801322a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801322c:	e002      	b.n	8013234 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801322e:	2301      	movs	r3, #1
 8013230:	75fb      	strb	r3, [r7, #23]
      break;
 8013232:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2200      	movs	r2, #0
 8013238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801323c:	7dfb      	ldrb	r3, [r7, #23]
}
 801323e:	4618      	mov	r0, r3
 8013240:	3718      	adds	r7, #24
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}
 8013246:	bf00      	nop

08013248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b084      	sub	sp, #16
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
 8013250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013252:	2300      	movs	r3, #0
 8013254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801325c:	2b01      	cmp	r3, #1
 801325e:	d101      	bne.n	8013264 <HAL_TIM_ConfigClockSource+0x1c>
 8013260:	2302      	movs	r3, #2
 8013262:	e0dc      	b.n	801341e <HAL_TIM_ConfigClockSource+0x1d6>
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	2201      	movs	r2, #1
 8013268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2202      	movs	r2, #2
 8013270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	689b      	ldr	r3, [r3, #8]
 801327a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801327c:	68ba      	ldr	r2, [r7, #8]
 801327e:	4b6a      	ldr	r3, [pc, #424]	; (8013428 <HAL_TIM_ConfigClockSource+0x1e0>)
 8013280:	4013      	ands	r3, r2
 8013282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801328a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	68ba      	ldr	r2, [r7, #8]
 8013292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	4a64      	ldr	r2, [pc, #400]	; (801342c <HAL_TIM_ConfigClockSource+0x1e4>)
 801329a:	4293      	cmp	r3, r2
 801329c:	f000 80a9 	beq.w	80133f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80132a0:	4a62      	ldr	r2, [pc, #392]	; (801342c <HAL_TIM_ConfigClockSource+0x1e4>)
 80132a2:	4293      	cmp	r3, r2
 80132a4:	f200 80ae 	bhi.w	8013404 <HAL_TIM_ConfigClockSource+0x1bc>
 80132a8:	4a61      	ldr	r2, [pc, #388]	; (8013430 <HAL_TIM_ConfigClockSource+0x1e8>)
 80132aa:	4293      	cmp	r3, r2
 80132ac:	f000 80a1 	beq.w	80133f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80132b0:	4a5f      	ldr	r2, [pc, #380]	; (8013430 <HAL_TIM_ConfigClockSource+0x1e8>)
 80132b2:	4293      	cmp	r3, r2
 80132b4:	f200 80a6 	bhi.w	8013404 <HAL_TIM_ConfigClockSource+0x1bc>
 80132b8:	4a5e      	ldr	r2, [pc, #376]	; (8013434 <HAL_TIM_ConfigClockSource+0x1ec>)
 80132ba:	4293      	cmp	r3, r2
 80132bc:	f000 8099 	beq.w	80133f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80132c0:	4a5c      	ldr	r2, [pc, #368]	; (8013434 <HAL_TIM_ConfigClockSource+0x1ec>)
 80132c2:	4293      	cmp	r3, r2
 80132c4:	f200 809e 	bhi.w	8013404 <HAL_TIM_ConfigClockSource+0x1bc>
 80132c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80132cc:	f000 8091 	beq.w	80133f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80132d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80132d4:	f200 8096 	bhi.w	8013404 <HAL_TIM_ConfigClockSource+0x1bc>
 80132d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80132dc:	f000 8089 	beq.w	80133f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80132e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80132e4:	f200 808e 	bhi.w	8013404 <HAL_TIM_ConfigClockSource+0x1bc>
 80132e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80132ec:	d03e      	beq.n	801336c <HAL_TIM_ConfigClockSource+0x124>
 80132ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80132f2:	f200 8087 	bhi.w	8013404 <HAL_TIM_ConfigClockSource+0x1bc>
 80132f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80132fa:	f000 8086 	beq.w	801340a <HAL_TIM_ConfigClockSource+0x1c2>
 80132fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013302:	d87f      	bhi.n	8013404 <HAL_TIM_ConfigClockSource+0x1bc>
 8013304:	2b70      	cmp	r3, #112	; 0x70
 8013306:	d01a      	beq.n	801333e <HAL_TIM_ConfigClockSource+0xf6>
 8013308:	2b70      	cmp	r3, #112	; 0x70
 801330a:	d87b      	bhi.n	8013404 <HAL_TIM_ConfigClockSource+0x1bc>
 801330c:	2b60      	cmp	r3, #96	; 0x60
 801330e:	d050      	beq.n	80133b2 <HAL_TIM_ConfigClockSource+0x16a>
 8013310:	2b60      	cmp	r3, #96	; 0x60
 8013312:	d877      	bhi.n	8013404 <HAL_TIM_ConfigClockSource+0x1bc>
 8013314:	2b50      	cmp	r3, #80	; 0x50
 8013316:	d03c      	beq.n	8013392 <HAL_TIM_ConfigClockSource+0x14a>
 8013318:	2b50      	cmp	r3, #80	; 0x50
 801331a:	d873      	bhi.n	8013404 <HAL_TIM_ConfigClockSource+0x1bc>
 801331c:	2b40      	cmp	r3, #64	; 0x40
 801331e:	d058      	beq.n	80133d2 <HAL_TIM_ConfigClockSource+0x18a>
 8013320:	2b40      	cmp	r3, #64	; 0x40
 8013322:	d86f      	bhi.n	8013404 <HAL_TIM_ConfigClockSource+0x1bc>
 8013324:	2b30      	cmp	r3, #48	; 0x30
 8013326:	d064      	beq.n	80133f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013328:	2b30      	cmp	r3, #48	; 0x30
 801332a:	d86b      	bhi.n	8013404 <HAL_TIM_ConfigClockSource+0x1bc>
 801332c:	2b20      	cmp	r3, #32
 801332e:	d060      	beq.n	80133f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013330:	2b20      	cmp	r3, #32
 8013332:	d867      	bhi.n	8013404 <HAL_TIM_ConfigClockSource+0x1bc>
 8013334:	2b00      	cmp	r3, #0
 8013336:	d05c      	beq.n	80133f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8013338:	2b10      	cmp	r3, #16
 801333a:	d05a      	beq.n	80133f2 <HAL_TIM_ConfigClockSource+0x1aa>
 801333c:	e062      	b.n	8013404 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6818      	ldr	r0, [r3, #0]
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	6899      	ldr	r1, [r3, #8]
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	685a      	ldr	r2, [r3, #4]
 801334a:	683b      	ldr	r3, [r7, #0]
 801334c:	68db      	ldr	r3, [r3, #12]
 801334e:	f000 fc8b 	bl	8013c68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	689b      	ldr	r3, [r3, #8]
 8013358:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801335a:	68bb      	ldr	r3, [r7, #8]
 801335c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013360:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	68ba      	ldr	r2, [r7, #8]
 8013368:	609a      	str	r2, [r3, #8]
      break;
 801336a:	e04f      	b.n	801340c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	6818      	ldr	r0, [r3, #0]
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	6899      	ldr	r1, [r3, #8]
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	685a      	ldr	r2, [r3, #4]
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	68db      	ldr	r3, [r3, #12]
 801337c:	f000 fc74 	bl	8013c68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	689a      	ldr	r2, [r3, #8]
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801338e:	609a      	str	r2, [r3, #8]
      break;
 8013390:	e03c      	b.n	801340c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	6818      	ldr	r0, [r3, #0]
 8013396:	683b      	ldr	r3, [r7, #0]
 8013398:	6859      	ldr	r1, [r3, #4]
 801339a:	683b      	ldr	r3, [r7, #0]
 801339c:	68db      	ldr	r3, [r3, #12]
 801339e:	461a      	mov	r2, r3
 80133a0:	f000 fbe4 	bl	8013b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	2150      	movs	r1, #80	; 0x50
 80133aa:	4618      	mov	r0, r3
 80133ac:	f000 fc3e 	bl	8013c2c <TIM_ITRx_SetConfig>
      break;
 80133b0:	e02c      	b.n	801340c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6818      	ldr	r0, [r3, #0]
 80133b6:	683b      	ldr	r3, [r7, #0]
 80133b8:	6859      	ldr	r1, [r3, #4]
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	68db      	ldr	r3, [r3, #12]
 80133be:	461a      	mov	r2, r3
 80133c0:	f000 fc03 	bl	8013bca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	2160      	movs	r1, #96	; 0x60
 80133ca:	4618      	mov	r0, r3
 80133cc:	f000 fc2e 	bl	8013c2c <TIM_ITRx_SetConfig>
      break;
 80133d0:	e01c      	b.n	801340c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	6818      	ldr	r0, [r3, #0]
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	6859      	ldr	r1, [r3, #4]
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	68db      	ldr	r3, [r3, #12]
 80133de:	461a      	mov	r2, r3
 80133e0:	f000 fbc4 	bl	8013b6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	2140      	movs	r1, #64	; 0x40
 80133ea:	4618      	mov	r0, r3
 80133ec:	f000 fc1e 	bl	8013c2c <TIM_ITRx_SetConfig>
      break;
 80133f0:	e00c      	b.n	801340c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	681a      	ldr	r2, [r3, #0]
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	4619      	mov	r1, r3
 80133fc:	4610      	mov	r0, r2
 80133fe:	f000 fc15 	bl	8013c2c <TIM_ITRx_SetConfig>
      break;
 8013402:	e003      	b.n	801340c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013404:	2301      	movs	r3, #1
 8013406:	73fb      	strb	r3, [r7, #15]
      break;
 8013408:	e000      	b.n	801340c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801340a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2201      	movs	r2, #1
 8013410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2200      	movs	r2, #0
 8013418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801341c:	7bfb      	ldrb	r3, [r7, #15]
}
 801341e:	4618      	mov	r0, r3
 8013420:	3710      	adds	r7, #16
 8013422:	46bd      	mov	sp, r7
 8013424:	bd80      	pop	{r7, pc}
 8013426:	bf00      	nop
 8013428:	ffceff88 	.word	0xffceff88
 801342c:	00100040 	.word	0x00100040
 8013430:	00100030 	.word	0x00100030
 8013434:	00100020 	.word	0x00100020

08013438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013438:	b480      	push	{r7}
 801343a:	b083      	sub	sp, #12
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013440:	bf00      	nop
 8013442:	370c      	adds	r7, #12
 8013444:	46bd      	mov	sp, r7
 8013446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344a:	4770      	bx	lr

0801344c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801344c:	b480      	push	{r7}
 801344e:	b083      	sub	sp, #12
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013454:	bf00      	nop
 8013456:	370c      	adds	r7, #12
 8013458:	46bd      	mov	sp, r7
 801345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345e:	4770      	bx	lr

08013460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013460:	b480      	push	{r7}
 8013462:	b083      	sub	sp, #12
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013468:	bf00      	nop
 801346a:	370c      	adds	r7, #12
 801346c:	46bd      	mov	sp, r7
 801346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013472:	4770      	bx	lr

08013474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013474:	b480      	push	{r7}
 8013476:	b085      	sub	sp, #20
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
 801347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	4a46      	ldr	r2, [pc, #280]	; (80135a0 <TIM_Base_SetConfig+0x12c>)
 8013488:	4293      	cmp	r3, r2
 801348a:	d013      	beq.n	80134b4 <TIM_Base_SetConfig+0x40>
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013492:	d00f      	beq.n	80134b4 <TIM_Base_SetConfig+0x40>
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	4a43      	ldr	r2, [pc, #268]	; (80135a4 <TIM_Base_SetConfig+0x130>)
 8013498:	4293      	cmp	r3, r2
 801349a:	d00b      	beq.n	80134b4 <TIM_Base_SetConfig+0x40>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	4a42      	ldr	r2, [pc, #264]	; (80135a8 <TIM_Base_SetConfig+0x134>)
 80134a0:	4293      	cmp	r3, r2
 80134a2:	d007      	beq.n	80134b4 <TIM_Base_SetConfig+0x40>
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	4a41      	ldr	r2, [pc, #260]	; (80135ac <TIM_Base_SetConfig+0x138>)
 80134a8:	4293      	cmp	r3, r2
 80134aa:	d003      	beq.n	80134b4 <TIM_Base_SetConfig+0x40>
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	4a40      	ldr	r2, [pc, #256]	; (80135b0 <TIM_Base_SetConfig+0x13c>)
 80134b0:	4293      	cmp	r3, r2
 80134b2:	d108      	bne.n	80134c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80134ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	685b      	ldr	r3, [r3, #4]
 80134c0:	68fa      	ldr	r2, [r7, #12]
 80134c2:	4313      	orrs	r3, r2
 80134c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	4a35      	ldr	r2, [pc, #212]	; (80135a0 <TIM_Base_SetConfig+0x12c>)
 80134ca:	4293      	cmp	r3, r2
 80134cc:	d01f      	beq.n	801350e <TIM_Base_SetConfig+0x9a>
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80134d4:	d01b      	beq.n	801350e <TIM_Base_SetConfig+0x9a>
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	4a32      	ldr	r2, [pc, #200]	; (80135a4 <TIM_Base_SetConfig+0x130>)
 80134da:	4293      	cmp	r3, r2
 80134dc:	d017      	beq.n	801350e <TIM_Base_SetConfig+0x9a>
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	4a31      	ldr	r2, [pc, #196]	; (80135a8 <TIM_Base_SetConfig+0x134>)
 80134e2:	4293      	cmp	r3, r2
 80134e4:	d013      	beq.n	801350e <TIM_Base_SetConfig+0x9a>
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	4a30      	ldr	r2, [pc, #192]	; (80135ac <TIM_Base_SetConfig+0x138>)
 80134ea:	4293      	cmp	r3, r2
 80134ec:	d00f      	beq.n	801350e <TIM_Base_SetConfig+0x9a>
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	4a2f      	ldr	r2, [pc, #188]	; (80135b0 <TIM_Base_SetConfig+0x13c>)
 80134f2:	4293      	cmp	r3, r2
 80134f4:	d00b      	beq.n	801350e <TIM_Base_SetConfig+0x9a>
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	4a2e      	ldr	r2, [pc, #184]	; (80135b4 <TIM_Base_SetConfig+0x140>)
 80134fa:	4293      	cmp	r3, r2
 80134fc:	d007      	beq.n	801350e <TIM_Base_SetConfig+0x9a>
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	4a2d      	ldr	r2, [pc, #180]	; (80135b8 <TIM_Base_SetConfig+0x144>)
 8013502:	4293      	cmp	r3, r2
 8013504:	d003      	beq.n	801350e <TIM_Base_SetConfig+0x9a>
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	4a2c      	ldr	r2, [pc, #176]	; (80135bc <TIM_Base_SetConfig+0x148>)
 801350a:	4293      	cmp	r3, r2
 801350c:	d108      	bne.n	8013520 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	68db      	ldr	r3, [r3, #12]
 801351a:	68fa      	ldr	r2, [r7, #12]
 801351c:	4313      	orrs	r3, r2
 801351e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	695b      	ldr	r3, [r3, #20]
 801352a:	4313      	orrs	r3, r2
 801352c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	68fa      	ldr	r2, [r7, #12]
 8013532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	689a      	ldr	r2, [r3, #8]
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	681a      	ldr	r2, [r3, #0]
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	4a16      	ldr	r2, [pc, #88]	; (80135a0 <TIM_Base_SetConfig+0x12c>)
 8013548:	4293      	cmp	r3, r2
 801354a:	d00f      	beq.n	801356c <TIM_Base_SetConfig+0xf8>
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	4a18      	ldr	r2, [pc, #96]	; (80135b0 <TIM_Base_SetConfig+0x13c>)
 8013550:	4293      	cmp	r3, r2
 8013552:	d00b      	beq.n	801356c <TIM_Base_SetConfig+0xf8>
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	4a17      	ldr	r2, [pc, #92]	; (80135b4 <TIM_Base_SetConfig+0x140>)
 8013558:	4293      	cmp	r3, r2
 801355a:	d007      	beq.n	801356c <TIM_Base_SetConfig+0xf8>
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	4a16      	ldr	r2, [pc, #88]	; (80135b8 <TIM_Base_SetConfig+0x144>)
 8013560:	4293      	cmp	r3, r2
 8013562:	d003      	beq.n	801356c <TIM_Base_SetConfig+0xf8>
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	4a15      	ldr	r2, [pc, #84]	; (80135bc <TIM_Base_SetConfig+0x148>)
 8013568:	4293      	cmp	r3, r2
 801356a:	d103      	bne.n	8013574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	691a      	ldr	r2, [r3, #16]
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	2201      	movs	r2, #1
 8013578:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	691b      	ldr	r3, [r3, #16]
 801357e:	f003 0301 	and.w	r3, r3, #1
 8013582:	2b01      	cmp	r3, #1
 8013584:	d105      	bne.n	8013592 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	691b      	ldr	r3, [r3, #16]
 801358a:	f023 0201 	bic.w	r2, r3, #1
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	611a      	str	r2, [r3, #16]
  }
}
 8013592:	bf00      	nop
 8013594:	3714      	adds	r7, #20
 8013596:	46bd      	mov	sp, r7
 8013598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359c:	4770      	bx	lr
 801359e:	bf00      	nop
 80135a0:	40010000 	.word	0x40010000
 80135a4:	40000400 	.word	0x40000400
 80135a8:	40000800 	.word	0x40000800
 80135ac:	40000c00 	.word	0x40000c00
 80135b0:	40010400 	.word	0x40010400
 80135b4:	40014000 	.word	0x40014000
 80135b8:	40014400 	.word	0x40014400
 80135bc:	40014800 	.word	0x40014800

080135c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80135c0:	b480      	push	{r7}
 80135c2:	b087      	sub	sp, #28
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	6a1b      	ldr	r3, [r3, #32]
 80135ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	6a1b      	ldr	r3, [r3, #32]
 80135d4:	f023 0201 	bic.w	r2, r3, #1
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	685b      	ldr	r3, [r3, #4]
 80135e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	699b      	ldr	r3, [r3, #24]
 80135e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80135e8:	68fa      	ldr	r2, [r7, #12]
 80135ea:	4b37      	ldr	r3, [pc, #220]	; (80136c8 <TIM_OC1_SetConfig+0x108>)
 80135ec:	4013      	ands	r3, r2
 80135ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	f023 0303 	bic.w	r3, r3, #3
 80135f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	68fa      	ldr	r2, [r7, #12]
 80135fe:	4313      	orrs	r3, r2
 8013600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013602:	697b      	ldr	r3, [r7, #20]
 8013604:	f023 0302 	bic.w	r3, r3, #2
 8013608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	689b      	ldr	r3, [r3, #8]
 801360e:	697a      	ldr	r2, [r7, #20]
 8013610:	4313      	orrs	r3, r2
 8013612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	4a2d      	ldr	r2, [pc, #180]	; (80136cc <TIM_OC1_SetConfig+0x10c>)
 8013618:	4293      	cmp	r3, r2
 801361a:	d00f      	beq.n	801363c <TIM_OC1_SetConfig+0x7c>
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	4a2c      	ldr	r2, [pc, #176]	; (80136d0 <TIM_OC1_SetConfig+0x110>)
 8013620:	4293      	cmp	r3, r2
 8013622:	d00b      	beq.n	801363c <TIM_OC1_SetConfig+0x7c>
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	4a2b      	ldr	r2, [pc, #172]	; (80136d4 <TIM_OC1_SetConfig+0x114>)
 8013628:	4293      	cmp	r3, r2
 801362a:	d007      	beq.n	801363c <TIM_OC1_SetConfig+0x7c>
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	4a2a      	ldr	r2, [pc, #168]	; (80136d8 <TIM_OC1_SetConfig+0x118>)
 8013630:	4293      	cmp	r3, r2
 8013632:	d003      	beq.n	801363c <TIM_OC1_SetConfig+0x7c>
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	4a29      	ldr	r2, [pc, #164]	; (80136dc <TIM_OC1_SetConfig+0x11c>)
 8013638:	4293      	cmp	r3, r2
 801363a:	d10c      	bne.n	8013656 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801363c:	697b      	ldr	r3, [r7, #20]
 801363e:	f023 0308 	bic.w	r3, r3, #8
 8013642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	68db      	ldr	r3, [r3, #12]
 8013648:	697a      	ldr	r2, [r7, #20]
 801364a:	4313      	orrs	r3, r2
 801364c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	f023 0304 	bic.w	r3, r3, #4
 8013654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	4a1c      	ldr	r2, [pc, #112]	; (80136cc <TIM_OC1_SetConfig+0x10c>)
 801365a:	4293      	cmp	r3, r2
 801365c:	d00f      	beq.n	801367e <TIM_OC1_SetConfig+0xbe>
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	4a1b      	ldr	r2, [pc, #108]	; (80136d0 <TIM_OC1_SetConfig+0x110>)
 8013662:	4293      	cmp	r3, r2
 8013664:	d00b      	beq.n	801367e <TIM_OC1_SetConfig+0xbe>
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	4a1a      	ldr	r2, [pc, #104]	; (80136d4 <TIM_OC1_SetConfig+0x114>)
 801366a:	4293      	cmp	r3, r2
 801366c:	d007      	beq.n	801367e <TIM_OC1_SetConfig+0xbe>
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	4a19      	ldr	r2, [pc, #100]	; (80136d8 <TIM_OC1_SetConfig+0x118>)
 8013672:	4293      	cmp	r3, r2
 8013674:	d003      	beq.n	801367e <TIM_OC1_SetConfig+0xbe>
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	4a18      	ldr	r2, [pc, #96]	; (80136dc <TIM_OC1_SetConfig+0x11c>)
 801367a:	4293      	cmp	r3, r2
 801367c:	d111      	bne.n	80136a2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801367e:	693b      	ldr	r3, [r7, #16]
 8013680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013686:	693b      	ldr	r3, [r7, #16]
 8013688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801368c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801368e:	683b      	ldr	r3, [r7, #0]
 8013690:	695b      	ldr	r3, [r3, #20]
 8013692:	693a      	ldr	r2, [r7, #16]
 8013694:	4313      	orrs	r3, r2
 8013696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	699b      	ldr	r3, [r3, #24]
 801369c:	693a      	ldr	r2, [r7, #16]
 801369e:	4313      	orrs	r3, r2
 80136a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	693a      	ldr	r2, [r7, #16]
 80136a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	68fa      	ldr	r2, [r7, #12]
 80136ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	685a      	ldr	r2, [r3, #4]
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	697a      	ldr	r2, [r7, #20]
 80136ba:	621a      	str	r2, [r3, #32]
}
 80136bc:	bf00      	nop
 80136be:	371c      	adds	r7, #28
 80136c0:	46bd      	mov	sp, r7
 80136c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c6:	4770      	bx	lr
 80136c8:	fffeff8f 	.word	0xfffeff8f
 80136cc:	40010000 	.word	0x40010000
 80136d0:	40010400 	.word	0x40010400
 80136d4:	40014000 	.word	0x40014000
 80136d8:	40014400 	.word	0x40014400
 80136dc:	40014800 	.word	0x40014800

080136e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80136e0:	b480      	push	{r7}
 80136e2:	b087      	sub	sp, #28
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
 80136e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6a1b      	ldr	r3, [r3, #32]
 80136ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	6a1b      	ldr	r3, [r3, #32]
 80136f4:	f023 0210 	bic.w	r2, r3, #16
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	699b      	ldr	r3, [r3, #24]
 8013706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013708:	68fa      	ldr	r2, [r7, #12]
 801370a:	4b34      	ldr	r3, [pc, #208]	; (80137dc <TIM_OC2_SetConfig+0xfc>)
 801370c:	4013      	ands	r3, r2
 801370e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	021b      	lsls	r3, r3, #8
 801371e:	68fa      	ldr	r2, [r7, #12]
 8013720:	4313      	orrs	r3, r2
 8013722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013724:	697b      	ldr	r3, [r7, #20]
 8013726:	f023 0320 	bic.w	r3, r3, #32
 801372a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	689b      	ldr	r3, [r3, #8]
 8013730:	011b      	lsls	r3, r3, #4
 8013732:	697a      	ldr	r2, [r7, #20]
 8013734:	4313      	orrs	r3, r2
 8013736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	4a29      	ldr	r2, [pc, #164]	; (80137e0 <TIM_OC2_SetConfig+0x100>)
 801373c:	4293      	cmp	r3, r2
 801373e:	d003      	beq.n	8013748 <TIM_OC2_SetConfig+0x68>
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	4a28      	ldr	r2, [pc, #160]	; (80137e4 <TIM_OC2_SetConfig+0x104>)
 8013744:	4293      	cmp	r3, r2
 8013746:	d10d      	bne.n	8013764 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013748:	697b      	ldr	r3, [r7, #20]
 801374a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801374e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	68db      	ldr	r3, [r3, #12]
 8013754:	011b      	lsls	r3, r3, #4
 8013756:	697a      	ldr	r2, [r7, #20]
 8013758:	4313      	orrs	r3, r2
 801375a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013762:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	4a1e      	ldr	r2, [pc, #120]	; (80137e0 <TIM_OC2_SetConfig+0x100>)
 8013768:	4293      	cmp	r3, r2
 801376a:	d00f      	beq.n	801378c <TIM_OC2_SetConfig+0xac>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	4a1d      	ldr	r2, [pc, #116]	; (80137e4 <TIM_OC2_SetConfig+0x104>)
 8013770:	4293      	cmp	r3, r2
 8013772:	d00b      	beq.n	801378c <TIM_OC2_SetConfig+0xac>
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	4a1c      	ldr	r2, [pc, #112]	; (80137e8 <TIM_OC2_SetConfig+0x108>)
 8013778:	4293      	cmp	r3, r2
 801377a:	d007      	beq.n	801378c <TIM_OC2_SetConfig+0xac>
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	4a1b      	ldr	r2, [pc, #108]	; (80137ec <TIM_OC2_SetConfig+0x10c>)
 8013780:	4293      	cmp	r3, r2
 8013782:	d003      	beq.n	801378c <TIM_OC2_SetConfig+0xac>
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	4a1a      	ldr	r2, [pc, #104]	; (80137f0 <TIM_OC2_SetConfig+0x110>)
 8013788:	4293      	cmp	r3, r2
 801378a:	d113      	bne.n	80137b4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801378c:	693b      	ldr	r3, [r7, #16]
 801378e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013792:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013794:	693b      	ldr	r3, [r7, #16]
 8013796:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801379a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	695b      	ldr	r3, [r3, #20]
 80137a0:	009b      	lsls	r3, r3, #2
 80137a2:	693a      	ldr	r2, [r7, #16]
 80137a4:	4313      	orrs	r3, r2
 80137a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	699b      	ldr	r3, [r3, #24]
 80137ac:	009b      	lsls	r3, r3, #2
 80137ae:	693a      	ldr	r2, [r7, #16]
 80137b0:	4313      	orrs	r3, r2
 80137b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	693a      	ldr	r2, [r7, #16]
 80137b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	68fa      	ldr	r2, [r7, #12]
 80137be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	685a      	ldr	r2, [r3, #4]
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	697a      	ldr	r2, [r7, #20]
 80137cc:	621a      	str	r2, [r3, #32]
}
 80137ce:	bf00      	nop
 80137d0:	371c      	adds	r7, #28
 80137d2:	46bd      	mov	sp, r7
 80137d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d8:	4770      	bx	lr
 80137da:	bf00      	nop
 80137dc:	feff8fff 	.word	0xfeff8fff
 80137e0:	40010000 	.word	0x40010000
 80137e4:	40010400 	.word	0x40010400
 80137e8:	40014000 	.word	0x40014000
 80137ec:	40014400 	.word	0x40014400
 80137f0:	40014800 	.word	0x40014800

080137f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80137f4:	b480      	push	{r7}
 80137f6:	b087      	sub	sp, #28
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6a1b      	ldr	r3, [r3, #32]
 8013802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6a1b      	ldr	r3, [r3, #32]
 8013808:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	685b      	ldr	r3, [r3, #4]
 8013814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	69db      	ldr	r3, [r3, #28]
 801381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801381c:	68fa      	ldr	r2, [r7, #12]
 801381e:	4b33      	ldr	r3, [pc, #204]	; (80138ec <TIM_OC3_SetConfig+0xf8>)
 8013820:	4013      	ands	r3, r2
 8013822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	f023 0303 	bic.w	r3, r3, #3
 801382a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	68fa      	ldr	r2, [r7, #12]
 8013832:	4313      	orrs	r3, r2
 8013834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013836:	697b      	ldr	r3, [r7, #20]
 8013838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801383c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	689b      	ldr	r3, [r3, #8]
 8013842:	021b      	lsls	r3, r3, #8
 8013844:	697a      	ldr	r2, [r7, #20]
 8013846:	4313      	orrs	r3, r2
 8013848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	4a28      	ldr	r2, [pc, #160]	; (80138f0 <TIM_OC3_SetConfig+0xfc>)
 801384e:	4293      	cmp	r3, r2
 8013850:	d003      	beq.n	801385a <TIM_OC3_SetConfig+0x66>
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	4a27      	ldr	r2, [pc, #156]	; (80138f4 <TIM_OC3_SetConfig+0x100>)
 8013856:	4293      	cmp	r3, r2
 8013858:	d10d      	bne.n	8013876 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801385a:	697b      	ldr	r3, [r7, #20]
 801385c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013860:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	68db      	ldr	r3, [r3, #12]
 8013866:	021b      	lsls	r3, r3, #8
 8013868:	697a      	ldr	r2, [r7, #20]
 801386a:	4313      	orrs	r3, r2
 801386c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801386e:	697b      	ldr	r3, [r7, #20]
 8013870:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013874:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	4a1d      	ldr	r2, [pc, #116]	; (80138f0 <TIM_OC3_SetConfig+0xfc>)
 801387a:	4293      	cmp	r3, r2
 801387c:	d00f      	beq.n	801389e <TIM_OC3_SetConfig+0xaa>
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	4a1c      	ldr	r2, [pc, #112]	; (80138f4 <TIM_OC3_SetConfig+0x100>)
 8013882:	4293      	cmp	r3, r2
 8013884:	d00b      	beq.n	801389e <TIM_OC3_SetConfig+0xaa>
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	4a1b      	ldr	r2, [pc, #108]	; (80138f8 <TIM_OC3_SetConfig+0x104>)
 801388a:	4293      	cmp	r3, r2
 801388c:	d007      	beq.n	801389e <TIM_OC3_SetConfig+0xaa>
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	4a1a      	ldr	r2, [pc, #104]	; (80138fc <TIM_OC3_SetConfig+0x108>)
 8013892:	4293      	cmp	r3, r2
 8013894:	d003      	beq.n	801389e <TIM_OC3_SetConfig+0xaa>
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	4a19      	ldr	r2, [pc, #100]	; (8013900 <TIM_OC3_SetConfig+0x10c>)
 801389a:	4293      	cmp	r3, r2
 801389c:	d113      	bne.n	80138c6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801389e:	693b      	ldr	r3, [r7, #16]
 80138a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80138a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80138a6:	693b      	ldr	r3, [r7, #16]
 80138a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80138ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80138ae:	683b      	ldr	r3, [r7, #0]
 80138b0:	695b      	ldr	r3, [r3, #20]
 80138b2:	011b      	lsls	r3, r3, #4
 80138b4:	693a      	ldr	r2, [r7, #16]
 80138b6:	4313      	orrs	r3, r2
 80138b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	699b      	ldr	r3, [r3, #24]
 80138be:	011b      	lsls	r3, r3, #4
 80138c0:	693a      	ldr	r2, [r7, #16]
 80138c2:	4313      	orrs	r3, r2
 80138c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	693a      	ldr	r2, [r7, #16]
 80138ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	68fa      	ldr	r2, [r7, #12]
 80138d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80138d2:	683b      	ldr	r3, [r7, #0]
 80138d4:	685a      	ldr	r2, [r3, #4]
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	697a      	ldr	r2, [r7, #20]
 80138de:	621a      	str	r2, [r3, #32]
}
 80138e0:	bf00      	nop
 80138e2:	371c      	adds	r7, #28
 80138e4:	46bd      	mov	sp, r7
 80138e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ea:	4770      	bx	lr
 80138ec:	fffeff8f 	.word	0xfffeff8f
 80138f0:	40010000 	.word	0x40010000
 80138f4:	40010400 	.word	0x40010400
 80138f8:	40014000 	.word	0x40014000
 80138fc:	40014400 	.word	0x40014400
 8013900:	40014800 	.word	0x40014800

08013904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013904:	b480      	push	{r7}
 8013906:	b087      	sub	sp, #28
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6a1b      	ldr	r3, [r3, #32]
 8013912:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6a1b      	ldr	r3, [r3, #32]
 8013918:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	69db      	ldr	r3, [r3, #28]
 801392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801392c:	68fa      	ldr	r2, [r7, #12]
 801392e:	4b24      	ldr	r3, [pc, #144]	; (80139c0 <TIM_OC4_SetConfig+0xbc>)
 8013930:	4013      	ands	r3, r2
 8013932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801393a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	021b      	lsls	r3, r3, #8
 8013942:	68fa      	ldr	r2, [r7, #12]
 8013944:	4313      	orrs	r3, r2
 8013946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013948:	693b      	ldr	r3, [r7, #16]
 801394a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801394e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013950:	683b      	ldr	r3, [r7, #0]
 8013952:	689b      	ldr	r3, [r3, #8]
 8013954:	031b      	lsls	r3, r3, #12
 8013956:	693a      	ldr	r2, [r7, #16]
 8013958:	4313      	orrs	r3, r2
 801395a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	4a19      	ldr	r2, [pc, #100]	; (80139c4 <TIM_OC4_SetConfig+0xc0>)
 8013960:	4293      	cmp	r3, r2
 8013962:	d00f      	beq.n	8013984 <TIM_OC4_SetConfig+0x80>
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	4a18      	ldr	r2, [pc, #96]	; (80139c8 <TIM_OC4_SetConfig+0xc4>)
 8013968:	4293      	cmp	r3, r2
 801396a:	d00b      	beq.n	8013984 <TIM_OC4_SetConfig+0x80>
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	4a17      	ldr	r2, [pc, #92]	; (80139cc <TIM_OC4_SetConfig+0xc8>)
 8013970:	4293      	cmp	r3, r2
 8013972:	d007      	beq.n	8013984 <TIM_OC4_SetConfig+0x80>
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	4a16      	ldr	r2, [pc, #88]	; (80139d0 <TIM_OC4_SetConfig+0xcc>)
 8013978:	4293      	cmp	r3, r2
 801397a:	d003      	beq.n	8013984 <TIM_OC4_SetConfig+0x80>
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	4a15      	ldr	r2, [pc, #84]	; (80139d4 <TIM_OC4_SetConfig+0xd0>)
 8013980:	4293      	cmp	r3, r2
 8013982:	d109      	bne.n	8013998 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801398a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	695b      	ldr	r3, [r3, #20]
 8013990:	019b      	lsls	r3, r3, #6
 8013992:	697a      	ldr	r2, [r7, #20]
 8013994:	4313      	orrs	r3, r2
 8013996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	697a      	ldr	r2, [r7, #20]
 801399c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	68fa      	ldr	r2, [r7, #12]
 80139a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	685a      	ldr	r2, [r3, #4]
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	693a      	ldr	r2, [r7, #16]
 80139b0:	621a      	str	r2, [r3, #32]
}
 80139b2:	bf00      	nop
 80139b4:	371c      	adds	r7, #28
 80139b6:	46bd      	mov	sp, r7
 80139b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139bc:	4770      	bx	lr
 80139be:	bf00      	nop
 80139c0:	feff8fff 	.word	0xfeff8fff
 80139c4:	40010000 	.word	0x40010000
 80139c8:	40010400 	.word	0x40010400
 80139cc:	40014000 	.word	0x40014000
 80139d0:	40014400 	.word	0x40014400
 80139d4:	40014800 	.word	0x40014800

080139d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80139d8:	b480      	push	{r7}
 80139da:	b087      	sub	sp, #28
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
 80139e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	6a1b      	ldr	r3, [r3, #32]
 80139e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	6a1b      	ldr	r3, [r3, #32]
 80139ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	685b      	ldr	r3, [r3, #4]
 80139f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80139fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013a00:	68fa      	ldr	r2, [r7, #12]
 8013a02:	4b21      	ldr	r3, [pc, #132]	; (8013a88 <TIM_OC5_SetConfig+0xb0>)
 8013a04:	4013      	ands	r3, r2
 8013a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	68fa      	ldr	r2, [r7, #12]
 8013a0e:	4313      	orrs	r3, r2
 8013a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013a12:	693b      	ldr	r3, [r7, #16]
 8013a14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013a18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	689b      	ldr	r3, [r3, #8]
 8013a1e:	041b      	lsls	r3, r3, #16
 8013a20:	693a      	ldr	r2, [r7, #16]
 8013a22:	4313      	orrs	r3, r2
 8013a24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	4a18      	ldr	r2, [pc, #96]	; (8013a8c <TIM_OC5_SetConfig+0xb4>)
 8013a2a:	4293      	cmp	r3, r2
 8013a2c:	d00f      	beq.n	8013a4e <TIM_OC5_SetConfig+0x76>
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	4a17      	ldr	r2, [pc, #92]	; (8013a90 <TIM_OC5_SetConfig+0xb8>)
 8013a32:	4293      	cmp	r3, r2
 8013a34:	d00b      	beq.n	8013a4e <TIM_OC5_SetConfig+0x76>
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	4a16      	ldr	r2, [pc, #88]	; (8013a94 <TIM_OC5_SetConfig+0xbc>)
 8013a3a:	4293      	cmp	r3, r2
 8013a3c:	d007      	beq.n	8013a4e <TIM_OC5_SetConfig+0x76>
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	4a15      	ldr	r2, [pc, #84]	; (8013a98 <TIM_OC5_SetConfig+0xc0>)
 8013a42:	4293      	cmp	r3, r2
 8013a44:	d003      	beq.n	8013a4e <TIM_OC5_SetConfig+0x76>
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	4a14      	ldr	r2, [pc, #80]	; (8013a9c <TIM_OC5_SetConfig+0xc4>)
 8013a4a:	4293      	cmp	r3, r2
 8013a4c:	d109      	bne.n	8013a62 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013a54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	695b      	ldr	r3, [r3, #20]
 8013a5a:	021b      	lsls	r3, r3, #8
 8013a5c:	697a      	ldr	r2, [r7, #20]
 8013a5e:	4313      	orrs	r3, r2
 8013a60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	697a      	ldr	r2, [r7, #20]
 8013a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	68fa      	ldr	r2, [r7, #12]
 8013a6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013a6e:	683b      	ldr	r3, [r7, #0]
 8013a70:	685a      	ldr	r2, [r3, #4]
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	693a      	ldr	r2, [r7, #16]
 8013a7a:	621a      	str	r2, [r3, #32]
}
 8013a7c:	bf00      	nop
 8013a7e:	371c      	adds	r7, #28
 8013a80:	46bd      	mov	sp, r7
 8013a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a86:	4770      	bx	lr
 8013a88:	fffeff8f 	.word	0xfffeff8f
 8013a8c:	40010000 	.word	0x40010000
 8013a90:	40010400 	.word	0x40010400
 8013a94:	40014000 	.word	0x40014000
 8013a98:	40014400 	.word	0x40014400
 8013a9c:	40014800 	.word	0x40014800

08013aa0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013aa0:	b480      	push	{r7}
 8013aa2:	b087      	sub	sp, #28
 8013aa4:	af00      	add	r7, sp, #0
 8013aa6:	6078      	str	r0, [r7, #4]
 8013aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	6a1b      	ldr	r3, [r3, #32]
 8013aae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6a1b      	ldr	r3, [r3, #32]
 8013ab4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	685b      	ldr	r3, [r3, #4]
 8013ac0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013ac8:	68fa      	ldr	r2, [r7, #12]
 8013aca:	4b22      	ldr	r3, [pc, #136]	; (8013b54 <TIM_OC6_SetConfig+0xb4>)
 8013acc:	4013      	ands	r3, r2
 8013ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013ad0:	683b      	ldr	r3, [r7, #0]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	021b      	lsls	r3, r3, #8
 8013ad6:	68fa      	ldr	r2, [r7, #12]
 8013ad8:	4313      	orrs	r3, r2
 8013ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013adc:	693b      	ldr	r3, [r7, #16]
 8013ade:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013ae2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013ae4:	683b      	ldr	r3, [r7, #0]
 8013ae6:	689b      	ldr	r3, [r3, #8]
 8013ae8:	051b      	lsls	r3, r3, #20
 8013aea:	693a      	ldr	r2, [r7, #16]
 8013aec:	4313      	orrs	r3, r2
 8013aee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	4a19      	ldr	r2, [pc, #100]	; (8013b58 <TIM_OC6_SetConfig+0xb8>)
 8013af4:	4293      	cmp	r3, r2
 8013af6:	d00f      	beq.n	8013b18 <TIM_OC6_SetConfig+0x78>
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	4a18      	ldr	r2, [pc, #96]	; (8013b5c <TIM_OC6_SetConfig+0xbc>)
 8013afc:	4293      	cmp	r3, r2
 8013afe:	d00b      	beq.n	8013b18 <TIM_OC6_SetConfig+0x78>
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	4a17      	ldr	r2, [pc, #92]	; (8013b60 <TIM_OC6_SetConfig+0xc0>)
 8013b04:	4293      	cmp	r3, r2
 8013b06:	d007      	beq.n	8013b18 <TIM_OC6_SetConfig+0x78>
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	4a16      	ldr	r2, [pc, #88]	; (8013b64 <TIM_OC6_SetConfig+0xc4>)
 8013b0c:	4293      	cmp	r3, r2
 8013b0e:	d003      	beq.n	8013b18 <TIM_OC6_SetConfig+0x78>
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	4a15      	ldr	r2, [pc, #84]	; (8013b68 <TIM_OC6_SetConfig+0xc8>)
 8013b14:	4293      	cmp	r3, r2
 8013b16:	d109      	bne.n	8013b2c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013b18:	697b      	ldr	r3, [r7, #20]
 8013b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	695b      	ldr	r3, [r3, #20]
 8013b24:	029b      	lsls	r3, r3, #10
 8013b26:	697a      	ldr	r2, [r7, #20]
 8013b28:	4313      	orrs	r3, r2
 8013b2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	697a      	ldr	r2, [r7, #20]
 8013b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	68fa      	ldr	r2, [r7, #12]
 8013b36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013b38:	683b      	ldr	r3, [r7, #0]
 8013b3a:	685a      	ldr	r2, [r3, #4]
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	693a      	ldr	r2, [r7, #16]
 8013b44:	621a      	str	r2, [r3, #32]
}
 8013b46:	bf00      	nop
 8013b48:	371c      	adds	r7, #28
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b50:	4770      	bx	lr
 8013b52:	bf00      	nop
 8013b54:	feff8fff 	.word	0xfeff8fff
 8013b58:	40010000 	.word	0x40010000
 8013b5c:	40010400 	.word	0x40010400
 8013b60:	40014000 	.word	0x40014000
 8013b64:	40014400 	.word	0x40014400
 8013b68:	40014800 	.word	0x40014800

08013b6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013b6c:	b480      	push	{r7}
 8013b6e:	b087      	sub	sp, #28
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	60f8      	str	r0, [r7, #12]
 8013b74:	60b9      	str	r1, [r7, #8]
 8013b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	6a1b      	ldr	r3, [r3, #32]
 8013b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	6a1b      	ldr	r3, [r3, #32]
 8013b82:	f023 0201 	bic.w	r2, r3, #1
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	699b      	ldr	r3, [r3, #24]
 8013b8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8013b90:	693b      	ldr	r3, [r7, #16]
 8013b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	011b      	lsls	r3, r3, #4
 8013b9c:	693a      	ldr	r2, [r7, #16]
 8013b9e:	4313      	orrs	r3, r2
 8013ba0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	f023 030a 	bic.w	r3, r3, #10
 8013ba8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013baa:	697a      	ldr	r2, [r7, #20]
 8013bac:	68bb      	ldr	r3, [r7, #8]
 8013bae:	4313      	orrs	r3, r2
 8013bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	693a      	ldr	r2, [r7, #16]
 8013bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	697a      	ldr	r2, [r7, #20]
 8013bbc:	621a      	str	r2, [r3, #32]
}
 8013bbe:	bf00      	nop
 8013bc0:	371c      	adds	r7, #28
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc8:	4770      	bx	lr

08013bca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013bca:	b480      	push	{r7}
 8013bcc:	b087      	sub	sp, #28
 8013bce:	af00      	add	r7, sp, #0
 8013bd0:	60f8      	str	r0, [r7, #12]
 8013bd2:	60b9      	str	r1, [r7, #8]
 8013bd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	6a1b      	ldr	r3, [r3, #32]
 8013bda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	6a1b      	ldr	r3, [r3, #32]
 8013be0:	f023 0210 	bic.w	r2, r3, #16
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	699b      	ldr	r3, [r3, #24]
 8013bec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013bee:	693b      	ldr	r3, [r7, #16]
 8013bf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013bf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	031b      	lsls	r3, r3, #12
 8013bfa:	693a      	ldr	r2, [r7, #16]
 8013bfc:	4313      	orrs	r3, r2
 8013bfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013c06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	011b      	lsls	r3, r3, #4
 8013c0c:	697a      	ldr	r2, [r7, #20]
 8013c0e:	4313      	orrs	r3, r2
 8013c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	693a      	ldr	r2, [r7, #16]
 8013c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	697a      	ldr	r2, [r7, #20]
 8013c1c:	621a      	str	r2, [r3, #32]
}
 8013c1e:	bf00      	nop
 8013c20:	371c      	adds	r7, #28
 8013c22:	46bd      	mov	sp, r7
 8013c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c28:	4770      	bx	lr
	...

08013c2c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	b085      	sub	sp, #20
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
 8013c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	689b      	ldr	r3, [r3, #8]
 8013c3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013c3c:	68fa      	ldr	r2, [r7, #12]
 8013c3e:	4b09      	ldr	r3, [pc, #36]	; (8013c64 <TIM_ITRx_SetConfig+0x38>)
 8013c40:	4013      	ands	r3, r2
 8013c42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013c44:	683a      	ldr	r2, [r7, #0]
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	4313      	orrs	r3, r2
 8013c4a:	f043 0307 	orr.w	r3, r3, #7
 8013c4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	68fa      	ldr	r2, [r7, #12]
 8013c54:	609a      	str	r2, [r3, #8]
}
 8013c56:	bf00      	nop
 8013c58:	3714      	adds	r7, #20
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c60:	4770      	bx	lr
 8013c62:	bf00      	nop
 8013c64:	ffcfff8f 	.word	0xffcfff8f

08013c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013c68:	b480      	push	{r7}
 8013c6a:	b087      	sub	sp, #28
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	60f8      	str	r0, [r7, #12]
 8013c70:	60b9      	str	r1, [r7, #8]
 8013c72:	607a      	str	r2, [r7, #4]
 8013c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	689b      	ldr	r3, [r3, #8]
 8013c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	021a      	lsls	r2, r3, #8
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	431a      	orrs	r2, r3
 8013c8c:	68bb      	ldr	r3, [r7, #8]
 8013c8e:	4313      	orrs	r3, r2
 8013c90:	697a      	ldr	r2, [r7, #20]
 8013c92:	4313      	orrs	r3, r2
 8013c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	697a      	ldr	r2, [r7, #20]
 8013c9a:	609a      	str	r2, [r3, #8]
}
 8013c9c:	bf00      	nop
 8013c9e:	371c      	adds	r7, #28
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca6:	4770      	bx	lr

08013ca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013ca8:	b480      	push	{r7}
 8013caa:	b087      	sub	sp, #28
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	60f8      	str	r0, [r7, #12]
 8013cb0:	60b9      	str	r1, [r7, #8]
 8013cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013cb4:	68bb      	ldr	r3, [r7, #8]
 8013cb6:	f003 031f 	and.w	r3, r3, #31
 8013cba:	2201      	movs	r2, #1
 8013cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8013cc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	6a1a      	ldr	r2, [r3, #32]
 8013cc6:	697b      	ldr	r3, [r7, #20]
 8013cc8:	43db      	mvns	r3, r3
 8013cca:	401a      	ands	r2, r3
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	6a1a      	ldr	r2, [r3, #32]
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	f003 031f 	and.w	r3, r3, #31
 8013cda:	6879      	ldr	r1, [r7, #4]
 8013cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8013ce0:	431a      	orrs	r2, r3
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	621a      	str	r2, [r3, #32]
}
 8013ce6:	bf00      	nop
 8013ce8:	371c      	adds	r7, #28
 8013cea:	46bd      	mov	sp, r7
 8013cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf0:	4770      	bx	lr
	...

08013cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013cf4:	b480      	push	{r7}
 8013cf6:	b085      	sub	sp, #20
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
 8013cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013d04:	2b01      	cmp	r3, #1
 8013d06:	d101      	bne.n	8013d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013d08:	2302      	movs	r3, #2
 8013d0a:	e06d      	b.n	8013de8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	2201      	movs	r2, #1
 8013d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	2202      	movs	r2, #2
 8013d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	685b      	ldr	r3, [r3, #4]
 8013d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	689b      	ldr	r3, [r3, #8]
 8013d2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	4a30      	ldr	r2, [pc, #192]	; (8013df4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013d32:	4293      	cmp	r3, r2
 8013d34:	d004      	beq.n	8013d40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	4a2f      	ldr	r2, [pc, #188]	; (8013df8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013d3c:	4293      	cmp	r3, r2
 8013d3e:	d108      	bne.n	8013d52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013d46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	685b      	ldr	r3, [r3, #4]
 8013d4c:	68fa      	ldr	r2, [r7, #12]
 8013d4e:	4313      	orrs	r3, r2
 8013d50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013d58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013d5a:	683b      	ldr	r3, [r7, #0]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	68fa      	ldr	r2, [r7, #12]
 8013d60:	4313      	orrs	r3, r2
 8013d62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	68fa      	ldr	r2, [r7, #12]
 8013d6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	4a20      	ldr	r2, [pc, #128]	; (8013df4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013d72:	4293      	cmp	r3, r2
 8013d74:	d022      	beq.n	8013dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d7e:	d01d      	beq.n	8013dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	4a1d      	ldr	r2, [pc, #116]	; (8013dfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013d86:	4293      	cmp	r3, r2
 8013d88:	d018      	beq.n	8013dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	4a1c      	ldr	r2, [pc, #112]	; (8013e00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013d90:	4293      	cmp	r3, r2
 8013d92:	d013      	beq.n	8013dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	4a1a      	ldr	r2, [pc, #104]	; (8013e04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013d9a:	4293      	cmp	r3, r2
 8013d9c:	d00e      	beq.n	8013dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	4a15      	ldr	r2, [pc, #84]	; (8013df8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013da4:	4293      	cmp	r3, r2
 8013da6:	d009      	beq.n	8013dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	4a16      	ldr	r2, [pc, #88]	; (8013e08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013dae:	4293      	cmp	r3, r2
 8013db0:	d004      	beq.n	8013dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	4a15      	ldr	r2, [pc, #84]	; (8013e0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013db8:	4293      	cmp	r3, r2
 8013dba:	d10c      	bne.n	8013dd6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013dbc:	68bb      	ldr	r3, [r7, #8]
 8013dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013dc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	689b      	ldr	r3, [r3, #8]
 8013dc8:	68ba      	ldr	r2, [r7, #8]
 8013dca:	4313      	orrs	r3, r2
 8013dcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	68ba      	ldr	r2, [r7, #8]
 8013dd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	2201      	movs	r2, #1
 8013dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	2200      	movs	r2, #0
 8013de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013de6:	2300      	movs	r3, #0
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	3714      	adds	r7, #20
 8013dec:	46bd      	mov	sp, r7
 8013dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df2:	4770      	bx	lr
 8013df4:	40010000 	.word	0x40010000
 8013df8:	40010400 	.word	0x40010400
 8013dfc:	40000400 	.word	0x40000400
 8013e00:	40000800 	.word	0x40000800
 8013e04:	40000c00 	.word	0x40000c00
 8013e08:	40001800 	.word	0x40001800
 8013e0c:	40014000 	.word	0x40014000

08013e10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013e10:	b480      	push	{r7}
 8013e12:	b085      	sub	sp, #20
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
 8013e18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013e24:	2b01      	cmp	r3, #1
 8013e26:	d101      	bne.n	8013e2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013e28:	2302      	movs	r3, #2
 8013e2a:	e065      	b.n	8013ef8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2201      	movs	r2, #1
 8013e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013e3a:	683b      	ldr	r3, [r7, #0]
 8013e3c:	68db      	ldr	r3, [r3, #12]
 8013e3e:	4313      	orrs	r3, r2
 8013e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	689b      	ldr	r3, [r3, #8]
 8013e4c:	4313      	orrs	r3, r2
 8013e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	685b      	ldr	r3, [r3, #4]
 8013e5a:	4313      	orrs	r3, r2
 8013e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013e64:	683b      	ldr	r3, [r7, #0]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	4313      	orrs	r3, r2
 8013e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013e72:	683b      	ldr	r3, [r7, #0]
 8013e74:	691b      	ldr	r3, [r3, #16]
 8013e76:	4313      	orrs	r3, r2
 8013e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	695b      	ldr	r3, [r3, #20]
 8013e84:	4313      	orrs	r3, r2
 8013e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e92:	4313      	orrs	r3, r2
 8013e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8013e9c:	683b      	ldr	r3, [r7, #0]
 8013e9e:	699b      	ldr	r3, [r3, #24]
 8013ea0:	041b      	lsls	r3, r3, #16
 8013ea2:	4313      	orrs	r3, r2
 8013ea4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	4a16      	ldr	r2, [pc, #88]	; (8013f04 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8013eac:	4293      	cmp	r3, r2
 8013eae:	d004      	beq.n	8013eba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	4a14      	ldr	r2, [pc, #80]	; (8013f08 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8013eb6:	4293      	cmp	r3, r2
 8013eb8:	d115      	bne.n	8013ee6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8013ec0:	683b      	ldr	r3, [r7, #0]
 8013ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ec4:	051b      	lsls	r3, r3, #20
 8013ec6:	4313      	orrs	r3, r2
 8013ec8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8013ed0:	683b      	ldr	r3, [r7, #0]
 8013ed2:	69db      	ldr	r3, [r3, #28]
 8013ed4:	4313      	orrs	r3, r2
 8013ed6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8013ede:	683b      	ldr	r3, [r7, #0]
 8013ee0:	6a1b      	ldr	r3, [r3, #32]
 8013ee2:	4313      	orrs	r3, r2
 8013ee4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	68fa      	ldr	r2, [r7, #12]
 8013eec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013ef6:	2300      	movs	r3, #0
}
 8013ef8:	4618      	mov	r0, r3
 8013efa:	3714      	adds	r7, #20
 8013efc:	46bd      	mov	sp, r7
 8013efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f02:	4770      	bx	lr
 8013f04:	40010000 	.word	0x40010000
 8013f08:	40010400 	.word	0x40010400

08013f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013f0c:	b480      	push	{r7}
 8013f0e:	b083      	sub	sp, #12
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013f14:	bf00      	nop
 8013f16:	370c      	adds	r7, #12
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1e:	4770      	bx	lr

08013f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013f20:	b480      	push	{r7}
 8013f22:	b083      	sub	sp, #12
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013f28:	bf00      	nop
 8013f2a:	370c      	adds	r7, #12
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f32:	4770      	bx	lr

08013f34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013f34:	b480      	push	{r7}
 8013f36:	b083      	sub	sp, #12
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013f3c:	bf00      	nop
 8013f3e:	370c      	adds	r7, #12
 8013f40:	46bd      	mov	sp, r7
 8013f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f46:	4770      	bx	lr

08013f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b082      	sub	sp, #8
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d101      	bne.n	8013f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013f56:	2301      	movs	r3, #1
 8013f58:	e042      	b.n	8013fe0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d106      	bne.n	8013f72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	2200      	movs	r2, #0
 8013f68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013f6c:	6878      	ldr	r0, [r7, #4]
 8013f6e:	f7f1 f989 	bl	8005284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2224      	movs	r2, #36	; 0x24
 8013f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	681a      	ldr	r2, [r3, #0]
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	f022 0201 	bic.w	r2, r2, #1
 8013f88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d002      	beq.n	8013f98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013f92:	6878      	ldr	r0, [r7, #4]
 8013f94:	f001 fbc2 	bl	801571c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013f98:	6878      	ldr	r0, [r7, #4]
 8013f9a:	f000 fe57 	bl	8014c4c <UART_SetConfig>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	2b01      	cmp	r3, #1
 8013fa2:	d101      	bne.n	8013fa8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	e01b      	b.n	8013fe0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	685a      	ldr	r2, [r3, #4]
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013fb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	689a      	ldr	r2, [r3, #8]
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013fc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	681a      	ldr	r2, [r3, #0]
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	f042 0201 	orr.w	r2, r2, #1
 8013fd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f001 fc41 	bl	8015860 <UART_CheckIdleState>
 8013fde:	4603      	mov	r3, r0
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3708      	adds	r7, #8
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b08a      	sub	sp, #40	; 0x28
 8013fec:	af02      	add	r7, sp, #8
 8013fee:	60f8      	str	r0, [r7, #12]
 8013ff0:	60b9      	str	r1, [r7, #8]
 8013ff2:	603b      	str	r3, [r7, #0]
 8013ff4:	4613      	mov	r3, r2
 8013ff6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013ffe:	2b20      	cmp	r3, #32
 8014000:	d17b      	bne.n	80140fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8014002:	68bb      	ldr	r3, [r7, #8]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d002      	beq.n	801400e <HAL_UART_Transmit+0x26>
 8014008:	88fb      	ldrh	r3, [r7, #6]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d101      	bne.n	8014012 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801400e:	2301      	movs	r3, #1
 8014010:	e074      	b.n	80140fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	2200      	movs	r2, #0
 8014016:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	2221      	movs	r2, #33	; 0x21
 801401e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014022:	f7f1 fd7d 	bl	8005b20 <HAL_GetTick>
 8014026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	88fa      	ldrh	r2, [r7, #6]
 801402c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	88fa      	ldrh	r2, [r7, #6]
 8014034:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	689b      	ldr	r3, [r3, #8]
 801403c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014040:	d108      	bne.n	8014054 <HAL_UART_Transmit+0x6c>
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	691b      	ldr	r3, [r3, #16]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d104      	bne.n	8014054 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801404a:	2300      	movs	r3, #0
 801404c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	61bb      	str	r3, [r7, #24]
 8014052:	e003      	b.n	801405c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014058:	2300      	movs	r3, #0
 801405a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801405c:	e030      	b.n	80140c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	9300      	str	r3, [sp, #0]
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	2200      	movs	r2, #0
 8014066:	2180      	movs	r1, #128	; 0x80
 8014068:	68f8      	ldr	r0, [r7, #12]
 801406a:	f001 fca3 	bl	80159b4 <UART_WaitOnFlagUntilTimeout>
 801406e:	4603      	mov	r3, r0
 8014070:	2b00      	cmp	r3, #0
 8014072:	d005      	beq.n	8014080 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	2220      	movs	r2, #32
 8014078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801407c:	2303      	movs	r3, #3
 801407e:	e03d      	b.n	80140fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8014080:	69fb      	ldr	r3, [r7, #28]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d10b      	bne.n	801409e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014086:	69bb      	ldr	r3, [r7, #24]
 8014088:	881b      	ldrh	r3, [r3, #0]
 801408a:	461a      	mov	r2, r3
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014094:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8014096:	69bb      	ldr	r3, [r7, #24]
 8014098:	3302      	adds	r3, #2
 801409a:	61bb      	str	r3, [r7, #24]
 801409c:	e007      	b.n	80140ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801409e:	69fb      	ldr	r3, [r7, #28]
 80140a0:	781a      	ldrb	r2, [r3, #0]
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80140a8:	69fb      	ldr	r3, [r7, #28]
 80140aa:	3301      	adds	r3, #1
 80140ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80140b4:	b29b      	uxth	r3, r3
 80140b6:	3b01      	subs	r3, #1
 80140b8:	b29a      	uxth	r2, r3
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80140c6:	b29b      	uxth	r3, r3
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d1c8      	bne.n	801405e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	9300      	str	r3, [sp, #0]
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	2200      	movs	r2, #0
 80140d4:	2140      	movs	r1, #64	; 0x40
 80140d6:	68f8      	ldr	r0, [r7, #12]
 80140d8:	f001 fc6c 	bl	80159b4 <UART_WaitOnFlagUntilTimeout>
 80140dc:	4603      	mov	r3, r0
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d005      	beq.n	80140ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	2220      	movs	r2, #32
 80140e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80140ea:	2303      	movs	r3, #3
 80140ec:	e006      	b.n	80140fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	2220      	movs	r2, #32
 80140f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80140f6:	2300      	movs	r3, #0
 80140f8:	e000      	b.n	80140fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80140fa:	2302      	movs	r3, #2
  }
}
 80140fc:	4618      	mov	r0, r3
 80140fe:	3720      	adds	r7, #32
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}

08014104 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b08a      	sub	sp, #40	; 0x28
 8014108:	af02      	add	r7, sp, #8
 801410a:	60f8      	str	r0, [r7, #12]
 801410c:	60b9      	str	r1, [r7, #8]
 801410e:	603b      	str	r3, [r7, #0]
 8014110:	4613      	mov	r3, r2
 8014112:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801411a:	2b20      	cmp	r3, #32
 801411c:	f040 80b5 	bne.w	801428a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d002      	beq.n	801412c <HAL_UART_Receive+0x28>
 8014126:	88fb      	ldrh	r3, [r7, #6]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d101      	bne.n	8014130 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801412c:	2301      	movs	r3, #1
 801412e:	e0ad      	b.n	801428c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	2200      	movs	r2, #0
 8014134:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	2222      	movs	r2, #34	; 0x22
 801413c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	2200      	movs	r2, #0
 8014144:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014146:	f7f1 fceb 	bl	8005b20 <HAL_GetTick>
 801414a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	88fa      	ldrh	r2, [r7, #6]
 8014150:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	88fa      	ldrh	r2, [r7, #6]
 8014158:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	689b      	ldr	r3, [r3, #8]
 8014160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014164:	d10e      	bne.n	8014184 <HAL_UART_Receive+0x80>
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	691b      	ldr	r3, [r3, #16]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d105      	bne.n	801417a <HAL_UART_Receive+0x76>
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014174:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014178:	e02d      	b.n	80141d6 <HAL_UART_Receive+0xd2>
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	22ff      	movs	r2, #255	; 0xff
 801417e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014182:	e028      	b.n	80141d6 <HAL_UART_Receive+0xd2>
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	689b      	ldr	r3, [r3, #8]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d10d      	bne.n	80141a8 <HAL_UART_Receive+0xa4>
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	691b      	ldr	r3, [r3, #16]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d104      	bne.n	801419e <HAL_UART_Receive+0x9a>
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	22ff      	movs	r2, #255	; 0xff
 8014198:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801419c:	e01b      	b.n	80141d6 <HAL_UART_Receive+0xd2>
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	227f      	movs	r2, #127	; 0x7f
 80141a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80141a6:	e016      	b.n	80141d6 <HAL_UART_Receive+0xd2>
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	689b      	ldr	r3, [r3, #8]
 80141ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80141b0:	d10d      	bne.n	80141ce <HAL_UART_Receive+0xca>
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	691b      	ldr	r3, [r3, #16]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d104      	bne.n	80141c4 <HAL_UART_Receive+0xc0>
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	227f      	movs	r2, #127	; 0x7f
 80141be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80141c2:	e008      	b.n	80141d6 <HAL_UART_Receive+0xd2>
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	223f      	movs	r2, #63	; 0x3f
 80141c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80141cc:	e003      	b.n	80141d6 <HAL_UART_Receive+0xd2>
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	2200      	movs	r2, #0
 80141d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80141dc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	689b      	ldr	r3, [r3, #8]
 80141e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80141e6:	d108      	bne.n	80141fa <HAL_UART_Receive+0xf6>
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	691b      	ldr	r3, [r3, #16]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d104      	bne.n	80141fa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80141f0:	2300      	movs	r3, #0
 80141f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80141f4:	68bb      	ldr	r3, [r7, #8]
 80141f6:	61bb      	str	r3, [r7, #24]
 80141f8:	e003      	b.n	8014202 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80141fe:	2300      	movs	r3, #0
 8014200:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8014202:	e036      	b.n	8014272 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	9300      	str	r3, [sp, #0]
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	2200      	movs	r2, #0
 801420c:	2120      	movs	r1, #32
 801420e:	68f8      	ldr	r0, [r7, #12]
 8014210:	f001 fbd0 	bl	80159b4 <UART_WaitOnFlagUntilTimeout>
 8014214:	4603      	mov	r3, r0
 8014216:	2b00      	cmp	r3, #0
 8014218:	d005      	beq.n	8014226 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	2220      	movs	r2, #32
 801421e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8014222:	2303      	movs	r3, #3
 8014224:	e032      	b.n	801428c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8014226:	69fb      	ldr	r3, [r7, #28]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d10c      	bne.n	8014246 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014232:	b29a      	uxth	r2, r3
 8014234:	8a7b      	ldrh	r3, [r7, #18]
 8014236:	4013      	ands	r3, r2
 8014238:	b29a      	uxth	r2, r3
 801423a:	69bb      	ldr	r3, [r7, #24]
 801423c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801423e:	69bb      	ldr	r3, [r7, #24]
 8014240:	3302      	adds	r3, #2
 8014242:	61bb      	str	r3, [r7, #24]
 8014244:	e00c      	b.n	8014260 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801424c:	b2da      	uxtb	r2, r3
 801424e:	8a7b      	ldrh	r3, [r7, #18]
 8014250:	b2db      	uxtb	r3, r3
 8014252:	4013      	ands	r3, r2
 8014254:	b2da      	uxtb	r2, r3
 8014256:	69fb      	ldr	r3, [r7, #28]
 8014258:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 801425a:	69fb      	ldr	r3, [r7, #28]
 801425c:	3301      	adds	r3, #1
 801425e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014266:	b29b      	uxth	r3, r3
 8014268:	3b01      	subs	r3, #1
 801426a:	b29a      	uxth	r2, r3
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014278:	b29b      	uxth	r3, r3
 801427a:	2b00      	cmp	r3, #0
 801427c:	d1c2      	bne.n	8014204 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	2220      	movs	r2, #32
 8014282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8014286:	2300      	movs	r3, #0
 8014288:	e000      	b.n	801428c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801428a:	2302      	movs	r3, #2
  }
}
 801428c:	4618      	mov	r0, r3
 801428e:	3720      	adds	r7, #32
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}

08014294 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b08a      	sub	sp, #40	; 0x28
 8014298:	af00      	add	r7, sp, #0
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	4613      	mov	r3, r2
 80142a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80142a8:	2b20      	cmp	r3, #32
 80142aa:	d137      	bne.n	801431c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80142ac:	68bb      	ldr	r3, [r7, #8]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d002      	beq.n	80142b8 <HAL_UART_Receive_IT+0x24>
 80142b2:	88fb      	ldrh	r3, [r7, #6]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d101      	bne.n	80142bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80142b8:	2301      	movs	r3, #1
 80142ba:	e030      	b.n	801431e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	2200      	movs	r2, #0
 80142c0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	4a18      	ldr	r2, [pc, #96]	; (8014328 <HAL_UART_Receive_IT+0x94>)
 80142c8:	4293      	cmp	r3, r2
 80142ca:	d01f      	beq.n	801430c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	685b      	ldr	r3, [r3, #4]
 80142d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d018      	beq.n	801430c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142e0:	697b      	ldr	r3, [r7, #20]
 80142e2:	e853 3f00 	ldrex	r3, [r3]
 80142e6:	613b      	str	r3, [r7, #16]
   return(result);
 80142e8:	693b      	ldr	r3, [r7, #16]
 80142ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80142ee:	627b      	str	r3, [r7, #36]	; 0x24
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	461a      	mov	r2, r3
 80142f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f8:	623b      	str	r3, [r7, #32]
 80142fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142fc:	69f9      	ldr	r1, [r7, #28]
 80142fe:	6a3a      	ldr	r2, [r7, #32]
 8014300:	e841 2300 	strex	r3, r2, [r1]
 8014304:	61bb      	str	r3, [r7, #24]
   return(result);
 8014306:	69bb      	ldr	r3, [r7, #24]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d1e6      	bne.n	80142da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801430c:	88fb      	ldrh	r3, [r7, #6]
 801430e:	461a      	mov	r2, r3
 8014310:	68b9      	ldr	r1, [r7, #8]
 8014312:	68f8      	ldr	r0, [r7, #12]
 8014314:	f001 fbbc 	bl	8015a90 <UART_Start_Receive_IT>
 8014318:	4603      	mov	r3, r0
 801431a:	e000      	b.n	801431e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801431c:	2302      	movs	r3, #2
  }
}
 801431e:	4618      	mov	r0, r3
 8014320:	3728      	adds	r7, #40	; 0x28
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}
 8014326:	bf00      	nop
 8014328:	58000c00 	.word	0x58000c00

0801432c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b09a      	sub	sp, #104	; 0x68
 8014330:	af00      	add	r7, sp, #0
 8014332:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801433a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801433c:	e853 3f00 	ldrex	r3, [r3]
 8014340:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8014342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014344:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014348:	667b      	str	r3, [r7, #100]	; 0x64
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	461a      	mov	r2, r3
 8014350:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014352:	657b      	str	r3, [r7, #84]	; 0x54
 8014354:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014356:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014358:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801435a:	e841 2300 	strex	r3, r2, [r1]
 801435e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014362:	2b00      	cmp	r3, #0
 8014364:	d1e6      	bne.n	8014334 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	3308      	adds	r3, #8
 801436c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801436e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014370:	e853 3f00 	ldrex	r3, [r3]
 8014374:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014378:	4b46      	ldr	r3, [pc, #280]	; (8014494 <HAL_UART_AbortReceive+0x168>)
 801437a:	4013      	ands	r3, r2
 801437c:	663b      	str	r3, [r7, #96]	; 0x60
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	3308      	adds	r3, #8
 8014384:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014386:	643a      	str	r2, [r7, #64]	; 0x40
 8014388:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801438a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801438c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801438e:	e841 2300 	strex	r3, r2, [r1]
 8014392:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014396:	2b00      	cmp	r3, #0
 8014398:	d1e5      	bne.n	8014366 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801439e:	2b01      	cmp	r3, #1
 80143a0:	d118      	bne.n	80143d4 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143a8:	6a3b      	ldr	r3, [r7, #32]
 80143aa:	e853 3f00 	ldrex	r3, [r3]
 80143ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80143b0:	69fb      	ldr	r3, [r7, #28]
 80143b2:	f023 0310 	bic.w	r3, r3, #16
 80143b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	461a      	mov	r2, r3
 80143be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80143c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80143c2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80143c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80143c8:	e841 2300 	strex	r3, r2, [r1]
 80143cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80143ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d1e6      	bne.n	80143a2 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	689b      	ldr	r3, [r3, #8]
 80143da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143de:	2b40      	cmp	r3, #64	; 0x40
 80143e0:	d13b      	bne.n	801445a <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	3308      	adds	r3, #8
 80143e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	e853 3f00 	ldrex	r3, [r3]
 80143f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80143f2:	68bb      	ldr	r3, [r7, #8]
 80143f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80143f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	3308      	adds	r3, #8
 8014400:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014402:	61ba      	str	r2, [r7, #24]
 8014404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014406:	6979      	ldr	r1, [r7, #20]
 8014408:	69ba      	ldr	r2, [r7, #24]
 801440a:	e841 2300 	strex	r3, r2, [r1]
 801440e:	613b      	str	r3, [r7, #16]
   return(result);
 8014410:	693b      	ldr	r3, [r7, #16]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d1e5      	bne.n	80143e2 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801441c:	2b00      	cmp	r3, #0
 801441e:	d01c      	beq.n	801445a <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014426:	2200      	movs	r2, #0
 8014428:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014430:	4618      	mov	r0, r3
 8014432:	f7f4 fa63 	bl	80088fc <HAL_DMA_Abort>
 8014436:	4603      	mov	r3, r0
 8014438:	2b00      	cmp	r3, #0
 801443a:	d00e      	beq.n	801445a <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014442:	4618      	mov	r0, r3
 8014444:	f7f5 fef6 	bl	800a234 <HAL_DMA_GetError>
 8014448:	4603      	mov	r3, r0
 801444a:	2b20      	cmp	r3, #32
 801444c:	d105      	bne.n	801445a <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	2210      	movs	r2, #16
 8014452:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8014456:	2303      	movs	r3, #3
 8014458:	e017      	b.n	801448a <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	2200      	movs	r2, #0
 801445e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	220f      	movs	r2, #15
 8014468:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	699a      	ldr	r2, [r3, #24]
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	f042 0208 	orr.w	r2, r2, #8
 8014478:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2220      	movs	r2, #32
 801447e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	2200      	movs	r2, #0
 8014486:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8014488:	2300      	movs	r3, #0
}
 801448a:	4618      	mov	r0, r3
 801448c:	3768      	adds	r7, #104	; 0x68
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}
 8014492:	bf00      	nop
 8014494:	effffffe 	.word	0xeffffffe

08014498 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b0ba      	sub	sp, #232	; 0xe8
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	69db      	ldr	r3, [r3, #28]
 80144a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	689b      	ldr	r3, [r3, #8]
 80144ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80144be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80144c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80144c6:	4013      	ands	r3, r2
 80144c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80144cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d11b      	bne.n	801450c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80144d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80144d8:	f003 0320 	and.w	r3, r3, #32
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d015      	beq.n	801450c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80144e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80144e4:	f003 0320 	and.w	r3, r3, #32
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d105      	bne.n	80144f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80144ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80144f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d009      	beq.n	801450c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	f000 8377 	beq.w	8014bf0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	4798      	blx	r3
      }
      return;
 801450a:	e371      	b.n	8014bf0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801450c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014510:	2b00      	cmp	r3, #0
 8014512:	f000 8123 	beq.w	801475c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8014516:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801451a:	4b8d      	ldr	r3, [pc, #564]	; (8014750 <HAL_UART_IRQHandler+0x2b8>)
 801451c:	4013      	ands	r3, r2
 801451e:	2b00      	cmp	r3, #0
 8014520:	d106      	bne.n	8014530 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8014522:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8014526:	4b8b      	ldr	r3, [pc, #556]	; (8014754 <HAL_UART_IRQHandler+0x2bc>)
 8014528:	4013      	ands	r3, r2
 801452a:	2b00      	cmp	r3, #0
 801452c:	f000 8116 	beq.w	801475c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014534:	f003 0301 	and.w	r3, r3, #1
 8014538:	2b00      	cmp	r3, #0
 801453a:	d011      	beq.n	8014560 <HAL_UART_IRQHandler+0xc8>
 801453c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014544:	2b00      	cmp	r3, #0
 8014546:	d00b      	beq.n	8014560 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	2201      	movs	r2, #1
 801454e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014556:	f043 0201 	orr.w	r2, r3, #1
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014564:	f003 0302 	and.w	r3, r3, #2
 8014568:	2b00      	cmp	r3, #0
 801456a:	d011      	beq.n	8014590 <HAL_UART_IRQHandler+0xf8>
 801456c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014570:	f003 0301 	and.w	r3, r3, #1
 8014574:	2b00      	cmp	r3, #0
 8014576:	d00b      	beq.n	8014590 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	2202      	movs	r2, #2
 801457e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014586:	f043 0204 	orr.w	r2, r3, #4
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014594:	f003 0304 	and.w	r3, r3, #4
 8014598:	2b00      	cmp	r3, #0
 801459a:	d011      	beq.n	80145c0 <HAL_UART_IRQHandler+0x128>
 801459c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80145a0:	f003 0301 	and.w	r3, r3, #1
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d00b      	beq.n	80145c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	2204      	movs	r2, #4
 80145ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145b6:	f043 0202 	orr.w	r2, r3, #2
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80145c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80145c4:	f003 0308 	and.w	r3, r3, #8
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d017      	beq.n	80145fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80145cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80145d0:	f003 0320 	and.w	r3, r3, #32
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d105      	bne.n	80145e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80145d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80145dc:	4b5c      	ldr	r3, [pc, #368]	; (8014750 <HAL_UART_IRQHandler+0x2b8>)
 80145de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d00b      	beq.n	80145fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	2208      	movs	r2, #8
 80145ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145f2:	f043 0208 	orr.w	r2, r3, #8
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80145fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014604:	2b00      	cmp	r3, #0
 8014606:	d012      	beq.n	801462e <HAL_UART_IRQHandler+0x196>
 8014608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801460c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014610:	2b00      	cmp	r3, #0
 8014612:	d00c      	beq.n	801462e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801461c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014624:	f043 0220 	orr.w	r2, r3, #32
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014634:	2b00      	cmp	r3, #0
 8014636:	f000 82dd 	beq.w	8014bf4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801463a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801463e:	f003 0320 	and.w	r3, r3, #32
 8014642:	2b00      	cmp	r3, #0
 8014644:	d013      	beq.n	801466e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801464a:	f003 0320 	and.w	r3, r3, #32
 801464e:	2b00      	cmp	r3, #0
 8014650:	d105      	bne.n	801465e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801465a:	2b00      	cmp	r3, #0
 801465c:	d007      	beq.n	801466e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014662:	2b00      	cmp	r3, #0
 8014664:	d003      	beq.n	801466e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014674:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	689b      	ldr	r3, [r3, #8]
 801467e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014682:	2b40      	cmp	r3, #64	; 0x40
 8014684:	d005      	beq.n	8014692 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801468a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801468e:	2b00      	cmp	r3, #0
 8014690:	d054      	beq.n	801473c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014692:	6878      	ldr	r0, [r7, #4]
 8014694:	f001 fb1e 	bl	8015cd4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	689b      	ldr	r3, [r3, #8]
 801469e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80146a2:	2b40      	cmp	r3, #64	; 0x40
 80146a4:	d146      	bne.n	8014734 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	3308      	adds	r3, #8
 80146ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80146b4:	e853 3f00 	ldrex	r3, [r3]
 80146b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80146bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80146c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80146c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	3308      	adds	r3, #8
 80146ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80146d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80146d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80146de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80146e2:	e841 2300 	strex	r3, r2, [r1]
 80146e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80146ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d1d9      	bne.n	80146a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d017      	beq.n	801472c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014702:	4a15      	ldr	r2, [pc, #84]	; (8014758 <HAL_UART_IRQHandler+0x2c0>)
 8014704:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801470c:	4618      	mov	r0, r3
 801470e:	f7f4 fc13 	bl	8008f38 <HAL_DMA_Abort_IT>
 8014712:	4603      	mov	r3, r0
 8014714:	2b00      	cmp	r3, #0
 8014716:	d019      	beq.n	801474c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014720:	687a      	ldr	r2, [r7, #4]
 8014722:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8014726:	4610      	mov	r0, r2
 8014728:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801472a:	e00f      	b.n	801474c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	f000 fa77 	bl	8014c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014732:	e00b      	b.n	801474c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014734:	6878      	ldr	r0, [r7, #4]
 8014736:	f000 fa73 	bl	8014c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801473a:	e007      	b.n	801474c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f000 fa6f 	bl	8014c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	2200      	movs	r2, #0
 8014746:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801474a:	e253      	b.n	8014bf4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801474c:	bf00      	nop
    return;
 801474e:	e251      	b.n	8014bf4 <HAL_UART_IRQHandler+0x75c>
 8014750:	10000001 	.word	0x10000001
 8014754:	04000120 	.word	0x04000120
 8014758:	08015da1 	.word	0x08015da1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014760:	2b01      	cmp	r3, #1
 8014762:	f040 81e7 	bne.w	8014b34 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8014766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801476a:	f003 0310 	and.w	r3, r3, #16
 801476e:	2b00      	cmp	r3, #0
 8014770:	f000 81e0 	beq.w	8014b34 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014778:	f003 0310 	and.w	r3, r3, #16
 801477c:	2b00      	cmp	r3, #0
 801477e:	f000 81d9 	beq.w	8014b34 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	2210      	movs	r2, #16
 8014788:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	689b      	ldr	r3, [r3, #8]
 8014790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014794:	2b40      	cmp	r3, #64	; 0x40
 8014796:	f040 8151 	bne.w	8014a3c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	4a96      	ldr	r2, [pc, #600]	; (80149fc <HAL_UART_IRQHandler+0x564>)
 80147a4:	4293      	cmp	r3, r2
 80147a6:	d068      	beq.n	801487a <HAL_UART_IRQHandler+0x3e2>
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	4a93      	ldr	r2, [pc, #588]	; (8014a00 <HAL_UART_IRQHandler+0x568>)
 80147b2:	4293      	cmp	r3, r2
 80147b4:	d061      	beq.n	801487a <HAL_UART_IRQHandler+0x3e2>
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	4a91      	ldr	r2, [pc, #580]	; (8014a04 <HAL_UART_IRQHandler+0x56c>)
 80147c0:	4293      	cmp	r3, r2
 80147c2:	d05a      	beq.n	801487a <HAL_UART_IRQHandler+0x3e2>
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	4a8e      	ldr	r2, [pc, #568]	; (8014a08 <HAL_UART_IRQHandler+0x570>)
 80147ce:	4293      	cmp	r3, r2
 80147d0:	d053      	beq.n	801487a <HAL_UART_IRQHandler+0x3e2>
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	4a8c      	ldr	r2, [pc, #560]	; (8014a0c <HAL_UART_IRQHandler+0x574>)
 80147dc:	4293      	cmp	r3, r2
 80147de:	d04c      	beq.n	801487a <HAL_UART_IRQHandler+0x3e2>
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	4a89      	ldr	r2, [pc, #548]	; (8014a10 <HAL_UART_IRQHandler+0x578>)
 80147ea:	4293      	cmp	r3, r2
 80147ec:	d045      	beq.n	801487a <HAL_UART_IRQHandler+0x3e2>
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	4a87      	ldr	r2, [pc, #540]	; (8014a14 <HAL_UART_IRQHandler+0x57c>)
 80147f8:	4293      	cmp	r3, r2
 80147fa:	d03e      	beq.n	801487a <HAL_UART_IRQHandler+0x3e2>
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	4a84      	ldr	r2, [pc, #528]	; (8014a18 <HAL_UART_IRQHandler+0x580>)
 8014806:	4293      	cmp	r3, r2
 8014808:	d037      	beq.n	801487a <HAL_UART_IRQHandler+0x3e2>
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	4a82      	ldr	r2, [pc, #520]	; (8014a1c <HAL_UART_IRQHandler+0x584>)
 8014814:	4293      	cmp	r3, r2
 8014816:	d030      	beq.n	801487a <HAL_UART_IRQHandler+0x3e2>
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	4a7f      	ldr	r2, [pc, #508]	; (8014a20 <HAL_UART_IRQHandler+0x588>)
 8014822:	4293      	cmp	r3, r2
 8014824:	d029      	beq.n	801487a <HAL_UART_IRQHandler+0x3e2>
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	4a7d      	ldr	r2, [pc, #500]	; (8014a24 <HAL_UART_IRQHandler+0x58c>)
 8014830:	4293      	cmp	r3, r2
 8014832:	d022      	beq.n	801487a <HAL_UART_IRQHandler+0x3e2>
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	4a7a      	ldr	r2, [pc, #488]	; (8014a28 <HAL_UART_IRQHandler+0x590>)
 801483e:	4293      	cmp	r3, r2
 8014840:	d01b      	beq.n	801487a <HAL_UART_IRQHandler+0x3e2>
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	4a78      	ldr	r2, [pc, #480]	; (8014a2c <HAL_UART_IRQHandler+0x594>)
 801484c:	4293      	cmp	r3, r2
 801484e:	d014      	beq.n	801487a <HAL_UART_IRQHandler+0x3e2>
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	4a75      	ldr	r2, [pc, #468]	; (8014a30 <HAL_UART_IRQHandler+0x598>)
 801485a:	4293      	cmp	r3, r2
 801485c:	d00d      	beq.n	801487a <HAL_UART_IRQHandler+0x3e2>
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	4a73      	ldr	r2, [pc, #460]	; (8014a34 <HAL_UART_IRQHandler+0x59c>)
 8014868:	4293      	cmp	r3, r2
 801486a:	d006      	beq.n	801487a <HAL_UART_IRQHandler+0x3e2>
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	4a70      	ldr	r2, [pc, #448]	; (8014a38 <HAL_UART_IRQHandler+0x5a0>)
 8014876:	4293      	cmp	r3, r2
 8014878:	d106      	bne.n	8014888 <HAL_UART_IRQHandler+0x3f0>
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	685b      	ldr	r3, [r3, #4]
 8014884:	b29b      	uxth	r3, r3
 8014886:	e005      	b.n	8014894 <HAL_UART_IRQHandler+0x3fc>
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	b29b      	uxth	r3, r3
 8014894:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014898:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801489c:	2b00      	cmp	r3, #0
 801489e:	f000 81ab 	beq.w	8014bf8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80148a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80148ac:	429a      	cmp	r2, r3
 80148ae:	f080 81a3 	bcs.w	8014bf8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80148b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80148c2:	69db      	ldr	r3, [r3, #28]
 80148c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80148c8:	f000 8087 	beq.w	80149da <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80148d8:	e853 3f00 	ldrex	r3, [r3]
 80148dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80148e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80148e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80148e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	461a      	mov	r2, r3
 80148f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80148f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80148fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014902:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014906:	e841 2300 	strex	r3, r2, [r1]
 801490a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801490e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014912:	2b00      	cmp	r3, #0
 8014914:	d1da      	bne.n	80148cc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	3308      	adds	r3, #8
 801491c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801491e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014920:	e853 3f00 	ldrex	r3, [r3]
 8014924:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014928:	f023 0301 	bic.w	r3, r3, #1
 801492c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	3308      	adds	r3, #8
 8014936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801493a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801493e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014940:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014942:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014946:	e841 2300 	strex	r3, r2, [r1]
 801494a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801494c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801494e:	2b00      	cmp	r3, #0
 8014950:	d1e1      	bne.n	8014916 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	3308      	adds	r3, #8
 8014958:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801495a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801495c:	e853 3f00 	ldrex	r3, [r3]
 8014960:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	3308      	adds	r3, #8
 8014972:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014976:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014978:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801497a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801497c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801497e:	e841 2300 	strex	r3, r2, [r1]
 8014982:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014986:	2b00      	cmp	r3, #0
 8014988:	d1e3      	bne.n	8014952 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	2220      	movs	r2, #32
 801498e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	2200      	movs	r2, #0
 8014996:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801499e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80149a0:	e853 3f00 	ldrex	r3, [r3]
 80149a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80149a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80149a8:	f023 0310 	bic.w	r3, r3, #16
 80149ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	461a      	mov	r2, r3
 80149b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80149ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80149bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80149c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80149c2:	e841 2300 	strex	r3, r2, [r1]
 80149c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80149c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d1e4      	bne.n	8014998 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80149d4:	4618      	mov	r0, r3
 80149d6:	f7f3 ff91 	bl	80088fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	2202      	movs	r2, #2
 80149de:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80149ec:	b29b      	uxth	r3, r3
 80149ee:	1ad3      	subs	r3, r2, r3
 80149f0:	b29b      	uxth	r3, r3
 80149f2:	4619      	mov	r1, r3
 80149f4:	6878      	ldr	r0, [r7, #4]
 80149f6:	f000 f91d 	bl	8014c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80149fa:	e0fd      	b.n	8014bf8 <HAL_UART_IRQHandler+0x760>
 80149fc:	40020010 	.word	0x40020010
 8014a00:	40020028 	.word	0x40020028
 8014a04:	40020040 	.word	0x40020040
 8014a08:	40020058 	.word	0x40020058
 8014a0c:	40020070 	.word	0x40020070
 8014a10:	40020088 	.word	0x40020088
 8014a14:	400200a0 	.word	0x400200a0
 8014a18:	400200b8 	.word	0x400200b8
 8014a1c:	40020410 	.word	0x40020410
 8014a20:	40020428 	.word	0x40020428
 8014a24:	40020440 	.word	0x40020440
 8014a28:	40020458 	.word	0x40020458
 8014a2c:	40020470 	.word	0x40020470
 8014a30:	40020488 	.word	0x40020488
 8014a34:	400204a0 	.word	0x400204a0
 8014a38:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014a48:	b29b      	uxth	r3, r3
 8014a4a:	1ad3      	subs	r3, r2, r3
 8014a4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014a56:	b29b      	uxth	r3, r3
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	f000 80cf 	beq.w	8014bfc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8014a5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	f000 80ca 	beq.w	8014bfc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a70:	e853 3f00 	ldrex	r3, [r3]
 8014a74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014a7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	461a      	mov	r2, r3
 8014a86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8014a8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014a90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014a92:	e841 2300 	strex	r3, r2, [r1]
 8014a96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d1e4      	bne.n	8014a68 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	3308      	adds	r3, #8
 8014aa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aa8:	e853 3f00 	ldrex	r3, [r3]
 8014aac:	623b      	str	r3, [r7, #32]
   return(result);
 8014aae:	6a3a      	ldr	r2, [r7, #32]
 8014ab0:	4b55      	ldr	r3, [pc, #340]	; (8014c08 <HAL_UART_IRQHandler+0x770>)
 8014ab2:	4013      	ands	r3, r2
 8014ab4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	3308      	adds	r3, #8
 8014abe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014ac2:	633a      	str	r2, [r7, #48]	; 0x30
 8014ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014aca:	e841 2300 	strex	r3, r2, [r1]
 8014ace:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d1e3      	bne.n	8014a9e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	2220      	movs	r2, #32
 8014ada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014af0:	693b      	ldr	r3, [r7, #16]
 8014af2:	e853 3f00 	ldrex	r3, [r3]
 8014af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	f023 0310 	bic.w	r3, r3, #16
 8014afe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	461a      	mov	r2, r3
 8014b08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014b0c:	61fb      	str	r3, [r7, #28]
 8014b0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b10:	69b9      	ldr	r1, [r7, #24]
 8014b12:	69fa      	ldr	r2, [r7, #28]
 8014b14:	e841 2300 	strex	r3, r2, [r1]
 8014b18:	617b      	str	r3, [r7, #20]
   return(result);
 8014b1a:	697b      	ldr	r3, [r7, #20]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d1e4      	bne.n	8014aea <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	2202      	movs	r2, #2
 8014b24:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014b26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014b2a:	4619      	mov	r1, r3
 8014b2c:	6878      	ldr	r0, [r7, #4]
 8014b2e:	f000 f881 	bl	8014c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014b32:	e063      	b.n	8014bfc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d00e      	beq.n	8014b5e <HAL_UART_IRQHandler+0x6c6>
 8014b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d008      	beq.n	8014b5e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014b54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f001 fe80 	bl	801685c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014b5c:	e051      	b.n	8014c02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d014      	beq.n	8014b94 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d105      	bne.n	8014b82 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014b7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d008      	beq.n	8014b94 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d03a      	beq.n	8014c00 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	4798      	blx	r3
    }
    return;
 8014b92:	e035      	b.n	8014c00 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d009      	beq.n	8014bb4 <HAL_UART_IRQHandler+0x71c>
 8014ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d003      	beq.n	8014bb4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8014bac:	6878      	ldr	r0, [r7, #4]
 8014bae:	f001 f90d 	bl	8015dcc <UART_EndTransmit_IT>
    return;
 8014bb2:	e026      	b.n	8014c02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d009      	beq.n	8014bd4 <HAL_UART_IRQHandler+0x73c>
 8014bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014bc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d003      	beq.n	8014bd4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f001 fe59 	bl	8016884 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014bd2:	e016      	b.n	8014c02 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d010      	beq.n	8014c02 <HAL_UART_IRQHandler+0x76a>
 8014be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	da0c      	bge.n	8014c02 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	f001 fe41 	bl	8016870 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014bee:	e008      	b.n	8014c02 <HAL_UART_IRQHandler+0x76a>
      return;
 8014bf0:	bf00      	nop
 8014bf2:	e006      	b.n	8014c02 <HAL_UART_IRQHandler+0x76a>
    return;
 8014bf4:	bf00      	nop
 8014bf6:	e004      	b.n	8014c02 <HAL_UART_IRQHandler+0x76a>
      return;
 8014bf8:	bf00      	nop
 8014bfa:	e002      	b.n	8014c02 <HAL_UART_IRQHandler+0x76a>
      return;
 8014bfc:	bf00      	nop
 8014bfe:	e000      	b.n	8014c02 <HAL_UART_IRQHandler+0x76a>
    return;
 8014c00:	bf00      	nop
  }
}
 8014c02:	37e8      	adds	r7, #232	; 0xe8
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}
 8014c08:	effffffe 	.word	0xeffffffe

08014c0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014c0c:	b480      	push	{r7}
 8014c0e:	b083      	sub	sp, #12
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014c14:	bf00      	nop
 8014c16:	370c      	adds	r7, #12
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c1e:	4770      	bx	lr

08014c20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014c20:	b480      	push	{r7}
 8014c22:	b083      	sub	sp, #12
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8014c28:	bf00      	nop
 8014c2a:	370c      	adds	r7, #12
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c32:	4770      	bx	lr

08014c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014c34:	b480      	push	{r7}
 8014c36:	b083      	sub	sp, #12
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014c40:	bf00      	nop
 8014c42:	370c      	adds	r7, #12
 8014c44:	46bd      	mov	sp, r7
 8014c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4a:	4770      	bx	lr

08014c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014c50:	b092      	sub	sp, #72	; 0x48
 8014c52:	af00      	add	r7, sp, #0
 8014c54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014c56:	2300      	movs	r3, #0
 8014c58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014c5c:	697b      	ldr	r3, [r7, #20]
 8014c5e:	689a      	ldr	r2, [r3, #8]
 8014c60:	697b      	ldr	r3, [r7, #20]
 8014c62:	691b      	ldr	r3, [r3, #16]
 8014c64:	431a      	orrs	r2, r3
 8014c66:	697b      	ldr	r3, [r7, #20]
 8014c68:	695b      	ldr	r3, [r3, #20]
 8014c6a:	431a      	orrs	r2, r3
 8014c6c:	697b      	ldr	r3, [r7, #20]
 8014c6e:	69db      	ldr	r3, [r3, #28]
 8014c70:	4313      	orrs	r3, r2
 8014c72:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014c74:	697b      	ldr	r3, [r7, #20]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	681a      	ldr	r2, [r3, #0]
 8014c7a:	4bbe      	ldr	r3, [pc, #760]	; (8014f74 <UART_SetConfig+0x328>)
 8014c7c:	4013      	ands	r3, r2
 8014c7e:	697a      	ldr	r2, [r7, #20]
 8014c80:	6812      	ldr	r2, [r2, #0]
 8014c82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014c84:	430b      	orrs	r3, r1
 8014c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014c88:	697b      	ldr	r3, [r7, #20]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	685b      	ldr	r3, [r3, #4]
 8014c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014c92:	697b      	ldr	r3, [r7, #20]
 8014c94:	68da      	ldr	r2, [r3, #12]
 8014c96:	697b      	ldr	r3, [r7, #20]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	430a      	orrs	r2, r1
 8014c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014c9e:	697b      	ldr	r3, [r7, #20]
 8014ca0:	699b      	ldr	r3, [r3, #24]
 8014ca2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014ca4:	697b      	ldr	r3, [r7, #20]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	4ab3      	ldr	r2, [pc, #716]	; (8014f78 <UART_SetConfig+0x32c>)
 8014caa:	4293      	cmp	r3, r2
 8014cac:	d004      	beq.n	8014cb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014cae:	697b      	ldr	r3, [r7, #20]
 8014cb0:	6a1b      	ldr	r3, [r3, #32]
 8014cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014cb4:	4313      	orrs	r3, r2
 8014cb6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014cb8:	697b      	ldr	r3, [r7, #20]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	689a      	ldr	r2, [r3, #8]
 8014cbe:	4baf      	ldr	r3, [pc, #700]	; (8014f7c <UART_SetConfig+0x330>)
 8014cc0:	4013      	ands	r3, r2
 8014cc2:	697a      	ldr	r2, [r7, #20]
 8014cc4:	6812      	ldr	r2, [r2, #0]
 8014cc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014cc8:	430b      	orrs	r3, r1
 8014cca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cd2:	f023 010f 	bic.w	r1, r3, #15
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014cda:	697b      	ldr	r3, [r7, #20]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	430a      	orrs	r2, r1
 8014ce0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014ce2:	697b      	ldr	r3, [r7, #20]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	4aa6      	ldr	r2, [pc, #664]	; (8014f80 <UART_SetConfig+0x334>)
 8014ce8:	4293      	cmp	r3, r2
 8014cea:	d177      	bne.n	8014ddc <UART_SetConfig+0x190>
 8014cec:	4ba5      	ldr	r3, [pc, #660]	; (8014f84 <UART_SetConfig+0x338>)
 8014cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014cf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014cf4:	2b28      	cmp	r3, #40	; 0x28
 8014cf6:	d86d      	bhi.n	8014dd4 <UART_SetConfig+0x188>
 8014cf8:	a201      	add	r2, pc, #4	; (adr r2, 8014d00 <UART_SetConfig+0xb4>)
 8014cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cfe:	bf00      	nop
 8014d00:	08014da5 	.word	0x08014da5
 8014d04:	08014dd5 	.word	0x08014dd5
 8014d08:	08014dd5 	.word	0x08014dd5
 8014d0c:	08014dd5 	.word	0x08014dd5
 8014d10:	08014dd5 	.word	0x08014dd5
 8014d14:	08014dd5 	.word	0x08014dd5
 8014d18:	08014dd5 	.word	0x08014dd5
 8014d1c:	08014dd5 	.word	0x08014dd5
 8014d20:	08014dad 	.word	0x08014dad
 8014d24:	08014dd5 	.word	0x08014dd5
 8014d28:	08014dd5 	.word	0x08014dd5
 8014d2c:	08014dd5 	.word	0x08014dd5
 8014d30:	08014dd5 	.word	0x08014dd5
 8014d34:	08014dd5 	.word	0x08014dd5
 8014d38:	08014dd5 	.word	0x08014dd5
 8014d3c:	08014dd5 	.word	0x08014dd5
 8014d40:	08014db5 	.word	0x08014db5
 8014d44:	08014dd5 	.word	0x08014dd5
 8014d48:	08014dd5 	.word	0x08014dd5
 8014d4c:	08014dd5 	.word	0x08014dd5
 8014d50:	08014dd5 	.word	0x08014dd5
 8014d54:	08014dd5 	.word	0x08014dd5
 8014d58:	08014dd5 	.word	0x08014dd5
 8014d5c:	08014dd5 	.word	0x08014dd5
 8014d60:	08014dbd 	.word	0x08014dbd
 8014d64:	08014dd5 	.word	0x08014dd5
 8014d68:	08014dd5 	.word	0x08014dd5
 8014d6c:	08014dd5 	.word	0x08014dd5
 8014d70:	08014dd5 	.word	0x08014dd5
 8014d74:	08014dd5 	.word	0x08014dd5
 8014d78:	08014dd5 	.word	0x08014dd5
 8014d7c:	08014dd5 	.word	0x08014dd5
 8014d80:	08014dc5 	.word	0x08014dc5
 8014d84:	08014dd5 	.word	0x08014dd5
 8014d88:	08014dd5 	.word	0x08014dd5
 8014d8c:	08014dd5 	.word	0x08014dd5
 8014d90:	08014dd5 	.word	0x08014dd5
 8014d94:	08014dd5 	.word	0x08014dd5
 8014d98:	08014dd5 	.word	0x08014dd5
 8014d9c:	08014dd5 	.word	0x08014dd5
 8014da0:	08014dcd 	.word	0x08014dcd
 8014da4:	2301      	movs	r3, #1
 8014da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014daa:	e222      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014dac:	2304      	movs	r3, #4
 8014dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014db2:	e21e      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014db4:	2308      	movs	r3, #8
 8014db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dba:	e21a      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014dbc:	2310      	movs	r3, #16
 8014dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dc2:	e216      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014dc4:	2320      	movs	r3, #32
 8014dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dca:	e212      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014dcc:	2340      	movs	r3, #64	; 0x40
 8014dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dd2:	e20e      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014dd4:	2380      	movs	r3, #128	; 0x80
 8014dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014dda:	e20a      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014ddc:	697b      	ldr	r3, [r7, #20]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	4a69      	ldr	r2, [pc, #420]	; (8014f88 <UART_SetConfig+0x33c>)
 8014de2:	4293      	cmp	r3, r2
 8014de4:	d130      	bne.n	8014e48 <UART_SetConfig+0x1fc>
 8014de6:	4b67      	ldr	r3, [pc, #412]	; (8014f84 <UART_SetConfig+0x338>)
 8014de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014dea:	f003 0307 	and.w	r3, r3, #7
 8014dee:	2b05      	cmp	r3, #5
 8014df0:	d826      	bhi.n	8014e40 <UART_SetConfig+0x1f4>
 8014df2:	a201      	add	r2, pc, #4	; (adr r2, 8014df8 <UART_SetConfig+0x1ac>)
 8014df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014df8:	08014e11 	.word	0x08014e11
 8014dfc:	08014e19 	.word	0x08014e19
 8014e00:	08014e21 	.word	0x08014e21
 8014e04:	08014e29 	.word	0x08014e29
 8014e08:	08014e31 	.word	0x08014e31
 8014e0c:	08014e39 	.word	0x08014e39
 8014e10:	2300      	movs	r3, #0
 8014e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e16:	e1ec      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014e18:	2304      	movs	r3, #4
 8014e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e1e:	e1e8      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014e20:	2308      	movs	r3, #8
 8014e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e26:	e1e4      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014e28:	2310      	movs	r3, #16
 8014e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e2e:	e1e0      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014e30:	2320      	movs	r3, #32
 8014e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e36:	e1dc      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014e38:	2340      	movs	r3, #64	; 0x40
 8014e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e3e:	e1d8      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014e40:	2380      	movs	r3, #128	; 0x80
 8014e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e46:	e1d4      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014e48:	697b      	ldr	r3, [r7, #20]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	4a4f      	ldr	r2, [pc, #316]	; (8014f8c <UART_SetConfig+0x340>)
 8014e4e:	4293      	cmp	r3, r2
 8014e50:	d130      	bne.n	8014eb4 <UART_SetConfig+0x268>
 8014e52:	4b4c      	ldr	r3, [pc, #304]	; (8014f84 <UART_SetConfig+0x338>)
 8014e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e56:	f003 0307 	and.w	r3, r3, #7
 8014e5a:	2b05      	cmp	r3, #5
 8014e5c:	d826      	bhi.n	8014eac <UART_SetConfig+0x260>
 8014e5e:	a201      	add	r2, pc, #4	; (adr r2, 8014e64 <UART_SetConfig+0x218>)
 8014e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e64:	08014e7d 	.word	0x08014e7d
 8014e68:	08014e85 	.word	0x08014e85
 8014e6c:	08014e8d 	.word	0x08014e8d
 8014e70:	08014e95 	.word	0x08014e95
 8014e74:	08014e9d 	.word	0x08014e9d
 8014e78:	08014ea5 	.word	0x08014ea5
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e82:	e1b6      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014e84:	2304      	movs	r3, #4
 8014e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e8a:	e1b2      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014e8c:	2308      	movs	r3, #8
 8014e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e92:	e1ae      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014e94:	2310      	movs	r3, #16
 8014e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014e9a:	e1aa      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014e9c:	2320      	movs	r3, #32
 8014e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ea2:	e1a6      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014ea4:	2340      	movs	r3, #64	; 0x40
 8014ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eaa:	e1a2      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014eac:	2380      	movs	r3, #128	; 0x80
 8014eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eb2:	e19e      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014eb4:	697b      	ldr	r3, [r7, #20]
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	4a35      	ldr	r2, [pc, #212]	; (8014f90 <UART_SetConfig+0x344>)
 8014eba:	4293      	cmp	r3, r2
 8014ebc:	d130      	bne.n	8014f20 <UART_SetConfig+0x2d4>
 8014ebe:	4b31      	ldr	r3, [pc, #196]	; (8014f84 <UART_SetConfig+0x338>)
 8014ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ec2:	f003 0307 	and.w	r3, r3, #7
 8014ec6:	2b05      	cmp	r3, #5
 8014ec8:	d826      	bhi.n	8014f18 <UART_SetConfig+0x2cc>
 8014eca:	a201      	add	r2, pc, #4	; (adr r2, 8014ed0 <UART_SetConfig+0x284>)
 8014ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ed0:	08014ee9 	.word	0x08014ee9
 8014ed4:	08014ef1 	.word	0x08014ef1
 8014ed8:	08014ef9 	.word	0x08014ef9
 8014edc:	08014f01 	.word	0x08014f01
 8014ee0:	08014f09 	.word	0x08014f09
 8014ee4:	08014f11 	.word	0x08014f11
 8014ee8:	2300      	movs	r3, #0
 8014eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014eee:	e180      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014ef0:	2304      	movs	r3, #4
 8014ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014ef6:	e17c      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014ef8:	2308      	movs	r3, #8
 8014efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014efe:	e178      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014f00:	2310      	movs	r3, #16
 8014f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f06:	e174      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014f08:	2320      	movs	r3, #32
 8014f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f0e:	e170      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014f10:	2340      	movs	r3, #64	; 0x40
 8014f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f16:	e16c      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014f18:	2380      	movs	r3, #128	; 0x80
 8014f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f1e:	e168      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	4a1b      	ldr	r2, [pc, #108]	; (8014f94 <UART_SetConfig+0x348>)
 8014f26:	4293      	cmp	r3, r2
 8014f28:	d142      	bne.n	8014fb0 <UART_SetConfig+0x364>
 8014f2a:	4b16      	ldr	r3, [pc, #88]	; (8014f84 <UART_SetConfig+0x338>)
 8014f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f2e:	f003 0307 	and.w	r3, r3, #7
 8014f32:	2b05      	cmp	r3, #5
 8014f34:	d838      	bhi.n	8014fa8 <UART_SetConfig+0x35c>
 8014f36:	a201      	add	r2, pc, #4	; (adr r2, 8014f3c <UART_SetConfig+0x2f0>)
 8014f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f3c:	08014f55 	.word	0x08014f55
 8014f40:	08014f5d 	.word	0x08014f5d
 8014f44:	08014f65 	.word	0x08014f65
 8014f48:	08014f6d 	.word	0x08014f6d
 8014f4c:	08014f99 	.word	0x08014f99
 8014f50:	08014fa1 	.word	0x08014fa1
 8014f54:	2300      	movs	r3, #0
 8014f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f5a:	e14a      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014f5c:	2304      	movs	r3, #4
 8014f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f62:	e146      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014f64:	2308      	movs	r3, #8
 8014f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f6a:	e142      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014f6c:	2310      	movs	r3, #16
 8014f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f72:	e13e      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014f74:	cfff69f3 	.word	0xcfff69f3
 8014f78:	58000c00 	.word	0x58000c00
 8014f7c:	11fff4ff 	.word	0x11fff4ff
 8014f80:	40011000 	.word	0x40011000
 8014f84:	58024400 	.word	0x58024400
 8014f88:	40004400 	.word	0x40004400
 8014f8c:	40004800 	.word	0x40004800
 8014f90:	40004c00 	.word	0x40004c00
 8014f94:	40005000 	.word	0x40005000
 8014f98:	2320      	movs	r3, #32
 8014f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f9e:	e128      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014fa0:	2340      	movs	r3, #64	; 0x40
 8014fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fa6:	e124      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014fa8:	2380      	movs	r3, #128	; 0x80
 8014faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014fae:	e120      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8014fb0:	697b      	ldr	r3, [r7, #20]
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	4acb      	ldr	r2, [pc, #812]	; (80152e4 <UART_SetConfig+0x698>)
 8014fb6:	4293      	cmp	r3, r2
 8014fb8:	d176      	bne.n	80150a8 <UART_SetConfig+0x45c>
 8014fba:	4bcb      	ldr	r3, [pc, #812]	; (80152e8 <UART_SetConfig+0x69c>)
 8014fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014fbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014fc2:	2b28      	cmp	r3, #40	; 0x28
 8014fc4:	d86c      	bhi.n	80150a0 <UART_SetConfig+0x454>
 8014fc6:	a201      	add	r2, pc, #4	; (adr r2, 8014fcc <UART_SetConfig+0x380>)
 8014fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fcc:	08015071 	.word	0x08015071
 8014fd0:	080150a1 	.word	0x080150a1
 8014fd4:	080150a1 	.word	0x080150a1
 8014fd8:	080150a1 	.word	0x080150a1
 8014fdc:	080150a1 	.word	0x080150a1
 8014fe0:	080150a1 	.word	0x080150a1
 8014fe4:	080150a1 	.word	0x080150a1
 8014fe8:	080150a1 	.word	0x080150a1
 8014fec:	08015079 	.word	0x08015079
 8014ff0:	080150a1 	.word	0x080150a1
 8014ff4:	080150a1 	.word	0x080150a1
 8014ff8:	080150a1 	.word	0x080150a1
 8014ffc:	080150a1 	.word	0x080150a1
 8015000:	080150a1 	.word	0x080150a1
 8015004:	080150a1 	.word	0x080150a1
 8015008:	080150a1 	.word	0x080150a1
 801500c:	08015081 	.word	0x08015081
 8015010:	080150a1 	.word	0x080150a1
 8015014:	080150a1 	.word	0x080150a1
 8015018:	080150a1 	.word	0x080150a1
 801501c:	080150a1 	.word	0x080150a1
 8015020:	080150a1 	.word	0x080150a1
 8015024:	080150a1 	.word	0x080150a1
 8015028:	080150a1 	.word	0x080150a1
 801502c:	08015089 	.word	0x08015089
 8015030:	080150a1 	.word	0x080150a1
 8015034:	080150a1 	.word	0x080150a1
 8015038:	080150a1 	.word	0x080150a1
 801503c:	080150a1 	.word	0x080150a1
 8015040:	080150a1 	.word	0x080150a1
 8015044:	080150a1 	.word	0x080150a1
 8015048:	080150a1 	.word	0x080150a1
 801504c:	08015091 	.word	0x08015091
 8015050:	080150a1 	.word	0x080150a1
 8015054:	080150a1 	.word	0x080150a1
 8015058:	080150a1 	.word	0x080150a1
 801505c:	080150a1 	.word	0x080150a1
 8015060:	080150a1 	.word	0x080150a1
 8015064:	080150a1 	.word	0x080150a1
 8015068:	080150a1 	.word	0x080150a1
 801506c:	08015099 	.word	0x08015099
 8015070:	2301      	movs	r3, #1
 8015072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015076:	e0bc      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8015078:	2304      	movs	r3, #4
 801507a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801507e:	e0b8      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8015080:	2308      	movs	r3, #8
 8015082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015086:	e0b4      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8015088:	2310      	movs	r3, #16
 801508a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801508e:	e0b0      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8015090:	2320      	movs	r3, #32
 8015092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015096:	e0ac      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8015098:	2340      	movs	r3, #64	; 0x40
 801509a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801509e:	e0a8      	b.n	80151f2 <UART_SetConfig+0x5a6>
 80150a0:	2380      	movs	r3, #128	; 0x80
 80150a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150a6:	e0a4      	b.n	80151f2 <UART_SetConfig+0x5a6>
 80150a8:	697b      	ldr	r3, [r7, #20]
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	4a8f      	ldr	r2, [pc, #572]	; (80152ec <UART_SetConfig+0x6a0>)
 80150ae:	4293      	cmp	r3, r2
 80150b0:	d130      	bne.n	8015114 <UART_SetConfig+0x4c8>
 80150b2:	4b8d      	ldr	r3, [pc, #564]	; (80152e8 <UART_SetConfig+0x69c>)
 80150b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80150b6:	f003 0307 	and.w	r3, r3, #7
 80150ba:	2b05      	cmp	r3, #5
 80150bc:	d826      	bhi.n	801510c <UART_SetConfig+0x4c0>
 80150be:	a201      	add	r2, pc, #4	; (adr r2, 80150c4 <UART_SetConfig+0x478>)
 80150c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150c4:	080150dd 	.word	0x080150dd
 80150c8:	080150e5 	.word	0x080150e5
 80150cc:	080150ed 	.word	0x080150ed
 80150d0:	080150f5 	.word	0x080150f5
 80150d4:	080150fd 	.word	0x080150fd
 80150d8:	08015105 	.word	0x08015105
 80150dc:	2300      	movs	r3, #0
 80150de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150e2:	e086      	b.n	80151f2 <UART_SetConfig+0x5a6>
 80150e4:	2304      	movs	r3, #4
 80150e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150ea:	e082      	b.n	80151f2 <UART_SetConfig+0x5a6>
 80150ec:	2308      	movs	r3, #8
 80150ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150f2:	e07e      	b.n	80151f2 <UART_SetConfig+0x5a6>
 80150f4:	2310      	movs	r3, #16
 80150f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80150fa:	e07a      	b.n	80151f2 <UART_SetConfig+0x5a6>
 80150fc:	2320      	movs	r3, #32
 80150fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015102:	e076      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8015104:	2340      	movs	r3, #64	; 0x40
 8015106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801510a:	e072      	b.n	80151f2 <UART_SetConfig+0x5a6>
 801510c:	2380      	movs	r3, #128	; 0x80
 801510e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015112:	e06e      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8015114:	697b      	ldr	r3, [r7, #20]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	4a75      	ldr	r2, [pc, #468]	; (80152f0 <UART_SetConfig+0x6a4>)
 801511a:	4293      	cmp	r3, r2
 801511c:	d130      	bne.n	8015180 <UART_SetConfig+0x534>
 801511e:	4b72      	ldr	r3, [pc, #456]	; (80152e8 <UART_SetConfig+0x69c>)
 8015120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015122:	f003 0307 	and.w	r3, r3, #7
 8015126:	2b05      	cmp	r3, #5
 8015128:	d826      	bhi.n	8015178 <UART_SetConfig+0x52c>
 801512a:	a201      	add	r2, pc, #4	; (adr r2, 8015130 <UART_SetConfig+0x4e4>)
 801512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015130:	08015149 	.word	0x08015149
 8015134:	08015151 	.word	0x08015151
 8015138:	08015159 	.word	0x08015159
 801513c:	08015161 	.word	0x08015161
 8015140:	08015169 	.word	0x08015169
 8015144:	08015171 	.word	0x08015171
 8015148:	2300      	movs	r3, #0
 801514a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801514e:	e050      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8015150:	2304      	movs	r3, #4
 8015152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015156:	e04c      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8015158:	2308      	movs	r3, #8
 801515a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801515e:	e048      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8015160:	2310      	movs	r3, #16
 8015162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015166:	e044      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8015168:	2320      	movs	r3, #32
 801516a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801516e:	e040      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8015170:	2340      	movs	r3, #64	; 0x40
 8015172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015176:	e03c      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8015178:	2380      	movs	r3, #128	; 0x80
 801517a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801517e:	e038      	b.n	80151f2 <UART_SetConfig+0x5a6>
 8015180:	697b      	ldr	r3, [r7, #20]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	4a5b      	ldr	r2, [pc, #364]	; (80152f4 <UART_SetConfig+0x6a8>)
 8015186:	4293      	cmp	r3, r2
 8015188:	d130      	bne.n	80151ec <UART_SetConfig+0x5a0>
 801518a:	4b57      	ldr	r3, [pc, #348]	; (80152e8 <UART_SetConfig+0x69c>)
 801518c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801518e:	f003 0307 	and.w	r3, r3, #7
 8015192:	2b05      	cmp	r3, #5
 8015194:	d826      	bhi.n	80151e4 <UART_SetConfig+0x598>
 8015196:	a201      	add	r2, pc, #4	; (adr r2, 801519c <UART_SetConfig+0x550>)
 8015198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801519c:	080151b5 	.word	0x080151b5
 80151a0:	080151bd 	.word	0x080151bd
 80151a4:	080151c5 	.word	0x080151c5
 80151a8:	080151cd 	.word	0x080151cd
 80151ac:	080151d5 	.word	0x080151d5
 80151b0:	080151dd 	.word	0x080151dd
 80151b4:	2302      	movs	r3, #2
 80151b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151ba:	e01a      	b.n	80151f2 <UART_SetConfig+0x5a6>
 80151bc:	2304      	movs	r3, #4
 80151be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151c2:	e016      	b.n	80151f2 <UART_SetConfig+0x5a6>
 80151c4:	2308      	movs	r3, #8
 80151c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151ca:	e012      	b.n	80151f2 <UART_SetConfig+0x5a6>
 80151cc:	2310      	movs	r3, #16
 80151ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151d2:	e00e      	b.n	80151f2 <UART_SetConfig+0x5a6>
 80151d4:	2320      	movs	r3, #32
 80151d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151da:	e00a      	b.n	80151f2 <UART_SetConfig+0x5a6>
 80151dc:	2340      	movs	r3, #64	; 0x40
 80151de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151e2:	e006      	b.n	80151f2 <UART_SetConfig+0x5a6>
 80151e4:	2380      	movs	r3, #128	; 0x80
 80151e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151ea:	e002      	b.n	80151f2 <UART_SetConfig+0x5a6>
 80151ec:	2380      	movs	r3, #128	; 0x80
 80151ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80151f2:	697b      	ldr	r3, [r7, #20]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	4a3f      	ldr	r2, [pc, #252]	; (80152f4 <UART_SetConfig+0x6a8>)
 80151f8:	4293      	cmp	r3, r2
 80151fa:	f040 80f8 	bne.w	80153ee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80151fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015202:	2b20      	cmp	r3, #32
 8015204:	dc46      	bgt.n	8015294 <UART_SetConfig+0x648>
 8015206:	2b02      	cmp	r3, #2
 8015208:	f2c0 8082 	blt.w	8015310 <UART_SetConfig+0x6c4>
 801520c:	3b02      	subs	r3, #2
 801520e:	2b1e      	cmp	r3, #30
 8015210:	d87e      	bhi.n	8015310 <UART_SetConfig+0x6c4>
 8015212:	a201      	add	r2, pc, #4	; (adr r2, 8015218 <UART_SetConfig+0x5cc>)
 8015214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015218:	0801529b 	.word	0x0801529b
 801521c:	08015311 	.word	0x08015311
 8015220:	080152a3 	.word	0x080152a3
 8015224:	08015311 	.word	0x08015311
 8015228:	08015311 	.word	0x08015311
 801522c:	08015311 	.word	0x08015311
 8015230:	080152b3 	.word	0x080152b3
 8015234:	08015311 	.word	0x08015311
 8015238:	08015311 	.word	0x08015311
 801523c:	08015311 	.word	0x08015311
 8015240:	08015311 	.word	0x08015311
 8015244:	08015311 	.word	0x08015311
 8015248:	08015311 	.word	0x08015311
 801524c:	08015311 	.word	0x08015311
 8015250:	080152c3 	.word	0x080152c3
 8015254:	08015311 	.word	0x08015311
 8015258:	08015311 	.word	0x08015311
 801525c:	08015311 	.word	0x08015311
 8015260:	08015311 	.word	0x08015311
 8015264:	08015311 	.word	0x08015311
 8015268:	08015311 	.word	0x08015311
 801526c:	08015311 	.word	0x08015311
 8015270:	08015311 	.word	0x08015311
 8015274:	08015311 	.word	0x08015311
 8015278:	08015311 	.word	0x08015311
 801527c:	08015311 	.word	0x08015311
 8015280:	08015311 	.word	0x08015311
 8015284:	08015311 	.word	0x08015311
 8015288:	08015311 	.word	0x08015311
 801528c:	08015311 	.word	0x08015311
 8015290:	08015303 	.word	0x08015303
 8015294:	2b40      	cmp	r3, #64	; 0x40
 8015296:	d037      	beq.n	8015308 <UART_SetConfig+0x6bc>
 8015298:	e03a      	b.n	8015310 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801529a:	f7fb fc17 	bl	8010acc <HAL_RCCEx_GetD3PCLK1Freq>
 801529e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80152a0:	e03c      	b.n	801531c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80152a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80152a6:	4618      	mov	r0, r3
 80152a8:	f7fb fc26 	bl	8010af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80152ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80152b0:	e034      	b.n	801531c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80152b2:	f107 0318 	add.w	r3, r7, #24
 80152b6:	4618      	mov	r0, r3
 80152b8:	f7fb fd72 	bl	8010da0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80152bc:	69fb      	ldr	r3, [r7, #28]
 80152be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80152c0:	e02c      	b.n	801531c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80152c2:	4b09      	ldr	r3, [pc, #36]	; (80152e8 <UART_SetConfig+0x69c>)
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	f003 0320 	and.w	r3, r3, #32
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d016      	beq.n	80152fc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80152ce:	4b06      	ldr	r3, [pc, #24]	; (80152e8 <UART_SetConfig+0x69c>)
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	08db      	lsrs	r3, r3, #3
 80152d4:	f003 0303 	and.w	r3, r3, #3
 80152d8:	4a07      	ldr	r2, [pc, #28]	; (80152f8 <UART_SetConfig+0x6ac>)
 80152da:	fa22 f303 	lsr.w	r3, r2, r3
 80152de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80152e0:	e01c      	b.n	801531c <UART_SetConfig+0x6d0>
 80152e2:	bf00      	nop
 80152e4:	40011400 	.word	0x40011400
 80152e8:	58024400 	.word	0x58024400
 80152ec:	40007800 	.word	0x40007800
 80152f0:	40007c00 	.word	0x40007c00
 80152f4:	58000c00 	.word	0x58000c00
 80152f8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80152fc:	4b9d      	ldr	r3, [pc, #628]	; (8015574 <UART_SetConfig+0x928>)
 80152fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015300:	e00c      	b.n	801531c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015302:	4b9d      	ldr	r3, [pc, #628]	; (8015578 <UART_SetConfig+0x92c>)
 8015304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015306:	e009      	b.n	801531c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801530c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801530e:	e005      	b.n	801531c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8015310:	2300      	movs	r3, #0
 8015312:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015314:	2301      	movs	r3, #1
 8015316:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801531a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801531c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801531e:	2b00      	cmp	r3, #0
 8015320:	f000 81de 	beq.w	80156e0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015324:	697b      	ldr	r3, [r7, #20]
 8015326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015328:	4a94      	ldr	r2, [pc, #592]	; (801557c <UART_SetConfig+0x930>)
 801532a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801532e:	461a      	mov	r2, r3
 8015330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015332:	fbb3 f3f2 	udiv	r3, r3, r2
 8015336:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015338:	697b      	ldr	r3, [r7, #20]
 801533a:	685a      	ldr	r2, [r3, #4]
 801533c:	4613      	mov	r3, r2
 801533e:	005b      	lsls	r3, r3, #1
 8015340:	4413      	add	r3, r2
 8015342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015344:	429a      	cmp	r2, r3
 8015346:	d305      	bcc.n	8015354 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015348:	697b      	ldr	r3, [r7, #20]
 801534a:	685b      	ldr	r3, [r3, #4]
 801534c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801534e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015350:	429a      	cmp	r2, r3
 8015352:	d903      	bls.n	801535c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8015354:	2301      	movs	r3, #1
 8015356:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801535a:	e1c1      	b.n	80156e0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801535c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801535e:	2200      	movs	r2, #0
 8015360:	60bb      	str	r3, [r7, #8]
 8015362:	60fa      	str	r2, [r7, #12]
 8015364:	697b      	ldr	r3, [r7, #20]
 8015366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015368:	4a84      	ldr	r2, [pc, #528]	; (801557c <UART_SetConfig+0x930>)
 801536a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801536e:	b29b      	uxth	r3, r3
 8015370:	2200      	movs	r2, #0
 8015372:	603b      	str	r3, [r7, #0]
 8015374:	607a      	str	r2, [r7, #4]
 8015376:	e9d7 2300 	ldrd	r2, r3, [r7]
 801537a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801537e:	f7ea ffaf 	bl	80002e0 <__aeabi_uldivmod>
 8015382:	4602      	mov	r2, r0
 8015384:	460b      	mov	r3, r1
 8015386:	4610      	mov	r0, r2
 8015388:	4619      	mov	r1, r3
 801538a:	f04f 0200 	mov.w	r2, #0
 801538e:	f04f 0300 	mov.w	r3, #0
 8015392:	020b      	lsls	r3, r1, #8
 8015394:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015398:	0202      	lsls	r2, r0, #8
 801539a:	6979      	ldr	r1, [r7, #20]
 801539c:	6849      	ldr	r1, [r1, #4]
 801539e:	0849      	lsrs	r1, r1, #1
 80153a0:	2000      	movs	r0, #0
 80153a2:	460c      	mov	r4, r1
 80153a4:	4605      	mov	r5, r0
 80153a6:	eb12 0804 	adds.w	r8, r2, r4
 80153aa:	eb43 0905 	adc.w	r9, r3, r5
 80153ae:	697b      	ldr	r3, [r7, #20]
 80153b0:	685b      	ldr	r3, [r3, #4]
 80153b2:	2200      	movs	r2, #0
 80153b4:	469a      	mov	sl, r3
 80153b6:	4693      	mov	fp, r2
 80153b8:	4652      	mov	r2, sl
 80153ba:	465b      	mov	r3, fp
 80153bc:	4640      	mov	r0, r8
 80153be:	4649      	mov	r1, r9
 80153c0:	f7ea ff8e 	bl	80002e0 <__aeabi_uldivmod>
 80153c4:	4602      	mov	r2, r0
 80153c6:	460b      	mov	r3, r1
 80153c8:	4613      	mov	r3, r2
 80153ca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80153cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80153d2:	d308      	bcc.n	80153e6 <UART_SetConfig+0x79a>
 80153d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80153da:	d204      	bcs.n	80153e6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80153e2:	60da      	str	r2, [r3, #12]
 80153e4:	e17c      	b.n	80156e0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80153e6:	2301      	movs	r3, #1
 80153e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80153ec:	e178      	b.n	80156e0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80153ee:	697b      	ldr	r3, [r7, #20]
 80153f0:	69db      	ldr	r3, [r3, #28]
 80153f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80153f6:	f040 80c5 	bne.w	8015584 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80153fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80153fe:	2b20      	cmp	r3, #32
 8015400:	dc48      	bgt.n	8015494 <UART_SetConfig+0x848>
 8015402:	2b00      	cmp	r3, #0
 8015404:	db7b      	blt.n	80154fe <UART_SetConfig+0x8b2>
 8015406:	2b20      	cmp	r3, #32
 8015408:	d879      	bhi.n	80154fe <UART_SetConfig+0x8b2>
 801540a:	a201      	add	r2, pc, #4	; (adr r2, 8015410 <UART_SetConfig+0x7c4>)
 801540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015410:	0801549b 	.word	0x0801549b
 8015414:	080154a3 	.word	0x080154a3
 8015418:	080154ff 	.word	0x080154ff
 801541c:	080154ff 	.word	0x080154ff
 8015420:	080154ab 	.word	0x080154ab
 8015424:	080154ff 	.word	0x080154ff
 8015428:	080154ff 	.word	0x080154ff
 801542c:	080154ff 	.word	0x080154ff
 8015430:	080154bb 	.word	0x080154bb
 8015434:	080154ff 	.word	0x080154ff
 8015438:	080154ff 	.word	0x080154ff
 801543c:	080154ff 	.word	0x080154ff
 8015440:	080154ff 	.word	0x080154ff
 8015444:	080154ff 	.word	0x080154ff
 8015448:	080154ff 	.word	0x080154ff
 801544c:	080154ff 	.word	0x080154ff
 8015450:	080154cb 	.word	0x080154cb
 8015454:	080154ff 	.word	0x080154ff
 8015458:	080154ff 	.word	0x080154ff
 801545c:	080154ff 	.word	0x080154ff
 8015460:	080154ff 	.word	0x080154ff
 8015464:	080154ff 	.word	0x080154ff
 8015468:	080154ff 	.word	0x080154ff
 801546c:	080154ff 	.word	0x080154ff
 8015470:	080154ff 	.word	0x080154ff
 8015474:	080154ff 	.word	0x080154ff
 8015478:	080154ff 	.word	0x080154ff
 801547c:	080154ff 	.word	0x080154ff
 8015480:	080154ff 	.word	0x080154ff
 8015484:	080154ff 	.word	0x080154ff
 8015488:	080154ff 	.word	0x080154ff
 801548c:	080154ff 	.word	0x080154ff
 8015490:	080154f1 	.word	0x080154f1
 8015494:	2b40      	cmp	r3, #64	; 0x40
 8015496:	d02e      	beq.n	80154f6 <UART_SetConfig+0x8aa>
 8015498:	e031      	b.n	80154fe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801549a:	f7f9 fb1f 	bl	800eadc <HAL_RCC_GetPCLK1Freq>
 801549e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80154a0:	e033      	b.n	801550a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80154a2:	f7f9 fb31 	bl	800eb08 <HAL_RCC_GetPCLK2Freq>
 80154a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80154a8:	e02f      	b.n	801550a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80154aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80154ae:	4618      	mov	r0, r3
 80154b0:	f7fb fb22 	bl	8010af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80154b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80154b8:	e027      	b.n	801550a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80154ba:	f107 0318 	add.w	r3, r7, #24
 80154be:	4618      	mov	r0, r3
 80154c0:	f7fb fc6e 	bl	8010da0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80154c4:	69fb      	ldr	r3, [r7, #28]
 80154c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80154c8:	e01f      	b.n	801550a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80154ca:	4b2d      	ldr	r3, [pc, #180]	; (8015580 <UART_SetConfig+0x934>)
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	f003 0320 	and.w	r3, r3, #32
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d009      	beq.n	80154ea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80154d6:	4b2a      	ldr	r3, [pc, #168]	; (8015580 <UART_SetConfig+0x934>)
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	08db      	lsrs	r3, r3, #3
 80154dc:	f003 0303 	and.w	r3, r3, #3
 80154e0:	4a24      	ldr	r2, [pc, #144]	; (8015574 <UART_SetConfig+0x928>)
 80154e2:	fa22 f303 	lsr.w	r3, r2, r3
 80154e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80154e8:	e00f      	b.n	801550a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80154ea:	4b22      	ldr	r3, [pc, #136]	; (8015574 <UART_SetConfig+0x928>)
 80154ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80154ee:	e00c      	b.n	801550a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80154f0:	4b21      	ldr	r3, [pc, #132]	; (8015578 <UART_SetConfig+0x92c>)
 80154f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80154f4:	e009      	b.n	801550a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80154f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80154fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80154fc:	e005      	b.n	801550a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80154fe:	2300      	movs	r3, #0
 8015500:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015502:	2301      	movs	r3, #1
 8015504:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015508:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801550a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801550c:	2b00      	cmp	r3, #0
 801550e:	f000 80e7 	beq.w	80156e0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015512:	697b      	ldr	r3, [r7, #20]
 8015514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015516:	4a19      	ldr	r2, [pc, #100]	; (801557c <UART_SetConfig+0x930>)
 8015518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801551c:	461a      	mov	r2, r3
 801551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015520:	fbb3 f3f2 	udiv	r3, r3, r2
 8015524:	005a      	lsls	r2, r3, #1
 8015526:	697b      	ldr	r3, [r7, #20]
 8015528:	685b      	ldr	r3, [r3, #4]
 801552a:	085b      	lsrs	r3, r3, #1
 801552c:	441a      	add	r2, r3
 801552e:	697b      	ldr	r3, [r7, #20]
 8015530:	685b      	ldr	r3, [r3, #4]
 8015532:	fbb2 f3f3 	udiv	r3, r2, r3
 8015536:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801553a:	2b0f      	cmp	r3, #15
 801553c:	d916      	bls.n	801556c <UART_SetConfig+0x920>
 801553e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015544:	d212      	bcs.n	801556c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015548:	b29b      	uxth	r3, r3
 801554a:	f023 030f 	bic.w	r3, r3, #15
 801554e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015552:	085b      	lsrs	r3, r3, #1
 8015554:	b29b      	uxth	r3, r3
 8015556:	f003 0307 	and.w	r3, r3, #7
 801555a:	b29a      	uxth	r2, r3
 801555c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801555e:	4313      	orrs	r3, r2
 8015560:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015568:	60da      	str	r2, [r3, #12]
 801556a:	e0b9      	b.n	80156e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801556c:	2301      	movs	r3, #1
 801556e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015572:	e0b5      	b.n	80156e0 <UART_SetConfig+0xa94>
 8015574:	03d09000 	.word	0x03d09000
 8015578:	003d0900 	.word	0x003d0900
 801557c:	0801ae6c 	.word	0x0801ae6c
 8015580:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8015584:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015588:	2b20      	cmp	r3, #32
 801558a:	dc49      	bgt.n	8015620 <UART_SetConfig+0x9d4>
 801558c:	2b00      	cmp	r3, #0
 801558e:	db7c      	blt.n	801568a <UART_SetConfig+0xa3e>
 8015590:	2b20      	cmp	r3, #32
 8015592:	d87a      	bhi.n	801568a <UART_SetConfig+0xa3e>
 8015594:	a201      	add	r2, pc, #4	; (adr r2, 801559c <UART_SetConfig+0x950>)
 8015596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801559a:	bf00      	nop
 801559c:	08015627 	.word	0x08015627
 80155a0:	0801562f 	.word	0x0801562f
 80155a4:	0801568b 	.word	0x0801568b
 80155a8:	0801568b 	.word	0x0801568b
 80155ac:	08015637 	.word	0x08015637
 80155b0:	0801568b 	.word	0x0801568b
 80155b4:	0801568b 	.word	0x0801568b
 80155b8:	0801568b 	.word	0x0801568b
 80155bc:	08015647 	.word	0x08015647
 80155c0:	0801568b 	.word	0x0801568b
 80155c4:	0801568b 	.word	0x0801568b
 80155c8:	0801568b 	.word	0x0801568b
 80155cc:	0801568b 	.word	0x0801568b
 80155d0:	0801568b 	.word	0x0801568b
 80155d4:	0801568b 	.word	0x0801568b
 80155d8:	0801568b 	.word	0x0801568b
 80155dc:	08015657 	.word	0x08015657
 80155e0:	0801568b 	.word	0x0801568b
 80155e4:	0801568b 	.word	0x0801568b
 80155e8:	0801568b 	.word	0x0801568b
 80155ec:	0801568b 	.word	0x0801568b
 80155f0:	0801568b 	.word	0x0801568b
 80155f4:	0801568b 	.word	0x0801568b
 80155f8:	0801568b 	.word	0x0801568b
 80155fc:	0801568b 	.word	0x0801568b
 8015600:	0801568b 	.word	0x0801568b
 8015604:	0801568b 	.word	0x0801568b
 8015608:	0801568b 	.word	0x0801568b
 801560c:	0801568b 	.word	0x0801568b
 8015610:	0801568b 	.word	0x0801568b
 8015614:	0801568b 	.word	0x0801568b
 8015618:	0801568b 	.word	0x0801568b
 801561c:	0801567d 	.word	0x0801567d
 8015620:	2b40      	cmp	r3, #64	; 0x40
 8015622:	d02e      	beq.n	8015682 <UART_SetConfig+0xa36>
 8015624:	e031      	b.n	801568a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015626:	f7f9 fa59 	bl	800eadc <HAL_RCC_GetPCLK1Freq>
 801562a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801562c:	e033      	b.n	8015696 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801562e:	f7f9 fa6b 	bl	800eb08 <HAL_RCC_GetPCLK2Freq>
 8015632:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015634:	e02f      	b.n	8015696 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801563a:	4618      	mov	r0, r3
 801563c:	f7fb fa5c 	bl	8010af8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015644:	e027      	b.n	8015696 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015646:	f107 0318 	add.w	r3, r7, #24
 801564a:	4618      	mov	r0, r3
 801564c:	f7fb fba8 	bl	8010da0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015650:	69fb      	ldr	r3, [r7, #28]
 8015652:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015654:	e01f      	b.n	8015696 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015656:	4b2d      	ldr	r3, [pc, #180]	; (801570c <UART_SetConfig+0xac0>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	f003 0320 	and.w	r3, r3, #32
 801565e:	2b00      	cmp	r3, #0
 8015660:	d009      	beq.n	8015676 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015662:	4b2a      	ldr	r3, [pc, #168]	; (801570c <UART_SetConfig+0xac0>)
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	08db      	lsrs	r3, r3, #3
 8015668:	f003 0303 	and.w	r3, r3, #3
 801566c:	4a28      	ldr	r2, [pc, #160]	; (8015710 <UART_SetConfig+0xac4>)
 801566e:	fa22 f303 	lsr.w	r3, r2, r3
 8015672:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015674:	e00f      	b.n	8015696 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8015676:	4b26      	ldr	r3, [pc, #152]	; (8015710 <UART_SetConfig+0xac4>)
 8015678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801567a:	e00c      	b.n	8015696 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801567c:	4b25      	ldr	r3, [pc, #148]	; (8015714 <UART_SetConfig+0xac8>)
 801567e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015680:	e009      	b.n	8015696 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015688:	e005      	b.n	8015696 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801568a:	2300      	movs	r3, #0
 801568c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801568e:	2301      	movs	r3, #1
 8015690:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015694:	bf00      	nop
    }

    if (pclk != 0U)
 8015696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015698:	2b00      	cmp	r3, #0
 801569a:	d021      	beq.n	80156e0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801569c:	697b      	ldr	r3, [r7, #20]
 801569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156a0:	4a1d      	ldr	r2, [pc, #116]	; (8015718 <UART_SetConfig+0xacc>)
 80156a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80156a6:	461a      	mov	r2, r3
 80156a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	685b      	ldr	r3, [r3, #4]
 80156b2:	085b      	lsrs	r3, r3, #1
 80156b4:	441a      	add	r2, r3
 80156b6:	697b      	ldr	r3, [r7, #20]
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80156be:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80156c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156c2:	2b0f      	cmp	r3, #15
 80156c4:	d909      	bls.n	80156da <UART_SetConfig+0xa8e>
 80156c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80156cc:	d205      	bcs.n	80156da <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80156ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156d0:	b29a      	uxth	r2, r3
 80156d2:	697b      	ldr	r3, [r7, #20]
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	60da      	str	r2, [r3, #12]
 80156d8:	e002      	b.n	80156e0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80156da:	2301      	movs	r3, #1
 80156dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	2201      	movs	r2, #1
 80156e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80156e8:	697b      	ldr	r3, [r7, #20]
 80156ea:	2201      	movs	r2, #1
 80156ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	2200      	movs	r2, #0
 80156f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80156f6:	697b      	ldr	r3, [r7, #20]
 80156f8:	2200      	movs	r2, #0
 80156fa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80156fc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015700:	4618      	mov	r0, r3
 8015702:	3748      	adds	r7, #72	; 0x48
 8015704:	46bd      	mov	sp, r7
 8015706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801570a:	bf00      	nop
 801570c:	58024400 	.word	0x58024400
 8015710:	03d09000 	.word	0x03d09000
 8015714:	003d0900 	.word	0x003d0900
 8015718:	0801ae6c 	.word	0x0801ae6c

0801571c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801571c:	b480      	push	{r7}
 801571e:	b083      	sub	sp, #12
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015728:	f003 0308 	and.w	r3, r3, #8
 801572c:	2b00      	cmp	r3, #0
 801572e:	d00a      	beq.n	8015746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	685b      	ldr	r3, [r3, #4]
 8015736:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	430a      	orrs	r2, r1
 8015744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801574a:	f003 0301 	and.w	r3, r3, #1
 801574e:	2b00      	cmp	r3, #0
 8015750:	d00a      	beq.n	8015768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	681b      	ldr	r3, [r3, #0]
 8015756:	685b      	ldr	r3, [r3, #4]
 8015758:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	430a      	orrs	r2, r1
 8015766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801576c:	f003 0302 	and.w	r3, r3, #2
 8015770:	2b00      	cmp	r3, #0
 8015772:	d00a      	beq.n	801578a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	685b      	ldr	r3, [r3, #4]
 801577a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	430a      	orrs	r2, r1
 8015788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801578e:	f003 0304 	and.w	r3, r3, #4
 8015792:	2b00      	cmp	r3, #0
 8015794:	d00a      	beq.n	80157ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	685b      	ldr	r3, [r3, #4]
 801579c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	430a      	orrs	r2, r1
 80157aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157b0:	f003 0310 	and.w	r3, r3, #16
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d00a      	beq.n	80157ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	689b      	ldr	r3, [r3, #8]
 80157be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	430a      	orrs	r2, r1
 80157cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157d2:	f003 0320 	and.w	r3, r3, #32
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d00a      	beq.n	80157f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	689b      	ldr	r3, [r3, #8]
 80157e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	430a      	orrs	r2, r1
 80157ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d01a      	beq.n	8015832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	685b      	ldr	r3, [r3, #4]
 8015802:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	430a      	orrs	r2, r1
 8015810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801581a:	d10a      	bne.n	8015832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	430a      	orrs	r2, r1
 8015830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801583a:	2b00      	cmp	r3, #0
 801583c:	d00a      	beq.n	8015854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	685b      	ldr	r3, [r3, #4]
 8015844:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	430a      	orrs	r2, r1
 8015852:	605a      	str	r2, [r3, #4]
  }
}
 8015854:	bf00      	nop
 8015856:	370c      	adds	r7, #12
 8015858:	46bd      	mov	sp, r7
 801585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585e:	4770      	bx	lr

08015860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b098      	sub	sp, #96	; 0x60
 8015864:	af02      	add	r7, sp, #8
 8015866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	2200      	movs	r2, #0
 801586c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015870:	f7f0 f956 	bl	8005b20 <HAL_GetTick>
 8015874:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	f003 0308 	and.w	r3, r3, #8
 8015880:	2b08      	cmp	r3, #8
 8015882:	d12f      	bne.n	80158e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015888:	9300      	str	r3, [sp, #0]
 801588a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801588c:	2200      	movs	r2, #0
 801588e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f000 f88e 	bl	80159b4 <UART_WaitOnFlagUntilTimeout>
 8015898:	4603      	mov	r3, r0
 801589a:	2b00      	cmp	r3, #0
 801589c:	d022      	beq.n	80158e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158a6:	e853 3f00 	ldrex	r3, [r3]
 80158aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80158ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80158b2:	653b      	str	r3, [r7, #80]	; 0x50
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	461a      	mov	r2, r3
 80158ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158bc:	647b      	str	r3, [r7, #68]	; 0x44
 80158be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80158c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80158c4:	e841 2300 	strex	r3, r2, [r1]
 80158c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80158ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d1e6      	bne.n	801589e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	2220      	movs	r2, #32
 80158d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	2200      	movs	r2, #0
 80158dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80158e0:	2303      	movs	r3, #3
 80158e2:	e063      	b.n	80159ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	f003 0304 	and.w	r3, r3, #4
 80158ee:	2b04      	cmp	r3, #4
 80158f0:	d149      	bne.n	8015986 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80158f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80158f6:	9300      	str	r3, [sp, #0]
 80158f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158fa:	2200      	movs	r2, #0
 80158fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015900:	6878      	ldr	r0, [r7, #4]
 8015902:	f000 f857 	bl	80159b4 <UART_WaitOnFlagUntilTimeout>
 8015906:	4603      	mov	r3, r0
 8015908:	2b00      	cmp	r3, #0
 801590a:	d03c      	beq.n	8015986 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015914:	e853 3f00 	ldrex	r3, [r3]
 8015918:	623b      	str	r3, [r7, #32]
   return(result);
 801591a:	6a3b      	ldr	r3, [r7, #32]
 801591c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015920:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	461a      	mov	r2, r3
 8015928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801592a:	633b      	str	r3, [r7, #48]	; 0x30
 801592c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801592e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015932:	e841 2300 	strex	r3, r2, [r1]
 8015936:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801593a:	2b00      	cmp	r3, #0
 801593c:	d1e6      	bne.n	801590c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	3308      	adds	r3, #8
 8015944:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015946:	693b      	ldr	r3, [r7, #16]
 8015948:	e853 3f00 	ldrex	r3, [r3]
 801594c:	60fb      	str	r3, [r7, #12]
   return(result);
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	f023 0301 	bic.w	r3, r3, #1
 8015954:	64bb      	str	r3, [r7, #72]	; 0x48
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	3308      	adds	r3, #8
 801595c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801595e:	61fa      	str	r2, [r7, #28]
 8015960:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015962:	69b9      	ldr	r1, [r7, #24]
 8015964:	69fa      	ldr	r2, [r7, #28]
 8015966:	e841 2300 	strex	r3, r2, [r1]
 801596a:	617b      	str	r3, [r7, #20]
   return(result);
 801596c:	697b      	ldr	r3, [r7, #20]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d1e5      	bne.n	801593e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	2220      	movs	r2, #32
 8015976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	2200      	movs	r2, #0
 801597e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015982:	2303      	movs	r3, #3
 8015984:	e012      	b.n	80159ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	2220      	movs	r2, #32
 801598a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	2220      	movs	r2, #32
 8015992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2200      	movs	r2, #0
 801599a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	2200      	movs	r2, #0
 80159a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	2200      	movs	r2, #0
 80159a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80159aa:	2300      	movs	r3, #0
}
 80159ac:	4618      	mov	r0, r3
 80159ae:	3758      	adds	r7, #88	; 0x58
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd80      	pop	{r7, pc}

080159b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b084      	sub	sp, #16
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	60f8      	str	r0, [r7, #12]
 80159bc:	60b9      	str	r1, [r7, #8]
 80159be:	603b      	str	r3, [r7, #0]
 80159c0:	4613      	mov	r3, r2
 80159c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80159c4:	e04f      	b.n	8015a66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80159c6:	69bb      	ldr	r3, [r7, #24]
 80159c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80159cc:	d04b      	beq.n	8015a66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80159ce:	f7f0 f8a7 	bl	8005b20 <HAL_GetTick>
 80159d2:	4602      	mov	r2, r0
 80159d4:	683b      	ldr	r3, [r7, #0]
 80159d6:	1ad3      	subs	r3, r2, r3
 80159d8:	69ba      	ldr	r2, [r7, #24]
 80159da:	429a      	cmp	r2, r3
 80159dc:	d302      	bcc.n	80159e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80159de:	69bb      	ldr	r3, [r7, #24]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d101      	bne.n	80159e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80159e4:	2303      	movs	r3, #3
 80159e6:	e04e      	b.n	8015a86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	f003 0304 	and.w	r3, r3, #4
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d037      	beq.n	8015a66 <UART_WaitOnFlagUntilTimeout+0xb2>
 80159f6:	68bb      	ldr	r3, [r7, #8]
 80159f8:	2b80      	cmp	r3, #128	; 0x80
 80159fa:	d034      	beq.n	8015a66 <UART_WaitOnFlagUntilTimeout+0xb2>
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	2b40      	cmp	r3, #64	; 0x40
 8015a00:	d031      	beq.n	8015a66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	69db      	ldr	r3, [r3, #28]
 8015a08:	f003 0308 	and.w	r3, r3, #8
 8015a0c:	2b08      	cmp	r3, #8
 8015a0e:	d110      	bne.n	8015a32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	2208      	movs	r2, #8
 8015a16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015a18:	68f8      	ldr	r0, [r7, #12]
 8015a1a:	f000 f95b 	bl	8015cd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	2208      	movs	r2, #8
 8015a22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	2200      	movs	r2, #0
 8015a2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8015a2e:	2301      	movs	r3, #1
 8015a30:	e029      	b.n	8015a86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	69db      	ldr	r3, [r3, #28]
 8015a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015a40:	d111      	bne.n	8015a66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015a4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015a4c:	68f8      	ldr	r0, [r7, #12]
 8015a4e:	f000 f941 	bl	8015cd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	2220      	movs	r2, #32
 8015a56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8015a62:	2303      	movs	r3, #3
 8015a64:	e00f      	b.n	8015a86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	69da      	ldr	r2, [r3, #28]
 8015a6c:	68bb      	ldr	r3, [r7, #8]
 8015a6e:	4013      	ands	r3, r2
 8015a70:	68ba      	ldr	r2, [r7, #8]
 8015a72:	429a      	cmp	r2, r3
 8015a74:	bf0c      	ite	eq
 8015a76:	2301      	moveq	r3, #1
 8015a78:	2300      	movne	r3, #0
 8015a7a:	b2db      	uxtb	r3, r3
 8015a7c:	461a      	mov	r2, r3
 8015a7e:	79fb      	ldrb	r3, [r7, #7]
 8015a80:	429a      	cmp	r2, r3
 8015a82:	d0a0      	beq.n	80159c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015a84:	2300      	movs	r3, #0
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	3710      	adds	r7, #16
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}
	...

08015a90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015a90:	b480      	push	{r7}
 8015a92:	b0a3      	sub	sp, #140	; 0x8c
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	60f8      	str	r0, [r7, #12]
 8015a98:	60b9      	str	r1, [r7, #8]
 8015a9a:	4613      	mov	r3, r2
 8015a9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	68ba      	ldr	r2, [r7, #8]
 8015aa2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	88fa      	ldrh	r2, [r7, #6]
 8015aa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	88fa      	ldrh	r2, [r7, #6]
 8015ab0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	689b      	ldr	r3, [r3, #8]
 8015abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015ac2:	d10e      	bne.n	8015ae2 <UART_Start_Receive_IT+0x52>
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	691b      	ldr	r3, [r3, #16]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d105      	bne.n	8015ad8 <UART_Start_Receive_IT+0x48>
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015ad2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015ad6:	e02d      	b.n	8015b34 <UART_Start_Receive_IT+0xa4>
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	22ff      	movs	r2, #255	; 0xff
 8015adc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015ae0:	e028      	b.n	8015b34 <UART_Start_Receive_IT+0xa4>
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	689b      	ldr	r3, [r3, #8]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d10d      	bne.n	8015b06 <UART_Start_Receive_IT+0x76>
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	691b      	ldr	r3, [r3, #16]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d104      	bne.n	8015afc <UART_Start_Receive_IT+0x6c>
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	22ff      	movs	r2, #255	; 0xff
 8015af6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015afa:	e01b      	b.n	8015b34 <UART_Start_Receive_IT+0xa4>
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	227f      	movs	r2, #127	; 0x7f
 8015b00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015b04:	e016      	b.n	8015b34 <UART_Start_Receive_IT+0xa4>
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	689b      	ldr	r3, [r3, #8]
 8015b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015b0e:	d10d      	bne.n	8015b2c <UART_Start_Receive_IT+0x9c>
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	691b      	ldr	r3, [r3, #16]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d104      	bne.n	8015b22 <UART_Start_Receive_IT+0x92>
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	227f      	movs	r2, #127	; 0x7f
 8015b1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015b20:	e008      	b.n	8015b34 <UART_Start_Receive_IT+0xa4>
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	223f      	movs	r2, #63	; 0x3f
 8015b26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015b2a:	e003      	b.n	8015b34 <UART_Start_Receive_IT+0xa4>
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	2200      	movs	r2, #0
 8015b30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	2200      	movs	r2, #0
 8015b38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	2222      	movs	r2, #34	; 0x22
 8015b40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	3308      	adds	r3, #8
 8015b4a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015b4e:	e853 3f00 	ldrex	r3, [r3]
 8015b52:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015b54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015b56:	f043 0301 	orr.w	r3, r3, #1
 8015b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	3308      	adds	r3, #8
 8015b64:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8015b68:	673a      	str	r2, [r7, #112]	; 0x70
 8015b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b6c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8015b6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015b70:	e841 2300 	strex	r3, r2, [r1]
 8015b74:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8015b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d1e3      	bne.n	8015b44 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015b84:	d14f      	bne.n	8015c26 <UART_Start_Receive_IT+0x196>
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015b8c:	88fa      	ldrh	r2, [r7, #6]
 8015b8e:	429a      	cmp	r2, r3
 8015b90:	d349      	bcc.n	8015c26 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	689b      	ldr	r3, [r3, #8]
 8015b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015b9a:	d107      	bne.n	8015bac <UART_Start_Receive_IT+0x11c>
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	691b      	ldr	r3, [r3, #16]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d103      	bne.n	8015bac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	4a47      	ldr	r2, [pc, #284]	; (8015cc4 <UART_Start_Receive_IT+0x234>)
 8015ba8:	675a      	str	r2, [r3, #116]	; 0x74
 8015baa:	e002      	b.n	8015bb2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8015bac:	68fb      	ldr	r3, [r7, #12]
 8015bae:	4a46      	ldr	r2, [pc, #280]	; (8015cc8 <UART_Start_Receive_IT+0x238>)
 8015bb0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	691b      	ldr	r3, [r3, #16]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d01a      	beq.n	8015bf0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015bc2:	e853 3f00 	ldrex	r3, [r3]
 8015bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015bce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	461a      	mov	r2, r3
 8015bd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015bde:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015be0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015be2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015be4:	e841 2300 	strex	r3, r2, [r1]
 8015be8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d1e4      	bne.n	8015bba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	3308      	adds	r3, #8
 8015bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bfa:	e853 3f00 	ldrex	r3, [r3]
 8015bfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015c06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	3308      	adds	r3, #8
 8015c0e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015c10:	64ba      	str	r2, [r7, #72]	; 0x48
 8015c12:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015c16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015c18:	e841 2300 	strex	r3, r2, [r1]
 8015c1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d1e5      	bne.n	8015bf0 <UART_Start_Receive_IT+0x160>
 8015c24:	e046      	b.n	8015cb4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	689b      	ldr	r3, [r3, #8]
 8015c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015c2e:	d107      	bne.n	8015c40 <UART_Start_Receive_IT+0x1b0>
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	691b      	ldr	r3, [r3, #16]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d103      	bne.n	8015c40 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	4a24      	ldr	r2, [pc, #144]	; (8015ccc <UART_Start_Receive_IT+0x23c>)
 8015c3c:	675a      	str	r2, [r3, #116]	; 0x74
 8015c3e:	e002      	b.n	8015c46 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	4a23      	ldr	r2, [pc, #140]	; (8015cd0 <UART_Start_Receive_IT+0x240>)
 8015c44:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	691b      	ldr	r3, [r3, #16]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d019      	beq.n	8015c82 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c56:	e853 3f00 	ldrex	r3, [r3]
 8015c5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c5e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8015c62:	677b      	str	r3, [r7, #116]	; 0x74
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	461a      	mov	r2, r3
 8015c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8015c6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015c74:	e841 2300 	strex	r3, r2, [r1]
 8015c78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d1e6      	bne.n	8015c4e <UART_Start_Receive_IT+0x1be>
 8015c80:	e018      	b.n	8015cb4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c88:	697b      	ldr	r3, [r7, #20]
 8015c8a:	e853 3f00 	ldrex	r3, [r3]
 8015c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8015c90:	693b      	ldr	r3, [r7, #16]
 8015c92:	f043 0320 	orr.w	r3, r3, #32
 8015c96:	67bb      	str	r3, [r7, #120]	; 0x78
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	461a      	mov	r2, r3
 8015c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015ca0:	623b      	str	r3, [r7, #32]
 8015ca2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ca4:	69f9      	ldr	r1, [r7, #28]
 8015ca6:	6a3a      	ldr	r2, [r7, #32]
 8015ca8:	e841 2300 	strex	r3, r2, [r1]
 8015cac:	61bb      	str	r3, [r7, #24]
   return(result);
 8015cae:	69bb      	ldr	r3, [r7, #24]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d1e6      	bne.n	8015c82 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8015cb4:	2300      	movs	r3, #0
}
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	378c      	adds	r7, #140	; 0x8c
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc0:	4770      	bx	lr
 8015cc2:	bf00      	nop
 8015cc4:	080164f5 	.word	0x080164f5
 8015cc8:	08016195 	.word	0x08016195
 8015ccc:	08015fdd 	.word	0x08015fdd
 8015cd0:	08015e25 	.word	0x08015e25

08015cd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015cd4:	b480      	push	{r7}
 8015cd6:	b095      	sub	sp, #84	; 0x54
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ce4:	e853 3f00 	ldrex	r3, [r3]
 8015ce8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	461a      	mov	r2, r3
 8015cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015cfa:	643b      	str	r3, [r7, #64]	; 0x40
 8015cfc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015d00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015d02:	e841 2300 	strex	r3, r2, [r1]
 8015d06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d1e6      	bne.n	8015cdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	3308      	adds	r3, #8
 8015d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d16:	6a3b      	ldr	r3, [r7, #32]
 8015d18:	e853 3f00 	ldrex	r3, [r3]
 8015d1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8015d1e:	69fa      	ldr	r2, [r7, #28]
 8015d20:	4b1e      	ldr	r3, [pc, #120]	; (8015d9c <UART_EndRxTransfer+0xc8>)
 8015d22:	4013      	ands	r3, r2
 8015d24:	64bb      	str	r3, [r7, #72]	; 0x48
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	3308      	adds	r3, #8
 8015d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015d30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d36:	e841 2300 	strex	r3, r2, [r1]
 8015d3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d1e5      	bne.n	8015d0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d46:	2b01      	cmp	r3, #1
 8015d48:	d118      	bne.n	8015d7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	e853 3f00 	ldrex	r3, [r3]
 8015d56:	60bb      	str	r3, [r7, #8]
   return(result);
 8015d58:	68bb      	ldr	r3, [r7, #8]
 8015d5a:	f023 0310 	bic.w	r3, r3, #16
 8015d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	461a      	mov	r2, r3
 8015d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d68:	61bb      	str	r3, [r7, #24]
 8015d6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d6c:	6979      	ldr	r1, [r7, #20]
 8015d6e:	69ba      	ldr	r2, [r7, #24]
 8015d70:	e841 2300 	strex	r3, r2, [r1]
 8015d74:	613b      	str	r3, [r7, #16]
   return(result);
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d1e6      	bne.n	8015d4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	2220      	movs	r2, #32
 8015d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	2200      	movs	r2, #0
 8015d88:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8015d90:	bf00      	nop
 8015d92:	3754      	adds	r7, #84	; 0x54
 8015d94:	46bd      	mov	sp, r7
 8015d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d9a:	4770      	bx	lr
 8015d9c:	effffffe 	.word	0xeffffffe

08015da0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b084      	sub	sp, #16
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015dac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	2200      	movs	r2, #0
 8015db2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	2200      	movs	r2, #0
 8015dba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015dbe:	68f8      	ldr	r0, [r7, #12]
 8015dc0:	f7fe ff2e 	bl	8014c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015dc4:	bf00      	nop
 8015dc6:	3710      	adds	r7, #16
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}

08015dcc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b088      	sub	sp, #32
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	e853 3f00 	ldrex	r3, [r3]
 8015de0:	60bb      	str	r3, [r7, #8]
   return(result);
 8015de2:	68bb      	ldr	r3, [r7, #8]
 8015de4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015de8:	61fb      	str	r3, [r7, #28]
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	461a      	mov	r2, r3
 8015df0:	69fb      	ldr	r3, [r7, #28]
 8015df2:	61bb      	str	r3, [r7, #24]
 8015df4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015df6:	6979      	ldr	r1, [r7, #20]
 8015df8:	69ba      	ldr	r2, [r7, #24]
 8015dfa:	e841 2300 	strex	r3, r2, [r1]
 8015dfe:	613b      	str	r3, [r7, #16]
   return(result);
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d1e6      	bne.n	8015dd4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	2220      	movs	r2, #32
 8015e0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	2200      	movs	r2, #0
 8015e12:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8015e14:	6878      	ldr	r0, [r7, #4]
 8015e16:	f7fe fef9 	bl	8014c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015e1a:	bf00      	nop
 8015e1c:	3720      	adds	r7, #32
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bd80      	pop	{r7, pc}
	...

08015e24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b09c      	sub	sp, #112	; 0x70
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015e32:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015e3c:	2b22      	cmp	r3, #34	; 0x22
 8015e3e:	f040 80be 	bne.w	8015fbe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e48:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015e4c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8015e50:	b2d9      	uxtb	r1, r3
 8015e52:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8015e56:	b2da      	uxtb	r2, r3
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e5c:	400a      	ands	r2, r1
 8015e5e:	b2d2      	uxtb	r2, r2
 8015e60:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e66:	1c5a      	adds	r2, r3, #1
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015e72:	b29b      	uxth	r3, r3
 8015e74:	3b01      	subs	r3, #1
 8015e76:	b29a      	uxth	r2, r3
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015e84:	b29b      	uxth	r3, r3
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	f040 80a1 	bne.w	8015fce <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e94:	e853 3f00 	ldrex	r3, [r3]
 8015e98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015ea0:	66bb      	str	r3, [r7, #104]	; 0x68
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	461a      	mov	r2, r3
 8015ea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015eaa:	65bb      	str	r3, [r7, #88]	; 0x58
 8015eac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015eae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015eb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015eb2:	e841 2300 	strex	r3, r2, [r1]
 8015eb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d1e6      	bne.n	8015e8c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	3308      	adds	r3, #8
 8015ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ec8:	e853 3f00 	ldrex	r3, [r3]
 8015ecc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ed0:	f023 0301 	bic.w	r3, r3, #1
 8015ed4:	667b      	str	r3, [r7, #100]	; 0x64
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	3308      	adds	r3, #8
 8015edc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015ede:	647a      	str	r2, [r7, #68]	; 0x44
 8015ee0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015ee6:	e841 2300 	strex	r3, r2, [r1]
 8015eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d1e5      	bne.n	8015ebe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	2220      	movs	r2, #32
 8015ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2200      	movs	r2, #0
 8015efe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	2200      	movs	r2, #0
 8015f04:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	4a33      	ldr	r2, [pc, #204]	; (8015fd8 <UART_RxISR_8BIT+0x1b4>)
 8015f0c:	4293      	cmp	r3, r2
 8015f0e:	d01f      	beq.n	8015f50 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	685b      	ldr	r3, [r3, #4]
 8015f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d018      	beq.n	8015f50 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f26:	e853 3f00 	ldrex	r3, [r3]
 8015f2a:	623b      	str	r3, [r7, #32]
   return(result);
 8015f2c:	6a3b      	ldr	r3, [r7, #32]
 8015f2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015f32:	663b      	str	r3, [r7, #96]	; 0x60
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	461a      	mov	r2, r3
 8015f3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8015f3e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f44:	e841 2300 	strex	r3, r2, [r1]
 8015f48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d1e6      	bne.n	8015f1e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f54:	2b01      	cmp	r3, #1
 8015f56:	d12e      	bne.n	8015fb6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f64:	693b      	ldr	r3, [r7, #16]
 8015f66:	e853 3f00 	ldrex	r3, [r3]
 8015f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	f023 0310 	bic.w	r3, r3, #16
 8015f72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	461a      	mov	r2, r3
 8015f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f7c:	61fb      	str	r3, [r7, #28]
 8015f7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f80:	69b9      	ldr	r1, [r7, #24]
 8015f82:	69fa      	ldr	r2, [r7, #28]
 8015f84:	e841 2300 	strex	r3, r2, [r1]
 8015f88:	617b      	str	r3, [r7, #20]
   return(result);
 8015f8a:	697b      	ldr	r3, [r7, #20]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d1e6      	bne.n	8015f5e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	69db      	ldr	r3, [r3, #28]
 8015f96:	f003 0310 	and.w	r3, r3, #16
 8015f9a:	2b10      	cmp	r3, #16
 8015f9c:	d103      	bne.n	8015fa6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	2210      	movs	r2, #16
 8015fa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015fac:	4619      	mov	r1, r3
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	f7fe fe40 	bl	8014c34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015fb4:	e00b      	b.n	8015fce <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8015fb6:	6878      	ldr	r0, [r7, #4]
 8015fb8:	f7ec fe72 	bl	8002ca0 <HAL_UART_RxCpltCallback>
}
 8015fbc:	e007      	b.n	8015fce <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	699a      	ldr	r2, [r3, #24]
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	f042 0208 	orr.w	r2, r2, #8
 8015fcc:	619a      	str	r2, [r3, #24]
}
 8015fce:	bf00      	nop
 8015fd0:	3770      	adds	r7, #112	; 0x70
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	58000c00 	.word	0x58000c00

08015fdc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b09c      	sub	sp, #112	; 0x70
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015fea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015ff4:	2b22      	cmp	r3, #34	; 0x22
 8015ff6:	f040 80be 	bne.w	8016176 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016000:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016008:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801600a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801600e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8016012:	4013      	ands	r3, r2
 8016014:	b29a      	uxth	r2, r3
 8016016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016018:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801601e:	1c9a      	adds	r2, r3, #2
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801602a:	b29b      	uxth	r3, r3
 801602c:	3b01      	subs	r3, #1
 801602e:	b29a      	uxth	r2, r3
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801603c:	b29b      	uxth	r3, r3
 801603e:	2b00      	cmp	r3, #0
 8016040:	f040 80a1 	bne.w	8016186 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801604a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801604c:	e853 3f00 	ldrex	r3, [r3]
 8016050:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016054:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016058:	667b      	str	r3, [r7, #100]	; 0x64
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	461a      	mov	r2, r3
 8016060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016062:	657b      	str	r3, [r7, #84]	; 0x54
 8016064:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016066:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016068:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801606a:	e841 2300 	strex	r3, r2, [r1]
 801606e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016072:	2b00      	cmp	r3, #0
 8016074:	d1e6      	bne.n	8016044 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	3308      	adds	r3, #8
 801607c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801607e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016080:	e853 3f00 	ldrex	r3, [r3]
 8016084:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016088:	f023 0301 	bic.w	r3, r3, #1
 801608c:	663b      	str	r3, [r7, #96]	; 0x60
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	3308      	adds	r3, #8
 8016094:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016096:	643a      	str	r2, [r7, #64]	; 0x40
 8016098:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801609a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801609c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801609e:	e841 2300 	strex	r3, r2, [r1]
 80160a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80160a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d1e5      	bne.n	8016076 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	2220      	movs	r2, #32
 80160ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2200      	movs	r2, #0
 80160b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	2200      	movs	r2, #0
 80160bc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	4a33      	ldr	r2, [pc, #204]	; (8016190 <UART_RxISR_16BIT+0x1b4>)
 80160c4:	4293      	cmp	r3, r2
 80160c6:	d01f      	beq.n	8016108 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	685b      	ldr	r3, [r3, #4]
 80160ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d018      	beq.n	8016108 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160dc:	6a3b      	ldr	r3, [r7, #32]
 80160de:	e853 3f00 	ldrex	r3, [r3]
 80160e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80160e4:	69fb      	ldr	r3, [r7, #28]
 80160e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80160ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	461a      	mov	r2, r3
 80160f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80160f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80160f6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80160fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80160fc:	e841 2300 	strex	r3, r2, [r1]
 8016100:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016104:	2b00      	cmp	r3, #0
 8016106:	d1e6      	bne.n	80160d6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801610c:	2b01      	cmp	r3, #1
 801610e:	d12e      	bne.n	801616e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	2200      	movs	r2, #0
 8016114:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	e853 3f00 	ldrex	r3, [r3]
 8016122:	60bb      	str	r3, [r7, #8]
   return(result);
 8016124:	68bb      	ldr	r3, [r7, #8]
 8016126:	f023 0310 	bic.w	r3, r3, #16
 801612a:	65bb      	str	r3, [r7, #88]	; 0x58
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	461a      	mov	r2, r3
 8016132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016134:	61bb      	str	r3, [r7, #24]
 8016136:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016138:	6979      	ldr	r1, [r7, #20]
 801613a:	69ba      	ldr	r2, [r7, #24]
 801613c:	e841 2300 	strex	r3, r2, [r1]
 8016140:	613b      	str	r3, [r7, #16]
   return(result);
 8016142:	693b      	ldr	r3, [r7, #16]
 8016144:	2b00      	cmp	r3, #0
 8016146:	d1e6      	bne.n	8016116 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	69db      	ldr	r3, [r3, #28]
 801614e:	f003 0310 	and.w	r3, r3, #16
 8016152:	2b10      	cmp	r3, #16
 8016154:	d103      	bne.n	801615e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	2210      	movs	r2, #16
 801615c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016164:	4619      	mov	r1, r3
 8016166:	6878      	ldr	r0, [r7, #4]
 8016168:	f7fe fd64 	bl	8014c34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801616c:	e00b      	b.n	8016186 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801616e:	6878      	ldr	r0, [r7, #4]
 8016170:	f7ec fd96 	bl	8002ca0 <HAL_UART_RxCpltCallback>
}
 8016174:	e007      	b.n	8016186 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	699a      	ldr	r2, [r3, #24]
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	f042 0208 	orr.w	r2, r2, #8
 8016184:	619a      	str	r2, [r3, #24]
}
 8016186:	bf00      	nop
 8016188:	3770      	adds	r7, #112	; 0x70
 801618a:	46bd      	mov	sp, r7
 801618c:	bd80      	pop	{r7, pc}
 801618e:	bf00      	nop
 8016190:	58000c00 	.word	0x58000c00

08016194 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b0ac      	sub	sp, #176	; 0xb0
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80161a2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	69db      	ldr	r3, [r3, #28]
 80161ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	689b      	ldr	r3, [r3, #8]
 80161c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80161ca:	2b22      	cmp	r3, #34	; 0x22
 80161cc:	f040 8180 	bne.w	80164d0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80161d6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80161da:	e123      	b.n	8016424 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161e2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80161e6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80161ea:	b2d9      	uxtb	r1, r3
 80161ec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80161f0:	b2da      	uxtb	r2, r3
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161f6:	400a      	ands	r2, r1
 80161f8:	b2d2      	uxtb	r2, r2
 80161fa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016200:	1c5a      	adds	r2, r3, #1
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801620c:	b29b      	uxth	r3, r3
 801620e:	3b01      	subs	r3, #1
 8016210:	b29a      	uxth	r2, r3
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	69db      	ldr	r3, [r3, #28]
 801621e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016226:	f003 0307 	and.w	r3, r3, #7
 801622a:	2b00      	cmp	r3, #0
 801622c:	d053      	beq.n	80162d6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801622e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016232:	f003 0301 	and.w	r3, r3, #1
 8016236:	2b00      	cmp	r3, #0
 8016238:	d011      	beq.n	801625e <UART_RxISR_8BIT_FIFOEN+0xca>
 801623a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801623e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016242:	2b00      	cmp	r3, #0
 8016244:	d00b      	beq.n	801625e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	2201      	movs	r2, #1
 801624c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016254:	f043 0201 	orr.w	r2, r3, #1
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801625e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016262:	f003 0302 	and.w	r3, r3, #2
 8016266:	2b00      	cmp	r3, #0
 8016268:	d011      	beq.n	801628e <UART_RxISR_8BIT_FIFOEN+0xfa>
 801626a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801626e:	f003 0301 	and.w	r3, r3, #1
 8016272:	2b00      	cmp	r3, #0
 8016274:	d00b      	beq.n	801628e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	2202      	movs	r2, #2
 801627c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016284:	f043 0204 	orr.w	r2, r3, #4
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801628e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016292:	f003 0304 	and.w	r3, r3, #4
 8016296:	2b00      	cmp	r3, #0
 8016298:	d011      	beq.n	80162be <UART_RxISR_8BIT_FIFOEN+0x12a>
 801629a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801629e:	f003 0301 	and.w	r3, r3, #1
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d00b      	beq.n	80162be <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	2204      	movs	r2, #4
 80162ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80162b4:	f043 0202 	orr.w	r2, r3, #2
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d006      	beq.n	80162d6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80162c8:	6878      	ldr	r0, [r7, #4]
 80162ca:	f7fe fca9 	bl	8014c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	2200      	movs	r2, #0
 80162d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80162dc:	b29b      	uxth	r3, r3
 80162de:	2b00      	cmp	r3, #0
 80162e0:	f040 80a0 	bne.w	8016424 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80162ec:	e853 3f00 	ldrex	r3, [r3]
 80162f0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80162f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80162f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80162f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	461a      	mov	r2, r3
 8016302:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016306:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016308:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801630a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801630c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801630e:	e841 2300 	strex	r3, r2, [r1]
 8016312:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8016314:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016316:	2b00      	cmp	r3, #0
 8016318:	d1e4      	bne.n	80162e4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	3308      	adds	r3, #8
 8016320:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016324:	e853 3f00 	ldrex	r3, [r3]
 8016328:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 801632a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801632c:	4b6e      	ldr	r3, [pc, #440]	; (80164e8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 801632e:	4013      	ands	r3, r2
 8016330:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	3308      	adds	r3, #8
 801633a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801633e:	66ba      	str	r2, [r7, #104]	; 0x68
 8016340:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016342:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016344:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016346:	e841 2300 	strex	r3, r2, [r1]
 801634a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801634c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801634e:	2b00      	cmp	r3, #0
 8016350:	d1e3      	bne.n	801631a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	2220      	movs	r2, #32
 8016356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	2200      	movs	r2, #0
 801635e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2200      	movs	r2, #0
 8016364:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	4a60      	ldr	r2, [pc, #384]	; (80164ec <UART_RxISR_8BIT_FIFOEN+0x358>)
 801636c:	4293      	cmp	r3, r2
 801636e:	d021      	beq.n	80163b4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	685b      	ldr	r3, [r3, #4]
 8016376:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801637a:	2b00      	cmp	r3, #0
 801637c:	d01a      	beq.n	80163b4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016386:	e853 3f00 	ldrex	r3, [r3]
 801638a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801638c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801638e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	461a      	mov	r2, r3
 801639c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80163a0:	657b      	str	r3, [r7, #84]	; 0x54
 80163a2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80163a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80163a8:	e841 2300 	strex	r3, r2, [r1]
 80163ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80163ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d1e4      	bne.n	801637e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163b8:	2b01      	cmp	r3, #1
 80163ba:	d130      	bne.n	801641e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	2200      	movs	r2, #0
 80163c0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163ca:	e853 3f00 	ldrex	r3, [r3]
 80163ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80163d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d2:	f023 0310 	bic.w	r3, r3, #16
 80163d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	461a      	mov	r2, r3
 80163e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80163e4:	643b      	str	r3, [r7, #64]	; 0x40
 80163e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80163ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80163ec:	e841 2300 	strex	r3, r2, [r1]
 80163f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80163f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d1e4      	bne.n	80163c2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	69db      	ldr	r3, [r3, #28]
 80163fe:	f003 0310 	and.w	r3, r3, #16
 8016402:	2b10      	cmp	r3, #16
 8016404:	d103      	bne.n	801640e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	2210      	movs	r2, #16
 801640c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016414:	4619      	mov	r1, r3
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	f7fe fc0c 	bl	8014c34 <HAL_UARTEx_RxEventCallback>
 801641c:	e002      	b.n	8016424 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801641e:	6878      	ldr	r0, [r7, #4]
 8016420:	f7ec fc3e 	bl	8002ca0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016424:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8016428:	2b00      	cmp	r3, #0
 801642a:	d006      	beq.n	801643a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 801642c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016430:	f003 0320 	and.w	r3, r3, #32
 8016434:	2b00      	cmp	r3, #0
 8016436:	f47f aed1 	bne.w	80161dc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016440:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016444:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8016448:	2b00      	cmp	r3, #0
 801644a:	d049      	beq.n	80164e0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016452:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8016456:	429a      	cmp	r2, r3
 8016458:	d242      	bcs.n	80164e0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	3308      	adds	r3, #8
 8016460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016462:	6a3b      	ldr	r3, [r7, #32]
 8016464:	e853 3f00 	ldrex	r3, [r3]
 8016468:	61fb      	str	r3, [r7, #28]
   return(result);
 801646a:	69fb      	ldr	r3, [r7, #28]
 801646c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	3308      	adds	r3, #8
 801647a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801647e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016480:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016482:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016486:	e841 2300 	strex	r3, r2, [r1]
 801648a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801648e:	2b00      	cmp	r3, #0
 8016490:	d1e3      	bne.n	801645a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	4a16      	ldr	r2, [pc, #88]	; (80164f0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8016496:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	e853 3f00 	ldrex	r3, [r3]
 80164a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80164a6:	68bb      	ldr	r3, [r7, #8]
 80164a8:	f043 0320 	orr.w	r3, r3, #32
 80164ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	461a      	mov	r2, r3
 80164b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80164ba:	61bb      	str	r3, [r7, #24]
 80164bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164be:	6979      	ldr	r1, [r7, #20]
 80164c0:	69ba      	ldr	r2, [r7, #24]
 80164c2:	e841 2300 	strex	r3, r2, [r1]
 80164c6:	613b      	str	r3, [r7, #16]
   return(result);
 80164c8:	693b      	ldr	r3, [r7, #16]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d1e4      	bne.n	8016498 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80164ce:	e007      	b.n	80164e0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	699a      	ldr	r2, [r3, #24]
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	f042 0208 	orr.w	r2, r2, #8
 80164de:	619a      	str	r2, [r3, #24]
}
 80164e0:	bf00      	nop
 80164e2:	37b0      	adds	r7, #176	; 0xb0
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}
 80164e8:	effffffe 	.word	0xeffffffe
 80164ec:	58000c00 	.word	0x58000c00
 80164f0:	08015e25 	.word	0x08015e25

080164f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b0ae      	sub	sp, #184	; 0xb8
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016502:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	69db      	ldr	r3, [r3, #28]
 801650c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	689b      	ldr	r3, [r3, #8]
 8016520:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801652a:	2b22      	cmp	r3, #34	; 0x22
 801652c:	f040 8184 	bne.w	8016838 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016536:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801653a:	e127      	b.n	801678c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016542:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801654a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801654e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8016552:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8016556:	4013      	ands	r3, r2
 8016558:	b29a      	uxth	r2, r3
 801655a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801655e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016564:	1c9a      	adds	r2, r3, #2
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016570:	b29b      	uxth	r3, r3
 8016572:	3b01      	subs	r3, #1
 8016574:	b29a      	uxth	r2, r3
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	69db      	ldr	r3, [r3, #28]
 8016582:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801658a:	f003 0307 	and.w	r3, r3, #7
 801658e:	2b00      	cmp	r3, #0
 8016590:	d053      	beq.n	801663a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016592:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016596:	f003 0301 	and.w	r3, r3, #1
 801659a:	2b00      	cmp	r3, #0
 801659c:	d011      	beq.n	80165c2 <UART_RxISR_16BIT_FIFOEN+0xce>
 801659e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80165a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d00b      	beq.n	80165c2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	2201      	movs	r2, #1
 80165b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80165b8:	f043 0201 	orr.w	r2, r3, #1
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80165c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80165c6:	f003 0302 	and.w	r3, r3, #2
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d011      	beq.n	80165f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80165ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80165d2:	f003 0301 	and.w	r3, r3, #1
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d00b      	beq.n	80165f2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	2202      	movs	r2, #2
 80165e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80165e8:	f043 0204 	orr.w	r2, r3, #4
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80165f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80165f6:	f003 0304 	and.w	r3, r3, #4
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d011      	beq.n	8016622 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80165fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8016602:	f003 0301 	and.w	r3, r3, #1
 8016606:	2b00      	cmp	r3, #0
 8016608:	d00b      	beq.n	8016622 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	2204      	movs	r2, #4
 8016610:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016618:	f043 0202 	orr.w	r2, r3, #2
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016628:	2b00      	cmp	r3, #0
 801662a:	d006      	beq.n	801663a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801662c:	6878      	ldr	r0, [r7, #4]
 801662e:	f7fe faf7 	bl	8014c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	2200      	movs	r2, #0
 8016636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016640:	b29b      	uxth	r3, r3
 8016642:	2b00      	cmp	r3, #0
 8016644:	f040 80a2 	bne.w	801678c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801664e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016650:	e853 3f00 	ldrex	r3, [r3]
 8016654:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801665c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	461a      	mov	r2, r3
 8016666:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801666a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801666e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016670:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016672:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016676:	e841 2300 	strex	r3, r2, [r1]
 801667a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801667c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801667e:	2b00      	cmp	r3, #0
 8016680:	d1e2      	bne.n	8016648 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	3308      	adds	r3, #8
 8016688:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801668a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801668c:	e853 3f00 	ldrex	r3, [r3]
 8016690:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016692:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016694:	4b6e      	ldr	r3, [pc, #440]	; (8016850 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8016696:	4013      	ands	r3, r2
 8016698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	3308      	adds	r3, #8
 80166a2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80166a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80166a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80166ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80166ae:	e841 2300 	strex	r3, r2, [r1]
 80166b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80166b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d1e3      	bne.n	8016682 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	2220      	movs	r2, #32
 80166be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	2200      	movs	r2, #0
 80166c6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2200      	movs	r2, #0
 80166cc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	4a60      	ldr	r2, [pc, #384]	; (8016854 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80166d4:	4293      	cmp	r3, r2
 80166d6:	d021      	beq.n	801671c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	685b      	ldr	r3, [r3, #4]
 80166de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d01a      	beq.n	801671c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166ee:	e853 3f00 	ldrex	r3, [r3]
 80166f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80166f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80166fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	461a      	mov	r2, r3
 8016704:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016708:	65bb      	str	r3, [r7, #88]	; 0x58
 801670a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801670c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801670e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016710:	e841 2300 	strex	r3, r2, [r1]
 8016714:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016718:	2b00      	cmp	r3, #0
 801671a:	d1e4      	bne.n	80166e6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016720:	2b01      	cmp	r3, #1
 8016722:	d130      	bne.n	8016786 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	2200      	movs	r2, #0
 8016728:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016732:	e853 3f00 	ldrex	r3, [r3]
 8016736:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801673a:	f023 0310 	bic.w	r3, r3, #16
 801673e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	461a      	mov	r2, r3
 8016748:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801674c:	647b      	str	r3, [r7, #68]	; 0x44
 801674e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016750:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016754:	e841 2300 	strex	r3, r2, [r1]
 8016758:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801675a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801675c:	2b00      	cmp	r3, #0
 801675e:	d1e4      	bne.n	801672a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	69db      	ldr	r3, [r3, #28]
 8016766:	f003 0310 	and.w	r3, r3, #16
 801676a:	2b10      	cmp	r3, #16
 801676c:	d103      	bne.n	8016776 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	2210      	movs	r2, #16
 8016774:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801677c:	4619      	mov	r1, r3
 801677e:	6878      	ldr	r0, [r7, #4]
 8016780:	f7fe fa58 	bl	8014c34 <HAL_UARTEx_RxEventCallback>
 8016784:	e002      	b.n	801678c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016786:	6878      	ldr	r0, [r7, #4]
 8016788:	f7ec fa8a 	bl	8002ca0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801678c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8016790:	2b00      	cmp	r3, #0
 8016792:	d006      	beq.n	80167a2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8016794:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016798:	f003 0320 	and.w	r3, r3, #32
 801679c:	2b00      	cmp	r3, #0
 801679e:	f47f aecd 	bne.w	801653c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80167a8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80167ac:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d049      	beq.n	8016848 <UART_RxISR_16BIT_FIFOEN+0x354>
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80167ba:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80167be:	429a      	cmp	r2, r3
 80167c0:	d242      	bcs.n	8016848 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	3308      	adds	r3, #8
 80167c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167cc:	e853 3f00 	ldrex	r3, [r3]
 80167d0:	623b      	str	r3, [r7, #32]
   return(result);
 80167d2:	6a3b      	ldr	r3, [r7, #32]
 80167d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80167d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	3308      	adds	r3, #8
 80167e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80167e6:	633a      	str	r2, [r7, #48]	; 0x30
 80167e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80167ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167ee:	e841 2300 	strex	r3, r2, [r1]
 80167f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80167f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d1e3      	bne.n	80167c2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	4a16      	ldr	r2, [pc, #88]	; (8016858 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80167fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016806:	693b      	ldr	r3, [r7, #16]
 8016808:	e853 3f00 	ldrex	r3, [r3]
 801680c:	60fb      	str	r3, [r7, #12]
   return(result);
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	f043 0320 	orr.w	r3, r3, #32
 8016814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	461a      	mov	r2, r3
 801681e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016822:	61fb      	str	r3, [r7, #28]
 8016824:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016826:	69b9      	ldr	r1, [r7, #24]
 8016828:	69fa      	ldr	r2, [r7, #28]
 801682a:	e841 2300 	strex	r3, r2, [r1]
 801682e:	617b      	str	r3, [r7, #20]
   return(result);
 8016830:	697b      	ldr	r3, [r7, #20]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d1e4      	bne.n	8016800 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016836:	e007      	b.n	8016848 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	681b      	ldr	r3, [r3, #0]
 801683c:	699a      	ldr	r2, [r3, #24]
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	f042 0208 	orr.w	r2, r2, #8
 8016846:	619a      	str	r2, [r3, #24]
}
 8016848:	bf00      	nop
 801684a:	37b8      	adds	r7, #184	; 0xb8
 801684c:	46bd      	mov	sp, r7
 801684e:	bd80      	pop	{r7, pc}
 8016850:	effffffe 	.word	0xeffffffe
 8016854:	58000c00 	.word	0x58000c00
 8016858:	08015fdd 	.word	0x08015fdd

0801685c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801685c:	b480      	push	{r7}
 801685e:	b083      	sub	sp, #12
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8016864:	bf00      	nop
 8016866:	370c      	adds	r7, #12
 8016868:	46bd      	mov	sp, r7
 801686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686e:	4770      	bx	lr

08016870 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8016870:	b480      	push	{r7}
 8016872:	b083      	sub	sp, #12
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8016878:	bf00      	nop
 801687a:	370c      	adds	r7, #12
 801687c:	46bd      	mov	sp, r7
 801687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016882:	4770      	bx	lr

08016884 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8016884:	b480      	push	{r7}
 8016886:	b083      	sub	sp, #12
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801688c:	bf00      	nop
 801688e:	370c      	adds	r7, #12
 8016890:	46bd      	mov	sp, r7
 8016892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016896:	4770      	bx	lr

08016898 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8016898:	b480      	push	{r7}
 801689a:	b089      	sub	sp, #36	; 0x24
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80168a6:	2b01      	cmp	r3, #1
 80168a8:	d101      	bne.n	80168ae <HAL_UARTEx_EnableStopMode+0x16>
 80168aa:	2302      	movs	r3, #2
 80168ac:	e021      	b.n	80168f2 <HAL_UARTEx_EnableStopMode+0x5a>
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	2201      	movs	r2, #1
 80168b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	e853 3f00 	ldrex	r3, [r3]
 80168c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80168c4:	68bb      	ldr	r3, [r7, #8]
 80168c6:	f043 0302 	orr.w	r3, r3, #2
 80168ca:	61fb      	str	r3, [r7, #28]
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	461a      	mov	r2, r3
 80168d2:	69fb      	ldr	r3, [r7, #28]
 80168d4:	61bb      	str	r3, [r7, #24]
 80168d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168d8:	6979      	ldr	r1, [r7, #20]
 80168da:	69ba      	ldr	r2, [r7, #24]
 80168dc:	e841 2300 	strex	r3, r2, [r1]
 80168e0:	613b      	str	r3, [r7, #16]
   return(result);
 80168e2:	693b      	ldr	r3, [r7, #16]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d1e6      	bne.n	80168b6 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2200      	movs	r2, #0
 80168ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80168f0:	2300      	movs	r3, #0
}
 80168f2:	4618      	mov	r0, r3
 80168f4:	3724      	adds	r7, #36	; 0x24
 80168f6:	46bd      	mov	sp, r7
 80168f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fc:	4770      	bx	lr

080168fe <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80168fe:	b580      	push	{r7, lr}
 8016900:	b084      	sub	sp, #16
 8016902:	af00      	add	r7, sp, #0
 8016904:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801690c:	2b01      	cmp	r3, #1
 801690e:	d101      	bne.n	8016914 <HAL_UARTEx_EnableFifoMode+0x16>
 8016910:	2302      	movs	r3, #2
 8016912:	e02b      	b.n	801696c <HAL_UARTEx_EnableFifoMode+0x6e>
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	2201      	movs	r2, #1
 8016918:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	2224      	movs	r2, #36	; 0x24
 8016920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	681a      	ldr	r2, [r3, #0]
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	f022 0201 	bic.w	r2, r2, #1
 801693a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016942:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 801694a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	68fa      	ldr	r2, [r7, #12]
 8016952:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016954:	6878      	ldr	r0, [r7, #4]
 8016956:	f000 f8c3 	bl	8016ae0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	2220      	movs	r2, #32
 801695e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	2200      	movs	r2, #0
 8016966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801696a:	2300      	movs	r3, #0
}
 801696c:	4618      	mov	r0, r3
 801696e:	3710      	adds	r7, #16
 8016970:	46bd      	mov	sp, r7
 8016972:	bd80      	pop	{r7, pc}

08016974 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8016974:	b480      	push	{r7}
 8016976:	b085      	sub	sp, #20
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016982:	2b01      	cmp	r3, #1
 8016984:	d101      	bne.n	801698a <HAL_UARTEx_DisableFifoMode+0x16>
 8016986:	2302      	movs	r3, #2
 8016988:	e027      	b.n	80169da <HAL_UARTEx_DisableFifoMode+0x66>
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	2201      	movs	r2, #1
 801698e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	2224      	movs	r2, #36	; 0x24
 8016996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	681a      	ldr	r2, [r3, #0]
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	f022 0201 	bic.w	r2, r2, #1
 80169b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80169b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	2200      	movs	r2, #0
 80169be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	68fa      	ldr	r2, [r7, #12]
 80169c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2220      	movs	r2, #32
 80169cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2200      	movs	r2, #0
 80169d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80169d8:	2300      	movs	r3, #0
}
 80169da:	4618      	mov	r0, r3
 80169dc:	3714      	adds	r7, #20
 80169de:	46bd      	mov	sp, r7
 80169e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e4:	4770      	bx	lr

080169e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80169e6:	b580      	push	{r7, lr}
 80169e8:	b084      	sub	sp, #16
 80169ea:	af00      	add	r7, sp, #0
 80169ec:	6078      	str	r0, [r7, #4]
 80169ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80169f6:	2b01      	cmp	r3, #1
 80169f8:	d101      	bne.n	80169fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80169fa:	2302      	movs	r3, #2
 80169fc:	e02d      	b.n	8016a5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	2201      	movs	r2, #1
 8016a02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	2224      	movs	r2, #36	; 0x24
 8016a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	681a      	ldr	r2, [r3, #0]
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	f022 0201 	bic.w	r2, r2, #1
 8016a24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	689b      	ldr	r3, [r3, #8]
 8016a2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	683a      	ldr	r2, [r7, #0]
 8016a36:	430a      	orrs	r2, r1
 8016a38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016a3a:	6878      	ldr	r0, [r7, #4]
 8016a3c:	f000 f850 	bl	8016ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	68fa      	ldr	r2, [r7, #12]
 8016a46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	2220      	movs	r2, #32
 8016a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	2200      	movs	r2, #0
 8016a54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016a58:	2300      	movs	r3, #0
}
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	3710      	adds	r7, #16
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	bd80      	pop	{r7, pc}

08016a62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8016a62:	b580      	push	{r7, lr}
 8016a64:	b084      	sub	sp, #16
 8016a66:	af00      	add	r7, sp, #0
 8016a68:	6078      	str	r0, [r7, #4]
 8016a6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8016a72:	2b01      	cmp	r3, #1
 8016a74:	d101      	bne.n	8016a7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8016a76:	2302      	movs	r3, #2
 8016a78:	e02d      	b.n	8016ad6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	2201      	movs	r2, #1
 8016a7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	2224      	movs	r2, #36	; 0x24
 8016a86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	681a      	ldr	r2, [r3, #0]
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	f022 0201 	bic.w	r2, r2, #1
 8016aa0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	689b      	ldr	r3, [r3, #8]
 8016aa8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	683a      	ldr	r2, [r7, #0]
 8016ab2:	430a      	orrs	r2, r1
 8016ab4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8016ab6:	6878      	ldr	r0, [r7, #4]
 8016ab8:	f000 f812 	bl	8016ae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	68fa      	ldr	r2, [r7, #12]
 8016ac2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	2220      	movs	r2, #32
 8016ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	2200      	movs	r2, #0
 8016ad0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016ad4:	2300      	movs	r3, #0
}
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	3710      	adds	r7, #16
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}
	...

08016ae0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8016ae0:	b480      	push	{r7}
 8016ae2:	b085      	sub	sp, #20
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d108      	bne.n	8016b02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	2201      	movs	r2, #1
 8016af4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	2201      	movs	r2, #1
 8016afc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8016b00:	e031      	b.n	8016b66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8016b02:	2310      	movs	r3, #16
 8016b04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8016b06:	2310      	movs	r3, #16
 8016b08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	689b      	ldr	r3, [r3, #8]
 8016b10:	0e5b      	lsrs	r3, r3, #25
 8016b12:	b2db      	uxtb	r3, r3
 8016b14:	f003 0307 	and.w	r3, r3, #7
 8016b18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	689b      	ldr	r3, [r3, #8]
 8016b20:	0f5b      	lsrs	r3, r3, #29
 8016b22:	b2db      	uxtb	r3, r3
 8016b24:	f003 0307 	and.w	r3, r3, #7
 8016b28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016b2a:	7bbb      	ldrb	r3, [r7, #14]
 8016b2c:	7b3a      	ldrb	r2, [r7, #12]
 8016b2e:	4911      	ldr	r1, [pc, #68]	; (8016b74 <UARTEx_SetNbDataToProcess+0x94>)
 8016b30:	5c8a      	ldrb	r2, [r1, r2]
 8016b32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8016b36:	7b3a      	ldrb	r2, [r7, #12]
 8016b38:	490f      	ldr	r1, [pc, #60]	; (8016b78 <UARTEx_SetNbDataToProcess+0x98>)
 8016b3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8016b3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016b40:	b29a      	uxth	r2, r3
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016b48:	7bfb      	ldrb	r3, [r7, #15]
 8016b4a:	7b7a      	ldrb	r2, [r7, #13]
 8016b4c:	4909      	ldr	r1, [pc, #36]	; (8016b74 <UARTEx_SetNbDataToProcess+0x94>)
 8016b4e:	5c8a      	ldrb	r2, [r1, r2]
 8016b50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8016b54:	7b7a      	ldrb	r2, [r7, #13]
 8016b56:	4908      	ldr	r1, [pc, #32]	; (8016b78 <UARTEx_SetNbDataToProcess+0x98>)
 8016b58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8016b5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8016b5e:	b29a      	uxth	r2, r3
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8016b66:	bf00      	nop
 8016b68:	3714      	adds	r7, #20
 8016b6a:	46bd      	mov	sp, r7
 8016b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b70:	4770      	bx	lr
 8016b72:	bf00      	nop
 8016b74:	0801ae84 	.word	0x0801ae84
 8016b78:	0801ae8c 	.word	0x0801ae8c

08016b7c <__NVIC_SetPriority>:
{
 8016b7c:	b480      	push	{r7}
 8016b7e:	b083      	sub	sp, #12
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	4603      	mov	r3, r0
 8016b84:	6039      	str	r1, [r7, #0]
 8016b86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8016b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	db0a      	blt.n	8016ba6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	b2da      	uxtb	r2, r3
 8016b94:	490c      	ldr	r1, [pc, #48]	; (8016bc8 <__NVIC_SetPriority+0x4c>)
 8016b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016b9a:	0112      	lsls	r2, r2, #4
 8016b9c:	b2d2      	uxtb	r2, r2
 8016b9e:	440b      	add	r3, r1
 8016ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016ba4:	e00a      	b.n	8016bbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016ba6:	683b      	ldr	r3, [r7, #0]
 8016ba8:	b2da      	uxtb	r2, r3
 8016baa:	4908      	ldr	r1, [pc, #32]	; (8016bcc <__NVIC_SetPriority+0x50>)
 8016bac:	88fb      	ldrh	r3, [r7, #6]
 8016bae:	f003 030f 	and.w	r3, r3, #15
 8016bb2:	3b04      	subs	r3, #4
 8016bb4:	0112      	lsls	r2, r2, #4
 8016bb6:	b2d2      	uxtb	r2, r2
 8016bb8:	440b      	add	r3, r1
 8016bba:	761a      	strb	r2, [r3, #24]
}
 8016bbc:	bf00      	nop
 8016bbe:	370c      	adds	r7, #12
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc6:	4770      	bx	lr
 8016bc8:	e000e100 	.word	0xe000e100
 8016bcc:	e000ed00 	.word	0xe000ed00

08016bd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8016bd0:	b580      	push	{r7, lr}
 8016bd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8016bd4:	4b05      	ldr	r3, [pc, #20]	; (8016bec <SysTick_Handler+0x1c>)
 8016bd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8016bd8:	f002 f958 	bl	8018e8c <xTaskGetSchedulerState>
 8016bdc:	4603      	mov	r3, r0
 8016bde:	2b01      	cmp	r3, #1
 8016be0:	d001      	beq.n	8016be6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8016be2:	f002 ff79 	bl	8019ad8 <xPortSysTickHandler>
  }
}
 8016be6:	bf00      	nop
 8016be8:	bd80      	pop	{r7, pc}
 8016bea:	bf00      	nop
 8016bec:	e000e010 	.word	0xe000e010

08016bf0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8016bf4:	2100      	movs	r1, #0
 8016bf6:	f06f 0004 	mvn.w	r0, #4
 8016bfa:	f7ff ffbf 	bl	8016b7c <__NVIC_SetPriority>
#endif
}
 8016bfe:	bf00      	nop
 8016c00:	bd80      	pop	{r7, pc}
	...

08016c04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8016c04:	b480      	push	{r7}
 8016c06:	b083      	sub	sp, #12
 8016c08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016c0a:	f3ef 8305 	mrs	r3, IPSR
 8016c0e:	603b      	str	r3, [r7, #0]
  return(result);
 8016c10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d003      	beq.n	8016c1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8016c16:	f06f 0305 	mvn.w	r3, #5
 8016c1a:	607b      	str	r3, [r7, #4]
 8016c1c:	e00c      	b.n	8016c38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8016c1e:	4b0a      	ldr	r3, [pc, #40]	; (8016c48 <osKernelInitialize+0x44>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d105      	bne.n	8016c32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8016c26:	4b08      	ldr	r3, [pc, #32]	; (8016c48 <osKernelInitialize+0x44>)
 8016c28:	2201      	movs	r2, #1
 8016c2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	607b      	str	r3, [r7, #4]
 8016c30:	e002      	b.n	8016c38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8016c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016c38:	687b      	ldr	r3, [r7, #4]
}
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	370c      	adds	r7, #12
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c44:	4770      	bx	lr
 8016c46:	bf00      	nop
 8016c48:	2400201c 	.word	0x2400201c

08016c4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b082      	sub	sp, #8
 8016c50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016c52:	f3ef 8305 	mrs	r3, IPSR
 8016c56:	603b      	str	r3, [r7, #0]
  return(result);
 8016c58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d003      	beq.n	8016c66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8016c5e:	f06f 0305 	mvn.w	r3, #5
 8016c62:	607b      	str	r3, [r7, #4]
 8016c64:	e010      	b.n	8016c88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8016c66:	4b0b      	ldr	r3, [pc, #44]	; (8016c94 <osKernelStart+0x48>)
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	2b01      	cmp	r3, #1
 8016c6c:	d109      	bne.n	8016c82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8016c6e:	f7ff ffbf 	bl	8016bf0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8016c72:	4b08      	ldr	r3, [pc, #32]	; (8016c94 <osKernelStart+0x48>)
 8016c74:	2202      	movs	r2, #2
 8016c76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8016c78:	f001 fc0c 	bl	8018494 <vTaskStartScheduler>
      stat = osOK;
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	607b      	str	r3, [r7, #4]
 8016c80:	e002      	b.n	8016c88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8016c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8016c88:	687b      	ldr	r3, [r7, #4]
}
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	3708      	adds	r7, #8
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	bd80      	pop	{r7, pc}
 8016c92:	bf00      	nop
 8016c94:	2400201c 	.word	0x2400201c

08016c98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b08e      	sub	sp, #56	; 0x38
 8016c9c:	af04      	add	r7, sp, #16
 8016c9e:	60f8      	str	r0, [r7, #12]
 8016ca0:	60b9      	str	r1, [r7, #8]
 8016ca2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016ca8:	f3ef 8305 	mrs	r3, IPSR
 8016cac:	617b      	str	r3, [r7, #20]
  return(result);
 8016cae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d17e      	bne.n	8016db2 <osThreadNew+0x11a>
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d07b      	beq.n	8016db2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8016cba:	2380      	movs	r3, #128	; 0x80
 8016cbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8016cbe:	2318      	movs	r3, #24
 8016cc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8016cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016cca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d045      	beq.n	8016d5e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d002      	beq.n	8016ce0 <osThreadNew+0x48>
        name = attr->name;
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	699b      	ldr	r3, [r3, #24]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d002      	beq.n	8016cee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	699b      	ldr	r3, [r3, #24]
 8016cec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8016cee:	69fb      	ldr	r3, [r7, #28]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d008      	beq.n	8016d06 <osThreadNew+0x6e>
 8016cf4:	69fb      	ldr	r3, [r7, #28]
 8016cf6:	2b38      	cmp	r3, #56	; 0x38
 8016cf8:	d805      	bhi.n	8016d06 <osThreadNew+0x6e>
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	685b      	ldr	r3, [r3, #4]
 8016cfe:	f003 0301 	and.w	r3, r3, #1
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d001      	beq.n	8016d0a <osThreadNew+0x72>
        return (NULL);
 8016d06:	2300      	movs	r3, #0
 8016d08:	e054      	b.n	8016db4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	695b      	ldr	r3, [r3, #20]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d003      	beq.n	8016d1a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	695b      	ldr	r3, [r3, #20]
 8016d16:	089b      	lsrs	r3, r3, #2
 8016d18:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	689b      	ldr	r3, [r3, #8]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d00e      	beq.n	8016d40 <osThreadNew+0xa8>
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	68db      	ldr	r3, [r3, #12]
 8016d26:	2b5b      	cmp	r3, #91	; 0x5b
 8016d28:	d90a      	bls.n	8016d40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d006      	beq.n	8016d40 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	695b      	ldr	r3, [r3, #20]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d002      	beq.n	8016d40 <osThreadNew+0xa8>
        mem = 1;
 8016d3a:	2301      	movs	r3, #1
 8016d3c:	61bb      	str	r3, [r7, #24]
 8016d3e:	e010      	b.n	8016d62 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	689b      	ldr	r3, [r3, #8]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d10c      	bne.n	8016d62 <osThreadNew+0xca>
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	68db      	ldr	r3, [r3, #12]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d108      	bne.n	8016d62 <osThreadNew+0xca>
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	691b      	ldr	r3, [r3, #16]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d104      	bne.n	8016d62 <osThreadNew+0xca>
          mem = 0;
 8016d58:	2300      	movs	r3, #0
 8016d5a:	61bb      	str	r3, [r7, #24]
 8016d5c:	e001      	b.n	8016d62 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8016d5e:	2300      	movs	r3, #0
 8016d60:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	2b01      	cmp	r3, #1
 8016d66:	d110      	bne.n	8016d8a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8016d6c:	687a      	ldr	r2, [r7, #4]
 8016d6e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016d70:	9202      	str	r2, [sp, #8]
 8016d72:	9301      	str	r3, [sp, #4]
 8016d74:	69fb      	ldr	r3, [r7, #28]
 8016d76:	9300      	str	r3, [sp, #0]
 8016d78:	68bb      	ldr	r3, [r7, #8]
 8016d7a:	6a3a      	ldr	r2, [r7, #32]
 8016d7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d7e:	68f8      	ldr	r0, [r7, #12]
 8016d80:	f001 f9b2 	bl	80180e8 <xTaskCreateStatic>
 8016d84:	4603      	mov	r3, r0
 8016d86:	613b      	str	r3, [r7, #16]
 8016d88:	e013      	b.n	8016db2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8016d8a:	69bb      	ldr	r3, [r7, #24]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d110      	bne.n	8016db2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016d90:	6a3b      	ldr	r3, [r7, #32]
 8016d92:	b29a      	uxth	r2, r3
 8016d94:	f107 0310 	add.w	r3, r7, #16
 8016d98:	9301      	str	r3, [sp, #4]
 8016d9a:	69fb      	ldr	r3, [r7, #28]
 8016d9c:	9300      	str	r3, [sp, #0]
 8016d9e:	68bb      	ldr	r3, [r7, #8]
 8016da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016da2:	68f8      	ldr	r0, [r7, #12]
 8016da4:	f001 f9fd 	bl	80181a2 <xTaskCreate>
 8016da8:	4603      	mov	r3, r0
 8016daa:	2b01      	cmp	r3, #1
 8016dac:	d001      	beq.n	8016db2 <osThreadNew+0x11a>
            hTask = NULL;
 8016dae:	2300      	movs	r3, #0
 8016db0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8016db2:	693b      	ldr	r3, [r7, #16]
}
 8016db4:	4618      	mov	r0, r3
 8016db6:	3728      	adds	r7, #40	; 0x28
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}

08016dbc <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8016dbc:	b480      	push	{r7}
 8016dbe:	b083      	sub	sp, #12
 8016dc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016dc2:	f3ef 8305 	mrs	r3, IPSR
 8016dc6:	603b      	str	r3, [r7, #0]
  return(result);
 8016dc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d003      	beq.n	8016dd6 <osThreadYield+0x1a>
    stat = osErrorISR;
 8016dce:	f06f 0305 	mvn.w	r3, #5
 8016dd2:	607b      	str	r3, [r7, #4]
 8016dd4:	e009      	b.n	8016dea <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8016dda:	4b07      	ldr	r3, [pc, #28]	; (8016df8 <osThreadYield+0x3c>)
 8016ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016de0:	601a      	str	r2, [r3, #0]
 8016de2:	f3bf 8f4f 	dsb	sy
 8016de6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8016dea:	687b      	ldr	r3, [r7, #4]
}
 8016dec:	4618      	mov	r0, r3
 8016dee:	370c      	adds	r7, #12
 8016df0:	46bd      	mov	sp, r7
 8016df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df6:	4770      	bx	lr
 8016df8:	e000ed04 	.word	0xe000ed04

08016dfc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b084      	sub	sp, #16
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016e04:	f3ef 8305 	mrs	r3, IPSR
 8016e08:	60bb      	str	r3, [r7, #8]
  return(result);
 8016e0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d003      	beq.n	8016e18 <osDelay+0x1c>
    stat = osErrorISR;
 8016e10:	f06f 0305 	mvn.w	r3, #5
 8016e14:	60fb      	str	r3, [r7, #12]
 8016e16:	e007      	b.n	8016e28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8016e18:	2300      	movs	r3, #0
 8016e1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d002      	beq.n	8016e28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8016e22:	6878      	ldr	r0, [r7, #4]
 8016e24:	f001 fb02 	bl	801842c <vTaskDelay>
    }
  }

  return (stat);
 8016e28:	68fb      	ldr	r3, [r7, #12]
}
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	3710      	adds	r7, #16
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	bd80      	pop	{r7, pc}

08016e32 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8016e32:	b580      	push	{r7, lr}
 8016e34:	b086      	sub	sp, #24
 8016e36:	af00      	add	r7, sp, #0
 8016e38:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016e3e:	f3ef 8305 	mrs	r3, IPSR
 8016e42:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e44:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d12d      	bne.n	8016ea6 <osEventFlagsNew+0x74>
    mem = -1;
 8016e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e4e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d015      	beq.n	8016e82 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	689b      	ldr	r3, [r3, #8]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d006      	beq.n	8016e6c <osEventFlagsNew+0x3a>
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	68db      	ldr	r3, [r3, #12]
 8016e62:	2b1f      	cmp	r3, #31
 8016e64:	d902      	bls.n	8016e6c <osEventFlagsNew+0x3a>
        mem = 1;
 8016e66:	2301      	movs	r3, #1
 8016e68:	613b      	str	r3, [r7, #16]
 8016e6a:	e00c      	b.n	8016e86 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	689b      	ldr	r3, [r3, #8]
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d108      	bne.n	8016e86 <osEventFlagsNew+0x54>
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	68db      	ldr	r3, [r3, #12]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d104      	bne.n	8016e86 <osEventFlagsNew+0x54>
          mem = 0;
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	613b      	str	r3, [r7, #16]
 8016e80:	e001      	b.n	8016e86 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8016e82:	2300      	movs	r3, #0
 8016e84:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8016e86:	693b      	ldr	r3, [r7, #16]
 8016e88:	2b01      	cmp	r3, #1
 8016e8a:	d106      	bne.n	8016e9a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	689b      	ldr	r3, [r3, #8]
 8016e90:	4618      	mov	r0, r3
 8016e92:	f000 f91d 	bl	80170d0 <xEventGroupCreateStatic>
 8016e96:	6178      	str	r0, [r7, #20]
 8016e98:	e005      	b.n	8016ea6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8016e9a:	693b      	ldr	r3, [r7, #16]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d102      	bne.n	8016ea6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8016ea0:	f000 f94d 	bl	801713e <xEventGroupCreate>
 8016ea4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8016ea6:	697b      	ldr	r3, [r7, #20]
}
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	3718      	adds	r7, #24
 8016eac:	46bd      	mov	sp, r7
 8016eae:	bd80      	pop	{r7, pc}

08016eb0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b086      	sub	sp, #24
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	6078      	str	r0, [r7, #4]
 8016eb8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d004      	beq.n	8016ece <osEventFlagsSet+0x1e>
 8016ec4:	683b      	ldr	r3, [r7, #0]
 8016ec6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d003      	beq.n	8016ed6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016ece:	f06f 0303 	mvn.w	r3, #3
 8016ed2:	617b      	str	r3, [r7, #20]
 8016ed4:	e028      	b.n	8016f28 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016ed6:	f3ef 8305 	mrs	r3, IPSR
 8016eda:	60fb      	str	r3, [r7, #12]
  return(result);
 8016edc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d01d      	beq.n	8016f1e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8016ee2:	2300      	movs	r3, #0
 8016ee4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8016ee6:	f107 0308 	add.w	r3, r7, #8
 8016eea:	461a      	mov	r2, r3
 8016eec:	6839      	ldr	r1, [r7, #0]
 8016eee:	6938      	ldr	r0, [r7, #16]
 8016ef0:	f000 fb46 	bl	8017580 <xEventGroupSetBitsFromISR>
 8016ef4:	4603      	mov	r3, r0
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d103      	bne.n	8016f02 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8016efa:	f06f 0302 	mvn.w	r3, #2
 8016efe:	617b      	str	r3, [r7, #20]
 8016f00:	e012      	b.n	8016f28 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8016f02:	683b      	ldr	r3, [r7, #0]
 8016f04:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8016f06:	68bb      	ldr	r3, [r7, #8]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d00d      	beq.n	8016f28 <osEventFlagsSet+0x78>
 8016f0c:	4b09      	ldr	r3, [pc, #36]	; (8016f34 <osEventFlagsSet+0x84>)
 8016f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f12:	601a      	str	r2, [r3, #0]
 8016f14:	f3bf 8f4f 	dsb	sy
 8016f18:	f3bf 8f6f 	isb	sy
 8016f1c:	e004      	b.n	8016f28 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8016f1e:	6839      	ldr	r1, [r7, #0]
 8016f20:	6938      	ldr	r0, [r7, #16]
 8016f22:	f000 fa65 	bl	80173f0 <xEventGroupSetBits>
 8016f26:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016f28:	697b      	ldr	r3, [r7, #20]
}
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	3718      	adds	r7, #24
 8016f2e:	46bd      	mov	sp, r7
 8016f30:	bd80      	pop	{r7, pc}
 8016f32:	bf00      	nop
 8016f34:	e000ed04 	.word	0xe000ed04

08016f38 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b086      	sub	sp, #24
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
 8016f40:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016f46:	693b      	ldr	r3, [r7, #16]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d004      	beq.n	8016f56 <osEventFlagsClear+0x1e>
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d003      	beq.n	8016f5e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8016f56:	f06f 0303 	mvn.w	r3, #3
 8016f5a:	617b      	str	r3, [r7, #20]
 8016f5c:	e019      	b.n	8016f92 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016f5e:	f3ef 8305 	mrs	r3, IPSR
 8016f62:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f64:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d00e      	beq.n	8016f88 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8016f6a:	6938      	ldr	r0, [r7, #16]
 8016f6c:	f000 fa1c 	bl	80173a8 <xEventGroupGetBitsFromISR>
 8016f70:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8016f72:	6839      	ldr	r1, [r7, #0]
 8016f74:	6938      	ldr	r0, [r7, #16]
 8016f76:	f000 fa03 	bl	8017380 <xEventGroupClearBitsFromISR>
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d108      	bne.n	8016f92 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8016f80:	f06f 0302 	mvn.w	r3, #2
 8016f84:	617b      	str	r3, [r7, #20]
 8016f86:	e004      	b.n	8016f92 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8016f88:	6839      	ldr	r1, [r7, #0]
 8016f8a:	6938      	ldr	r0, [r7, #16]
 8016f8c:	f000 f9c0 	bl	8017310 <xEventGroupClearBits>
 8016f90:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8016f92:	697b      	ldr	r3, [r7, #20]
}
 8016f94:	4618      	mov	r0, r3
 8016f96:	3718      	adds	r7, #24
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	bd80      	pop	{r7, pc}

08016f9c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b08c      	sub	sp, #48	; 0x30
 8016fa0:	af02      	add	r7, sp, #8
 8016fa2:	60f8      	str	r0, [r7, #12]
 8016fa4:	60b9      	str	r1, [r7, #8]
 8016fa6:	607a      	str	r2, [r7, #4]
 8016fa8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8016fae:	69bb      	ldr	r3, [r7, #24]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d004      	beq.n	8016fbe <osEventFlagsWait+0x22>
 8016fb4:	68bb      	ldr	r3, [r7, #8]
 8016fb6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d003      	beq.n	8016fc6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8016fbe:	f06f 0303 	mvn.w	r3, #3
 8016fc2:	61fb      	str	r3, [r7, #28]
 8016fc4:	e04b      	b.n	801705e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016fc6:	f3ef 8305 	mrs	r3, IPSR
 8016fca:	617b      	str	r3, [r7, #20]
  return(result);
 8016fcc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d003      	beq.n	8016fda <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8016fd2:	f06f 0305 	mvn.w	r3, #5
 8016fd6:	61fb      	str	r3, [r7, #28]
 8016fd8:	e041      	b.n	801705e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	f003 0301 	and.w	r3, r3, #1
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d002      	beq.n	8016fea <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8016fe4:	2301      	movs	r3, #1
 8016fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8016fe8:	e001      	b.n	8016fee <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8016fea:	2300      	movs	r3, #0
 8016fec:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	f003 0302 	and.w	r3, r3, #2
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d002      	beq.n	8016ffe <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	623b      	str	r3, [r7, #32]
 8016ffc:	e001      	b.n	8017002 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8016ffe:	2301      	movs	r3, #1
 8017000:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8017002:	683b      	ldr	r3, [r7, #0]
 8017004:	9300      	str	r3, [sp, #0]
 8017006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017008:	6a3a      	ldr	r2, [r7, #32]
 801700a:	68b9      	ldr	r1, [r7, #8]
 801700c:	69b8      	ldr	r0, [r7, #24]
 801700e:	f000 f8b1 	bl	8017174 <xEventGroupWaitBits>
 8017012:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	f003 0301 	and.w	r3, r3, #1
 801701a:	2b00      	cmp	r3, #0
 801701c:	d010      	beq.n	8017040 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801701e:	68ba      	ldr	r2, [r7, #8]
 8017020:	69fb      	ldr	r3, [r7, #28]
 8017022:	4013      	ands	r3, r2
 8017024:	68ba      	ldr	r2, [r7, #8]
 8017026:	429a      	cmp	r2, r3
 8017028:	d019      	beq.n	801705e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801702a:	683b      	ldr	r3, [r7, #0]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d003      	beq.n	8017038 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8017030:	f06f 0301 	mvn.w	r3, #1
 8017034:	61fb      	str	r3, [r7, #28]
 8017036:	e012      	b.n	801705e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8017038:	f06f 0302 	mvn.w	r3, #2
 801703c:	61fb      	str	r3, [r7, #28]
 801703e:	e00e      	b.n	801705e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8017040:	68ba      	ldr	r2, [r7, #8]
 8017042:	69fb      	ldr	r3, [r7, #28]
 8017044:	4013      	ands	r3, r2
 8017046:	2b00      	cmp	r3, #0
 8017048:	d109      	bne.n	801705e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801704a:	683b      	ldr	r3, [r7, #0]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d003      	beq.n	8017058 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8017050:	f06f 0301 	mvn.w	r3, #1
 8017054:	61fb      	str	r3, [r7, #28]
 8017056:	e002      	b.n	801705e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8017058:	f06f 0302 	mvn.w	r3, #2
 801705c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801705e:	69fb      	ldr	r3, [r7, #28]
}
 8017060:	4618      	mov	r0, r3
 8017062:	3728      	adds	r7, #40	; 0x28
 8017064:	46bd      	mov	sp, r7
 8017066:	bd80      	pop	{r7, pc}

08017068 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8017068:	b480      	push	{r7}
 801706a:	b085      	sub	sp, #20
 801706c:	af00      	add	r7, sp, #0
 801706e:	60f8      	str	r0, [r7, #12]
 8017070:	60b9      	str	r1, [r7, #8]
 8017072:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	4a07      	ldr	r2, [pc, #28]	; (8017094 <vApplicationGetIdleTaskMemory+0x2c>)
 8017078:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801707a:	68bb      	ldr	r3, [r7, #8]
 801707c:	4a06      	ldr	r2, [pc, #24]	; (8017098 <vApplicationGetIdleTaskMemory+0x30>)
 801707e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	2280      	movs	r2, #128	; 0x80
 8017084:	601a      	str	r2, [r3, #0]
}
 8017086:	bf00      	nop
 8017088:	3714      	adds	r7, #20
 801708a:	46bd      	mov	sp, r7
 801708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017090:	4770      	bx	lr
 8017092:	bf00      	nop
 8017094:	24002020 	.word	0x24002020
 8017098:	2400207c 	.word	0x2400207c

0801709c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801709c:	b480      	push	{r7}
 801709e:	b085      	sub	sp, #20
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	60f8      	str	r0, [r7, #12]
 80170a4:	60b9      	str	r1, [r7, #8]
 80170a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	4a07      	ldr	r2, [pc, #28]	; (80170c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80170ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80170ae:	68bb      	ldr	r3, [r7, #8]
 80170b0:	4a06      	ldr	r2, [pc, #24]	; (80170cc <vApplicationGetTimerTaskMemory+0x30>)
 80170b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80170ba:	601a      	str	r2, [r3, #0]
}
 80170bc:	bf00      	nop
 80170be:	3714      	adds	r7, #20
 80170c0:	46bd      	mov	sp, r7
 80170c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c6:	4770      	bx	lr
 80170c8:	2400227c 	.word	0x2400227c
 80170cc:	240022d8 	.word	0x240022d8

080170d0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b086      	sub	sp, #24
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	2b00      	cmp	r3, #0
 80170dc:	d10a      	bne.n	80170f4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80170de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170e2:	f383 8811 	msr	BASEPRI, r3
 80170e6:	f3bf 8f6f 	isb	sy
 80170ea:	f3bf 8f4f 	dsb	sy
 80170ee:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80170f0:	bf00      	nop
 80170f2:	e7fe      	b.n	80170f2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80170f4:	2320      	movs	r3, #32
 80170f6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	2b20      	cmp	r3, #32
 80170fc:	d00a      	beq.n	8017114 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80170fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017102:	f383 8811 	msr	BASEPRI, r3
 8017106:	f3bf 8f6f 	isb	sy
 801710a:	f3bf 8f4f 	dsb	sy
 801710e:	60fb      	str	r3, [r7, #12]
}
 8017110:	bf00      	nop
 8017112:	e7fe      	b.n	8017112 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8017118:	697b      	ldr	r3, [r7, #20]
 801711a:	2b00      	cmp	r3, #0
 801711c:	d00a      	beq.n	8017134 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801711e:	697b      	ldr	r3, [r7, #20]
 8017120:	2200      	movs	r2, #0
 8017122:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017124:	697b      	ldr	r3, [r7, #20]
 8017126:	3304      	adds	r3, #4
 8017128:	4618      	mov	r0, r3
 801712a:	f000 fa3d 	bl	80175a8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801712e:	697b      	ldr	r3, [r7, #20]
 8017130:	2201      	movs	r2, #1
 8017132:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8017134:	697b      	ldr	r3, [r7, #20]
	}
 8017136:	4618      	mov	r0, r3
 8017138:	3718      	adds	r7, #24
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}

0801713e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801713e:	b580      	push	{r7, lr}
 8017140:	b082      	sub	sp, #8
 8017142:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8017144:	2020      	movs	r0, #32
 8017146:	f002 fd57 	bl	8019bf8 <pvPortMalloc>
 801714a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d00a      	beq.n	8017168 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	2200      	movs	r2, #0
 8017156:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	3304      	adds	r3, #4
 801715c:	4618      	mov	r0, r3
 801715e:	f000 fa23 	bl	80175a8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	2200      	movs	r2, #0
 8017166:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8017168:	687b      	ldr	r3, [r7, #4]
	}
 801716a:	4618      	mov	r0, r3
 801716c:	3708      	adds	r7, #8
 801716e:	46bd      	mov	sp, r7
 8017170:	bd80      	pop	{r7, pc}
	...

08017174 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b090      	sub	sp, #64	; 0x40
 8017178:	af00      	add	r7, sp, #0
 801717a:	60f8      	str	r0, [r7, #12]
 801717c:	60b9      	str	r1, [r7, #8]
 801717e:	607a      	str	r2, [r7, #4]
 8017180:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8017186:	2300      	movs	r3, #0
 8017188:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801718a:	2300      	movs	r3, #0
 801718c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d10a      	bne.n	80171aa <xEventGroupWaitBits+0x36>
	__asm volatile
 8017194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017198:	f383 8811 	msr	BASEPRI, r3
 801719c:	f3bf 8f6f 	isb	sy
 80171a0:	f3bf 8f4f 	dsb	sy
 80171a4:	623b      	str	r3, [r7, #32]
}
 80171a6:	bf00      	nop
 80171a8:	e7fe      	b.n	80171a8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80171aa:	68bb      	ldr	r3, [r7, #8]
 80171ac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d00a      	beq.n	80171ca <xEventGroupWaitBits+0x56>
	__asm volatile
 80171b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171b8:	f383 8811 	msr	BASEPRI, r3
 80171bc:	f3bf 8f6f 	isb	sy
 80171c0:	f3bf 8f4f 	dsb	sy
 80171c4:	61fb      	str	r3, [r7, #28]
}
 80171c6:	bf00      	nop
 80171c8:	e7fe      	b.n	80171c8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80171ca:	68bb      	ldr	r3, [r7, #8]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d10a      	bne.n	80171e6 <xEventGroupWaitBits+0x72>
	__asm volatile
 80171d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171d4:	f383 8811 	msr	BASEPRI, r3
 80171d8:	f3bf 8f6f 	isb	sy
 80171dc:	f3bf 8f4f 	dsb	sy
 80171e0:	61bb      	str	r3, [r7, #24]
}
 80171e2:	bf00      	nop
 80171e4:	e7fe      	b.n	80171e4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80171e6:	f001 fe51 	bl	8018e8c <xTaskGetSchedulerState>
 80171ea:	4603      	mov	r3, r0
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d102      	bne.n	80171f6 <xEventGroupWaitBits+0x82>
 80171f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d101      	bne.n	80171fa <xEventGroupWaitBits+0x86>
 80171f6:	2301      	movs	r3, #1
 80171f8:	e000      	b.n	80171fc <xEventGroupWaitBits+0x88>
 80171fa:	2300      	movs	r3, #0
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d10a      	bne.n	8017216 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8017200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017204:	f383 8811 	msr	BASEPRI, r3
 8017208:	f3bf 8f6f 	isb	sy
 801720c:	f3bf 8f4f 	dsb	sy
 8017210:	617b      	str	r3, [r7, #20]
}
 8017212:	bf00      	nop
 8017214:	e7fe      	b.n	8017214 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8017216:	f001 f9a3 	bl	8018560 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801721a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8017220:	683a      	ldr	r2, [r7, #0]
 8017222:	68b9      	ldr	r1, [r7, #8]
 8017224:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017226:	f000 f988 	bl	801753a <prvTestWaitCondition>
 801722a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801722e:	2b00      	cmp	r3, #0
 8017230:	d00e      	beq.n	8017250 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8017232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017234:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8017236:	2300      	movs	r3, #0
 8017238:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d028      	beq.n	8017292 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8017240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017242:	681a      	ldr	r2, [r3, #0]
 8017244:	68bb      	ldr	r3, [r7, #8]
 8017246:	43db      	mvns	r3, r3
 8017248:	401a      	ands	r2, r3
 801724a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801724c:	601a      	str	r2, [r3, #0]
 801724e:	e020      	b.n	8017292 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8017250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017252:	2b00      	cmp	r3, #0
 8017254:	d104      	bne.n	8017260 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8017256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017258:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801725a:	2301      	movs	r3, #1
 801725c:	633b      	str	r3, [r7, #48]	; 0x30
 801725e:	e018      	b.n	8017292 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d003      	beq.n	801726e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8017266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801726c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801726e:	683b      	ldr	r3, [r7, #0]
 8017270:	2b00      	cmp	r3, #0
 8017272:	d003      	beq.n	801727c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8017274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017276:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801727a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801727c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801727e:	1d18      	adds	r0, r3, #4
 8017280:	68ba      	ldr	r2, [r7, #8]
 8017282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017284:	4313      	orrs	r3, r2
 8017286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017288:	4619      	mov	r1, r3
 801728a:	f001 fb77 	bl	801897c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801728e:	2300      	movs	r3, #0
 8017290:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8017292:	f001 f973 	bl	801857c <xTaskResumeAll>
 8017296:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8017298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801729a:	2b00      	cmp	r3, #0
 801729c:	d031      	beq.n	8017302 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d107      	bne.n	80172b4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80172a4:	4b19      	ldr	r3, [pc, #100]	; (801730c <xEventGroupWaitBits+0x198>)
 80172a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80172aa:	601a      	str	r2, [r3, #0]
 80172ac:	f3bf 8f4f 	dsb	sy
 80172b0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80172b4:	f001 fe76 	bl	8018fa4 <uxTaskResetEventItemValue>
 80172b8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80172ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d11a      	bne.n	80172fa <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80172c4:	f002 fb76 	bl	80199b4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80172c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80172ce:	683a      	ldr	r2, [r7, #0]
 80172d0:	68b9      	ldr	r1, [r7, #8]
 80172d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80172d4:	f000 f931 	bl	801753a <prvTestWaitCondition>
 80172d8:	4603      	mov	r3, r0
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d009      	beq.n	80172f2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d006      	beq.n	80172f2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80172e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172e6:	681a      	ldr	r2, [r3, #0]
 80172e8:	68bb      	ldr	r3, [r7, #8]
 80172ea:	43db      	mvns	r3, r3
 80172ec:	401a      	ands	r2, r3
 80172ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172f0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80172f2:	2301      	movs	r3, #1
 80172f4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80172f6:	f002 fb8d 	bl	8019a14 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80172fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017300:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8017302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017304:	4618      	mov	r0, r3
 8017306:	3740      	adds	r7, #64	; 0x40
 8017308:	46bd      	mov	sp, r7
 801730a:	bd80      	pop	{r7, pc}
 801730c:	e000ed04 	.word	0xe000ed04

08017310 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b086      	sub	sp, #24
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
 8017318:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d10a      	bne.n	801733a <xEventGroupClearBits+0x2a>
	__asm volatile
 8017324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017328:	f383 8811 	msr	BASEPRI, r3
 801732c:	f3bf 8f6f 	isb	sy
 8017330:	f3bf 8f4f 	dsb	sy
 8017334:	60fb      	str	r3, [r7, #12]
}
 8017336:	bf00      	nop
 8017338:	e7fe      	b.n	8017338 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801733a:	683b      	ldr	r3, [r7, #0]
 801733c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017340:	2b00      	cmp	r3, #0
 8017342:	d00a      	beq.n	801735a <xEventGroupClearBits+0x4a>
	__asm volatile
 8017344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017348:	f383 8811 	msr	BASEPRI, r3
 801734c:	f3bf 8f6f 	isb	sy
 8017350:	f3bf 8f4f 	dsb	sy
 8017354:	60bb      	str	r3, [r7, #8]
}
 8017356:	bf00      	nop
 8017358:	e7fe      	b.n	8017358 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 801735a:	f002 fb2b 	bl	80199b4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801735e:	697b      	ldr	r3, [r7, #20]
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8017364:	697b      	ldr	r3, [r7, #20]
 8017366:	681a      	ldr	r2, [r3, #0]
 8017368:	683b      	ldr	r3, [r7, #0]
 801736a:	43db      	mvns	r3, r3
 801736c:	401a      	ands	r2, r3
 801736e:	697b      	ldr	r3, [r7, #20]
 8017370:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8017372:	f002 fb4f 	bl	8019a14 <vPortExitCritical>

	return uxReturn;
 8017376:	693b      	ldr	r3, [r7, #16]
}
 8017378:	4618      	mov	r0, r3
 801737a:	3718      	adds	r7, #24
 801737c:	46bd      	mov	sp, r7
 801737e:	bd80      	pop	{r7, pc}

08017380 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8017380:	b580      	push	{r7, lr}
 8017382:	b084      	sub	sp, #16
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
 8017388:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801738a:	2300      	movs	r3, #0
 801738c:	683a      	ldr	r2, [r7, #0]
 801738e:	6879      	ldr	r1, [r7, #4]
 8017390:	4804      	ldr	r0, [pc, #16]	; (80173a4 <xEventGroupClearBitsFromISR+0x24>)
 8017392:	f002 f9c1 	bl	8019718 <xTimerPendFunctionCallFromISR>
 8017396:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8017398:	68fb      	ldr	r3, [r7, #12]
	}
 801739a:	4618      	mov	r0, r3
 801739c:	3710      	adds	r7, #16
 801739e:	46bd      	mov	sp, r7
 80173a0:	bd80      	pop	{r7, pc}
 80173a2:	bf00      	nop
 80173a4:	08017521 	.word	0x08017521

080173a8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80173a8:	b480      	push	{r7}
 80173aa:	b089      	sub	sp, #36	; 0x24
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80173b4:	f3ef 8211 	mrs	r2, BASEPRI
 80173b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173bc:	f383 8811 	msr	BASEPRI, r3
 80173c0:	f3bf 8f6f 	isb	sy
 80173c4:	f3bf 8f4f 	dsb	sy
 80173c8:	60fa      	str	r2, [r7, #12]
 80173ca:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80173cc:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80173ce:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80173d0:	69fb      	ldr	r3, [r7, #28]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	617b      	str	r3, [r7, #20]
 80173d6:	69bb      	ldr	r3, [r7, #24]
 80173d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80173da:	693b      	ldr	r3, [r7, #16]
 80173dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80173e0:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80173e2:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80173e4:	4618      	mov	r0, r3
 80173e6:	3724      	adds	r7, #36	; 0x24
 80173e8:	46bd      	mov	sp, r7
 80173ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ee:	4770      	bx	lr

080173f0 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b08e      	sub	sp, #56	; 0x38
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
 80173f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80173fa:	2300      	movs	r3, #0
 80173fc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8017402:	2300      	movs	r3, #0
 8017404:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d10a      	bne.n	8017422 <xEventGroupSetBits+0x32>
	__asm volatile
 801740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017410:	f383 8811 	msr	BASEPRI, r3
 8017414:	f3bf 8f6f 	isb	sy
 8017418:	f3bf 8f4f 	dsb	sy
 801741c:	613b      	str	r3, [r7, #16]
}
 801741e:	bf00      	nop
 8017420:	e7fe      	b.n	8017420 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8017422:	683b      	ldr	r3, [r7, #0]
 8017424:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8017428:	2b00      	cmp	r3, #0
 801742a:	d00a      	beq.n	8017442 <xEventGroupSetBits+0x52>
	__asm volatile
 801742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017430:	f383 8811 	msr	BASEPRI, r3
 8017434:	f3bf 8f6f 	isb	sy
 8017438:	f3bf 8f4f 	dsb	sy
 801743c:	60fb      	str	r3, [r7, #12]
}
 801743e:	bf00      	nop
 8017440:	e7fe      	b.n	8017440 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8017442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017444:	3304      	adds	r3, #4
 8017446:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801744a:	3308      	adds	r3, #8
 801744c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801744e:	f001 f887 	bl	8018560 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8017452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017454:	68db      	ldr	r3, [r3, #12]
 8017456:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8017458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801745a:	681a      	ldr	r2, [r3, #0]
 801745c:	683b      	ldr	r3, [r7, #0]
 801745e:	431a      	orrs	r2, r3
 8017460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017462:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8017464:	e03c      	b.n	80174e0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8017466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017468:	685b      	ldr	r3, [r3, #4]
 801746a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801746c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8017472:	2300      	movs	r3, #0
 8017474:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8017476:	69bb      	ldr	r3, [r7, #24]
 8017478:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801747c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801747e:	69bb      	ldr	r3, [r7, #24]
 8017480:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017484:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8017486:	697b      	ldr	r3, [r7, #20]
 8017488:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801748c:	2b00      	cmp	r3, #0
 801748e:	d108      	bne.n	80174a2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8017490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017492:	681a      	ldr	r2, [r3, #0]
 8017494:	69bb      	ldr	r3, [r7, #24]
 8017496:	4013      	ands	r3, r2
 8017498:	2b00      	cmp	r3, #0
 801749a:	d00b      	beq.n	80174b4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 801749c:	2301      	movs	r3, #1
 801749e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80174a0:	e008      	b.n	80174b4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80174a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174a4:	681a      	ldr	r2, [r3, #0]
 80174a6:	69bb      	ldr	r3, [r7, #24]
 80174a8:	4013      	ands	r3, r2
 80174aa:	69ba      	ldr	r2, [r7, #24]
 80174ac:	429a      	cmp	r2, r3
 80174ae:	d101      	bne.n	80174b4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80174b0:	2301      	movs	r3, #1
 80174b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80174b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d010      	beq.n	80174dc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80174ba:	697b      	ldr	r3, [r7, #20]
 80174bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d003      	beq.n	80174cc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80174c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174c6:	69bb      	ldr	r3, [r7, #24]
 80174c8:	4313      	orrs	r3, r2
 80174ca:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80174cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80174d4:	4619      	mov	r1, r3
 80174d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80174d8:	f001 fb1c 	bl	8018b14 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80174dc:	69fb      	ldr	r3, [r7, #28]
 80174de:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80174e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80174e2:	6a3b      	ldr	r3, [r7, #32]
 80174e4:	429a      	cmp	r2, r3
 80174e6:	d1be      	bne.n	8017466 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80174e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ea:	681a      	ldr	r2, [r3, #0]
 80174ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ee:	43db      	mvns	r3, r3
 80174f0:	401a      	ands	r2, r3
 80174f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174f4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80174f6:	f001 f841 	bl	801857c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80174fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174fc:	681b      	ldr	r3, [r3, #0]
}
 80174fe:	4618      	mov	r0, r3
 8017500:	3738      	adds	r7, #56	; 0x38
 8017502:	46bd      	mov	sp, r7
 8017504:	bd80      	pop	{r7, pc}

08017506 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8017506:	b580      	push	{r7, lr}
 8017508:	b082      	sub	sp, #8
 801750a:	af00      	add	r7, sp, #0
 801750c:	6078      	str	r0, [r7, #4]
 801750e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8017510:	6839      	ldr	r1, [r7, #0]
 8017512:	6878      	ldr	r0, [r7, #4]
 8017514:	f7ff ff6c 	bl	80173f0 <xEventGroupSetBits>
}
 8017518:	bf00      	nop
 801751a:	3708      	adds	r7, #8
 801751c:	46bd      	mov	sp, r7
 801751e:	bd80      	pop	{r7, pc}

08017520 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b082      	sub	sp, #8
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
 8017528:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 801752a:	6839      	ldr	r1, [r7, #0]
 801752c:	6878      	ldr	r0, [r7, #4]
 801752e:	f7ff feef 	bl	8017310 <xEventGroupClearBits>
}
 8017532:	bf00      	nop
 8017534:	3708      	adds	r7, #8
 8017536:	46bd      	mov	sp, r7
 8017538:	bd80      	pop	{r7, pc}

0801753a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 801753a:	b480      	push	{r7}
 801753c:	b087      	sub	sp, #28
 801753e:	af00      	add	r7, sp, #0
 8017540:	60f8      	str	r0, [r7, #12]
 8017542:	60b9      	str	r1, [r7, #8]
 8017544:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8017546:	2300      	movs	r3, #0
 8017548:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d107      	bne.n	8017560 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8017550:	68fa      	ldr	r2, [r7, #12]
 8017552:	68bb      	ldr	r3, [r7, #8]
 8017554:	4013      	ands	r3, r2
 8017556:	2b00      	cmp	r3, #0
 8017558:	d00a      	beq.n	8017570 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801755a:	2301      	movs	r3, #1
 801755c:	617b      	str	r3, [r7, #20]
 801755e:	e007      	b.n	8017570 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8017560:	68fa      	ldr	r2, [r7, #12]
 8017562:	68bb      	ldr	r3, [r7, #8]
 8017564:	4013      	ands	r3, r2
 8017566:	68ba      	ldr	r2, [r7, #8]
 8017568:	429a      	cmp	r2, r3
 801756a:	d101      	bne.n	8017570 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801756c:	2301      	movs	r3, #1
 801756e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8017570:	697b      	ldr	r3, [r7, #20]
}
 8017572:	4618      	mov	r0, r3
 8017574:	371c      	adds	r7, #28
 8017576:	46bd      	mov	sp, r7
 8017578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801757c:	4770      	bx	lr
	...

08017580 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8017580:	b580      	push	{r7, lr}
 8017582:	b086      	sub	sp, #24
 8017584:	af00      	add	r7, sp, #0
 8017586:	60f8      	str	r0, [r7, #12]
 8017588:	60b9      	str	r1, [r7, #8]
 801758a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	68ba      	ldr	r2, [r7, #8]
 8017590:	68f9      	ldr	r1, [r7, #12]
 8017592:	4804      	ldr	r0, [pc, #16]	; (80175a4 <xEventGroupSetBitsFromISR+0x24>)
 8017594:	f002 f8c0 	bl	8019718 <xTimerPendFunctionCallFromISR>
 8017598:	6178      	str	r0, [r7, #20]

		return xReturn;
 801759a:	697b      	ldr	r3, [r7, #20]
	}
 801759c:	4618      	mov	r0, r3
 801759e:	3718      	adds	r7, #24
 80175a0:	46bd      	mov	sp, r7
 80175a2:	bd80      	pop	{r7, pc}
 80175a4:	08017507 	.word	0x08017507

080175a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80175a8:	b480      	push	{r7}
 80175aa:	b083      	sub	sp, #12
 80175ac:	af00      	add	r7, sp, #0
 80175ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	f103 0208 	add.w	r2, r3, #8
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80175c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	f103 0208 	add.w	r2, r3, #8
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	f103 0208 	add.w	r2, r3, #8
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	2200      	movs	r2, #0
 80175da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80175dc:	bf00      	nop
 80175de:	370c      	adds	r7, #12
 80175e0:	46bd      	mov	sp, r7
 80175e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e6:	4770      	bx	lr

080175e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80175e8:	b480      	push	{r7}
 80175ea:	b083      	sub	sp, #12
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	2200      	movs	r2, #0
 80175f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80175f6:	bf00      	nop
 80175f8:	370c      	adds	r7, #12
 80175fa:	46bd      	mov	sp, r7
 80175fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017600:	4770      	bx	lr

08017602 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017602:	b480      	push	{r7}
 8017604:	b085      	sub	sp, #20
 8017606:	af00      	add	r7, sp, #0
 8017608:	6078      	str	r0, [r7, #4]
 801760a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	685b      	ldr	r3, [r3, #4]
 8017610:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017612:	683b      	ldr	r3, [r7, #0]
 8017614:	68fa      	ldr	r2, [r7, #12]
 8017616:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	689a      	ldr	r2, [r3, #8]
 801761c:	683b      	ldr	r3, [r7, #0]
 801761e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	689b      	ldr	r3, [r3, #8]
 8017624:	683a      	ldr	r2, [r7, #0]
 8017626:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	683a      	ldr	r2, [r7, #0]
 801762c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801762e:	683b      	ldr	r3, [r7, #0]
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	1c5a      	adds	r2, r3, #1
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	601a      	str	r2, [r3, #0]
}
 801763e:	bf00      	nop
 8017640:	3714      	adds	r7, #20
 8017642:	46bd      	mov	sp, r7
 8017644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017648:	4770      	bx	lr

0801764a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801764a:	b480      	push	{r7}
 801764c:	b085      	sub	sp, #20
 801764e:	af00      	add	r7, sp, #0
 8017650:	6078      	str	r0, [r7, #4]
 8017652:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017654:	683b      	ldr	r3, [r7, #0]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801765a:	68bb      	ldr	r3, [r7, #8]
 801765c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017660:	d103      	bne.n	801766a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	691b      	ldr	r3, [r3, #16]
 8017666:	60fb      	str	r3, [r7, #12]
 8017668:	e00c      	b.n	8017684 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	3308      	adds	r3, #8
 801766e:	60fb      	str	r3, [r7, #12]
 8017670:	e002      	b.n	8017678 <vListInsert+0x2e>
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	685b      	ldr	r3, [r3, #4]
 8017676:	60fb      	str	r3, [r7, #12]
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	685b      	ldr	r3, [r3, #4]
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	68ba      	ldr	r2, [r7, #8]
 8017680:	429a      	cmp	r2, r3
 8017682:	d2f6      	bcs.n	8017672 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	685a      	ldr	r2, [r3, #4]
 8017688:	683b      	ldr	r3, [r7, #0]
 801768a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801768c:	683b      	ldr	r3, [r7, #0]
 801768e:	685b      	ldr	r3, [r3, #4]
 8017690:	683a      	ldr	r2, [r7, #0]
 8017692:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017694:	683b      	ldr	r3, [r7, #0]
 8017696:	68fa      	ldr	r2, [r7, #12]
 8017698:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	683a      	ldr	r2, [r7, #0]
 801769e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80176a0:	683b      	ldr	r3, [r7, #0]
 80176a2:	687a      	ldr	r2, [r7, #4]
 80176a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	1c5a      	adds	r2, r3, #1
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	601a      	str	r2, [r3, #0]
}
 80176b0:	bf00      	nop
 80176b2:	3714      	adds	r7, #20
 80176b4:	46bd      	mov	sp, r7
 80176b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ba:	4770      	bx	lr

080176bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80176bc:	b480      	push	{r7}
 80176be:	b085      	sub	sp, #20
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	691b      	ldr	r3, [r3, #16]
 80176c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	685b      	ldr	r3, [r3, #4]
 80176ce:	687a      	ldr	r2, [r7, #4]
 80176d0:	6892      	ldr	r2, [r2, #8]
 80176d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	689b      	ldr	r3, [r3, #8]
 80176d8:	687a      	ldr	r2, [r7, #4]
 80176da:	6852      	ldr	r2, [r2, #4]
 80176dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	685b      	ldr	r3, [r3, #4]
 80176e2:	687a      	ldr	r2, [r7, #4]
 80176e4:	429a      	cmp	r2, r3
 80176e6:	d103      	bne.n	80176f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	689a      	ldr	r2, [r3, #8]
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	2200      	movs	r2, #0
 80176f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	1e5a      	subs	r2, r3, #1
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	681b      	ldr	r3, [r3, #0]
}
 8017704:	4618      	mov	r0, r3
 8017706:	3714      	adds	r7, #20
 8017708:	46bd      	mov	sp, r7
 801770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801770e:	4770      	bx	lr

08017710 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017710:	b580      	push	{r7, lr}
 8017712:	b084      	sub	sp, #16
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
 8017718:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d10a      	bne.n	801773a <xQueueGenericReset+0x2a>
	__asm volatile
 8017724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017728:	f383 8811 	msr	BASEPRI, r3
 801772c:	f3bf 8f6f 	isb	sy
 8017730:	f3bf 8f4f 	dsb	sy
 8017734:	60bb      	str	r3, [r7, #8]
}
 8017736:	bf00      	nop
 8017738:	e7fe      	b.n	8017738 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801773a:	f002 f93b 	bl	80199b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	681a      	ldr	r2, [r3, #0]
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017746:	68f9      	ldr	r1, [r7, #12]
 8017748:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801774a:	fb01 f303 	mul.w	r3, r1, r3
 801774e:	441a      	add	r2, r3
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	2200      	movs	r2, #0
 8017758:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	681a      	ldr	r2, [r3, #0]
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	681a      	ldr	r2, [r3, #0]
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801776a:	3b01      	subs	r3, #1
 801776c:	68f9      	ldr	r1, [r7, #12]
 801776e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017770:	fb01 f303 	mul.w	r3, r1, r3
 8017774:	441a      	add	r2, r3
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	22ff      	movs	r2, #255	; 0xff
 801777e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	22ff      	movs	r2, #255	; 0xff
 8017786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801778a:	683b      	ldr	r3, [r7, #0]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d114      	bne.n	80177ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	691b      	ldr	r3, [r3, #16]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d01a      	beq.n	80177ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	3310      	adds	r3, #16
 801779c:	4618      	mov	r0, r3
 801779e:	f001 f955 	bl	8018a4c <xTaskRemoveFromEventList>
 80177a2:	4603      	mov	r3, r0
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d012      	beq.n	80177ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80177a8:	4b0c      	ldr	r3, [pc, #48]	; (80177dc <xQueueGenericReset+0xcc>)
 80177aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177ae:	601a      	str	r2, [r3, #0]
 80177b0:	f3bf 8f4f 	dsb	sy
 80177b4:	f3bf 8f6f 	isb	sy
 80177b8:	e009      	b.n	80177ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	3310      	adds	r3, #16
 80177be:	4618      	mov	r0, r3
 80177c0:	f7ff fef2 	bl	80175a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	3324      	adds	r3, #36	; 0x24
 80177c8:	4618      	mov	r0, r3
 80177ca:	f7ff feed 	bl	80175a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80177ce:	f002 f921 	bl	8019a14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80177d2:	2301      	movs	r3, #1
}
 80177d4:	4618      	mov	r0, r3
 80177d6:	3710      	adds	r7, #16
 80177d8:	46bd      	mov	sp, r7
 80177da:	bd80      	pop	{r7, pc}
 80177dc:	e000ed04 	.word	0xe000ed04

080177e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b08e      	sub	sp, #56	; 0x38
 80177e4:	af02      	add	r7, sp, #8
 80177e6:	60f8      	str	r0, [r7, #12]
 80177e8:	60b9      	str	r1, [r7, #8]
 80177ea:	607a      	str	r2, [r7, #4]
 80177ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80177ee:	68fb      	ldr	r3, [r7, #12]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d10a      	bne.n	801780a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80177f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177f8:	f383 8811 	msr	BASEPRI, r3
 80177fc:	f3bf 8f6f 	isb	sy
 8017800:	f3bf 8f4f 	dsb	sy
 8017804:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017806:	bf00      	nop
 8017808:	e7fe      	b.n	8017808 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801780a:	683b      	ldr	r3, [r7, #0]
 801780c:	2b00      	cmp	r3, #0
 801780e:	d10a      	bne.n	8017826 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017814:	f383 8811 	msr	BASEPRI, r3
 8017818:	f3bf 8f6f 	isb	sy
 801781c:	f3bf 8f4f 	dsb	sy
 8017820:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017822:	bf00      	nop
 8017824:	e7fe      	b.n	8017824 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	2b00      	cmp	r3, #0
 801782a:	d002      	beq.n	8017832 <xQueueGenericCreateStatic+0x52>
 801782c:	68bb      	ldr	r3, [r7, #8]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d001      	beq.n	8017836 <xQueueGenericCreateStatic+0x56>
 8017832:	2301      	movs	r3, #1
 8017834:	e000      	b.n	8017838 <xQueueGenericCreateStatic+0x58>
 8017836:	2300      	movs	r3, #0
 8017838:	2b00      	cmp	r3, #0
 801783a:	d10a      	bne.n	8017852 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 801783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017840:	f383 8811 	msr	BASEPRI, r3
 8017844:	f3bf 8f6f 	isb	sy
 8017848:	f3bf 8f4f 	dsb	sy
 801784c:	623b      	str	r3, [r7, #32]
}
 801784e:	bf00      	nop
 8017850:	e7fe      	b.n	8017850 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d102      	bne.n	801785e <xQueueGenericCreateStatic+0x7e>
 8017858:	68bb      	ldr	r3, [r7, #8]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d101      	bne.n	8017862 <xQueueGenericCreateStatic+0x82>
 801785e:	2301      	movs	r3, #1
 8017860:	e000      	b.n	8017864 <xQueueGenericCreateStatic+0x84>
 8017862:	2300      	movs	r3, #0
 8017864:	2b00      	cmp	r3, #0
 8017866:	d10a      	bne.n	801787e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801786c:	f383 8811 	msr	BASEPRI, r3
 8017870:	f3bf 8f6f 	isb	sy
 8017874:	f3bf 8f4f 	dsb	sy
 8017878:	61fb      	str	r3, [r7, #28]
}
 801787a:	bf00      	nop
 801787c:	e7fe      	b.n	801787c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801787e:	2350      	movs	r3, #80	; 0x50
 8017880:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017882:	697b      	ldr	r3, [r7, #20]
 8017884:	2b50      	cmp	r3, #80	; 0x50
 8017886:	d00a      	beq.n	801789e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801788c:	f383 8811 	msr	BASEPRI, r3
 8017890:	f3bf 8f6f 	isb	sy
 8017894:	f3bf 8f4f 	dsb	sy
 8017898:	61bb      	str	r3, [r7, #24]
}
 801789a:	bf00      	nop
 801789c:	e7fe      	b.n	801789c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801789e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80178a0:	683b      	ldr	r3, [r7, #0]
 80178a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80178a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d00d      	beq.n	80178c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80178aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178ac:	2201      	movs	r2, #1
 80178ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80178b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80178b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178b8:	9300      	str	r3, [sp, #0]
 80178ba:	4613      	mov	r3, r2
 80178bc:	687a      	ldr	r2, [r7, #4]
 80178be:	68b9      	ldr	r1, [r7, #8]
 80178c0:	68f8      	ldr	r0, [r7, #12]
 80178c2:	f000 f805 	bl	80178d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80178c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80178c8:	4618      	mov	r0, r3
 80178ca:	3730      	adds	r7, #48	; 0x30
 80178cc:	46bd      	mov	sp, r7
 80178ce:	bd80      	pop	{r7, pc}

080178d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80178d0:	b580      	push	{r7, lr}
 80178d2:	b084      	sub	sp, #16
 80178d4:	af00      	add	r7, sp, #0
 80178d6:	60f8      	str	r0, [r7, #12]
 80178d8:	60b9      	str	r1, [r7, #8]
 80178da:	607a      	str	r2, [r7, #4]
 80178dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80178de:	68bb      	ldr	r3, [r7, #8]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d103      	bne.n	80178ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80178e4:	69bb      	ldr	r3, [r7, #24]
 80178e6:	69ba      	ldr	r2, [r7, #24]
 80178e8:	601a      	str	r2, [r3, #0]
 80178ea:	e002      	b.n	80178f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80178ec:	69bb      	ldr	r3, [r7, #24]
 80178ee:	687a      	ldr	r2, [r7, #4]
 80178f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80178f2:	69bb      	ldr	r3, [r7, #24]
 80178f4:	68fa      	ldr	r2, [r7, #12]
 80178f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80178f8:	69bb      	ldr	r3, [r7, #24]
 80178fa:	68ba      	ldr	r2, [r7, #8]
 80178fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80178fe:	2101      	movs	r1, #1
 8017900:	69b8      	ldr	r0, [r7, #24]
 8017902:	f7ff ff05 	bl	8017710 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017906:	69bb      	ldr	r3, [r7, #24]
 8017908:	78fa      	ldrb	r2, [r7, #3]
 801790a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801790e:	bf00      	nop
 8017910:	3710      	adds	r7, #16
 8017912:	46bd      	mov	sp, r7
 8017914:	bd80      	pop	{r7, pc}
	...

08017918 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b08e      	sub	sp, #56	; 0x38
 801791c:	af00      	add	r7, sp, #0
 801791e:	60f8      	str	r0, [r7, #12]
 8017920:	60b9      	str	r1, [r7, #8]
 8017922:	607a      	str	r2, [r7, #4]
 8017924:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8017926:	2300      	movs	r3, #0
 8017928:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801792e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017930:	2b00      	cmp	r3, #0
 8017932:	d10a      	bne.n	801794a <xQueueGenericSend+0x32>
	__asm volatile
 8017934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017938:	f383 8811 	msr	BASEPRI, r3
 801793c:	f3bf 8f6f 	isb	sy
 8017940:	f3bf 8f4f 	dsb	sy
 8017944:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017946:	bf00      	nop
 8017948:	e7fe      	b.n	8017948 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801794a:	68bb      	ldr	r3, [r7, #8]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d103      	bne.n	8017958 <xQueueGenericSend+0x40>
 8017950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017954:	2b00      	cmp	r3, #0
 8017956:	d101      	bne.n	801795c <xQueueGenericSend+0x44>
 8017958:	2301      	movs	r3, #1
 801795a:	e000      	b.n	801795e <xQueueGenericSend+0x46>
 801795c:	2300      	movs	r3, #0
 801795e:	2b00      	cmp	r3, #0
 8017960:	d10a      	bne.n	8017978 <xQueueGenericSend+0x60>
	__asm volatile
 8017962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017966:	f383 8811 	msr	BASEPRI, r3
 801796a:	f3bf 8f6f 	isb	sy
 801796e:	f3bf 8f4f 	dsb	sy
 8017972:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017974:	bf00      	nop
 8017976:	e7fe      	b.n	8017976 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017978:	683b      	ldr	r3, [r7, #0]
 801797a:	2b02      	cmp	r3, #2
 801797c:	d103      	bne.n	8017986 <xQueueGenericSend+0x6e>
 801797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017982:	2b01      	cmp	r3, #1
 8017984:	d101      	bne.n	801798a <xQueueGenericSend+0x72>
 8017986:	2301      	movs	r3, #1
 8017988:	e000      	b.n	801798c <xQueueGenericSend+0x74>
 801798a:	2300      	movs	r3, #0
 801798c:	2b00      	cmp	r3, #0
 801798e:	d10a      	bne.n	80179a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8017990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017994:	f383 8811 	msr	BASEPRI, r3
 8017998:	f3bf 8f6f 	isb	sy
 801799c:	f3bf 8f4f 	dsb	sy
 80179a0:	623b      	str	r3, [r7, #32]
}
 80179a2:	bf00      	nop
 80179a4:	e7fe      	b.n	80179a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80179a6:	f001 fa71 	bl	8018e8c <xTaskGetSchedulerState>
 80179aa:	4603      	mov	r3, r0
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d102      	bne.n	80179b6 <xQueueGenericSend+0x9e>
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d101      	bne.n	80179ba <xQueueGenericSend+0xa2>
 80179b6:	2301      	movs	r3, #1
 80179b8:	e000      	b.n	80179bc <xQueueGenericSend+0xa4>
 80179ba:	2300      	movs	r3, #0
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d10a      	bne.n	80179d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80179c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179c4:	f383 8811 	msr	BASEPRI, r3
 80179c8:	f3bf 8f6f 	isb	sy
 80179cc:	f3bf 8f4f 	dsb	sy
 80179d0:	61fb      	str	r3, [r7, #28]
}
 80179d2:	bf00      	nop
 80179d4:	e7fe      	b.n	80179d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80179d6:	f001 ffed 	bl	80199b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80179da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80179de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179e2:	429a      	cmp	r2, r3
 80179e4:	d302      	bcc.n	80179ec <xQueueGenericSend+0xd4>
 80179e6:	683b      	ldr	r3, [r7, #0]
 80179e8:	2b02      	cmp	r3, #2
 80179ea:	d129      	bne.n	8017a40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80179ec:	683a      	ldr	r2, [r7, #0]
 80179ee:	68b9      	ldr	r1, [r7, #8]
 80179f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80179f2:	f000 fa0b 	bl	8017e0c <prvCopyDataToQueue>
 80179f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80179f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d010      	beq.n	8017a22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a02:	3324      	adds	r3, #36	; 0x24
 8017a04:	4618      	mov	r0, r3
 8017a06:	f001 f821 	bl	8018a4c <xTaskRemoveFromEventList>
 8017a0a:	4603      	mov	r3, r0
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d013      	beq.n	8017a38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017a10:	4b3f      	ldr	r3, [pc, #252]	; (8017b10 <xQueueGenericSend+0x1f8>)
 8017a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a16:	601a      	str	r2, [r3, #0]
 8017a18:	f3bf 8f4f 	dsb	sy
 8017a1c:	f3bf 8f6f 	isb	sy
 8017a20:	e00a      	b.n	8017a38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8017a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d007      	beq.n	8017a38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8017a28:	4b39      	ldr	r3, [pc, #228]	; (8017b10 <xQueueGenericSend+0x1f8>)
 8017a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a2e:	601a      	str	r2, [r3, #0]
 8017a30:	f3bf 8f4f 	dsb	sy
 8017a34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8017a38:	f001 ffec 	bl	8019a14 <vPortExitCritical>
				return pdPASS;
 8017a3c:	2301      	movs	r3, #1
 8017a3e:	e063      	b.n	8017b08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d103      	bne.n	8017a4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017a46:	f001 ffe5 	bl	8019a14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	e05c      	b.n	8017b08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d106      	bne.n	8017a62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017a54:	f107 0314 	add.w	r3, r7, #20
 8017a58:	4618      	mov	r0, r3
 8017a5a:	f001 f8bd 	bl	8018bd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017a5e:	2301      	movs	r3, #1
 8017a60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017a62:	f001 ffd7 	bl	8019a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017a66:	f000 fd7b 	bl	8018560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017a6a:	f001 ffa3 	bl	80199b4 <vPortEnterCritical>
 8017a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017a74:	b25b      	sxtb	r3, r3
 8017a76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a7a:	d103      	bne.n	8017a84 <xQueueGenericSend+0x16c>
 8017a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a7e:	2200      	movs	r2, #0
 8017a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017a8a:	b25b      	sxtb	r3, r3
 8017a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017a90:	d103      	bne.n	8017a9a <xQueueGenericSend+0x182>
 8017a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a94:	2200      	movs	r2, #0
 8017a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017a9a:	f001 ffbb 	bl	8019a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017a9e:	1d3a      	adds	r2, r7, #4
 8017aa0:	f107 0314 	add.w	r3, r7, #20
 8017aa4:	4611      	mov	r1, r2
 8017aa6:	4618      	mov	r0, r3
 8017aa8:	f001 f8ac 	bl	8018c04 <xTaskCheckForTimeOut>
 8017aac:	4603      	mov	r3, r0
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d124      	bne.n	8017afc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017ab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ab4:	f000 faa2 	bl	8017ffc <prvIsQueueFull>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d018      	beq.n	8017af0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ac0:	3310      	adds	r3, #16
 8017ac2:	687a      	ldr	r2, [r7, #4]
 8017ac4:	4611      	mov	r1, r2
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	f000 ff34 	bl	8018934 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ace:	f000 fa2d 	bl	8017f2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8017ad2:	f000 fd53 	bl	801857c <xTaskResumeAll>
 8017ad6:	4603      	mov	r3, r0
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	f47f af7c 	bne.w	80179d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8017ade:	4b0c      	ldr	r3, [pc, #48]	; (8017b10 <xQueueGenericSend+0x1f8>)
 8017ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017ae4:	601a      	str	r2, [r3, #0]
 8017ae6:	f3bf 8f4f 	dsb	sy
 8017aea:	f3bf 8f6f 	isb	sy
 8017aee:	e772      	b.n	80179d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017af2:	f000 fa1b 	bl	8017f2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017af6:	f000 fd41 	bl	801857c <xTaskResumeAll>
 8017afa:	e76c      	b.n	80179d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017afe:	f000 fa15 	bl	8017f2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017b02:	f000 fd3b 	bl	801857c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8017b06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017b08:	4618      	mov	r0, r3
 8017b0a:	3738      	adds	r7, #56	; 0x38
 8017b0c:	46bd      	mov	sp, r7
 8017b0e:	bd80      	pop	{r7, pc}
 8017b10:	e000ed04 	.word	0xe000ed04

08017b14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b090      	sub	sp, #64	; 0x40
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	60f8      	str	r0, [r7, #12]
 8017b1c:	60b9      	str	r1, [r7, #8]
 8017b1e:	607a      	str	r2, [r7, #4]
 8017b20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8017b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d10a      	bne.n	8017b42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8017b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b30:	f383 8811 	msr	BASEPRI, r3
 8017b34:	f3bf 8f6f 	isb	sy
 8017b38:	f3bf 8f4f 	dsb	sy
 8017b3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017b3e:	bf00      	nop
 8017b40:	e7fe      	b.n	8017b40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017b42:	68bb      	ldr	r3, [r7, #8]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d103      	bne.n	8017b50 <xQueueGenericSendFromISR+0x3c>
 8017b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d101      	bne.n	8017b54 <xQueueGenericSendFromISR+0x40>
 8017b50:	2301      	movs	r3, #1
 8017b52:	e000      	b.n	8017b56 <xQueueGenericSendFromISR+0x42>
 8017b54:	2300      	movs	r3, #0
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d10a      	bne.n	8017b70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8017b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b5e:	f383 8811 	msr	BASEPRI, r3
 8017b62:	f3bf 8f6f 	isb	sy
 8017b66:	f3bf 8f4f 	dsb	sy
 8017b6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017b6c:	bf00      	nop
 8017b6e:	e7fe      	b.n	8017b6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017b70:	683b      	ldr	r3, [r7, #0]
 8017b72:	2b02      	cmp	r3, #2
 8017b74:	d103      	bne.n	8017b7e <xQueueGenericSendFromISR+0x6a>
 8017b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b7a:	2b01      	cmp	r3, #1
 8017b7c:	d101      	bne.n	8017b82 <xQueueGenericSendFromISR+0x6e>
 8017b7e:	2301      	movs	r3, #1
 8017b80:	e000      	b.n	8017b84 <xQueueGenericSendFromISR+0x70>
 8017b82:	2300      	movs	r3, #0
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d10a      	bne.n	8017b9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8017b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b8c:	f383 8811 	msr	BASEPRI, r3
 8017b90:	f3bf 8f6f 	isb	sy
 8017b94:	f3bf 8f4f 	dsb	sy
 8017b98:	623b      	str	r3, [r7, #32]
}
 8017b9a:	bf00      	nop
 8017b9c:	e7fe      	b.n	8017b9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017b9e:	f001 ffeb 	bl	8019b78 <vPortValidateInterruptPriority>
	__asm volatile
 8017ba2:	f3ef 8211 	mrs	r2, BASEPRI
 8017ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017baa:	f383 8811 	msr	BASEPRI, r3
 8017bae:	f3bf 8f6f 	isb	sy
 8017bb2:	f3bf 8f4f 	dsb	sy
 8017bb6:	61fa      	str	r2, [r7, #28]
 8017bb8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8017bba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017bbc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017bc6:	429a      	cmp	r2, r3
 8017bc8:	d302      	bcc.n	8017bd0 <xQueueGenericSendFromISR+0xbc>
 8017bca:	683b      	ldr	r3, [r7, #0]
 8017bcc:	2b02      	cmp	r3, #2
 8017bce:	d12f      	bne.n	8017c30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bde:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017be0:	683a      	ldr	r2, [r7, #0]
 8017be2:	68b9      	ldr	r1, [r7, #8]
 8017be4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017be6:	f000 f911 	bl	8017e0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017bea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017bf2:	d112      	bne.n	8017c1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d016      	beq.n	8017c2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bfe:	3324      	adds	r3, #36	; 0x24
 8017c00:	4618      	mov	r0, r3
 8017c02:	f000 ff23 	bl	8018a4c <xTaskRemoveFromEventList>
 8017c06:	4603      	mov	r3, r0
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d00e      	beq.n	8017c2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d00b      	beq.n	8017c2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	2201      	movs	r2, #1
 8017c16:	601a      	str	r2, [r3, #0]
 8017c18:	e007      	b.n	8017c2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017c1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017c1e:	3301      	adds	r3, #1
 8017c20:	b2db      	uxtb	r3, r3
 8017c22:	b25a      	sxtb	r2, r3
 8017c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017c2a:	2301      	movs	r3, #1
 8017c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8017c2e:	e001      	b.n	8017c34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017c30:	2300      	movs	r3, #0
 8017c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c36:	617b      	str	r3, [r7, #20]
	__asm volatile
 8017c38:	697b      	ldr	r3, [r7, #20]
 8017c3a:	f383 8811 	msr	BASEPRI, r3
}
 8017c3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8017c42:	4618      	mov	r0, r3
 8017c44:	3740      	adds	r7, #64	; 0x40
 8017c46:	46bd      	mov	sp, r7
 8017c48:	bd80      	pop	{r7, pc}
	...

08017c4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b08c      	sub	sp, #48	; 0x30
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	60f8      	str	r0, [r7, #12]
 8017c54:	60b9      	str	r1, [r7, #8]
 8017c56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017c58:	2300      	movs	r3, #0
 8017c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017c5c:	68fb      	ldr	r3, [r7, #12]
 8017c5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d10a      	bne.n	8017c7c <xQueueReceive+0x30>
	__asm volatile
 8017c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c6a:	f383 8811 	msr	BASEPRI, r3
 8017c6e:	f3bf 8f6f 	isb	sy
 8017c72:	f3bf 8f4f 	dsb	sy
 8017c76:	623b      	str	r3, [r7, #32]
}
 8017c78:	bf00      	nop
 8017c7a:	e7fe      	b.n	8017c7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017c7c:	68bb      	ldr	r3, [r7, #8]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d103      	bne.n	8017c8a <xQueueReceive+0x3e>
 8017c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d101      	bne.n	8017c8e <xQueueReceive+0x42>
 8017c8a:	2301      	movs	r3, #1
 8017c8c:	e000      	b.n	8017c90 <xQueueReceive+0x44>
 8017c8e:	2300      	movs	r3, #0
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d10a      	bne.n	8017caa <xQueueReceive+0x5e>
	__asm volatile
 8017c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c98:	f383 8811 	msr	BASEPRI, r3
 8017c9c:	f3bf 8f6f 	isb	sy
 8017ca0:	f3bf 8f4f 	dsb	sy
 8017ca4:	61fb      	str	r3, [r7, #28]
}
 8017ca6:	bf00      	nop
 8017ca8:	e7fe      	b.n	8017ca8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017caa:	f001 f8ef 	bl	8018e8c <xTaskGetSchedulerState>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d102      	bne.n	8017cba <xQueueReceive+0x6e>
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d101      	bne.n	8017cbe <xQueueReceive+0x72>
 8017cba:	2301      	movs	r3, #1
 8017cbc:	e000      	b.n	8017cc0 <xQueueReceive+0x74>
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d10a      	bne.n	8017cda <xQueueReceive+0x8e>
	__asm volatile
 8017cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cc8:	f383 8811 	msr	BASEPRI, r3
 8017ccc:	f3bf 8f6f 	isb	sy
 8017cd0:	f3bf 8f4f 	dsb	sy
 8017cd4:	61bb      	str	r3, [r7, #24]
}
 8017cd6:	bf00      	nop
 8017cd8:	e7fe      	b.n	8017cd8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017cda:	f001 fe6b 	bl	80199b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ce2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d01f      	beq.n	8017d2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017cea:	68b9      	ldr	r1, [r7, #8]
 8017cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017cee:	f000 f8f7 	bl	8017ee0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cf4:	1e5a      	subs	r2, r3, #1
 8017cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cf8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cfc:	691b      	ldr	r3, [r3, #16]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d00f      	beq.n	8017d22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d04:	3310      	adds	r3, #16
 8017d06:	4618      	mov	r0, r3
 8017d08:	f000 fea0 	bl	8018a4c <xTaskRemoveFromEventList>
 8017d0c:	4603      	mov	r3, r0
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d007      	beq.n	8017d22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017d12:	4b3d      	ldr	r3, [pc, #244]	; (8017e08 <xQueueReceive+0x1bc>)
 8017d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d18:	601a      	str	r2, [r3, #0]
 8017d1a:	f3bf 8f4f 	dsb	sy
 8017d1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017d22:	f001 fe77 	bl	8019a14 <vPortExitCritical>
				return pdPASS;
 8017d26:	2301      	movs	r3, #1
 8017d28:	e069      	b.n	8017dfe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d103      	bne.n	8017d38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017d30:	f001 fe70 	bl	8019a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017d34:	2300      	movs	r3, #0
 8017d36:	e062      	b.n	8017dfe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d106      	bne.n	8017d4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017d3e:	f107 0310 	add.w	r3, r7, #16
 8017d42:	4618      	mov	r0, r3
 8017d44:	f000 ff48 	bl	8018bd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017d48:	2301      	movs	r3, #1
 8017d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017d4c:	f001 fe62 	bl	8019a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017d50:	f000 fc06 	bl	8018560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017d54:	f001 fe2e 	bl	80199b4 <vPortEnterCritical>
 8017d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017d5e:	b25b      	sxtb	r3, r3
 8017d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d64:	d103      	bne.n	8017d6e <xQueueReceive+0x122>
 8017d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d68:	2200      	movs	r2, #0
 8017d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017d74:	b25b      	sxtb	r3, r3
 8017d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017d7a:	d103      	bne.n	8017d84 <xQueueReceive+0x138>
 8017d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d7e:	2200      	movs	r2, #0
 8017d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017d84:	f001 fe46 	bl	8019a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017d88:	1d3a      	adds	r2, r7, #4
 8017d8a:	f107 0310 	add.w	r3, r7, #16
 8017d8e:	4611      	mov	r1, r2
 8017d90:	4618      	mov	r0, r3
 8017d92:	f000 ff37 	bl	8018c04 <xTaskCheckForTimeOut>
 8017d96:	4603      	mov	r3, r0
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d123      	bne.n	8017de4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017d9e:	f000 f917 	bl	8017fd0 <prvIsQueueEmpty>
 8017da2:	4603      	mov	r3, r0
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d017      	beq.n	8017dd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017daa:	3324      	adds	r3, #36	; 0x24
 8017dac:	687a      	ldr	r2, [r7, #4]
 8017dae:	4611      	mov	r1, r2
 8017db0:	4618      	mov	r0, r3
 8017db2:	f000 fdbf 	bl	8018934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017db8:	f000 f8b8 	bl	8017f2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017dbc:	f000 fbde 	bl	801857c <xTaskResumeAll>
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d189      	bne.n	8017cda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8017dc6:	4b10      	ldr	r3, [pc, #64]	; (8017e08 <xQueueReceive+0x1bc>)
 8017dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017dcc:	601a      	str	r2, [r3, #0]
 8017dce:	f3bf 8f4f 	dsb	sy
 8017dd2:	f3bf 8f6f 	isb	sy
 8017dd6:	e780      	b.n	8017cda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017dd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017dda:	f000 f8a7 	bl	8017f2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017dde:	f000 fbcd 	bl	801857c <xTaskResumeAll>
 8017de2:	e77a      	b.n	8017cda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017de6:	f000 f8a1 	bl	8017f2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017dea:	f000 fbc7 	bl	801857c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017df0:	f000 f8ee 	bl	8017fd0 <prvIsQueueEmpty>
 8017df4:	4603      	mov	r3, r0
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	f43f af6f 	beq.w	8017cda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017dfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017dfe:	4618      	mov	r0, r3
 8017e00:	3730      	adds	r7, #48	; 0x30
 8017e02:	46bd      	mov	sp, r7
 8017e04:	bd80      	pop	{r7, pc}
 8017e06:	bf00      	nop
 8017e08:	e000ed04 	.word	0xe000ed04

08017e0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b086      	sub	sp, #24
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	60f8      	str	r0, [r7, #12]
 8017e14:	60b9      	str	r1, [r7, #8]
 8017e16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017e18:	2300      	movs	r3, #0
 8017e1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d10d      	bne.n	8017e46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d14d      	bne.n	8017ece <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	689b      	ldr	r3, [r3, #8]
 8017e36:	4618      	mov	r0, r3
 8017e38:	f001 f846 	bl	8018ec8 <xTaskPriorityDisinherit>
 8017e3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	2200      	movs	r2, #0
 8017e42:	609a      	str	r2, [r3, #8]
 8017e44:	e043      	b.n	8017ece <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d119      	bne.n	8017e80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	6858      	ldr	r0, [r3, #4]
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e54:	461a      	mov	r2, r3
 8017e56:	68b9      	ldr	r1, [r7, #8]
 8017e58:	f002 f8e2 	bl	801a020 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017e5c:	68fb      	ldr	r3, [r7, #12]
 8017e5e:	685a      	ldr	r2, [r3, #4]
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e64:	441a      	add	r2, r3
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	685a      	ldr	r2, [r3, #4]
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	689b      	ldr	r3, [r3, #8]
 8017e72:	429a      	cmp	r2, r3
 8017e74:	d32b      	bcc.n	8017ece <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	681a      	ldr	r2, [r3, #0]
 8017e7a:	68fb      	ldr	r3, [r7, #12]
 8017e7c:	605a      	str	r2, [r3, #4]
 8017e7e:	e026      	b.n	8017ece <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	68d8      	ldr	r0, [r3, #12]
 8017e84:	68fb      	ldr	r3, [r7, #12]
 8017e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e88:	461a      	mov	r2, r3
 8017e8a:	68b9      	ldr	r1, [r7, #8]
 8017e8c:	f002 f8c8 	bl	801a020 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	68da      	ldr	r2, [r3, #12]
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e98:	425b      	negs	r3, r3
 8017e9a:	441a      	add	r2, r3
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	68da      	ldr	r2, [r3, #12]
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	429a      	cmp	r2, r3
 8017eaa:	d207      	bcs.n	8017ebc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	689a      	ldr	r2, [r3, #8]
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017eb4:	425b      	negs	r3, r3
 8017eb6:	441a      	add	r2, r3
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	2b02      	cmp	r3, #2
 8017ec0:	d105      	bne.n	8017ece <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017ec2:	693b      	ldr	r3, [r7, #16]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d002      	beq.n	8017ece <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017ec8:	693b      	ldr	r3, [r7, #16]
 8017eca:	3b01      	subs	r3, #1
 8017ecc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017ece:	693b      	ldr	r3, [r7, #16]
 8017ed0:	1c5a      	adds	r2, r3, #1
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017ed6:	697b      	ldr	r3, [r7, #20]
}
 8017ed8:	4618      	mov	r0, r3
 8017eda:	3718      	adds	r7, #24
 8017edc:	46bd      	mov	sp, r7
 8017ede:	bd80      	pop	{r7, pc}

08017ee0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017ee0:	b580      	push	{r7, lr}
 8017ee2:	b082      	sub	sp, #8
 8017ee4:	af00      	add	r7, sp, #0
 8017ee6:	6078      	str	r0, [r7, #4]
 8017ee8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d018      	beq.n	8017f24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	68da      	ldr	r2, [r3, #12]
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017efa:	441a      	add	r2, r3
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	68da      	ldr	r2, [r3, #12]
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	689b      	ldr	r3, [r3, #8]
 8017f08:	429a      	cmp	r2, r3
 8017f0a:	d303      	bcc.n	8017f14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	681a      	ldr	r2, [r3, #0]
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	68d9      	ldr	r1, [r3, #12]
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f1c:	461a      	mov	r2, r3
 8017f1e:	6838      	ldr	r0, [r7, #0]
 8017f20:	f002 f87e 	bl	801a020 <memcpy>
	}
}
 8017f24:	bf00      	nop
 8017f26:	3708      	adds	r7, #8
 8017f28:	46bd      	mov	sp, r7
 8017f2a:	bd80      	pop	{r7, pc}

08017f2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b084      	sub	sp, #16
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017f34:	f001 fd3e 	bl	80199b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017f3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017f40:	e011      	b.n	8017f66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d012      	beq.n	8017f70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	3324      	adds	r3, #36	; 0x24
 8017f4e:	4618      	mov	r0, r3
 8017f50:	f000 fd7c 	bl	8018a4c <xTaskRemoveFromEventList>
 8017f54:	4603      	mov	r3, r0
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d001      	beq.n	8017f5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017f5a:	f000 feb5 	bl	8018cc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017f5e:	7bfb      	ldrb	r3, [r7, #15]
 8017f60:	3b01      	subs	r3, #1
 8017f62:	b2db      	uxtb	r3, r3
 8017f64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	dce9      	bgt.n	8017f42 <prvUnlockQueue+0x16>
 8017f6e:	e000      	b.n	8017f72 <prvUnlockQueue+0x46>
					break;
 8017f70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	22ff      	movs	r2, #255	; 0xff
 8017f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017f7a:	f001 fd4b 	bl	8019a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017f7e:	f001 fd19 	bl	80199b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017f88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017f8a:	e011      	b.n	8017fb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	691b      	ldr	r3, [r3, #16]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d012      	beq.n	8017fba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	3310      	adds	r3, #16
 8017f98:	4618      	mov	r0, r3
 8017f9a:	f000 fd57 	bl	8018a4c <xTaskRemoveFromEventList>
 8017f9e:	4603      	mov	r3, r0
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d001      	beq.n	8017fa8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017fa4:	f000 fe90 	bl	8018cc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017fa8:	7bbb      	ldrb	r3, [r7, #14]
 8017faa:	3b01      	subs	r3, #1
 8017fac:	b2db      	uxtb	r3, r3
 8017fae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017fb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	dce9      	bgt.n	8017f8c <prvUnlockQueue+0x60>
 8017fb8:	e000      	b.n	8017fbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017fba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	22ff      	movs	r2, #255	; 0xff
 8017fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017fc4:	f001 fd26 	bl	8019a14 <vPortExitCritical>
}
 8017fc8:	bf00      	nop
 8017fca:	3710      	adds	r7, #16
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	bd80      	pop	{r7, pc}

08017fd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b084      	sub	sp, #16
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017fd8:	f001 fcec 	bl	80199b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d102      	bne.n	8017fea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017fe4:	2301      	movs	r3, #1
 8017fe6:	60fb      	str	r3, [r7, #12]
 8017fe8:	e001      	b.n	8017fee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017fea:	2300      	movs	r3, #0
 8017fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017fee:	f001 fd11 	bl	8019a14 <vPortExitCritical>

	return xReturn;
 8017ff2:	68fb      	ldr	r3, [r7, #12]
}
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	3710      	adds	r7, #16
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	bd80      	pop	{r7, pc}

08017ffc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	b084      	sub	sp, #16
 8018000:	af00      	add	r7, sp, #0
 8018002:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018004:	f001 fcd6 	bl	80199b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018010:	429a      	cmp	r2, r3
 8018012:	d102      	bne.n	801801a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018014:	2301      	movs	r3, #1
 8018016:	60fb      	str	r3, [r7, #12]
 8018018:	e001      	b.n	801801e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801801a:	2300      	movs	r3, #0
 801801c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801801e:	f001 fcf9 	bl	8019a14 <vPortExitCritical>

	return xReturn;
 8018022:	68fb      	ldr	r3, [r7, #12]
}
 8018024:	4618      	mov	r0, r3
 8018026:	3710      	adds	r7, #16
 8018028:	46bd      	mov	sp, r7
 801802a:	bd80      	pop	{r7, pc}

0801802c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801802c:	b480      	push	{r7}
 801802e:	b085      	sub	sp, #20
 8018030:	af00      	add	r7, sp, #0
 8018032:	6078      	str	r0, [r7, #4]
 8018034:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018036:	2300      	movs	r3, #0
 8018038:	60fb      	str	r3, [r7, #12]
 801803a:	e014      	b.n	8018066 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801803c:	4a0f      	ldr	r2, [pc, #60]	; (801807c <vQueueAddToRegistry+0x50>)
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018044:	2b00      	cmp	r3, #0
 8018046:	d10b      	bne.n	8018060 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018048:	490c      	ldr	r1, [pc, #48]	; (801807c <vQueueAddToRegistry+0x50>)
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	683a      	ldr	r2, [r7, #0]
 801804e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018052:	4a0a      	ldr	r2, [pc, #40]	; (801807c <vQueueAddToRegistry+0x50>)
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	00db      	lsls	r3, r3, #3
 8018058:	4413      	add	r3, r2
 801805a:	687a      	ldr	r2, [r7, #4]
 801805c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801805e:	e006      	b.n	801806e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	3301      	adds	r3, #1
 8018064:	60fb      	str	r3, [r7, #12]
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	2b07      	cmp	r3, #7
 801806a:	d9e7      	bls.n	801803c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801806c:	bf00      	nop
 801806e:	bf00      	nop
 8018070:	3714      	adds	r7, #20
 8018072:	46bd      	mov	sp, r7
 8018074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018078:	4770      	bx	lr
 801807a:	bf00      	nop
 801807c:	240026d8 	.word	0x240026d8

08018080 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018080:	b580      	push	{r7, lr}
 8018082:	b086      	sub	sp, #24
 8018084:	af00      	add	r7, sp, #0
 8018086:	60f8      	str	r0, [r7, #12]
 8018088:	60b9      	str	r1, [r7, #8]
 801808a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018090:	f001 fc90 	bl	80199b4 <vPortEnterCritical>
 8018094:	697b      	ldr	r3, [r7, #20]
 8018096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801809a:	b25b      	sxtb	r3, r3
 801809c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80180a0:	d103      	bne.n	80180aa <vQueueWaitForMessageRestricted+0x2a>
 80180a2:	697b      	ldr	r3, [r7, #20]
 80180a4:	2200      	movs	r2, #0
 80180a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80180aa:	697b      	ldr	r3, [r7, #20]
 80180ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80180b0:	b25b      	sxtb	r3, r3
 80180b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80180b6:	d103      	bne.n	80180c0 <vQueueWaitForMessageRestricted+0x40>
 80180b8:	697b      	ldr	r3, [r7, #20]
 80180ba:	2200      	movs	r2, #0
 80180bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80180c0:	f001 fca8 	bl	8019a14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80180c4:	697b      	ldr	r3, [r7, #20]
 80180c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d106      	bne.n	80180da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80180cc:	697b      	ldr	r3, [r7, #20]
 80180ce:	3324      	adds	r3, #36	; 0x24
 80180d0:	687a      	ldr	r2, [r7, #4]
 80180d2:	68b9      	ldr	r1, [r7, #8]
 80180d4:	4618      	mov	r0, r3
 80180d6:	f000 fc8d 	bl	80189f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80180da:	6978      	ldr	r0, [r7, #20]
 80180dc:	f7ff ff26 	bl	8017f2c <prvUnlockQueue>
	}
 80180e0:	bf00      	nop
 80180e2:	3718      	adds	r7, #24
 80180e4:	46bd      	mov	sp, r7
 80180e6:	bd80      	pop	{r7, pc}

080180e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	b08e      	sub	sp, #56	; 0x38
 80180ec:	af04      	add	r7, sp, #16
 80180ee:	60f8      	str	r0, [r7, #12]
 80180f0:	60b9      	str	r1, [r7, #8]
 80180f2:	607a      	str	r2, [r7, #4]
 80180f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80180f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d10a      	bne.n	8018112 <xTaskCreateStatic+0x2a>
	__asm volatile
 80180fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018100:	f383 8811 	msr	BASEPRI, r3
 8018104:	f3bf 8f6f 	isb	sy
 8018108:	f3bf 8f4f 	dsb	sy
 801810c:	623b      	str	r3, [r7, #32]
}
 801810e:	bf00      	nop
 8018110:	e7fe      	b.n	8018110 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8018112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018114:	2b00      	cmp	r3, #0
 8018116:	d10a      	bne.n	801812e <xTaskCreateStatic+0x46>
	__asm volatile
 8018118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801811c:	f383 8811 	msr	BASEPRI, r3
 8018120:	f3bf 8f6f 	isb	sy
 8018124:	f3bf 8f4f 	dsb	sy
 8018128:	61fb      	str	r3, [r7, #28]
}
 801812a:	bf00      	nop
 801812c:	e7fe      	b.n	801812c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801812e:	235c      	movs	r3, #92	; 0x5c
 8018130:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8018132:	693b      	ldr	r3, [r7, #16]
 8018134:	2b5c      	cmp	r3, #92	; 0x5c
 8018136:	d00a      	beq.n	801814e <xTaskCreateStatic+0x66>
	__asm volatile
 8018138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801813c:	f383 8811 	msr	BASEPRI, r3
 8018140:	f3bf 8f6f 	isb	sy
 8018144:	f3bf 8f4f 	dsb	sy
 8018148:	61bb      	str	r3, [r7, #24]
}
 801814a:	bf00      	nop
 801814c:	e7fe      	b.n	801814c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801814e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8018150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018152:	2b00      	cmp	r3, #0
 8018154:	d01e      	beq.n	8018194 <xTaskCreateStatic+0xac>
 8018156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018158:	2b00      	cmp	r3, #0
 801815a:	d01b      	beq.n	8018194 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801815e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8018160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018164:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8018166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018168:	2202      	movs	r2, #2
 801816a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801816e:	2300      	movs	r3, #0
 8018170:	9303      	str	r3, [sp, #12]
 8018172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018174:	9302      	str	r3, [sp, #8]
 8018176:	f107 0314 	add.w	r3, r7, #20
 801817a:	9301      	str	r3, [sp, #4]
 801817c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801817e:	9300      	str	r3, [sp, #0]
 8018180:	683b      	ldr	r3, [r7, #0]
 8018182:	687a      	ldr	r2, [r7, #4]
 8018184:	68b9      	ldr	r1, [r7, #8]
 8018186:	68f8      	ldr	r0, [r7, #12]
 8018188:	f000 f850 	bl	801822c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801818c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801818e:	f000 f8dd 	bl	801834c <prvAddNewTaskToReadyList>
 8018192:	e001      	b.n	8018198 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8018194:	2300      	movs	r3, #0
 8018196:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8018198:	697b      	ldr	r3, [r7, #20]
	}
 801819a:	4618      	mov	r0, r3
 801819c:	3728      	adds	r7, #40	; 0x28
 801819e:	46bd      	mov	sp, r7
 80181a0:	bd80      	pop	{r7, pc}

080181a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80181a2:	b580      	push	{r7, lr}
 80181a4:	b08c      	sub	sp, #48	; 0x30
 80181a6:	af04      	add	r7, sp, #16
 80181a8:	60f8      	str	r0, [r7, #12]
 80181aa:	60b9      	str	r1, [r7, #8]
 80181ac:	603b      	str	r3, [r7, #0]
 80181ae:	4613      	mov	r3, r2
 80181b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80181b2:	88fb      	ldrh	r3, [r7, #6]
 80181b4:	009b      	lsls	r3, r3, #2
 80181b6:	4618      	mov	r0, r3
 80181b8:	f001 fd1e 	bl	8019bf8 <pvPortMalloc>
 80181bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80181be:	697b      	ldr	r3, [r7, #20]
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d00e      	beq.n	80181e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80181c4:	205c      	movs	r0, #92	; 0x5c
 80181c6:	f001 fd17 	bl	8019bf8 <pvPortMalloc>
 80181ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80181cc:	69fb      	ldr	r3, [r7, #28]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d003      	beq.n	80181da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80181d2:	69fb      	ldr	r3, [r7, #28]
 80181d4:	697a      	ldr	r2, [r7, #20]
 80181d6:	631a      	str	r2, [r3, #48]	; 0x30
 80181d8:	e005      	b.n	80181e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80181da:	6978      	ldr	r0, [r7, #20]
 80181dc:	f001 fdd8 	bl	8019d90 <vPortFree>
 80181e0:	e001      	b.n	80181e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80181e2:	2300      	movs	r3, #0
 80181e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80181e6:	69fb      	ldr	r3, [r7, #28]
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	d017      	beq.n	801821c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80181ec:	69fb      	ldr	r3, [r7, #28]
 80181ee:	2200      	movs	r2, #0
 80181f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80181f4:	88fa      	ldrh	r2, [r7, #6]
 80181f6:	2300      	movs	r3, #0
 80181f8:	9303      	str	r3, [sp, #12]
 80181fa:	69fb      	ldr	r3, [r7, #28]
 80181fc:	9302      	str	r3, [sp, #8]
 80181fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018200:	9301      	str	r3, [sp, #4]
 8018202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018204:	9300      	str	r3, [sp, #0]
 8018206:	683b      	ldr	r3, [r7, #0]
 8018208:	68b9      	ldr	r1, [r7, #8]
 801820a:	68f8      	ldr	r0, [r7, #12]
 801820c:	f000 f80e 	bl	801822c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8018210:	69f8      	ldr	r0, [r7, #28]
 8018212:	f000 f89b 	bl	801834c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018216:	2301      	movs	r3, #1
 8018218:	61bb      	str	r3, [r7, #24]
 801821a:	e002      	b.n	8018222 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801821c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018220:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018222:	69bb      	ldr	r3, [r7, #24]
	}
 8018224:	4618      	mov	r0, r3
 8018226:	3720      	adds	r7, #32
 8018228:	46bd      	mov	sp, r7
 801822a:	bd80      	pop	{r7, pc}

0801822c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801822c:	b580      	push	{r7, lr}
 801822e:	b088      	sub	sp, #32
 8018230:	af00      	add	r7, sp, #0
 8018232:	60f8      	str	r0, [r7, #12]
 8018234:	60b9      	str	r1, [r7, #8]
 8018236:	607a      	str	r2, [r7, #4]
 8018238:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801823c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	009b      	lsls	r3, r3, #2
 8018242:	461a      	mov	r2, r3
 8018244:	21a5      	movs	r1, #165	; 0xa5
 8018246:	f001 fef9 	bl	801a03c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801824c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801824e:	6879      	ldr	r1, [r7, #4]
 8018250:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8018254:	440b      	add	r3, r1
 8018256:	009b      	lsls	r3, r3, #2
 8018258:	4413      	add	r3, r2
 801825a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801825c:	69bb      	ldr	r3, [r7, #24]
 801825e:	f023 0307 	bic.w	r3, r3, #7
 8018262:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018264:	69bb      	ldr	r3, [r7, #24]
 8018266:	f003 0307 	and.w	r3, r3, #7
 801826a:	2b00      	cmp	r3, #0
 801826c:	d00a      	beq.n	8018284 <prvInitialiseNewTask+0x58>
	__asm volatile
 801826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018272:	f383 8811 	msr	BASEPRI, r3
 8018276:	f3bf 8f6f 	isb	sy
 801827a:	f3bf 8f4f 	dsb	sy
 801827e:	617b      	str	r3, [r7, #20]
}
 8018280:	bf00      	nop
 8018282:	e7fe      	b.n	8018282 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8018284:	68bb      	ldr	r3, [r7, #8]
 8018286:	2b00      	cmp	r3, #0
 8018288:	d01f      	beq.n	80182ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801828a:	2300      	movs	r3, #0
 801828c:	61fb      	str	r3, [r7, #28]
 801828e:	e012      	b.n	80182b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8018290:	68ba      	ldr	r2, [r7, #8]
 8018292:	69fb      	ldr	r3, [r7, #28]
 8018294:	4413      	add	r3, r2
 8018296:	7819      	ldrb	r1, [r3, #0]
 8018298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801829a:	69fb      	ldr	r3, [r7, #28]
 801829c:	4413      	add	r3, r2
 801829e:	3334      	adds	r3, #52	; 0x34
 80182a0:	460a      	mov	r2, r1
 80182a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80182a4:	68ba      	ldr	r2, [r7, #8]
 80182a6:	69fb      	ldr	r3, [r7, #28]
 80182a8:	4413      	add	r3, r2
 80182aa:	781b      	ldrb	r3, [r3, #0]
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d006      	beq.n	80182be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80182b0:	69fb      	ldr	r3, [r7, #28]
 80182b2:	3301      	adds	r3, #1
 80182b4:	61fb      	str	r3, [r7, #28]
 80182b6:	69fb      	ldr	r3, [r7, #28]
 80182b8:	2b0f      	cmp	r3, #15
 80182ba:	d9e9      	bls.n	8018290 <prvInitialiseNewTask+0x64>
 80182bc:	e000      	b.n	80182c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80182be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80182c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182c2:	2200      	movs	r2, #0
 80182c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80182c8:	e003      	b.n	80182d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80182ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182cc:	2200      	movs	r2, #0
 80182ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80182d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182d4:	2b37      	cmp	r3, #55	; 0x37
 80182d6:	d901      	bls.n	80182dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80182d8:	2337      	movs	r3, #55	; 0x37
 80182da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80182dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80182e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80182e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80182e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80182e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182ea:	2200      	movs	r2, #0
 80182ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80182ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182f0:	3304      	adds	r3, #4
 80182f2:	4618      	mov	r0, r3
 80182f4:	f7ff f978 	bl	80175e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80182f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182fa:	3318      	adds	r3, #24
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7ff f973 	bl	80175e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018306:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801830a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018310:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018316:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801831a:	2200      	movs	r2, #0
 801831c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018320:	2200      	movs	r2, #0
 8018322:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018326:	683a      	ldr	r2, [r7, #0]
 8018328:	68f9      	ldr	r1, [r7, #12]
 801832a:	69b8      	ldr	r0, [r7, #24]
 801832c:	f001 fa14 	bl	8019758 <pxPortInitialiseStack>
 8018330:	4602      	mov	r2, r0
 8018332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018334:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018338:	2b00      	cmp	r3, #0
 801833a:	d002      	beq.n	8018342 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801833e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018342:	bf00      	nop
 8018344:	3720      	adds	r7, #32
 8018346:	46bd      	mov	sp, r7
 8018348:	bd80      	pop	{r7, pc}
	...

0801834c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801834c:	b580      	push	{r7, lr}
 801834e:	b082      	sub	sp, #8
 8018350:	af00      	add	r7, sp, #0
 8018352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018354:	f001 fb2e 	bl	80199b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018358:	4b2d      	ldr	r3, [pc, #180]	; (8018410 <prvAddNewTaskToReadyList+0xc4>)
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	3301      	adds	r3, #1
 801835e:	4a2c      	ldr	r2, [pc, #176]	; (8018410 <prvAddNewTaskToReadyList+0xc4>)
 8018360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018362:	4b2c      	ldr	r3, [pc, #176]	; (8018414 <prvAddNewTaskToReadyList+0xc8>)
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d109      	bne.n	801837e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801836a:	4a2a      	ldr	r2, [pc, #168]	; (8018414 <prvAddNewTaskToReadyList+0xc8>)
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018370:	4b27      	ldr	r3, [pc, #156]	; (8018410 <prvAddNewTaskToReadyList+0xc4>)
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	2b01      	cmp	r3, #1
 8018376:	d110      	bne.n	801839a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018378:	f000 fcca 	bl	8018d10 <prvInitialiseTaskLists>
 801837c:	e00d      	b.n	801839a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801837e:	4b26      	ldr	r3, [pc, #152]	; (8018418 <prvAddNewTaskToReadyList+0xcc>)
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d109      	bne.n	801839a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8018386:	4b23      	ldr	r3, [pc, #140]	; (8018414 <prvAddNewTaskToReadyList+0xc8>)
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018390:	429a      	cmp	r2, r3
 8018392:	d802      	bhi.n	801839a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018394:	4a1f      	ldr	r2, [pc, #124]	; (8018414 <prvAddNewTaskToReadyList+0xc8>)
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801839a:	4b20      	ldr	r3, [pc, #128]	; (801841c <prvAddNewTaskToReadyList+0xd0>)
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	3301      	adds	r3, #1
 80183a0:	4a1e      	ldr	r2, [pc, #120]	; (801841c <prvAddNewTaskToReadyList+0xd0>)
 80183a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80183a4:	4b1d      	ldr	r3, [pc, #116]	; (801841c <prvAddNewTaskToReadyList+0xd0>)
 80183a6:	681a      	ldr	r2, [r3, #0]
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183b0:	4b1b      	ldr	r3, [pc, #108]	; (8018420 <prvAddNewTaskToReadyList+0xd4>)
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d903      	bls.n	80183c0 <prvAddNewTaskToReadyList+0x74>
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183bc:	4a18      	ldr	r2, [pc, #96]	; (8018420 <prvAddNewTaskToReadyList+0xd4>)
 80183be:	6013      	str	r3, [r2, #0]
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183c4:	4613      	mov	r3, r2
 80183c6:	009b      	lsls	r3, r3, #2
 80183c8:	4413      	add	r3, r2
 80183ca:	009b      	lsls	r3, r3, #2
 80183cc:	4a15      	ldr	r2, [pc, #84]	; (8018424 <prvAddNewTaskToReadyList+0xd8>)
 80183ce:	441a      	add	r2, r3
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	3304      	adds	r3, #4
 80183d4:	4619      	mov	r1, r3
 80183d6:	4610      	mov	r0, r2
 80183d8:	f7ff f913 	bl	8017602 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80183dc:	f001 fb1a 	bl	8019a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80183e0:	4b0d      	ldr	r3, [pc, #52]	; (8018418 <prvAddNewTaskToReadyList+0xcc>)
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d00e      	beq.n	8018406 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80183e8:	4b0a      	ldr	r3, [pc, #40]	; (8018414 <prvAddNewTaskToReadyList+0xc8>)
 80183ea:	681b      	ldr	r3, [r3, #0]
 80183ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183f2:	429a      	cmp	r2, r3
 80183f4:	d207      	bcs.n	8018406 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80183f6:	4b0c      	ldr	r3, [pc, #48]	; (8018428 <prvAddNewTaskToReadyList+0xdc>)
 80183f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80183fc:	601a      	str	r2, [r3, #0]
 80183fe:	f3bf 8f4f 	dsb	sy
 8018402:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018406:	bf00      	nop
 8018408:	3708      	adds	r7, #8
 801840a:	46bd      	mov	sp, r7
 801840c:	bd80      	pop	{r7, pc}
 801840e:	bf00      	nop
 8018410:	24002bec 	.word	0x24002bec
 8018414:	24002718 	.word	0x24002718
 8018418:	24002bf8 	.word	0x24002bf8
 801841c:	24002c08 	.word	0x24002c08
 8018420:	24002bf4 	.word	0x24002bf4
 8018424:	2400271c 	.word	0x2400271c
 8018428:	e000ed04 	.word	0xe000ed04

0801842c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801842c:	b580      	push	{r7, lr}
 801842e:	b084      	sub	sp, #16
 8018430:	af00      	add	r7, sp, #0
 8018432:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018434:	2300      	movs	r3, #0
 8018436:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d017      	beq.n	801846e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801843e:	4b13      	ldr	r3, [pc, #76]	; (801848c <vTaskDelay+0x60>)
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d00a      	beq.n	801845c <vTaskDelay+0x30>
	__asm volatile
 8018446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801844a:	f383 8811 	msr	BASEPRI, r3
 801844e:	f3bf 8f6f 	isb	sy
 8018452:	f3bf 8f4f 	dsb	sy
 8018456:	60bb      	str	r3, [r7, #8]
}
 8018458:	bf00      	nop
 801845a:	e7fe      	b.n	801845a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801845c:	f000 f880 	bl	8018560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018460:	2100      	movs	r1, #0
 8018462:	6878      	ldr	r0, [r7, #4]
 8018464:	f000 fdb6 	bl	8018fd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8018468:	f000 f888 	bl	801857c <xTaskResumeAll>
 801846c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	2b00      	cmp	r3, #0
 8018472:	d107      	bne.n	8018484 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8018474:	4b06      	ldr	r3, [pc, #24]	; (8018490 <vTaskDelay+0x64>)
 8018476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801847a:	601a      	str	r2, [r3, #0]
 801847c:	f3bf 8f4f 	dsb	sy
 8018480:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018484:	bf00      	nop
 8018486:	3710      	adds	r7, #16
 8018488:	46bd      	mov	sp, r7
 801848a:	bd80      	pop	{r7, pc}
 801848c:	24002c14 	.word	0x24002c14
 8018490:	e000ed04 	.word	0xe000ed04

08018494 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b08a      	sub	sp, #40	; 0x28
 8018498:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801849a:	2300      	movs	r3, #0
 801849c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801849e:	2300      	movs	r3, #0
 80184a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80184a2:	463a      	mov	r2, r7
 80184a4:	1d39      	adds	r1, r7, #4
 80184a6:	f107 0308 	add.w	r3, r7, #8
 80184aa:	4618      	mov	r0, r3
 80184ac:	f7fe fddc 	bl	8017068 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80184b0:	6839      	ldr	r1, [r7, #0]
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	68ba      	ldr	r2, [r7, #8]
 80184b6:	9202      	str	r2, [sp, #8]
 80184b8:	9301      	str	r3, [sp, #4]
 80184ba:	2300      	movs	r3, #0
 80184bc:	9300      	str	r3, [sp, #0]
 80184be:	2300      	movs	r3, #0
 80184c0:	460a      	mov	r2, r1
 80184c2:	4921      	ldr	r1, [pc, #132]	; (8018548 <vTaskStartScheduler+0xb4>)
 80184c4:	4821      	ldr	r0, [pc, #132]	; (801854c <vTaskStartScheduler+0xb8>)
 80184c6:	f7ff fe0f 	bl	80180e8 <xTaskCreateStatic>
 80184ca:	4603      	mov	r3, r0
 80184cc:	4a20      	ldr	r2, [pc, #128]	; (8018550 <vTaskStartScheduler+0xbc>)
 80184ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80184d0:	4b1f      	ldr	r3, [pc, #124]	; (8018550 <vTaskStartScheduler+0xbc>)
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d002      	beq.n	80184de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80184d8:	2301      	movs	r3, #1
 80184da:	617b      	str	r3, [r7, #20]
 80184dc:	e001      	b.n	80184e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80184de:	2300      	movs	r3, #0
 80184e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80184e2:	697b      	ldr	r3, [r7, #20]
 80184e4:	2b01      	cmp	r3, #1
 80184e6:	d102      	bne.n	80184ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80184e8:	f000 fdc8 	bl	801907c <xTimerCreateTimerTask>
 80184ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80184ee:	697b      	ldr	r3, [r7, #20]
 80184f0:	2b01      	cmp	r3, #1
 80184f2:	d116      	bne.n	8018522 <vTaskStartScheduler+0x8e>
	__asm volatile
 80184f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184f8:	f383 8811 	msr	BASEPRI, r3
 80184fc:	f3bf 8f6f 	isb	sy
 8018500:	f3bf 8f4f 	dsb	sy
 8018504:	613b      	str	r3, [r7, #16]
}
 8018506:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018508:	4b12      	ldr	r3, [pc, #72]	; (8018554 <vTaskStartScheduler+0xc0>)
 801850a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801850e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018510:	4b11      	ldr	r3, [pc, #68]	; (8018558 <vTaskStartScheduler+0xc4>)
 8018512:	2201      	movs	r2, #1
 8018514:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018516:	4b11      	ldr	r3, [pc, #68]	; (801855c <vTaskStartScheduler+0xc8>)
 8018518:	2200      	movs	r2, #0
 801851a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801851c:	f001 f9a8 	bl	8019870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018520:	e00e      	b.n	8018540 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018522:	697b      	ldr	r3, [r7, #20]
 8018524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018528:	d10a      	bne.n	8018540 <vTaskStartScheduler+0xac>
	__asm volatile
 801852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801852e:	f383 8811 	msr	BASEPRI, r3
 8018532:	f3bf 8f6f 	isb	sy
 8018536:	f3bf 8f4f 	dsb	sy
 801853a:	60fb      	str	r3, [r7, #12]
}
 801853c:	bf00      	nop
 801853e:	e7fe      	b.n	801853e <vTaskStartScheduler+0xaa>
}
 8018540:	bf00      	nop
 8018542:	3718      	adds	r7, #24
 8018544:	46bd      	mov	sp, r7
 8018546:	bd80      	pop	{r7, pc}
 8018548:	0801acb0 	.word	0x0801acb0
 801854c:	08018ce1 	.word	0x08018ce1
 8018550:	24002c10 	.word	0x24002c10
 8018554:	24002c0c 	.word	0x24002c0c
 8018558:	24002bf8 	.word	0x24002bf8
 801855c:	24002bf0 	.word	0x24002bf0

08018560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018560:	b480      	push	{r7}
 8018562:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018564:	4b04      	ldr	r3, [pc, #16]	; (8018578 <vTaskSuspendAll+0x18>)
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	3301      	adds	r3, #1
 801856a:	4a03      	ldr	r2, [pc, #12]	; (8018578 <vTaskSuspendAll+0x18>)
 801856c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801856e:	bf00      	nop
 8018570:	46bd      	mov	sp, r7
 8018572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018576:	4770      	bx	lr
 8018578:	24002c14 	.word	0x24002c14

0801857c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801857c:	b580      	push	{r7, lr}
 801857e:	b084      	sub	sp, #16
 8018580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018582:	2300      	movs	r3, #0
 8018584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018586:	2300      	movs	r3, #0
 8018588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801858a:	4b42      	ldr	r3, [pc, #264]	; (8018694 <xTaskResumeAll+0x118>)
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d10a      	bne.n	80185a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8018592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018596:	f383 8811 	msr	BASEPRI, r3
 801859a:	f3bf 8f6f 	isb	sy
 801859e:	f3bf 8f4f 	dsb	sy
 80185a2:	603b      	str	r3, [r7, #0]
}
 80185a4:	bf00      	nop
 80185a6:	e7fe      	b.n	80185a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80185a8:	f001 fa04 	bl	80199b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80185ac:	4b39      	ldr	r3, [pc, #228]	; (8018694 <xTaskResumeAll+0x118>)
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	3b01      	subs	r3, #1
 80185b2:	4a38      	ldr	r2, [pc, #224]	; (8018694 <xTaskResumeAll+0x118>)
 80185b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80185b6:	4b37      	ldr	r3, [pc, #220]	; (8018694 <xTaskResumeAll+0x118>)
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d162      	bne.n	8018684 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80185be:	4b36      	ldr	r3, [pc, #216]	; (8018698 <xTaskResumeAll+0x11c>)
 80185c0:	681b      	ldr	r3, [r3, #0]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d05e      	beq.n	8018684 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80185c6:	e02f      	b.n	8018628 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80185c8:	4b34      	ldr	r3, [pc, #208]	; (801869c <xTaskResumeAll+0x120>)
 80185ca:	68db      	ldr	r3, [r3, #12]
 80185cc:	68db      	ldr	r3, [r3, #12]
 80185ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	3318      	adds	r3, #24
 80185d4:	4618      	mov	r0, r3
 80185d6:	f7ff f871 	bl	80176bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	3304      	adds	r3, #4
 80185de:	4618      	mov	r0, r3
 80185e0:	f7ff f86c 	bl	80176bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185e8:	4b2d      	ldr	r3, [pc, #180]	; (80186a0 <xTaskResumeAll+0x124>)
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	429a      	cmp	r2, r3
 80185ee:	d903      	bls.n	80185f8 <xTaskResumeAll+0x7c>
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185f4:	4a2a      	ldr	r2, [pc, #168]	; (80186a0 <xTaskResumeAll+0x124>)
 80185f6:	6013      	str	r3, [r2, #0]
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185fc:	4613      	mov	r3, r2
 80185fe:	009b      	lsls	r3, r3, #2
 8018600:	4413      	add	r3, r2
 8018602:	009b      	lsls	r3, r3, #2
 8018604:	4a27      	ldr	r2, [pc, #156]	; (80186a4 <xTaskResumeAll+0x128>)
 8018606:	441a      	add	r2, r3
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	3304      	adds	r3, #4
 801860c:	4619      	mov	r1, r3
 801860e:	4610      	mov	r0, r2
 8018610:	f7fe fff7 	bl	8017602 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018618:	4b23      	ldr	r3, [pc, #140]	; (80186a8 <xTaskResumeAll+0x12c>)
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801861e:	429a      	cmp	r2, r3
 8018620:	d302      	bcc.n	8018628 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018622:	4b22      	ldr	r3, [pc, #136]	; (80186ac <xTaskResumeAll+0x130>)
 8018624:	2201      	movs	r2, #1
 8018626:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018628:	4b1c      	ldr	r3, [pc, #112]	; (801869c <xTaskResumeAll+0x120>)
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d1cb      	bne.n	80185c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d001      	beq.n	801863a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018636:	f000 fc09 	bl	8018e4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801863a:	4b1d      	ldr	r3, [pc, #116]	; (80186b0 <xTaskResumeAll+0x134>)
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d010      	beq.n	8018668 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018646:	f000 f847 	bl	80186d8 <xTaskIncrementTick>
 801864a:	4603      	mov	r3, r0
 801864c:	2b00      	cmp	r3, #0
 801864e:	d002      	beq.n	8018656 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018650:	4b16      	ldr	r3, [pc, #88]	; (80186ac <xTaskResumeAll+0x130>)
 8018652:	2201      	movs	r2, #1
 8018654:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	3b01      	subs	r3, #1
 801865a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d1f1      	bne.n	8018646 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018662:	4b13      	ldr	r3, [pc, #76]	; (80186b0 <xTaskResumeAll+0x134>)
 8018664:	2200      	movs	r2, #0
 8018666:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018668:	4b10      	ldr	r3, [pc, #64]	; (80186ac <xTaskResumeAll+0x130>)
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	2b00      	cmp	r3, #0
 801866e:	d009      	beq.n	8018684 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018670:	2301      	movs	r3, #1
 8018672:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018674:	4b0f      	ldr	r3, [pc, #60]	; (80186b4 <xTaskResumeAll+0x138>)
 8018676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801867a:	601a      	str	r2, [r3, #0]
 801867c:	f3bf 8f4f 	dsb	sy
 8018680:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018684:	f001 f9c6 	bl	8019a14 <vPortExitCritical>

	return xAlreadyYielded;
 8018688:	68bb      	ldr	r3, [r7, #8]
}
 801868a:	4618      	mov	r0, r3
 801868c:	3710      	adds	r7, #16
 801868e:	46bd      	mov	sp, r7
 8018690:	bd80      	pop	{r7, pc}
 8018692:	bf00      	nop
 8018694:	24002c14 	.word	0x24002c14
 8018698:	24002bec 	.word	0x24002bec
 801869c:	24002bac 	.word	0x24002bac
 80186a0:	24002bf4 	.word	0x24002bf4
 80186a4:	2400271c 	.word	0x2400271c
 80186a8:	24002718 	.word	0x24002718
 80186ac:	24002c00 	.word	0x24002c00
 80186b0:	24002bfc 	.word	0x24002bfc
 80186b4:	e000ed04 	.word	0xe000ed04

080186b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80186b8:	b480      	push	{r7}
 80186ba:	b083      	sub	sp, #12
 80186bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80186be:	4b05      	ldr	r3, [pc, #20]	; (80186d4 <xTaskGetTickCount+0x1c>)
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80186c4:	687b      	ldr	r3, [r7, #4]
}
 80186c6:	4618      	mov	r0, r3
 80186c8:	370c      	adds	r7, #12
 80186ca:	46bd      	mov	sp, r7
 80186cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d0:	4770      	bx	lr
 80186d2:	bf00      	nop
 80186d4:	24002bf0 	.word	0x24002bf0

080186d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b086      	sub	sp, #24
 80186dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80186de:	2300      	movs	r3, #0
 80186e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80186e2:	4b53      	ldr	r3, [pc, #332]	; (8018830 <xTaskIncrementTick+0x158>)
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	f040 8095 	bne.w	8018816 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80186ec:	4b51      	ldr	r3, [pc, #324]	; (8018834 <xTaskIncrementTick+0x15c>)
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	3301      	adds	r3, #1
 80186f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80186f4:	4a4f      	ldr	r2, [pc, #316]	; (8018834 <xTaskIncrementTick+0x15c>)
 80186f6:	693b      	ldr	r3, [r7, #16]
 80186f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80186fa:	693b      	ldr	r3, [r7, #16]
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d120      	bne.n	8018742 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8018700:	4b4d      	ldr	r3, [pc, #308]	; (8018838 <xTaskIncrementTick+0x160>)
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	681b      	ldr	r3, [r3, #0]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d00a      	beq.n	8018720 <xTaskIncrementTick+0x48>
	__asm volatile
 801870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801870e:	f383 8811 	msr	BASEPRI, r3
 8018712:	f3bf 8f6f 	isb	sy
 8018716:	f3bf 8f4f 	dsb	sy
 801871a:	603b      	str	r3, [r7, #0]
}
 801871c:	bf00      	nop
 801871e:	e7fe      	b.n	801871e <xTaskIncrementTick+0x46>
 8018720:	4b45      	ldr	r3, [pc, #276]	; (8018838 <xTaskIncrementTick+0x160>)
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	60fb      	str	r3, [r7, #12]
 8018726:	4b45      	ldr	r3, [pc, #276]	; (801883c <xTaskIncrementTick+0x164>)
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	4a43      	ldr	r2, [pc, #268]	; (8018838 <xTaskIncrementTick+0x160>)
 801872c:	6013      	str	r3, [r2, #0]
 801872e:	4a43      	ldr	r2, [pc, #268]	; (801883c <xTaskIncrementTick+0x164>)
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	6013      	str	r3, [r2, #0]
 8018734:	4b42      	ldr	r3, [pc, #264]	; (8018840 <xTaskIncrementTick+0x168>)
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	3301      	adds	r3, #1
 801873a:	4a41      	ldr	r2, [pc, #260]	; (8018840 <xTaskIncrementTick+0x168>)
 801873c:	6013      	str	r3, [r2, #0]
 801873e:	f000 fb85 	bl	8018e4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018742:	4b40      	ldr	r3, [pc, #256]	; (8018844 <xTaskIncrementTick+0x16c>)
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	693a      	ldr	r2, [r7, #16]
 8018748:	429a      	cmp	r2, r3
 801874a:	d349      	bcc.n	80187e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801874c:	4b3a      	ldr	r3, [pc, #232]	; (8018838 <xTaskIncrementTick+0x160>)
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d104      	bne.n	8018760 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018756:	4b3b      	ldr	r3, [pc, #236]	; (8018844 <xTaskIncrementTick+0x16c>)
 8018758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801875c:	601a      	str	r2, [r3, #0]
					break;
 801875e:	e03f      	b.n	80187e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018760:	4b35      	ldr	r3, [pc, #212]	; (8018838 <xTaskIncrementTick+0x160>)
 8018762:	681b      	ldr	r3, [r3, #0]
 8018764:	68db      	ldr	r3, [r3, #12]
 8018766:	68db      	ldr	r3, [r3, #12]
 8018768:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801876a:	68bb      	ldr	r3, [r7, #8]
 801876c:	685b      	ldr	r3, [r3, #4]
 801876e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018770:	693a      	ldr	r2, [r7, #16]
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	429a      	cmp	r2, r3
 8018776:	d203      	bcs.n	8018780 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018778:	4a32      	ldr	r2, [pc, #200]	; (8018844 <xTaskIncrementTick+0x16c>)
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801877e:	e02f      	b.n	80187e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018780:	68bb      	ldr	r3, [r7, #8]
 8018782:	3304      	adds	r3, #4
 8018784:	4618      	mov	r0, r3
 8018786:	f7fe ff99 	bl	80176bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801878a:	68bb      	ldr	r3, [r7, #8]
 801878c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801878e:	2b00      	cmp	r3, #0
 8018790:	d004      	beq.n	801879c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018792:	68bb      	ldr	r3, [r7, #8]
 8018794:	3318      	adds	r3, #24
 8018796:	4618      	mov	r0, r3
 8018798:	f7fe ff90 	bl	80176bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801879c:	68bb      	ldr	r3, [r7, #8]
 801879e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187a0:	4b29      	ldr	r3, [pc, #164]	; (8018848 <xTaskIncrementTick+0x170>)
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	429a      	cmp	r2, r3
 80187a6:	d903      	bls.n	80187b0 <xTaskIncrementTick+0xd8>
 80187a8:	68bb      	ldr	r3, [r7, #8]
 80187aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187ac:	4a26      	ldr	r2, [pc, #152]	; (8018848 <xTaskIncrementTick+0x170>)
 80187ae:	6013      	str	r3, [r2, #0]
 80187b0:	68bb      	ldr	r3, [r7, #8]
 80187b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187b4:	4613      	mov	r3, r2
 80187b6:	009b      	lsls	r3, r3, #2
 80187b8:	4413      	add	r3, r2
 80187ba:	009b      	lsls	r3, r3, #2
 80187bc:	4a23      	ldr	r2, [pc, #140]	; (801884c <xTaskIncrementTick+0x174>)
 80187be:	441a      	add	r2, r3
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	3304      	adds	r3, #4
 80187c4:	4619      	mov	r1, r3
 80187c6:	4610      	mov	r0, r2
 80187c8:	f7fe ff1b 	bl	8017602 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80187cc:	68bb      	ldr	r3, [r7, #8]
 80187ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187d0:	4b1f      	ldr	r3, [pc, #124]	; (8018850 <xTaskIncrementTick+0x178>)
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187d6:	429a      	cmp	r2, r3
 80187d8:	d3b8      	bcc.n	801874c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80187da:	2301      	movs	r3, #1
 80187dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80187de:	e7b5      	b.n	801874c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80187e0:	4b1b      	ldr	r3, [pc, #108]	; (8018850 <xTaskIncrementTick+0x178>)
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187e6:	4919      	ldr	r1, [pc, #100]	; (801884c <xTaskIncrementTick+0x174>)
 80187e8:	4613      	mov	r3, r2
 80187ea:	009b      	lsls	r3, r3, #2
 80187ec:	4413      	add	r3, r2
 80187ee:	009b      	lsls	r3, r3, #2
 80187f0:	440b      	add	r3, r1
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	2b01      	cmp	r3, #1
 80187f6:	d901      	bls.n	80187fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80187f8:	2301      	movs	r3, #1
 80187fa:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80187fc:	4b15      	ldr	r3, [pc, #84]	; (8018854 <xTaskIncrementTick+0x17c>)
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d101      	bne.n	8018808 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8018804:	f7e9 fe00 	bl	8002408 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018808:	4b13      	ldr	r3, [pc, #76]	; (8018858 <xTaskIncrementTick+0x180>)
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d009      	beq.n	8018824 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8018810:	2301      	movs	r3, #1
 8018812:	617b      	str	r3, [r7, #20]
 8018814:	e006      	b.n	8018824 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018816:	4b0f      	ldr	r3, [pc, #60]	; (8018854 <xTaskIncrementTick+0x17c>)
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	3301      	adds	r3, #1
 801881c:	4a0d      	ldr	r2, [pc, #52]	; (8018854 <xTaskIncrementTick+0x17c>)
 801881e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8018820:	f7e9 fdf2 	bl	8002408 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8018824:	697b      	ldr	r3, [r7, #20]
}
 8018826:	4618      	mov	r0, r3
 8018828:	3718      	adds	r7, #24
 801882a:	46bd      	mov	sp, r7
 801882c:	bd80      	pop	{r7, pc}
 801882e:	bf00      	nop
 8018830:	24002c14 	.word	0x24002c14
 8018834:	24002bf0 	.word	0x24002bf0
 8018838:	24002ba4 	.word	0x24002ba4
 801883c:	24002ba8 	.word	0x24002ba8
 8018840:	24002c04 	.word	0x24002c04
 8018844:	24002c0c 	.word	0x24002c0c
 8018848:	24002bf4 	.word	0x24002bf4
 801884c:	2400271c 	.word	0x2400271c
 8018850:	24002718 	.word	0x24002718
 8018854:	24002bfc 	.word	0x24002bfc
 8018858:	24002c00 	.word	0x24002c00

0801885c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b084      	sub	sp, #16
 8018860:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018862:	4b2f      	ldr	r3, [pc, #188]	; (8018920 <vTaskSwitchContext+0xc4>)
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	2b00      	cmp	r3, #0
 8018868:	d003      	beq.n	8018872 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801886a:	4b2e      	ldr	r3, [pc, #184]	; (8018924 <vTaskSwitchContext+0xc8>)
 801886c:	2201      	movs	r2, #1
 801886e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018870:	e052      	b.n	8018918 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8018872:	4b2c      	ldr	r3, [pc, #176]	; (8018924 <vTaskSwitchContext+0xc8>)
 8018874:	2200      	movs	r2, #0
 8018876:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8018878:	4b2b      	ldr	r3, [pc, #172]	; (8018928 <vTaskSwitchContext+0xcc>)
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	681a      	ldr	r2, [r3, #0]
 801887e:	4b2a      	ldr	r3, [pc, #168]	; (8018928 <vTaskSwitchContext+0xcc>)
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018884:	429a      	cmp	r2, r3
 8018886:	d808      	bhi.n	801889a <vTaskSwitchContext+0x3e>
 8018888:	4b27      	ldr	r3, [pc, #156]	; (8018928 <vTaskSwitchContext+0xcc>)
 801888a:	681a      	ldr	r2, [r3, #0]
 801888c:	4b26      	ldr	r3, [pc, #152]	; (8018928 <vTaskSwitchContext+0xcc>)
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	3334      	adds	r3, #52	; 0x34
 8018892:	4619      	mov	r1, r3
 8018894:	4610      	mov	r0, r2
 8018896:	f7e9 fdc5 	bl	8002424 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801889a:	4b24      	ldr	r3, [pc, #144]	; (801892c <vTaskSwitchContext+0xd0>)
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	60fb      	str	r3, [r7, #12]
 80188a0:	e010      	b.n	80188c4 <vTaskSwitchContext+0x68>
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d10a      	bne.n	80188be <vTaskSwitchContext+0x62>
	__asm volatile
 80188a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188ac:	f383 8811 	msr	BASEPRI, r3
 80188b0:	f3bf 8f6f 	isb	sy
 80188b4:	f3bf 8f4f 	dsb	sy
 80188b8:	607b      	str	r3, [r7, #4]
}
 80188ba:	bf00      	nop
 80188bc:	e7fe      	b.n	80188bc <vTaskSwitchContext+0x60>
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	3b01      	subs	r3, #1
 80188c2:	60fb      	str	r3, [r7, #12]
 80188c4:	491a      	ldr	r1, [pc, #104]	; (8018930 <vTaskSwitchContext+0xd4>)
 80188c6:	68fa      	ldr	r2, [r7, #12]
 80188c8:	4613      	mov	r3, r2
 80188ca:	009b      	lsls	r3, r3, #2
 80188cc:	4413      	add	r3, r2
 80188ce:	009b      	lsls	r3, r3, #2
 80188d0:	440b      	add	r3, r1
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d0e4      	beq.n	80188a2 <vTaskSwitchContext+0x46>
 80188d8:	68fa      	ldr	r2, [r7, #12]
 80188da:	4613      	mov	r3, r2
 80188dc:	009b      	lsls	r3, r3, #2
 80188de:	4413      	add	r3, r2
 80188e0:	009b      	lsls	r3, r3, #2
 80188e2:	4a13      	ldr	r2, [pc, #76]	; (8018930 <vTaskSwitchContext+0xd4>)
 80188e4:	4413      	add	r3, r2
 80188e6:	60bb      	str	r3, [r7, #8]
 80188e8:	68bb      	ldr	r3, [r7, #8]
 80188ea:	685b      	ldr	r3, [r3, #4]
 80188ec:	685a      	ldr	r2, [r3, #4]
 80188ee:	68bb      	ldr	r3, [r7, #8]
 80188f0:	605a      	str	r2, [r3, #4]
 80188f2:	68bb      	ldr	r3, [r7, #8]
 80188f4:	685a      	ldr	r2, [r3, #4]
 80188f6:	68bb      	ldr	r3, [r7, #8]
 80188f8:	3308      	adds	r3, #8
 80188fa:	429a      	cmp	r2, r3
 80188fc:	d104      	bne.n	8018908 <vTaskSwitchContext+0xac>
 80188fe:	68bb      	ldr	r3, [r7, #8]
 8018900:	685b      	ldr	r3, [r3, #4]
 8018902:	685a      	ldr	r2, [r3, #4]
 8018904:	68bb      	ldr	r3, [r7, #8]
 8018906:	605a      	str	r2, [r3, #4]
 8018908:	68bb      	ldr	r3, [r7, #8]
 801890a:	685b      	ldr	r3, [r3, #4]
 801890c:	68db      	ldr	r3, [r3, #12]
 801890e:	4a06      	ldr	r2, [pc, #24]	; (8018928 <vTaskSwitchContext+0xcc>)
 8018910:	6013      	str	r3, [r2, #0]
 8018912:	4a06      	ldr	r2, [pc, #24]	; (801892c <vTaskSwitchContext+0xd0>)
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	6013      	str	r3, [r2, #0]
}
 8018918:	bf00      	nop
 801891a:	3710      	adds	r7, #16
 801891c:	46bd      	mov	sp, r7
 801891e:	bd80      	pop	{r7, pc}
 8018920:	24002c14 	.word	0x24002c14
 8018924:	24002c00 	.word	0x24002c00
 8018928:	24002718 	.word	0x24002718
 801892c:	24002bf4 	.word	0x24002bf4
 8018930:	2400271c 	.word	0x2400271c

08018934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b084      	sub	sp, #16
 8018938:	af00      	add	r7, sp, #0
 801893a:	6078      	str	r0, [r7, #4]
 801893c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d10a      	bne.n	801895a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8018944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018948:	f383 8811 	msr	BASEPRI, r3
 801894c:	f3bf 8f6f 	isb	sy
 8018950:	f3bf 8f4f 	dsb	sy
 8018954:	60fb      	str	r3, [r7, #12]
}
 8018956:	bf00      	nop
 8018958:	e7fe      	b.n	8018958 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801895a:	4b07      	ldr	r3, [pc, #28]	; (8018978 <vTaskPlaceOnEventList+0x44>)
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	3318      	adds	r3, #24
 8018960:	4619      	mov	r1, r3
 8018962:	6878      	ldr	r0, [r7, #4]
 8018964:	f7fe fe71 	bl	801764a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018968:	2101      	movs	r1, #1
 801896a:	6838      	ldr	r0, [r7, #0]
 801896c:	f000 fb32 	bl	8018fd4 <prvAddCurrentTaskToDelayedList>
}
 8018970:	bf00      	nop
 8018972:	3710      	adds	r7, #16
 8018974:	46bd      	mov	sp, r7
 8018976:	bd80      	pop	{r7, pc}
 8018978:	24002718 	.word	0x24002718

0801897c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b086      	sub	sp, #24
 8018980:	af00      	add	r7, sp, #0
 8018982:	60f8      	str	r0, [r7, #12]
 8018984:	60b9      	str	r1, [r7, #8]
 8018986:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	2b00      	cmp	r3, #0
 801898c:	d10a      	bne.n	80189a4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018992:	f383 8811 	msr	BASEPRI, r3
 8018996:	f3bf 8f6f 	isb	sy
 801899a:	f3bf 8f4f 	dsb	sy
 801899e:	617b      	str	r3, [r7, #20]
}
 80189a0:	bf00      	nop
 80189a2:	e7fe      	b.n	80189a2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80189a4:	4b11      	ldr	r3, [pc, #68]	; (80189ec <vTaskPlaceOnUnorderedEventList+0x70>)
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d10a      	bne.n	80189c2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80189ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189b0:	f383 8811 	msr	BASEPRI, r3
 80189b4:	f3bf 8f6f 	isb	sy
 80189b8:	f3bf 8f4f 	dsb	sy
 80189bc:	613b      	str	r3, [r7, #16]
}
 80189be:	bf00      	nop
 80189c0:	e7fe      	b.n	80189c0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80189c2:	4b0b      	ldr	r3, [pc, #44]	; (80189f0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	68ba      	ldr	r2, [r7, #8]
 80189c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80189cc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80189ce:	4b08      	ldr	r3, [pc, #32]	; (80189f0 <vTaskPlaceOnUnorderedEventList+0x74>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	3318      	adds	r3, #24
 80189d4:	4619      	mov	r1, r3
 80189d6:	68f8      	ldr	r0, [r7, #12]
 80189d8:	f7fe fe13 	bl	8017602 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80189dc:	2101      	movs	r1, #1
 80189de:	6878      	ldr	r0, [r7, #4]
 80189e0:	f000 faf8 	bl	8018fd4 <prvAddCurrentTaskToDelayedList>
}
 80189e4:	bf00      	nop
 80189e6:	3718      	adds	r7, #24
 80189e8:	46bd      	mov	sp, r7
 80189ea:	bd80      	pop	{r7, pc}
 80189ec:	24002c14 	.word	0x24002c14
 80189f0:	24002718 	.word	0x24002718

080189f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80189f4:	b580      	push	{r7, lr}
 80189f6:	b086      	sub	sp, #24
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	60f8      	str	r0, [r7, #12]
 80189fc:	60b9      	str	r1, [r7, #8]
 80189fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d10a      	bne.n	8018a1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8018a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a0a:	f383 8811 	msr	BASEPRI, r3
 8018a0e:	f3bf 8f6f 	isb	sy
 8018a12:	f3bf 8f4f 	dsb	sy
 8018a16:	617b      	str	r3, [r7, #20]
}
 8018a18:	bf00      	nop
 8018a1a:	e7fe      	b.n	8018a1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018a1c:	4b0a      	ldr	r3, [pc, #40]	; (8018a48 <vTaskPlaceOnEventListRestricted+0x54>)
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	3318      	adds	r3, #24
 8018a22:	4619      	mov	r1, r3
 8018a24:	68f8      	ldr	r0, [r7, #12]
 8018a26:	f7fe fdec 	bl	8017602 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d002      	beq.n	8018a36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8018a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018a34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8018a36:	6879      	ldr	r1, [r7, #4]
 8018a38:	68b8      	ldr	r0, [r7, #8]
 8018a3a:	f000 facb 	bl	8018fd4 <prvAddCurrentTaskToDelayedList>
	}
 8018a3e:	bf00      	nop
 8018a40:	3718      	adds	r7, #24
 8018a42:	46bd      	mov	sp, r7
 8018a44:	bd80      	pop	{r7, pc}
 8018a46:	bf00      	nop
 8018a48:	24002718 	.word	0x24002718

08018a4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	b086      	sub	sp, #24
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	68db      	ldr	r3, [r3, #12]
 8018a58:	68db      	ldr	r3, [r3, #12]
 8018a5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018a5c:	693b      	ldr	r3, [r7, #16]
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d10a      	bne.n	8018a78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8018a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a66:	f383 8811 	msr	BASEPRI, r3
 8018a6a:	f3bf 8f6f 	isb	sy
 8018a6e:	f3bf 8f4f 	dsb	sy
 8018a72:	60fb      	str	r3, [r7, #12]
}
 8018a74:	bf00      	nop
 8018a76:	e7fe      	b.n	8018a76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8018a78:	693b      	ldr	r3, [r7, #16]
 8018a7a:	3318      	adds	r3, #24
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	f7fe fe1d 	bl	80176bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018a82:	4b1e      	ldr	r3, [pc, #120]	; (8018afc <xTaskRemoveFromEventList+0xb0>)
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d11d      	bne.n	8018ac6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018a8a:	693b      	ldr	r3, [r7, #16]
 8018a8c:	3304      	adds	r3, #4
 8018a8e:	4618      	mov	r0, r3
 8018a90:	f7fe fe14 	bl	80176bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018a94:	693b      	ldr	r3, [r7, #16]
 8018a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a98:	4b19      	ldr	r3, [pc, #100]	; (8018b00 <xTaskRemoveFromEventList+0xb4>)
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	429a      	cmp	r2, r3
 8018a9e:	d903      	bls.n	8018aa8 <xTaskRemoveFromEventList+0x5c>
 8018aa0:	693b      	ldr	r3, [r7, #16]
 8018aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018aa4:	4a16      	ldr	r2, [pc, #88]	; (8018b00 <xTaskRemoveFromEventList+0xb4>)
 8018aa6:	6013      	str	r3, [r2, #0]
 8018aa8:	693b      	ldr	r3, [r7, #16]
 8018aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018aac:	4613      	mov	r3, r2
 8018aae:	009b      	lsls	r3, r3, #2
 8018ab0:	4413      	add	r3, r2
 8018ab2:	009b      	lsls	r3, r3, #2
 8018ab4:	4a13      	ldr	r2, [pc, #76]	; (8018b04 <xTaskRemoveFromEventList+0xb8>)
 8018ab6:	441a      	add	r2, r3
 8018ab8:	693b      	ldr	r3, [r7, #16]
 8018aba:	3304      	adds	r3, #4
 8018abc:	4619      	mov	r1, r3
 8018abe:	4610      	mov	r0, r2
 8018ac0:	f7fe fd9f 	bl	8017602 <vListInsertEnd>
 8018ac4:	e005      	b.n	8018ad2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018ac6:	693b      	ldr	r3, [r7, #16]
 8018ac8:	3318      	adds	r3, #24
 8018aca:	4619      	mov	r1, r3
 8018acc:	480e      	ldr	r0, [pc, #56]	; (8018b08 <xTaskRemoveFromEventList+0xbc>)
 8018ace:	f7fe fd98 	bl	8017602 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018ad2:	693b      	ldr	r3, [r7, #16]
 8018ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018ad6:	4b0d      	ldr	r3, [pc, #52]	; (8018b0c <xTaskRemoveFromEventList+0xc0>)
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018adc:	429a      	cmp	r2, r3
 8018ade:	d905      	bls.n	8018aec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018ae0:	2301      	movs	r3, #1
 8018ae2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018ae4:	4b0a      	ldr	r3, [pc, #40]	; (8018b10 <xTaskRemoveFromEventList+0xc4>)
 8018ae6:	2201      	movs	r2, #1
 8018ae8:	601a      	str	r2, [r3, #0]
 8018aea:	e001      	b.n	8018af0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8018aec:	2300      	movs	r3, #0
 8018aee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018af0:	697b      	ldr	r3, [r7, #20]
}
 8018af2:	4618      	mov	r0, r3
 8018af4:	3718      	adds	r7, #24
 8018af6:	46bd      	mov	sp, r7
 8018af8:	bd80      	pop	{r7, pc}
 8018afa:	bf00      	nop
 8018afc:	24002c14 	.word	0x24002c14
 8018b00:	24002bf4 	.word	0x24002bf4
 8018b04:	2400271c 	.word	0x2400271c
 8018b08:	24002bac 	.word	0x24002bac
 8018b0c:	24002718 	.word	0x24002718
 8018b10:	24002c00 	.word	0x24002c00

08018b14 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b086      	sub	sp, #24
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
 8018b1c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8018b1e:	4b29      	ldr	r3, [pc, #164]	; (8018bc4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d10a      	bne.n	8018b3c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8018b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b2a:	f383 8811 	msr	BASEPRI, r3
 8018b2e:	f3bf 8f6f 	isb	sy
 8018b32:	f3bf 8f4f 	dsb	sy
 8018b36:	613b      	str	r3, [r7, #16]
}
 8018b38:	bf00      	nop
 8018b3a:	e7fe      	b.n	8018b3a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8018b3c:	683b      	ldr	r3, [r7, #0]
 8018b3e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	68db      	ldr	r3, [r3, #12]
 8018b4a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8018b4c:	697b      	ldr	r3, [r7, #20]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d10a      	bne.n	8018b68 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8018b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b56:	f383 8811 	msr	BASEPRI, r3
 8018b5a:	f3bf 8f6f 	isb	sy
 8018b5e:	f3bf 8f4f 	dsb	sy
 8018b62:	60fb      	str	r3, [r7, #12]
}
 8018b64:	bf00      	nop
 8018b66:	e7fe      	b.n	8018b66 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8018b68:	6878      	ldr	r0, [r7, #4]
 8018b6a:	f7fe fda7 	bl	80176bc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018b6e:	697b      	ldr	r3, [r7, #20]
 8018b70:	3304      	adds	r3, #4
 8018b72:	4618      	mov	r0, r3
 8018b74:	f7fe fda2 	bl	80176bc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8018b78:	697b      	ldr	r3, [r7, #20]
 8018b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b7c:	4b12      	ldr	r3, [pc, #72]	; (8018bc8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	429a      	cmp	r2, r3
 8018b82:	d903      	bls.n	8018b8c <vTaskRemoveFromUnorderedEventList+0x78>
 8018b84:	697b      	ldr	r3, [r7, #20]
 8018b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b88:	4a0f      	ldr	r2, [pc, #60]	; (8018bc8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8018b8a:	6013      	str	r3, [r2, #0]
 8018b8c:	697b      	ldr	r3, [r7, #20]
 8018b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b90:	4613      	mov	r3, r2
 8018b92:	009b      	lsls	r3, r3, #2
 8018b94:	4413      	add	r3, r2
 8018b96:	009b      	lsls	r3, r3, #2
 8018b98:	4a0c      	ldr	r2, [pc, #48]	; (8018bcc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8018b9a:	441a      	add	r2, r3
 8018b9c:	697b      	ldr	r3, [r7, #20]
 8018b9e:	3304      	adds	r3, #4
 8018ba0:	4619      	mov	r1, r3
 8018ba2:	4610      	mov	r0, r2
 8018ba4:	f7fe fd2d 	bl	8017602 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018ba8:	697b      	ldr	r3, [r7, #20]
 8018baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bac:	4b08      	ldr	r3, [pc, #32]	; (8018bd0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bb2:	429a      	cmp	r2, r3
 8018bb4:	d902      	bls.n	8018bbc <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8018bb6:	4b07      	ldr	r3, [pc, #28]	; (8018bd4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8018bb8:	2201      	movs	r2, #1
 8018bba:	601a      	str	r2, [r3, #0]
	}
}
 8018bbc:	bf00      	nop
 8018bbe:	3718      	adds	r7, #24
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	bd80      	pop	{r7, pc}
 8018bc4:	24002c14 	.word	0x24002c14
 8018bc8:	24002bf4 	.word	0x24002bf4
 8018bcc:	2400271c 	.word	0x2400271c
 8018bd0:	24002718 	.word	0x24002718
 8018bd4:	24002c00 	.word	0x24002c00

08018bd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018bd8:	b480      	push	{r7}
 8018bda:	b083      	sub	sp, #12
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8018be0:	4b06      	ldr	r3, [pc, #24]	; (8018bfc <vTaskInternalSetTimeOutState+0x24>)
 8018be2:	681a      	ldr	r2, [r3, #0]
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8018be8:	4b05      	ldr	r3, [pc, #20]	; (8018c00 <vTaskInternalSetTimeOutState+0x28>)
 8018bea:	681a      	ldr	r2, [r3, #0]
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	605a      	str	r2, [r3, #4]
}
 8018bf0:	bf00      	nop
 8018bf2:	370c      	adds	r7, #12
 8018bf4:	46bd      	mov	sp, r7
 8018bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bfa:	4770      	bx	lr
 8018bfc:	24002c04 	.word	0x24002c04
 8018c00:	24002bf0 	.word	0x24002bf0

08018c04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018c04:	b580      	push	{r7, lr}
 8018c06:	b088      	sub	sp, #32
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]
 8018c0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d10a      	bne.n	8018c2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8018c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c18:	f383 8811 	msr	BASEPRI, r3
 8018c1c:	f3bf 8f6f 	isb	sy
 8018c20:	f3bf 8f4f 	dsb	sy
 8018c24:	613b      	str	r3, [r7, #16]
}
 8018c26:	bf00      	nop
 8018c28:	e7fe      	b.n	8018c28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8018c2a:	683b      	ldr	r3, [r7, #0]
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d10a      	bne.n	8018c46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8018c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c34:	f383 8811 	msr	BASEPRI, r3
 8018c38:	f3bf 8f6f 	isb	sy
 8018c3c:	f3bf 8f4f 	dsb	sy
 8018c40:	60fb      	str	r3, [r7, #12]
}
 8018c42:	bf00      	nop
 8018c44:	e7fe      	b.n	8018c44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8018c46:	f000 feb5 	bl	80199b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018c4a:	4b1d      	ldr	r3, [pc, #116]	; (8018cc0 <xTaskCheckForTimeOut+0xbc>)
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	685b      	ldr	r3, [r3, #4]
 8018c54:	69ba      	ldr	r2, [r7, #24]
 8018c56:	1ad3      	subs	r3, r2, r3
 8018c58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018c5a:	683b      	ldr	r3, [r7, #0]
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018c62:	d102      	bne.n	8018c6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018c64:	2300      	movs	r3, #0
 8018c66:	61fb      	str	r3, [r7, #28]
 8018c68:	e023      	b.n	8018cb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	681a      	ldr	r2, [r3, #0]
 8018c6e:	4b15      	ldr	r3, [pc, #84]	; (8018cc4 <xTaskCheckForTimeOut+0xc0>)
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	429a      	cmp	r2, r3
 8018c74:	d007      	beq.n	8018c86 <xTaskCheckForTimeOut+0x82>
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	685b      	ldr	r3, [r3, #4]
 8018c7a:	69ba      	ldr	r2, [r7, #24]
 8018c7c:	429a      	cmp	r2, r3
 8018c7e:	d302      	bcc.n	8018c86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018c80:	2301      	movs	r3, #1
 8018c82:	61fb      	str	r3, [r7, #28]
 8018c84:	e015      	b.n	8018cb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018c86:	683b      	ldr	r3, [r7, #0]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	697a      	ldr	r2, [r7, #20]
 8018c8c:	429a      	cmp	r2, r3
 8018c8e:	d20b      	bcs.n	8018ca8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018c90:	683b      	ldr	r3, [r7, #0]
 8018c92:	681a      	ldr	r2, [r3, #0]
 8018c94:	697b      	ldr	r3, [r7, #20]
 8018c96:	1ad2      	subs	r2, r2, r3
 8018c98:	683b      	ldr	r3, [r7, #0]
 8018c9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018c9c:	6878      	ldr	r0, [r7, #4]
 8018c9e:	f7ff ff9b 	bl	8018bd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018ca2:	2300      	movs	r3, #0
 8018ca4:	61fb      	str	r3, [r7, #28]
 8018ca6:	e004      	b.n	8018cb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8018ca8:	683b      	ldr	r3, [r7, #0]
 8018caa:	2200      	movs	r2, #0
 8018cac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018cae:	2301      	movs	r3, #1
 8018cb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018cb2:	f000 feaf 	bl	8019a14 <vPortExitCritical>

	return xReturn;
 8018cb6:	69fb      	ldr	r3, [r7, #28]
}
 8018cb8:	4618      	mov	r0, r3
 8018cba:	3720      	adds	r7, #32
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	bd80      	pop	{r7, pc}
 8018cc0:	24002bf0 	.word	0x24002bf0
 8018cc4:	24002c04 	.word	0x24002c04

08018cc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018cc8:	b480      	push	{r7}
 8018cca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8018ccc:	4b03      	ldr	r3, [pc, #12]	; (8018cdc <vTaskMissedYield+0x14>)
 8018cce:	2201      	movs	r2, #1
 8018cd0:	601a      	str	r2, [r3, #0]
}
 8018cd2:	bf00      	nop
 8018cd4:	46bd      	mov	sp, r7
 8018cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cda:	4770      	bx	lr
 8018cdc:	24002c00 	.word	0x24002c00

08018ce0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b082      	sub	sp, #8
 8018ce4:	af00      	add	r7, sp, #0
 8018ce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018ce8:	f000 f852 	bl	8018d90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018cec:	4b06      	ldr	r3, [pc, #24]	; (8018d08 <prvIdleTask+0x28>)
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	2b01      	cmp	r3, #1
 8018cf2:	d9f9      	bls.n	8018ce8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8018cf4:	4b05      	ldr	r3, [pc, #20]	; (8018d0c <prvIdleTask+0x2c>)
 8018cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018cfa:	601a      	str	r2, [r3, #0]
 8018cfc:	f3bf 8f4f 	dsb	sy
 8018d00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018d04:	e7f0      	b.n	8018ce8 <prvIdleTask+0x8>
 8018d06:	bf00      	nop
 8018d08:	2400271c 	.word	0x2400271c
 8018d0c:	e000ed04 	.word	0xe000ed04

08018d10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018d10:	b580      	push	{r7, lr}
 8018d12:	b082      	sub	sp, #8
 8018d14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018d16:	2300      	movs	r3, #0
 8018d18:	607b      	str	r3, [r7, #4]
 8018d1a:	e00c      	b.n	8018d36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018d1c:	687a      	ldr	r2, [r7, #4]
 8018d1e:	4613      	mov	r3, r2
 8018d20:	009b      	lsls	r3, r3, #2
 8018d22:	4413      	add	r3, r2
 8018d24:	009b      	lsls	r3, r3, #2
 8018d26:	4a12      	ldr	r2, [pc, #72]	; (8018d70 <prvInitialiseTaskLists+0x60>)
 8018d28:	4413      	add	r3, r2
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	f7fe fc3c 	bl	80175a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	3301      	adds	r3, #1
 8018d34:	607b      	str	r3, [r7, #4]
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	2b37      	cmp	r3, #55	; 0x37
 8018d3a:	d9ef      	bls.n	8018d1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018d3c:	480d      	ldr	r0, [pc, #52]	; (8018d74 <prvInitialiseTaskLists+0x64>)
 8018d3e:	f7fe fc33 	bl	80175a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018d42:	480d      	ldr	r0, [pc, #52]	; (8018d78 <prvInitialiseTaskLists+0x68>)
 8018d44:	f7fe fc30 	bl	80175a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018d48:	480c      	ldr	r0, [pc, #48]	; (8018d7c <prvInitialiseTaskLists+0x6c>)
 8018d4a:	f7fe fc2d 	bl	80175a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018d4e:	480c      	ldr	r0, [pc, #48]	; (8018d80 <prvInitialiseTaskLists+0x70>)
 8018d50:	f7fe fc2a 	bl	80175a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018d54:	480b      	ldr	r0, [pc, #44]	; (8018d84 <prvInitialiseTaskLists+0x74>)
 8018d56:	f7fe fc27 	bl	80175a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018d5a:	4b0b      	ldr	r3, [pc, #44]	; (8018d88 <prvInitialiseTaskLists+0x78>)
 8018d5c:	4a05      	ldr	r2, [pc, #20]	; (8018d74 <prvInitialiseTaskLists+0x64>)
 8018d5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018d60:	4b0a      	ldr	r3, [pc, #40]	; (8018d8c <prvInitialiseTaskLists+0x7c>)
 8018d62:	4a05      	ldr	r2, [pc, #20]	; (8018d78 <prvInitialiseTaskLists+0x68>)
 8018d64:	601a      	str	r2, [r3, #0]
}
 8018d66:	bf00      	nop
 8018d68:	3708      	adds	r7, #8
 8018d6a:	46bd      	mov	sp, r7
 8018d6c:	bd80      	pop	{r7, pc}
 8018d6e:	bf00      	nop
 8018d70:	2400271c 	.word	0x2400271c
 8018d74:	24002b7c 	.word	0x24002b7c
 8018d78:	24002b90 	.word	0x24002b90
 8018d7c:	24002bac 	.word	0x24002bac
 8018d80:	24002bc0 	.word	0x24002bc0
 8018d84:	24002bd8 	.word	0x24002bd8
 8018d88:	24002ba4 	.word	0x24002ba4
 8018d8c:	24002ba8 	.word	0x24002ba8

08018d90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018d90:	b580      	push	{r7, lr}
 8018d92:	b082      	sub	sp, #8
 8018d94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018d96:	e019      	b.n	8018dcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018d98:	f000 fe0c 	bl	80199b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018d9c:	4b10      	ldr	r3, [pc, #64]	; (8018de0 <prvCheckTasksWaitingTermination+0x50>)
 8018d9e:	68db      	ldr	r3, [r3, #12]
 8018da0:	68db      	ldr	r3, [r3, #12]
 8018da2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	3304      	adds	r3, #4
 8018da8:	4618      	mov	r0, r3
 8018daa:	f7fe fc87 	bl	80176bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018dae:	4b0d      	ldr	r3, [pc, #52]	; (8018de4 <prvCheckTasksWaitingTermination+0x54>)
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	3b01      	subs	r3, #1
 8018db4:	4a0b      	ldr	r2, [pc, #44]	; (8018de4 <prvCheckTasksWaitingTermination+0x54>)
 8018db6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018db8:	4b0b      	ldr	r3, [pc, #44]	; (8018de8 <prvCheckTasksWaitingTermination+0x58>)
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	3b01      	subs	r3, #1
 8018dbe:	4a0a      	ldr	r2, [pc, #40]	; (8018de8 <prvCheckTasksWaitingTermination+0x58>)
 8018dc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018dc2:	f000 fe27 	bl	8019a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018dc6:	6878      	ldr	r0, [r7, #4]
 8018dc8:	f000 f810 	bl	8018dec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018dcc:	4b06      	ldr	r3, [pc, #24]	; (8018de8 <prvCheckTasksWaitingTermination+0x58>)
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d1e1      	bne.n	8018d98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018dd4:	bf00      	nop
 8018dd6:	bf00      	nop
 8018dd8:	3708      	adds	r7, #8
 8018dda:	46bd      	mov	sp, r7
 8018ddc:	bd80      	pop	{r7, pc}
 8018dde:	bf00      	nop
 8018de0:	24002bc0 	.word	0x24002bc0
 8018de4:	24002bec 	.word	0x24002bec
 8018de8:	24002bd4 	.word	0x24002bd4

08018dec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018dec:	b580      	push	{r7, lr}
 8018dee:	b084      	sub	sp, #16
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d108      	bne.n	8018e10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e02:	4618      	mov	r0, r3
 8018e04:	f000 ffc4 	bl	8019d90 <vPortFree>
				vPortFree( pxTCB );
 8018e08:	6878      	ldr	r0, [r7, #4]
 8018e0a:	f000 ffc1 	bl	8019d90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018e0e:	e018      	b.n	8018e42 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018e16:	2b01      	cmp	r3, #1
 8018e18:	d103      	bne.n	8018e22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018e1a:	6878      	ldr	r0, [r7, #4]
 8018e1c:	f000 ffb8 	bl	8019d90 <vPortFree>
	}
 8018e20:	e00f      	b.n	8018e42 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018e28:	2b02      	cmp	r3, #2
 8018e2a:	d00a      	beq.n	8018e42 <prvDeleteTCB+0x56>
	__asm volatile
 8018e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e30:	f383 8811 	msr	BASEPRI, r3
 8018e34:	f3bf 8f6f 	isb	sy
 8018e38:	f3bf 8f4f 	dsb	sy
 8018e3c:	60fb      	str	r3, [r7, #12]
}
 8018e3e:	bf00      	nop
 8018e40:	e7fe      	b.n	8018e40 <prvDeleteTCB+0x54>
	}
 8018e42:	bf00      	nop
 8018e44:	3710      	adds	r7, #16
 8018e46:	46bd      	mov	sp, r7
 8018e48:	bd80      	pop	{r7, pc}
	...

08018e4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018e4c:	b480      	push	{r7}
 8018e4e:	b083      	sub	sp, #12
 8018e50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018e52:	4b0c      	ldr	r3, [pc, #48]	; (8018e84 <prvResetNextTaskUnblockTime+0x38>)
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d104      	bne.n	8018e66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018e5c:	4b0a      	ldr	r3, [pc, #40]	; (8018e88 <prvResetNextTaskUnblockTime+0x3c>)
 8018e5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018e64:	e008      	b.n	8018e78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018e66:	4b07      	ldr	r3, [pc, #28]	; (8018e84 <prvResetNextTaskUnblockTime+0x38>)
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	68db      	ldr	r3, [r3, #12]
 8018e6c:	68db      	ldr	r3, [r3, #12]
 8018e6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	685b      	ldr	r3, [r3, #4]
 8018e74:	4a04      	ldr	r2, [pc, #16]	; (8018e88 <prvResetNextTaskUnblockTime+0x3c>)
 8018e76:	6013      	str	r3, [r2, #0]
}
 8018e78:	bf00      	nop
 8018e7a:	370c      	adds	r7, #12
 8018e7c:	46bd      	mov	sp, r7
 8018e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e82:	4770      	bx	lr
 8018e84:	24002ba4 	.word	0x24002ba4
 8018e88:	24002c0c 	.word	0x24002c0c

08018e8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018e8c:	b480      	push	{r7}
 8018e8e:	b083      	sub	sp, #12
 8018e90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018e92:	4b0b      	ldr	r3, [pc, #44]	; (8018ec0 <xTaskGetSchedulerState+0x34>)
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d102      	bne.n	8018ea0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018e9a:	2301      	movs	r3, #1
 8018e9c:	607b      	str	r3, [r7, #4]
 8018e9e:	e008      	b.n	8018eb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018ea0:	4b08      	ldr	r3, [pc, #32]	; (8018ec4 <xTaskGetSchedulerState+0x38>)
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d102      	bne.n	8018eae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018ea8:	2302      	movs	r3, #2
 8018eaa:	607b      	str	r3, [r7, #4]
 8018eac:	e001      	b.n	8018eb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018eae:	2300      	movs	r3, #0
 8018eb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018eb2:	687b      	ldr	r3, [r7, #4]
	}
 8018eb4:	4618      	mov	r0, r3
 8018eb6:	370c      	adds	r7, #12
 8018eb8:	46bd      	mov	sp, r7
 8018eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ebe:	4770      	bx	lr
 8018ec0:	24002bf8 	.word	0x24002bf8
 8018ec4:	24002c14 	.word	0x24002c14

08018ec8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b086      	sub	sp, #24
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	d056      	beq.n	8018f8c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018ede:	4b2e      	ldr	r3, [pc, #184]	; (8018f98 <xTaskPriorityDisinherit+0xd0>)
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	693a      	ldr	r2, [r7, #16]
 8018ee4:	429a      	cmp	r2, r3
 8018ee6:	d00a      	beq.n	8018efe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8018ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018eec:	f383 8811 	msr	BASEPRI, r3
 8018ef0:	f3bf 8f6f 	isb	sy
 8018ef4:	f3bf 8f4f 	dsb	sy
 8018ef8:	60fb      	str	r3, [r7, #12]
}
 8018efa:	bf00      	nop
 8018efc:	e7fe      	b.n	8018efc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018efe:	693b      	ldr	r3, [r7, #16]
 8018f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d10a      	bne.n	8018f1c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8018f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f0a:	f383 8811 	msr	BASEPRI, r3
 8018f0e:	f3bf 8f6f 	isb	sy
 8018f12:	f3bf 8f4f 	dsb	sy
 8018f16:	60bb      	str	r3, [r7, #8]
}
 8018f18:	bf00      	nop
 8018f1a:	e7fe      	b.n	8018f1a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018f1c:	693b      	ldr	r3, [r7, #16]
 8018f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f20:	1e5a      	subs	r2, r3, #1
 8018f22:	693b      	ldr	r3, [r7, #16]
 8018f24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018f26:	693b      	ldr	r3, [r7, #16]
 8018f28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f2a:	693b      	ldr	r3, [r7, #16]
 8018f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018f2e:	429a      	cmp	r2, r3
 8018f30:	d02c      	beq.n	8018f8c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018f32:	693b      	ldr	r3, [r7, #16]
 8018f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d128      	bne.n	8018f8c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018f3a:	693b      	ldr	r3, [r7, #16]
 8018f3c:	3304      	adds	r3, #4
 8018f3e:	4618      	mov	r0, r3
 8018f40:	f7fe fbbc 	bl	80176bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018f44:	693b      	ldr	r3, [r7, #16]
 8018f46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018f48:	693b      	ldr	r3, [r7, #16]
 8018f4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018f4c:	693b      	ldr	r3, [r7, #16]
 8018f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018f54:	693b      	ldr	r3, [r7, #16]
 8018f56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018f58:	693b      	ldr	r3, [r7, #16]
 8018f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f5c:	4b0f      	ldr	r3, [pc, #60]	; (8018f9c <xTaskPriorityDisinherit+0xd4>)
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	429a      	cmp	r2, r3
 8018f62:	d903      	bls.n	8018f6c <xTaskPriorityDisinherit+0xa4>
 8018f64:	693b      	ldr	r3, [r7, #16]
 8018f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f68:	4a0c      	ldr	r2, [pc, #48]	; (8018f9c <xTaskPriorityDisinherit+0xd4>)
 8018f6a:	6013      	str	r3, [r2, #0]
 8018f6c:	693b      	ldr	r3, [r7, #16]
 8018f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018f70:	4613      	mov	r3, r2
 8018f72:	009b      	lsls	r3, r3, #2
 8018f74:	4413      	add	r3, r2
 8018f76:	009b      	lsls	r3, r3, #2
 8018f78:	4a09      	ldr	r2, [pc, #36]	; (8018fa0 <xTaskPriorityDisinherit+0xd8>)
 8018f7a:	441a      	add	r2, r3
 8018f7c:	693b      	ldr	r3, [r7, #16]
 8018f7e:	3304      	adds	r3, #4
 8018f80:	4619      	mov	r1, r3
 8018f82:	4610      	mov	r0, r2
 8018f84:	f7fe fb3d 	bl	8017602 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018f88:	2301      	movs	r3, #1
 8018f8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018f8c:	697b      	ldr	r3, [r7, #20]
	}
 8018f8e:	4618      	mov	r0, r3
 8018f90:	3718      	adds	r7, #24
 8018f92:	46bd      	mov	sp, r7
 8018f94:	bd80      	pop	{r7, pc}
 8018f96:	bf00      	nop
 8018f98:	24002718 	.word	0x24002718
 8018f9c:	24002bf4 	.word	0x24002bf4
 8018fa0:	2400271c 	.word	0x2400271c

08018fa4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8018fa4:	b480      	push	{r7}
 8018fa6:	b083      	sub	sp, #12
 8018fa8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8018faa:	4b09      	ldr	r3, [pc, #36]	; (8018fd0 <uxTaskResetEventItemValue+0x2c>)
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	699b      	ldr	r3, [r3, #24]
 8018fb0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018fb2:	4b07      	ldr	r3, [pc, #28]	; (8018fd0 <uxTaskResetEventItemValue+0x2c>)
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018fb8:	4b05      	ldr	r3, [pc, #20]	; (8018fd0 <uxTaskResetEventItemValue+0x2c>)
 8018fba:	681b      	ldr	r3, [r3, #0]
 8018fbc:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8018fc0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8018fc2:	687b      	ldr	r3, [r7, #4]
}
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	370c      	adds	r7, #12
 8018fc8:	46bd      	mov	sp, r7
 8018fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fce:	4770      	bx	lr
 8018fd0:	24002718 	.word	0x24002718

08018fd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018fd4:	b580      	push	{r7, lr}
 8018fd6:	b084      	sub	sp, #16
 8018fd8:	af00      	add	r7, sp, #0
 8018fda:	6078      	str	r0, [r7, #4]
 8018fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018fde:	4b21      	ldr	r3, [pc, #132]	; (8019064 <prvAddCurrentTaskToDelayedList+0x90>)
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018fe4:	4b20      	ldr	r3, [pc, #128]	; (8019068 <prvAddCurrentTaskToDelayedList+0x94>)
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	3304      	adds	r3, #4
 8018fea:	4618      	mov	r0, r3
 8018fec:	f7fe fb66 	bl	80176bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018ff6:	d10a      	bne.n	801900e <prvAddCurrentTaskToDelayedList+0x3a>
 8018ff8:	683b      	ldr	r3, [r7, #0]
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	d007      	beq.n	801900e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018ffe:	4b1a      	ldr	r3, [pc, #104]	; (8019068 <prvAddCurrentTaskToDelayedList+0x94>)
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	3304      	adds	r3, #4
 8019004:	4619      	mov	r1, r3
 8019006:	4819      	ldr	r0, [pc, #100]	; (801906c <prvAddCurrentTaskToDelayedList+0x98>)
 8019008:	f7fe fafb 	bl	8017602 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801900c:	e026      	b.n	801905c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801900e:	68fa      	ldr	r2, [r7, #12]
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	4413      	add	r3, r2
 8019014:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8019016:	4b14      	ldr	r3, [pc, #80]	; (8019068 <prvAddCurrentTaskToDelayedList+0x94>)
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	68ba      	ldr	r2, [r7, #8]
 801901c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801901e:	68ba      	ldr	r2, [r7, #8]
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	429a      	cmp	r2, r3
 8019024:	d209      	bcs.n	801903a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019026:	4b12      	ldr	r3, [pc, #72]	; (8019070 <prvAddCurrentTaskToDelayedList+0x9c>)
 8019028:	681a      	ldr	r2, [r3, #0]
 801902a:	4b0f      	ldr	r3, [pc, #60]	; (8019068 <prvAddCurrentTaskToDelayedList+0x94>)
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	3304      	adds	r3, #4
 8019030:	4619      	mov	r1, r3
 8019032:	4610      	mov	r0, r2
 8019034:	f7fe fb09 	bl	801764a <vListInsert>
}
 8019038:	e010      	b.n	801905c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801903a:	4b0e      	ldr	r3, [pc, #56]	; (8019074 <prvAddCurrentTaskToDelayedList+0xa0>)
 801903c:	681a      	ldr	r2, [r3, #0]
 801903e:	4b0a      	ldr	r3, [pc, #40]	; (8019068 <prvAddCurrentTaskToDelayedList+0x94>)
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	3304      	adds	r3, #4
 8019044:	4619      	mov	r1, r3
 8019046:	4610      	mov	r0, r2
 8019048:	f7fe faff 	bl	801764a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801904c:	4b0a      	ldr	r3, [pc, #40]	; (8019078 <prvAddCurrentTaskToDelayedList+0xa4>)
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	68ba      	ldr	r2, [r7, #8]
 8019052:	429a      	cmp	r2, r3
 8019054:	d202      	bcs.n	801905c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8019056:	4a08      	ldr	r2, [pc, #32]	; (8019078 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019058:	68bb      	ldr	r3, [r7, #8]
 801905a:	6013      	str	r3, [r2, #0]
}
 801905c:	bf00      	nop
 801905e:	3710      	adds	r7, #16
 8019060:	46bd      	mov	sp, r7
 8019062:	bd80      	pop	{r7, pc}
 8019064:	24002bf0 	.word	0x24002bf0
 8019068:	24002718 	.word	0x24002718
 801906c:	24002bd8 	.word	0x24002bd8
 8019070:	24002ba8 	.word	0x24002ba8
 8019074:	24002ba4 	.word	0x24002ba4
 8019078:	24002c0c 	.word	0x24002c0c

0801907c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801907c:	b580      	push	{r7, lr}
 801907e:	b08a      	sub	sp, #40	; 0x28
 8019080:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8019082:	2300      	movs	r3, #0
 8019084:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8019086:	f000 fb07 	bl	8019698 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801908a:	4b1c      	ldr	r3, [pc, #112]	; (80190fc <xTimerCreateTimerTask+0x80>)
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d021      	beq.n	80190d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8019092:	2300      	movs	r3, #0
 8019094:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8019096:	2300      	movs	r3, #0
 8019098:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801909a:	1d3a      	adds	r2, r7, #4
 801909c:	f107 0108 	add.w	r1, r7, #8
 80190a0:	f107 030c 	add.w	r3, r7, #12
 80190a4:	4618      	mov	r0, r3
 80190a6:	f7fd fff9 	bl	801709c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80190aa:	6879      	ldr	r1, [r7, #4]
 80190ac:	68bb      	ldr	r3, [r7, #8]
 80190ae:	68fa      	ldr	r2, [r7, #12]
 80190b0:	9202      	str	r2, [sp, #8]
 80190b2:	9301      	str	r3, [sp, #4]
 80190b4:	2302      	movs	r3, #2
 80190b6:	9300      	str	r3, [sp, #0]
 80190b8:	2300      	movs	r3, #0
 80190ba:	460a      	mov	r2, r1
 80190bc:	4910      	ldr	r1, [pc, #64]	; (8019100 <xTimerCreateTimerTask+0x84>)
 80190be:	4811      	ldr	r0, [pc, #68]	; (8019104 <xTimerCreateTimerTask+0x88>)
 80190c0:	f7ff f812 	bl	80180e8 <xTaskCreateStatic>
 80190c4:	4603      	mov	r3, r0
 80190c6:	4a10      	ldr	r2, [pc, #64]	; (8019108 <xTimerCreateTimerTask+0x8c>)
 80190c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80190ca:	4b0f      	ldr	r3, [pc, #60]	; (8019108 <xTimerCreateTimerTask+0x8c>)
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d001      	beq.n	80190d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80190d2:	2301      	movs	r3, #1
 80190d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80190d6:	697b      	ldr	r3, [r7, #20]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d10a      	bne.n	80190f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80190dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190e0:	f383 8811 	msr	BASEPRI, r3
 80190e4:	f3bf 8f6f 	isb	sy
 80190e8:	f3bf 8f4f 	dsb	sy
 80190ec:	613b      	str	r3, [r7, #16]
}
 80190ee:	bf00      	nop
 80190f0:	e7fe      	b.n	80190f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80190f2:	697b      	ldr	r3, [r7, #20]
}
 80190f4:	4618      	mov	r0, r3
 80190f6:	3718      	adds	r7, #24
 80190f8:	46bd      	mov	sp, r7
 80190fa:	bd80      	pop	{r7, pc}
 80190fc:	24002c48 	.word	0x24002c48
 8019100:	0801acb8 	.word	0x0801acb8
 8019104:	08019241 	.word	0x08019241
 8019108:	24002c4c 	.word	0x24002c4c

0801910c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801910c:	b580      	push	{r7, lr}
 801910e:	b08a      	sub	sp, #40	; 0x28
 8019110:	af00      	add	r7, sp, #0
 8019112:	60f8      	str	r0, [r7, #12]
 8019114:	60b9      	str	r1, [r7, #8]
 8019116:	607a      	str	r2, [r7, #4]
 8019118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801911a:	2300      	movs	r3, #0
 801911c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	2b00      	cmp	r3, #0
 8019122:	d10a      	bne.n	801913a <xTimerGenericCommand+0x2e>
	__asm volatile
 8019124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019128:	f383 8811 	msr	BASEPRI, r3
 801912c:	f3bf 8f6f 	isb	sy
 8019130:	f3bf 8f4f 	dsb	sy
 8019134:	623b      	str	r3, [r7, #32]
}
 8019136:	bf00      	nop
 8019138:	e7fe      	b.n	8019138 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801913a:	4b1a      	ldr	r3, [pc, #104]	; (80191a4 <xTimerGenericCommand+0x98>)
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	2b00      	cmp	r3, #0
 8019140:	d02a      	beq.n	8019198 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8019142:	68bb      	ldr	r3, [r7, #8]
 8019144:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801914a:	68fb      	ldr	r3, [r7, #12]
 801914c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801914e:	68bb      	ldr	r3, [r7, #8]
 8019150:	2b05      	cmp	r3, #5
 8019152:	dc18      	bgt.n	8019186 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8019154:	f7ff fe9a 	bl	8018e8c <xTaskGetSchedulerState>
 8019158:	4603      	mov	r3, r0
 801915a:	2b02      	cmp	r3, #2
 801915c:	d109      	bne.n	8019172 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801915e:	4b11      	ldr	r3, [pc, #68]	; (80191a4 <xTimerGenericCommand+0x98>)
 8019160:	6818      	ldr	r0, [r3, #0]
 8019162:	f107 0110 	add.w	r1, r7, #16
 8019166:	2300      	movs	r3, #0
 8019168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801916a:	f7fe fbd5 	bl	8017918 <xQueueGenericSend>
 801916e:	6278      	str	r0, [r7, #36]	; 0x24
 8019170:	e012      	b.n	8019198 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019172:	4b0c      	ldr	r3, [pc, #48]	; (80191a4 <xTimerGenericCommand+0x98>)
 8019174:	6818      	ldr	r0, [r3, #0]
 8019176:	f107 0110 	add.w	r1, r7, #16
 801917a:	2300      	movs	r3, #0
 801917c:	2200      	movs	r2, #0
 801917e:	f7fe fbcb 	bl	8017918 <xQueueGenericSend>
 8019182:	6278      	str	r0, [r7, #36]	; 0x24
 8019184:	e008      	b.n	8019198 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019186:	4b07      	ldr	r3, [pc, #28]	; (80191a4 <xTimerGenericCommand+0x98>)
 8019188:	6818      	ldr	r0, [r3, #0]
 801918a:	f107 0110 	add.w	r1, r7, #16
 801918e:	2300      	movs	r3, #0
 8019190:	683a      	ldr	r2, [r7, #0]
 8019192:	f7fe fcbf 	bl	8017b14 <xQueueGenericSendFromISR>
 8019196:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8019198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801919a:	4618      	mov	r0, r3
 801919c:	3728      	adds	r7, #40	; 0x28
 801919e:	46bd      	mov	sp, r7
 80191a0:	bd80      	pop	{r7, pc}
 80191a2:	bf00      	nop
 80191a4:	24002c48 	.word	0x24002c48

080191a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80191a8:	b580      	push	{r7, lr}
 80191aa:	b088      	sub	sp, #32
 80191ac:	af02      	add	r7, sp, #8
 80191ae:	6078      	str	r0, [r7, #4]
 80191b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80191b2:	4b22      	ldr	r3, [pc, #136]	; (801923c <prvProcessExpiredTimer+0x94>)
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	68db      	ldr	r3, [r3, #12]
 80191b8:	68db      	ldr	r3, [r3, #12]
 80191ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80191bc:	697b      	ldr	r3, [r7, #20]
 80191be:	3304      	adds	r3, #4
 80191c0:	4618      	mov	r0, r3
 80191c2:	f7fe fa7b 	bl	80176bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80191c6:	697b      	ldr	r3, [r7, #20]
 80191c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191cc:	f003 0304 	and.w	r3, r3, #4
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d022      	beq.n	801921a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80191d4:	697b      	ldr	r3, [r7, #20]
 80191d6:	699a      	ldr	r2, [r3, #24]
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	18d1      	adds	r1, r2, r3
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	683a      	ldr	r2, [r7, #0]
 80191e0:	6978      	ldr	r0, [r7, #20]
 80191e2:	f000 f8d1 	bl	8019388 <prvInsertTimerInActiveList>
 80191e6:	4603      	mov	r3, r0
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d01f      	beq.n	801922c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80191ec:	2300      	movs	r3, #0
 80191ee:	9300      	str	r3, [sp, #0]
 80191f0:	2300      	movs	r3, #0
 80191f2:	687a      	ldr	r2, [r7, #4]
 80191f4:	2100      	movs	r1, #0
 80191f6:	6978      	ldr	r0, [r7, #20]
 80191f8:	f7ff ff88 	bl	801910c <xTimerGenericCommand>
 80191fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80191fe:	693b      	ldr	r3, [r7, #16]
 8019200:	2b00      	cmp	r3, #0
 8019202:	d113      	bne.n	801922c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8019204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019208:	f383 8811 	msr	BASEPRI, r3
 801920c:	f3bf 8f6f 	isb	sy
 8019210:	f3bf 8f4f 	dsb	sy
 8019214:	60fb      	str	r3, [r7, #12]
}
 8019216:	bf00      	nop
 8019218:	e7fe      	b.n	8019218 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801921a:	697b      	ldr	r3, [r7, #20]
 801921c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019220:	f023 0301 	bic.w	r3, r3, #1
 8019224:	b2da      	uxtb	r2, r3
 8019226:	697b      	ldr	r3, [r7, #20]
 8019228:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801922c:	697b      	ldr	r3, [r7, #20]
 801922e:	6a1b      	ldr	r3, [r3, #32]
 8019230:	6978      	ldr	r0, [r7, #20]
 8019232:	4798      	blx	r3
}
 8019234:	bf00      	nop
 8019236:	3718      	adds	r7, #24
 8019238:	46bd      	mov	sp, r7
 801923a:	bd80      	pop	{r7, pc}
 801923c:	24002c40 	.word	0x24002c40

08019240 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b084      	sub	sp, #16
 8019244:	af00      	add	r7, sp, #0
 8019246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019248:	f107 0308 	add.w	r3, r7, #8
 801924c:	4618      	mov	r0, r3
 801924e:	f000 f857 	bl	8019300 <prvGetNextExpireTime>
 8019252:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8019254:	68bb      	ldr	r3, [r7, #8]
 8019256:	4619      	mov	r1, r3
 8019258:	68f8      	ldr	r0, [r7, #12]
 801925a:	f000 f803 	bl	8019264 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801925e:	f000 f8d5 	bl	801940c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019262:	e7f1      	b.n	8019248 <prvTimerTask+0x8>

08019264 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8019264:	b580      	push	{r7, lr}
 8019266:	b084      	sub	sp, #16
 8019268:	af00      	add	r7, sp, #0
 801926a:	6078      	str	r0, [r7, #4]
 801926c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801926e:	f7ff f977 	bl	8018560 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019272:	f107 0308 	add.w	r3, r7, #8
 8019276:	4618      	mov	r0, r3
 8019278:	f000 f866 	bl	8019348 <prvSampleTimeNow>
 801927c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801927e:	68bb      	ldr	r3, [r7, #8]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d130      	bne.n	80192e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8019284:	683b      	ldr	r3, [r7, #0]
 8019286:	2b00      	cmp	r3, #0
 8019288:	d10a      	bne.n	80192a0 <prvProcessTimerOrBlockTask+0x3c>
 801928a:	687a      	ldr	r2, [r7, #4]
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	429a      	cmp	r2, r3
 8019290:	d806      	bhi.n	80192a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8019292:	f7ff f973 	bl	801857c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8019296:	68f9      	ldr	r1, [r7, #12]
 8019298:	6878      	ldr	r0, [r7, #4]
 801929a:	f7ff ff85 	bl	80191a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801929e:	e024      	b.n	80192ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80192a0:	683b      	ldr	r3, [r7, #0]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d008      	beq.n	80192b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80192a6:	4b13      	ldr	r3, [pc, #76]	; (80192f4 <prvProcessTimerOrBlockTask+0x90>)
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	2b00      	cmp	r3, #0
 80192ae:	d101      	bne.n	80192b4 <prvProcessTimerOrBlockTask+0x50>
 80192b0:	2301      	movs	r3, #1
 80192b2:	e000      	b.n	80192b6 <prvProcessTimerOrBlockTask+0x52>
 80192b4:	2300      	movs	r3, #0
 80192b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80192b8:	4b0f      	ldr	r3, [pc, #60]	; (80192f8 <prvProcessTimerOrBlockTask+0x94>)
 80192ba:	6818      	ldr	r0, [r3, #0]
 80192bc:	687a      	ldr	r2, [r7, #4]
 80192be:	68fb      	ldr	r3, [r7, #12]
 80192c0:	1ad3      	subs	r3, r2, r3
 80192c2:	683a      	ldr	r2, [r7, #0]
 80192c4:	4619      	mov	r1, r3
 80192c6:	f7fe fedb 	bl	8018080 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80192ca:	f7ff f957 	bl	801857c <xTaskResumeAll>
 80192ce:	4603      	mov	r3, r0
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d10a      	bne.n	80192ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80192d4:	4b09      	ldr	r3, [pc, #36]	; (80192fc <prvProcessTimerOrBlockTask+0x98>)
 80192d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80192da:	601a      	str	r2, [r3, #0]
 80192dc:	f3bf 8f4f 	dsb	sy
 80192e0:	f3bf 8f6f 	isb	sy
}
 80192e4:	e001      	b.n	80192ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80192e6:	f7ff f949 	bl	801857c <xTaskResumeAll>
}
 80192ea:	bf00      	nop
 80192ec:	3710      	adds	r7, #16
 80192ee:	46bd      	mov	sp, r7
 80192f0:	bd80      	pop	{r7, pc}
 80192f2:	bf00      	nop
 80192f4:	24002c44 	.word	0x24002c44
 80192f8:	24002c48 	.word	0x24002c48
 80192fc:	e000ed04 	.word	0xe000ed04

08019300 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8019300:	b480      	push	{r7}
 8019302:	b085      	sub	sp, #20
 8019304:	af00      	add	r7, sp, #0
 8019306:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8019308:	4b0e      	ldr	r3, [pc, #56]	; (8019344 <prvGetNextExpireTime+0x44>)
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	2b00      	cmp	r3, #0
 8019310:	d101      	bne.n	8019316 <prvGetNextExpireTime+0x16>
 8019312:	2201      	movs	r2, #1
 8019314:	e000      	b.n	8019318 <prvGetNextExpireTime+0x18>
 8019316:	2200      	movs	r2, #0
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	2b00      	cmp	r3, #0
 8019322:	d105      	bne.n	8019330 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019324:	4b07      	ldr	r3, [pc, #28]	; (8019344 <prvGetNextExpireTime+0x44>)
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	68db      	ldr	r3, [r3, #12]
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	60fb      	str	r3, [r7, #12]
 801932e:	e001      	b.n	8019334 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8019330:	2300      	movs	r3, #0
 8019332:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8019334:	68fb      	ldr	r3, [r7, #12]
}
 8019336:	4618      	mov	r0, r3
 8019338:	3714      	adds	r7, #20
 801933a:	46bd      	mov	sp, r7
 801933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019340:	4770      	bx	lr
 8019342:	bf00      	nop
 8019344:	24002c40 	.word	0x24002c40

08019348 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b084      	sub	sp, #16
 801934c:	af00      	add	r7, sp, #0
 801934e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019350:	f7ff f9b2 	bl	80186b8 <xTaskGetTickCount>
 8019354:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8019356:	4b0b      	ldr	r3, [pc, #44]	; (8019384 <prvSampleTimeNow+0x3c>)
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	68fa      	ldr	r2, [r7, #12]
 801935c:	429a      	cmp	r2, r3
 801935e:	d205      	bcs.n	801936c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019360:	f000 f936 	bl	80195d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	2201      	movs	r2, #1
 8019368:	601a      	str	r2, [r3, #0]
 801936a:	e002      	b.n	8019372 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	2200      	movs	r2, #0
 8019370:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8019372:	4a04      	ldr	r2, [pc, #16]	; (8019384 <prvSampleTimeNow+0x3c>)
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019378:	68fb      	ldr	r3, [r7, #12]
}
 801937a:	4618      	mov	r0, r3
 801937c:	3710      	adds	r7, #16
 801937e:	46bd      	mov	sp, r7
 8019380:	bd80      	pop	{r7, pc}
 8019382:	bf00      	nop
 8019384:	24002c50 	.word	0x24002c50

08019388 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019388:	b580      	push	{r7, lr}
 801938a:	b086      	sub	sp, #24
 801938c:	af00      	add	r7, sp, #0
 801938e:	60f8      	str	r0, [r7, #12]
 8019390:	60b9      	str	r1, [r7, #8]
 8019392:	607a      	str	r2, [r7, #4]
 8019394:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8019396:	2300      	movs	r3, #0
 8019398:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	68ba      	ldr	r2, [r7, #8]
 801939e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	68fa      	ldr	r2, [r7, #12]
 80193a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80193a6:	68ba      	ldr	r2, [r7, #8]
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	429a      	cmp	r2, r3
 80193ac:	d812      	bhi.n	80193d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80193ae:	687a      	ldr	r2, [r7, #4]
 80193b0:	683b      	ldr	r3, [r7, #0]
 80193b2:	1ad2      	subs	r2, r2, r3
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	699b      	ldr	r3, [r3, #24]
 80193b8:	429a      	cmp	r2, r3
 80193ba:	d302      	bcc.n	80193c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80193bc:	2301      	movs	r3, #1
 80193be:	617b      	str	r3, [r7, #20]
 80193c0:	e01b      	b.n	80193fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80193c2:	4b10      	ldr	r3, [pc, #64]	; (8019404 <prvInsertTimerInActiveList+0x7c>)
 80193c4:	681a      	ldr	r2, [r3, #0]
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	3304      	adds	r3, #4
 80193ca:	4619      	mov	r1, r3
 80193cc:	4610      	mov	r0, r2
 80193ce:	f7fe f93c 	bl	801764a <vListInsert>
 80193d2:	e012      	b.n	80193fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80193d4:	687a      	ldr	r2, [r7, #4]
 80193d6:	683b      	ldr	r3, [r7, #0]
 80193d8:	429a      	cmp	r2, r3
 80193da:	d206      	bcs.n	80193ea <prvInsertTimerInActiveList+0x62>
 80193dc:	68ba      	ldr	r2, [r7, #8]
 80193de:	683b      	ldr	r3, [r7, #0]
 80193e0:	429a      	cmp	r2, r3
 80193e2:	d302      	bcc.n	80193ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80193e4:	2301      	movs	r3, #1
 80193e6:	617b      	str	r3, [r7, #20]
 80193e8:	e007      	b.n	80193fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80193ea:	4b07      	ldr	r3, [pc, #28]	; (8019408 <prvInsertTimerInActiveList+0x80>)
 80193ec:	681a      	ldr	r2, [r3, #0]
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	3304      	adds	r3, #4
 80193f2:	4619      	mov	r1, r3
 80193f4:	4610      	mov	r0, r2
 80193f6:	f7fe f928 	bl	801764a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80193fa:	697b      	ldr	r3, [r7, #20]
}
 80193fc:	4618      	mov	r0, r3
 80193fe:	3718      	adds	r7, #24
 8019400:	46bd      	mov	sp, r7
 8019402:	bd80      	pop	{r7, pc}
 8019404:	24002c44 	.word	0x24002c44
 8019408:	24002c40 	.word	0x24002c40

0801940c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b08e      	sub	sp, #56	; 0x38
 8019410:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019412:	e0ca      	b.n	80195aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	2b00      	cmp	r3, #0
 8019418:	da18      	bge.n	801944c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801941a:	1d3b      	adds	r3, r7, #4
 801941c:	3304      	adds	r3, #4
 801941e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019422:	2b00      	cmp	r3, #0
 8019424:	d10a      	bne.n	801943c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8019426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801942a:	f383 8811 	msr	BASEPRI, r3
 801942e:	f3bf 8f6f 	isb	sy
 8019432:	f3bf 8f4f 	dsb	sy
 8019436:	61fb      	str	r3, [r7, #28]
}
 8019438:	bf00      	nop
 801943a:	e7fe      	b.n	801943a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019442:	6850      	ldr	r0, [r2, #4]
 8019444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019446:	6892      	ldr	r2, [r2, #8]
 8019448:	4611      	mov	r1, r2
 801944a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	2b00      	cmp	r3, #0
 8019450:	f2c0 80aa 	blt.w	80195a8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801945a:	695b      	ldr	r3, [r3, #20]
 801945c:	2b00      	cmp	r3, #0
 801945e:	d004      	beq.n	801946a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019462:	3304      	adds	r3, #4
 8019464:	4618      	mov	r0, r3
 8019466:	f7fe f929 	bl	80176bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801946a:	463b      	mov	r3, r7
 801946c:	4618      	mov	r0, r3
 801946e:	f7ff ff6b 	bl	8019348 <prvSampleTimeNow>
 8019472:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	2b09      	cmp	r3, #9
 8019478:	f200 8097 	bhi.w	80195aa <prvProcessReceivedCommands+0x19e>
 801947c:	a201      	add	r2, pc, #4	; (adr r2, 8019484 <prvProcessReceivedCommands+0x78>)
 801947e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019482:	bf00      	nop
 8019484:	080194ad 	.word	0x080194ad
 8019488:	080194ad 	.word	0x080194ad
 801948c:	080194ad 	.word	0x080194ad
 8019490:	08019521 	.word	0x08019521
 8019494:	08019535 	.word	0x08019535
 8019498:	0801957f 	.word	0x0801957f
 801949c:	080194ad 	.word	0x080194ad
 80194a0:	080194ad 	.word	0x080194ad
 80194a4:	08019521 	.word	0x08019521
 80194a8:	08019535 	.word	0x08019535
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80194ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80194b2:	f043 0301 	orr.w	r3, r3, #1
 80194b6:	b2da      	uxtb	r2, r3
 80194b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80194be:	68ba      	ldr	r2, [r7, #8]
 80194c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194c2:	699b      	ldr	r3, [r3, #24]
 80194c4:	18d1      	adds	r1, r2, r3
 80194c6:	68bb      	ldr	r3, [r7, #8]
 80194c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80194ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194cc:	f7ff ff5c 	bl	8019388 <prvInsertTimerInActiveList>
 80194d0:	4603      	mov	r3, r0
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d069      	beq.n	80195aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80194d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194d8:	6a1b      	ldr	r3, [r3, #32]
 80194da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80194de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80194e4:	f003 0304 	and.w	r3, r3, #4
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d05e      	beq.n	80195aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80194ec:	68ba      	ldr	r2, [r7, #8]
 80194ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194f0:	699b      	ldr	r3, [r3, #24]
 80194f2:	441a      	add	r2, r3
 80194f4:	2300      	movs	r3, #0
 80194f6:	9300      	str	r3, [sp, #0]
 80194f8:	2300      	movs	r3, #0
 80194fa:	2100      	movs	r1, #0
 80194fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194fe:	f7ff fe05 	bl	801910c <xTimerGenericCommand>
 8019502:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019504:	6a3b      	ldr	r3, [r7, #32]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d14f      	bne.n	80195aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801950e:	f383 8811 	msr	BASEPRI, r3
 8019512:	f3bf 8f6f 	isb	sy
 8019516:	f3bf 8f4f 	dsb	sy
 801951a:	61bb      	str	r3, [r7, #24]
}
 801951c:	bf00      	nop
 801951e:	e7fe      	b.n	801951e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019526:	f023 0301 	bic.w	r3, r3, #1
 801952a:	b2da      	uxtb	r2, r3
 801952c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801952e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019532:	e03a      	b.n	80195aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801953a:	f043 0301 	orr.w	r3, r3, #1
 801953e:	b2da      	uxtb	r2, r3
 8019540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019546:	68ba      	ldr	r2, [r7, #8]
 8019548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801954a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801954c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801954e:	699b      	ldr	r3, [r3, #24]
 8019550:	2b00      	cmp	r3, #0
 8019552:	d10a      	bne.n	801956a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8019554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019558:	f383 8811 	msr	BASEPRI, r3
 801955c:	f3bf 8f6f 	isb	sy
 8019560:	f3bf 8f4f 	dsb	sy
 8019564:	617b      	str	r3, [r7, #20]
}
 8019566:	bf00      	nop
 8019568:	e7fe      	b.n	8019568 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801956c:	699a      	ldr	r2, [r3, #24]
 801956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019570:	18d1      	adds	r1, r2, r3
 8019572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019578:	f7ff ff06 	bl	8019388 <prvInsertTimerInActiveList>
					break;
 801957c:	e015      	b.n	80195aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801957e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019584:	f003 0302 	and.w	r3, r3, #2
 8019588:	2b00      	cmp	r3, #0
 801958a:	d103      	bne.n	8019594 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801958c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801958e:	f000 fbff 	bl	8019d90 <vPortFree>
 8019592:	e00a      	b.n	80195aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801959a:	f023 0301 	bic.w	r3, r3, #1
 801959e:	b2da      	uxtb	r2, r3
 80195a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80195a6:	e000      	b.n	80195aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80195a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80195aa:	4b08      	ldr	r3, [pc, #32]	; (80195cc <prvProcessReceivedCommands+0x1c0>)
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	1d39      	adds	r1, r7, #4
 80195b0:	2200      	movs	r2, #0
 80195b2:	4618      	mov	r0, r3
 80195b4:	f7fe fb4a 	bl	8017c4c <xQueueReceive>
 80195b8:	4603      	mov	r3, r0
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	f47f af2a 	bne.w	8019414 <prvProcessReceivedCommands+0x8>
	}
}
 80195c0:	bf00      	nop
 80195c2:	bf00      	nop
 80195c4:	3730      	adds	r7, #48	; 0x30
 80195c6:	46bd      	mov	sp, r7
 80195c8:	bd80      	pop	{r7, pc}
 80195ca:	bf00      	nop
 80195cc:	24002c48 	.word	0x24002c48

080195d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b088      	sub	sp, #32
 80195d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80195d6:	e048      	b.n	801966a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80195d8:	4b2d      	ldr	r3, [pc, #180]	; (8019690 <prvSwitchTimerLists+0xc0>)
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	68db      	ldr	r3, [r3, #12]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80195e2:	4b2b      	ldr	r3, [pc, #172]	; (8019690 <prvSwitchTimerLists+0xc0>)
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	68db      	ldr	r3, [r3, #12]
 80195e8:	68db      	ldr	r3, [r3, #12]
 80195ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	3304      	adds	r3, #4
 80195f0:	4618      	mov	r0, r3
 80195f2:	f7fe f863 	bl	80176bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	6a1b      	ldr	r3, [r3, #32]
 80195fa:	68f8      	ldr	r0, [r7, #12]
 80195fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019604:	f003 0304 	and.w	r3, r3, #4
 8019608:	2b00      	cmp	r3, #0
 801960a:	d02e      	beq.n	801966a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	699b      	ldr	r3, [r3, #24]
 8019610:	693a      	ldr	r2, [r7, #16]
 8019612:	4413      	add	r3, r2
 8019614:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019616:	68ba      	ldr	r2, [r7, #8]
 8019618:	693b      	ldr	r3, [r7, #16]
 801961a:	429a      	cmp	r2, r3
 801961c:	d90e      	bls.n	801963c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	68ba      	ldr	r2, [r7, #8]
 8019622:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	68fa      	ldr	r2, [r7, #12]
 8019628:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801962a:	4b19      	ldr	r3, [pc, #100]	; (8019690 <prvSwitchTimerLists+0xc0>)
 801962c:	681a      	ldr	r2, [r3, #0]
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	3304      	adds	r3, #4
 8019632:	4619      	mov	r1, r3
 8019634:	4610      	mov	r0, r2
 8019636:	f7fe f808 	bl	801764a <vListInsert>
 801963a:	e016      	b.n	801966a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801963c:	2300      	movs	r3, #0
 801963e:	9300      	str	r3, [sp, #0]
 8019640:	2300      	movs	r3, #0
 8019642:	693a      	ldr	r2, [r7, #16]
 8019644:	2100      	movs	r1, #0
 8019646:	68f8      	ldr	r0, [r7, #12]
 8019648:	f7ff fd60 	bl	801910c <xTimerGenericCommand>
 801964c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	2b00      	cmp	r3, #0
 8019652:	d10a      	bne.n	801966a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8019654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019658:	f383 8811 	msr	BASEPRI, r3
 801965c:	f3bf 8f6f 	isb	sy
 8019660:	f3bf 8f4f 	dsb	sy
 8019664:	603b      	str	r3, [r7, #0]
}
 8019666:	bf00      	nop
 8019668:	e7fe      	b.n	8019668 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801966a:	4b09      	ldr	r3, [pc, #36]	; (8019690 <prvSwitchTimerLists+0xc0>)
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	2b00      	cmp	r3, #0
 8019672:	d1b1      	bne.n	80195d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019674:	4b06      	ldr	r3, [pc, #24]	; (8019690 <prvSwitchTimerLists+0xc0>)
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801967a:	4b06      	ldr	r3, [pc, #24]	; (8019694 <prvSwitchTimerLists+0xc4>)
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	4a04      	ldr	r2, [pc, #16]	; (8019690 <prvSwitchTimerLists+0xc0>)
 8019680:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019682:	4a04      	ldr	r2, [pc, #16]	; (8019694 <prvSwitchTimerLists+0xc4>)
 8019684:	697b      	ldr	r3, [r7, #20]
 8019686:	6013      	str	r3, [r2, #0]
}
 8019688:	bf00      	nop
 801968a:	3718      	adds	r7, #24
 801968c:	46bd      	mov	sp, r7
 801968e:	bd80      	pop	{r7, pc}
 8019690:	24002c40 	.word	0x24002c40
 8019694:	24002c44 	.word	0x24002c44

08019698 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019698:	b580      	push	{r7, lr}
 801969a:	b082      	sub	sp, #8
 801969c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801969e:	f000 f989 	bl	80199b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80196a2:	4b15      	ldr	r3, [pc, #84]	; (80196f8 <prvCheckForValidListAndQueue+0x60>)
 80196a4:	681b      	ldr	r3, [r3, #0]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	d120      	bne.n	80196ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80196aa:	4814      	ldr	r0, [pc, #80]	; (80196fc <prvCheckForValidListAndQueue+0x64>)
 80196ac:	f7fd ff7c 	bl	80175a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80196b0:	4813      	ldr	r0, [pc, #76]	; (8019700 <prvCheckForValidListAndQueue+0x68>)
 80196b2:	f7fd ff79 	bl	80175a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80196b6:	4b13      	ldr	r3, [pc, #76]	; (8019704 <prvCheckForValidListAndQueue+0x6c>)
 80196b8:	4a10      	ldr	r2, [pc, #64]	; (80196fc <prvCheckForValidListAndQueue+0x64>)
 80196ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80196bc:	4b12      	ldr	r3, [pc, #72]	; (8019708 <prvCheckForValidListAndQueue+0x70>)
 80196be:	4a10      	ldr	r2, [pc, #64]	; (8019700 <prvCheckForValidListAndQueue+0x68>)
 80196c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80196c2:	2300      	movs	r3, #0
 80196c4:	9300      	str	r3, [sp, #0]
 80196c6:	4b11      	ldr	r3, [pc, #68]	; (801970c <prvCheckForValidListAndQueue+0x74>)
 80196c8:	4a11      	ldr	r2, [pc, #68]	; (8019710 <prvCheckForValidListAndQueue+0x78>)
 80196ca:	2110      	movs	r1, #16
 80196cc:	200a      	movs	r0, #10
 80196ce:	f7fe f887 	bl	80177e0 <xQueueGenericCreateStatic>
 80196d2:	4603      	mov	r3, r0
 80196d4:	4a08      	ldr	r2, [pc, #32]	; (80196f8 <prvCheckForValidListAndQueue+0x60>)
 80196d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80196d8:	4b07      	ldr	r3, [pc, #28]	; (80196f8 <prvCheckForValidListAndQueue+0x60>)
 80196da:	681b      	ldr	r3, [r3, #0]
 80196dc:	2b00      	cmp	r3, #0
 80196de:	d005      	beq.n	80196ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80196e0:	4b05      	ldr	r3, [pc, #20]	; (80196f8 <prvCheckForValidListAndQueue+0x60>)
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	490b      	ldr	r1, [pc, #44]	; (8019714 <prvCheckForValidListAndQueue+0x7c>)
 80196e6:	4618      	mov	r0, r3
 80196e8:	f7fe fca0 	bl	801802c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80196ec:	f000 f992 	bl	8019a14 <vPortExitCritical>
}
 80196f0:	bf00      	nop
 80196f2:	46bd      	mov	sp, r7
 80196f4:	bd80      	pop	{r7, pc}
 80196f6:	bf00      	nop
 80196f8:	24002c48 	.word	0x24002c48
 80196fc:	24002c18 	.word	0x24002c18
 8019700:	24002c2c 	.word	0x24002c2c
 8019704:	24002c40 	.word	0x24002c40
 8019708:	24002c44 	.word	0x24002c44
 801970c:	24002cf4 	.word	0x24002cf4
 8019710:	24002c54 	.word	0x24002c54
 8019714:	0801acc0 	.word	0x0801acc0

08019718 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8019718:	b580      	push	{r7, lr}
 801971a:	b08a      	sub	sp, #40	; 0x28
 801971c:	af00      	add	r7, sp, #0
 801971e:	60f8      	str	r0, [r7, #12]
 8019720:	60b9      	str	r1, [r7, #8]
 8019722:	607a      	str	r2, [r7, #4]
 8019724:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8019726:	f06f 0301 	mvn.w	r3, #1
 801972a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801972c:	68fb      	ldr	r3, [r7, #12]
 801972e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8019730:	68bb      	ldr	r3, [r7, #8]
 8019732:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8019738:	4b06      	ldr	r3, [pc, #24]	; (8019754 <xTimerPendFunctionCallFromISR+0x3c>)
 801973a:	6818      	ldr	r0, [r3, #0]
 801973c:	f107 0114 	add.w	r1, r7, #20
 8019740:	2300      	movs	r3, #0
 8019742:	683a      	ldr	r2, [r7, #0]
 8019744:	f7fe f9e6 	bl	8017b14 <xQueueGenericSendFromISR>
 8019748:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801974c:	4618      	mov	r0, r3
 801974e:	3728      	adds	r7, #40	; 0x28
 8019750:	46bd      	mov	sp, r7
 8019752:	bd80      	pop	{r7, pc}
 8019754:	24002c48 	.word	0x24002c48

08019758 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019758:	b480      	push	{r7}
 801975a:	b085      	sub	sp, #20
 801975c:	af00      	add	r7, sp, #0
 801975e:	60f8      	str	r0, [r7, #12]
 8019760:	60b9      	str	r1, [r7, #8]
 8019762:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	3b04      	subs	r3, #4
 8019768:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801976a:	68fb      	ldr	r3, [r7, #12]
 801976c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	3b04      	subs	r3, #4
 8019776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019778:	68bb      	ldr	r3, [r7, #8]
 801977a:	f023 0201 	bic.w	r2, r3, #1
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	3b04      	subs	r3, #4
 8019786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019788:	4a0c      	ldr	r2, [pc, #48]	; (80197bc <pxPortInitialiseStack+0x64>)
 801978a:	68fb      	ldr	r3, [r7, #12]
 801978c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801978e:	68fb      	ldr	r3, [r7, #12]
 8019790:	3b14      	subs	r3, #20
 8019792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019794:	687a      	ldr	r2, [r7, #4]
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801979a:	68fb      	ldr	r3, [r7, #12]
 801979c:	3b04      	subs	r3, #4
 801979e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	f06f 0202 	mvn.w	r2, #2
 80197a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	3b20      	subs	r3, #32
 80197ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80197ae:	68fb      	ldr	r3, [r7, #12]
}
 80197b0:	4618      	mov	r0, r3
 80197b2:	3714      	adds	r7, #20
 80197b4:	46bd      	mov	sp, r7
 80197b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ba:	4770      	bx	lr
 80197bc:	080197c1 	.word	0x080197c1

080197c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80197c0:	b480      	push	{r7}
 80197c2:	b085      	sub	sp, #20
 80197c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80197c6:	2300      	movs	r3, #0
 80197c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80197ca:	4b12      	ldr	r3, [pc, #72]	; (8019814 <prvTaskExitError+0x54>)
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80197d2:	d00a      	beq.n	80197ea <prvTaskExitError+0x2a>
	__asm volatile
 80197d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197d8:	f383 8811 	msr	BASEPRI, r3
 80197dc:	f3bf 8f6f 	isb	sy
 80197e0:	f3bf 8f4f 	dsb	sy
 80197e4:	60fb      	str	r3, [r7, #12]
}
 80197e6:	bf00      	nop
 80197e8:	e7fe      	b.n	80197e8 <prvTaskExitError+0x28>
	__asm volatile
 80197ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197ee:	f383 8811 	msr	BASEPRI, r3
 80197f2:	f3bf 8f6f 	isb	sy
 80197f6:	f3bf 8f4f 	dsb	sy
 80197fa:	60bb      	str	r3, [r7, #8]
}
 80197fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80197fe:	bf00      	nop
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	2b00      	cmp	r3, #0
 8019804:	d0fc      	beq.n	8019800 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019806:	bf00      	nop
 8019808:	bf00      	nop
 801980a:	3714      	adds	r7, #20
 801980c:	46bd      	mov	sp, r7
 801980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019812:	4770      	bx	lr
 8019814:	240000d0 	.word	0x240000d0
	...

08019820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8019820:	4b07      	ldr	r3, [pc, #28]	; (8019840 <pxCurrentTCBConst2>)
 8019822:	6819      	ldr	r1, [r3, #0]
 8019824:	6808      	ldr	r0, [r1, #0]
 8019826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801982a:	f380 8809 	msr	PSP, r0
 801982e:	f3bf 8f6f 	isb	sy
 8019832:	f04f 0000 	mov.w	r0, #0
 8019836:	f380 8811 	msr	BASEPRI, r0
 801983a:	4770      	bx	lr
 801983c:	f3af 8000 	nop.w

08019840 <pxCurrentTCBConst2>:
 8019840:	24002718 	.word	0x24002718
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019844:	bf00      	nop
 8019846:	bf00      	nop

08019848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019848:	4808      	ldr	r0, [pc, #32]	; (801986c <prvPortStartFirstTask+0x24>)
 801984a:	6800      	ldr	r0, [r0, #0]
 801984c:	6800      	ldr	r0, [r0, #0]
 801984e:	f380 8808 	msr	MSP, r0
 8019852:	f04f 0000 	mov.w	r0, #0
 8019856:	f380 8814 	msr	CONTROL, r0
 801985a:	b662      	cpsie	i
 801985c:	b661      	cpsie	f
 801985e:	f3bf 8f4f 	dsb	sy
 8019862:	f3bf 8f6f 	isb	sy
 8019866:	df00      	svc	0
 8019868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801986a:	bf00      	nop
 801986c:	e000ed08 	.word	0xe000ed08

08019870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019870:	b580      	push	{r7, lr}
 8019872:	b086      	sub	sp, #24
 8019874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019876:	4b46      	ldr	r3, [pc, #280]	; (8019990 <xPortStartScheduler+0x120>)
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	4a46      	ldr	r2, [pc, #280]	; (8019994 <xPortStartScheduler+0x124>)
 801987c:	4293      	cmp	r3, r2
 801987e:	d10a      	bne.n	8019896 <xPortStartScheduler+0x26>
	__asm volatile
 8019880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019884:	f383 8811 	msr	BASEPRI, r3
 8019888:	f3bf 8f6f 	isb	sy
 801988c:	f3bf 8f4f 	dsb	sy
 8019890:	613b      	str	r3, [r7, #16]
}
 8019892:	bf00      	nop
 8019894:	e7fe      	b.n	8019894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8019896:	4b3e      	ldr	r3, [pc, #248]	; (8019990 <xPortStartScheduler+0x120>)
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	4a3f      	ldr	r2, [pc, #252]	; (8019998 <xPortStartScheduler+0x128>)
 801989c:	4293      	cmp	r3, r2
 801989e:	d10a      	bne.n	80198b6 <xPortStartScheduler+0x46>
	__asm volatile
 80198a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198a4:	f383 8811 	msr	BASEPRI, r3
 80198a8:	f3bf 8f6f 	isb	sy
 80198ac:	f3bf 8f4f 	dsb	sy
 80198b0:	60fb      	str	r3, [r7, #12]
}
 80198b2:	bf00      	nop
 80198b4:	e7fe      	b.n	80198b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80198b6:	4b39      	ldr	r3, [pc, #228]	; (801999c <xPortStartScheduler+0x12c>)
 80198b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80198ba:	697b      	ldr	r3, [r7, #20]
 80198bc:	781b      	ldrb	r3, [r3, #0]
 80198be:	b2db      	uxtb	r3, r3
 80198c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80198c2:	697b      	ldr	r3, [r7, #20]
 80198c4:	22ff      	movs	r2, #255	; 0xff
 80198c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80198c8:	697b      	ldr	r3, [r7, #20]
 80198ca:	781b      	ldrb	r3, [r3, #0]
 80198cc:	b2db      	uxtb	r3, r3
 80198ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80198d0:	78fb      	ldrb	r3, [r7, #3]
 80198d2:	b2db      	uxtb	r3, r3
 80198d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80198d8:	b2da      	uxtb	r2, r3
 80198da:	4b31      	ldr	r3, [pc, #196]	; (80199a0 <xPortStartScheduler+0x130>)
 80198dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80198de:	4b31      	ldr	r3, [pc, #196]	; (80199a4 <xPortStartScheduler+0x134>)
 80198e0:	2207      	movs	r2, #7
 80198e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80198e4:	e009      	b.n	80198fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80198e6:	4b2f      	ldr	r3, [pc, #188]	; (80199a4 <xPortStartScheduler+0x134>)
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	3b01      	subs	r3, #1
 80198ec:	4a2d      	ldr	r2, [pc, #180]	; (80199a4 <xPortStartScheduler+0x134>)
 80198ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80198f0:	78fb      	ldrb	r3, [r7, #3]
 80198f2:	b2db      	uxtb	r3, r3
 80198f4:	005b      	lsls	r3, r3, #1
 80198f6:	b2db      	uxtb	r3, r3
 80198f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80198fa:	78fb      	ldrb	r3, [r7, #3]
 80198fc:	b2db      	uxtb	r3, r3
 80198fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019902:	2b80      	cmp	r3, #128	; 0x80
 8019904:	d0ef      	beq.n	80198e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019906:	4b27      	ldr	r3, [pc, #156]	; (80199a4 <xPortStartScheduler+0x134>)
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	f1c3 0307 	rsb	r3, r3, #7
 801990e:	2b04      	cmp	r3, #4
 8019910:	d00a      	beq.n	8019928 <xPortStartScheduler+0xb8>
	__asm volatile
 8019912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019916:	f383 8811 	msr	BASEPRI, r3
 801991a:	f3bf 8f6f 	isb	sy
 801991e:	f3bf 8f4f 	dsb	sy
 8019922:	60bb      	str	r3, [r7, #8]
}
 8019924:	bf00      	nop
 8019926:	e7fe      	b.n	8019926 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8019928:	4b1e      	ldr	r3, [pc, #120]	; (80199a4 <xPortStartScheduler+0x134>)
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	021b      	lsls	r3, r3, #8
 801992e:	4a1d      	ldr	r2, [pc, #116]	; (80199a4 <xPortStartScheduler+0x134>)
 8019930:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019932:	4b1c      	ldr	r3, [pc, #112]	; (80199a4 <xPortStartScheduler+0x134>)
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801993a:	4a1a      	ldr	r2, [pc, #104]	; (80199a4 <xPortStartScheduler+0x134>)
 801993c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	b2da      	uxtb	r2, r3
 8019942:	697b      	ldr	r3, [r7, #20]
 8019944:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019946:	4b18      	ldr	r3, [pc, #96]	; (80199a8 <xPortStartScheduler+0x138>)
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	4a17      	ldr	r2, [pc, #92]	; (80199a8 <xPortStartScheduler+0x138>)
 801994c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019952:	4b15      	ldr	r3, [pc, #84]	; (80199a8 <xPortStartScheduler+0x138>)
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	4a14      	ldr	r2, [pc, #80]	; (80199a8 <xPortStartScheduler+0x138>)
 8019958:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801995c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801995e:	f000 f8dd 	bl	8019b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019962:	4b12      	ldr	r3, [pc, #72]	; (80199ac <xPortStartScheduler+0x13c>)
 8019964:	2200      	movs	r2, #0
 8019966:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8019968:	f000 f8fc 	bl	8019b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801996c:	4b10      	ldr	r3, [pc, #64]	; (80199b0 <xPortStartScheduler+0x140>)
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	4a0f      	ldr	r2, [pc, #60]	; (80199b0 <xPortStartScheduler+0x140>)
 8019972:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019976:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8019978:	f7ff ff66 	bl	8019848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801997c:	f7fe ff6e 	bl	801885c <vTaskSwitchContext>
	prvTaskExitError();
 8019980:	f7ff ff1e 	bl	80197c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019984:	2300      	movs	r3, #0
}
 8019986:	4618      	mov	r0, r3
 8019988:	3718      	adds	r7, #24
 801998a:	46bd      	mov	sp, r7
 801998c:	bd80      	pop	{r7, pc}
 801998e:	bf00      	nop
 8019990:	e000ed00 	.word	0xe000ed00
 8019994:	410fc271 	.word	0x410fc271
 8019998:	410fc270 	.word	0x410fc270
 801999c:	e000e400 	.word	0xe000e400
 80199a0:	24002d44 	.word	0x24002d44
 80199a4:	24002d48 	.word	0x24002d48
 80199a8:	e000ed20 	.word	0xe000ed20
 80199ac:	240000d0 	.word	0x240000d0
 80199b0:	e000ef34 	.word	0xe000ef34

080199b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80199b4:	b480      	push	{r7}
 80199b6:	b083      	sub	sp, #12
 80199b8:	af00      	add	r7, sp, #0
	__asm volatile
 80199ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199be:	f383 8811 	msr	BASEPRI, r3
 80199c2:	f3bf 8f6f 	isb	sy
 80199c6:	f3bf 8f4f 	dsb	sy
 80199ca:	607b      	str	r3, [r7, #4]
}
 80199cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80199ce:	4b0f      	ldr	r3, [pc, #60]	; (8019a0c <vPortEnterCritical+0x58>)
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	3301      	adds	r3, #1
 80199d4:	4a0d      	ldr	r2, [pc, #52]	; (8019a0c <vPortEnterCritical+0x58>)
 80199d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80199d8:	4b0c      	ldr	r3, [pc, #48]	; (8019a0c <vPortEnterCritical+0x58>)
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	2b01      	cmp	r3, #1
 80199de:	d10f      	bne.n	8019a00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80199e0:	4b0b      	ldr	r3, [pc, #44]	; (8019a10 <vPortEnterCritical+0x5c>)
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	b2db      	uxtb	r3, r3
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d00a      	beq.n	8019a00 <vPortEnterCritical+0x4c>
	__asm volatile
 80199ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199ee:	f383 8811 	msr	BASEPRI, r3
 80199f2:	f3bf 8f6f 	isb	sy
 80199f6:	f3bf 8f4f 	dsb	sy
 80199fa:	603b      	str	r3, [r7, #0]
}
 80199fc:	bf00      	nop
 80199fe:	e7fe      	b.n	80199fe <vPortEnterCritical+0x4a>
	}
}
 8019a00:	bf00      	nop
 8019a02:	370c      	adds	r7, #12
 8019a04:	46bd      	mov	sp, r7
 8019a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a0a:	4770      	bx	lr
 8019a0c:	240000d0 	.word	0x240000d0
 8019a10:	e000ed04 	.word	0xe000ed04

08019a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8019a14:	b480      	push	{r7}
 8019a16:	b083      	sub	sp, #12
 8019a18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019a1a:	4b12      	ldr	r3, [pc, #72]	; (8019a64 <vPortExitCritical+0x50>)
 8019a1c:	681b      	ldr	r3, [r3, #0]
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d10a      	bne.n	8019a38 <vPortExitCritical+0x24>
	__asm volatile
 8019a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a26:	f383 8811 	msr	BASEPRI, r3
 8019a2a:	f3bf 8f6f 	isb	sy
 8019a2e:	f3bf 8f4f 	dsb	sy
 8019a32:	607b      	str	r3, [r7, #4]
}
 8019a34:	bf00      	nop
 8019a36:	e7fe      	b.n	8019a36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8019a38:	4b0a      	ldr	r3, [pc, #40]	; (8019a64 <vPortExitCritical+0x50>)
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	3b01      	subs	r3, #1
 8019a3e:	4a09      	ldr	r2, [pc, #36]	; (8019a64 <vPortExitCritical+0x50>)
 8019a40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019a42:	4b08      	ldr	r3, [pc, #32]	; (8019a64 <vPortExitCritical+0x50>)
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	d105      	bne.n	8019a56 <vPortExitCritical+0x42>
 8019a4a:	2300      	movs	r3, #0
 8019a4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019a4e:	683b      	ldr	r3, [r7, #0]
 8019a50:	f383 8811 	msr	BASEPRI, r3
}
 8019a54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019a56:	bf00      	nop
 8019a58:	370c      	adds	r7, #12
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a60:	4770      	bx	lr
 8019a62:	bf00      	nop
 8019a64:	240000d0 	.word	0x240000d0
	...

08019a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019a70:	f3ef 8009 	mrs	r0, PSP
 8019a74:	f3bf 8f6f 	isb	sy
 8019a78:	4b15      	ldr	r3, [pc, #84]	; (8019ad0 <pxCurrentTCBConst>)
 8019a7a:	681a      	ldr	r2, [r3, #0]
 8019a7c:	f01e 0f10 	tst.w	lr, #16
 8019a80:	bf08      	it	eq
 8019a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a8a:	6010      	str	r0, [r2, #0]
 8019a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019a94:	f380 8811 	msr	BASEPRI, r0
 8019a98:	f3bf 8f4f 	dsb	sy
 8019a9c:	f3bf 8f6f 	isb	sy
 8019aa0:	f7fe fedc 	bl	801885c <vTaskSwitchContext>
 8019aa4:	f04f 0000 	mov.w	r0, #0
 8019aa8:	f380 8811 	msr	BASEPRI, r0
 8019aac:	bc09      	pop	{r0, r3}
 8019aae:	6819      	ldr	r1, [r3, #0]
 8019ab0:	6808      	ldr	r0, [r1, #0]
 8019ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ab6:	f01e 0f10 	tst.w	lr, #16
 8019aba:	bf08      	it	eq
 8019abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019ac0:	f380 8809 	msr	PSP, r0
 8019ac4:	f3bf 8f6f 	isb	sy
 8019ac8:	4770      	bx	lr
 8019aca:	bf00      	nop
 8019acc:	f3af 8000 	nop.w

08019ad0 <pxCurrentTCBConst>:
 8019ad0:	24002718 	.word	0x24002718
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019ad4:	bf00      	nop
 8019ad6:	bf00      	nop

08019ad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019ad8:	b580      	push	{r7, lr}
 8019ada:	b082      	sub	sp, #8
 8019adc:	af00      	add	r7, sp, #0
	__asm volatile
 8019ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ae2:	f383 8811 	msr	BASEPRI, r3
 8019ae6:	f3bf 8f6f 	isb	sy
 8019aea:	f3bf 8f4f 	dsb	sy
 8019aee:	607b      	str	r3, [r7, #4]
}
 8019af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019af2:	f7fe fdf1 	bl	80186d8 <xTaskIncrementTick>
 8019af6:	4603      	mov	r3, r0
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d003      	beq.n	8019b04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019afc:	4b06      	ldr	r3, [pc, #24]	; (8019b18 <xPortSysTickHandler+0x40>)
 8019afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019b02:	601a      	str	r2, [r3, #0]
 8019b04:	2300      	movs	r3, #0
 8019b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019b08:	683b      	ldr	r3, [r7, #0]
 8019b0a:	f383 8811 	msr	BASEPRI, r3
}
 8019b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019b10:	bf00      	nop
 8019b12:	3708      	adds	r7, #8
 8019b14:	46bd      	mov	sp, r7
 8019b16:	bd80      	pop	{r7, pc}
 8019b18:	e000ed04 	.word	0xe000ed04

08019b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019b1c:	b480      	push	{r7}
 8019b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019b20:	4b0b      	ldr	r3, [pc, #44]	; (8019b50 <vPortSetupTimerInterrupt+0x34>)
 8019b22:	2200      	movs	r2, #0
 8019b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019b26:	4b0b      	ldr	r3, [pc, #44]	; (8019b54 <vPortSetupTimerInterrupt+0x38>)
 8019b28:	2200      	movs	r2, #0
 8019b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019b2c:	4b0a      	ldr	r3, [pc, #40]	; (8019b58 <vPortSetupTimerInterrupt+0x3c>)
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	4a0a      	ldr	r2, [pc, #40]	; (8019b5c <vPortSetupTimerInterrupt+0x40>)
 8019b32:	fba2 2303 	umull	r2, r3, r2, r3
 8019b36:	099b      	lsrs	r3, r3, #6
 8019b38:	4a09      	ldr	r2, [pc, #36]	; (8019b60 <vPortSetupTimerInterrupt+0x44>)
 8019b3a:	3b01      	subs	r3, #1
 8019b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019b3e:	4b04      	ldr	r3, [pc, #16]	; (8019b50 <vPortSetupTimerInterrupt+0x34>)
 8019b40:	2207      	movs	r2, #7
 8019b42:	601a      	str	r2, [r3, #0]
}
 8019b44:	bf00      	nop
 8019b46:	46bd      	mov	sp, r7
 8019b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b4c:	4770      	bx	lr
 8019b4e:	bf00      	nop
 8019b50:	e000e010 	.word	0xe000e010
 8019b54:	e000e018 	.word	0xe000e018
 8019b58:	240000c0 	.word	0x240000c0
 8019b5c:	10624dd3 	.word	0x10624dd3
 8019b60:	e000e014 	.word	0xe000e014

08019b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019b64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019b74 <vPortEnableVFP+0x10>
 8019b68:	6801      	ldr	r1, [r0, #0]
 8019b6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019b6e:	6001      	str	r1, [r0, #0]
 8019b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019b72:	bf00      	nop
 8019b74:	e000ed88 	.word	0xe000ed88

08019b78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019b78:	b480      	push	{r7}
 8019b7a:	b085      	sub	sp, #20
 8019b7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8019b7e:	f3ef 8305 	mrs	r3, IPSR
 8019b82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	2b0f      	cmp	r3, #15
 8019b88:	d914      	bls.n	8019bb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8019b8a:	4a17      	ldr	r2, [pc, #92]	; (8019be8 <vPortValidateInterruptPriority+0x70>)
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	4413      	add	r3, r2
 8019b90:	781b      	ldrb	r3, [r3, #0]
 8019b92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019b94:	4b15      	ldr	r3, [pc, #84]	; (8019bec <vPortValidateInterruptPriority+0x74>)
 8019b96:	781b      	ldrb	r3, [r3, #0]
 8019b98:	7afa      	ldrb	r2, [r7, #11]
 8019b9a:	429a      	cmp	r2, r3
 8019b9c:	d20a      	bcs.n	8019bb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8019b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ba2:	f383 8811 	msr	BASEPRI, r3
 8019ba6:	f3bf 8f6f 	isb	sy
 8019baa:	f3bf 8f4f 	dsb	sy
 8019bae:	607b      	str	r3, [r7, #4]
}
 8019bb0:	bf00      	nop
 8019bb2:	e7fe      	b.n	8019bb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019bb4:	4b0e      	ldr	r3, [pc, #56]	; (8019bf0 <vPortValidateInterruptPriority+0x78>)
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8019bbc:	4b0d      	ldr	r3, [pc, #52]	; (8019bf4 <vPortValidateInterruptPriority+0x7c>)
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	429a      	cmp	r2, r3
 8019bc2:	d90a      	bls.n	8019bda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bc8:	f383 8811 	msr	BASEPRI, r3
 8019bcc:	f3bf 8f6f 	isb	sy
 8019bd0:	f3bf 8f4f 	dsb	sy
 8019bd4:	603b      	str	r3, [r7, #0]
}
 8019bd6:	bf00      	nop
 8019bd8:	e7fe      	b.n	8019bd8 <vPortValidateInterruptPriority+0x60>
	}
 8019bda:	bf00      	nop
 8019bdc:	3714      	adds	r7, #20
 8019bde:	46bd      	mov	sp, r7
 8019be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be4:	4770      	bx	lr
 8019be6:	bf00      	nop
 8019be8:	e000e3f0 	.word	0xe000e3f0
 8019bec:	24002d44 	.word	0x24002d44
 8019bf0:	e000ed0c 	.word	0xe000ed0c
 8019bf4:	24002d48 	.word	0x24002d48

08019bf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019bf8:	b580      	push	{r7, lr}
 8019bfa:	b08a      	sub	sp, #40	; 0x28
 8019bfc:	af00      	add	r7, sp, #0
 8019bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019c00:	2300      	movs	r3, #0
 8019c02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019c04:	f7fe fcac 	bl	8018560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019c08:	4b5b      	ldr	r3, [pc, #364]	; (8019d78 <pvPortMalloc+0x180>)
 8019c0a:	681b      	ldr	r3, [r3, #0]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d101      	bne.n	8019c14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019c10:	f000 f920 	bl	8019e54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019c14:	4b59      	ldr	r3, [pc, #356]	; (8019d7c <pvPortMalloc+0x184>)
 8019c16:	681a      	ldr	r2, [r3, #0]
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	4013      	ands	r3, r2
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	f040 8093 	bne.w	8019d48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d01d      	beq.n	8019c64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019c28:	2208      	movs	r2, #8
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	4413      	add	r3, r2
 8019c2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	f003 0307 	and.w	r3, r3, #7
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d014      	beq.n	8019c64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	f023 0307 	bic.w	r3, r3, #7
 8019c40:	3308      	adds	r3, #8
 8019c42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019c44:	687b      	ldr	r3, [r7, #4]
 8019c46:	f003 0307 	and.w	r3, r3, #7
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d00a      	beq.n	8019c64 <pvPortMalloc+0x6c>
	__asm volatile
 8019c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c52:	f383 8811 	msr	BASEPRI, r3
 8019c56:	f3bf 8f6f 	isb	sy
 8019c5a:	f3bf 8f4f 	dsb	sy
 8019c5e:	617b      	str	r3, [r7, #20]
}
 8019c60:	bf00      	nop
 8019c62:	e7fe      	b.n	8019c62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d06e      	beq.n	8019d48 <pvPortMalloc+0x150>
 8019c6a:	4b45      	ldr	r3, [pc, #276]	; (8019d80 <pvPortMalloc+0x188>)
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	687a      	ldr	r2, [r7, #4]
 8019c70:	429a      	cmp	r2, r3
 8019c72:	d869      	bhi.n	8019d48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019c74:	4b43      	ldr	r3, [pc, #268]	; (8019d84 <pvPortMalloc+0x18c>)
 8019c76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019c78:	4b42      	ldr	r3, [pc, #264]	; (8019d84 <pvPortMalloc+0x18c>)
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019c7e:	e004      	b.n	8019c8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c8c:	685b      	ldr	r3, [r3, #4]
 8019c8e:	687a      	ldr	r2, [r7, #4]
 8019c90:	429a      	cmp	r2, r3
 8019c92:	d903      	bls.n	8019c9c <pvPortMalloc+0xa4>
 8019c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d1f1      	bne.n	8019c80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019c9c:	4b36      	ldr	r3, [pc, #216]	; (8019d78 <pvPortMalloc+0x180>)
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ca2:	429a      	cmp	r2, r3
 8019ca4:	d050      	beq.n	8019d48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019ca6:	6a3b      	ldr	r3, [r7, #32]
 8019ca8:	681b      	ldr	r3, [r3, #0]
 8019caa:	2208      	movs	r2, #8
 8019cac:	4413      	add	r3, r2
 8019cae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cb2:	681a      	ldr	r2, [r3, #0]
 8019cb4:	6a3b      	ldr	r3, [r7, #32]
 8019cb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cba:	685a      	ldr	r2, [r3, #4]
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	1ad2      	subs	r2, r2, r3
 8019cc0:	2308      	movs	r3, #8
 8019cc2:	005b      	lsls	r3, r3, #1
 8019cc4:	429a      	cmp	r2, r3
 8019cc6:	d91f      	bls.n	8019d08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	4413      	add	r3, r2
 8019cce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019cd0:	69bb      	ldr	r3, [r7, #24]
 8019cd2:	f003 0307 	and.w	r3, r3, #7
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d00a      	beq.n	8019cf0 <pvPortMalloc+0xf8>
	__asm volatile
 8019cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019cde:	f383 8811 	msr	BASEPRI, r3
 8019ce2:	f3bf 8f6f 	isb	sy
 8019ce6:	f3bf 8f4f 	dsb	sy
 8019cea:	613b      	str	r3, [r7, #16]
}
 8019cec:	bf00      	nop
 8019cee:	e7fe      	b.n	8019cee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cf2:	685a      	ldr	r2, [r3, #4]
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	1ad2      	subs	r2, r2, r3
 8019cf8:	69bb      	ldr	r3, [r7, #24]
 8019cfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cfe:	687a      	ldr	r2, [r7, #4]
 8019d00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019d02:	69b8      	ldr	r0, [r7, #24]
 8019d04:	f000 f908 	bl	8019f18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019d08:	4b1d      	ldr	r3, [pc, #116]	; (8019d80 <pvPortMalloc+0x188>)
 8019d0a:	681a      	ldr	r2, [r3, #0]
 8019d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d0e:	685b      	ldr	r3, [r3, #4]
 8019d10:	1ad3      	subs	r3, r2, r3
 8019d12:	4a1b      	ldr	r2, [pc, #108]	; (8019d80 <pvPortMalloc+0x188>)
 8019d14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019d16:	4b1a      	ldr	r3, [pc, #104]	; (8019d80 <pvPortMalloc+0x188>)
 8019d18:	681a      	ldr	r2, [r3, #0]
 8019d1a:	4b1b      	ldr	r3, [pc, #108]	; (8019d88 <pvPortMalloc+0x190>)
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	429a      	cmp	r2, r3
 8019d20:	d203      	bcs.n	8019d2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019d22:	4b17      	ldr	r3, [pc, #92]	; (8019d80 <pvPortMalloc+0x188>)
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	4a18      	ldr	r2, [pc, #96]	; (8019d88 <pvPortMalloc+0x190>)
 8019d28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d2c:	685a      	ldr	r2, [r3, #4]
 8019d2e:	4b13      	ldr	r3, [pc, #76]	; (8019d7c <pvPortMalloc+0x184>)
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	431a      	orrs	r2, r3
 8019d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d3a:	2200      	movs	r2, #0
 8019d3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8019d3e:	4b13      	ldr	r3, [pc, #76]	; (8019d8c <pvPortMalloc+0x194>)
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	3301      	adds	r3, #1
 8019d44:	4a11      	ldr	r2, [pc, #68]	; (8019d8c <pvPortMalloc+0x194>)
 8019d46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019d48:	f7fe fc18 	bl	801857c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019d4c:	69fb      	ldr	r3, [r7, #28]
 8019d4e:	f003 0307 	and.w	r3, r3, #7
 8019d52:	2b00      	cmp	r3, #0
 8019d54:	d00a      	beq.n	8019d6c <pvPortMalloc+0x174>
	__asm volatile
 8019d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d5a:	f383 8811 	msr	BASEPRI, r3
 8019d5e:	f3bf 8f6f 	isb	sy
 8019d62:	f3bf 8f4f 	dsb	sy
 8019d66:	60fb      	str	r3, [r7, #12]
}
 8019d68:	bf00      	nop
 8019d6a:	e7fe      	b.n	8019d6a <pvPortMalloc+0x172>
	return pvReturn;
 8019d6c:	69fb      	ldr	r3, [r7, #28]
}
 8019d6e:	4618      	mov	r0, r3
 8019d70:	3728      	adds	r7, #40	; 0x28
 8019d72:	46bd      	mov	sp, r7
 8019d74:	bd80      	pop	{r7, pc}
 8019d76:	bf00      	nop
 8019d78:	24006954 	.word	0x24006954
 8019d7c:	24006968 	.word	0x24006968
 8019d80:	24006958 	.word	0x24006958
 8019d84:	2400694c 	.word	0x2400694c
 8019d88:	2400695c 	.word	0x2400695c
 8019d8c:	24006960 	.word	0x24006960

08019d90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b086      	sub	sp, #24
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d04d      	beq.n	8019e3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019da2:	2308      	movs	r3, #8
 8019da4:	425b      	negs	r3, r3
 8019da6:	697a      	ldr	r2, [r7, #20]
 8019da8:	4413      	add	r3, r2
 8019daa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019dac:	697b      	ldr	r3, [r7, #20]
 8019dae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019db0:	693b      	ldr	r3, [r7, #16]
 8019db2:	685a      	ldr	r2, [r3, #4]
 8019db4:	4b24      	ldr	r3, [pc, #144]	; (8019e48 <vPortFree+0xb8>)
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	4013      	ands	r3, r2
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d10a      	bne.n	8019dd4 <vPortFree+0x44>
	__asm volatile
 8019dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019dc2:	f383 8811 	msr	BASEPRI, r3
 8019dc6:	f3bf 8f6f 	isb	sy
 8019dca:	f3bf 8f4f 	dsb	sy
 8019dce:	60fb      	str	r3, [r7, #12]
}
 8019dd0:	bf00      	nop
 8019dd2:	e7fe      	b.n	8019dd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019dd4:	693b      	ldr	r3, [r7, #16]
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d00a      	beq.n	8019df2 <vPortFree+0x62>
	__asm volatile
 8019ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019de0:	f383 8811 	msr	BASEPRI, r3
 8019de4:	f3bf 8f6f 	isb	sy
 8019de8:	f3bf 8f4f 	dsb	sy
 8019dec:	60bb      	str	r3, [r7, #8]
}
 8019dee:	bf00      	nop
 8019df0:	e7fe      	b.n	8019df0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019df2:	693b      	ldr	r3, [r7, #16]
 8019df4:	685a      	ldr	r2, [r3, #4]
 8019df6:	4b14      	ldr	r3, [pc, #80]	; (8019e48 <vPortFree+0xb8>)
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	4013      	ands	r3, r2
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d01e      	beq.n	8019e3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019e00:	693b      	ldr	r3, [r7, #16]
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d11a      	bne.n	8019e3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019e08:	693b      	ldr	r3, [r7, #16]
 8019e0a:	685a      	ldr	r2, [r3, #4]
 8019e0c:	4b0e      	ldr	r3, [pc, #56]	; (8019e48 <vPortFree+0xb8>)
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	43db      	mvns	r3, r3
 8019e12:	401a      	ands	r2, r3
 8019e14:	693b      	ldr	r3, [r7, #16]
 8019e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019e18:	f7fe fba2 	bl	8018560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019e1c:	693b      	ldr	r3, [r7, #16]
 8019e1e:	685a      	ldr	r2, [r3, #4]
 8019e20:	4b0a      	ldr	r3, [pc, #40]	; (8019e4c <vPortFree+0xbc>)
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	4413      	add	r3, r2
 8019e26:	4a09      	ldr	r2, [pc, #36]	; (8019e4c <vPortFree+0xbc>)
 8019e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019e2a:	6938      	ldr	r0, [r7, #16]
 8019e2c:	f000 f874 	bl	8019f18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019e30:	4b07      	ldr	r3, [pc, #28]	; (8019e50 <vPortFree+0xc0>)
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	3301      	adds	r3, #1
 8019e36:	4a06      	ldr	r2, [pc, #24]	; (8019e50 <vPortFree+0xc0>)
 8019e38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019e3a:	f7fe fb9f 	bl	801857c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019e3e:	bf00      	nop
 8019e40:	3718      	adds	r7, #24
 8019e42:	46bd      	mov	sp, r7
 8019e44:	bd80      	pop	{r7, pc}
 8019e46:	bf00      	nop
 8019e48:	24006968 	.word	0x24006968
 8019e4c:	24006958 	.word	0x24006958
 8019e50:	24006964 	.word	0x24006964

08019e54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019e54:	b480      	push	{r7}
 8019e56:	b085      	sub	sp, #20
 8019e58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019e5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8019e5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019e60:	4b27      	ldr	r3, [pc, #156]	; (8019f00 <prvHeapInit+0xac>)
 8019e62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	f003 0307 	and.w	r3, r3, #7
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d00c      	beq.n	8019e88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	3307      	adds	r3, #7
 8019e72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	f023 0307 	bic.w	r3, r3, #7
 8019e7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019e7c:	68ba      	ldr	r2, [r7, #8]
 8019e7e:	68fb      	ldr	r3, [r7, #12]
 8019e80:	1ad3      	subs	r3, r2, r3
 8019e82:	4a1f      	ldr	r2, [pc, #124]	; (8019f00 <prvHeapInit+0xac>)
 8019e84:	4413      	add	r3, r2
 8019e86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019e8c:	4a1d      	ldr	r2, [pc, #116]	; (8019f04 <prvHeapInit+0xb0>)
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019e92:	4b1c      	ldr	r3, [pc, #112]	; (8019f04 <prvHeapInit+0xb0>)
 8019e94:	2200      	movs	r2, #0
 8019e96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	68ba      	ldr	r2, [r7, #8]
 8019e9c:	4413      	add	r3, r2
 8019e9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019ea0:	2208      	movs	r2, #8
 8019ea2:	68fb      	ldr	r3, [r7, #12]
 8019ea4:	1a9b      	subs	r3, r3, r2
 8019ea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	f023 0307 	bic.w	r3, r3, #7
 8019eae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	4a15      	ldr	r2, [pc, #84]	; (8019f08 <prvHeapInit+0xb4>)
 8019eb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019eb6:	4b14      	ldr	r3, [pc, #80]	; (8019f08 <prvHeapInit+0xb4>)
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	2200      	movs	r2, #0
 8019ebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019ebe:	4b12      	ldr	r3, [pc, #72]	; (8019f08 <prvHeapInit+0xb4>)
 8019ec0:	681b      	ldr	r3, [r3, #0]
 8019ec2:	2200      	movs	r2, #0
 8019ec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019eca:	683b      	ldr	r3, [r7, #0]
 8019ecc:	68fa      	ldr	r2, [r7, #12]
 8019ece:	1ad2      	subs	r2, r2, r3
 8019ed0:	683b      	ldr	r3, [r7, #0]
 8019ed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019ed4:	4b0c      	ldr	r3, [pc, #48]	; (8019f08 <prvHeapInit+0xb4>)
 8019ed6:	681a      	ldr	r2, [r3, #0]
 8019ed8:	683b      	ldr	r3, [r7, #0]
 8019eda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019edc:	683b      	ldr	r3, [r7, #0]
 8019ede:	685b      	ldr	r3, [r3, #4]
 8019ee0:	4a0a      	ldr	r2, [pc, #40]	; (8019f0c <prvHeapInit+0xb8>)
 8019ee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019ee4:	683b      	ldr	r3, [r7, #0]
 8019ee6:	685b      	ldr	r3, [r3, #4]
 8019ee8:	4a09      	ldr	r2, [pc, #36]	; (8019f10 <prvHeapInit+0xbc>)
 8019eea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019eec:	4b09      	ldr	r3, [pc, #36]	; (8019f14 <prvHeapInit+0xc0>)
 8019eee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019ef2:	601a      	str	r2, [r3, #0]
}
 8019ef4:	bf00      	nop
 8019ef6:	3714      	adds	r7, #20
 8019ef8:	46bd      	mov	sp, r7
 8019efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019efe:	4770      	bx	lr
 8019f00:	24002d4c 	.word	0x24002d4c
 8019f04:	2400694c 	.word	0x2400694c
 8019f08:	24006954 	.word	0x24006954
 8019f0c:	2400695c 	.word	0x2400695c
 8019f10:	24006958 	.word	0x24006958
 8019f14:	24006968 	.word	0x24006968

08019f18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019f18:	b480      	push	{r7}
 8019f1a:	b085      	sub	sp, #20
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019f20:	4b28      	ldr	r3, [pc, #160]	; (8019fc4 <prvInsertBlockIntoFreeList+0xac>)
 8019f22:	60fb      	str	r3, [r7, #12]
 8019f24:	e002      	b.n	8019f2c <prvInsertBlockIntoFreeList+0x14>
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	60fb      	str	r3, [r7, #12]
 8019f2c:	68fb      	ldr	r3, [r7, #12]
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	687a      	ldr	r2, [r7, #4]
 8019f32:	429a      	cmp	r2, r3
 8019f34:	d8f7      	bhi.n	8019f26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019f36:	68fb      	ldr	r3, [r7, #12]
 8019f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	685b      	ldr	r3, [r3, #4]
 8019f3e:	68ba      	ldr	r2, [r7, #8]
 8019f40:	4413      	add	r3, r2
 8019f42:	687a      	ldr	r2, [r7, #4]
 8019f44:	429a      	cmp	r2, r3
 8019f46:	d108      	bne.n	8019f5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	685a      	ldr	r2, [r3, #4]
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	685b      	ldr	r3, [r3, #4]
 8019f50:	441a      	add	r2, r3
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	685b      	ldr	r3, [r3, #4]
 8019f62:	68ba      	ldr	r2, [r7, #8]
 8019f64:	441a      	add	r2, r3
 8019f66:	68fb      	ldr	r3, [r7, #12]
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	429a      	cmp	r2, r3
 8019f6c:	d118      	bne.n	8019fa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	681a      	ldr	r2, [r3, #0]
 8019f72:	4b15      	ldr	r3, [pc, #84]	; (8019fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	429a      	cmp	r2, r3
 8019f78:	d00d      	beq.n	8019f96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	685a      	ldr	r2, [r3, #4]
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	685b      	ldr	r3, [r3, #4]
 8019f84:	441a      	add	r2, r3
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	681a      	ldr	r2, [r3, #0]
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	601a      	str	r2, [r3, #0]
 8019f94:	e008      	b.n	8019fa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019f96:	4b0c      	ldr	r3, [pc, #48]	; (8019fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8019f98:	681a      	ldr	r2, [r3, #0]
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	601a      	str	r2, [r3, #0]
 8019f9e:	e003      	b.n	8019fa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	681a      	ldr	r2, [r3, #0]
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019fa8:	68fa      	ldr	r2, [r7, #12]
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	429a      	cmp	r2, r3
 8019fae:	d002      	beq.n	8019fb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	687a      	ldr	r2, [r7, #4]
 8019fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019fb6:	bf00      	nop
 8019fb8:	3714      	adds	r7, #20
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fc0:	4770      	bx	lr
 8019fc2:	bf00      	nop
 8019fc4:	2400694c 	.word	0x2400694c
 8019fc8:	24006954 	.word	0x24006954

08019fcc <__errno>:
 8019fcc:	4b01      	ldr	r3, [pc, #4]	; (8019fd4 <__errno+0x8>)
 8019fce:	6818      	ldr	r0, [r3, #0]
 8019fd0:	4770      	bx	lr
 8019fd2:	bf00      	nop
 8019fd4:	240000d4 	.word	0x240000d4

08019fd8 <__libc_init_array>:
 8019fd8:	b570      	push	{r4, r5, r6, lr}
 8019fda:	4d0d      	ldr	r5, [pc, #52]	; (801a010 <__libc_init_array+0x38>)
 8019fdc:	4c0d      	ldr	r4, [pc, #52]	; (801a014 <__libc_init_array+0x3c>)
 8019fde:	1b64      	subs	r4, r4, r5
 8019fe0:	10a4      	asrs	r4, r4, #2
 8019fe2:	2600      	movs	r6, #0
 8019fe4:	42a6      	cmp	r6, r4
 8019fe6:	d109      	bne.n	8019ffc <__libc_init_array+0x24>
 8019fe8:	4d0b      	ldr	r5, [pc, #44]	; (801a018 <__libc_init_array+0x40>)
 8019fea:	4c0c      	ldr	r4, [pc, #48]	; (801a01c <__libc_init_array+0x44>)
 8019fec:	f000 fd2c 	bl	801aa48 <_init>
 8019ff0:	1b64      	subs	r4, r4, r5
 8019ff2:	10a4      	asrs	r4, r4, #2
 8019ff4:	2600      	movs	r6, #0
 8019ff6:	42a6      	cmp	r6, r4
 8019ff8:	d105      	bne.n	801a006 <__libc_init_array+0x2e>
 8019ffa:	bd70      	pop	{r4, r5, r6, pc}
 8019ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a000:	4798      	blx	r3
 801a002:	3601      	adds	r6, #1
 801a004:	e7ee      	b.n	8019fe4 <__libc_init_array+0xc>
 801a006:	f855 3b04 	ldr.w	r3, [r5], #4
 801a00a:	4798      	blx	r3
 801a00c:	3601      	adds	r6, #1
 801a00e:	e7f2      	b.n	8019ff6 <__libc_init_array+0x1e>
 801a010:	0801af00 	.word	0x0801af00
 801a014:	0801af00 	.word	0x0801af00
 801a018:	0801af00 	.word	0x0801af00
 801a01c:	0801af04 	.word	0x0801af04

0801a020 <memcpy>:
 801a020:	440a      	add	r2, r1
 801a022:	4291      	cmp	r1, r2
 801a024:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a028:	d100      	bne.n	801a02c <memcpy+0xc>
 801a02a:	4770      	bx	lr
 801a02c:	b510      	push	{r4, lr}
 801a02e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a032:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a036:	4291      	cmp	r1, r2
 801a038:	d1f9      	bne.n	801a02e <memcpy+0xe>
 801a03a:	bd10      	pop	{r4, pc}

0801a03c <memset>:
 801a03c:	4402      	add	r2, r0
 801a03e:	4603      	mov	r3, r0
 801a040:	4293      	cmp	r3, r2
 801a042:	d100      	bne.n	801a046 <memset+0xa>
 801a044:	4770      	bx	lr
 801a046:	f803 1b01 	strb.w	r1, [r3], #1
 801a04a:	e7f9      	b.n	801a040 <memset+0x4>

0801a04c <_puts_r>:
 801a04c:	b570      	push	{r4, r5, r6, lr}
 801a04e:	460e      	mov	r6, r1
 801a050:	4605      	mov	r5, r0
 801a052:	b118      	cbz	r0, 801a05c <_puts_r+0x10>
 801a054:	6983      	ldr	r3, [r0, #24]
 801a056:	b90b      	cbnz	r3, 801a05c <_puts_r+0x10>
 801a058:	f000 fa48 	bl	801a4ec <__sinit>
 801a05c:	69ab      	ldr	r3, [r5, #24]
 801a05e:	68ac      	ldr	r4, [r5, #8]
 801a060:	b913      	cbnz	r3, 801a068 <_puts_r+0x1c>
 801a062:	4628      	mov	r0, r5
 801a064:	f000 fa42 	bl	801a4ec <__sinit>
 801a068:	4b2c      	ldr	r3, [pc, #176]	; (801a11c <_puts_r+0xd0>)
 801a06a:	429c      	cmp	r4, r3
 801a06c:	d120      	bne.n	801a0b0 <_puts_r+0x64>
 801a06e:	686c      	ldr	r4, [r5, #4]
 801a070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a072:	07db      	lsls	r3, r3, #31
 801a074:	d405      	bmi.n	801a082 <_puts_r+0x36>
 801a076:	89a3      	ldrh	r3, [r4, #12]
 801a078:	0598      	lsls	r0, r3, #22
 801a07a:	d402      	bmi.n	801a082 <_puts_r+0x36>
 801a07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a07e:	f000 fad3 	bl	801a628 <__retarget_lock_acquire_recursive>
 801a082:	89a3      	ldrh	r3, [r4, #12]
 801a084:	0719      	lsls	r1, r3, #28
 801a086:	d51d      	bpl.n	801a0c4 <_puts_r+0x78>
 801a088:	6923      	ldr	r3, [r4, #16]
 801a08a:	b1db      	cbz	r3, 801a0c4 <_puts_r+0x78>
 801a08c:	3e01      	subs	r6, #1
 801a08e:	68a3      	ldr	r3, [r4, #8]
 801a090:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a094:	3b01      	subs	r3, #1
 801a096:	60a3      	str	r3, [r4, #8]
 801a098:	bb39      	cbnz	r1, 801a0ea <_puts_r+0x9e>
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	da38      	bge.n	801a110 <_puts_r+0xc4>
 801a09e:	4622      	mov	r2, r4
 801a0a0:	210a      	movs	r1, #10
 801a0a2:	4628      	mov	r0, r5
 801a0a4:	f000 f848 	bl	801a138 <__swbuf_r>
 801a0a8:	3001      	adds	r0, #1
 801a0aa:	d011      	beq.n	801a0d0 <_puts_r+0x84>
 801a0ac:	250a      	movs	r5, #10
 801a0ae:	e011      	b.n	801a0d4 <_puts_r+0x88>
 801a0b0:	4b1b      	ldr	r3, [pc, #108]	; (801a120 <_puts_r+0xd4>)
 801a0b2:	429c      	cmp	r4, r3
 801a0b4:	d101      	bne.n	801a0ba <_puts_r+0x6e>
 801a0b6:	68ac      	ldr	r4, [r5, #8]
 801a0b8:	e7da      	b.n	801a070 <_puts_r+0x24>
 801a0ba:	4b1a      	ldr	r3, [pc, #104]	; (801a124 <_puts_r+0xd8>)
 801a0bc:	429c      	cmp	r4, r3
 801a0be:	bf08      	it	eq
 801a0c0:	68ec      	ldreq	r4, [r5, #12]
 801a0c2:	e7d5      	b.n	801a070 <_puts_r+0x24>
 801a0c4:	4621      	mov	r1, r4
 801a0c6:	4628      	mov	r0, r5
 801a0c8:	f000 f888 	bl	801a1dc <__swsetup_r>
 801a0cc:	2800      	cmp	r0, #0
 801a0ce:	d0dd      	beq.n	801a08c <_puts_r+0x40>
 801a0d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a0d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a0d6:	07da      	lsls	r2, r3, #31
 801a0d8:	d405      	bmi.n	801a0e6 <_puts_r+0x9a>
 801a0da:	89a3      	ldrh	r3, [r4, #12]
 801a0dc:	059b      	lsls	r3, r3, #22
 801a0de:	d402      	bmi.n	801a0e6 <_puts_r+0x9a>
 801a0e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0e2:	f000 faa2 	bl	801a62a <__retarget_lock_release_recursive>
 801a0e6:	4628      	mov	r0, r5
 801a0e8:	bd70      	pop	{r4, r5, r6, pc}
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	da04      	bge.n	801a0f8 <_puts_r+0xac>
 801a0ee:	69a2      	ldr	r2, [r4, #24]
 801a0f0:	429a      	cmp	r2, r3
 801a0f2:	dc06      	bgt.n	801a102 <_puts_r+0xb6>
 801a0f4:	290a      	cmp	r1, #10
 801a0f6:	d004      	beq.n	801a102 <_puts_r+0xb6>
 801a0f8:	6823      	ldr	r3, [r4, #0]
 801a0fa:	1c5a      	adds	r2, r3, #1
 801a0fc:	6022      	str	r2, [r4, #0]
 801a0fe:	7019      	strb	r1, [r3, #0]
 801a100:	e7c5      	b.n	801a08e <_puts_r+0x42>
 801a102:	4622      	mov	r2, r4
 801a104:	4628      	mov	r0, r5
 801a106:	f000 f817 	bl	801a138 <__swbuf_r>
 801a10a:	3001      	adds	r0, #1
 801a10c:	d1bf      	bne.n	801a08e <_puts_r+0x42>
 801a10e:	e7df      	b.n	801a0d0 <_puts_r+0x84>
 801a110:	6823      	ldr	r3, [r4, #0]
 801a112:	250a      	movs	r5, #10
 801a114:	1c5a      	adds	r2, r3, #1
 801a116:	6022      	str	r2, [r4, #0]
 801a118:	701d      	strb	r5, [r3, #0]
 801a11a:	e7db      	b.n	801a0d4 <_puts_r+0x88>
 801a11c:	0801aeb8 	.word	0x0801aeb8
 801a120:	0801aed8 	.word	0x0801aed8
 801a124:	0801ae98 	.word	0x0801ae98

0801a128 <puts>:
 801a128:	4b02      	ldr	r3, [pc, #8]	; (801a134 <puts+0xc>)
 801a12a:	4601      	mov	r1, r0
 801a12c:	6818      	ldr	r0, [r3, #0]
 801a12e:	f7ff bf8d 	b.w	801a04c <_puts_r>
 801a132:	bf00      	nop
 801a134:	240000d4 	.word	0x240000d4

0801a138 <__swbuf_r>:
 801a138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a13a:	460e      	mov	r6, r1
 801a13c:	4614      	mov	r4, r2
 801a13e:	4605      	mov	r5, r0
 801a140:	b118      	cbz	r0, 801a14a <__swbuf_r+0x12>
 801a142:	6983      	ldr	r3, [r0, #24]
 801a144:	b90b      	cbnz	r3, 801a14a <__swbuf_r+0x12>
 801a146:	f000 f9d1 	bl	801a4ec <__sinit>
 801a14a:	4b21      	ldr	r3, [pc, #132]	; (801a1d0 <__swbuf_r+0x98>)
 801a14c:	429c      	cmp	r4, r3
 801a14e:	d12b      	bne.n	801a1a8 <__swbuf_r+0x70>
 801a150:	686c      	ldr	r4, [r5, #4]
 801a152:	69a3      	ldr	r3, [r4, #24]
 801a154:	60a3      	str	r3, [r4, #8]
 801a156:	89a3      	ldrh	r3, [r4, #12]
 801a158:	071a      	lsls	r2, r3, #28
 801a15a:	d52f      	bpl.n	801a1bc <__swbuf_r+0x84>
 801a15c:	6923      	ldr	r3, [r4, #16]
 801a15e:	b36b      	cbz	r3, 801a1bc <__swbuf_r+0x84>
 801a160:	6923      	ldr	r3, [r4, #16]
 801a162:	6820      	ldr	r0, [r4, #0]
 801a164:	1ac0      	subs	r0, r0, r3
 801a166:	6963      	ldr	r3, [r4, #20]
 801a168:	b2f6      	uxtb	r6, r6
 801a16a:	4283      	cmp	r3, r0
 801a16c:	4637      	mov	r7, r6
 801a16e:	dc04      	bgt.n	801a17a <__swbuf_r+0x42>
 801a170:	4621      	mov	r1, r4
 801a172:	4628      	mov	r0, r5
 801a174:	f000 f926 	bl	801a3c4 <_fflush_r>
 801a178:	bb30      	cbnz	r0, 801a1c8 <__swbuf_r+0x90>
 801a17a:	68a3      	ldr	r3, [r4, #8]
 801a17c:	3b01      	subs	r3, #1
 801a17e:	60a3      	str	r3, [r4, #8]
 801a180:	6823      	ldr	r3, [r4, #0]
 801a182:	1c5a      	adds	r2, r3, #1
 801a184:	6022      	str	r2, [r4, #0]
 801a186:	701e      	strb	r6, [r3, #0]
 801a188:	6963      	ldr	r3, [r4, #20]
 801a18a:	3001      	adds	r0, #1
 801a18c:	4283      	cmp	r3, r0
 801a18e:	d004      	beq.n	801a19a <__swbuf_r+0x62>
 801a190:	89a3      	ldrh	r3, [r4, #12]
 801a192:	07db      	lsls	r3, r3, #31
 801a194:	d506      	bpl.n	801a1a4 <__swbuf_r+0x6c>
 801a196:	2e0a      	cmp	r6, #10
 801a198:	d104      	bne.n	801a1a4 <__swbuf_r+0x6c>
 801a19a:	4621      	mov	r1, r4
 801a19c:	4628      	mov	r0, r5
 801a19e:	f000 f911 	bl	801a3c4 <_fflush_r>
 801a1a2:	b988      	cbnz	r0, 801a1c8 <__swbuf_r+0x90>
 801a1a4:	4638      	mov	r0, r7
 801a1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a1a8:	4b0a      	ldr	r3, [pc, #40]	; (801a1d4 <__swbuf_r+0x9c>)
 801a1aa:	429c      	cmp	r4, r3
 801a1ac:	d101      	bne.n	801a1b2 <__swbuf_r+0x7a>
 801a1ae:	68ac      	ldr	r4, [r5, #8]
 801a1b0:	e7cf      	b.n	801a152 <__swbuf_r+0x1a>
 801a1b2:	4b09      	ldr	r3, [pc, #36]	; (801a1d8 <__swbuf_r+0xa0>)
 801a1b4:	429c      	cmp	r4, r3
 801a1b6:	bf08      	it	eq
 801a1b8:	68ec      	ldreq	r4, [r5, #12]
 801a1ba:	e7ca      	b.n	801a152 <__swbuf_r+0x1a>
 801a1bc:	4621      	mov	r1, r4
 801a1be:	4628      	mov	r0, r5
 801a1c0:	f000 f80c 	bl	801a1dc <__swsetup_r>
 801a1c4:	2800      	cmp	r0, #0
 801a1c6:	d0cb      	beq.n	801a160 <__swbuf_r+0x28>
 801a1c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a1cc:	e7ea      	b.n	801a1a4 <__swbuf_r+0x6c>
 801a1ce:	bf00      	nop
 801a1d0:	0801aeb8 	.word	0x0801aeb8
 801a1d4:	0801aed8 	.word	0x0801aed8
 801a1d8:	0801ae98 	.word	0x0801ae98

0801a1dc <__swsetup_r>:
 801a1dc:	4b32      	ldr	r3, [pc, #200]	; (801a2a8 <__swsetup_r+0xcc>)
 801a1de:	b570      	push	{r4, r5, r6, lr}
 801a1e0:	681d      	ldr	r5, [r3, #0]
 801a1e2:	4606      	mov	r6, r0
 801a1e4:	460c      	mov	r4, r1
 801a1e6:	b125      	cbz	r5, 801a1f2 <__swsetup_r+0x16>
 801a1e8:	69ab      	ldr	r3, [r5, #24]
 801a1ea:	b913      	cbnz	r3, 801a1f2 <__swsetup_r+0x16>
 801a1ec:	4628      	mov	r0, r5
 801a1ee:	f000 f97d 	bl	801a4ec <__sinit>
 801a1f2:	4b2e      	ldr	r3, [pc, #184]	; (801a2ac <__swsetup_r+0xd0>)
 801a1f4:	429c      	cmp	r4, r3
 801a1f6:	d10f      	bne.n	801a218 <__swsetup_r+0x3c>
 801a1f8:	686c      	ldr	r4, [r5, #4]
 801a1fa:	89a3      	ldrh	r3, [r4, #12]
 801a1fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a200:	0719      	lsls	r1, r3, #28
 801a202:	d42c      	bmi.n	801a25e <__swsetup_r+0x82>
 801a204:	06dd      	lsls	r5, r3, #27
 801a206:	d411      	bmi.n	801a22c <__swsetup_r+0x50>
 801a208:	2309      	movs	r3, #9
 801a20a:	6033      	str	r3, [r6, #0]
 801a20c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a210:	81a3      	strh	r3, [r4, #12]
 801a212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a216:	e03e      	b.n	801a296 <__swsetup_r+0xba>
 801a218:	4b25      	ldr	r3, [pc, #148]	; (801a2b0 <__swsetup_r+0xd4>)
 801a21a:	429c      	cmp	r4, r3
 801a21c:	d101      	bne.n	801a222 <__swsetup_r+0x46>
 801a21e:	68ac      	ldr	r4, [r5, #8]
 801a220:	e7eb      	b.n	801a1fa <__swsetup_r+0x1e>
 801a222:	4b24      	ldr	r3, [pc, #144]	; (801a2b4 <__swsetup_r+0xd8>)
 801a224:	429c      	cmp	r4, r3
 801a226:	bf08      	it	eq
 801a228:	68ec      	ldreq	r4, [r5, #12]
 801a22a:	e7e6      	b.n	801a1fa <__swsetup_r+0x1e>
 801a22c:	0758      	lsls	r0, r3, #29
 801a22e:	d512      	bpl.n	801a256 <__swsetup_r+0x7a>
 801a230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a232:	b141      	cbz	r1, 801a246 <__swsetup_r+0x6a>
 801a234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a238:	4299      	cmp	r1, r3
 801a23a:	d002      	beq.n	801a242 <__swsetup_r+0x66>
 801a23c:	4630      	mov	r0, r6
 801a23e:	f000 fa5b 	bl	801a6f8 <_free_r>
 801a242:	2300      	movs	r3, #0
 801a244:	6363      	str	r3, [r4, #52]	; 0x34
 801a246:	89a3      	ldrh	r3, [r4, #12]
 801a248:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a24c:	81a3      	strh	r3, [r4, #12]
 801a24e:	2300      	movs	r3, #0
 801a250:	6063      	str	r3, [r4, #4]
 801a252:	6923      	ldr	r3, [r4, #16]
 801a254:	6023      	str	r3, [r4, #0]
 801a256:	89a3      	ldrh	r3, [r4, #12]
 801a258:	f043 0308 	orr.w	r3, r3, #8
 801a25c:	81a3      	strh	r3, [r4, #12]
 801a25e:	6923      	ldr	r3, [r4, #16]
 801a260:	b94b      	cbnz	r3, 801a276 <__swsetup_r+0x9a>
 801a262:	89a3      	ldrh	r3, [r4, #12]
 801a264:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a26c:	d003      	beq.n	801a276 <__swsetup_r+0x9a>
 801a26e:	4621      	mov	r1, r4
 801a270:	4630      	mov	r0, r6
 801a272:	f000 fa01 	bl	801a678 <__smakebuf_r>
 801a276:	89a0      	ldrh	r0, [r4, #12]
 801a278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a27c:	f010 0301 	ands.w	r3, r0, #1
 801a280:	d00a      	beq.n	801a298 <__swsetup_r+0xbc>
 801a282:	2300      	movs	r3, #0
 801a284:	60a3      	str	r3, [r4, #8]
 801a286:	6963      	ldr	r3, [r4, #20]
 801a288:	425b      	negs	r3, r3
 801a28a:	61a3      	str	r3, [r4, #24]
 801a28c:	6923      	ldr	r3, [r4, #16]
 801a28e:	b943      	cbnz	r3, 801a2a2 <__swsetup_r+0xc6>
 801a290:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a294:	d1ba      	bne.n	801a20c <__swsetup_r+0x30>
 801a296:	bd70      	pop	{r4, r5, r6, pc}
 801a298:	0781      	lsls	r1, r0, #30
 801a29a:	bf58      	it	pl
 801a29c:	6963      	ldrpl	r3, [r4, #20]
 801a29e:	60a3      	str	r3, [r4, #8]
 801a2a0:	e7f4      	b.n	801a28c <__swsetup_r+0xb0>
 801a2a2:	2000      	movs	r0, #0
 801a2a4:	e7f7      	b.n	801a296 <__swsetup_r+0xba>
 801a2a6:	bf00      	nop
 801a2a8:	240000d4 	.word	0x240000d4
 801a2ac:	0801aeb8 	.word	0x0801aeb8
 801a2b0:	0801aed8 	.word	0x0801aed8
 801a2b4:	0801ae98 	.word	0x0801ae98

0801a2b8 <__sflush_r>:
 801a2b8:	898a      	ldrh	r2, [r1, #12]
 801a2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2be:	4605      	mov	r5, r0
 801a2c0:	0710      	lsls	r0, r2, #28
 801a2c2:	460c      	mov	r4, r1
 801a2c4:	d458      	bmi.n	801a378 <__sflush_r+0xc0>
 801a2c6:	684b      	ldr	r3, [r1, #4]
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	dc05      	bgt.n	801a2d8 <__sflush_r+0x20>
 801a2cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	dc02      	bgt.n	801a2d8 <__sflush_r+0x20>
 801a2d2:	2000      	movs	r0, #0
 801a2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a2da:	2e00      	cmp	r6, #0
 801a2dc:	d0f9      	beq.n	801a2d2 <__sflush_r+0x1a>
 801a2de:	2300      	movs	r3, #0
 801a2e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a2e4:	682f      	ldr	r7, [r5, #0]
 801a2e6:	602b      	str	r3, [r5, #0]
 801a2e8:	d032      	beq.n	801a350 <__sflush_r+0x98>
 801a2ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a2ec:	89a3      	ldrh	r3, [r4, #12]
 801a2ee:	075a      	lsls	r2, r3, #29
 801a2f0:	d505      	bpl.n	801a2fe <__sflush_r+0x46>
 801a2f2:	6863      	ldr	r3, [r4, #4]
 801a2f4:	1ac0      	subs	r0, r0, r3
 801a2f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a2f8:	b10b      	cbz	r3, 801a2fe <__sflush_r+0x46>
 801a2fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a2fc:	1ac0      	subs	r0, r0, r3
 801a2fe:	2300      	movs	r3, #0
 801a300:	4602      	mov	r2, r0
 801a302:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a304:	6a21      	ldr	r1, [r4, #32]
 801a306:	4628      	mov	r0, r5
 801a308:	47b0      	blx	r6
 801a30a:	1c43      	adds	r3, r0, #1
 801a30c:	89a3      	ldrh	r3, [r4, #12]
 801a30e:	d106      	bne.n	801a31e <__sflush_r+0x66>
 801a310:	6829      	ldr	r1, [r5, #0]
 801a312:	291d      	cmp	r1, #29
 801a314:	d82c      	bhi.n	801a370 <__sflush_r+0xb8>
 801a316:	4a2a      	ldr	r2, [pc, #168]	; (801a3c0 <__sflush_r+0x108>)
 801a318:	40ca      	lsrs	r2, r1
 801a31a:	07d6      	lsls	r6, r2, #31
 801a31c:	d528      	bpl.n	801a370 <__sflush_r+0xb8>
 801a31e:	2200      	movs	r2, #0
 801a320:	6062      	str	r2, [r4, #4]
 801a322:	04d9      	lsls	r1, r3, #19
 801a324:	6922      	ldr	r2, [r4, #16]
 801a326:	6022      	str	r2, [r4, #0]
 801a328:	d504      	bpl.n	801a334 <__sflush_r+0x7c>
 801a32a:	1c42      	adds	r2, r0, #1
 801a32c:	d101      	bne.n	801a332 <__sflush_r+0x7a>
 801a32e:	682b      	ldr	r3, [r5, #0]
 801a330:	b903      	cbnz	r3, 801a334 <__sflush_r+0x7c>
 801a332:	6560      	str	r0, [r4, #84]	; 0x54
 801a334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a336:	602f      	str	r7, [r5, #0]
 801a338:	2900      	cmp	r1, #0
 801a33a:	d0ca      	beq.n	801a2d2 <__sflush_r+0x1a>
 801a33c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a340:	4299      	cmp	r1, r3
 801a342:	d002      	beq.n	801a34a <__sflush_r+0x92>
 801a344:	4628      	mov	r0, r5
 801a346:	f000 f9d7 	bl	801a6f8 <_free_r>
 801a34a:	2000      	movs	r0, #0
 801a34c:	6360      	str	r0, [r4, #52]	; 0x34
 801a34e:	e7c1      	b.n	801a2d4 <__sflush_r+0x1c>
 801a350:	6a21      	ldr	r1, [r4, #32]
 801a352:	2301      	movs	r3, #1
 801a354:	4628      	mov	r0, r5
 801a356:	47b0      	blx	r6
 801a358:	1c41      	adds	r1, r0, #1
 801a35a:	d1c7      	bne.n	801a2ec <__sflush_r+0x34>
 801a35c:	682b      	ldr	r3, [r5, #0]
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d0c4      	beq.n	801a2ec <__sflush_r+0x34>
 801a362:	2b1d      	cmp	r3, #29
 801a364:	d001      	beq.n	801a36a <__sflush_r+0xb2>
 801a366:	2b16      	cmp	r3, #22
 801a368:	d101      	bne.n	801a36e <__sflush_r+0xb6>
 801a36a:	602f      	str	r7, [r5, #0]
 801a36c:	e7b1      	b.n	801a2d2 <__sflush_r+0x1a>
 801a36e:	89a3      	ldrh	r3, [r4, #12]
 801a370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a374:	81a3      	strh	r3, [r4, #12]
 801a376:	e7ad      	b.n	801a2d4 <__sflush_r+0x1c>
 801a378:	690f      	ldr	r7, [r1, #16]
 801a37a:	2f00      	cmp	r7, #0
 801a37c:	d0a9      	beq.n	801a2d2 <__sflush_r+0x1a>
 801a37e:	0793      	lsls	r3, r2, #30
 801a380:	680e      	ldr	r6, [r1, #0]
 801a382:	bf08      	it	eq
 801a384:	694b      	ldreq	r3, [r1, #20]
 801a386:	600f      	str	r7, [r1, #0]
 801a388:	bf18      	it	ne
 801a38a:	2300      	movne	r3, #0
 801a38c:	eba6 0807 	sub.w	r8, r6, r7
 801a390:	608b      	str	r3, [r1, #8]
 801a392:	f1b8 0f00 	cmp.w	r8, #0
 801a396:	dd9c      	ble.n	801a2d2 <__sflush_r+0x1a>
 801a398:	6a21      	ldr	r1, [r4, #32]
 801a39a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a39c:	4643      	mov	r3, r8
 801a39e:	463a      	mov	r2, r7
 801a3a0:	4628      	mov	r0, r5
 801a3a2:	47b0      	blx	r6
 801a3a4:	2800      	cmp	r0, #0
 801a3a6:	dc06      	bgt.n	801a3b6 <__sflush_r+0xfe>
 801a3a8:	89a3      	ldrh	r3, [r4, #12]
 801a3aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3ae:	81a3      	strh	r3, [r4, #12]
 801a3b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a3b4:	e78e      	b.n	801a2d4 <__sflush_r+0x1c>
 801a3b6:	4407      	add	r7, r0
 801a3b8:	eba8 0800 	sub.w	r8, r8, r0
 801a3bc:	e7e9      	b.n	801a392 <__sflush_r+0xda>
 801a3be:	bf00      	nop
 801a3c0:	20400001 	.word	0x20400001

0801a3c4 <_fflush_r>:
 801a3c4:	b538      	push	{r3, r4, r5, lr}
 801a3c6:	690b      	ldr	r3, [r1, #16]
 801a3c8:	4605      	mov	r5, r0
 801a3ca:	460c      	mov	r4, r1
 801a3cc:	b913      	cbnz	r3, 801a3d4 <_fflush_r+0x10>
 801a3ce:	2500      	movs	r5, #0
 801a3d0:	4628      	mov	r0, r5
 801a3d2:	bd38      	pop	{r3, r4, r5, pc}
 801a3d4:	b118      	cbz	r0, 801a3de <_fflush_r+0x1a>
 801a3d6:	6983      	ldr	r3, [r0, #24]
 801a3d8:	b90b      	cbnz	r3, 801a3de <_fflush_r+0x1a>
 801a3da:	f000 f887 	bl	801a4ec <__sinit>
 801a3de:	4b14      	ldr	r3, [pc, #80]	; (801a430 <_fflush_r+0x6c>)
 801a3e0:	429c      	cmp	r4, r3
 801a3e2:	d11b      	bne.n	801a41c <_fflush_r+0x58>
 801a3e4:	686c      	ldr	r4, [r5, #4]
 801a3e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d0ef      	beq.n	801a3ce <_fflush_r+0xa>
 801a3ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a3f0:	07d0      	lsls	r0, r2, #31
 801a3f2:	d404      	bmi.n	801a3fe <_fflush_r+0x3a>
 801a3f4:	0599      	lsls	r1, r3, #22
 801a3f6:	d402      	bmi.n	801a3fe <_fflush_r+0x3a>
 801a3f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3fa:	f000 f915 	bl	801a628 <__retarget_lock_acquire_recursive>
 801a3fe:	4628      	mov	r0, r5
 801a400:	4621      	mov	r1, r4
 801a402:	f7ff ff59 	bl	801a2b8 <__sflush_r>
 801a406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a408:	07da      	lsls	r2, r3, #31
 801a40a:	4605      	mov	r5, r0
 801a40c:	d4e0      	bmi.n	801a3d0 <_fflush_r+0xc>
 801a40e:	89a3      	ldrh	r3, [r4, #12]
 801a410:	059b      	lsls	r3, r3, #22
 801a412:	d4dd      	bmi.n	801a3d0 <_fflush_r+0xc>
 801a414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a416:	f000 f908 	bl	801a62a <__retarget_lock_release_recursive>
 801a41a:	e7d9      	b.n	801a3d0 <_fflush_r+0xc>
 801a41c:	4b05      	ldr	r3, [pc, #20]	; (801a434 <_fflush_r+0x70>)
 801a41e:	429c      	cmp	r4, r3
 801a420:	d101      	bne.n	801a426 <_fflush_r+0x62>
 801a422:	68ac      	ldr	r4, [r5, #8]
 801a424:	e7df      	b.n	801a3e6 <_fflush_r+0x22>
 801a426:	4b04      	ldr	r3, [pc, #16]	; (801a438 <_fflush_r+0x74>)
 801a428:	429c      	cmp	r4, r3
 801a42a:	bf08      	it	eq
 801a42c:	68ec      	ldreq	r4, [r5, #12]
 801a42e:	e7da      	b.n	801a3e6 <_fflush_r+0x22>
 801a430:	0801aeb8 	.word	0x0801aeb8
 801a434:	0801aed8 	.word	0x0801aed8
 801a438:	0801ae98 	.word	0x0801ae98

0801a43c <std>:
 801a43c:	2300      	movs	r3, #0
 801a43e:	b510      	push	{r4, lr}
 801a440:	4604      	mov	r4, r0
 801a442:	e9c0 3300 	strd	r3, r3, [r0]
 801a446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a44a:	6083      	str	r3, [r0, #8]
 801a44c:	8181      	strh	r1, [r0, #12]
 801a44e:	6643      	str	r3, [r0, #100]	; 0x64
 801a450:	81c2      	strh	r2, [r0, #14]
 801a452:	6183      	str	r3, [r0, #24]
 801a454:	4619      	mov	r1, r3
 801a456:	2208      	movs	r2, #8
 801a458:	305c      	adds	r0, #92	; 0x5c
 801a45a:	f7ff fdef 	bl	801a03c <memset>
 801a45e:	4b05      	ldr	r3, [pc, #20]	; (801a474 <std+0x38>)
 801a460:	6263      	str	r3, [r4, #36]	; 0x24
 801a462:	4b05      	ldr	r3, [pc, #20]	; (801a478 <std+0x3c>)
 801a464:	62a3      	str	r3, [r4, #40]	; 0x28
 801a466:	4b05      	ldr	r3, [pc, #20]	; (801a47c <std+0x40>)
 801a468:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a46a:	4b05      	ldr	r3, [pc, #20]	; (801a480 <std+0x44>)
 801a46c:	6224      	str	r4, [r4, #32]
 801a46e:	6323      	str	r3, [r4, #48]	; 0x30
 801a470:	bd10      	pop	{r4, pc}
 801a472:	bf00      	nop
 801a474:	0801a8d9 	.word	0x0801a8d9
 801a478:	0801a8fb 	.word	0x0801a8fb
 801a47c:	0801a933 	.word	0x0801a933
 801a480:	0801a957 	.word	0x0801a957

0801a484 <_cleanup_r>:
 801a484:	4901      	ldr	r1, [pc, #4]	; (801a48c <_cleanup_r+0x8>)
 801a486:	f000 b8af 	b.w	801a5e8 <_fwalk_reent>
 801a48a:	bf00      	nop
 801a48c:	0801a3c5 	.word	0x0801a3c5

0801a490 <__sfmoreglue>:
 801a490:	b570      	push	{r4, r5, r6, lr}
 801a492:	2268      	movs	r2, #104	; 0x68
 801a494:	1e4d      	subs	r5, r1, #1
 801a496:	4355      	muls	r5, r2
 801a498:	460e      	mov	r6, r1
 801a49a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a49e:	f000 f997 	bl	801a7d0 <_malloc_r>
 801a4a2:	4604      	mov	r4, r0
 801a4a4:	b140      	cbz	r0, 801a4b8 <__sfmoreglue+0x28>
 801a4a6:	2100      	movs	r1, #0
 801a4a8:	e9c0 1600 	strd	r1, r6, [r0]
 801a4ac:	300c      	adds	r0, #12
 801a4ae:	60a0      	str	r0, [r4, #8]
 801a4b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a4b4:	f7ff fdc2 	bl	801a03c <memset>
 801a4b8:	4620      	mov	r0, r4
 801a4ba:	bd70      	pop	{r4, r5, r6, pc}

0801a4bc <__sfp_lock_acquire>:
 801a4bc:	4801      	ldr	r0, [pc, #4]	; (801a4c4 <__sfp_lock_acquire+0x8>)
 801a4be:	f000 b8b3 	b.w	801a628 <__retarget_lock_acquire_recursive>
 801a4c2:	bf00      	nop
 801a4c4:	2400696d 	.word	0x2400696d

0801a4c8 <__sfp_lock_release>:
 801a4c8:	4801      	ldr	r0, [pc, #4]	; (801a4d0 <__sfp_lock_release+0x8>)
 801a4ca:	f000 b8ae 	b.w	801a62a <__retarget_lock_release_recursive>
 801a4ce:	bf00      	nop
 801a4d0:	2400696d 	.word	0x2400696d

0801a4d4 <__sinit_lock_acquire>:
 801a4d4:	4801      	ldr	r0, [pc, #4]	; (801a4dc <__sinit_lock_acquire+0x8>)
 801a4d6:	f000 b8a7 	b.w	801a628 <__retarget_lock_acquire_recursive>
 801a4da:	bf00      	nop
 801a4dc:	2400696e 	.word	0x2400696e

0801a4e0 <__sinit_lock_release>:
 801a4e0:	4801      	ldr	r0, [pc, #4]	; (801a4e8 <__sinit_lock_release+0x8>)
 801a4e2:	f000 b8a2 	b.w	801a62a <__retarget_lock_release_recursive>
 801a4e6:	bf00      	nop
 801a4e8:	2400696e 	.word	0x2400696e

0801a4ec <__sinit>:
 801a4ec:	b510      	push	{r4, lr}
 801a4ee:	4604      	mov	r4, r0
 801a4f0:	f7ff fff0 	bl	801a4d4 <__sinit_lock_acquire>
 801a4f4:	69a3      	ldr	r3, [r4, #24]
 801a4f6:	b11b      	cbz	r3, 801a500 <__sinit+0x14>
 801a4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4fc:	f7ff bff0 	b.w	801a4e0 <__sinit_lock_release>
 801a500:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a504:	6523      	str	r3, [r4, #80]	; 0x50
 801a506:	4b13      	ldr	r3, [pc, #76]	; (801a554 <__sinit+0x68>)
 801a508:	4a13      	ldr	r2, [pc, #76]	; (801a558 <__sinit+0x6c>)
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	62a2      	str	r2, [r4, #40]	; 0x28
 801a50e:	42a3      	cmp	r3, r4
 801a510:	bf04      	itt	eq
 801a512:	2301      	moveq	r3, #1
 801a514:	61a3      	streq	r3, [r4, #24]
 801a516:	4620      	mov	r0, r4
 801a518:	f000 f820 	bl	801a55c <__sfp>
 801a51c:	6060      	str	r0, [r4, #4]
 801a51e:	4620      	mov	r0, r4
 801a520:	f000 f81c 	bl	801a55c <__sfp>
 801a524:	60a0      	str	r0, [r4, #8]
 801a526:	4620      	mov	r0, r4
 801a528:	f000 f818 	bl	801a55c <__sfp>
 801a52c:	2200      	movs	r2, #0
 801a52e:	60e0      	str	r0, [r4, #12]
 801a530:	2104      	movs	r1, #4
 801a532:	6860      	ldr	r0, [r4, #4]
 801a534:	f7ff ff82 	bl	801a43c <std>
 801a538:	68a0      	ldr	r0, [r4, #8]
 801a53a:	2201      	movs	r2, #1
 801a53c:	2109      	movs	r1, #9
 801a53e:	f7ff ff7d 	bl	801a43c <std>
 801a542:	68e0      	ldr	r0, [r4, #12]
 801a544:	2202      	movs	r2, #2
 801a546:	2112      	movs	r1, #18
 801a548:	f7ff ff78 	bl	801a43c <std>
 801a54c:	2301      	movs	r3, #1
 801a54e:	61a3      	str	r3, [r4, #24]
 801a550:	e7d2      	b.n	801a4f8 <__sinit+0xc>
 801a552:	bf00      	nop
 801a554:	0801ae94 	.word	0x0801ae94
 801a558:	0801a485 	.word	0x0801a485

0801a55c <__sfp>:
 801a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a55e:	4607      	mov	r7, r0
 801a560:	f7ff ffac 	bl	801a4bc <__sfp_lock_acquire>
 801a564:	4b1e      	ldr	r3, [pc, #120]	; (801a5e0 <__sfp+0x84>)
 801a566:	681e      	ldr	r6, [r3, #0]
 801a568:	69b3      	ldr	r3, [r6, #24]
 801a56a:	b913      	cbnz	r3, 801a572 <__sfp+0x16>
 801a56c:	4630      	mov	r0, r6
 801a56e:	f7ff ffbd 	bl	801a4ec <__sinit>
 801a572:	3648      	adds	r6, #72	; 0x48
 801a574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a578:	3b01      	subs	r3, #1
 801a57a:	d503      	bpl.n	801a584 <__sfp+0x28>
 801a57c:	6833      	ldr	r3, [r6, #0]
 801a57e:	b30b      	cbz	r3, 801a5c4 <__sfp+0x68>
 801a580:	6836      	ldr	r6, [r6, #0]
 801a582:	e7f7      	b.n	801a574 <__sfp+0x18>
 801a584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a588:	b9d5      	cbnz	r5, 801a5c0 <__sfp+0x64>
 801a58a:	4b16      	ldr	r3, [pc, #88]	; (801a5e4 <__sfp+0x88>)
 801a58c:	60e3      	str	r3, [r4, #12]
 801a58e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a592:	6665      	str	r5, [r4, #100]	; 0x64
 801a594:	f000 f847 	bl	801a626 <__retarget_lock_init_recursive>
 801a598:	f7ff ff96 	bl	801a4c8 <__sfp_lock_release>
 801a59c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a5a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a5a4:	6025      	str	r5, [r4, #0]
 801a5a6:	61a5      	str	r5, [r4, #24]
 801a5a8:	2208      	movs	r2, #8
 801a5aa:	4629      	mov	r1, r5
 801a5ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a5b0:	f7ff fd44 	bl	801a03c <memset>
 801a5b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a5b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a5bc:	4620      	mov	r0, r4
 801a5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5c0:	3468      	adds	r4, #104	; 0x68
 801a5c2:	e7d9      	b.n	801a578 <__sfp+0x1c>
 801a5c4:	2104      	movs	r1, #4
 801a5c6:	4638      	mov	r0, r7
 801a5c8:	f7ff ff62 	bl	801a490 <__sfmoreglue>
 801a5cc:	4604      	mov	r4, r0
 801a5ce:	6030      	str	r0, [r6, #0]
 801a5d0:	2800      	cmp	r0, #0
 801a5d2:	d1d5      	bne.n	801a580 <__sfp+0x24>
 801a5d4:	f7ff ff78 	bl	801a4c8 <__sfp_lock_release>
 801a5d8:	230c      	movs	r3, #12
 801a5da:	603b      	str	r3, [r7, #0]
 801a5dc:	e7ee      	b.n	801a5bc <__sfp+0x60>
 801a5de:	bf00      	nop
 801a5e0:	0801ae94 	.word	0x0801ae94
 801a5e4:	ffff0001 	.word	0xffff0001

0801a5e8 <_fwalk_reent>:
 801a5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5ec:	4606      	mov	r6, r0
 801a5ee:	4688      	mov	r8, r1
 801a5f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a5f4:	2700      	movs	r7, #0
 801a5f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a5fa:	f1b9 0901 	subs.w	r9, r9, #1
 801a5fe:	d505      	bpl.n	801a60c <_fwalk_reent+0x24>
 801a600:	6824      	ldr	r4, [r4, #0]
 801a602:	2c00      	cmp	r4, #0
 801a604:	d1f7      	bne.n	801a5f6 <_fwalk_reent+0xe>
 801a606:	4638      	mov	r0, r7
 801a608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a60c:	89ab      	ldrh	r3, [r5, #12]
 801a60e:	2b01      	cmp	r3, #1
 801a610:	d907      	bls.n	801a622 <_fwalk_reent+0x3a>
 801a612:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a616:	3301      	adds	r3, #1
 801a618:	d003      	beq.n	801a622 <_fwalk_reent+0x3a>
 801a61a:	4629      	mov	r1, r5
 801a61c:	4630      	mov	r0, r6
 801a61e:	47c0      	blx	r8
 801a620:	4307      	orrs	r7, r0
 801a622:	3568      	adds	r5, #104	; 0x68
 801a624:	e7e9      	b.n	801a5fa <_fwalk_reent+0x12>

0801a626 <__retarget_lock_init_recursive>:
 801a626:	4770      	bx	lr

0801a628 <__retarget_lock_acquire_recursive>:
 801a628:	4770      	bx	lr

0801a62a <__retarget_lock_release_recursive>:
 801a62a:	4770      	bx	lr

0801a62c <__swhatbuf_r>:
 801a62c:	b570      	push	{r4, r5, r6, lr}
 801a62e:	460e      	mov	r6, r1
 801a630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a634:	2900      	cmp	r1, #0
 801a636:	b096      	sub	sp, #88	; 0x58
 801a638:	4614      	mov	r4, r2
 801a63a:	461d      	mov	r5, r3
 801a63c:	da08      	bge.n	801a650 <__swhatbuf_r+0x24>
 801a63e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a642:	2200      	movs	r2, #0
 801a644:	602a      	str	r2, [r5, #0]
 801a646:	061a      	lsls	r2, r3, #24
 801a648:	d410      	bmi.n	801a66c <__swhatbuf_r+0x40>
 801a64a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a64e:	e00e      	b.n	801a66e <__swhatbuf_r+0x42>
 801a650:	466a      	mov	r2, sp
 801a652:	f000 f9a7 	bl	801a9a4 <_fstat_r>
 801a656:	2800      	cmp	r0, #0
 801a658:	dbf1      	blt.n	801a63e <__swhatbuf_r+0x12>
 801a65a:	9a01      	ldr	r2, [sp, #4]
 801a65c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a660:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a664:	425a      	negs	r2, r3
 801a666:	415a      	adcs	r2, r3
 801a668:	602a      	str	r2, [r5, #0]
 801a66a:	e7ee      	b.n	801a64a <__swhatbuf_r+0x1e>
 801a66c:	2340      	movs	r3, #64	; 0x40
 801a66e:	2000      	movs	r0, #0
 801a670:	6023      	str	r3, [r4, #0]
 801a672:	b016      	add	sp, #88	; 0x58
 801a674:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a678 <__smakebuf_r>:
 801a678:	898b      	ldrh	r3, [r1, #12]
 801a67a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a67c:	079d      	lsls	r5, r3, #30
 801a67e:	4606      	mov	r6, r0
 801a680:	460c      	mov	r4, r1
 801a682:	d507      	bpl.n	801a694 <__smakebuf_r+0x1c>
 801a684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a688:	6023      	str	r3, [r4, #0]
 801a68a:	6123      	str	r3, [r4, #16]
 801a68c:	2301      	movs	r3, #1
 801a68e:	6163      	str	r3, [r4, #20]
 801a690:	b002      	add	sp, #8
 801a692:	bd70      	pop	{r4, r5, r6, pc}
 801a694:	ab01      	add	r3, sp, #4
 801a696:	466a      	mov	r2, sp
 801a698:	f7ff ffc8 	bl	801a62c <__swhatbuf_r>
 801a69c:	9900      	ldr	r1, [sp, #0]
 801a69e:	4605      	mov	r5, r0
 801a6a0:	4630      	mov	r0, r6
 801a6a2:	f000 f895 	bl	801a7d0 <_malloc_r>
 801a6a6:	b948      	cbnz	r0, 801a6bc <__smakebuf_r+0x44>
 801a6a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a6ac:	059a      	lsls	r2, r3, #22
 801a6ae:	d4ef      	bmi.n	801a690 <__smakebuf_r+0x18>
 801a6b0:	f023 0303 	bic.w	r3, r3, #3
 801a6b4:	f043 0302 	orr.w	r3, r3, #2
 801a6b8:	81a3      	strh	r3, [r4, #12]
 801a6ba:	e7e3      	b.n	801a684 <__smakebuf_r+0xc>
 801a6bc:	4b0d      	ldr	r3, [pc, #52]	; (801a6f4 <__smakebuf_r+0x7c>)
 801a6be:	62b3      	str	r3, [r6, #40]	; 0x28
 801a6c0:	89a3      	ldrh	r3, [r4, #12]
 801a6c2:	6020      	str	r0, [r4, #0]
 801a6c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a6c8:	81a3      	strh	r3, [r4, #12]
 801a6ca:	9b00      	ldr	r3, [sp, #0]
 801a6cc:	6163      	str	r3, [r4, #20]
 801a6ce:	9b01      	ldr	r3, [sp, #4]
 801a6d0:	6120      	str	r0, [r4, #16]
 801a6d2:	b15b      	cbz	r3, 801a6ec <__smakebuf_r+0x74>
 801a6d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a6d8:	4630      	mov	r0, r6
 801a6da:	f000 f975 	bl	801a9c8 <_isatty_r>
 801a6de:	b128      	cbz	r0, 801a6ec <__smakebuf_r+0x74>
 801a6e0:	89a3      	ldrh	r3, [r4, #12]
 801a6e2:	f023 0303 	bic.w	r3, r3, #3
 801a6e6:	f043 0301 	orr.w	r3, r3, #1
 801a6ea:	81a3      	strh	r3, [r4, #12]
 801a6ec:	89a0      	ldrh	r0, [r4, #12]
 801a6ee:	4305      	orrs	r5, r0
 801a6f0:	81a5      	strh	r5, [r4, #12]
 801a6f2:	e7cd      	b.n	801a690 <__smakebuf_r+0x18>
 801a6f4:	0801a485 	.word	0x0801a485

0801a6f8 <_free_r>:
 801a6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a6fa:	2900      	cmp	r1, #0
 801a6fc:	d044      	beq.n	801a788 <_free_r+0x90>
 801a6fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a702:	9001      	str	r0, [sp, #4]
 801a704:	2b00      	cmp	r3, #0
 801a706:	f1a1 0404 	sub.w	r4, r1, #4
 801a70a:	bfb8      	it	lt
 801a70c:	18e4      	addlt	r4, r4, r3
 801a70e:	f000 f97d 	bl	801aa0c <__malloc_lock>
 801a712:	4a1e      	ldr	r2, [pc, #120]	; (801a78c <_free_r+0x94>)
 801a714:	9801      	ldr	r0, [sp, #4]
 801a716:	6813      	ldr	r3, [r2, #0]
 801a718:	b933      	cbnz	r3, 801a728 <_free_r+0x30>
 801a71a:	6063      	str	r3, [r4, #4]
 801a71c:	6014      	str	r4, [r2, #0]
 801a71e:	b003      	add	sp, #12
 801a720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a724:	f000 b978 	b.w	801aa18 <__malloc_unlock>
 801a728:	42a3      	cmp	r3, r4
 801a72a:	d908      	bls.n	801a73e <_free_r+0x46>
 801a72c:	6825      	ldr	r5, [r4, #0]
 801a72e:	1961      	adds	r1, r4, r5
 801a730:	428b      	cmp	r3, r1
 801a732:	bf01      	itttt	eq
 801a734:	6819      	ldreq	r1, [r3, #0]
 801a736:	685b      	ldreq	r3, [r3, #4]
 801a738:	1949      	addeq	r1, r1, r5
 801a73a:	6021      	streq	r1, [r4, #0]
 801a73c:	e7ed      	b.n	801a71a <_free_r+0x22>
 801a73e:	461a      	mov	r2, r3
 801a740:	685b      	ldr	r3, [r3, #4]
 801a742:	b10b      	cbz	r3, 801a748 <_free_r+0x50>
 801a744:	42a3      	cmp	r3, r4
 801a746:	d9fa      	bls.n	801a73e <_free_r+0x46>
 801a748:	6811      	ldr	r1, [r2, #0]
 801a74a:	1855      	adds	r5, r2, r1
 801a74c:	42a5      	cmp	r5, r4
 801a74e:	d10b      	bne.n	801a768 <_free_r+0x70>
 801a750:	6824      	ldr	r4, [r4, #0]
 801a752:	4421      	add	r1, r4
 801a754:	1854      	adds	r4, r2, r1
 801a756:	42a3      	cmp	r3, r4
 801a758:	6011      	str	r1, [r2, #0]
 801a75a:	d1e0      	bne.n	801a71e <_free_r+0x26>
 801a75c:	681c      	ldr	r4, [r3, #0]
 801a75e:	685b      	ldr	r3, [r3, #4]
 801a760:	6053      	str	r3, [r2, #4]
 801a762:	4421      	add	r1, r4
 801a764:	6011      	str	r1, [r2, #0]
 801a766:	e7da      	b.n	801a71e <_free_r+0x26>
 801a768:	d902      	bls.n	801a770 <_free_r+0x78>
 801a76a:	230c      	movs	r3, #12
 801a76c:	6003      	str	r3, [r0, #0]
 801a76e:	e7d6      	b.n	801a71e <_free_r+0x26>
 801a770:	6825      	ldr	r5, [r4, #0]
 801a772:	1961      	adds	r1, r4, r5
 801a774:	428b      	cmp	r3, r1
 801a776:	bf04      	itt	eq
 801a778:	6819      	ldreq	r1, [r3, #0]
 801a77a:	685b      	ldreq	r3, [r3, #4]
 801a77c:	6063      	str	r3, [r4, #4]
 801a77e:	bf04      	itt	eq
 801a780:	1949      	addeq	r1, r1, r5
 801a782:	6021      	streq	r1, [r4, #0]
 801a784:	6054      	str	r4, [r2, #4]
 801a786:	e7ca      	b.n	801a71e <_free_r+0x26>
 801a788:	b003      	add	sp, #12
 801a78a:	bd30      	pop	{r4, r5, pc}
 801a78c:	24006970 	.word	0x24006970

0801a790 <sbrk_aligned>:
 801a790:	b570      	push	{r4, r5, r6, lr}
 801a792:	4e0e      	ldr	r6, [pc, #56]	; (801a7cc <sbrk_aligned+0x3c>)
 801a794:	460c      	mov	r4, r1
 801a796:	6831      	ldr	r1, [r6, #0]
 801a798:	4605      	mov	r5, r0
 801a79a:	b911      	cbnz	r1, 801a7a2 <sbrk_aligned+0x12>
 801a79c:	f000 f88c 	bl	801a8b8 <_sbrk_r>
 801a7a0:	6030      	str	r0, [r6, #0]
 801a7a2:	4621      	mov	r1, r4
 801a7a4:	4628      	mov	r0, r5
 801a7a6:	f000 f887 	bl	801a8b8 <_sbrk_r>
 801a7aa:	1c43      	adds	r3, r0, #1
 801a7ac:	d00a      	beq.n	801a7c4 <sbrk_aligned+0x34>
 801a7ae:	1cc4      	adds	r4, r0, #3
 801a7b0:	f024 0403 	bic.w	r4, r4, #3
 801a7b4:	42a0      	cmp	r0, r4
 801a7b6:	d007      	beq.n	801a7c8 <sbrk_aligned+0x38>
 801a7b8:	1a21      	subs	r1, r4, r0
 801a7ba:	4628      	mov	r0, r5
 801a7bc:	f000 f87c 	bl	801a8b8 <_sbrk_r>
 801a7c0:	3001      	adds	r0, #1
 801a7c2:	d101      	bne.n	801a7c8 <sbrk_aligned+0x38>
 801a7c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a7c8:	4620      	mov	r0, r4
 801a7ca:	bd70      	pop	{r4, r5, r6, pc}
 801a7cc:	24006974 	.word	0x24006974

0801a7d0 <_malloc_r>:
 801a7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7d4:	1ccd      	adds	r5, r1, #3
 801a7d6:	f025 0503 	bic.w	r5, r5, #3
 801a7da:	3508      	adds	r5, #8
 801a7dc:	2d0c      	cmp	r5, #12
 801a7de:	bf38      	it	cc
 801a7e0:	250c      	movcc	r5, #12
 801a7e2:	2d00      	cmp	r5, #0
 801a7e4:	4607      	mov	r7, r0
 801a7e6:	db01      	blt.n	801a7ec <_malloc_r+0x1c>
 801a7e8:	42a9      	cmp	r1, r5
 801a7ea:	d905      	bls.n	801a7f8 <_malloc_r+0x28>
 801a7ec:	230c      	movs	r3, #12
 801a7ee:	603b      	str	r3, [r7, #0]
 801a7f0:	2600      	movs	r6, #0
 801a7f2:	4630      	mov	r0, r6
 801a7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a7f8:	4e2e      	ldr	r6, [pc, #184]	; (801a8b4 <_malloc_r+0xe4>)
 801a7fa:	f000 f907 	bl	801aa0c <__malloc_lock>
 801a7fe:	6833      	ldr	r3, [r6, #0]
 801a800:	461c      	mov	r4, r3
 801a802:	bb34      	cbnz	r4, 801a852 <_malloc_r+0x82>
 801a804:	4629      	mov	r1, r5
 801a806:	4638      	mov	r0, r7
 801a808:	f7ff ffc2 	bl	801a790 <sbrk_aligned>
 801a80c:	1c43      	adds	r3, r0, #1
 801a80e:	4604      	mov	r4, r0
 801a810:	d14d      	bne.n	801a8ae <_malloc_r+0xde>
 801a812:	6834      	ldr	r4, [r6, #0]
 801a814:	4626      	mov	r6, r4
 801a816:	2e00      	cmp	r6, #0
 801a818:	d140      	bne.n	801a89c <_malloc_r+0xcc>
 801a81a:	6823      	ldr	r3, [r4, #0]
 801a81c:	4631      	mov	r1, r6
 801a81e:	4638      	mov	r0, r7
 801a820:	eb04 0803 	add.w	r8, r4, r3
 801a824:	f000 f848 	bl	801a8b8 <_sbrk_r>
 801a828:	4580      	cmp	r8, r0
 801a82a:	d13a      	bne.n	801a8a2 <_malloc_r+0xd2>
 801a82c:	6821      	ldr	r1, [r4, #0]
 801a82e:	3503      	adds	r5, #3
 801a830:	1a6d      	subs	r5, r5, r1
 801a832:	f025 0503 	bic.w	r5, r5, #3
 801a836:	3508      	adds	r5, #8
 801a838:	2d0c      	cmp	r5, #12
 801a83a:	bf38      	it	cc
 801a83c:	250c      	movcc	r5, #12
 801a83e:	4629      	mov	r1, r5
 801a840:	4638      	mov	r0, r7
 801a842:	f7ff ffa5 	bl	801a790 <sbrk_aligned>
 801a846:	3001      	adds	r0, #1
 801a848:	d02b      	beq.n	801a8a2 <_malloc_r+0xd2>
 801a84a:	6823      	ldr	r3, [r4, #0]
 801a84c:	442b      	add	r3, r5
 801a84e:	6023      	str	r3, [r4, #0]
 801a850:	e00e      	b.n	801a870 <_malloc_r+0xa0>
 801a852:	6822      	ldr	r2, [r4, #0]
 801a854:	1b52      	subs	r2, r2, r5
 801a856:	d41e      	bmi.n	801a896 <_malloc_r+0xc6>
 801a858:	2a0b      	cmp	r2, #11
 801a85a:	d916      	bls.n	801a88a <_malloc_r+0xba>
 801a85c:	1961      	adds	r1, r4, r5
 801a85e:	42a3      	cmp	r3, r4
 801a860:	6025      	str	r5, [r4, #0]
 801a862:	bf18      	it	ne
 801a864:	6059      	strne	r1, [r3, #4]
 801a866:	6863      	ldr	r3, [r4, #4]
 801a868:	bf08      	it	eq
 801a86a:	6031      	streq	r1, [r6, #0]
 801a86c:	5162      	str	r2, [r4, r5]
 801a86e:	604b      	str	r3, [r1, #4]
 801a870:	4638      	mov	r0, r7
 801a872:	f104 060b 	add.w	r6, r4, #11
 801a876:	f000 f8cf 	bl	801aa18 <__malloc_unlock>
 801a87a:	f026 0607 	bic.w	r6, r6, #7
 801a87e:	1d23      	adds	r3, r4, #4
 801a880:	1af2      	subs	r2, r6, r3
 801a882:	d0b6      	beq.n	801a7f2 <_malloc_r+0x22>
 801a884:	1b9b      	subs	r3, r3, r6
 801a886:	50a3      	str	r3, [r4, r2]
 801a888:	e7b3      	b.n	801a7f2 <_malloc_r+0x22>
 801a88a:	6862      	ldr	r2, [r4, #4]
 801a88c:	42a3      	cmp	r3, r4
 801a88e:	bf0c      	ite	eq
 801a890:	6032      	streq	r2, [r6, #0]
 801a892:	605a      	strne	r2, [r3, #4]
 801a894:	e7ec      	b.n	801a870 <_malloc_r+0xa0>
 801a896:	4623      	mov	r3, r4
 801a898:	6864      	ldr	r4, [r4, #4]
 801a89a:	e7b2      	b.n	801a802 <_malloc_r+0x32>
 801a89c:	4634      	mov	r4, r6
 801a89e:	6876      	ldr	r6, [r6, #4]
 801a8a0:	e7b9      	b.n	801a816 <_malloc_r+0x46>
 801a8a2:	230c      	movs	r3, #12
 801a8a4:	603b      	str	r3, [r7, #0]
 801a8a6:	4638      	mov	r0, r7
 801a8a8:	f000 f8b6 	bl	801aa18 <__malloc_unlock>
 801a8ac:	e7a1      	b.n	801a7f2 <_malloc_r+0x22>
 801a8ae:	6025      	str	r5, [r4, #0]
 801a8b0:	e7de      	b.n	801a870 <_malloc_r+0xa0>
 801a8b2:	bf00      	nop
 801a8b4:	24006970 	.word	0x24006970

0801a8b8 <_sbrk_r>:
 801a8b8:	b538      	push	{r3, r4, r5, lr}
 801a8ba:	4d06      	ldr	r5, [pc, #24]	; (801a8d4 <_sbrk_r+0x1c>)
 801a8bc:	2300      	movs	r3, #0
 801a8be:	4604      	mov	r4, r0
 801a8c0:	4608      	mov	r0, r1
 801a8c2:	602b      	str	r3, [r5, #0]
 801a8c4:	f7ea f870 	bl	80049a8 <_sbrk>
 801a8c8:	1c43      	adds	r3, r0, #1
 801a8ca:	d102      	bne.n	801a8d2 <_sbrk_r+0x1a>
 801a8cc:	682b      	ldr	r3, [r5, #0]
 801a8ce:	b103      	cbz	r3, 801a8d2 <_sbrk_r+0x1a>
 801a8d0:	6023      	str	r3, [r4, #0]
 801a8d2:	bd38      	pop	{r3, r4, r5, pc}
 801a8d4:	24006978 	.word	0x24006978

0801a8d8 <__sread>:
 801a8d8:	b510      	push	{r4, lr}
 801a8da:	460c      	mov	r4, r1
 801a8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8e0:	f000 f8a0 	bl	801aa24 <_read_r>
 801a8e4:	2800      	cmp	r0, #0
 801a8e6:	bfab      	itete	ge
 801a8e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a8ea:	89a3      	ldrhlt	r3, [r4, #12]
 801a8ec:	181b      	addge	r3, r3, r0
 801a8ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a8f2:	bfac      	ite	ge
 801a8f4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a8f6:	81a3      	strhlt	r3, [r4, #12]
 801a8f8:	bd10      	pop	{r4, pc}

0801a8fa <__swrite>:
 801a8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8fe:	461f      	mov	r7, r3
 801a900:	898b      	ldrh	r3, [r1, #12]
 801a902:	05db      	lsls	r3, r3, #23
 801a904:	4605      	mov	r5, r0
 801a906:	460c      	mov	r4, r1
 801a908:	4616      	mov	r6, r2
 801a90a:	d505      	bpl.n	801a918 <__swrite+0x1e>
 801a90c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a910:	2302      	movs	r3, #2
 801a912:	2200      	movs	r2, #0
 801a914:	f000 f868 	bl	801a9e8 <_lseek_r>
 801a918:	89a3      	ldrh	r3, [r4, #12]
 801a91a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a91e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a922:	81a3      	strh	r3, [r4, #12]
 801a924:	4632      	mov	r2, r6
 801a926:	463b      	mov	r3, r7
 801a928:	4628      	mov	r0, r5
 801a92a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a92e:	f000 b817 	b.w	801a960 <_write_r>

0801a932 <__sseek>:
 801a932:	b510      	push	{r4, lr}
 801a934:	460c      	mov	r4, r1
 801a936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a93a:	f000 f855 	bl	801a9e8 <_lseek_r>
 801a93e:	1c43      	adds	r3, r0, #1
 801a940:	89a3      	ldrh	r3, [r4, #12]
 801a942:	bf15      	itete	ne
 801a944:	6560      	strne	r0, [r4, #84]	; 0x54
 801a946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a94a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a94e:	81a3      	strheq	r3, [r4, #12]
 801a950:	bf18      	it	ne
 801a952:	81a3      	strhne	r3, [r4, #12]
 801a954:	bd10      	pop	{r4, pc}

0801a956 <__sclose>:
 801a956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a95a:	f000 b813 	b.w	801a984 <_close_r>
	...

0801a960 <_write_r>:
 801a960:	b538      	push	{r3, r4, r5, lr}
 801a962:	4d07      	ldr	r5, [pc, #28]	; (801a980 <_write_r+0x20>)
 801a964:	4604      	mov	r4, r0
 801a966:	4608      	mov	r0, r1
 801a968:	4611      	mov	r1, r2
 801a96a:	2200      	movs	r2, #0
 801a96c:	602a      	str	r2, [r5, #0]
 801a96e:	461a      	mov	r2, r3
 801a970:	f7e9 ffc9 	bl	8004906 <_write>
 801a974:	1c43      	adds	r3, r0, #1
 801a976:	d102      	bne.n	801a97e <_write_r+0x1e>
 801a978:	682b      	ldr	r3, [r5, #0]
 801a97a:	b103      	cbz	r3, 801a97e <_write_r+0x1e>
 801a97c:	6023      	str	r3, [r4, #0]
 801a97e:	bd38      	pop	{r3, r4, r5, pc}
 801a980:	24006978 	.word	0x24006978

0801a984 <_close_r>:
 801a984:	b538      	push	{r3, r4, r5, lr}
 801a986:	4d06      	ldr	r5, [pc, #24]	; (801a9a0 <_close_r+0x1c>)
 801a988:	2300      	movs	r3, #0
 801a98a:	4604      	mov	r4, r0
 801a98c:	4608      	mov	r0, r1
 801a98e:	602b      	str	r3, [r5, #0]
 801a990:	f7e9 ffd5 	bl	800493e <_close>
 801a994:	1c43      	adds	r3, r0, #1
 801a996:	d102      	bne.n	801a99e <_close_r+0x1a>
 801a998:	682b      	ldr	r3, [r5, #0]
 801a99a:	b103      	cbz	r3, 801a99e <_close_r+0x1a>
 801a99c:	6023      	str	r3, [r4, #0]
 801a99e:	bd38      	pop	{r3, r4, r5, pc}
 801a9a0:	24006978 	.word	0x24006978

0801a9a4 <_fstat_r>:
 801a9a4:	b538      	push	{r3, r4, r5, lr}
 801a9a6:	4d07      	ldr	r5, [pc, #28]	; (801a9c4 <_fstat_r+0x20>)
 801a9a8:	2300      	movs	r3, #0
 801a9aa:	4604      	mov	r4, r0
 801a9ac:	4608      	mov	r0, r1
 801a9ae:	4611      	mov	r1, r2
 801a9b0:	602b      	str	r3, [r5, #0]
 801a9b2:	f7e9 ffd0 	bl	8004956 <_fstat>
 801a9b6:	1c43      	adds	r3, r0, #1
 801a9b8:	d102      	bne.n	801a9c0 <_fstat_r+0x1c>
 801a9ba:	682b      	ldr	r3, [r5, #0]
 801a9bc:	b103      	cbz	r3, 801a9c0 <_fstat_r+0x1c>
 801a9be:	6023      	str	r3, [r4, #0]
 801a9c0:	bd38      	pop	{r3, r4, r5, pc}
 801a9c2:	bf00      	nop
 801a9c4:	24006978 	.word	0x24006978

0801a9c8 <_isatty_r>:
 801a9c8:	b538      	push	{r3, r4, r5, lr}
 801a9ca:	4d06      	ldr	r5, [pc, #24]	; (801a9e4 <_isatty_r+0x1c>)
 801a9cc:	2300      	movs	r3, #0
 801a9ce:	4604      	mov	r4, r0
 801a9d0:	4608      	mov	r0, r1
 801a9d2:	602b      	str	r3, [r5, #0]
 801a9d4:	f7e9 ffcf 	bl	8004976 <_isatty>
 801a9d8:	1c43      	adds	r3, r0, #1
 801a9da:	d102      	bne.n	801a9e2 <_isatty_r+0x1a>
 801a9dc:	682b      	ldr	r3, [r5, #0]
 801a9de:	b103      	cbz	r3, 801a9e2 <_isatty_r+0x1a>
 801a9e0:	6023      	str	r3, [r4, #0]
 801a9e2:	bd38      	pop	{r3, r4, r5, pc}
 801a9e4:	24006978 	.word	0x24006978

0801a9e8 <_lseek_r>:
 801a9e8:	b538      	push	{r3, r4, r5, lr}
 801a9ea:	4d07      	ldr	r5, [pc, #28]	; (801aa08 <_lseek_r+0x20>)
 801a9ec:	4604      	mov	r4, r0
 801a9ee:	4608      	mov	r0, r1
 801a9f0:	4611      	mov	r1, r2
 801a9f2:	2200      	movs	r2, #0
 801a9f4:	602a      	str	r2, [r5, #0]
 801a9f6:	461a      	mov	r2, r3
 801a9f8:	f7e9 ffc8 	bl	800498c <_lseek>
 801a9fc:	1c43      	adds	r3, r0, #1
 801a9fe:	d102      	bne.n	801aa06 <_lseek_r+0x1e>
 801aa00:	682b      	ldr	r3, [r5, #0]
 801aa02:	b103      	cbz	r3, 801aa06 <_lseek_r+0x1e>
 801aa04:	6023      	str	r3, [r4, #0]
 801aa06:	bd38      	pop	{r3, r4, r5, pc}
 801aa08:	24006978 	.word	0x24006978

0801aa0c <__malloc_lock>:
 801aa0c:	4801      	ldr	r0, [pc, #4]	; (801aa14 <__malloc_lock+0x8>)
 801aa0e:	f7ff be0b 	b.w	801a628 <__retarget_lock_acquire_recursive>
 801aa12:	bf00      	nop
 801aa14:	2400696c 	.word	0x2400696c

0801aa18 <__malloc_unlock>:
 801aa18:	4801      	ldr	r0, [pc, #4]	; (801aa20 <__malloc_unlock+0x8>)
 801aa1a:	f7ff be06 	b.w	801a62a <__retarget_lock_release_recursive>
 801aa1e:	bf00      	nop
 801aa20:	2400696c 	.word	0x2400696c

0801aa24 <_read_r>:
 801aa24:	b538      	push	{r3, r4, r5, lr}
 801aa26:	4d07      	ldr	r5, [pc, #28]	; (801aa44 <_read_r+0x20>)
 801aa28:	4604      	mov	r4, r0
 801aa2a:	4608      	mov	r0, r1
 801aa2c:	4611      	mov	r1, r2
 801aa2e:	2200      	movs	r2, #0
 801aa30:	602a      	str	r2, [r5, #0]
 801aa32:	461a      	mov	r2, r3
 801aa34:	f7e9 ff4a 	bl	80048cc <_read>
 801aa38:	1c43      	adds	r3, r0, #1
 801aa3a:	d102      	bne.n	801aa42 <_read_r+0x1e>
 801aa3c:	682b      	ldr	r3, [r5, #0]
 801aa3e:	b103      	cbz	r3, 801aa42 <_read_r+0x1e>
 801aa40:	6023      	str	r3, [r4, #0]
 801aa42:	bd38      	pop	{r3, r4, r5, pc}
 801aa44:	24006978 	.word	0x24006978

0801aa48 <_init>:
 801aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa4a:	bf00      	nop
 801aa4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa4e:	bc08      	pop	{r3}
 801aa50:	469e      	mov	lr, r3
 801aa52:	4770      	bx	lr

0801aa54 <_fini>:
 801aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa56:	bf00      	nop
 801aa58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aa5a:	bc08      	pop	{r3}
 801aa5c:	469e      	mov	lr, r3
 801aa5e:	4770      	bx	lr
