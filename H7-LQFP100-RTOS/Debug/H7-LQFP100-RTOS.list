
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001583c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08015adc  08015adc  00025adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015e8c  08015e8c  00025e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015e94  08015e94  00025e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015e98  08015e98  00025e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  08015e9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004fbc  24000100  08015f9c  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  240050bc  08015f9c  000350bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   00030beb  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000527a  00000000  00000000  00060d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002538  00000000  00000000  00065f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002350  00000000  00000000  000684d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007485  00000000  00000000  0006a820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002ee6d  00000000  00000000  00071ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018d568  00000000  00000000  000a0b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022e07a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a970  00000000  00000000  0022e0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08015ac4 	.word	0x08015ac4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08015ac4 	.word	0x08015ac4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  if (htim == &htim1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a13      	ldr	r2, [pc, #76]	; (80006dc <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
  {
	  osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2101      	movs	r1, #1
 800069a:	4618      	mov	r0, r3
 800069c:	f010 ffae 	bl	80115fc <osEventFlagsSet>
  }
  else
  {
	  printf("Unknown Timer Interrupt\n");
  }
}
 80006a0:	e018      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim2)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d106      	bne.n	80006b8 <HAL_TIM_OC_DelayElapsedCallback+0x34>
	  osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f010 ffa3 	bl	80115fc <osEventFlagsSet>
}
 80006b6:	e00d      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
  else if (htim == &htim3)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <HAL_TIM_OC_DelayElapsedCallback+0x4a>
	  osEventFlagsSet(event_flags, HK_FLAG_ID);
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2104      	movs	r1, #4
 80006c6:	4618      	mov	r0, r3
 80006c8:	f010 ff98 	bl	80115fc <osEventFlagsSet>
}
 80006cc:	e002      	b.n	80006d4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	  printf("Unknown Timer Interrupt\n");
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 80006d0:	f014 fb5a 	bl	8014d88 <puts>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	240004c4 	.word	0x240004c4
 80006e0:	24000660 	.word	0x24000660
 80006e4:	24000510 	.word	0x24000510
 80006e8:	2400055c 	.word	0x2400055c
 80006ec:	08015b1c 	.word	0x08015b1c

080006f0 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	49bf      	ldr	r1, [pc, #764]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 80006fc:	48bf      	ldr	r0, [pc, #764]	; (80009fc <HAL_UART_RxCpltCallback+0x30c>)
 80006fe:	f00e fa93 	bl	800ec28 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000702:	4bbd      	ldr	r3, [pc, #756]	; (80009f8 <HAL_UART_RxCpltCallback+0x308>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	2b25      	cmp	r3, #37	; 0x25
 800070c:	f200 8204 	bhi.w	8000b18 <HAL_UART_RxCpltCallback+0x428>
 8000710:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <HAL_UART_RxCpltCallback+0x28>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	080008e7 	.word	0x080008e7
 800071c:	0800090f 	.word	0x0800090f
 8000720:	08000937 	.word	0x08000937
 8000724:	08000963 	.word	0x08000963
 8000728:	0800098f 	.word	0x0800098f
 800072c:	080009b7 	.word	0x080009b7
 8000730:	080009e3 	.word	0x080009e3
 8000734:	08000a87 	.word	0x08000a87
 8000738:	08000b19 	.word	0x08000b19
 800073c:	08000b19 	.word	0x08000b19
 8000740:	080007c5 	.word	0x080007c5
 8000744:	080007b1 	.word	0x080007b1
 8000748:	08000aaf 	.word	0x08000aaf
 800074c:	08000ab7 	.word	0x08000ab7
 8000750:	08000ad3 	.word	0x08000ad3
 8000754:	08000aef 	.word	0x08000aef
 8000758:	08000ac5 	.word	0x08000ac5
 800075c:	08000ae1 	.word	0x08000ae1
 8000760:	08000afd 	.word	0x08000afd
 8000764:	080008fb 	.word	0x080008fb
 8000768:	08000923 	.word	0x08000923
 800076c:	0800094d 	.word	0x0800094d
 8000770:	08000979 	.word	0x08000979
 8000774:	080009a3 	.word	0x080009a3
 8000778:	080009cd 	.word	0x080009cd
 800077c:	08000a71 	.word	0x08000a71
 8000780:	08000a9b 	.word	0x08000a9b
 8000784:	080007d9 	.word	0x080007d9
 8000788:	08000815 	.word	0x08000815
 800078c:	08000851 	.word	0x08000851
 8000790:	08000b19 	.word	0x08000b19
 8000794:	08000b19 	.word	0x08000b19
 8000798:	08000b19 	.word	0x08000b19
 800079c:	08000b19 	.word	0x08000b19
 80007a0:	08000b19 	.word	0x08000b19
 80007a4:	08000b19 	.word	0x08000b19
 80007a8:	08000893 	.word	0x08000893
 80007ac:	080008bd 	.word	0x080008bd
	case 0x0B: {
		printf("SDN1 ON\n");
 80007b0:	4893      	ldr	r0, [pc, #588]	; (8000a00 <HAL_UART_RxCpltCallback+0x310>)
 80007b2:	f014 fae9 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 80007b6:	4b93      	ldr	r3, [pc, #588]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007b8:	2104      	movs	r1, #4
 80007ba:	2201      	movs	r2, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f007 fcd5 	bl	800816c <HAL_GPIO_WritePin>
		break;
 80007c2:	e1a9      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0A: {
		printf("SDN1 OFF\n");
 80007c4:	4890      	ldr	r0, [pc, #576]	; (8000a08 <HAL_UART_RxCpltCallback+0x318>)
 80007c6:	f014 fadf 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80007ca:	4b8e      	ldr	r3, [pc, #568]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80007cc:	2104      	movs	r1, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 fccb 	bl	800816c <HAL_GPIO_WritePin>
		break;
 80007d6:	e19f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1B: {
		printf("Step Up\n");
 80007d8:	488c      	ldr	r0, [pc, #560]	; (8000a0c <HAL_UART_RxCpltCallback+0x31c>)
 80007da:	f014 fad5 	bl	8014d88 <puts>
		if (step < 17) {
 80007de:	4b8c      	ldr	r3, [pc, #560]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b10      	cmp	r3, #16
 80007e4:	f200 8191 	bhi.w	8000b0a <HAL_UART_RxCpltCallback+0x41a>
			step+=2;
 80007e8:	4b89      	ldr	r3, [pc, #548]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	3302      	adds	r3, #2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b87      	ldr	r3, [pc, #540]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f2:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 80007f4:	4b86      	ldr	r3, [pc, #536]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b86      	ldr	r3, [pc, #536]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 80007fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	4884      	ldr	r0, [pc, #528]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000806:	f004 fa9c 	bl	8004d42 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800080a:	2100      	movs	r1, #0
 800080c:	4882      	ldr	r0, [pc, #520]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800080e:	f004 f8dd 	bl	80049cc <HAL_DAC_Start>

		}
		break;
 8000812:	e17a      	b.n	8000b0a <HAL_UART_RxCpltCallback+0x41a>
	}
	case 0x1C: {
		printf("Step Down\n");
 8000814:	4881      	ldr	r0, [pc, #516]	; (8000a1c <HAL_UART_RxCpltCallback+0x32c>)
 8000816:	f014 fab7 	bl	8014d88 <puts>
		if (step > 3) {
 800081a:	4b7d      	ldr	r3, [pc, #500]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b03      	cmp	r3, #3
 8000820:	f240 8175 	bls.w	8000b0e <HAL_UART_RxCpltCallback+0x41e>
			step-=2;
 8000824:	4b7a      	ldr	r3, [pc, #488]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3b02      	subs	r3, #2
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b78      	ldr	r3, [pc, #480]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 800082e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000830:	4b77      	ldr	r3, [pc, #476]	; (8000a10 <HAL_UART_RxCpltCallback+0x320>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	4b77      	ldr	r3, [pc, #476]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	4875      	ldr	r0, [pc, #468]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000842:	f004 fa7e 	bl	8004d42 <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000846:	2100      	movs	r1, #0
 8000848:	4873      	ldr	r0, [pc, #460]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800084a:	f004 f8bf 	bl	80049cc <HAL_DAC_Start>

		}
		break;
 800084e:	e15e      	b.n	8000b0e <HAL_UART_RxCpltCallback+0x41e>
	}
	case 0x1D: {
		printf("Toggle AutoSweep\n");
 8000850:	4873      	ldr	r0, [pc, #460]	; (8000a20 <HAL_UART_RxCpltCallback+0x330>)
 8000852:	f014 fa99 	bl	8014d88 <puts>
		if (!auto_sweep) {
 8000856:	4b73      	ldr	r3, [pc, #460]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10e      	bne.n	800087c <HAL_UART_RxCpltCallback+0x18c>
			auto_sweep = 1;
 800085e:	4b71      	ldr	r3, [pc, #452]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start(&htim2);
 8000864:	4870      	ldr	r0, [pc, #448]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000866:	f00c fc8b 	bl	800d180 <HAL_TIM_Base_Start>

			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 800086a:	2300      	movs	r3, #0
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2320      	movs	r3, #32
 8000870:	4a68      	ldr	r2, [pc, #416]	; (8000a14 <HAL_UART_RxCpltCallback+0x324>)
 8000872:	2100      	movs	r1, #0
 8000874:	4868      	ldr	r0, [pc, #416]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 8000876:	f004 f901 	bl	8004a7c <HAL_DAC_Start_DMA>
			auto_sweep = 0;
			HAL_TIM_Base_Stop(&htim2);

			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		}
		break;
 800087a:	e14d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
			auto_sweep = 0;
 800087c:	4b69      	ldr	r3, [pc, #420]	; (8000a24 <HAL_UART_RxCpltCallback+0x334>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop(&htim2);
 8000882:	4869      	ldr	r0, [pc, #420]	; (8000a28 <HAL_UART_RxCpltCallback+0x338>)
 8000884:	f00c fcec 	bl	800d260 <HAL_TIM_Base_Stop>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000888:	2100      	movs	r1, #0
 800088a:	4863      	ldr	r0, [pc, #396]	; (8000a18 <HAL_UART_RxCpltCallback+0x328>)
 800088c:	f004 f9b6 	bl	8004bfc <HAL_DAC_Stop_DMA>
		break;
 8000890:	e142      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x24: {
		printf("Factor Up\n");
 8000892:	4866      	ldr	r0, [pc, #408]	; (8000a2c <HAL_UART_RxCpltCallback+0x33c>)
 8000894:	f014 fa78 	bl	8014d88 <puts>
		if (cadence <= 50000){
 8000898:	4b65      	ldr	r3, [pc, #404]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f24c 3250 	movw	r2, #50000	; 0xc350
 80008a0:	4293      	cmp	r3, r2
 80008a2:	f200 8136 	bhi.w	8000b12 <HAL_UART_RxCpltCallback+0x422>
			cadence *= 2;
 80008a6:	4b62      	ldr	r3, [pc, #392]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4a60      	ldr	r2, [pc, #384]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008ae:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b4:	4b5e      	ldr	r3, [pc, #376]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008ba:	e12a      	b.n	8000b12 <HAL_UART_RxCpltCallback+0x422>
	}
	case 0x25: {
		printf("Factor Down\n");
 80008bc:	485d      	ldr	r0, [pc, #372]	; (8000a34 <HAL_UART_RxCpltCallback+0x344>)
 80008be:	f014 fa63 	bl	8014d88 <puts>
		if (cadence >= 6250){
 80008c2:	4b5b      	ldr	r3, [pc, #364]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f641 0269 	movw	r2, #6249	; 0x1869
 80008ca:	4293      	cmp	r3, r2
 80008cc:	f240 8123 	bls.w	8000b16 <HAL_UART_RxCpltCallback+0x426>
			cadence /= 2;
 80008d0:	4b57      	ldr	r3, [pc, #348]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	4a56      	ldr	r2, [pc, #344]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008d8:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	4b54      	ldr	r3, [pc, #336]	; (8000a30 <HAL_UART_RxCpltCallback+0x340>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80008e4:	e117      	b.n	8000b16 <HAL_UART_RxCpltCallback+0x426>
	}
	case 0x00: {
		printf("SYS ON PB5\n");
 80008e6:	4854      	ldr	r0, [pc, #336]	; (8000a38 <HAL_UART_RxCpltCallback+0x348>)
 80008e8:	f014 fa4e 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 80008ec:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 80008ee:	2120      	movs	r1, #32
 80008f0:	2201      	movs	r2, #1
 80008f2:	4618      	mov	r0, r3
 80008f4:	f007 fc3a 	bl	800816c <HAL_GPIO_WritePin>
		break;
 80008f8:	e10e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x13: {
		printf("SYS OFF PB5\n");
 80008fa:	4850      	ldr	r0, [pc, #320]	; (8000a3c <HAL_UART_RxCpltCallback+0x34c>)
 80008fc:	f014 fa44 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 8000900:	4b40      	ldr	r3, [pc, #256]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000902:	2120      	movs	r1, #32
 8000904:	2200      	movs	r2, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f007 fc30 	bl	800816c <HAL_GPIO_WritePin>
		break;
 800090c:	e104      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x01: {

		printf("800v ON PB6\n");
 800090e:	484c      	ldr	r0, [pc, #304]	; (8000a40 <HAL_UART_RxCpltCallback+0x350>)
 8000910:	f014 fa3a 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000914:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	2201      	movs	r2, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f007 fc26 	bl	800816c <HAL_GPIO_WritePin>
		break;
 8000920:	e0fa      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x14: {
		printf("800v OFF PB6\n");
 8000922:	4848      	ldr	r0, [pc, #288]	; (8000a44 <HAL_UART_RxCpltCallback+0x354>)
 8000924:	f014 fa30 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000928:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <HAL_UART_RxCpltCallback+0x314>)
 800092a:	2140      	movs	r1, #64	; 0x40
 800092c:	2200      	movs	r2, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f007 fc1c 	bl	800816c <HAL_GPIO_WritePin>
		break;
 8000934:	e0f0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x02: {
		printf("5v ON PC2\n");
 8000936:	4844      	ldr	r0, [pc, #272]	; (8000a48 <HAL_UART_RxCpltCallback+0x358>)
 8000938:	f014 fa26 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800093e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000942:	2201      	movs	r2, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f007 fc11 	bl	800816c <HAL_GPIO_WritePin>
		break;
 800094a:	e0e5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x15: {
		printf("5v OFF PC2\n");
 800094c:	4840      	ldr	r0, [pc, #256]	; (8000a50 <HAL_UART_RxCpltCallback+0x360>)
 800094e:	f014 fa1b 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000952:	4b3e      	ldr	r3, [pc, #248]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000958:	2200      	movs	r2, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f007 fc06 	bl	800816c <HAL_GPIO_WritePin>
		break;
 8000960:	e0da      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x03: {
		printf("n200v ON PC13\n");
 8000962:	483c      	ldr	r0, [pc, #240]	; (8000a54 <HAL_UART_RxCpltCallback+0x364>)
 8000964:	f014 fa10 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	2201      	movs	r2, #1
 8000970:	4618      	mov	r0, r3
 8000972:	f007 fbfb 	bl	800816c <HAL_GPIO_WritePin>
		break;
 8000976:	e0cf      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x16: {
		printf("n200v OFF PC13\n");
 8000978:	4837      	ldr	r0, [pc, #220]	; (8000a58 <HAL_UART_RxCpltCallback+0x368>)
 800097a:	f014 fa05 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000980:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000984:	2200      	movs	r2, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f007 fbf0 	bl	800816c <HAL_GPIO_WritePin>
		break;
 800098c:	e0c4      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x04: {
		printf("3v3 ON PC7\n");
 800098e:	4833      	ldr	r0, [pc, #204]	; (8000a5c <HAL_UART_RxCpltCallback+0x36c>)
 8000990:	f014 f9fa 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000994:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	2201      	movs	r2, #1
 800099a:	4618      	mov	r0, r3
 800099c:	f007 fbe6 	bl	800816c <HAL_GPIO_WritePin>
		break;
 80009a0:	e0ba      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x17: {
		printf("3v3 OFF PC7\n");
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <HAL_UART_RxCpltCallback+0x370>)
 80009a4:	f014 f9f0 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	2200      	movs	r2, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 fbdc 	bl	800816c <HAL_GPIO_WritePin>
		break;
 80009b4:	e0b0      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x05: {
		printf("n5v ON PC8\n");
 80009b6:	482b      	ldr	r0, [pc, #172]	; (8000a64 <HAL_UART_RxCpltCallback+0x374>)
 80009b8:	f014 f9e6 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80009bc:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c2:	2201      	movs	r2, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f007 fbd1 	bl	800816c <HAL_GPIO_WritePin>
		break;
 80009ca:	e0a5      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x18: {
		printf("n5v OFF PC8\n");
 80009cc:	4826      	ldr	r0, [pc, #152]	; (8000a68 <HAL_UART_RxCpltCallback+0x378>)
 80009ce:	f014 f9db 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	2200      	movs	r2, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f007 fbc6 	bl	800816c <HAL_GPIO_WritePin>
		break;
 80009e0:	e09a      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x06: {
		printf("15v ON PC9\n");
 80009e2:	4822      	ldr	r0, [pc, #136]	; (8000a6c <HAL_UART_RxCpltCallback+0x37c>)
 80009e4:	f014 f9d0 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_UART_RxCpltCallback+0x35c>)
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	2201      	movs	r2, #1
 80009f0:	4618      	mov	r0, r3
 80009f2:	f007 fbbb 	bl	800816c <HAL_GPIO_WritePin>
		break;
 80009f6:	e08f      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
 80009f8:	24000664 	.word	0x24000664
 80009fc:	240005a8 	.word	0x240005a8
 8000a00:	08015b34 	.word	0x08015b34
 8000a04:	58020400 	.word	0x58020400
 8000a08:	08015b3c 	.word	0x08015b3c
 8000a0c:	08015b48 	.word	0x08015b48
 8000a10:	24000004 	.word	0x24000004
 8000a14:	24000008 	.word	0x24000008
 8000a18:	240002d4 	.word	0x240002d4
 8000a1c:	08015b50 	.word	0x08015b50
 8000a20:	08015b5c 	.word	0x08015b5c
 8000a24:	2400065c 	.word	0x2400065c
 8000a28:	24000510 	.word	0x24000510
 8000a2c:	08015b70 	.word	0x08015b70
 8000a30:	24000000 	.word	0x24000000
 8000a34:	08015b7c 	.word	0x08015b7c
 8000a38:	08015b88 	.word	0x08015b88
 8000a3c:	08015b94 	.word	0x08015b94
 8000a40:	08015ba0 	.word	0x08015ba0
 8000a44:	08015bac 	.word	0x08015bac
 8000a48:	08015bbc 	.word	0x08015bbc
 8000a4c:	58020800 	.word	0x58020800
 8000a50:	08015bc8 	.word	0x08015bc8
 8000a54:	08015bd4 	.word	0x08015bd4
 8000a58:	08015be4 	.word	0x08015be4
 8000a5c:	08015bf4 	.word	0x08015bf4
 8000a60:	08015c00 	.word	0x08015c00
 8000a64:	08015c0c 	.word	0x08015c0c
 8000a68:	08015c18 	.word	0x08015c18
 8000a6c:	08015c24 	.word	0x08015c24
	}
	case 0x19: {
		printf("15v OFF PC9\n");
 8000a70:	482b      	ldr	r0, [pc, #172]	; (8000b20 <HAL_UART_RxCpltCallback+0x430>)
 8000a72:	f014 f989 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a76:	4b2b      	ldr	r3, [pc, #172]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f007 fb74 	bl	800816c <HAL_GPIO_WritePin>
		break;
 8000a84:	e048      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x07: {
		printf("n3v3 ON PC6\n");
 8000a86:	4828      	ldr	r0, [pc, #160]	; (8000b28 <HAL_UART_RxCpltCallback+0x438>)
 8000a88:	f014 f97e 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000a8c:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	2201      	movs	r2, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 fb6a 	bl	800816c <HAL_GPIO_WritePin>
		break;
 8000a98:	e03e      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x1A: {
		printf("n3v3 OFF PC6\n");
 8000a9a:	4824      	ldr	r0, [pc, #144]	; (8000b2c <HAL_UART_RxCpltCallback+0x43c>)
 8000a9c:	f014 f974 	bl	8014d88 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_UART_RxCpltCallback+0x434>)
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f007 fb60 	bl	800816c <HAL_GPIO_WritePin>
		break;
 8000aac:	e034      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0C: {
		printf("Enter STOP mode\n");
 8000aae:	4820      	ldr	r0, [pc, #128]	; (8000b30 <HAL_UART_RxCpltCallback+0x440>)
 8000ab0:	f014 f96a 	bl	8014d88 <puts>
//		HAL_SuspendTick();
//		HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
//		NVIC_SystemReset();
		break;
 8000ab4:	e030      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0D: {
		printf("PMT ON\n");
 8000ab6:	481f      	ldr	r0, [pc, #124]	; (8000b34 <HAL_UART_RxCpltCallback+0x444>)
 8000ab8:	f014 f966 	bl	8014d88 <puts>
		PMT_ON = 1;
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
		break;
 8000ac2:	e029      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x10: {
		printf("PMT OFF\n");
 8000ac4:	481d      	ldr	r0, [pc, #116]	; (8000b3c <HAL_UART_RxCpltCallback+0x44c>)
 8000ac6:	f014 f95f 	bl	8014d88 <puts>
		PMT_ON = 0;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_UART_RxCpltCallback+0x448>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
		break;
 8000ad0:	e022      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0E: {
		printf("ERPA ON\n");
 8000ad2:	481b      	ldr	r0, [pc, #108]	; (8000b40 <HAL_UART_RxCpltCallback+0x450>)
 8000ad4:	f014 f958 	bl	8014d88 <puts>
		ERPA_ON = 1;
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	701a      	strb	r2, [r3, #0]
		break;
 8000ade:	e01b      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x11: {
		printf("ERPA OFF\n");
 8000ae0:	4819      	ldr	r0, [pc, #100]	; (8000b48 <HAL_UART_RxCpltCallback+0x458>)
 8000ae2:	f014 f951 	bl	8014d88 <puts>
		ERPA_ON = 0;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_UART_RxCpltCallback+0x454>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
		break;
 8000aec:	e014      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x0F: {
		printf("HK ON \n");
 8000aee:	4817      	ldr	r0, [pc, #92]	; (8000b4c <HAL_UART_RxCpltCallback+0x45c>)
 8000af0:	f014 f94a 	bl	8014d88 <puts>
		HK_ON = 1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
		break;
 8000afa:	e00d      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
	}
	case 0x12: {
		printf("HK OFF\n");
 8000afc:	4815      	ldr	r0, [pc, #84]	; (8000b54 <HAL_UART_RxCpltCallback+0x464>)
 8000afe:	f014 f943 	bl	8014d88 <puts>
		HK_ON = 0;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_UART_RxCpltCallback+0x460>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
		break;
 8000b08:	e006      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0a:	bf00      	nop
 8000b0c:	e004      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b0e:	bf00      	nop
 8000b10:	e002      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b12:	bf00      	nop
 8000b14:	e000      	b.n	8000b18 <HAL_UART_RxCpltCallback+0x428>
		break;
 8000b16:	bf00      	nop
	}
	}
}
 8000b18:	bf00      	nop
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	08015c30 	.word	0x08015c30
 8000b24:	58020800 	.word	0x58020800
 8000b28:	08015c3c 	.word	0x08015c3c
 8000b2c:	08015c48 	.word	0x08015c48
 8000b30:	08015c58 	.word	0x08015c58
 8000b34:	08015c68 	.word	0x08015c68
 8000b38:	24000657 	.word	0x24000657
 8000b3c:	08015c70 	.word	0x08015c70
 8000b40:	08015c78 	.word	0x08015c78
 8000b44:	24000658 	.word	0x24000658
 8000b48:	08015c80 	.word	0x08015c80
 8000b4c:	08015c8c 	.word	0x08015c8c
 8000b50:	24000659 	.word	0x24000659
 8000b54:	08015c94 	.word	0x08015c94

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5c:	f002 f9a2 	bl	8002ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b60:	f000 f890 	bl	8000c84 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b64:	f000 f90c 	bl	8000d80 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f000 fe02 	bl	8001770 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b6c:	f000 fdd0 	bl	8001710 <MX_DMA_Init>
  MX_TIM3_Init();
 8000b70:	f000 fd34 	bl	80015dc <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000b74:	f000 fd80 	bl	8001678 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b78:	f000 fb1c 	bl	80011b4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000b7c:	f000 fbb2 	bl	80012e4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000b80:	f000 fcb6 	bl	80014f0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000b84:	f000 fc06 	bl	8001394 <MX_TIM1_Init>
  MX_ADC3_Init();
 8000b88:	f000 fa50 	bl	800102c <MX_ADC3_Init>
  MX_ADC1_Init();
 8000b8c:	f000 f928 	bl	8000de0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000b90:	f000 fade 	bl	8001150 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000b94:	f000 fb4e 	bl	8001234 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4825      	ldr	r0, [pc, #148]	; (8000c30 <main+0xd8>)
 8000b9c:	f00c fc00 	bl	800d3a0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4824      	ldr	r0, [pc, #144]	; (8000c34 <main+0xdc>)
 8000ba4:	f00c fbfc 	bl	800d3a0 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4823      	ldr	r0, [pc, #140]	; (8000c38 <main+0xe0>)
 8000bac:	f00c fbf8 	bl	800d3a0 <HAL_TIM_OC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bb0:	f010 fbce 	bl	8011350 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	2010      	movs	r0, #16
 8000bba:	f010 fdc9 	bl	8011750 <osMessageQueueNew>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <main+0xe4>)
 8000bc2:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <main+0xe8>)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	481e      	ldr	r0, [pc, #120]	; (8000c44 <main+0xec>)
 8000bca:	f010 fc0b 	bl	80113e4 <osThreadNew>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	; (8000c48 <main+0xf0>)
 8000bd2:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000bd4:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <main+0xf4>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	481d      	ldr	r0, [pc, #116]	; (8000c50 <main+0xf8>)
 8000bda:	f010 fc03 	bl	80113e4 <osThreadNew>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <main+0xfc>)
 8000be2:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000be4:	4a1c      	ldr	r2, [pc, #112]	; (8000c58 <main+0x100>)
 8000be6:	2100      	movs	r1, #0
 8000be8:	481c      	ldr	r0, [pc, #112]	; (8000c5c <main+0x104>)
 8000bea:	f010 fbfb 	bl	80113e4 <osThreadNew>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <main+0x108>)
 8000bf2:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <main+0x10c>)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	481b      	ldr	r0, [pc, #108]	; (8000c68 <main+0x110>)
 8000bfa:	f010 fbf3 	bl	80113e4 <osThreadNew>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a1a      	ldr	r2, [pc, #104]	; (8000c6c <main+0x114>)
 8000c02:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000c04:	4a1a      	ldr	r2, [pc, #104]	; (8000c70 <main+0x118>)
 8000c06:	2100      	movs	r1, #0
 8000c08:	481a      	ldr	r0, [pc, #104]	; (8000c74 <main+0x11c>)
 8000c0a:	f010 fbeb 	bl	80113e4 <osThreadNew>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a19      	ldr	r2, [pc, #100]	; (8000c78 <main+0x120>)
 8000c12:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  event_flags = osEventFlagsNew(NULL);
 8000c14:	2000      	movs	r0, #0
 8000c16:	f010 fcb2 	bl	801157e <osEventFlagsNew>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <main+0x124>)
 8000c1e:	6013      	str	r3, [r2, #0]
  system_setup();
 8000c20:	f000 ff3a 	bl	8001a98 <system_setup>
  printf("Starting kernal...\n");
 8000c24:	4816      	ldr	r0, [pc, #88]	; (8000c80 <main+0x128>)
 8000c26:	f014 f8af 	bl	8014d88 <puts>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c2a:	f010 fbb5 	bl	8011398 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000c2e:	e7fe      	b.n	8000c2e <main+0xd6>
 8000c30:	240004c4 	.word	0x240004c4
 8000c34:	24000510 	.word	0x24000510
 8000c38:	2400055c 	.word	0x2400055c
 8000c3c:	24000650 	.word	0x24000650
 8000c40:	08015d00 	.word	0x08015d00
 8000c44:	08001fe1 	.word	0x08001fe1
 8000c48:	2400063c 	.word	0x2400063c
 8000c4c:	08015d24 	.word	0x08015d24
 8000c50:	08002025 	.word	0x08002025
 8000c54:	24000640 	.word	0x24000640
 8000c58:	08015d48 	.word	0x08015d48
 8000c5c:	08002069 	.word	0x08002069
 8000c60:	24000644 	.word	0x24000644
 8000c64:	08015d6c 	.word	0x08015d6c
 8000c68:	080020ad 	.word	0x080020ad
 8000c6c:	24000648 	.word	0x24000648
 8000c70:	08015d90 	.word	0x08015d90
 8000c74:	080020d1 	.word	0x080020d1
 8000c78:	2400064c 	.word	0x2400064c
 8000c7c:	24000660 	.word	0x24000660
 8000c80:	08015c9c 	.word	0x08015c9c

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09c      	sub	sp, #112	; 0x70
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	224c      	movs	r2, #76	; 0x4c
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f013 ff0a 	bl	8014aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f013 ff04 	bl	8014aac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	f008 f863 	bl	8008d70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b32      	ldr	r3, [pc, #200]	; (8000d78 <SystemClock_Config+0xf4>)
 8000cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb2:	4a31      	ldr	r2, [pc, #196]	; (8000d78 <SystemClock_Config+0xf4>)
 8000cb4:	f023 0301 	bic.w	r3, r3, #1
 8000cb8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cba:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <SystemClock_Config+0xf4>)
 8000cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <SystemClock_Config+0xf8>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ccc:	4a2b      	ldr	r2, [pc, #172]	; (8000d7c <SystemClock_Config+0xf8>)
 8000cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <SystemClock_Config+0xf8>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce0:	bf00      	nop
 8000ce2:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <SystemClock_Config+0xf8>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cee:	d1f8      	bne.n	8000ce2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf8:	2340      	movs	r3, #64	; 0x40
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d00:	2300      	movs	r3, #0
 8000d02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000d08:	2309      	movs	r3, #9
 8000d0a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d18:	230c      	movs	r3, #12
 8000d1a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000d20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d24:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f008 f85a 	bl	8008de4 <HAL_RCC_OscConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000d36:	f001 fa0b 	bl	8002150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3a:	233f      	movs	r3, #63	; 0x3f
 8000d3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d4e:	2340      	movs	r3, #64	; 0x40
 8000d50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d56:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	2101      	movs	r1, #1
 8000d60:	4618      	mov	r0, r3
 8000d62:	f008 fc99 	bl	8009698 <HAL_RCC_ClockConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000d6c:	f001 f9f0 	bl	8002150 <Error_Handler>
  }
}
 8000d70:	bf00      	nop
 8000d72:	3770      	adds	r7, #112	; 0x70
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	58000400 	.word	0x58000400
 8000d7c:	58024800 	.word	0x58024800

08000d80 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0b0      	sub	sp, #192	; 0xc0
 8000d84:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d86:	463b      	mov	r3, r7
 8000d88:	22c0      	movs	r2, #192	; 0xc0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f013 fe8d 	bl	8014aac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d92:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d96:	f04f 0300 	mov.w	r3, #0
 8000d9a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000d9e:	2304      	movs	r3, #4
 8000da0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000da2:	2309      	movs	r3, #9
 8000da4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000da6:	2304      	movs	r3, #4
 8000da8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000daa:	2302      	movs	r3, #2
 8000dac:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000db2:	23c0      	movs	r3, #192	; 0xc0
 8000db4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000db6:	2320      	movs	r3, #32
 8000db8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000dba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f009 f833 	bl	8009e34 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000dd4:	f001 f9bc 	bl	8002150 <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	37c0      	adds	r7, #192	; 0xc0
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000de6:	f107 031c 	add.w	r3, r7, #28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e04:	4b7c      	ldr	r3, [pc, #496]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e06:	4a7d      	ldr	r2, [pc, #500]	; (8000ffc <MX_ADC1_Init+0x21c>)
 8000e08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000e0a:	4b7b      	ldr	r3, [pc, #492]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e0c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e12:	4b79      	ldr	r3, [pc, #484]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e14:	2208      	movs	r2, #8
 8000e16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e18:	4b77      	ldr	r3, [pc, #476]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1e:	4b76      	ldr	r3, [pc, #472]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e20:	2204      	movs	r2, #4
 8000e22:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e24:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e2a:	4b73      	ldr	r3, [pc, #460]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000e30:	4b71      	ldr	r3, [pc, #452]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e32:	220b      	movs	r2, #11
 8000e34:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e36:	4b70      	ldr	r3, [pc, #448]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3c:	4b6e      	ldr	r3, [pc, #440]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e42:	4b6d      	ldr	r3, [pc, #436]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000e48:	4b6b      	ldr	r3, [pc, #428]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e4e:	4b6a      	ldr	r3, [pc, #424]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e54:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e56:	4b68      	ldr	r3, [pc, #416]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e5c:	4b66      	ldr	r3, [pc, #408]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e64:	4864      	ldr	r0, [pc, #400]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e66:	f002 faa9 	bl	80033bc <HAL_ADC_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000e70:	f001 f96e 	bl	8002150 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	485e      	ldr	r0, [pc, #376]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000e80:	f003 fbc4 	bl	800460c <HAL_ADCEx_MultiModeConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000e8a:	f001 f961 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e8e:	4b5c      	ldr	r3, [pc, #368]	; (8001000 <MX_ADC1_Init+0x220>)
 8000e90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e92:	2306      	movs	r3, #6
 8000e94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000e96:	2307      	movs	r3, #7
 8000e98:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e9a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e9e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4851      	ldr	r0, [pc, #324]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000eb2:	f002 fd07 	bl	80038c4 <HAL_ADC_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000ebc:	f001 f948 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ec0:	4b50      	ldr	r3, [pc, #320]	; (8001004 <MX_ADC1_Init+0x224>)
 8000ec2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec8:	463b      	mov	r3, r7
 8000eca:	4619      	mov	r1, r3
 8000ecc:	484a      	ldr	r0, [pc, #296]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000ece:	f002 fcf9 	bl	80038c4 <HAL_ADC_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000ed8:	f001 f93a 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000edc:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <MX_ADC1_Init+0x228>)
 8000ede:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ee0:	2312      	movs	r3, #18
 8000ee2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4843      	ldr	r0, [pc, #268]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000eea:	f002 fceb 	bl	80038c4 <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000ef4:	f001 f92c 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ef8:	4b44      	ldr	r3, [pc, #272]	; (800100c <MX_ADC1_Init+0x22c>)
 8000efa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000efc:	2318      	movs	r3, #24
 8000efe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f00:	463b      	mov	r3, r7
 8000f02:	4619      	mov	r1, r3
 8000f04:	483c      	ldr	r0, [pc, #240]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f06:	f002 fcdd 	bl	80038c4 <HAL_ADC_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000f10:	f001 f91e 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f14:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <MX_ADC1_Init+0x230>)
 8000f16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f1c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4619      	mov	r1, r3
 8000f22:	4835      	ldr	r0, [pc, #212]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f24:	f002 fcce 	bl	80038c4 <HAL_ADC_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000f2e:	f001 f90f 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f32:	4b38      	ldr	r3, [pc, #224]	; (8001014 <MX_ADC1_Init+0x234>)
 8000f34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f36:	f44f 7383 	mov.w	r3, #262	; 0x106
 8000f3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	482d      	ldr	r0, [pc, #180]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f42:	f002 fcbf 	bl	80038c4 <HAL_ADC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000f4c:	f001 f900 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f50:	4b31      	ldr	r3, [pc, #196]	; (8001018 <MX_ADC1_Init+0x238>)
 8000f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000f54:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8000f58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4826      	ldr	r0, [pc, #152]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f60:	f002 fcb0 	bl	80038c4 <HAL_ADC_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8000f6a:	f001 f8f1 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f6e:	4b2b      	ldr	r3, [pc, #172]	; (800101c <MX_ADC1_Init+0x23c>)
 8000f70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000f72:	f44f 7389 	mov.w	r3, #274	; 0x112
 8000f76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	481e      	ldr	r0, [pc, #120]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f7e:	f002 fca1 	bl	80038c4 <HAL_ADC_ConfigChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8000f88:	f001 f8e2 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <MX_ADC1_Init+0x240>)
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000f90:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000f94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f96:	463b      	mov	r3, r7
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000f9c:	f002 fc92 	bl	80038c4 <HAL_ADC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8000fa6:	f001 f8d3 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <MX_ADC1_Init+0x244>)
 8000fac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480e      	ldr	r0, [pc, #56]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000fbe:	f002 fc81 	bl	80038c4 <HAL_ADC_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC1_Init+0x1ec>
  {
    Error_Handler();
 8000fc8:	f001 f8c2 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_ADC1_Init+0x248>)
 8000fce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000fd0:	f240 2306 	movw	r3, #518	; 0x206
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <MX_ADC1_Init+0x218>)
 8000fe0:	f002 fc70 	bl	80038c4 <HAL_ADC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC1_Init+0x20e>
  {
    Error_Handler();
 8000fea:	f001 f8b1 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3728      	adds	r7, #40	; 0x28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2400011c 	.word	0x2400011c
 8000ffc:	40022000 	.word	0x40022000
 8001000:	0c900008 	.word	0x0c900008
 8001004:	10c00010 	.word	0x10c00010
 8001008:	14f00020 	.word	0x14f00020
 800100c:	1d500080 	.word	0x1d500080
 8001010:	21800100 	.word	0x21800100
 8001014:	25b00200 	.word	0x25b00200
 8001018:	2a000400 	.word	0x2a000400
 800101c:	2e300800 	.word	0x2e300800
 8001020:	3ac04000 	.word	0x3ac04000
 8001024:	3ef08000 	.word	0x3ef08000
 8001028:	47520000 	.word	0x47520000

0800102c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	1d3b      	adds	r3, r7, #4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
 8001040:	615a      	str	r2, [r3, #20]
 8001042:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001044:	4b3d      	ldr	r3, [pc, #244]	; (800113c <MX_ADC3_Init+0x110>)
 8001046:	4a3e      	ldr	r2, [pc, #248]	; (8001140 <MX_ADC3_Init+0x114>)
 8001048:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800104a:	4b3c      	ldr	r3, [pc, #240]	; (800113c <MX_ADC3_Init+0x110>)
 800104c:	2208      	movs	r2, #8
 800104e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001050:	4b3a      	ldr	r3, [pc, #232]	; (800113c <MX_ADC3_Init+0x110>)
 8001052:	2201      	movs	r2, #1
 8001054:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001056:	4b39      	ldr	r3, [pc, #228]	; (800113c <MX_ADC3_Init+0x110>)
 8001058:	2204      	movs	r2, #4
 800105a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800105c:	4b37      	ldr	r3, [pc, #220]	; (800113c <MX_ADC3_Init+0x110>)
 800105e:	2200      	movs	r2, #0
 8001060:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001062:	4b36      	ldr	r3, [pc, #216]	; (800113c <MX_ADC3_Init+0x110>)
 8001064:	2201      	movs	r2, #1
 8001066:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8001068:	4b34      	ldr	r3, [pc, #208]	; (800113c <MX_ADC3_Init+0x110>)
 800106a:	2204      	movs	r2, #4
 800106c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800106e:	4b33      	ldr	r3, [pc, #204]	; (800113c <MX_ADC3_Init+0x110>)
 8001070:	2200      	movs	r2, #0
 8001072:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001074:	4b31      	ldr	r3, [pc, #196]	; (800113c <MX_ADC3_Init+0x110>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <MX_ADC3_Init+0x110>)
 800107c:	2200      	movs	r2, #0
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001080:	4b2e      	ldr	r3, [pc, #184]	; (800113c <MX_ADC3_Init+0x110>)
 8001082:	2203      	movs	r2, #3
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <MX_ADC3_Init+0x110>)
 8001088:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800108c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800108e:	4b2b      	ldr	r3, [pc, #172]	; (800113c <MX_ADC3_Init+0x110>)
 8001090:	2200      	movs	r2, #0
 8001092:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001094:	4b29      	ldr	r3, [pc, #164]	; (800113c <MX_ADC3_Init+0x110>)
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800109c:	4827      	ldr	r0, [pc, #156]	; (800113c <MX_ADC3_Init+0x110>)
 800109e:	f002 f98d 	bl	80033bc <HAL_ADC_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80010a8:	f001 f852 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <MX_ADC3_Init+0x118>)
 80010ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b0:	2306      	movs	r3, #6
 80010b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80010b4:	2307      	movs	r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010b8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010be:	2304      	movs	r3, #4
 80010c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	481b      	ldr	r0, [pc, #108]	; (800113c <MX_ADC3_Init+0x110>)
 80010d0:	f002 fbf8 	bl	80038c4 <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80010da:	f001 f839 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_ADC3_Init+0x11c>)
 80010e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010e2:	230c      	movs	r3, #12
 80010e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4619      	mov	r1, r3
 80010ea:	4814      	ldr	r0, [pc, #80]	; (800113c <MX_ADC3_Init+0x110>)
 80010ec:	f002 fbea 	bl	80038c4 <HAL_ADC_ConfigChannel>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80010f6:	f001 f82b 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010fa:	2301      	movs	r3, #1
 80010fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010fe:	2312      	movs	r3, #18
 8001100:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4619      	mov	r1, r3
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <MX_ADC3_Init+0x110>)
 8001108:	f002 fbdc 	bl	80038c4 <HAL_ADC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001112:	f001 f81d 	bl	8002150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <MX_ADC3_Init+0x120>)
 8001118:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800111a:	2318      	movs	r3, #24
 800111c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <MX_ADC3_Init+0x110>)
 8001124:	f002 fbce 	bl	80038c4 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800112e:	f001 f80f 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3720      	adds	r7, #32
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	24000180 	.word	0x24000180
 8001140:	58026000 	.word	0x58026000
 8001144:	cb840000 	.word	0xcb840000
 8001148:	cfb80000 	.word	0xcfb80000
 800114c:	04300002 	.word	0x04300002

08001150 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2224      	movs	r2, #36	; 0x24
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f013 fca5 	bl	8014aac <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_DAC1_Init+0x5c>)
 8001164:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_DAC1_Init+0x60>)
 8001166:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001168:	4810      	ldr	r0, [pc, #64]	; (80011ac <MX_DAC1_Init+0x5c>)
 800116a:	f003 fc0d 	bl	8004988 <HAL_DAC_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001174:	f000 ffec 	bl	8002150 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800117c:	230a      	movs	r3, #10
 800117e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001184:	2301      	movs	r3, #1
 8001186:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2200      	movs	r2, #0
 8001190:	4619      	mov	r1, r3
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <MX_DAC1_Init+0x5c>)
 8001194:	f003 fe28 	bl	8004de8 <HAL_DAC_ConfigChannel>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800119e:	f000 ffd7 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	3728      	adds	r7, #40	; 0x28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	240002d4 	.word	0x240002d4
 80011b0:	40007400 	.word	0x40007400

080011b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_I2C1_Init+0x74>)
 80011ba:	4a1c      	ldr	r2, [pc, #112]	; (800122c <MX_I2C1_Init+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_I2C1_Init+0x74>)
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <MX_I2C1_Init+0x7c>)
 80011c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_I2C1_Init+0x74>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_I2C1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <MX_I2C1_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_I2C1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_I2C1_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <MX_I2C1_Init+0x74>)
 80011f0:	f006 ffd6 	bl	80081a0 <HAL_I2C_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011fa:	f000 ffa9 	bl	8002150 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fe:	2100      	movs	r1, #0
 8001200:	4809      	ldr	r0, [pc, #36]	; (8001228 <MX_I2C1_Init+0x74>)
 8001202:	f007 fd1d 	bl	8008c40 <HAL_I2CEx_ConfigAnalogFilter>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800120c:	f000 ffa0 	bl	8002150 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001210:	2100      	movs	r1, #0
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_I2C1_Init+0x74>)
 8001214:	f007 fd5f 	bl	8008cd6 <HAL_I2CEx_ConfigDigitalFilter>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800121e:	f000 ff97 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	24000360 	.word	0x24000360
 800122c:	40005400 	.word	0x40005400
 8001230:	00707cbb 	.word	0x00707cbb

08001234 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001238:	4b28      	ldr	r3, [pc, #160]	; (80012dc <MX_SPI1_Init+0xa8>)
 800123a:	4a29      	ldr	r2, [pc, #164]	; (80012e0 <MX_SPI1_Init+0xac>)
 800123c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800123e:	4b27      	ldr	r3, [pc, #156]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001240:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001244:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001246:	4b25      	ldr	r3, [pc, #148]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001248:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800124c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001250:	220f      	movs	r2, #15
 8001252:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <MX_SPI1_Init+0xa8>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001262:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001266:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_SPI1_Init+0xa8>)
 800126a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800126e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_SPI1_Init+0xa8>)
 800127e:	2200      	movs	r2, #0
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001284:	2200      	movs	r2, #0
 8001286:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_SPI1_Init+0xa8>)
 800128a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001292:	2200      	movs	r2, #0
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_SPI1_Init+0xa8>)
 8001298:	2200      	movs	r2, #0
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_SPI1_Init+0xa8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_SPI1_Init+0xa8>)
 80012c8:	f00b fab2 	bl	800c830 <HAL_SPI_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80012d2:	f000 ff3d 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	240003b4 	.word	0x240003b4
 80012e0:	40013000 	.word	0x40013000

080012e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012e8:	4b28      	ldr	r3, [pc, #160]	; (800138c <MX_SPI2_Init+0xa8>)
 80012ea:	4a29      	ldr	r2, [pc, #164]	; (8001390 <MX_SPI2_Init+0xac>)
 80012ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012ee:	4b27      	ldr	r3, [pc, #156]	; (800138c <MX_SPI2_Init+0xa8>)
 80012f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80012f6:	4b25      	ldr	r3, [pc, #148]	; (800138c <MX_SPI2_Init+0xa8>)
 80012f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012fc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80012fe:	4b23      	ldr	r3, [pc, #140]	; (800138c <MX_SPI2_Init+0xa8>)
 8001300:	220f      	movs	r2, #15
 8001302:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <MX_SPI2_Init+0xa8>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800130a:	4b20      	ldr	r3, [pc, #128]	; (800138c <MX_SPI2_Init+0xa8>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001310:	4b1e      	ldr	r3, [pc, #120]	; (800138c <MX_SPI2_Init+0xa8>)
 8001312:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001316:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <MX_SPI2_Init+0xa8>)
 800131a:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800131e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_SPI2_Init+0xa8>)
 8001322:	2200      	movs	r2, #0
 8001324:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <MX_SPI2_Init+0xa8>)
 8001328:	2200      	movs	r2, #0
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_SPI2_Init+0xa8>)
 800132e:	2200      	movs	r2, #0
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <MX_SPI2_Init+0xa8>)
 8001334:	2200      	movs	r2, #0
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_SPI2_Init+0xa8>)
 800133a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800133e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_SPI2_Init+0xa8>)
 8001342:	2200      	movs	r2, #0
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_SPI2_Init+0xa8>)
 8001348:	2200      	movs	r2, #0
 800134a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_SPI2_Init+0xa8>)
 800134e:	2200      	movs	r2, #0
 8001350:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_SPI2_Init+0xa8>)
 8001354:	2200      	movs	r2, #0
 8001356:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_SPI2_Init+0xa8>)
 800135a:	2200      	movs	r2, #0
 800135c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_SPI2_Init+0xa8>)
 8001360:	2200      	movs	r2, #0
 8001362:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_SPI2_Init+0xa8>)
 8001366:	2200      	movs	r2, #0
 8001368:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_SPI2_Init+0xa8>)
 800136c:	2200      	movs	r2, #0
 800136e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_SPI2_Init+0xa8>)
 8001372:	2200      	movs	r2, #0
 8001374:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_SPI2_Init+0xa8>)
 8001378:	f00b fa5a 	bl	800c830 <HAL_SPI_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001382:	f000 fee5 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2400043c 	.word	0x2400043c
 8001390:	40003800 	.word	0x40003800

08001394 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b09a      	sub	sp, #104	; 0x68
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	615a      	str	r2, [r3, #20]
 80013c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	222c      	movs	r2, #44	; 0x2c
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f013 fb6c 	bl	8014aac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013d4:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013d6:	4a45      	ldr	r2, [pc, #276]	; (80014ec <MX_TIM1_Init+0x158>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 80013da:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013dc:	227f      	movs	r2, #127	; 0x7f
 80013de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80013e6:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013e8:	f24f 4223 	movw	r2, #62499	; 0xf423
 80013ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f4:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <MX_TIM1_Init+0x154>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001400:	4839      	ldr	r0, [pc, #228]	; (80014e8 <MX_TIM1_Init+0x154>)
 8001402:	f00b fe66 	bl	800d0d2 <HAL_TIM_Base_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800140c:	f000 fea0 	bl	8002150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001414:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001416:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800141a:	4619      	mov	r1, r3
 800141c:	4832      	ldr	r0, [pc, #200]	; (80014e8 <MX_TIM1_Init+0x154>)
 800141e:	f00c fca5 	bl	800dd6c <HAL_TIM_ConfigClockSource>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001428:	f000 fe92 	bl	8002150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800142c:	482e      	ldr	r0, [pc, #184]	; (80014e8 <MX_TIM1_Init+0x154>)
 800142e:	f00c f911 	bl	800d654 <HAL_TIM_PWM_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001438:	f000 fe8a 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001448:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800144c:	4619      	mov	r1, r3
 800144e:	4826      	ldr	r0, [pc, #152]	; (80014e8 <MX_TIM1_Init+0x154>)
 8001450:	f00d f9e2 	bl	800e818 <HAL_TIMEx_MasterConfigSynchronization>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800145a:	f000 fe79 	bl	8002150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145e:	2360      	movs	r3, #96	; 0x60
 8001460:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 8001462:	f240 13df 	movw	r3, #479	; 0x1df
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001468:	2300      	movs	r3, #0
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800146c:	2300      	movs	r3, #0
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	4818      	ldr	r0, [pc, #96]	; (80014e8 <MX_TIM1_Init+0x154>)
 8001486:	f00c fb5d 	bl	800db44 <HAL_TIM_PWM_ConfigChannel>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001490:	f000 fe5e 	bl	8002150 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	4619      	mov	r1, r3
 80014c8:	4807      	ldr	r0, [pc, #28]	; (80014e8 <MX_TIM1_Init+0x154>)
 80014ca:	f00d fa33 	bl	800e934 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80014d4:	f000 fe3c 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014d8:	4803      	ldr	r0, [pc, #12]	; (80014e8 <MX_TIM1_Init+0x154>)
 80014da:	f001 f995 	bl	8002808 <HAL_TIM_MspPostInit>

}
 80014de:	bf00      	nop
 80014e0:	3768      	adds	r7, #104	; 0x68
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	240004c4 	.word	0x240004c4
 80014ec:	40010000 	.word	0x40010000

080014f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08e      	sub	sp, #56	; 0x38
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001524:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001528:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <MX_TIM2_Init+0xe8>)
 800152c:	223f      	movs	r2, #63	; 0x3f
 800152e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 8001536:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001538:	f640 4234 	movw	r2, #3124	; 0xc34
 800153c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800154a:	4823      	ldr	r0, [pc, #140]	; (80015d8 <MX_TIM2_Init+0xe8>)
 800154c:	f00b fdc1 	bl	800d0d2 <HAL_TIM_Base_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001556:	f000 fdfb 	bl	8002150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001560:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001564:	4619      	mov	r1, r3
 8001566:	481c      	ldr	r0, [pc, #112]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001568:	f00c fc00 	bl	800dd6c <HAL_TIM_ConfigClockSource>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001572:	f000 fded 	bl	8002150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001576:	4818      	ldr	r0, [pc, #96]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001578:	f00c f86c 	bl	800d654 <HAL_TIM_PWM_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001582:	f000 fde5 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001586:	2320      	movs	r3, #32
 8001588:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	4810      	ldr	r0, [pc, #64]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001596:	f00d f93f 	bl	800e818 <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80015a0:	f000 fdd6 	bl	8002150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a4:	2360      	movs	r3, #96	; 0x60
 80015a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015b4:	463b      	mov	r3, r7
 80015b6:	220c      	movs	r2, #12
 80015b8:	4619      	mov	r1, r3
 80015ba:	4807      	ldr	r0, [pc, #28]	; (80015d8 <MX_TIM2_Init+0xe8>)
 80015bc:	f00c fac2 	bl	800db44 <HAL_TIM_PWM_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80015c6:	f000 fdc3 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015ca:	4803      	ldr	r0, [pc, #12]	; (80015d8 <MX_TIM2_Init+0xe8>)
 80015cc:	f001 f91c 	bl	8002808 <HAL_TIM_MspPostInit>

}
 80015d0:	bf00      	nop
 80015d2:	3738      	adds	r7, #56	; 0x38
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	24000510 	.word	0x24000510

080015dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MX_TIM3_Init+0x94>)
 80015fc:	4a1d      	ldr	r2, [pc, #116]	; (8001674 <MX_TIM3_Init+0x98>)
 80015fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <MX_TIM3_Init+0x94>)
 8001602:	223f      	movs	r2, #63	; 0x3f
 8001604:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_TIM3_Init+0x94>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_TIM3_Init+0x94>)
 800160e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001612:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <MX_TIM3_Init+0x94>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_TIM3_Init+0x94>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001620:	4813      	ldr	r0, [pc, #76]	; (8001670 <MX_TIM3_Init+0x94>)
 8001622:	f00b fd56 	bl	800d0d2 <HAL_TIM_Base_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800162c:	f000 fd90 	bl	8002150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001634:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001636:	f107 0310 	add.w	r3, r7, #16
 800163a:	4619      	mov	r1, r3
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <MX_TIM3_Init+0x94>)
 800163e:	f00c fb95 	bl	800dd6c <HAL_TIM_ConfigClockSource>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001648:	f000 fd82 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_TIM3_Init+0x94>)
 800165a:	f00d f8dd 	bl	800e818 <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001664:	f000 fd74 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	2400055c 	.word	0x2400055c
 8001674:	40000400 	.word	0x40000400

08001678 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <MX_USART1_UART_Init+0x90>)
 800167e:	4a23      	ldr	r2, [pc, #140]	; (800170c <MX_USART1_UART_Init+0x94>)
 8001680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <MX_USART1_UART_Init+0x90>)
 8001684:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <MX_USART1_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <MX_USART1_UART_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MX_USART1_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_USART1_UART_Init+0x90>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b16      	ldr	r3, [pc, #88]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ba:	4b13      	ldr	r3, [pc, #76]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c0:	4811      	ldr	r0, [pc, #68]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016c2:	f00d f9d3 	bl	800ea6c <HAL_UART_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016cc:	f000 fd40 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d0:	2100      	movs	r1, #0
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016d4:	f00f fd2d 	bl	8011132 <HAL_UARTEx_SetTxFifoThreshold>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016de:	f000 fd37 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e2:	2100      	movs	r1, #0
 80016e4:	4808      	ldr	r0, [pc, #32]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016e6:	f00f fd62 	bl	80111ae <HAL_UARTEx_SetRxFifoThreshold>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016f0:	f000 fd2e 	bl	8002150 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <MX_USART1_UART_Init+0x90>)
 80016f6:	f00f fce3 	bl	80110c0 <HAL_UARTEx_DisableFifoMode>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001700:	f000 fd26 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	240005a8 	.word	0x240005a8
 800170c:	40011000 	.word	0x40011000

08001710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_DMA_Init+0x5c>)
 8001718:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800171c:	4a13      	ldr	r2, [pc, #76]	; (800176c <MX_DMA_Init+0x5c>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_DMA_Init+0x5c>)
 8001728:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2105      	movs	r1, #5
 8001738:	200b      	movs	r0, #11
 800173a:	f003 f8fd 	bl	8004938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800173e:	200b      	movs	r0, #11
 8001740:	f003 f914 	bl	800496c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2105      	movs	r1, #5
 8001748:	200c      	movs	r0, #12
 800174a:	f003 f8f5 	bl	8004938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800174e:	200c      	movs	r0, #12
 8001750:	f003 f90c 	bl	800496c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2105      	movs	r1, #5
 8001758:	2010      	movs	r0, #16
 800175a:	f003 f8ed 	bl	8004938 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800175e:	2010      	movs	r0, #16
 8001760:	f003 f904 	bl	800496c <HAL_NVIC_EnableIRQ>

}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	58024400 	.word	0x58024400

08001770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	4b2c      	ldr	r3, [pc, #176]	; (8001838 <MX_GPIO_Init+0xc8>)
 8001788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178c:	4a2a      	ldr	r2, [pc, #168]	; (8001838 <MX_GPIO_Init+0xc8>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001796:	4b28      	ldr	r3, [pc, #160]	; (8001838 <MX_GPIO_Init+0xc8>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <MX_GPIO_Init+0xc8>)
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017aa:	4a23      	ldr	r2, [pc, #140]	; (8001838 <MX_GPIO_Init+0xc8>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <MX_GPIO_Init+0xc8>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <MX_GPIO_Init+0xc8>)
 80017c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c8:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <MX_GPIO_Init+0xc8>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d2:	4b19      	ldr	r3, [pc, #100]	; (8001838 <MX_GPIO_Init+0xc8>)
 80017d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80017e6:	4815      	ldr	r0, [pc, #84]	; (800183c <MX_GPIO_Init+0xcc>)
 80017e8:	f006 fcc0 	bl	800816c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2164      	movs	r1, #100	; 0x64
 80017f0:	4813      	ldr	r0, [pc, #76]	; (8001840 <MX_GPIO_Init+0xd0>)
 80017f2:	f006 fcbb 	bl	800816c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80017f6:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80017fa:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4619      	mov	r1, r3
 800180e:	480b      	ldr	r0, [pc, #44]	; (800183c <MX_GPIO_Init+0xcc>)
 8001810:	f006 fafc 	bl	8007e0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001814:	2364      	movs	r3, #100	; 0x64
 8001816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4619      	mov	r1, r3
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_GPIO_Init+0xd0>)
 800182c:	f006 faee 	bl	8007e0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001830:	bf00      	nop
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	58024400 	.word	0x58024400
 800183c:	58020800 	.word	0x58020800
 8001840:	58020400 	.word	0x58020400

08001844 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af02      	add	r7, sp, #8
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 800184e:	2300      	movs	r3, #0
 8001850:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	b299      	uxth	r1, r3
 8001856:	f107 0208 	add.w	r2, r7, #8
 800185a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2301      	movs	r3, #1
 8001862:	4817      	ldr	r0, [pc, #92]	; (80018c0 <poll_i2c_sensor+0x7c>)
 8001864:	f006 fd38 	bl	80082d8 <HAL_I2C_Master_Transmit>
 8001868:	4603      	mov	r3, r0
 800186a:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 800186c:	7b7b      	ldrb	r3, [r7, #13]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001872:	4814      	ldr	r0, [pc, #80]	; (80018c4 <poll_i2c_sensor+0x80>)
 8001874:	f013 fa88 	bl	8014d88 <puts>
 8001878:	e01c      	b.n	80018b4 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	b299      	uxth	r1, r3
 800187e:	f107 0208 	add.w	r2, r7, #8
 8001882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2302      	movs	r3, #2
 800188a:	480d      	ldr	r0, [pc, #52]	; (80018c0 <poll_i2c_sensor+0x7c>)
 800188c:	f006 fe3c 	bl	8008508 <HAL_I2C_Master_Receive>
 8001890:	4603      	mov	r3, r0
 8001892:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001894:	7b7b      	ldrb	r3, [r7, #13]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 800189a:	480b      	ldr	r0, [pc, #44]	; (80018c8 <poll_i2c_sensor+0x84>)
 800189c:	f013 fa74 	bl	8014d88 <puts>
 80018a0:	e008      	b.n	80018b4 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 80018a2:	7a3b      	ldrb	r3, [r7, #8]
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 80018a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ac:	7a7a      	ldrb	r2, [r7, #9]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	10db      	asrs	r3, r3, #3
 80018b2:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 80018b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	24000360 	.word	0x24000360
 80018c4:	08015cb0 	.word	0x08015cb0
 80018c8:	08015cc0 	.word	0x08015cc0

080018cc <receive_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_spi(SPI_HandleTypeDef spi_handle, uint8_t *buffer)
{
 80018cc:	b084      	sub	sp, #16
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	f107 0c10 	add.w	ip, r7, #16
 80018d8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&spi_handle, (uint8_t*) spi_raw_data, 1, 1);
 80018dc:	1d39      	adds	r1, r7, #4
 80018de:	2301      	movs	r3, #1
 80018e0:	2201      	movs	r2, #1
 80018e2:	f107 0010 	add.w	r0, r7, #16
 80018e6:	f00b f8c7 	bl	800ca78 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 80018ea:	2300      	movs	r3, #0
 80018ec:	71fb      	strb	r3, [r7, #7]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 80018ee:	797b      	ldrb	r3, [r7, #5]
 80018f0:	71bb      	strb	r3, [r7, #6]

	spi_handle.Instance->CR1 |= 1 << 10;
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018fc:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 80018fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001902:	79ba      	ldrb	r2, [r7, #6]
 8001904:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001906:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800190a:	3301      	adds	r3, #1
 800190c:	79fa      	ldrb	r2, [r7, #7]
 800190e:	701a      	strb	r2, [r3, #0]
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800191a:	b004      	add	sp, #16
 800191c:	4770      	bx	lr
	...

08001920 <receive_erpa_adc>:
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];	// SWPmon --
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <receive_erpa_adc+0x30>)
 800192a:	885b      	ldrh	r3, [r3, #2]
 800192c:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5]; 	// TEMP1 -- verified doesn't need to change
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <receive_erpa_adc+0x30>)
 8001930:	895b      	ldrh	r3, [r3, #10]
 8001932:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	89fa      	ldrh	r2, [r7, #14]
 8001938:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3302      	adds	r3, #2
 800193e:	89ba      	ldrh	r2, [r7, #12]
 8001940:	801a      	strh	r2, [r3, #0]
}
 8001942:	bf00      	nop
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	240006e0 	.word	0x240006e0

08001954 <receive_hk_i2c>:
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 800195c:	2390      	movs	r3, #144	; 0x90
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff70 	bl	8001844 <poll_i2c_sensor>
 8001964:	4603      	mov	r3, r0
 8001966:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001968:	2394      	movs	r3, #148	; 0x94
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ff6a 	bl	8001844 <poll_i2c_sensor>
 8001970:	4603      	mov	r3, r0
 8001972:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001974:	2392      	movs	r3, #146	; 0x92
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff64 	bl	8001844 <poll_i2c_sensor>
 800197c:	4603      	mov	r3, r0
 800197e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001980:	2396      	movs	r3, #150	; 0x96
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff5e 	bl	8001844 <poll_i2c_sensor>
 8001988:	4603      	mov	r3, r0
 800198a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	89fa      	ldrh	r2, [r7, #14]
 8001990:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3302      	adds	r3, #2
 8001996:	89ba      	ldrh	r2, [r7, #12]
 8001998:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3304      	adds	r3, #4
 800199e:	897a      	ldrh	r2, [r7, #10]
 80019a0:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3306      	adds	r3, #6
 80019a6:	893a      	ldrh	r2, [r7, #8]
 80019a8:	801a      	strh	r2, [r3, #0]
}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <receive_hk_adc1>:
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];	// BUSVmon -- verified doesn't need to change
 80019bc:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <receive_hk_adc1+0x90>)
 80019be:	8a9b      	ldrh	r3, [r3, #20]
 80019c0:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];	// BUSImon -- verified doesn't need to change
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <receive_hk_adc1+0x90>)
 80019c4:	8a1b      	ldrh	r3, [r3, #16]
 80019c6:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];	// 2v5mon -- verified doesn't need to change
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <receive_hk_adc1+0x90>)
 80019ca:	899b      	ldrh	r3, [r3, #12]
 80019cc:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];	// n3v3mon --
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <receive_hk_adc1+0x90>)
 80019d0:	8a5b      	ldrh	r3, [r3, #18]
 80019d2:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];	// n200v -- verified doesn't need to change
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <receive_hk_adc1+0x90>)
 80019d6:	889b      	ldrh	r3, [r3, #4]
 80019d8:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];	// n800v --
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <receive_hk_adc1+0x90>)
 80019dc:	88db      	ldrh	r3, [r3, #6]
 80019de:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];	// 5vmon --
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <receive_hk_adc1+0x90>)
 80019e2:	89db      	ldrh	r3, [r3, #14]
 80019e4:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];	// 15vmon -- verified doesn't need to change
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <receive_hk_adc1+0x90>)
 80019e8:	891b      	ldrh	r3, [r3, #8]
 80019ea:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];	// 5vrefmon --
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <receive_hk_adc1+0x90>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	8bfa      	ldrh	r2, [r7, #30]
 80019f6:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3302      	adds	r3, #2
 80019fc:	8bba      	ldrh	r2, [r7, #28]
 80019fe:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3304      	adds	r3, #4
 8001a04:	8b7a      	ldrh	r2, [r7, #26]
 8001a06:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	3306      	adds	r3, #6
 8001a0c:	8b3a      	ldrh	r2, [r7, #24]
 8001a0e:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3308      	adds	r3, #8
 8001a14:	8afa      	ldrh	r2, [r7, #22]
 8001a16:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	330a      	adds	r3, #10
 8001a1c:	8aba      	ldrh	r2, [r7, #20]
 8001a1e:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	330c      	adds	r3, #12
 8001a24:	8a7a      	ldrh	r2, [r7, #18]
 8001a26:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	330e      	adds	r3, #14
 8001a2c:	8a3a      	ldrh	r2, [r7, #16]
 8001a2e:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3310      	adds	r3, #16
 8001a34:	89fa      	ldrh	r2, [r7, #14]
 8001a36:	801a      	strh	r2, [r3, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	3724      	adds	r7, #36	; 0x24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	240006e0 	.word	0x240006e0

08001a48 <receive_hk_adc3>:
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <receive_hk_adc3+0x4c>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <receive_hk_adc3+0x4c>)
 8001a58:	885b      	ldrh	r3, [r3, #2]
 8001a5a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2]; 		// n5vmon --
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <receive_hk_adc3+0x4c>)
 8001a5e:	889b      	ldrh	r3, [r3, #4]
 8001a60:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];		// 3v3mon --
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <receive_hk_adc3+0x4c>)
 8001a64:	88db      	ldrh	r3, [r3, #6]
 8001a66:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	89fa      	ldrh	r2, [r7, #14]
 8001a6c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3302      	adds	r3, #2
 8001a72:	89ba      	ldrh	r2, [r7, #12]
 8001a74:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	897a      	ldrh	r2, [r7, #10]
 8001a7c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3306      	adds	r3, #6
 8001a82:	893a      	ldrh	r2, [r7, #8]
 8001a84:	801a      	strh	r2, [r3, #0]
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	24000700 	.word	0x24000700

08001a98 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0

	  TIM2->CCR4 = 312;
 8001a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa0:	f44f 729c 	mov.w	r2, #312	; 0x138
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001aa6:	210c      	movs	r1, #12
 8001aa8:	4818      	ldr	r0, [pc, #96]	; (8001b0c <system_setup+0x74>)
 8001aaa:	f00b fe35 	bl	800d718 <HAL_TIM_PWM_Start>

	  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8001aae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001ab2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ab6:	4816      	ldr	r0, [pc, #88]	; (8001b10 <system_setup+0x78>)
 8001ab8:	f002 fd44 	bl	8004544 <HAL_ADCEx_Calibration_Start>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <system_setup+0x2e>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 8001ac2:	f000 fb45 	bl	8002150 <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 8001ac6:	220b      	movs	r2, #11
 8001ac8:	4912      	ldr	r1, [pc, #72]	; (8001b14 <system_setup+0x7c>)
 8001aca:	4811      	ldr	r0, [pc, #68]	; (8001b10 <system_setup+0x78>)
 8001acc:	f001 fe18 	bl	8003700 <HAL_ADC_Start_DMA>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <system_setup+0x42>
	  	ADC1_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 8001ad6:	f000 fb3b 	bl	8002150 <Error_Handler>
	  	}

	  	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 8001ada:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001ade:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ae2:	480d      	ldr	r0, [pc, #52]	; (8001b18 <system_setup+0x80>)
 8001ae4:	f002 fd2e 	bl	8004544 <HAL_ADCEx_Calibration_Start>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <system_setup+0x5a>
	  			ADC_SINGLE_ENDED) != HAL_OK) {
	  		/* Calibration Error */
	  		Error_Handler();
 8001aee:	f000 fb2f 	bl	8002150 <Error_Handler>
	  	}

	  	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8001af2:	2204      	movs	r2, #4
 8001af4:	4909      	ldr	r1, [pc, #36]	; (8001b1c <system_setup+0x84>)
 8001af6:	4808      	ldr	r0, [pc, #32]	; (8001b18 <system_setup+0x80>)
 8001af8:	f001 fe02 	bl	8003700 <HAL_ADC_Start_DMA>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <system_setup+0x6e>
	  	ADC3_NUM_CHANNELS) != HAL_OK) {
	  		Error_Handler();
 8001b02:	f000 fb25 	bl	8002150 <Error_Handler>
	  	}
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	24000510 	.word	0x24000510
 8001b10:	2400011c 	.word	0x2400011c
 8001b14:	240006e0 	.word	0x240006e0
 8001b18:	24000180 	.word	0x24000180
 8001b1c:	24000700 	.word	0x24000700

08001b20 <create_packet>:


packet_t create_packet(const uint8_t* data, uint16_t size) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f012 ff9d 	bl	8014a70 <malloc>
 8001b36:	4603      	mov	r3, r0
 8001b38:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	88fa      	ldrh	r2, [r7, #6]
 8001b3e:	68b9      	ldr	r1, [r7, #8]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f012 ffa5 	bl	8014a90 <memcpy>
    packet.size = size;
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	82bb      	strh	r3, [r7, #20]
    return packet;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b56:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b0a5      	sub	sp, #148	; 0x94
 8001b68:	af20      	add	r7, sp, #128	; 0x80
    uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001b6a:	2006      	movs	r0, #6
 8001b6c:	f012 ff80 	bl	8014a70 <malloc>
 8001b70:	4603      	mov	r3, r0
 8001b72:	60fb      	str	r3, [r7, #12]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001b74:	2002      	movs	r0, #2
 8001b76:	f012 ff7b 	bl	8014a70 <malloc>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	60bb      	str	r3, [r7, #8]

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_spi(hspi1, pmt_spi);
 8001b7e:	4c1f      	ldr	r4, [pc, #124]	; (8001bfc <sample_pmt+0x98>)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	931e      	str	r3, [sp, #120]	; 0x78
 8001b84:	4668      	mov	r0, sp
 8001b86:	f104 0310 	add.w	r3, r4, #16
 8001b8a:	2278      	movs	r2, #120	; 0x78
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f012 ff7f 	bl	8014a90 <memcpy>
 8001b92:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b96:	f7ff fe99 	bl	80018cc <receive_spi>
#endif

	buffer[0] = PMT_SYNC;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	22bb      	movs	r2, #187	; 0xbb
 8001b9e:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	22bb      	movs	r2, #187	; 0xbb
 8001ba6:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3302      	adds	r3, #2
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3303      	adds	r3, #3
 8001bb4:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <sample_pmt+0x9c>)
 8001bb6:	7812      	ldrb	r2, [r2, #0]
 8001bb8:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	7812      	ldrb	r2, [r2, #0]
 8001bc2:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3305      	adds	r3, #5
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	7852      	ldrb	r2, [r2, #1]
 8001bcc:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8001bce:	463b      	mov	r3, r7
 8001bd0:	2206      	movs	r2, #6
 8001bd2:	68f9      	ldr	r1, [r7, #12]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ffa3 	bl	8001b20 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <sample_pmt+0xa0>)
 8001bdc:	6818      	ldr	r0, [r3, #0]
 8001bde:	4639      	mov	r1, r7
 8001be0:	2300      	movs	r3, #0
 8001be2:	2200      	movs	r2, #0
 8001be4:	f00f fe28 	bl	8011838 <osMessageQueuePut>
	free(buffer);
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f012 ff49 	bl	8014a80 <free>
	free(pmt_spi);
 8001bee:	68b8      	ldr	r0, [r7, #8]
 8001bf0:	f012 ff46 	bl	8014a80 <free>
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd90      	pop	{r4, r7, pc}
 8001bfc:	240003b4 	.word	0x240003b4
 8001c00:	24000654 	.word	0x24000654
 8001c04:	24000650 	.word	0x24000650

08001c08 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b0a7      	sub	sp, #156	; 0x9c
 8001c0c:	af20      	add	r7, sp, #128	; 0x80
    uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001c0e:	200e      	movs	r0, #14
 8001c10:	f012 ff2e 	bl	8014a70 <malloc>
 8001c14:	4603      	mov	r3, r0
 8001c16:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f012 ff29 	bl	8014a70 <malloc>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 8001c22:	2004      	movs	r0, #4
 8001c24:	f012 ff24 	bl	8014a70 <malloc>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	60fb      	str	r3, [r7, #12]
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_spi(hspi2, erpa_spi);
 8001c2c:	4c39      	ldr	r4, [pc, #228]	; (8001d14 <sample_erpa+0x10c>)
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	931e      	str	r3, [sp, #120]	; 0x78
 8001c32:	4668      	mov	r0, sp
 8001c34:	f104 0310 	add.w	r3, r4, #16
 8001c38:	2278      	movs	r2, #120	; 0x78
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f012 ff28 	bl	8014a90 <memcpy>
 8001c40:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c44:	f7ff fe42 	bl	80018cc <receive_spi>
	receive_erpa_adc(erpa_adc);
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f7ff fe69 	bl	8001920 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	22aa      	movs	r2, #170	; 0xaa
 8001c52:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	22aa      	movs	r2, #170	; 0xaa
 8001c5a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	3302      	adds	r3, #2
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3303      	adds	r3, #3
 8001c68:	4a2b      	ldr	r2, [pc, #172]	; (8001d18 <sample_erpa+0x110>)
 8001c6a:	7812      	ldrb	r2, [r2, #0]
 8001c6c:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((0 & 0xFF00) >> 8); 	  		// ENDmon MSB
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
	buffer[5] = (0 & 0xFF);               		// ENDmon LSB
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	3305      	adds	r3, #5
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3306      	adds	r3, #6
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	881a      	ldrh	r2, [r3, #0]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3307      	adds	r3, #7
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3308      	adds	r3, #8
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	701a      	strb	r2, [r3, #0]
	buffer[9] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3302      	adds	r3, #2
 8001cb0:	881a      	ldrh	r2, [r3, #0]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3309      	adds	r3, #9
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((0 & 0xFF00) >> 8);     		// TEMPURATURE 2 MSB
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	330a      	adds	r3, #10
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
	buffer[11] = (0 & 0xFF);                    // TEMPURATURE 2 LSB
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	330b      	adds	r3, #11
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
	buffer[12] = erpa_spi[0];					// ERPA eADC MSB
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	330c      	adds	r3, #12
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	7812      	ldrb	r2, [r2, #0]
 8001cd2:	701a      	strb	r2, [r3, #0]
	buffer[13] = erpa_spi[1];					// ERPA eADC LSB
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	330d      	adds	r3, #13
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	7852      	ldrb	r2, [r2, #1]
 8001cdc:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	220e      	movs	r2, #14
 8001ce2:	6979      	ldr	r1, [r7, #20]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff1b 	bl	8001b20 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8001cea:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <sample_erpa+0x114>)
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	1d39      	adds	r1, r7, #4
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f00f fda0 	bl	8011838 <osMessageQueuePut>
	free(buffer);
 8001cf8:	6978      	ldr	r0, [r7, #20]
 8001cfa:	f012 fec1 	bl	8014a80 <free>
	free(erpa_spi);
 8001cfe:	6938      	ldr	r0, [r7, #16]
 8001d00:	f012 febe 	bl	8014a80 <free>
	free(erpa_adc);
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f012 febb 	bl	8014a80 <free>
}
 8001d0a:	bf00      	nop
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd90      	pop	{r4, r7, pc}
 8001d12:	bf00      	nop
 8001d14:	2400043c 	.word	0x2400043c
 8001d18:	24000655 	.word	0x24000655
 8001d1c:	24000650 	.word	0x24000650

08001d20 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
    uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 8001d26:	2026      	movs	r0, #38	; 0x26
 8001d28:	f012 fea2 	bl	8014a70 <malloc>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	617b      	str	r3, [r7, #20]

	int16_t* hk_i2c = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8001d30:	2008      	movs	r0, #8
 8001d32:	f012 fe9d 	bl	8014a70 <malloc>
 8001d36:	4603      	mov	r3, r0
 8001d38:	613b      	str	r3, [r7, #16]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8001d3a:	2012      	movs	r0, #18
 8001d3c:	f012 fe98 	bl	8014a70 <malloc>
 8001d40:	4603      	mov	r3, r0
 8001d42:	60fb      	str	r3, [r7, #12]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 8001d44:	2008      	movs	r0, #8
 8001d46:	f012 fe93 	bl	8014a70 <malloc>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	60bb      	str	r3, [r7, #8]
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	receive_hk_i2c(hk_i2c);
 8001d4e:	6938      	ldr	r0, [r7, #16]
 8001d50:	f7ff fe00 	bl	8001954 <receive_hk_i2c>
	receive_hk_adc1(hk_adc1);
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f7ff fe2d 	bl	80019b4 <receive_hk_adc1>
	receive_hk_adc3(hk_adc3);
 8001d5a:	68b8      	ldr	r0, [r7, #8]
 8001d5c:	f7ff fe74 	bl	8001a48 <receive_hk_adc3>
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	22cc      	movs	r2, #204	; 0xcc
 8001d64:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	22cc      	movs	r2, #204	; 0xcc
 8001d6c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	3302      	adds	r3, #2
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3303      	adds	r3, #3
 8001d7a:	4a97      	ldr	r2, [pc, #604]	; (8001fd8 <sample_hk+0x2b8>)
 8001d7c:	7812      	ldrb	r2, [r2, #0]
 8001d7e:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	3302      	adds	r3, #2
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	3302      	adds	r3, #2
 8001d96:	881a      	ldrh	r2, [r3, #0]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3305      	adds	r3, #5
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3306      	adds	r3, #6
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	881a      	ldrh	r2, [r3, #0]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3307      	adds	r3, #7
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc2:	121a      	asrs	r2, r3, #8
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3309      	adds	r3, #9
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	3302      	adds	r3, #2
 8001dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de2:	121a      	asrs	r2, r3, #8
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	330a      	adds	r3, #10
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	3302      	adds	r3, #2
 8001df0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	330b      	adds	r3, #11
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	3304      	adds	r3, #4
 8001e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e04:	121a      	asrs	r2, r3, #8
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	330c      	adds	r3, #12
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	3304      	adds	r3, #4
 8001e12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	330d      	adds	r3, #13
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	3306      	adds	r3, #6
 8001e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e26:	121a      	asrs	r2, r3, #8
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	330e      	adds	r3, #14
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	3306      	adds	r3, #6
 8001e34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	330f      	adds	r3, #15
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	0a1b      	lsrs	r3, r3, #8
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3310      	adds	r3, #16
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	881a      	ldrh	r2, [r3, #0]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3311      	adds	r3, #17
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3302      	adds	r3, #2
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	0a1b      	lsrs	r3, r3, #8
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3312      	adds	r3, #18
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	3302      	adds	r3, #2
 8001e72:	881a      	ldrh	r2, [r3, #0]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3313      	adds	r3, #19
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3314      	adds	r3, #20
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3304      	adds	r3, #4
 8001e92:	881a      	ldrh	r2, [r3, #0]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3315      	adds	r3, #21
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3306      	adds	r3, #6
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3316      	adds	r3, #22
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc1[3] & 0xFF);			// HK 3v3mon LSB
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3306      	adds	r3, #6
 8001eb2:	881a      	ldrh	r2, [r3, #0]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3317      	adds	r3, #23
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	330c      	adds	r3, #12
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	3318      	adds	r3, #24
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	330c      	adds	r3, #12
 8001ed2:	881a      	ldrh	r2, [r3, #0]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3319      	adds	r3, #25
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3306      	adds	r3, #6
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	0a1b      	lsrs	r3, r3, #8
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	331a      	adds	r3, #26
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	3306      	adds	r3, #6
 8001ef2:	881a      	ldrh	r2, [r3, #0]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	331b      	adds	r3, #27
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3304      	adds	r3, #4
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	331c      	adds	r3, #28
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc1[2] & 0xFF);			// HK n5vmon LSB
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3304      	adds	r3, #4
 8001f12:	881a      	ldrh	r2, [r3, #0]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	331d      	adds	r3, #29
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	330e      	adds	r3, #14
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	331e      	adds	r3, #30
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	330e      	adds	r3, #14
 8001f32:	881a      	ldrh	r2, [r3, #0]
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	331f      	adds	r3, #31
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3310      	adds	r3, #16
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3320      	adds	r3, #32
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	3310      	adds	r3, #16
 8001f52:	881a      	ldrh	r2, [r3, #0]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3321      	adds	r3, #33	; 0x21
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	3308      	adds	r3, #8
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	3322      	adds	r3, #34	; 0x22
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	3308      	adds	r3, #8
 8001f72:	881a      	ldrh	r2, [r3, #0]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	3323      	adds	r3, #35	; 0x23
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	330a      	adds	r3, #10
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	3324      	adds	r3, #36	; 0x24
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	330a      	adds	r3, #10
 8001f92:	881a      	ldrh	r2, [r3, #0]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	3325      	adds	r3, #37	; 0x25
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 8001f9c:	463b      	mov	r3, r7
 8001f9e:	2226      	movs	r2, #38	; 0x26
 8001fa0:	6979      	ldr	r1, [r7, #20]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fdbc 	bl	8001b20 <create_packet>
    osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <sample_hk+0x2bc>)
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	4639      	mov	r1, r7
 8001fae:	2300      	movs	r3, #0
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f00f fc41 	bl	8011838 <osMessageQueuePut>
	free(buffer);
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f012 fd62 	bl	8014a80 <free>
	free(hk_i2c);
 8001fbc:	6938      	ldr	r0, [r7, #16]
 8001fbe:	f012 fd5f 	bl	8014a80 <free>
	free(hk_adc1);
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f012 fd5c 	bl	8014a80 <free>
	free(hk_adc3);
 8001fc8:	68b8      	ldr	r0, [r7, #8]
 8001fca:	f012 fd59 	bl	8014a80 <free>
}
 8001fce:	bf00      	nop
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	24000656 	.word	0x24000656
 8001fdc:	24000650 	.word	0x24000650

08001fe0 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <PMT_init+0x38>)
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	f00f fb46 	bl	8011684 <osEventFlagsWait>
		if(PMT_ON){
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <PMT_init+0x3c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <PMT_init+0x30>
	    sample_pmt();
 8002000:	f7ff fdb0 	bl	8001b64 <sample_pmt>
		pmt_seq++;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <PMT_init+0x40>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <PMT_init+0x40>)
 800200e:	701a      	strb	r2, [r3, #0]

		}
		osThreadYield();
 8002010:	f00f fa7a 	bl	8011508 <osThreadYield>
	    osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002014:	e7e8      	b.n	8001fe8 <PMT_init+0x8>
 8002016:	bf00      	nop
 8002018:	24000660 	.word	0x24000660
 800201c:	24000657 	.word	0x24000657
 8002020:	24000654 	.word	0x24000654

08002024 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <ERPA_init+0x38>)
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002034:	2200      	movs	r2, #0
 8002036:	2102      	movs	r1, #2
 8002038:	f00f fb24 	bl	8011684 <osEventFlagsWait>
	  if (ERPA_ON)
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <ERPA_init+0x3c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d007      	beq.n	8002054 <ERPA_init+0x30>
	  {
	    sample_erpa();
 8002044:	f7ff fde0 	bl	8001c08 <sample_erpa>
		erpa_seq++;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <ERPA_init+0x40>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	3301      	adds	r3, #1
 800204e:	b2da      	uxtb	r2, r3
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <ERPA_init+0x40>)
 8002052:	701a      	strb	r2, [r3, #0]

	  }
		osThreadYield();
 8002054:	f00f fa58 	bl	8011508 <osThreadYield>
	    osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002058:	e7e8      	b.n	800202c <ERPA_init+0x8>
 800205a:	bf00      	nop
 800205c:	24000660 	.word	0x24000660
 8002060:	24000658 	.word	0x24000658
 8002064:	24000655 	.word	0x24000655

08002068 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

  /* Infinite loop */
  for(;;)
  {
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HK_init+0x38>)
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002078:	2200      	movs	r2, #0
 800207a:	2104      	movs	r1, #4
 800207c:	f00f fb02 	bl	8011684 <osEventFlagsWait>
	  if(HK_ON)
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <HK_init+0x3c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d007      	beq.n	8002098 <HK_init+0x30>
	  {
	    sample_hk();
 8002088:	f7ff fe4a 	bl	8001d20 <sample_hk>
		hk_seq++;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HK_init+0x40>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	3301      	adds	r3, #1
 8002092:	b2da      	uxtb	r2, r3
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <HK_init+0x40>)
 8002096:	701a      	strb	r2, [r3, #0]

	  }
		osThreadYield();
 8002098:	f00f fa36 	bl	8011508 <osThreadYield>
	    osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800209c:	e7e8      	b.n	8002070 <HK_init+0x8>
 800209e:	bf00      	nop
 80020a0:	24000660 	.word	0x24000660
 80020a4:	24000659 	.word	0x24000659
 80020a8:	24000656 	.word	0x24000656

080020ac <UART_RX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
  /* Infinite loop */
  for(;;)
  {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80020b4:	2201      	movs	r2, #1
 80020b6:	4904      	ldr	r1, [pc, #16]	; (80020c8 <UART_RX_init+0x1c>)
 80020b8:	4804      	ldr	r0, [pc, #16]	; (80020cc <UART_RX_init+0x20>)
 80020ba:	f00c fdb5 	bl	800ec28 <HAL_UART_Receive_IT>
		osDelay(5);
 80020be:	2005      	movs	r0, #5
 80020c0:	f00f fa42 	bl	8011548 <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80020c4:	e7f6      	b.n	80020b4 <UART_RX_init+0x8>
 80020c6:	bf00      	nop
 80020c8:	24000664 	.word	0x24000664
 80020cc:	240005a8 	.word	0x240005a8

080020d0 <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
	osStatus_t status;

	while (1) {
	   ; // Insert thread code here...

	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <UART_TX_init+0x50>)
 80020da:	6818      	ldr	r0, [r3, #0]
 80020dc:	f107 010c 	add.w	r1, r7, #12
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020e4:	2200      	movs	r2, #0
 80020e6:	f00f fc07 	bl	80118f8 <osMessageQueueGet>
 80020ea:	6178      	str	r0, [r7, #20]

	   if (status == osOK) {
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d113      	bne.n	800211a <UART_TX_init+0x4a>
	       printf("RTS queue size: %ld\n", osMessageQueueGetCount(mid_MsgQueue));
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <UART_TX_init+0x50>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f00f fc5c 	bl	80119b4 <osMessageQueueGetCount>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4619      	mov	r1, r3
 8002100:	4808      	ldr	r0, [pc, #32]	; (8002124 <UART_TX_init+0x54>)
 8002102:	f012 fdbb 	bl	8014c7c <iprintf>
	       HAL_UART_Transmit(&huart1, msg.array, msg.size, 100);
 8002106:	68f9      	ldr	r1, [r7, #12]
 8002108:	8a3a      	ldrh	r2, [r7, #16]
 800210a:	2364      	movs	r3, #100	; 0x64
 800210c:	4806      	ldr	r0, [pc, #24]	; (8002128 <UART_TX_init+0x58>)
 800210e:	f00c fcfd 	bl	800eb0c <HAL_UART_Transmit>
	       free(msg.array);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4618      	mov	r0, r3
 8002116:	f012 fcb3 	bl	8014a80 <free>
	   }
	   osThreadYield();
 800211a:	f00f f9f5 	bl	8011508 <osThreadYield>
	   status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever); // wait for message
 800211e:	e7db      	b.n	80020d8 <UART_TX_init+0x8>
 8002120:	24000650 	.word	0x24000650
 8002124:	08015cd0 	.word	0x08015cd0
 8002128:	240005a8 	.word	0x240005a8

0800212c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a04      	ldr	r2, [pc, #16]	; (800214c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d101      	bne.n	8002142 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800213e:	f000 feed 	bl	8002f1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40001000 	.word	0x40001000

08002150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002154:	b672      	cpsid	i
}
 8002156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002158:	e7fe      	b.n	8002158 <Error_Handler+0x8>
	...

0800215c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <HAL_MspInit+0x38>)
 8002164:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002168:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <HAL_MspInit+0x38>)
 800216a:	f043 0302 	orr.w	r3, r3, #2
 800216e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_MspInit+0x38>)
 8002174:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002180:	2200      	movs	r2, #0
 8002182:	210f      	movs	r1, #15
 8002184:	f06f 0001 	mvn.w	r0, #1
 8002188:	f002 fbd6 	bl	8004938 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	58024400 	.word	0x58024400

08002198 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08e      	sub	sp, #56	; 0x38
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a7b      	ldr	r2, [pc, #492]	; (80023a4 <HAL_ADC_MspInit+0x20c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	f040 8091 	bne.w	80022de <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80021bc:	4b7a      	ldr	r3, [pc, #488]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 80021be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021c2:	4a79      	ldr	r2, [pc, #484]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 80021c4:	f043 0320 	orr.w	r3, r3, #32
 80021c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80021cc:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 80021ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	623b      	str	r3, [r7, #32]
 80021d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021da:	4b73      	ldr	r3, [pc, #460]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e0:	4a71      	ldr	r2, [pc, #452]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ea:	4b6f      	ldr	r3, [pc, #444]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 80021ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f8:	4b6b      	ldr	r3, [pc, #428]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 80021fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fe:	4a6a      	ldr	r2, [pc, #424]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002208:	4b67      	ldr	r3, [pc, #412]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 800220a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002216:	4b64      	ldr	r3, [pc, #400]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 8002218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800221c:	4a62      	ldr	r2, [pc, #392]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 800221e:	f043 0302 	orr.w	r3, r3, #2
 8002222:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002226:	4b60      	ldr	r3, [pc, #384]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 8002228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002234:	2333      	movs	r3, #51	; 0x33
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002238:	2303      	movs	r3, #3
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002244:	4619      	mov	r1, r3
 8002246:	4859      	ldr	r0, [pc, #356]	; (80023ac <HAL_ADC_MspInit+0x214>)
 8002248:	f005 fde0 	bl	8007e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 800224c:	23ce      	movs	r3, #206	; 0xce
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002250:	2303      	movs	r3, #3
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225c:	4619      	mov	r1, r3
 800225e:	4854      	ldr	r0, [pc, #336]	; (80023b0 <HAL_ADC_MspInit+0x218>)
 8002260:	f005 fdd4 	bl	8007e0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002264:	2303      	movs	r3, #3
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002268:	2303      	movs	r3, #3
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002274:	4619      	mov	r1, r3
 8002276:	484f      	ldr	r0, [pc, #316]	; (80023b4 <HAL_ADC_MspInit+0x21c>)
 8002278:	f005 fdc8 	bl	8007e0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800227c:	4b4e      	ldr	r3, [pc, #312]	; (80023b8 <HAL_ADC_MspInit+0x220>)
 800227e:	4a4f      	ldr	r2, [pc, #316]	; (80023bc <HAL_ADC_MspInit+0x224>)
 8002280:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002282:	4b4d      	ldr	r3, [pc, #308]	; (80023b8 <HAL_ADC_MspInit+0x220>)
 8002284:	2209      	movs	r2, #9
 8002286:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002288:	4b4b      	ldr	r3, [pc, #300]	; (80023b8 <HAL_ADC_MspInit+0x220>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800228e:	4b4a      	ldr	r3, [pc, #296]	; (80023b8 <HAL_ADC_MspInit+0x220>)
 8002290:	2200      	movs	r2, #0
 8002292:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002294:	4b48      	ldr	r3, [pc, #288]	; (80023b8 <HAL_ADC_MspInit+0x220>)
 8002296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800229a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800229c:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <HAL_ADC_MspInit+0x220>)
 800229e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022a4:	4b44      	ldr	r3, [pc, #272]	; (80023b8 <HAL_ADC_MspInit+0x220>)
 80022a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022aa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022ac:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <HAL_ADC_MspInit+0x220>)
 80022ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022b4:	4b40      	ldr	r3, [pc, #256]	; (80023b8 <HAL_ADC_MspInit+0x220>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022ba:	4b3f      	ldr	r3, [pc, #252]	; (80023b8 <HAL_ADC_MspInit+0x220>)
 80022bc:	2200      	movs	r2, #0
 80022be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022c0:	483d      	ldr	r0, [pc, #244]	; (80023b8 <HAL_ADC_MspInit+0x220>)
 80022c2:	f002 ff67 	bl	8005194 <HAL_DMA_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 80022cc:	f7ff ff40 	bl	8002150 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a39      	ldr	r2, [pc, #228]	; (80023b8 <HAL_ADC_MspInit+0x220>)
 80022d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80022d6:	4a38      	ldr	r2, [pc, #224]	; (80023b8 <HAL_ADC_MspInit+0x220>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80022dc:	e05e      	b.n	800239c <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a37      	ldr	r2, [pc, #220]	; (80023c0 <HAL_ADC_MspInit+0x228>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d159      	bne.n	800239c <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80022e8:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 80022ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ee:	4a2e      	ldr	r2, [pc, #184]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 80022f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f8:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 80022fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002306:	4b28      	ldr	r3, [pc, #160]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 8002308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230c:	4a26      	ldr	r2, [pc, #152]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002316:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_ADC_MspInit+0x210>)
 8002318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002324:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002328:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800232c:	f000 fe22 	bl	8002f74 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002330:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002334:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002338:	f000 fe1c 	bl	8002f74 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <HAL_ADC_MspInit+0x22c>)
 800233e:	4a22      	ldr	r2, [pc, #136]	; (80023c8 <HAL_ADC_MspInit+0x230>)
 8002340:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_ADC_MspInit+0x22c>)
 8002344:	2273      	movs	r2, #115	; 0x73
 8002346:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <HAL_ADC_MspInit+0x22c>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <HAL_ADC_MspInit+0x22c>)
 8002350:	2200      	movs	r2, #0
 8002352:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_ADC_MspInit+0x22c>)
 8002356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800235a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_ADC_MspInit+0x22c>)
 800235e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002362:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002364:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <HAL_ADC_MspInit+0x22c>)
 8002366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800236a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800236c:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_ADC_MspInit+0x22c>)
 800236e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002372:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <HAL_ADC_MspInit+0x22c>)
 8002376:	2200      	movs	r2, #0
 8002378:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_ADC_MspInit+0x22c>)
 800237c:	2200      	movs	r2, #0
 800237e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002380:	4810      	ldr	r0, [pc, #64]	; (80023c4 <HAL_ADC_MspInit+0x22c>)
 8002382:	f002 ff07 	bl	8005194 <HAL_DMA_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 800238c:	f7ff fee0 	bl	8002150 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <HAL_ADC_MspInit+0x22c>)
 8002394:	64da      	str	r2, [r3, #76]	; 0x4c
 8002396:	4a0b      	ldr	r2, [pc, #44]	; (80023c4 <HAL_ADC_MspInit+0x22c>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800239c:	bf00      	nop
 800239e:	3738      	adds	r7, #56	; 0x38
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40022000 	.word	0x40022000
 80023a8:	58024400 	.word	0x58024400
 80023ac:	58020800 	.word	0x58020800
 80023b0:	58020000 	.word	0x58020000
 80023b4:	58020400 	.word	0x58020400
 80023b8:	240001e4 	.word	0x240001e4
 80023bc:	40020010 	.word	0x40020010
 80023c0:	58026000 	.word	0x58026000
 80023c4:	2400025c 	.word	0x2400025c
 80023c8:	40020028 	.word	0x40020028

080023cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a34      	ldr	r2, [pc, #208]	; (80024bc <HAL_DAC_MspInit+0xf0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d161      	bne.n	80024b2 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80023ee:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <HAL_DAC_MspInit+0xf4>)
 80023f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023f4:	4a32      	ldr	r2, [pc, #200]	; (80024c0 <HAL_DAC_MspInit+0xf4>)
 80023f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023fe:	4b30      	ldr	r3, [pc, #192]	; (80024c0 <HAL_DAC_MspInit+0xf4>)
 8002400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240c:	4b2c      	ldr	r3, [pc, #176]	; (80024c0 <HAL_DAC_MspInit+0xf4>)
 800240e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002412:	4a2b      	ldr	r2, [pc, #172]	; (80024c0 <HAL_DAC_MspInit+0xf4>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800241c:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <HAL_DAC_MspInit+0xf4>)
 800241e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800242a:	2310      	movs	r3, #16
 800242c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800242e:	2303      	movs	r3, #3
 8002430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4619      	mov	r1, r3
 800243c:	4821      	ldr	r0, [pc, #132]	; (80024c4 <HAL_DAC_MspInit+0xf8>)
 800243e:	f005 fce5 	bl	8007e0c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002442:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <HAL_DAC_MspInit+0xfc>)
 8002444:	4a21      	ldr	r2, [pc, #132]	; (80024cc <HAL_DAC_MspInit+0x100>)
 8002446:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002448:	4b1f      	ldr	r3, [pc, #124]	; (80024c8 <HAL_DAC_MspInit+0xfc>)
 800244a:	2243      	movs	r2, #67	; 0x43
 800244c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800244e:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <HAL_DAC_MspInit+0xfc>)
 8002450:	2240      	movs	r2, #64	; 0x40
 8002452:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002454:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <HAL_DAC_MspInit+0xfc>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800245a:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_DAC_MspInit+0xfc>)
 800245c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002460:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002462:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_DAC_MspInit+0xfc>)
 8002464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002468:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800246a:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <HAL_DAC_MspInit+0xfc>)
 800246c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002470:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002472:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <HAL_DAC_MspInit+0xfc>)
 8002474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002478:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800247a:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <HAL_DAC_MspInit+0xfc>)
 800247c:	2200      	movs	r2, #0
 800247e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_DAC_MspInit+0xfc>)
 8002482:	2200      	movs	r2, #0
 8002484:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002486:	4810      	ldr	r0, [pc, #64]	; (80024c8 <HAL_DAC_MspInit+0xfc>)
 8002488:	f002 fe84 	bl	8005194 <HAL_DMA_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002492:	f7ff fe5d 	bl	8002150 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a0b      	ldr	r2, [pc, #44]	; (80024c8 <HAL_DAC_MspInit+0xfc>)
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_DAC_MspInit+0xfc>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2105      	movs	r1, #5
 80024a6:	2036      	movs	r0, #54	; 0x36
 80024a8:	f002 fa46 	bl	8004938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024ac:	2036      	movs	r0, #54	; 0x36
 80024ae:	f002 fa5d 	bl	800496c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80024b2:	bf00      	nop
 80024b4:	3728      	adds	r7, #40	; 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40007400 	.word	0x40007400
 80024c0:	58024400 	.word	0x58024400
 80024c4:	58020000 	.word	0x58020000
 80024c8:	240002e8 	.word	0x240002e8
 80024cc:	40020088 	.word	0x40020088

080024d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b0ba      	sub	sp, #232	; 0xe8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	22c0      	movs	r2, #192	; 0xc0
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f012 fadb 	bl	8014aac <memset>
  if(hi2c->Instance==I2C1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a27      	ldr	r2, [pc, #156]	; (8002598 <HAL_I2C_MspInit+0xc8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d146      	bne.n	800258e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002500:	f04f 0208 	mov.w	r2, #8
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002512:	f107 0310 	add.w	r3, r7, #16
 8002516:	4618      	mov	r0, r3
 8002518:	f007 fc8c 	bl	8009e34 <HAL_RCCEx_PeriphCLKConfig>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002522:	f7ff fe15 	bl	8002150 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <HAL_I2C_MspInit+0xcc>)
 8002528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252c:	4a1b      	ldr	r2, [pc, #108]	; (800259c <HAL_I2C_MspInit+0xcc>)
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002536:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_I2C_MspInit+0xcc>)
 8002538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002544:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002548:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800254c:	2312      	movs	r3, #18
 800254e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800255e:	2304      	movs	r3, #4
 8002560:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002564:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002568:	4619      	mov	r1, r3
 800256a:	480d      	ldr	r0, [pc, #52]	; (80025a0 <HAL_I2C_MspInit+0xd0>)
 800256c:	f005 fc4e 	bl	8007e0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_I2C_MspInit+0xcc>)
 8002572:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002576:	4a09      	ldr	r2, [pc, #36]	; (800259c <HAL_I2C_MspInit+0xcc>)
 8002578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800257c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_I2C_MspInit+0xcc>)
 8002582:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258a:	60bb      	str	r3, [r7, #8]
 800258c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800258e:	bf00      	nop
 8002590:	37e8      	adds	r7, #232	; 0xe8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40005400 	.word	0x40005400
 800259c:	58024400 	.word	0x58024400
 80025a0:	58020400 	.word	0x58020400

080025a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b0bc      	sub	sp, #240	; 0xf0
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025bc:	f107 0318 	add.w	r3, r7, #24
 80025c0:	22c0      	movs	r2, #192	; 0xc0
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f012 fa71 	bl	8014aac <memset>
  if(hspi->Instance==SPI1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a4c      	ldr	r2, [pc, #304]	; (8002700 <HAL_SPI_MspInit+0x15c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d145      	bne.n	8002660 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80025d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025e4:	f107 0318 	add.w	r3, r7, #24
 80025e8:	4618      	mov	r0, r3
 80025ea:	f007 fc23 	bl	8009e34 <HAL_RCCEx_PeriphCLKConfig>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80025f4:	f7ff fdac 	bl	8002150 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025f8:	4b42      	ldr	r3, [pc, #264]	; (8002704 <HAL_SPI_MspInit+0x160>)
 80025fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025fe:	4a41      	ldr	r2, [pc, #260]	; (8002704 <HAL_SPI_MspInit+0x160>)
 8002600:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002604:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002608:	4b3e      	ldr	r3, [pc, #248]	; (8002704 <HAL_SPI_MspInit+0x160>)
 800260a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800260e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002616:	4b3b      	ldr	r3, [pc, #236]	; (8002704 <HAL_SPI_MspInit+0x160>)
 8002618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800261c:	4a39      	ldr	r2, [pc, #228]	; (8002704 <HAL_SPI_MspInit+0x160>)
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002626:	4b37      	ldr	r3, [pc, #220]	; (8002704 <HAL_SPI_MspInit+0x160>)
 8002628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002634:	2318      	movs	r3, #24
 8002636:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800264c:	2305      	movs	r3, #5
 800264e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002652:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002656:	4619      	mov	r1, r3
 8002658:	482b      	ldr	r0, [pc, #172]	; (8002708 <HAL_SPI_MspInit+0x164>)
 800265a:	f005 fbd7 	bl	8007e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800265e:	e04a      	b.n	80026f6 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a29      	ldr	r2, [pc, #164]	; (800270c <HAL_SPI_MspInit+0x168>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d145      	bne.n	80026f6 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800266a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002676:	2300      	movs	r3, #0
 8002678:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800267a:	f107 0318 	add.w	r3, r7, #24
 800267e:	4618      	mov	r0, r3
 8002680:	f007 fbd8 	bl	8009e34 <HAL_RCCEx_PeriphCLKConfig>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 800268a:	f7ff fd61 	bl	8002150 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <HAL_SPI_MspInit+0x160>)
 8002690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002694:	4a1b      	ldr	r2, [pc, #108]	; (8002704 <HAL_SPI_MspInit+0x160>)
 8002696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800269e:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_SPI_MspInit+0x160>)
 80026a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_SPI_MspInit+0x160>)
 80026ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b2:	4a14      	ldr	r2, [pc, #80]	; (8002704 <HAL_SPI_MspInit+0x160>)
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026bc:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_SPI_MspInit+0x160>)
 80026be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80026ca:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80026ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2300      	movs	r3, #0
 80026e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026e4:	2305      	movs	r3, #5
 80026e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026ee:	4619      	mov	r1, r3
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <HAL_SPI_MspInit+0x164>)
 80026f2:	f005 fb8b 	bl	8007e0c <HAL_GPIO_Init>
}
 80026f6:	bf00      	nop
 80026f8:	37f0      	adds	r7, #240	; 0xf0
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40013000 	.word	0x40013000
 8002704:	58024400 	.word	0x58024400
 8002708:	58020400 	.word	0x58020400
 800270c:	40003800 	.word	0x40003800

08002710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a37      	ldr	r2, [pc, #220]	; (80027fc <HAL_TIM_Base_MspInit+0xec>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d12f      	bne.n	8002782 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002722:	4b37      	ldr	r3, [pc, #220]	; (8002800 <HAL_TIM_Base_MspInit+0xf0>)
 8002724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002728:	4a35      	ldr	r2, [pc, #212]	; (8002800 <HAL_TIM_Base_MspInit+0xf0>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002732:	4b33      	ldr	r3, [pc, #204]	; (8002800 <HAL_TIM_Base_MspInit+0xf0>)
 8002734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8002740:	2200      	movs	r2, #0
 8002742:	2105      	movs	r1, #5
 8002744:	2018      	movs	r0, #24
 8002746:	f002 f8f7 	bl	8004938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800274a:	2018      	movs	r0, #24
 800274c:	f002 f90e 	bl	800496c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2105      	movs	r1, #5
 8002754:	2019      	movs	r0, #25
 8002756:	f002 f8ef 	bl	8004938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800275a:	2019      	movs	r0, #25
 800275c:	f002 f906 	bl	800496c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8002760:	2200      	movs	r2, #0
 8002762:	2105      	movs	r1, #5
 8002764:	201a      	movs	r0, #26
 8002766:	f002 f8e7 	bl	8004938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800276a:	201a      	movs	r0, #26
 800276c:	f002 f8fe 	bl	800496c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002770:	2200      	movs	r2, #0
 8002772:	2105      	movs	r1, #5
 8002774:	201b      	movs	r0, #27
 8002776:	f002 f8df 	bl	8004938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800277a:	201b      	movs	r0, #27
 800277c:	f002 f8f6 	bl	800496c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002780:	e038      	b.n	80027f4 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800278a:	d117      	bne.n	80027bc <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800278c:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_TIM_Base_MspInit+0xf0>)
 800278e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002792:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <HAL_TIM_Base_MspInit+0xf0>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800279c:	4b18      	ldr	r3, [pc, #96]	; (8002800 <HAL_TIM_Base_MspInit+0xf0>)
 800279e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80027aa:	2200      	movs	r2, #0
 80027ac:	2105      	movs	r1, #5
 80027ae:	201c      	movs	r0, #28
 80027b0:	f002 f8c2 	bl	8004938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027b4:	201c      	movs	r0, #28
 80027b6:	f002 f8d9 	bl	800496c <HAL_NVIC_EnableIRQ>
}
 80027ba:	e01b      	b.n	80027f4 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a10      	ldr	r2, [pc, #64]	; (8002804 <HAL_TIM_Base_MspInit+0xf4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d116      	bne.n	80027f4 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <HAL_TIM_Base_MspInit+0xf0>)
 80027c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027cc:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <HAL_TIM_Base_MspInit+0xf0>)
 80027ce:	f043 0302 	orr.w	r3, r3, #2
 80027d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_TIM_Base_MspInit+0xf0>)
 80027d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2105      	movs	r1, #5
 80027e8:	201d      	movs	r0, #29
 80027ea:	f002 f8a5 	bl	8004938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027ee:	201d      	movs	r0, #29
 80027f0:	f002 f8bc 	bl	800496c <HAL_NVIC_EnableIRQ>
}
 80027f4:	bf00      	nop
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40010000 	.word	0x40010000
 8002800:	58024400 	.word	0x58024400
 8002804:	40000400 	.word	0x40000400

08002808 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a26      	ldr	r2, [pc, #152]	; (80028c0 <HAL_TIM_MspPostInit+0xb8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d120      	bne.n	800286c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <HAL_TIM_MspPostInit+0xbc>)
 800282c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002830:	4a24      	ldr	r2, [pc, #144]	; (80028c4 <HAL_TIM_MspPostInit+0xbc>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800283a:	4b22      	ldr	r3, [pc, #136]	; (80028c4 <HAL_TIM_MspPostInit+0xbc>)
 800283c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800284c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800285a:	2301      	movs	r3, #1
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	4619      	mov	r1, r3
 8002864:	4818      	ldr	r0, [pc, #96]	; (80028c8 <HAL_TIM_MspPostInit+0xc0>)
 8002866:	f005 fad1 	bl	8007e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800286a:	e024      	b.n	80028b6 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002874:	d11f      	bne.n	80028b6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002876:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HAL_TIM_MspPostInit+0xbc>)
 8002878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800287c:	4a11      	ldr	r2, [pc, #68]	; (80028c4 <HAL_TIM_MspPostInit+0xbc>)
 800287e:	f043 0302 	orr.w	r3, r3, #2
 8002882:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <HAL_TIM_MspPostInit+0xbc>)
 8002888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002894:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289a:	2302      	movs	r3, #2
 800289c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028a6:	2301      	movs	r3, #1
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	4619      	mov	r1, r3
 80028b0:	4806      	ldr	r0, [pc, #24]	; (80028cc <HAL_TIM_MspPostInit+0xc4>)
 80028b2:	f005 faab 	bl	8007e0c <HAL_GPIO_Init>
}
 80028b6:	bf00      	nop
 80028b8:	3728      	adds	r7, #40	; 0x28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40010000 	.word	0x40010000
 80028c4:	58024400 	.word	0x58024400
 80028c8:	58020000 	.word	0x58020000
 80028cc:	58020400 	.word	0x58020400

080028d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b0ba      	sub	sp, #232	; 0xe8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	22c0      	movs	r2, #192	; 0xc0
 80028ee:	2100      	movs	r1, #0
 80028f0:	4618      	mov	r0, r3
 80028f2:	f012 f8db 	bl	8014aac <memset>
  if(huart->Instance==USART1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a2b      	ldr	r2, [pc, #172]	; (80029a8 <HAL_UART_MspInit+0xd8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d14e      	bne.n	800299e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002900:	f04f 0201 	mov.w	r2, #1
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002912:	f107 0310 	add.w	r3, r7, #16
 8002916:	4618      	mov	r0, r3
 8002918:	f007 fa8c 	bl	8009e34 <HAL_RCCEx_PeriphCLKConfig>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002922:	f7ff fc15 	bl	8002150 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <HAL_UART_MspInit+0xdc>)
 8002928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800292c:	4a1f      	ldr	r2, [pc, #124]	; (80029ac <HAL_UART_MspInit+0xdc>)
 800292e:	f043 0310 	orr.w	r3, r3, #16
 8002932:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002936:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <HAL_UART_MspInit+0xdc>)
 8002938:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_UART_MspInit+0xdc>)
 8002946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294a:	4a18      	ldr	r2, [pc, #96]	; (80029ac <HAL_UART_MspInit+0xdc>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002954:	4b15      	ldr	r3, [pc, #84]	; (80029ac <HAL_UART_MspInit+0xdc>)
 8002956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002962:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002966:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800297c:	2307      	movs	r3, #7
 800297e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002982:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002986:	4619      	mov	r1, r3
 8002988:	4809      	ldr	r0, [pc, #36]	; (80029b0 <HAL_UART_MspInit+0xe0>)
 800298a:	f005 fa3f 	bl	8007e0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	2105      	movs	r1, #5
 8002992:	2025      	movs	r0, #37	; 0x25
 8002994:	f001 ffd0 	bl	8004938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002998:	2025      	movs	r0, #37	; 0x25
 800299a:	f001 ffe7 	bl	800496c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800299e:	bf00      	nop
 80029a0:	37e8      	adds	r7, #232	; 0xe8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40011000 	.word	0x40011000
 80029ac:	58024400 	.word	0x58024400
 80029b0:	58020000 	.word	0x58020000

080029b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b090      	sub	sp, #64	; 0x40
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b0f      	cmp	r3, #15
 80029c0:	d827      	bhi.n	8002a12 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80029c2:	2200      	movs	r2, #0
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	2036      	movs	r0, #54	; 0x36
 80029c8:	f001 ffb6 	bl	8004938 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029cc:	2036      	movs	r0, #54	; 0x36
 80029ce:	f001 ffcd 	bl	800496c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80029d2:	4a29      	ldr	r2, [pc, #164]	; (8002a78 <HAL_InitTick+0xc4>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_InitTick+0xc8>)
 80029da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029de:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <HAL_InitTick+0xc8>)
 80029e0:	f043 0310 	orr.w	r3, r3, #16
 80029e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_InitTick+0xc8>)
 80029ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029f6:	f107 0210 	add.w	r2, r7, #16
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f007 f9d5 	bl	8009db0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a08:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d106      	bne.n	8002a1e <HAL_InitTick+0x6a>
 8002a10:	e001      	b.n	8002a16 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e02b      	b.n	8002a6e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a16:	f007 f99f 	bl	8009d58 <HAL_RCC_GetPCLK1Freq>
 8002a1a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002a1c:	e004      	b.n	8002a28 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a1e:	f007 f99b 	bl	8009d58 <HAL_RCC_GetPCLK1Freq>
 8002a22:	4603      	mov	r3, r0
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2a:	4a15      	ldr	r2, [pc, #84]	; (8002a80 <HAL_InitTick+0xcc>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	0c9b      	lsrs	r3, r3, #18
 8002a32:	3b01      	subs	r3, #1
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <HAL_InitTick+0xd0>)
 8002a38:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <HAL_InitTick+0xd4>)
 8002a3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_InitTick+0xd0>)
 8002a3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a44:	4a0f      	ldr	r2, [pc, #60]	; (8002a84 <HAL_InitTick+0xd0>)
 8002a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <HAL_InitTick+0xd0>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_InitTick+0xd0>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002a56:	480b      	ldr	r0, [pc, #44]	; (8002a84 <HAL_InitTick+0xd0>)
 8002a58:	f00a fb3b 	bl	800d0d2 <HAL_TIM_Base_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d104      	bne.n	8002a6c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002a62:	4808      	ldr	r0, [pc, #32]	; (8002a84 <HAL_InitTick+0xd0>)
 8002a64:	f00a fc24 	bl	800d2b0 <HAL_TIM_Base_Start_IT>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	e000      	b.n	8002a6e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3740      	adds	r7, #64	; 0x40
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	24000090 	.word	0x24000090
 8002a7c:	58024400 	.word	0x58024400
 8002a80:	431bde83 	.word	0x431bde83
 8002a84:	24000708 	.word	0x24000708
 8002a88:	40001000 	.word	0x40001000

08002a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002a90:	e7fe      	b.n	8002a90 <NMI_Handler+0x4>

08002a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a96:	e7fe      	b.n	8002a96 <HardFault_Handler+0x4>

08002a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a9c:	e7fe      	b.n	8002a9c <MemManage_Handler+0x4>

08002a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aa2:	e7fe      	b.n	8002aa2 <BusFault_Handler+0x4>

08002aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002aa8:	e7fe      	b.n	8002aa8 <UsageFault_Handler+0x4>

08002aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002abc:	4802      	ldr	r0, [pc, #8]	; (8002ac8 <DMA1_Stream0_IRQHandler+0x10>)
 8002abe:	f003 fe93 	bl	80067e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	240001e4 	.word	0x240001e4

08002acc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <DMA1_Stream1_IRQHandler+0x10>)
 8002ad2:	f003 fe89 	bl	80067e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	2400025c 	.word	0x2400025c

08002ae0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002ae4:	4802      	ldr	r0, [pc, #8]	; (8002af0 <DMA1_Stream5_IRQHandler+0x10>)
 8002ae6:	f003 fe7f 	bl	80067e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	240002e8 	.word	0x240002e8

08002af4 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <TIM1_BRK_IRQHandler+0x10>)
 8002afa:	f00a ff1b 	bl	800d934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	240004c4 	.word	0x240004c4

08002b08 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b0c:	4802      	ldr	r0, [pc, #8]	; (8002b18 <TIM1_UP_IRQHandler+0x10>)
 8002b0e:	f00a ff11 	bl	800d934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	240004c4 	.word	0x240004c4

08002b1c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b20:	4802      	ldr	r0, [pc, #8]	; (8002b2c <TIM1_TRG_COM_IRQHandler+0x10>)
 8002b22:	f00a ff07 	bl	800d934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	240004c4 	.word	0x240004c4

08002b30 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <TIM1_CC_IRQHandler+0x10>)
 8002b36:	f00a fefd 	bl	800d934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	240004c4 	.word	0x240004c4

08002b44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <TIM2_IRQHandler+0x10>)
 8002b4a:	f00a fef3 	bl	800d934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	24000510 	.word	0x24000510

08002b58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <TIM3_IRQHandler+0x10>)
 8002b5e:	f00a fee9 	bl	800d934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	2400055c 	.word	0x2400055c

08002b6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <USART1_IRQHandler+0x10>)
 8002b72:	f00c f8a5 	bl	800ecc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	240005a8 	.word	0x240005a8

08002b80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <TIM6_DAC_IRQHandler+0x20>)
 8002b86:	791b      	ldrb	r3, [r3, #4]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8002b8e:	4804      	ldr	r0, [pc, #16]	; (8002ba0 <TIM6_DAC_IRQHandler+0x20>)
 8002b90:	f002 f881 	bl	8004c96 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002b94:	4803      	ldr	r0, [pc, #12]	; (8002ba4 <TIM6_DAC_IRQHandler+0x24>)
 8002b96:	f00a fecd 	bl	800d934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	240002d4 	.word	0x240002d4
 8002ba4:	24000708 	.word	0x24000708

08002ba8 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8002bb2:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <ITM_SendChar+0x48>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a0e      	ldr	r2, [pc, #56]	; (8002bf0 <ITM_SendChar+0x48>)
 8002bb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bbc:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <ITM_SendChar+0x4c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a0c      	ldr	r2, [pc, #48]	; (8002bf4 <ITM_SendChar+0x4c>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8002bca:	bf00      	nop
 8002bcc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f8      	beq.n	8002bcc <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8002bda:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	6013      	str	r3, [r2, #0]
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000edfc 	.word	0xe000edfc
 8002bf4:	e0000e00 	.word	0xe0000e00

08002bf8 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
 8002c08:	e00a      	b.n	8002c20 <_read+0x28>
		*ptr++ = __io_getchar();
 8002c0a:	f3af 8000 	nop.w
 8002c0e:	4601      	mov	r1, r0
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	60ba      	str	r2, [r7, #8]
 8002c16:	b2ca      	uxtb	r2, r1
 8002c18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	dbf0      	blt.n	8002c0a <_read+0x12>
	}

	return len;
 8002c28:	687b      	ldr	r3, [r7, #4]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	e009      	b.n	8002c58 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	60ba      	str	r2, [r7, #8]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ffab 	bl	8002ba8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	3301      	adds	r3, #1
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	dbf1      	blt.n	8002c44 <_write+0x12>
	}
	return len;
 8002c60:	687b      	ldr	r3, [r7, #4]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <_close>:

int _close(int file) {
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c92:	605a      	str	r2, [r3, #4]
	return 0;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <_isatty>:

int _isatty(int file) {
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8002caa:	2301      	movs	r3, #1
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002cdc:	4a14      	ldr	r2, [pc, #80]	; (8002d30 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8002cde:	4b15      	ldr	r3, [pc, #84]	; (8002d34 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002ce8:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <_sbrk+0x64>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8002cf0:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <_sbrk+0x64>)
 8002cf2:	4a12      	ldr	r2, [pc, #72]	; (8002d3c <_sbrk+0x68>)
 8002cf4:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <_sbrk+0x64>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d207      	bcs.n	8002d14 <_sbrk+0x40>
		errno = ENOMEM;
 8002d04:	f011 fe8a 	bl	8014a1c <__errno>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	220c      	movs	r2, #12
 8002d0c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d12:	e009      	b.n	8002d28 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002d14:	4b08      	ldr	r3, [pc, #32]	; (8002d38 <_sbrk+0x64>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002d1a:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <_sbrk+0x64>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <_sbrk+0x64>)
 8002d24:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002d26:	68fb      	ldr	r3, [r7, #12]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	24080000 	.word	0x24080000
 8002d34:	00000400 	.word	0x00000400
 8002d38:	24000754 	.word	0x24000754
 8002d3c:	240050c0 	.word	0x240050c0

08002d40 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8002d44:	4b37      	ldr	r3, [pc, #220]	; (8002e24 <SystemInit+0xe4>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	4a36      	ldr	r2, [pc, #216]	; (8002e24 <SystemInit+0xe4>)
 8002d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002d54:	4b34      	ldr	r3, [pc, #208]	; (8002e28 <SystemInit+0xe8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	2b06      	cmp	r3, #6
 8002d5e:	d807      	bhi.n	8002d70 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002d60:	4b31      	ldr	r3, [pc, #196]	; (8002e28 <SystemInit+0xe8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f023 030f 	bic.w	r3, r3, #15
 8002d68:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <SystemInit+0xe8>)
 8002d6a:	f043 0307 	orr.w	r3, r3, #7
 8002d6e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8002d70:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <SystemInit+0xec>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a2d      	ldr	r2, [pc, #180]	; (8002e2c <SystemInit+0xec>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <SystemInit+0xec>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8002d82:	4b2a      	ldr	r3, [pc, #168]	; (8002e2c <SystemInit+0xec>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4929      	ldr	r1, [pc, #164]	; (8002e2c <SystemInit+0xec>)
 8002d88:	4b29      	ldr	r3, [pc, #164]	; (8002e30 <SystemInit+0xf0>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002d8e:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <SystemInit+0xe8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d007      	beq.n	8002daa <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8002d9a:	4b23      	ldr	r3, [pc, #140]	; (8002e28 <SystemInit+0xe8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 030f 	bic.w	r3, r3, #15
 8002da2:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <SystemInit+0xe8>)
 8002da4:	f043 0307 	orr.w	r3, r3, #7
 8002da8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8002daa:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <SystemInit+0xec>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8002db0:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <SystemInit+0xec>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8002db6:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <SystemInit+0xec>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	; (8002e2c <SystemInit+0xec>)
 8002dbe:	4a1d      	ldr	r2, [pc, #116]	; (8002e34 <SystemInit+0xf4>)
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8002dc2:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <SystemInit+0xec>)
 8002dc4:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <SystemInit+0xf8>)
 8002dc6:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8002dc8:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <SystemInit+0xec>)
 8002dca:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <SystemInit+0xfc>)
 8002dcc:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8002dce:	4b17      	ldr	r3, [pc, #92]	; (8002e2c <SystemInit+0xec>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <SystemInit+0xec>)
 8002dd6:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <SystemInit+0xfc>)
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8002dda:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <SystemInit+0xec>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <SystemInit+0xec>)
 8002de2:	4a16      	ldr	r2, [pc, #88]	; (8002e3c <SystemInit+0xfc>)
 8002de4:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002de6:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <SystemInit+0xec>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8002dec:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <SystemInit+0xec>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <SystemInit+0xec>)
 8002df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df6:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <SystemInit+0xec>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <SystemInit+0x100>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <SystemInit+0x104>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e0a:	d202      	bcs.n	8002e12 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002e0c:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <SystemInit+0x108>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <SystemInit+0x10c>)
 8002e14:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002e18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00
 8002e28:	52002000 	.word	0x52002000
 8002e2c:	58024400 	.word	0x58024400
 8002e30:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e34:	02020200 	.word	0x02020200
 8002e38:	01ff0000 	.word	0x01ff0000
 8002e3c:	01010280 	.word	0x01010280
 8002e40:	5c001000 	.word	0x5c001000
 8002e44:	ffff0000 	.word	0xffff0000
 8002e48:	51008108 	.word	0x51008108
 8002e4c:	52004000 	.word	0x52004000

08002e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e54:	f7ff ff74 	bl	8002d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e58:	480c      	ldr	r0, [pc, #48]	; (8002e8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e5a:	490d      	ldr	r1, [pc, #52]	; (8002e90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e60:	e002      	b.n	8002e68 <LoopCopyDataInit>

08002e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e66:	3304      	adds	r3, #4

08002e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e6c:	d3f9      	bcc.n	8002e62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e70:	4c0a      	ldr	r4, [pc, #40]	; (8002e9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e74:	e001      	b.n	8002e7a <LoopFillZerobss>

08002e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e78:	3204      	adds	r2, #4

08002e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e7c:	d3fb      	bcc.n	8002e76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e7e:	f011 fdd3 	bl	8014a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e82:	f7fd fe69 	bl	8000b58 <main>
  bx  lr
 8002e86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e88:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002e8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e90:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8002e94:	08015e9c 	.word	0x08015e9c
  ldr r2, =_sbss
 8002e98:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8002e9c:	240050bc 	.word	0x240050bc

08002ea0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ea0:	e7fe      	b.n	8002ea0 <ADC3_IRQHandler>
	...

08002ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eaa:	2003      	movs	r0, #3
 8002eac:	f001 fd39 	bl	8004922 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002eb0:	f006 fda8 	bl	8009a04 <HAL_RCC_GetSysClockFreq>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_Init+0x68>)
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	4913      	ldr	r1, [pc, #76]	; (8002f10 <HAL_Init+0x6c>)
 8002ec2:	5ccb      	ldrb	r3, [r1, r3]
 8002ec4:	f003 031f 	and.w	r3, r3, #31
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ecc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_Init+0x68>)
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <HAL_Init+0x6c>)
 8002ed8:	5cd3      	ldrb	r3, [r2, r3]
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	4a0b      	ldr	r2, [pc, #44]	; (8002f14 <HAL_Init+0x70>)
 8002ee6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ee8:	4a0b      	ldr	r2, [pc, #44]	; (8002f18 <HAL_Init+0x74>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eee:	2005      	movs	r0, #5
 8002ef0:	f7ff fd60 	bl	80029b4 <HAL_InitTick>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e002      	b.n	8002f04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002efe:	f7ff f92d 	bl	800215c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	58024400 	.word	0x58024400
 8002f10:	08015db4 	.word	0x08015db4
 8002f14:	2400008c 	.word	0x2400008c
 8002f18:	24000088 	.word	0x24000088

08002f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_IncTick+0x20>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_IncTick+0x24>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <HAL_IncTick+0x24>)
 8002f2e:	6013      	str	r3, [r2, #0]
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	24000094 	.word	0x24000094
 8002f40:	24000758 	.word	0x24000758

08002f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return uwTick;
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <HAL_GetTick+0x14>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	24000758 	.word	0x24000758

08002f5c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_GetREVID+0x14>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	0c1b      	lsrs	r3, r3, #16
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	5c001000 	.word	0x5c001000

08002f74 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002f7e:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	401a      	ands	r2, r3
 8002f88:	4904      	ldr	r1, [pc, #16]	; (8002f9c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	58000400 	.word	0x58000400

08002fa0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
 8002fce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	609a      	str	r2, [r3, #8]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3360      	adds	r3, #96	; 0x60
 800301a:	461a      	mov	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	430b      	orrs	r3, r1
 8003036:	431a      	orrs	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800303c:	bf00      	nop
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	431a      	orrs	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	611a      	str	r2, [r3, #16]
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800307a:	b480      	push	{r7}
 800307c:	b087      	sub	sp, #28
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	3360      	adds	r3, #96	; 0x60
 800308a:	461a      	mov	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	431a      	orrs	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	601a      	str	r2, [r3, #0]
  }
}
 80030a4:	bf00      	nop
 80030a6:	371c      	adds	r7, #28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b087      	sub	sp, #28
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3330      	adds	r3, #48	; 0x30
 80030e6:	461a      	mov	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	4413      	add	r3, r2
 80030f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	211f      	movs	r1, #31
 8003102:	fa01 f303 	lsl.w	r3, r1, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	401a      	ands	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	0e9b      	lsrs	r3, r3, #26
 800310e:	f003 011f 	and.w	r1, r3, #31
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	fa01 f303 	lsl.w	r3, r1, r3
 800311c:	431a      	orrs	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003122:	bf00      	nop
 8003124:	371c      	adds	r7, #28
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f023 0203 	bic.w	r2, r3, #3
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	60da      	str	r2, [r3, #12]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3314      	adds	r3, #20
 8003164:	461a      	mov	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	0e5b      	lsrs	r3, r3, #25
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	4413      	add	r3, r2
 8003172:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	0d1b      	lsrs	r3, r3, #20
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2107      	movs	r1, #7
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	401a      	ands	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	0d1b      	lsrs	r3, r3, #20
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	fa01 f303 	lsl.w	r3, r1, r3
 8003198:	431a      	orrs	r2, r3
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800319e:	bf00      	nop
 80031a0:	371c      	adds	r7, #28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031c4:	43db      	mvns	r3, r3
 80031c6:	401a      	ands	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f003 0318 	and.w	r3, r3, #24
 80031ce:	4908      	ldr	r1, [pc, #32]	; (80031f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80031d0:	40d9      	lsrs	r1, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	400b      	ands	r3, r1
 80031d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031da:	431a      	orrs	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80031e2:	bf00      	nop
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	000fffff 	.word	0x000fffff

080031f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 031f 	and.w	r3, r3, #31
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	4b04      	ldr	r3, [pc, #16]	; (8003230 <LL_ADC_DisableDeepPowerDown+0x20>)
 800321e:	4013      	ands	r3, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6093      	str	r3, [r2, #8]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	5fffffc0 	.word	0x5fffffc0

08003234 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003248:	d101      	bne.n	800324e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <LL_ADC_EnableInternalRegulator+0x24>)
 800326a:	4013      	ands	r3, r2
 800326c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	6fffffc0 	.word	0x6fffffc0

08003284 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003294:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003298:	d101      	bne.n	800329e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <LL_ADC_Enable+0x24>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	f043 0201 	orr.w	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	7fffffc0 	.word	0x7fffffc0

080032d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <LL_ADC_Disable+0x24>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	f043 0202 	orr.w	r2, r3, #2
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	7fffffc0 	.word	0x7fffffc0

080032fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <LL_ADC_IsEnabled+0x18>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <LL_ADC_IsEnabled+0x1a>
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b02      	cmp	r3, #2
 8003334:	d101      	bne.n	800333a <LL_ADC_IsDisableOngoing+0x18>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <LL_ADC_IsDisableOngoing+0x1a>
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	4b05      	ldr	r3, [pc, #20]	; (800336c <LL_ADC_REG_StartConversion+0x24>)
 8003356:	4013      	ands	r3, r2
 8003358:	f043 0204 	orr.w	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	7fffffc0 	.word	0x7fffffc0

08003370 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b04      	cmp	r3, #4
 8003382:	d101      	bne.n	8003388 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d101      	bne.n	80033ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033bc:	b590      	push	{r4, r7, lr}
 80033be:	b089      	sub	sp, #36	; 0x24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e18f      	b.n	80036f6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d109      	bne.n	80033f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7fe fed7 	bl	8002198 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff ff19 	bl	8003234 <LL_ADC_IsDeepPowerDownEnabled>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d004      	beq.n	8003412 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff feff 	bl	8003210 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff ff34 	bl	8003284 <LL_ADC_IsInternalRegulatorEnabled>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d114      	bne.n	800344c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ff18 	bl	800325c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800342c:	4b87      	ldr	r3, [pc, #540]	; (800364c <HAL_ADC_Init+0x290>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	4a87      	ldr	r2, [pc, #540]	; (8003650 <HAL_ADC_Init+0x294>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	099b      	lsrs	r3, r3, #6
 800343a:	3301      	adds	r3, #1
 800343c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800343e:	e002      	b.n	8003446 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	3b01      	subs	r3, #1
 8003444:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f9      	bne.n	8003440 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff ff17 	bl	8003284 <LL_ADC_IsInternalRegulatorEnabled>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10d      	bne.n	8003478 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	f043 0210 	orr.w	r2, r3, #16
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	f043 0201 	orr.w	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff77 	bl	8003370 <LL_ADC_REG_IsConversionOngoing>
 8003482:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	f040 8129 	bne.w	80036e4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b00      	cmp	r3, #0
 8003496:	f040 8125 	bne.w	80036e4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034a2:	f043 0202 	orr.w	r2, r3, #2
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff ff24 	bl	80032fc <LL_ADC_IsEnabled>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d136      	bne.n	8003528 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a65      	ldr	r2, [pc, #404]	; (8003654 <HAL_ADC_Init+0x298>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d004      	beq.n	80034ce <HAL_ADC_Init+0x112>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a63      	ldr	r2, [pc, #396]	; (8003658 <HAL_ADC_Init+0x29c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d10e      	bne.n	80034ec <HAL_ADC_Init+0x130>
 80034ce:	4861      	ldr	r0, [pc, #388]	; (8003654 <HAL_ADC_Init+0x298>)
 80034d0:	f7ff ff14 	bl	80032fc <LL_ADC_IsEnabled>
 80034d4:	4604      	mov	r4, r0
 80034d6:	4860      	ldr	r0, [pc, #384]	; (8003658 <HAL_ADC_Init+0x29c>)
 80034d8:	f7ff ff10 	bl	80032fc <LL_ADC_IsEnabled>
 80034dc:	4603      	mov	r3, r0
 80034de:	4323      	orrs	r3, r4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	e008      	b.n	80034fe <HAL_ADC_Init+0x142>
 80034ec:	485b      	ldr	r0, [pc, #364]	; (800365c <HAL_ADC_Init+0x2a0>)
 80034ee:	f7ff ff05 	bl	80032fc <LL_ADC_IsEnabled>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d012      	beq.n	8003528 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a53      	ldr	r2, [pc, #332]	; (8003654 <HAL_ADC_Init+0x298>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_ADC_Init+0x15a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a51      	ldr	r2, [pc, #324]	; (8003658 <HAL_ADC_Init+0x29c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d101      	bne.n	800351a <HAL_ADC_Init+0x15e>
 8003516:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_ADC_Init+0x2a4>)
 8003518:	e000      	b.n	800351c <HAL_ADC_Init+0x160>
 800351a:	4a52      	ldr	r2, [pc, #328]	; (8003664 <HAL_ADC_Init+0x2a8>)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4619      	mov	r1, r3
 8003522:	4610      	mov	r0, r2
 8003524:	f7ff fd3c 	bl	8002fa0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003528:	f7ff fd18 	bl	8002f5c <HAL_GetREVID>
 800352c:	4603      	mov	r3, r0
 800352e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003532:	4293      	cmp	r3, r2
 8003534:	d914      	bls.n	8003560 <HAL_ADC_Init+0x1a4>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b10      	cmp	r3, #16
 800353c:	d110      	bne.n	8003560 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	7d5b      	ldrb	r3, [r3, #21]
 8003542:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003548:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800354e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	7f1b      	ldrb	r3, [r3, #28]
 8003554:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003556:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003558:	f043 030c 	orr.w	r3, r3, #12
 800355c:	61bb      	str	r3, [r7, #24]
 800355e:	e00d      	b.n	800357c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7d5b      	ldrb	r3, [r3, #21]
 8003564:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800356a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003570:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	7f1b      	ldrb	r3, [r3, #28]
 8003576:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	7f1b      	ldrb	r3, [r3, #28]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d106      	bne.n	8003592 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	3b01      	subs	r3, #1
 800358a:	045b      	lsls	r3, r3, #17
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <HAL_ADC_Init+0x2ac>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	69b9      	ldr	r1, [r7, #24]
 80035be:	430b      	orrs	r3, r1
 80035c0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fed2 	bl	8003370 <LL_ADC_REG_IsConversionOngoing>
 80035cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fedf 	bl	8003396 <LL_ADC_INJ_IsConversionOngoing>
 80035d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d15f      	bne.n	80036a0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d15c      	bne.n	80036a0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	7d1b      	ldrb	r3, [r3, #20]
 80035ea:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	4b1c      	ldr	r3, [pc, #112]	; (800366c <HAL_ADC_Init+0x2b0>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	69b9      	ldr	r1, [r7, #24]
 8003604:	430b      	orrs	r3, r1
 8003606:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800360e:	2b01      	cmp	r3, #1
 8003610:	d130      	bne.n	8003674 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	4b14      	ldr	r3, [pc, #80]	; (8003670 <HAL_ADC_Init+0x2b4>)
 8003620:	4013      	ands	r3, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003626:	3a01      	subs	r2, #1
 8003628:	0411      	lsls	r1, r2, #16
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800362e:	4311      	orrs	r1, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003634:	4311      	orrs	r1, r2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800363a:	430a      	orrs	r2, r1
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	611a      	str	r2, [r3, #16]
 8003648:	e01c      	b.n	8003684 <HAL_ADC_Init+0x2c8>
 800364a:	bf00      	nop
 800364c:	24000088 	.word	0x24000088
 8003650:	053e2d63 	.word	0x053e2d63
 8003654:	40022000 	.word	0x40022000
 8003658:	40022100 	.word	0x40022100
 800365c:	58026000 	.word	0x58026000
 8003660:	40022300 	.word	0x40022300
 8003664:	58026300 	.word	0x58026300
 8003668:	fff0c003 	.word	0xfff0c003
 800366c:	ffffbffc 	.word	0xffffbffc
 8003670:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fdec 	bl	8004278 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d10c      	bne.n	80036c2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f023 010f 	bic.w	r1, r3, #15
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	1e5a      	subs	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	631a      	str	r2, [r3, #48]	; 0x30
 80036c0:	e007      	b.n	80036d2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 020f 	bic.w	r2, r2, #15
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	f023 0303 	bic.w	r3, r3, #3
 80036da:	f043 0201 	orr.w	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
 80036e2:	e007      	b.n	80036f4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e8:	f043 0210 	orr.w	r2, r3, #16
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3724      	adds	r7, #36	; 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd90      	pop	{r4, r7, pc}
 80036fe:	bf00      	nop

08003700 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a55      	ldr	r2, [pc, #340]	; (8003868 <HAL_ADC_Start_DMA+0x168>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d004      	beq.n	8003720 <HAL_ADC_Start_DMA+0x20>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a54      	ldr	r2, [pc, #336]	; (800386c <HAL_ADC_Start_DMA+0x16c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d101      	bne.n	8003724 <HAL_ADC_Start_DMA+0x24>
 8003720:	4b53      	ldr	r3, [pc, #332]	; (8003870 <HAL_ADC_Start_DMA+0x170>)
 8003722:	e000      	b.n	8003726 <HAL_ADC_Start_DMA+0x26>
 8003724:	4b53      	ldr	r3, [pc, #332]	; (8003874 <HAL_ADC_Start_DMA+0x174>)
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fd64 	bl	80031f4 <LL_ADC_GetMultimode>
 800372c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fe1c 	bl	8003370 <LL_ADC_REG_IsConversionOngoing>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 808c 	bne.w	8003858 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_ADC_Start_DMA+0x4e>
 800374a:	2302      	movs	r3, #2
 800374c:	e087      	b.n	800385e <HAL_ADC_Start_DMA+0x15e>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b05      	cmp	r3, #5
 8003760:	d002      	beq.n	8003768 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	2b09      	cmp	r3, #9
 8003766:	d170      	bne.n	800384a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fc07 	bl	8003f7c <ADC_Enable>
 800376e:	4603      	mov	r3, r0
 8003770:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003772:	7dfb      	ldrb	r3, [r7, #23]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d163      	bne.n	8003840 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800377c:	4b3e      	ldr	r3, [pc, #248]	; (8003878 <HAL_ADC_Start_DMA+0x178>)
 800377e:	4013      	ands	r3, r2
 8003780:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a37      	ldr	r2, [pc, #220]	; (800386c <HAL_ADC_Start_DMA+0x16c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d002      	beq.n	8003798 <HAL_ADC_Start_DMA+0x98>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	e000      	b.n	800379a <HAL_ADC_Start_DMA+0x9a>
 8003798:	4b33      	ldr	r3, [pc, #204]	; (8003868 <HAL_ADC_Start_DMA+0x168>)
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	4293      	cmp	r3, r2
 80037a0:	d002      	beq.n	80037a8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d006      	beq.n	80037ce <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c4:	f023 0206 	bic.w	r2, r3, #6
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	659a      	str	r2, [r3, #88]	; 0x58
 80037cc:	e002      	b.n	80037d4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d8:	4a28      	ldr	r2, [pc, #160]	; (800387c <HAL_ADC_Start_DMA+0x17c>)
 80037da:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e0:	4a27      	ldr	r2, [pc, #156]	; (8003880 <HAL_ADC_Start_DMA+0x180>)
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e8:	4a26      	ldr	r2, [pc, #152]	; (8003884 <HAL_ADC_Start_DMA+0x184>)
 80037ea:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	221c      	movs	r2, #28
 80037f2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0210 	orr.w	r2, r2, #16
 800380a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	4619      	mov	r1, r3
 8003816:	4610      	mov	r0, r2
 8003818:	f7ff fc89 	bl	800312e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3340      	adds	r3, #64	; 0x40
 8003826:	4619      	mov	r1, r3
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f002 f80e 	bl	800584c <HAL_DMA_Start_IT>
 8003830:	4603      	mov	r3, r0
 8003832:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fd85 	bl	8003348 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800383e:	e00d      	b.n	800385c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003848:	e008      	b.n	800385c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003856:	e001      	b.n	800385c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003858:	2302      	movs	r3, #2
 800385a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800385c:	7dfb      	ldrb	r3, [r7, #23]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40022000 	.word	0x40022000
 800386c:	40022100 	.word	0x40022100
 8003870:	40022300 	.word	0x40022300
 8003874:	58026300 	.word	0x58026300
 8003878:	fffff0fe 	.word	0xfffff0fe
 800387c:	0800414f 	.word	0x0800414f
 8003880:	08004227 	.word	0x08004227
 8003884:	08004243 	.word	0x08004243

08003888 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80038c4:	b590      	push	{r4, r7, lr}
 80038c6:	b0a1      	sub	sp, #132	; 0x84
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a65      	ldr	r2, [pc, #404]	; (8003a74 <HAL_ADC_ConfigChannel+0x1b0>)
 80038de:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x2a>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e32e      	b.n	8003f4c <HAL_ADC_ConfigChannel+0x688>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fd38 	bl	8003370 <LL_ADC_REG_IsConversionOngoing>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	f040 8313 	bne.w	8003f2e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	db2c      	blt.n	800396a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003918:	2b00      	cmp	r3, #0
 800391a:	d108      	bne.n	800392e <HAL_ADC_ConfigChannel+0x6a>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	0e9b      	lsrs	r3, r3, #26
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	2201      	movs	r2, #1
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	e016      	b.n	800395c <HAL_ADC_ConfigChannel+0x98>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003936:	fa93 f3a3 	rbit	r3, r3
 800393a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800393c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800393e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003946:	2320      	movs	r3, #32
 8003948:	e003      	b.n	8003952 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800394a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800394c:	fab3 f383 	clz	r3, r3
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f003 031f 	and.w	r3, r3, #31
 8003956:	2201      	movs	r2, #1
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6812      	ldr	r2, [r2, #0]
 8003960:	69d1      	ldr	r1, [r2, #28]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	430b      	orrs	r3, r1
 8003968:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6859      	ldr	r1, [r3, #4]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	f7ff fbad 	bl	80030d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fcf5 	bl	8003370 <LL_ADC_REG_IsConversionOngoing>
 8003986:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fd02 	bl	8003396 <LL_ADC_INJ_IsConversionOngoing>
 8003992:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003996:	2b00      	cmp	r3, #0
 8003998:	f040 80b8 	bne.w	8003b0c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800399c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f040 80b4 	bne.w	8003b0c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	6819      	ldr	r1, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	461a      	mov	r2, r3
 80039b2:	f7ff fbcf 	bl	8003154 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039b6:	4b30      	ldr	r3, [pc, #192]	; (8003a78 <HAL_ADC_ConfigChannel+0x1b4>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80039be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039c2:	d10b      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x118>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	e01d      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x154>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10b      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x13e>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	089b      	lsrs	r3, r3, #2
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	e00a      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x154>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	089b      	lsrs	r3, r3, #2
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d02c      	beq.n	8003a7c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6919      	ldr	r1, [r3, #16]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a30:	f7ff faea 	bl	8003008 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	6919      	ldr	r1, [r3, #16]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	7e5b      	ldrb	r3, [r3, #25]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d102      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x186>
 8003a44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003a48:	e000      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x188>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f7ff fb14 	bl	800307a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6919      	ldr	r1, [r3, #16]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	7e1b      	ldrb	r3, [r3, #24]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d102      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x1a4>
 8003a62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a66:	e000      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x1a6>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f7ff faec 	bl	8003048 <LL_ADC_SetDataRightShift>
 8003a70:	e04c      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x248>
 8003a72:	bf00      	nop
 8003a74:	47ff0000 	.word	0x47ff0000
 8003a78:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	069b      	lsls	r3, r3, #26
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d107      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a9e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	069b      	lsls	r3, r3, #26
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d107      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ac2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	069b      	lsls	r3, r3, #26
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d107      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ae6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	069b      	lsls	r3, r3, #26
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d107      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b0a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff fbf3 	bl	80032fc <LL_ADC_IsEnabled>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f040 8211 	bne.w	8003f40 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6819      	ldr	r1, [r3, #0]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f7ff fb3e 	bl	80031ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4aa1      	ldr	r2, [pc, #644]	; (8003dbc <HAL_ADC_ConfigChannel+0x4f8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	f040 812e 	bne.w	8003d98 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10b      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x2a0>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	0e9b      	lsrs	r3, r3, #26
 8003b52:	3301      	adds	r3, #1
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	2b09      	cmp	r3, #9
 8003b5a:	bf94      	ite	ls
 8003b5c:	2301      	movls	r3, #1
 8003b5e:	2300      	movhi	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	e019      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x2d4>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b6c:	fa93 f3a3 	rbit	r3, r3
 8003b70:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003b7c:	2320      	movs	r3, #32
 8003b7e:	e003      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b82:	fab3 f383 	clz	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	3301      	adds	r3, #1
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	2b09      	cmp	r3, #9
 8003b90:	bf94      	ite	ls
 8003b92:	2301      	movls	r3, #1
 8003b94:	2300      	movhi	r3, #0
 8003b96:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d079      	beq.n	8003c90 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d107      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x2f4>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	0e9b      	lsrs	r3, r3, #26
 8003bae:	3301      	adds	r3, #1
 8003bb0:	069b      	lsls	r3, r3, #26
 8003bb2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bb6:	e015      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x320>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc0:	fa93 f3a3 	rbit	r3, r3
 8003bc4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003bd0:	2320      	movs	r3, #32
 8003bd2:	e003      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd6:	fab3 f383 	clz	r3, r3
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	069b      	lsls	r3, r3, #26
 8003be0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x340>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	0e9b      	lsrs	r3, r3, #26
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003c02:	e017      	b.n	8003c34 <HAL_ADC_ConfigChannel+0x370>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0c:	fa93 f3a3 	rbit	r3, r3
 8003c10:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003c1c:	2320      	movs	r3, #32
 8003c1e:	e003      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c22:	fab3 f383 	clz	r3, r3
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	2101      	movs	r1, #1
 8003c30:	fa01 f303 	lsl.w	r3, r1, r3
 8003c34:	ea42 0103 	orr.w	r1, r2, r3
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x396>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	0e9b      	lsrs	r3, r3, #26
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f003 021f 	and.w	r2, r3, #31
 8003c50:	4613      	mov	r3, r2
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	4413      	add	r3, r2
 8003c56:	051b      	lsls	r3, r3, #20
 8003c58:	e018      	b.n	8003c8c <HAL_ADC_ConfigChannel+0x3c8>
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003c72:	2320      	movs	r3, #32
 8003c74:	e003      	b.n	8003c7e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c78:	fab3 f383 	clz	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	f003 021f 	and.w	r2, r3, #31
 8003c84:	4613      	mov	r3, r2
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4413      	add	r3, r2
 8003c8a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	e07e      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d107      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x3e8>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	0e9b      	lsrs	r3, r3, #26
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	069b      	lsls	r3, r3, #26
 8003ca6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003caa:	e015      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x414>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb4:	fa93 f3a3 	rbit	r3, r3
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	e003      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	069b      	lsls	r3, r3, #26
 8003cd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d109      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x434>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	0e9b      	lsrs	r3, r3, #26
 8003cea:	3301      	adds	r3, #1
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf6:	e017      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x464>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	fa93 f3a3 	rbit	r3, r3
 8003d04:	61bb      	str	r3, [r7, #24]
  return result;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003d10:	2320      	movs	r3, #32
 8003d12:	e003      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	f003 031f 	and.w	r3, r3, #31
 8003d22:	2101      	movs	r1, #1
 8003d24:	fa01 f303 	lsl.w	r3, r1, r3
 8003d28:	ea42 0103 	orr.w	r1, r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10d      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x490>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	0e9b      	lsrs	r3, r3, #26
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f003 021f 	and.w	r2, r3, #31
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	3b1e      	subs	r3, #30
 8003d4c:	051b      	lsls	r3, r3, #20
 8003d4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d52:	e01b      	b.n	8003d8c <HAL_ADC_ConfigChannel+0x4c8>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	fa93 f3a3 	rbit	r3, r3
 8003d60:	60fb      	str	r3, [r7, #12]
  return result;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003d6c:	2320      	movs	r3, #32
 8003d6e:	e003      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	3301      	adds	r3, #1
 8003d7a:	f003 021f 	and.w	r2, r3, #31
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	3b1e      	subs	r3, #30
 8003d86:	051b      	lsls	r3, r3, #20
 8003d88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	6892      	ldr	r2, [r2, #8]
 8003d92:	4619      	mov	r1, r3
 8003d94:	f7ff f9de 	bl	8003154 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f280 80cf 	bge.w	8003f40 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a06      	ldr	r2, [pc, #24]	; (8003dc0 <HAL_ADC_ConfigChannel+0x4fc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d004      	beq.n	8003db6 <HAL_ADC_ConfigChannel+0x4f2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <HAL_ADC_ConfigChannel+0x500>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d10a      	bne.n	8003dcc <HAL_ADC_ConfigChannel+0x508>
 8003db6:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <HAL_ADC_ConfigChannel+0x504>)
 8003db8:	e009      	b.n	8003dce <HAL_ADC_ConfigChannel+0x50a>
 8003dba:	bf00      	nop
 8003dbc:	47ff0000 	.word	0x47ff0000
 8003dc0:	40022000 	.word	0x40022000
 8003dc4:	40022100 	.word	0x40022100
 8003dc8:	40022300 	.word	0x40022300
 8003dcc:	4b61      	ldr	r3, [pc, #388]	; (8003f54 <HAL_ADC_ConfigChannel+0x690>)
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff f90c 	bl	8002fec <LL_ADC_GetCommonPathInternalCh>
 8003dd4:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a5f      	ldr	r2, [pc, #380]	; (8003f58 <HAL_ADC_ConfigChannel+0x694>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d004      	beq.n	8003dea <HAL_ADC_ConfigChannel+0x526>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a5d      	ldr	r2, [pc, #372]	; (8003f5c <HAL_ADC_ConfigChannel+0x698>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d10e      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x544>
 8003dea:	485b      	ldr	r0, [pc, #364]	; (8003f58 <HAL_ADC_ConfigChannel+0x694>)
 8003dec:	f7ff fa86 	bl	80032fc <LL_ADC_IsEnabled>
 8003df0:	4604      	mov	r4, r0
 8003df2:	485a      	ldr	r0, [pc, #360]	; (8003f5c <HAL_ADC_ConfigChannel+0x698>)
 8003df4:	f7ff fa82 	bl	80032fc <LL_ADC_IsEnabled>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4323      	orrs	r3, r4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf0c      	ite	eq
 8003e00:	2301      	moveq	r3, #1
 8003e02:	2300      	movne	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	e008      	b.n	8003e1a <HAL_ADC_ConfigChannel+0x556>
 8003e08:	4855      	ldr	r0, [pc, #340]	; (8003f60 <HAL_ADC_ConfigChannel+0x69c>)
 8003e0a:	f7ff fa77 	bl	80032fc <LL_ADC_IsEnabled>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bf0c      	ite	eq
 8003e14:	2301      	moveq	r3, #1
 8003e16:	2300      	movne	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d07d      	beq.n	8003f1a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a50      	ldr	r2, [pc, #320]	; (8003f64 <HAL_ADC_ConfigChannel+0x6a0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d130      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x5c6>
 8003e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d12b      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a4a      	ldr	r2, [pc, #296]	; (8003f60 <HAL_ADC_ConfigChannel+0x69c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	f040 8081 	bne.w	8003f40 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a45      	ldr	r2, [pc, #276]	; (8003f58 <HAL_ADC_ConfigChannel+0x694>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d004      	beq.n	8003e52 <HAL_ADC_ConfigChannel+0x58e>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a43      	ldr	r2, [pc, #268]	; (8003f5c <HAL_ADC_ConfigChannel+0x698>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d101      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x592>
 8003e52:	4a45      	ldr	r2, [pc, #276]	; (8003f68 <HAL_ADC_ConfigChannel+0x6a4>)
 8003e54:	e000      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x594>
 8003e56:	4a3f      	ldr	r2, [pc, #252]	; (8003f54 <HAL_ADC_ConfigChannel+0x690>)
 8003e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f7ff f8b0 	bl	8002fc6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e66:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <HAL_ADC_ConfigChannel+0x6a8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	099b      	lsrs	r3, r3, #6
 8003e6c:	4a40      	ldr	r2, [pc, #256]	; (8003f70 <HAL_ADC_ConfigChannel+0x6ac>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	099b      	lsrs	r3, r3, #6
 8003e74:	3301      	adds	r3, #1
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e7a:	e002      	b.n	8003e82 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f9      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e88:	e05a      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a39      	ldr	r2, [pc, #228]	; (8003f74 <HAL_ADC_ConfigChannel+0x6b0>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d11e      	bne.n	8003ed2 <HAL_ADC_ConfigChannel+0x60e>
 8003e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d119      	bne.n	8003ed2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2f      	ldr	r2, [pc, #188]	; (8003f60 <HAL_ADC_ConfigChannel+0x69c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d14b      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2a      	ldr	r2, [pc, #168]	; (8003f58 <HAL_ADC_ConfigChannel+0x694>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d004      	beq.n	8003ebc <HAL_ADC_ConfigChannel+0x5f8>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a29      	ldr	r2, [pc, #164]	; (8003f5c <HAL_ADC_ConfigChannel+0x698>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x5fc>
 8003ebc:	4a2a      	ldr	r2, [pc, #168]	; (8003f68 <HAL_ADC_ConfigChannel+0x6a4>)
 8003ebe:	e000      	b.n	8003ec2 <HAL_ADC_ConfigChannel+0x5fe>
 8003ec0:	4a24      	ldr	r2, [pc, #144]	; (8003f54 <HAL_ADC_ConfigChannel+0x690>)
 8003ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4610      	mov	r0, r2
 8003ecc:	f7ff f87b 	bl	8002fc6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ed0:	e036      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a28      	ldr	r2, [pc, #160]	; (8003f78 <HAL_ADC_ConfigChannel+0x6b4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d131      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x67c>
 8003edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d12c      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1d      	ldr	r2, [pc, #116]	; (8003f60 <HAL_ADC_ConfigChannel+0x69c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d127      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a18      	ldr	r2, [pc, #96]	; (8003f58 <HAL_ADC_ConfigChannel+0x694>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_ADC_ConfigChannel+0x640>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a17      	ldr	r2, [pc, #92]	; (8003f5c <HAL_ADC_ConfigChannel+0x698>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d101      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x644>
 8003f04:	4a18      	ldr	r2, [pc, #96]	; (8003f68 <HAL_ADC_ConfigChannel+0x6a4>)
 8003f06:	e000      	b.n	8003f0a <HAL_ADC_ConfigChannel+0x646>
 8003f08:	4a12      	ldr	r2, [pc, #72]	; (8003f54 <HAL_ADC_ConfigChannel+0x690>)
 8003f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f10:	4619      	mov	r1, r3
 8003f12:	4610      	mov	r0, r2
 8003f14:	f7ff f857 	bl	8002fc6 <LL_ADC_SetCommonPathInternalCh>
 8003f18:	e012      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	f043 0220 	orr.w	r2, r3, #32
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003f2c:	e008      	b.n	8003f40 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f32:	f043 0220 	orr.w	r2, r3, #32
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f48:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3784      	adds	r7, #132	; 0x84
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd90      	pop	{r4, r7, pc}
 8003f54:	58026300 	.word	0x58026300
 8003f58:	40022000 	.word	0x40022000
 8003f5c:	40022100 	.word	0x40022100
 8003f60:	58026000 	.word	0x58026000
 8003f64:	cb840000 	.word	0xcb840000
 8003f68:	40022300 	.word	0x40022300
 8003f6c:	24000088 	.word	0x24000088
 8003f70:	053e2d63 	.word	0x053e2d63
 8003f74:	c7520000 	.word	0xc7520000
 8003f78:	cfb80000 	.word	0xcfb80000

08003f7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff f9b7 	bl	80032fc <LL_ADC_IsEnabled>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d16e      	bne.n	8004072 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	4b38      	ldr	r3, [pc, #224]	; (800407c <ADC_Enable+0x100>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	f043 0210 	orr.w	r2, r3, #16
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb2:	f043 0201 	orr.w	r2, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e05a      	b.n	8004074 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff f972 	bl	80032ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003fc8:	f7fe ffbc 	bl	8002f44 <HAL_GetTick>
 8003fcc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a2b      	ldr	r2, [pc, #172]	; (8004080 <ADC_Enable+0x104>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d004      	beq.n	8003fe2 <ADC_Enable+0x66>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a29      	ldr	r2, [pc, #164]	; (8004084 <ADC_Enable+0x108>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d101      	bne.n	8003fe6 <ADC_Enable+0x6a>
 8003fe2:	4b29      	ldr	r3, [pc, #164]	; (8004088 <ADC_Enable+0x10c>)
 8003fe4:	e000      	b.n	8003fe8 <ADC_Enable+0x6c>
 8003fe6:	4b29      	ldr	r3, [pc, #164]	; (800408c <ADC_Enable+0x110>)
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff f903 	bl	80031f4 <LL_ADC_GetMultimode>
 8003fee:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a23      	ldr	r2, [pc, #140]	; (8004084 <ADC_Enable+0x108>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d002      	beq.n	8004000 <ADC_Enable+0x84>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	e000      	b.n	8004002 <ADC_Enable+0x86>
 8004000:	4b1f      	ldr	r3, [pc, #124]	; (8004080 <ADC_Enable+0x104>)
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	4293      	cmp	r3, r2
 8004008:	d02c      	beq.n	8004064 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d130      	bne.n	8004072 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004010:	e028      	b.n	8004064 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff f970 	bl	80032fc <LL_ADC_IsEnabled>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff f940 	bl	80032ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800402c:	f7fe ff8a 	bl	8002f44 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d914      	bls.n	8004064 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b01      	cmp	r3, #1
 8004046:	d00d      	beq.n	8004064 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404c:	f043 0210 	orr.w	r2, r3, #16
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e007      	b.n	8004074 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d1cf      	bne.n	8004012 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	8000003f 	.word	0x8000003f
 8004080:	40022000 	.word	0x40022000
 8004084:	40022100 	.word	0x40022100
 8004088:	40022300 	.word	0x40022300
 800408c:	58026300 	.word	0x58026300

08004090 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff f940 	bl	8003322 <LL_ADC_IsDisableOngoing>
 80040a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff f927 	bl	80032fc <LL_ADC_IsEnabled>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d047      	beq.n	8004144 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d144      	bne.n	8004144 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 030d 	and.w	r3, r3, #13
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d10c      	bne.n	80040e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff f901 	bl	80032d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2203      	movs	r2, #3
 80040d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040da:	f7fe ff33 	bl	8002f44 <HAL_GetTick>
 80040de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040e0:	e029      	b.n	8004136 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	f043 0210 	orr.w	r2, r3, #16
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f2:	f043 0201 	orr.w	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e023      	b.n	8004146 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040fe:	f7fe ff21 	bl	8002f44 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d914      	bls.n	8004136 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00d      	beq.n	8004136 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	f043 0210 	orr.w	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412a:	f043 0201 	orr.w	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e007      	b.n	8004146 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1dc      	bne.n	80040fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004164:	2b00      	cmp	r3, #0
 8004166:	d14b      	bne.n	8004200 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d021      	beq.n	80041c6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe ff92 	bl	80030b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d032      	beq.n	80041f8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d12b      	bne.n	80041f8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11f      	bne.n	80041f8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54
 80041c4:	e018      	b.n	80041f8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d111      	bne.n	80041f8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d105      	bne.n	80041f8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	f043 0201 	orr.w	r2, r3, #1
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7ff fb45 	bl	8003888 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041fe:	e00e      	b.n	800421e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f7ff fb4f 	bl	80038b0 <HAL_ADC_ErrorCallback>
}
 8004212:	e004      	b.n	800421e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	4798      	blx	r3
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f7ff fb31 	bl	800389c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004254:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	f043 0204 	orr.w	r2, r3, #4
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f7ff fb21 	bl	80038b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800426e:	bf00      	nop
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
	...

08004278 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a7a      	ldr	r2, [pc, #488]	; (8004470 <ADC_ConfigureBoostMode+0x1f8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <ADC_ConfigureBoostMode+0x1c>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a79      	ldr	r2, [pc, #484]	; (8004474 <ADC_ConfigureBoostMode+0x1fc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d109      	bne.n	80042a8 <ADC_ConfigureBoostMode+0x30>
 8004294:	4b78      	ldr	r3, [pc, #480]	; (8004478 <ADC_ConfigureBoostMode+0x200>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf14      	ite	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	2300      	moveq	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	e008      	b.n	80042ba <ADC_ConfigureBoostMode+0x42>
 80042a8:	4b74      	ldr	r3, [pc, #464]	; (800447c <ADC_ConfigureBoostMode+0x204>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bf14      	ite	ne
 80042b4:	2301      	movne	r3, #1
 80042b6:	2300      	moveq	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01c      	beq.n	80042f8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80042be:	f005 fd1b 	bl	8009cf8 <HAL_RCC_GetHCLKFreq>
 80042c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042cc:	d010      	beq.n	80042f0 <ADC_ConfigureBoostMode+0x78>
 80042ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042d2:	d873      	bhi.n	80043bc <ADC_ConfigureBoostMode+0x144>
 80042d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d8:	d002      	beq.n	80042e0 <ADC_ConfigureBoostMode+0x68>
 80042da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042de:	d16d      	bne.n	80043bc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ec:	60fb      	str	r3, [r7, #12]
        break;
 80042ee:	e068      	b.n	80043c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	089b      	lsrs	r3, r3, #2
 80042f4:	60fb      	str	r3, [r7, #12]
        break;
 80042f6:	e064      	b.n	80043c2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80042f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80042fc:	f04f 0100 	mov.w	r1, #0
 8004300:	f006 ffa2 	bl	800b248 <HAL_RCCEx_GetPeriphCLKFreq>
 8004304:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800430e:	d051      	beq.n	80043b4 <ADC_ConfigureBoostMode+0x13c>
 8004310:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004314:	d854      	bhi.n	80043c0 <ADC_ConfigureBoostMode+0x148>
 8004316:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800431a:	d047      	beq.n	80043ac <ADC_ConfigureBoostMode+0x134>
 800431c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004320:	d84e      	bhi.n	80043c0 <ADC_ConfigureBoostMode+0x148>
 8004322:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004326:	d03d      	beq.n	80043a4 <ADC_ConfigureBoostMode+0x12c>
 8004328:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800432c:	d848      	bhi.n	80043c0 <ADC_ConfigureBoostMode+0x148>
 800432e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004332:	d033      	beq.n	800439c <ADC_ConfigureBoostMode+0x124>
 8004334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004338:	d842      	bhi.n	80043c0 <ADC_ConfigureBoostMode+0x148>
 800433a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800433e:	d029      	beq.n	8004394 <ADC_ConfigureBoostMode+0x11c>
 8004340:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004344:	d83c      	bhi.n	80043c0 <ADC_ConfigureBoostMode+0x148>
 8004346:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800434a:	d01a      	beq.n	8004382 <ADC_ConfigureBoostMode+0x10a>
 800434c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004350:	d836      	bhi.n	80043c0 <ADC_ConfigureBoostMode+0x148>
 8004352:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004356:	d014      	beq.n	8004382 <ADC_ConfigureBoostMode+0x10a>
 8004358:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800435c:	d830      	bhi.n	80043c0 <ADC_ConfigureBoostMode+0x148>
 800435e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004362:	d00e      	beq.n	8004382 <ADC_ConfigureBoostMode+0x10a>
 8004364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004368:	d82a      	bhi.n	80043c0 <ADC_ConfigureBoostMode+0x148>
 800436a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800436e:	d008      	beq.n	8004382 <ADC_ConfigureBoostMode+0x10a>
 8004370:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004374:	d824      	bhi.n	80043c0 <ADC_ConfigureBoostMode+0x148>
 8004376:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800437a:	d002      	beq.n	8004382 <ADC_ConfigureBoostMode+0x10a>
 800437c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004380:	d11e      	bne.n	80043c0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	0c9b      	lsrs	r3, r3, #18
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	60fb      	str	r3, [r7, #12]
        break;
 8004392:	e016      	b.n	80043c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	091b      	lsrs	r3, r3, #4
 8004398:	60fb      	str	r3, [r7, #12]
        break;
 800439a:	e012      	b.n	80043c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	60fb      	str	r3, [r7, #12]
        break;
 80043a2:	e00e      	b.n	80043c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	60fb      	str	r3, [r7, #12]
        break;
 80043aa:	e00a      	b.n	80043c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	09db      	lsrs	r3, r3, #7
 80043b0:	60fb      	str	r3, [r7, #12]
        break;
 80043b2:	e006      	b.n	80043c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	60fb      	str	r3, [r7, #12]
        break;
 80043ba:	e002      	b.n	80043c2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80043bc:	bf00      	nop
 80043be:	e000      	b.n	80043c2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80043c0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80043c2:	f7fe fdcb 	bl	8002f5c <HAL_GetREVID>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d815      	bhi.n	80043fc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a2b      	ldr	r2, [pc, #172]	; (8004480 <ADC_ConfigureBoostMode+0x208>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d908      	bls.n	80043ea <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80043e8:	e03e      	b.n	8004468 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043f8:	609a      	str	r2, [r3, #8]
}
 80043fa:	e035      	b.n	8004468 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	085b      	lsrs	r3, r3, #1
 8004400:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4a1f      	ldr	r2, [pc, #124]	; (8004484 <ADC_ConfigureBoostMode+0x20c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d808      	bhi.n	800441c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004418:	609a      	str	r2, [r3, #8]
}
 800441a:	e025      	b.n	8004468 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	4a1a      	ldr	r2, [pc, #104]	; (8004488 <ADC_ConfigureBoostMode+0x210>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d80a      	bhi.n	800443a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004436:	609a      	str	r2, [r3, #8]
}
 8004438:	e016      	b.n	8004468 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4a13      	ldr	r2, [pc, #76]	; (800448c <ADC_ConfigureBoostMode+0x214>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d80a      	bhi.n	8004458 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004454:	609a      	str	r2, [r3, #8]
}
 8004456:	e007      	b.n	8004468 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004466:	609a      	str	r2, [r3, #8]
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	40022000 	.word	0x40022000
 8004474:	40022100 	.word	0x40022100
 8004478:	40022300 	.word	0x40022300
 800447c:	58026300 	.word	0x58026300
 8004480:	01312d00 	.word	0x01312d00
 8004484:	005f5e10 	.word	0x005f5e10
 8004488:	00bebc20 	.word	0x00bebc20
 800448c:	017d7840 	.word	0x017d7840

08004490 <LL_ADC_IsEnabled>:
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <LL_ADC_IsEnabled+0x18>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <LL_ADC_IsEnabled+0x1a>
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
	...

080044b8 <LL_ADC_StartCalibration>:
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <LL_ADC_StartCalibration+0x38>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80044d8:	430a      	orrs	r2, r1
 80044da:	4313      	orrs	r3, r2
 80044dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	609a      	str	r2, [r3, #8]
}
 80044e4:	bf00      	nop
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr
 80044f0:	3ffeffc0 	.word	0x3ffeffc0

080044f4 <LL_ADC_IsCalibrationOnGoing>:
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004508:	d101      	bne.n	800450e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <LL_ADC_REG_IsConversionOngoing>:
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b04      	cmp	r3, #4
 800452e:	d101      	bne.n	8004534 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
	...

08004544 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004550:	2300      	movs	r3, #0
 8004552:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <HAL_ADCEx_Calibration_Start+0x1e>
 800455e:	2302      	movs	r3, #2
 8004560:	e04c      	b.n	80045fc <HAL_ADCEx_Calibration_Start+0xb8>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7ff fd90 	bl	8004090 <ADC_Disable>
 8004570:	4603      	mov	r3, r0
 8004572:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004574:	7dfb      	ldrb	r3, [r7, #23]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d135      	bne.n	80045e6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800457e:	4b21      	ldr	r3, [pc, #132]	; (8004604 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004580:	4013      	ands	r3, r2
 8004582:	f043 0202 	orr.w	r2, r3, #2
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff ff90 	bl	80044b8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004598:	e014      	b.n	80045c4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3301      	adds	r3, #1
 800459e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4a19      	ldr	r2, [pc, #100]	; (8004608 <HAL_ADCEx_Calibration_Start+0xc4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d30d      	bcc.n	80045c4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ac:	f023 0312 	bic.w	r3, r3, #18
 80045b0:	f043 0210 	orr.w	r2, r3, #16
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e01b      	b.n	80045fc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff ff93 	bl	80044f4 <LL_ADC_IsCalibrationOnGoing>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e2      	bne.n	800459a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d8:	f023 0303 	bic.w	r3, r3, #3
 80045dc:	f043 0201 	orr.w	r2, r3, #1
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54
 80045e4:	e005      	b.n	80045f2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	f043 0210 	orr.w	r2, r3, #16
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80045fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	ffffeefd 	.word	0xffffeefd
 8004608:	25c3f800 	.word	0x25c3f800

0800460c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800460c:	b590      	push	{r4, r7, lr}
 800460e:	b09f      	sub	sp, #124	; 0x7c
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004626:	2302      	movs	r3, #2
 8004628:	e0be      	b.n	80047a8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004632:	2300      	movs	r3, #0
 8004634:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004636:	2300      	movs	r3, #0
 8004638:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a5c      	ldr	r2, [pc, #368]	; (80047b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d102      	bne.n	800464a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004644:	4b5b      	ldr	r3, [pc, #364]	; (80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	e001      	b.n	800464e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800464a:	2300      	movs	r3, #0
 800464c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10b      	bne.n	800466c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004658:	f043 0220 	orr.w	r2, r3, #32
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e09d      	b.n	80047a8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff ff54 	bl	800451c <LL_ADC_REG_IsConversionOngoing>
 8004674:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff ff4e 	bl	800451c <LL_ADC_REG_IsConversionOngoing>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d17f      	bne.n	8004786 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004688:	2b00      	cmp	r3, #0
 800468a:	d17c      	bne.n	8004786 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a47      	ldr	r2, [pc, #284]	; (80047b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a46      	ldr	r2, [pc, #280]	; (80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d101      	bne.n	80046a4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80046a0:	4b45      	ldr	r3, [pc, #276]	; (80047b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80046a2:	e000      	b.n	80046a6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80046a4:	4b45      	ldr	r3, [pc, #276]	; (80047bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80046a6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d039      	beq.n	8004724 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80046b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	431a      	orrs	r2, r3
 80046be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a3a      	ldr	r2, [pc, #232]	; (80047b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d004      	beq.n	80046d6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a38      	ldr	r2, [pc, #224]	; (80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d10e      	bne.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80046d6:	4836      	ldr	r0, [pc, #216]	; (80047b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80046d8:	f7ff feda 	bl	8004490 <LL_ADC_IsEnabled>
 80046dc:	4604      	mov	r4, r0
 80046de:	4835      	ldr	r0, [pc, #212]	; (80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80046e0:	f7ff fed6 	bl	8004490 <LL_ADC_IsEnabled>
 80046e4:	4603      	mov	r3, r0
 80046e6:	4323      	orrs	r3, r4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bf0c      	ite	eq
 80046ec:	2301      	moveq	r3, #1
 80046ee:	2300      	movne	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	e008      	b.n	8004706 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80046f4:	4832      	ldr	r0, [pc, #200]	; (80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80046f6:	f7ff fecb 	bl	8004490 <LL_ADC_IsEnabled>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bf0c      	ite	eq
 8004700:	2301      	moveq	r3, #1
 8004702:	2300      	movne	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d047      	beq.n	800479a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800470a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	4b2d      	ldr	r3, [pc, #180]	; (80047c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004710:	4013      	ands	r3, r2
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	6811      	ldr	r1, [r2, #0]
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	6892      	ldr	r2, [r2, #8]
 800471a:	430a      	orrs	r2, r1
 800471c:	431a      	orrs	r2, r3
 800471e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004720:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004722:	e03a      	b.n	800479a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800472c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1e      	ldr	r2, [pc, #120]	; (80047b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d004      	beq.n	8004744 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d10e      	bne.n	8004762 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004744:	481a      	ldr	r0, [pc, #104]	; (80047b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004746:	f7ff fea3 	bl	8004490 <LL_ADC_IsEnabled>
 800474a:	4604      	mov	r4, r0
 800474c:	4819      	ldr	r0, [pc, #100]	; (80047b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800474e:	f7ff fe9f 	bl	8004490 <LL_ADC_IsEnabled>
 8004752:	4603      	mov	r3, r0
 8004754:	4323      	orrs	r3, r4
 8004756:	2b00      	cmp	r3, #0
 8004758:	bf0c      	ite	eq
 800475a:	2301      	moveq	r3, #1
 800475c:	2300      	movne	r3, #0
 800475e:	b2db      	uxtb	r3, r3
 8004760:	e008      	b.n	8004774 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004762:	4817      	ldr	r0, [pc, #92]	; (80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004764:	f7ff fe94 	bl	8004490 <LL_ADC_IsEnabled>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf0c      	ite	eq
 800476e:	2301      	moveq	r3, #1
 8004770:	2300      	movne	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d010      	beq.n	800479a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800477e:	4013      	ands	r3, r2
 8004780:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004782:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004784:	e009      	b.n	800479a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800478a:	f043 0220 	orr.w	r2, r3, #32
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004798:	e000      	b.n	800479c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800479a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80047a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	377c      	adds	r7, #124	; 0x7c
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd90      	pop	{r4, r7, pc}
 80047b0:	40022000 	.word	0x40022000
 80047b4:	40022100 	.word	0x40022100
 80047b8:	40022300 	.word	0x40022300
 80047bc:	58026300 	.word	0x58026300
 80047c0:	58026000 	.word	0x58026000
 80047c4:	fffff0e0 	.word	0xfffff0e0

080047c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <__NVIC_SetPriorityGrouping+0x40>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047e4:	4013      	ands	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <__NVIC_SetPriorityGrouping+0x44>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047f6:	4a04      	ldr	r2, [pc, #16]	; (8004808 <__NVIC_SetPriorityGrouping+0x40>)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	60d3      	str	r3, [r2, #12]
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	e000ed00 	.word	0xe000ed00
 800480c:	05fa0000 	.word	0x05fa0000

08004810 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004814:	4b04      	ldr	r3, [pc, #16]	; (8004828 <__NVIC_GetPriorityGrouping+0x18>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	0a1b      	lsrs	r3, r3, #8
 800481a:	f003 0307 	and.w	r3, r3, #7
}
 800481e:	4618      	mov	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	e000ed00 	.word	0xe000ed00

0800482c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800483a:	2b00      	cmp	r3, #0
 800483c:	db0b      	blt.n	8004856 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800483e:	88fb      	ldrh	r3, [r7, #6]
 8004840:	f003 021f 	and.w	r2, r3, #31
 8004844:	4907      	ldr	r1, [pc, #28]	; (8004864 <__NVIC_EnableIRQ+0x38>)
 8004846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	2001      	movs	r0, #1
 800484e:	fa00 f202 	lsl.w	r2, r0, r2
 8004852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	e000e100 	.word	0xe000e100

08004868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	6039      	str	r1, [r7, #0]
 8004872:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004874:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004878:	2b00      	cmp	r3, #0
 800487a:	db0a      	blt.n	8004892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	b2da      	uxtb	r2, r3
 8004880:	490c      	ldr	r1, [pc, #48]	; (80048b4 <__NVIC_SetPriority+0x4c>)
 8004882:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004886:	0112      	lsls	r2, r2, #4
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	440b      	add	r3, r1
 800488c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004890:	e00a      	b.n	80048a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	b2da      	uxtb	r2, r3
 8004896:	4908      	ldr	r1, [pc, #32]	; (80048b8 <__NVIC_SetPriority+0x50>)
 8004898:	88fb      	ldrh	r3, [r7, #6]
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	3b04      	subs	r3, #4
 80048a0:	0112      	lsls	r2, r2, #4
 80048a2:	b2d2      	uxtb	r2, r2
 80048a4:	440b      	add	r3, r1
 80048a6:	761a      	strb	r2, [r3, #24]
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	e000e100 	.word	0xe000e100
 80048b8:	e000ed00 	.word	0xe000ed00

080048bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048bc:	b480      	push	{r7}
 80048be:	b089      	sub	sp, #36	; 0x24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f1c3 0307 	rsb	r3, r3, #7
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	bf28      	it	cs
 80048da:	2304      	movcs	r3, #4
 80048dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3304      	adds	r3, #4
 80048e2:	2b06      	cmp	r3, #6
 80048e4:	d902      	bls.n	80048ec <NVIC_EncodePriority+0x30>
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	3b03      	subs	r3, #3
 80048ea:	e000      	b.n	80048ee <NVIC_EncodePriority+0x32>
 80048ec:	2300      	movs	r3, #0
 80048ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	43da      	mvns	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	401a      	ands	r2, r3
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	43d9      	mvns	r1, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004914:	4313      	orrs	r3, r2
         );
}
 8004916:	4618      	mov	r0, r3
 8004918:	3724      	adds	r7, #36	; 0x24
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff ff4c 	bl	80047c8 <__NVIC_SetPriorityGrouping>
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	4603      	mov	r3, r0
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004946:	f7ff ff63 	bl	8004810 <__NVIC_GetPriorityGrouping>
 800494a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	6978      	ldr	r0, [r7, #20]
 8004952:	f7ff ffb3 	bl	80048bc <NVIC_EncodePriority>
 8004956:	4602      	mov	r2, r0
 8004958:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff ff82 	bl	8004868 <__NVIC_SetPriority>
}
 8004964:	bf00      	nop
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff ff56 	bl	800482c <__NVIC_EnableIRQ>
}
 8004980:	bf00      	nop
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e014      	b.n	80049c4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	791b      	ldrb	r3, [r3, #4]
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d105      	bne.n	80049b0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fd fd0e 	bl	80023cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e046      	b.n	8004a6e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	795b      	ldrb	r3, [r3, #5]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_DAC_Start+0x20>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e040      	b.n	8004a6e <HAL_DAC_Start+0xa2>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6819      	ldr	r1, [r3, #0]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2201      	movs	r2, #1
 8004a06:	409a      	lsls	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10f      	bne.n	8004a36 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d11d      	bne.n	8004a60 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	605a      	str	r2, [r3, #4]
 8004a34:	e014      	b.n	8004a60 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2102      	movs	r1, #2
 8004a48:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d107      	bne.n	8004a60 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0202 	orr.w	r2, r2, #2
 8004a5e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0a2      	b.n	8004bda <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	795b      	ldrb	r3, [r3, #5]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_DAC_Start_DMA+0x24>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e09c      	b.n	8004bda <HAL_DAC_Start_DMA+0x15e>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d129      	bne.n	8004b06 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	4a4b      	ldr	r2, [pc, #300]	; (8004be4 <HAL_DAC_Start_DMA+0x168>)
 8004ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	4a4a      	ldr	r2, [pc, #296]	; (8004be8 <HAL_DAC_Start_DMA+0x16c>)
 8004ac0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	4a49      	ldr	r2, [pc, #292]	; (8004bec <HAL_DAC_Start_DMA+0x170>)
 8004ac8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ad8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_DAC_Start_DMA+0x6c>
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d005      	beq.n	8004af2 <HAL_DAC_Start_DMA+0x76>
 8004ae6:	e009      	b.n	8004afc <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3308      	adds	r3, #8
 8004aee:	613b      	str	r3, [r7, #16]
        break;
 8004af0:	e033      	b.n	8004b5a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	613b      	str	r3, [r7, #16]
        break;
 8004afa:	e02e      	b.n	8004b5a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3310      	adds	r3, #16
 8004b02:	613b      	str	r3, [r7, #16]
        break;
 8004b04:	e029      	b.n	8004b5a <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	4a39      	ldr	r2, [pc, #228]	; (8004bf0 <HAL_DAC_Start_DMA+0x174>)
 8004b0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	4a38      	ldr	r2, [pc, #224]	; (8004bf4 <HAL_DAC_Start_DMA+0x178>)
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	4a37      	ldr	r2, [pc, #220]	; (8004bf8 <HAL_DAC_Start_DMA+0x17c>)
 8004b1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b2c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <HAL_DAC_Start_DMA+0xc0>
 8004b34:	6a3b      	ldr	r3, [r7, #32]
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d005      	beq.n	8004b46 <HAL_DAC_Start_DMA+0xca>
 8004b3a:	e009      	b.n	8004b50 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3314      	adds	r3, #20
 8004b42:	613b      	str	r3, [r7, #16]
        break;
 8004b44:	e009      	b.n	8004b5a <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3318      	adds	r3, #24
 8004b4c:	613b      	str	r3, [r7, #16]
        break;
 8004b4e:	e004      	b.n	8004b5a <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	331c      	adds	r3, #28
 8004b56:	613b      	str	r3, [r7, #16]
        break;
 8004b58:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d111      	bne.n	8004b84 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b6e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6898      	ldr	r0, [r3, #8]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	f000 fe67 	bl	800584c <HAL_DMA_Start_IT>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	75fb      	strb	r3, [r7, #23]
 8004b82:	e010      	b.n	8004ba6 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004b92:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	68d8      	ldr	r0, [r3, #12]
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	f000 fe55 	bl	800584c <HAL_DMA_Start_IT>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10c      	bne.n	8004bcc <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6819      	ldr	r1, [r3, #0]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e005      	b.n	8004bd8 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f043 0204 	orr.w	r2, r3, #4
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	0800506d 	.word	0x0800506d
 8004be8:	0800508f 	.word	0x0800508f
 8004bec:	080050ab 	.word	0x080050ab
 8004bf0:	08005129 	.word	0x08005129
 8004bf4:	0800514b 	.word	0x0800514b
 8004bf8:	08005167 	.word	0x08005167

08004bfc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e03e      	b.n	8004c8e <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6819      	ldr	r1, [r3, #0]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f003 0310 	and.w	r3, r3, #16
 8004c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43da      	mvns	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	400a      	ands	r2, r1
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6819      	ldr	r1, [r3, #0]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	43da      	mvns	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	400a      	ands	r2, r1
 8004c48:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10d      	bne.n	8004c6c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f001 f863 	bl	8005d20 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c68:	601a      	str	r2, [r3, #0]
 8004c6a:	e00c      	b.n	8004c86 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 f855 	bl	8005d20 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004c84:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cac:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01d      	beq.n	8004cf4 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d018      	beq.n	8004cf4 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f043 0201 	orr.w	r2, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cec:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f86f 	bl	8004dd2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d01d      	beq.n	8004d3a <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d018      	beq.n	8004d3a <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f043 0202 	orr.w	r2, r3, #2
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004d22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004d32:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f9ed 	bl	8005114 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b087      	sub	sp, #28
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	607a      	str	r2, [r7, #4]
 8004d4e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e015      	b.n	8004d8a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d105      	bne.n	8004d76 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4413      	add	r3, r2
 8004d70:	3308      	adds	r3, #8
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	e004      	b.n	8004d80 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3314      	adds	r3, #20
 8004d7e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	461a      	mov	r2, r3
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
	...

08004de8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <HAL_DAC_ConfigChannel+0x1e>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e12a      	b.n	8005060 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	795b      	ldrb	r3, [r3, #5]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_DAC_ConfigChannel+0x2e>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e124      	b.n	8005060 <HAL_DAC_ConfigChannel+0x278>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	d17a      	bne.n	8004f20 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004e2a:	f7fe f88b 	bl	8002f44 <HAL_GetTick>
 8004e2e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d13d      	bne.n	8004eb2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e36:	e018      	b.n	8004e6a <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e38:	f7fe f884 	bl	8002f44 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d911      	bls.n	8004e6a <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e4c:	4b86      	ldr	r3, [pc, #536]	; (8005068 <HAL_DAC_ConfigChannel+0x280>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00a      	beq.n	8004e6a <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	f043 0208 	orr.w	r2, r3, #8
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2203      	movs	r2, #3
 8004e64:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e0fa      	b.n	8005060 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e70:	4b7d      	ldr	r3, [pc, #500]	; (8005068 <HAL_DAC_ConfigChannel+0x280>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1df      	bne.n	8004e38 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	6992      	ldr	r2, [r2, #24]
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40
 8004e82:	e020      	b.n	8004ec6 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e84:	f7fe f85e 	bl	8002f44 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d90f      	bls.n	8004eb2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	da0a      	bge.n	8004eb2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f043 0208 	orr.w	r2, r3, #8
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2203      	movs	r2, #3
 8004eac:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e0d6      	b.n	8005060 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	dbe3      	blt.n	8004e84 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	6992      	ldr	r2, [r2, #24]
 8004ec4:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f003 0310 	and.w	r3, r3, #16
 8004ed2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eda:	43db      	mvns	r3, r3
 8004edc:	ea02 0103 	and.w	r1, r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f003 0310 	and.w	r3, r3, #16
 8004eea:	409a      	lsls	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	21ff      	movs	r1, #255	; 0xff
 8004f02:	fa01 f303 	lsl.w	r3, r1, r3
 8004f06:	43db      	mvns	r3, r3
 8004f08:	ea02 0103 	and.w	r1, r2, r3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	6a1a      	ldr	r2, [r3, #32]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f003 0310 	and.w	r3, r3, #16
 8004f16:	409a      	lsls	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d11d      	bne.n	8004f64 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	221f      	movs	r2, #31
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4013      	ands	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f003 0310 	and.w	r3, r3, #16
 8004f72:	2207      	movs	r2, #7
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d102      	bne.n	8004f8e <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f8c:	e00f      	b.n	8004fae <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d102      	bne.n	8004f9c <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004f96:	2301      	movs	r3, #1
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
 8004f9a:	e008      	b.n	8004fae <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d102      	bne.n	8004faa <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa8:	e001      	b.n	8004fae <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6819      	ldr	r1, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	43da      	mvns	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	400a      	ands	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	43db      	mvns	r3, r3
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	4013      	ands	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f003 0310 	and.w	r3, r3, #16
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	4313      	orrs	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	6819      	ldr	r1, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	22c0      	movs	r2, #192	; 0xc0
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	43da      	mvns	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	400a      	ands	r2, r1
 800504e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2201      	movs	r2, #1
 8005054:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800505c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005060:	4618      	mov	r0, r3
 8005062:	3728      	adds	r7, #40	; 0x28
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20008000 	.word	0x20008000

0800506c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7ff fe8b 	bl	8004d96 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	711a      	strb	r2, [r3, #4]
}
 8005086:	bf00      	nop
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff fe84 	bl	8004daa <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f043 0204 	orr.w	r2, r3, #4
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f7ff fe7a 	bl	8004dbe <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	711a      	strb	r2, [r3, #4]
}
 80050d0:	bf00      	nop
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f7ff ffce 	bl	80050d8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	711a      	strb	r2, [r3, #4]
}
 8005142:	bf00      	nop
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005156:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f7ff ffc7 	bl	80050ec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800515e:	bf00      	nop
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f043 0204 	orr.w	r2, r3, #4
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff ffbd 	bl	8005100 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2201      	movs	r2, #1
 800518a:	711a      	strb	r2, [r3, #4]
}
 800518c:	bf00      	nop
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800519c:	f7fd fed2 	bl	8002f44 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e316      	b.n	80057da <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a66      	ldr	r2, [pc, #408]	; (800534c <HAL_DMA_Init+0x1b8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d04a      	beq.n	800524c <HAL_DMA_Init+0xb8>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a65      	ldr	r2, [pc, #404]	; (8005350 <HAL_DMA_Init+0x1bc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d045      	beq.n	800524c <HAL_DMA_Init+0xb8>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a63      	ldr	r2, [pc, #396]	; (8005354 <HAL_DMA_Init+0x1c0>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d040      	beq.n	800524c <HAL_DMA_Init+0xb8>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a62      	ldr	r2, [pc, #392]	; (8005358 <HAL_DMA_Init+0x1c4>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d03b      	beq.n	800524c <HAL_DMA_Init+0xb8>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a60      	ldr	r2, [pc, #384]	; (800535c <HAL_DMA_Init+0x1c8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d036      	beq.n	800524c <HAL_DMA_Init+0xb8>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a5f      	ldr	r2, [pc, #380]	; (8005360 <HAL_DMA_Init+0x1cc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d031      	beq.n	800524c <HAL_DMA_Init+0xb8>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a5d      	ldr	r2, [pc, #372]	; (8005364 <HAL_DMA_Init+0x1d0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d02c      	beq.n	800524c <HAL_DMA_Init+0xb8>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a5c      	ldr	r2, [pc, #368]	; (8005368 <HAL_DMA_Init+0x1d4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d027      	beq.n	800524c <HAL_DMA_Init+0xb8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a5a      	ldr	r2, [pc, #360]	; (800536c <HAL_DMA_Init+0x1d8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d022      	beq.n	800524c <HAL_DMA_Init+0xb8>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a59      	ldr	r2, [pc, #356]	; (8005370 <HAL_DMA_Init+0x1dc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d01d      	beq.n	800524c <HAL_DMA_Init+0xb8>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a57      	ldr	r2, [pc, #348]	; (8005374 <HAL_DMA_Init+0x1e0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d018      	beq.n	800524c <HAL_DMA_Init+0xb8>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a56      	ldr	r2, [pc, #344]	; (8005378 <HAL_DMA_Init+0x1e4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d013      	beq.n	800524c <HAL_DMA_Init+0xb8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a54      	ldr	r2, [pc, #336]	; (800537c <HAL_DMA_Init+0x1e8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00e      	beq.n	800524c <HAL_DMA_Init+0xb8>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a53      	ldr	r2, [pc, #332]	; (8005380 <HAL_DMA_Init+0x1ec>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d009      	beq.n	800524c <HAL_DMA_Init+0xb8>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a51      	ldr	r2, [pc, #324]	; (8005384 <HAL_DMA_Init+0x1f0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d004      	beq.n	800524c <HAL_DMA_Init+0xb8>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a50      	ldr	r2, [pc, #320]	; (8005388 <HAL_DMA_Init+0x1f4>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d101      	bne.n	8005250 <HAL_DMA_Init+0xbc>
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <HAL_DMA_Init+0xbe>
 8005250:	2300      	movs	r3, #0
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 813b 	beq.w	80054ce <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a37      	ldr	r2, [pc, #220]	; (800534c <HAL_DMA_Init+0x1b8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d04a      	beq.n	8005308 <HAL_DMA_Init+0x174>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a36      	ldr	r2, [pc, #216]	; (8005350 <HAL_DMA_Init+0x1bc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d045      	beq.n	8005308 <HAL_DMA_Init+0x174>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a34      	ldr	r2, [pc, #208]	; (8005354 <HAL_DMA_Init+0x1c0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d040      	beq.n	8005308 <HAL_DMA_Init+0x174>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a33      	ldr	r2, [pc, #204]	; (8005358 <HAL_DMA_Init+0x1c4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d03b      	beq.n	8005308 <HAL_DMA_Init+0x174>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a31      	ldr	r2, [pc, #196]	; (800535c <HAL_DMA_Init+0x1c8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d036      	beq.n	8005308 <HAL_DMA_Init+0x174>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a30      	ldr	r2, [pc, #192]	; (8005360 <HAL_DMA_Init+0x1cc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d031      	beq.n	8005308 <HAL_DMA_Init+0x174>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a2e      	ldr	r2, [pc, #184]	; (8005364 <HAL_DMA_Init+0x1d0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d02c      	beq.n	8005308 <HAL_DMA_Init+0x174>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a2d      	ldr	r2, [pc, #180]	; (8005368 <HAL_DMA_Init+0x1d4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d027      	beq.n	8005308 <HAL_DMA_Init+0x174>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a2b      	ldr	r2, [pc, #172]	; (800536c <HAL_DMA_Init+0x1d8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d022      	beq.n	8005308 <HAL_DMA_Init+0x174>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <HAL_DMA_Init+0x1dc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d01d      	beq.n	8005308 <HAL_DMA_Init+0x174>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a28      	ldr	r2, [pc, #160]	; (8005374 <HAL_DMA_Init+0x1e0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d018      	beq.n	8005308 <HAL_DMA_Init+0x174>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a27      	ldr	r2, [pc, #156]	; (8005378 <HAL_DMA_Init+0x1e4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d013      	beq.n	8005308 <HAL_DMA_Init+0x174>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a25      	ldr	r2, [pc, #148]	; (800537c <HAL_DMA_Init+0x1e8>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00e      	beq.n	8005308 <HAL_DMA_Init+0x174>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a24      	ldr	r2, [pc, #144]	; (8005380 <HAL_DMA_Init+0x1ec>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d009      	beq.n	8005308 <HAL_DMA_Init+0x174>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a22      	ldr	r2, [pc, #136]	; (8005384 <HAL_DMA_Init+0x1f0>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d004      	beq.n	8005308 <HAL_DMA_Init+0x174>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a21      	ldr	r2, [pc, #132]	; (8005388 <HAL_DMA_Init+0x1f4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d108      	bne.n	800531a <HAL_DMA_Init+0x186>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0201 	bic.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e007      	b.n	800532a <HAL_DMA_Init+0x196>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0201 	bic.w	r2, r2, #1
 8005328:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800532a:	e02f      	b.n	800538c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800532c:	f7fd fe0a 	bl	8002f44 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b05      	cmp	r3, #5
 8005338:	d928      	bls.n	800538c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2203      	movs	r2, #3
 8005344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e246      	b.n	80057da <HAL_DMA_Init+0x646>
 800534c:	40020010 	.word	0x40020010
 8005350:	40020028 	.word	0x40020028
 8005354:	40020040 	.word	0x40020040
 8005358:	40020058 	.word	0x40020058
 800535c:	40020070 	.word	0x40020070
 8005360:	40020088 	.word	0x40020088
 8005364:	400200a0 	.word	0x400200a0
 8005368:	400200b8 	.word	0x400200b8
 800536c:	40020410 	.word	0x40020410
 8005370:	40020428 	.word	0x40020428
 8005374:	40020440 	.word	0x40020440
 8005378:	40020458 	.word	0x40020458
 800537c:	40020470 	.word	0x40020470
 8005380:	40020488 	.word	0x40020488
 8005384:	400204a0 	.word	0x400204a0
 8005388:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1c8      	bne.n	800532c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4b83      	ldr	r3, [pc, #524]	; (80055b4 <HAL_DMA_Init+0x420>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80053b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d107      	bne.n	80053f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e8:	4313      	orrs	r3, r2
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80053f0:	4b71      	ldr	r3, [pc, #452]	; (80055b8 <HAL_DMA_Init+0x424>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	4b71      	ldr	r3, [pc, #452]	; (80055bc <HAL_DMA_Init+0x428>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053fc:	d328      	bcc.n	8005450 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b28      	cmp	r3, #40	; 0x28
 8005404:	d903      	bls.n	800540e <HAL_DMA_Init+0x27a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b2e      	cmp	r3, #46	; 0x2e
 800540c:	d917      	bls.n	800543e <HAL_DMA_Init+0x2aa>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b3e      	cmp	r3, #62	; 0x3e
 8005414:	d903      	bls.n	800541e <HAL_DMA_Init+0x28a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b42      	cmp	r3, #66	; 0x42
 800541c:	d90f      	bls.n	800543e <HAL_DMA_Init+0x2aa>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b46      	cmp	r3, #70	; 0x46
 8005424:	d903      	bls.n	800542e <HAL_DMA_Init+0x29a>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b48      	cmp	r3, #72	; 0x48
 800542c:	d907      	bls.n	800543e <HAL_DMA_Init+0x2aa>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b4e      	cmp	r3, #78	; 0x4e
 8005434:	d905      	bls.n	8005442 <HAL_DMA_Init+0x2ae>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b52      	cmp	r3, #82	; 0x52
 800543c:	d801      	bhi.n	8005442 <HAL_DMA_Init+0x2ae>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <HAL_DMA_Init+0x2b0>
 8005442:	2300      	movs	r3, #0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800544e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f023 0307 	bic.w	r3, r3, #7
 8005466:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b04      	cmp	r3, #4
 8005478:	d117      	bne.n	80054aa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00e      	beq.n	80054aa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f002 fb33 	bl	8007af8 <DMA_CheckFifoParam>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d008      	beq.n	80054aa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2240      	movs	r2, #64	; 0x40
 800549c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e197      	b.n	80057da <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f002 fa6e 	bl	8007994 <DMA_CalcBaseAndBitshift>
 80054b8:	4603      	mov	r3, r0
 80054ba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	223f      	movs	r2, #63	; 0x3f
 80054c6:	409a      	lsls	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	e0cd      	b.n	800566a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a3b      	ldr	r2, [pc, #236]	; (80055c0 <HAL_DMA_Init+0x42c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d022      	beq.n	800551e <HAL_DMA_Init+0x38a>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a39      	ldr	r2, [pc, #228]	; (80055c4 <HAL_DMA_Init+0x430>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01d      	beq.n	800551e <HAL_DMA_Init+0x38a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a38      	ldr	r2, [pc, #224]	; (80055c8 <HAL_DMA_Init+0x434>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d018      	beq.n	800551e <HAL_DMA_Init+0x38a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a36      	ldr	r2, [pc, #216]	; (80055cc <HAL_DMA_Init+0x438>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d013      	beq.n	800551e <HAL_DMA_Init+0x38a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a35      	ldr	r2, [pc, #212]	; (80055d0 <HAL_DMA_Init+0x43c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d00e      	beq.n	800551e <HAL_DMA_Init+0x38a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a33      	ldr	r2, [pc, #204]	; (80055d4 <HAL_DMA_Init+0x440>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d009      	beq.n	800551e <HAL_DMA_Init+0x38a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a32      	ldr	r2, [pc, #200]	; (80055d8 <HAL_DMA_Init+0x444>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d004      	beq.n	800551e <HAL_DMA_Init+0x38a>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a30      	ldr	r2, [pc, #192]	; (80055dc <HAL_DMA_Init+0x448>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d101      	bne.n	8005522 <HAL_DMA_Init+0x38e>
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <HAL_DMA_Init+0x390>
 8005522:	2300      	movs	r3, #0
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8097 	beq.w	8005658 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a24      	ldr	r2, [pc, #144]	; (80055c0 <HAL_DMA_Init+0x42c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d021      	beq.n	8005578 <HAL_DMA_Init+0x3e4>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a22      	ldr	r2, [pc, #136]	; (80055c4 <HAL_DMA_Init+0x430>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d01c      	beq.n	8005578 <HAL_DMA_Init+0x3e4>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a21      	ldr	r2, [pc, #132]	; (80055c8 <HAL_DMA_Init+0x434>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d017      	beq.n	8005578 <HAL_DMA_Init+0x3e4>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1f      	ldr	r2, [pc, #124]	; (80055cc <HAL_DMA_Init+0x438>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d012      	beq.n	8005578 <HAL_DMA_Init+0x3e4>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1e      	ldr	r2, [pc, #120]	; (80055d0 <HAL_DMA_Init+0x43c>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00d      	beq.n	8005578 <HAL_DMA_Init+0x3e4>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a1c      	ldr	r2, [pc, #112]	; (80055d4 <HAL_DMA_Init+0x440>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d008      	beq.n	8005578 <HAL_DMA_Init+0x3e4>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1b      	ldr	r2, [pc, #108]	; (80055d8 <HAL_DMA_Init+0x444>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d003      	beq.n	8005578 <HAL_DMA_Init+0x3e4>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a19      	ldr	r2, [pc, #100]	; (80055dc <HAL_DMA_Init+0x448>)
 8005576:	4293      	cmp	r3, r2
 8005578:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2202      	movs	r2, #2
 800557e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <HAL_DMA_Init+0x44c>)
 8005596:	4013      	ands	r3, r2
 8005598:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b40      	cmp	r3, #64	; 0x40
 80055a0:	d020      	beq.n	80055e4 <HAL_DMA_Init+0x450>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b80      	cmp	r3, #128	; 0x80
 80055a8:	d102      	bne.n	80055b0 <HAL_DMA_Init+0x41c>
 80055aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055ae:	e01a      	b.n	80055e6 <HAL_DMA_Init+0x452>
 80055b0:	2300      	movs	r3, #0
 80055b2:	e018      	b.n	80055e6 <HAL_DMA_Init+0x452>
 80055b4:	fe10803f 	.word	0xfe10803f
 80055b8:	5c001000 	.word	0x5c001000
 80055bc:	ffff0000 	.word	0xffff0000
 80055c0:	58025408 	.word	0x58025408
 80055c4:	5802541c 	.word	0x5802541c
 80055c8:	58025430 	.word	0x58025430
 80055cc:	58025444 	.word	0x58025444
 80055d0:	58025458 	.word	0x58025458
 80055d4:	5802546c 	.word	0x5802546c
 80055d8:	58025480 	.word	0x58025480
 80055dc:	58025494 	.word	0x58025494
 80055e0:	fffe000f 	.word	0xfffe000f
 80055e4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	68d2      	ldr	r2, [r2, #12]
 80055ea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80055ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80055f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80055fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005604:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800560c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005614:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	461a      	mov	r2, r3
 800562a:	4b6e      	ldr	r3, [pc, #440]	; (80057e4 <HAL_DMA_Init+0x650>)
 800562c:	4413      	add	r3, r2
 800562e:	4a6e      	ldr	r2, [pc, #440]	; (80057e8 <HAL_DMA_Init+0x654>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	091b      	lsrs	r3, r3, #4
 8005636:	009a      	lsls	r2, r3, #2
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f002 f9a9 	bl	8007994 <DMA_CalcBaseAndBitshift>
 8005642:	4603      	mov	r3, r0
 8005644:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564a:	f003 031f 	and.w	r3, r3, #31
 800564e:	2201      	movs	r2, #1
 8005650:	409a      	lsls	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	605a      	str	r2, [r3, #4]
 8005656:	e008      	b.n	800566a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2240      	movs	r2, #64	; 0x40
 800565c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2203      	movs	r2, #3
 8005662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e0b7      	b.n	80057da <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a5f      	ldr	r2, [pc, #380]	; (80057ec <HAL_DMA_Init+0x658>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d072      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a5d      	ldr	r2, [pc, #372]	; (80057f0 <HAL_DMA_Init+0x65c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d06d      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a5c      	ldr	r2, [pc, #368]	; (80057f4 <HAL_DMA_Init+0x660>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d068      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a5a      	ldr	r2, [pc, #360]	; (80057f8 <HAL_DMA_Init+0x664>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d063      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a59      	ldr	r2, [pc, #356]	; (80057fc <HAL_DMA_Init+0x668>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d05e      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a57      	ldr	r2, [pc, #348]	; (8005800 <HAL_DMA_Init+0x66c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d059      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a56      	ldr	r2, [pc, #344]	; (8005804 <HAL_DMA_Init+0x670>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d054      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a54      	ldr	r2, [pc, #336]	; (8005808 <HAL_DMA_Init+0x674>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d04f      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a53      	ldr	r2, [pc, #332]	; (800580c <HAL_DMA_Init+0x678>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d04a      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a51      	ldr	r2, [pc, #324]	; (8005810 <HAL_DMA_Init+0x67c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d045      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a50      	ldr	r2, [pc, #320]	; (8005814 <HAL_DMA_Init+0x680>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d040      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a4e      	ldr	r2, [pc, #312]	; (8005818 <HAL_DMA_Init+0x684>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d03b      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a4d      	ldr	r2, [pc, #308]	; (800581c <HAL_DMA_Init+0x688>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d036      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a4b      	ldr	r2, [pc, #300]	; (8005820 <HAL_DMA_Init+0x68c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d031      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a4a      	ldr	r2, [pc, #296]	; (8005824 <HAL_DMA_Init+0x690>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d02c      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a48      	ldr	r2, [pc, #288]	; (8005828 <HAL_DMA_Init+0x694>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d027      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a47      	ldr	r2, [pc, #284]	; (800582c <HAL_DMA_Init+0x698>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d022      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a45      	ldr	r2, [pc, #276]	; (8005830 <HAL_DMA_Init+0x69c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d01d      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a44      	ldr	r2, [pc, #272]	; (8005834 <HAL_DMA_Init+0x6a0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d018      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a42      	ldr	r2, [pc, #264]	; (8005838 <HAL_DMA_Init+0x6a4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d013      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a41      	ldr	r2, [pc, #260]	; (800583c <HAL_DMA_Init+0x6a8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00e      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a3f      	ldr	r2, [pc, #252]	; (8005840 <HAL_DMA_Init+0x6ac>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d009      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a3e      	ldr	r2, [pc, #248]	; (8005844 <HAL_DMA_Init+0x6b0>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d004      	beq.n	800575a <HAL_DMA_Init+0x5c6>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a3c      	ldr	r2, [pc, #240]	; (8005848 <HAL_DMA_Init+0x6b4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d101      	bne.n	800575e <HAL_DMA_Init+0x5ca>
 800575a:	2301      	movs	r3, #1
 800575c:	e000      	b.n	8005760 <HAL_DMA_Init+0x5cc>
 800575e:	2300      	movs	r3, #0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d032      	beq.n	80057ca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f002 fa43 	bl	8007bf0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b80      	cmp	r3, #128	; 0x80
 8005770:	d102      	bne.n	8005778 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800578c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d010      	beq.n	80057b8 <HAL_DMA_Init+0x624>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2b08      	cmp	r3, #8
 800579c:	d80c      	bhi.n	80057b8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f002 fac0 	bl	8007d24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80057b4:	605a      	str	r2, [r3, #4]
 80057b6:	e008      	b.n	80057ca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	a7fdabf8 	.word	0xa7fdabf8
 80057e8:	cccccccd 	.word	0xcccccccd
 80057ec:	40020010 	.word	0x40020010
 80057f0:	40020028 	.word	0x40020028
 80057f4:	40020040 	.word	0x40020040
 80057f8:	40020058 	.word	0x40020058
 80057fc:	40020070 	.word	0x40020070
 8005800:	40020088 	.word	0x40020088
 8005804:	400200a0 	.word	0x400200a0
 8005808:	400200b8 	.word	0x400200b8
 800580c:	40020410 	.word	0x40020410
 8005810:	40020428 	.word	0x40020428
 8005814:	40020440 	.word	0x40020440
 8005818:	40020458 	.word	0x40020458
 800581c:	40020470 	.word	0x40020470
 8005820:	40020488 	.word	0x40020488
 8005824:	400204a0 	.word	0x400204a0
 8005828:	400204b8 	.word	0x400204b8
 800582c:	58025408 	.word	0x58025408
 8005830:	5802541c 	.word	0x5802541c
 8005834:	58025430 	.word	0x58025430
 8005838:	58025444 	.word	0x58025444
 800583c:	58025458 	.word	0x58025458
 8005840:	5802546c 	.word	0x5802546c
 8005844:	58025480 	.word	0x58025480
 8005848:	58025494 	.word	0x58025494

0800584c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b086      	sub	sp, #24
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e226      	b.n	8005cb6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_DMA_Start_IT+0x2a>
 8005872:	2302      	movs	r3, #2
 8005874:	e21f      	b.n	8005cb6 <HAL_DMA_Start_IT+0x46a>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b01      	cmp	r3, #1
 8005888:	f040 820a 	bne.w	8005ca0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a68      	ldr	r2, [pc, #416]	; (8005a40 <HAL_DMA_Start_IT+0x1f4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d04a      	beq.n	800593a <HAL_DMA_Start_IT+0xee>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a66      	ldr	r2, [pc, #408]	; (8005a44 <HAL_DMA_Start_IT+0x1f8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d045      	beq.n	800593a <HAL_DMA_Start_IT+0xee>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a65      	ldr	r2, [pc, #404]	; (8005a48 <HAL_DMA_Start_IT+0x1fc>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d040      	beq.n	800593a <HAL_DMA_Start_IT+0xee>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a63      	ldr	r2, [pc, #396]	; (8005a4c <HAL_DMA_Start_IT+0x200>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d03b      	beq.n	800593a <HAL_DMA_Start_IT+0xee>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a62      	ldr	r2, [pc, #392]	; (8005a50 <HAL_DMA_Start_IT+0x204>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d036      	beq.n	800593a <HAL_DMA_Start_IT+0xee>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a60      	ldr	r2, [pc, #384]	; (8005a54 <HAL_DMA_Start_IT+0x208>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d031      	beq.n	800593a <HAL_DMA_Start_IT+0xee>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a5f      	ldr	r2, [pc, #380]	; (8005a58 <HAL_DMA_Start_IT+0x20c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d02c      	beq.n	800593a <HAL_DMA_Start_IT+0xee>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a5d      	ldr	r2, [pc, #372]	; (8005a5c <HAL_DMA_Start_IT+0x210>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d027      	beq.n	800593a <HAL_DMA_Start_IT+0xee>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a5c      	ldr	r2, [pc, #368]	; (8005a60 <HAL_DMA_Start_IT+0x214>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_DMA_Start_IT+0xee>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a5a      	ldr	r2, [pc, #360]	; (8005a64 <HAL_DMA_Start_IT+0x218>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01d      	beq.n	800593a <HAL_DMA_Start_IT+0xee>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a59      	ldr	r2, [pc, #356]	; (8005a68 <HAL_DMA_Start_IT+0x21c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <HAL_DMA_Start_IT+0xee>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a57      	ldr	r2, [pc, #348]	; (8005a6c <HAL_DMA_Start_IT+0x220>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_DMA_Start_IT+0xee>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a56      	ldr	r2, [pc, #344]	; (8005a70 <HAL_DMA_Start_IT+0x224>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_DMA_Start_IT+0xee>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a54      	ldr	r2, [pc, #336]	; (8005a74 <HAL_DMA_Start_IT+0x228>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_DMA_Start_IT+0xee>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a53      	ldr	r2, [pc, #332]	; (8005a78 <HAL_DMA_Start_IT+0x22c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_DMA_Start_IT+0xee>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a51      	ldr	r2, [pc, #324]	; (8005a7c <HAL_DMA_Start_IT+0x230>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d108      	bne.n	800594c <HAL_DMA_Start_IT+0x100>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0201 	bic.w	r2, r2, #1
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	e007      	b.n	800595c <HAL_DMA_Start_IT+0x110>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0201 	bic.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f001 fe6a 	bl	800763c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a34      	ldr	r2, [pc, #208]	; (8005a40 <HAL_DMA_Start_IT+0x1f4>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d04a      	beq.n	8005a08 <HAL_DMA_Start_IT+0x1bc>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a33      	ldr	r2, [pc, #204]	; (8005a44 <HAL_DMA_Start_IT+0x1f8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d045      	beq.n	8005a08 <HAL_DMA_Start_IT+0x1bc>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a31      	ldr	r2, [pc, #196]	; (8005a48 <HAL_DMA_Start_IT+0x1fc>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d040      	beq.n	8005a08 <HAL_DMA_Start_IT+0x1bc>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a30      	ldr	r2, [pc, #192]	; (8005a4c <HAL_DMA_Start_IT+0x200>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d03b      	beq.n	8005a08 <HAL_DMA_Start_IT+0x1bc>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a2e      	ldr	r2, [pc, #184]	; (8005a50 <HAL_DMA_Start_IT+0x204>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d036      	beq.n	8005a08 <HAL_DMA_Start_IT+0x1bc>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a2d      	ldr	r2, [pc, #180]	; (8005a54 <HAL_DMA_Start_IT+0x208>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d031      	beq.n	8005a08 <HAL_DMA_Start_IT+0x1bc>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a2b      	ldr	r2, [pc, #172]	; (8005a58 <HAL_DMA_Start_IT+0x20c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d02c      	beq.n	8005a08 <HAL_DMA_Start_IT+0x1bc>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a2a      	ldr	r2, [pc, #168]	; (8005a5c <HAL_DMA_Start_IT+0x210>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d027      	beq.n	8005a08 <HAL_DMA_Start_IT+0x1bc>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a28      	ldr	r2, [pc, #160]	; (8005a60 <HAL_DMA_Start_IT+0x214>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d022      	beq.n	8005a08 <HAL_DMA_Start_IT+0x1bc>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a27      	ldr	r2, [pc, #156]	; (8005a64 <HAL_DMA_Start_IT+0x218>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d01d      	beq.n	8005a08 <HAL_DMA_Start_IT+0x1bc>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a25      	ldr	r2, [pc, #148]	; (8005a68 <HAL_DMA_Start_IT+0x21c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d018      	beq.n	8005a08 <HAL_DMA_Start_IT+0x1bc>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a24      	ldr	r2, [pc, #144]	; (8005a6c <HAL_DMA_Start_IT+0x220>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d013      	beq.n	8005a08 <HAL_DMA_Start_IT+0x1bc>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a22      	ldr	r2, [pc, #136]	; (8005a70 <HAL_DMA_Start_IT+0x224>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00e      	beq.n	8005a08 <HAL_DMA_Start_IT+0x1bc>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a21      	ldr	r2, [pc, #132]	; (8005a74 <HAL_DMA_Start_IT+0x228>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d009      	beq.n	8005a08 <HAL_DMA_Start_IT+0x1bc>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1f      	ldr	r2, [pc, #124]	; (8005a78 <HAL_DMA_Start_IT+0x22c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_DMA_Start_IT+0x1bc>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1e      	ldr	r2, [pc, #120]	; (8005a7c <HAL_DMA_Start_IT+0x230>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d101      	bne.n	8005a0c <HAL_DMA_Start_IT+0x1c0>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e000      	b.n	8005a0e <HAL_DMA_Start_IT+0x1c2>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d036      	beq.n	8005a80 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f023 021e 	bic.w	r2, r3, #30
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0216 	orr.w	r2, r2, #22
 8005a24:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d03e      	beq.n	8005aac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0208 	orr.w	r2, r2, #8
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	e035      	b.n	8005aac <HAL_DMA_Start_IT+0x260>
 8005a40:	40020010 	.word	0x40020010
 8005a44:	40020028 	.word	0x40020028
 8005a48:	40020040 	.word	0x40020040
 8005a4c:	40020058 	.word	0x40020058
 8005a50:	40020070 	.word	0x40020070
 8005a54:	40020088 	.word	0x40020088
 8005a58:	400200a0 	.word	0x400200a0
 8005a5c:	400200b8 	.word	0x400200b8
 8005a60:	40020410 	.word	0x40020410
 8005a64:	40020428 	.word	0x40020428
 8005a68:	40020440 	.word	0x40020440
 8005a6c:	40020458 	.word	0x40020458
 8005a70:	40020470 	.word	0x40020470
 8005a74:	40020488 	.word	0x40020488
 8005a78:	400204a0 	.word	0x400204a0
 8005a7c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f023 020e 	bic.w	r2, r3, #14
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 020a 	orr.w	r2, r2, #10
 8005a92:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0204 	orr.w	r2, r2, #4
 8005aaa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a83      	ldr	r2, [pc, #524]	; (8005cc0 <HAL_DMA_Start_IT+0x474>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d072      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a82      	ldr	r2, [pc, #520]	; (8005cc4 <HAL_DMA_Start_IT+0x478>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d06d      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a80      	ldr	r2, [pc, #512]	; (8005cc8 <HAL_DMA_Start_IT+0x47c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d068      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a7f      	ldr	r2, [pc, #508]	; (8005ccc <HAL_DMA_Start_IT+0x480>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d063      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a7d      	ldr	r2, [pc, #500]	; (8005cd0 <HAL_DMA_Start_IT+0x484>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d05e      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a7c      	ldr	r2, [pc, #496]	; (8005cd4 <HAL_DMA_Start_IT+0x488>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d059      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a7a      	ldr	r2, [pc, #488]	; (8005cd8 <HAL_DMA_Start_IT+0x48c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d054      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a79      	ldr	r2, [pc, #484]	; (8005cdc <HAL_DMA_Start_IT+0x490>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d04f      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a77      	ldr	r2, [pc, #476]	; (8005ce0 <HAL_DMA_Start_IT+0x494>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d04a      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a76      	ldr	r2, [pc, #472]	; (8005ce4 <HAL_DMA_Start_IT+0x498>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d045      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a74      	ldr	r2, [pc, #464]	; (8005ce8 <HAL_DMA_Start_IT+0x49c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d040      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a73      	ldr	r2, [pc, #460]	; (8005cec <HAL_DMA_Start_IT+0x4a0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d03b      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a71      	ldr	r2, [pc, #452]	; (8005cf0 <HAL_DMA_Start_IT+0x4a4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d036      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a70      	ldr	r2, [pc, #448]	; (8005cf4 <HAL_DMA_Start_IT+0x4a8>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d031      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a6e      	ldr	r2, [pc, #440]	; (8005cf8 <HAL_DMA_Start_IT+0x4ac>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d02c      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a6d      	ldr	r2, [pc, #436]	; (8005cfc <HAL_DMA_Start_IT+0x4b0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d027      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a6b      	ldr	r2, [pc, #428]	; (8005d00 <HAL_DMA_Start_IT+0x4b4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d022      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a6a      	ldr	r2, [pc, #424]	; (8005d04 <HAL_DMA_Start_IT+0x4b8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d01d      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a68      	ldr	r2, [pc, #416]	; (8005d08 <HAL_DMA_Start_IT+0x4bc>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d018      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a67      	ldr	r2, [pc, #412]	; (8005d0c <HAL_DMA_Start_IT+0x4c0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d013      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a65      	ldr	r2, [pc, #404]	; (8005d10 <HAL_DMA_Start_IT+0x4c4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00e      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a64      	ldr	r2, [pc, #400]	; (8005d14 <HAL_DMA_Start_IT+0x4c8>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d009      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a62      	ldr	r2, [pc, #392]	; (8005d18 <HAL_DMA_Start_IT+0x4cc>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d004      	beq.n	8005b9c <HAL_DMA_Start_IT+0x350>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a61      	ldr	r2, [pc, #388]	; (8005d1c <HAL_DMA_Start_IT+0x4d0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d101      	bne.n	8005ba0 <HAL_DMA_Start_IT+0x354>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <HAL_DMA_Start_IT+0x356>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01a      	beq.n	8005bdc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bc2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d007      	beq.n	8005bdc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bda:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a37      	ldr	r2, [pc, #220]	; (8005cc0 <HAL_DMA_Start_IT+0x474>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d04a      	beq.n	8005c7c <HAL_DMA_Start_IT+0x430>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a36      	ldr	r2, [pc, #216]	; (8005cc4 <HAL_DMA_Start_IT+0x478>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d045      	beq.n	8005c7c <HAL_DMA_Start_IT+0x430>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a34      	ldr	r2, [pc, #208]	; (8005cc8 <HAL_DMA_Start_IT+0x47c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d040      	beq.n	8005c7c <HAL_DMA_Start_IT+0x430>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a33      	ldr	r2, [pc, #204]	; (8005ccc <HAL_DMA_Start_IT+0x480>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d03b      	beq.n	8005c7c <HAL_DMA_Start_IT+0x430>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a31      	ldr	r2, [pc, #196]	; (8005cd0 <HAL_DMA_Start_IT+0x484>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d036      	beq.n	8005c7c <HAL_DMA_Start_IT+0x430>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a30      	ldr	r2, [pc, #192]	; (8005cd4 <HAL_DMA_Start_IT+0x488>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d031      	beq.n	8005c7c <HAL_DMA_Start_IT+0x430>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a2e      	ldr	r2, [pc, #184]	; (8005cd8 <HAL_DMA_Start_IT+0x48c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d02c      	beq.n	8005c7c <HAL_DMA_Start_IT+0x430>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a2d      	ldr	r2, [pc, #180]	; (8005cdc <HAL_DMA_Start_IT+0x490>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d027      	beq.n	8005c7c <HAL_DMA_Start_IT+0x430>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2b      	ldr	r2, [pc, #172]	; (8005ce0 <HAL_DMA_Start_IT+0x494>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d022      	beq.n	8005c7c <HAL_DMA_Start_IT+0x430>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ce4 <HAL_DMA_Start_IT+0x498>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d01d      	beq.n	8005c7c <HAL_DMA_Start_IT+0x430>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a28      	ldr	r2, [pc, #160]	; (8005ce8 <HAL_DMA_Start_IT+0x49c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d018      	beq.n	8005c7c <HAL_DMA_Start_IT+0x430>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a27      	ldr	r2, [pc, #156]	; (8005cec <HAL_DMA_Start_IT+0x4a0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d013      	beq.n	8005c7c <HAL_DMA_Start_IT+0x430>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a25      	ldr	r2, [pc, #148]	; (8005cf0 <HAL_DMA_Start_IT+0x4a4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00e      	beq.n	8005c7c <HAL_DMA_Start_IT+0x430>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a24      	ldr	r2, [pc, #144]	; (8005cf4 <HAL_DMA_Start_IT+0x4a8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d009      	beq.n	8005c7c <HAL_DMA_Start_IT+0x430>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a22      	ldr	r2, [pc, #136]	; (8005cf8 <HAL_DMA_Start_IT+0x4ac>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d004      	beq.n	8005c7c <HAL_DMA_Start_IT+0x430>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a21      	ldr	r2, [pc, #132]	; (8005cfc <HAL_DMA_Start_IT+0x4b0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d108      	bne.n	8005c8e <HAL_DMA_Start_IT+0x442>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0201 	orr.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	e012      	b.n	8005cb4 <HAL_DMA_Start_IT+0x468>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f042 0201 	orr.w	r2, r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	e009      	b.n	8005cb4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40020010 	.word	0x40020010
 8005cc4:	40020028 	.word	0x40020028
 8005cc8:	40020040 	.word	0x40020040
 8005ccc:	40020058 	.word	0x40020058
 8005cd0:	40020070 	.word	0x40020070
 8005cd4:	40020088 	.word	0x40020088
 8005cd8:	400200a0 	.word	0x400200a0
 8005cdc:	400200b8 	.word	0x400200b8
 8005ce0:	40020410 	.word	0x40020410
 8005ce4:	40020428 	.word	0x40020428
 8005ce8:	40020440 	.word	0x40020440
 8005cec:	40020458 	.word	0x40020458
 8005cf0:	40020470 	.word	0x40020470
 8005cf4:	40020488 	.word	0x40020488
 8005cf8:	400204a0 	.word	0x400204a0
 8005cfc:	400204b8 	.word	0x400204b8
 8005d00:	58025408 	.word	0x58025408
 8005d04:	5802541c 	.word	0x5802541c
 8005d08:	58025430 	.word	0x58025430
 8005d0c:	58025444 	.word	0x58025444
 8005d10:	58025458 	.word	0x58025458
 8005d14:	5802546c 	.word	0x5802546c
 8005d18:	58025480 	.word	0x58025480
 8005d1c:	58025494 	.word	0x58025494

08005d20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005d28:	f7fd f90c 	bl	8002f44 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e2dc      	b.n	80062f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d008      	beq.n	8005d56 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2280      	movs	r2, #128	; 0x80
 8005d48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e2cd      	b.n	80062f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a76      	ldr	r2, [pc, #472]	; (8005f34 <HAL_DMA_Abort+0x214>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d04a      	beq.n	8005df6 <HAL_DMA_Abort+0xd6>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a74      	ldr	r2, [pc, #464]	; (8005f38 <HAL_DMA_Abort+0x218>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d045      	beq.n	8005df6 <HAL_DMA_Abort+0xd6>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a73      	ldr	r2, [pc, #460]	; (8005f3c <HAL_DMA_Abort+0x21c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d040      	beq.n	8005df6 <HAL_DMA_Abort+0xd6>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a71      	ldr	r2, [pc, #452]	; (8005f40 <HAL_DMA_Abort+0x220>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d03b      	beq.n	8005df6 <HAL_DMA_Abort+0xd6>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a70      	ldr	r2, [pc, #448]	; (8005f44 <HAL_DMA_Abort+0x224>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d036      	beq.n	8005df6 <HAL_DMA_Abort+0xd6>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a6e      	ldr	r2, [pc, #440]	; (8005f48 <HAL_DMA_Abort+0x228>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d031      	beq.n	8005df6 <HAL_DMA_Abort+0xd6>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a6d      	ldr	r2, [pc, #436]	; (8005f4c <HAL_DMA_Abort+0x22c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d02c      	beq.n	8005df6 <HAL_DMA_Abort+0xd6>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a6b      	ldr	r2, [pc, #428]	; (8005f50 <HAL_DMA_Abort+0x230>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d027      	beq.n	8005df6 <HAL_DMA_Abort+0xd6>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a6a      	ldr	r2, [pc, #424]	; (8005f54 <HAL_DMA_Abort+0x234>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d022      	beq.n	8005df6 <HAL_DMA_Abort+0xd6>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a68      	ldr	r2, [pc, #416]	; (8005f58 <HAL_DMA_Abort+0x238>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d01d      	beq.n	8005df6 <HAL_DMA_Abort+0xd6>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a67      	ldr	r2, [pc, #412]	; (8005f5c <HAL_DMA_Abort+0x23c>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d018      	beq.n	8005df6 <HAL_DMA_Abort+0xd6>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a65      	ldr	r2, [pc, #404]	; (8005f60 <HAL_DMA_Abort+0x240>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d013      	beq.n	8005df6 <HAL_DMA_Abort+0xd6>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a64      	ldr	r2, [pc, #400]	; (8005f64 <HAL_DMA_Abort+0x244>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d00e      	beq.n	8005df6 <HAL_DMA_Abort+0xd6>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a62      	ldr	r2, [pc, #392]	; (8005f68 <HAL_DMA_Abort+0x248>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d009      	beq.n	8005df6 <HAL_DMA_Abort+0xd6>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a61      	ldr	r2, [pc, #388]	; (8005f6c <HAL_DMA_Abort+0x24c>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d004      	beq.n	8005df6 <HAL_DMA_Abort+0xd6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a5f      	ldr	r2, [pc, #380]	; (8005f70 <HAL_DMA_Abort+0x250>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d101      	bne.n	8005dfa <HAL_DMA_Abort+0xda>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <HAL_DMA_Abort+0xdc>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d013      	beq.n	8005e28 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 021e 	bic.w	r2, r2, #30
 8005e0e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	695a      	ldr	r2, [r3, #20]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e1e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	e00a      	b.n	8005e3e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 020e 	bic.w	r2, r2, #14
 8005e36:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a3c      	ldr	r2, [pc, #240]	; (8005f34 <HAL_DMA_Abort+0x214>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d072      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a3a      	ldr	r2, [pc, #232]	; (8005f38 <HAL_DMA_Abort+0x218>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d06d      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a39      	ldr	r2, [pc, #228]	; (8005f3c <HAL_DMA_Abort+0x21c>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d068      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a37      	ldr	r2, [pc, #220]	; (8005f40 <HAL_DMA_Abort+0x220>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d063      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a36      	ldr	r2, [pc, #216]	; (8005f44 <HAL_DMA_Abort+0x224>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d05e      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a34      	ldr	r2, [pc, #208]	; (8005f48 <HAL_DMA_Abort+0x228>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d059      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a33      	ldr	r2, [pc, #204]	; (8005f4c <HAL_DMA_Abort+0x22c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d054      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a31      	ldr	r2, [pc, #196]	; (8005f50 <HAL_DMA_Abort+0x230>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d04f      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a30      	ldr	r2, [pc, #192]	; (8005f54 <HAL_DMA_Abort+0x234>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d04a      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a2e      	ldr	r2, [pc, #184]	; (8005f58 <HAL_DMA_Abort+0x238>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d045      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a2d      	ldr	r2, [pc, #180]	; (8005f5c <HAL_DMA_Abort+0x23c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d040      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a2b      	ldr	r2, [pc, #172]	; (8005f60 <HAL_DMA_Abort+0x240>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d03b      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a2a      	ldr	r2, [pc, #168]	; (8005f64 <HAL_DMA_Abort+0x244>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d036      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a28      	ldr	r2, [pc, #160]	; (8005f68 <HAL_DMA_Abort+0x248>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d031      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a27      	ldr	r2, [pc, #156]	; (8005f6c <HAL_DMA_Abort+0x24c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d02c      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a25      	ldr	r2, [pc, #148]	; (8005f70 <HAL_DMA_Abort+0x250>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d027      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a24      	ldr	r2, [pc, #144]	; (8005f74 <HAL_DMA_Abort+0x254>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d022      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a22      	ldr	r2, [pc, #136]	; (8005f78 <HAL_DMA_Abort+0x258>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d01d      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a21      	ldr	r2, [pc, #132]	; (8005f7c <HAL_DMA_Abort+0x25c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d018      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1f      	ldr	r2, [pc, #124]	; (8005f80 <HAL_DMA_Abort+0x260>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d013      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1e      	ldr	r2, [pc, #120]	; (8005f84 <HAL_DMA_Abort+0x264>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00e      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1c      	ldr	r2, [pc, #112]	; (8005f88 <HAL_DMA_Abort+0x268>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d009      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1b      	ldr	r2, [pc, #108]	; (8005f8c <HAL_DMA_Abort+0x26c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d004      	beq.n	8005f2e <HAL_DMA_Abort+0x20e>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a19      	ldr	r2, [pc, #100]	; (8005f90 <HAL_DMA_Abort+0x270>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d132      	bne.n	8005f94 <HAL_DMA_Abort+0x274>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e031      	b.n	8005f96 <HAL_DMA_Abort+0x276>
 8005f32:	bf00      	nop
 8005f34:	40020010 	.word	0x40020010
 8005f38:	40020028 	.word	0x40020028
 8005f3c:	40020040 	.word	0x40020040
 8005f40:	40020058 	.word	0x40020058
 8005f44:	40020070 	.word	0x40020070
 8005f48:	40020088 	.word	0x40020088
 8005f4c:	400200a0 	.word	0x400200a0
 8005f50:	400200b8 	.word	0x400200b8
 8005f54:	40020410 	.word	0x40020410
 8005f58:	40020428 	.word	0x40020428
 8005f5c:	40020440 	.word	0x40020440
 8005f60:	40020458 	.word	0x40020458
 8005f64:	40020470 	.word	0x40020470
 8005f68:	40020488 	.word	0x40020488
 8005f6c:	400204a0 	.word	0x400204a0
 8005f70:	400204b8 	.word	0x400204b8
 8005f74:	58025408 	.word	0x58025408
 8005f78:	5802541c 	.word	0x5802541c
 8005f7c:	58025430 	.word	0x58025430
 8005f80:	58025444 	.word	0x58025444
 8005f84:	58025458 	.word	0x58025458
 8005f88:	5802546c 	.word	0x5802546c
 8005f8c:	58025480 	.word	0x58025480
 8005f90:	58025494 	.word	0x58025494
 8005f94:	2300      	movs	r3, #0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d007      	beq.n	8005faa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a6d      	ldr	r2, [pc, #436]	; (8006164 <HAL_DMA_Abort+0x444>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d04a      	beq.n	800604a <HAL_DMA_Abort+0x32a>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a6b      	ldr	r2, [pc, #428]	; (8006168 <HAL_DMA_Abort+0x448>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d045      	beq.n	800604a <HAL_DMA_Abort+0x32a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a6a      	ldr	r2, [pc, #424]	; (800616c <HAL_DMA_Abort+0x44c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d040      	beq.n	800604a <HAL_DMA_Abort+0x32a>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a68      	ldr	r2, [pc, #416]	; (8006170 <HAL_DMA_Abort+0x450>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d03b      	beq.n	800604a <HAL_DMA_Abort+0x32a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a67      	ldr	r2, [pc, #412]	; (8006174 <HAL_DMA_Abort+0x454>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d036      	beq.n	800604a <HAL_DMA_Abort+0x32a>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a65      	ldr	r2, [pc, #404]	; (8006178 <HAL_DMA_Abort+0x458>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d031      	beq.n	800604a <HAL_DMA_Abort+0x32a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a64      	ldr	r2, [pc, #400]	; (800617c <HAL_DMA_Abort+0x45c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d02c      	beq.n	800604a <HAL_DMA_Abort+0x32a>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a62      	ldr	r2, [pc, #392]	; (8006180 <HAL_DMA_Abort+0x460>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d027      	beq.n	800604a <HAL_DMA_Abort+0x32a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a61      	ldr	r2, [pc, #388]	; (8006184 <HAL_DMA_Abort+0x464>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d022      	beq.n	800604a <HAL_DMA_Abort+0x32a>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a5f      	ldr	r2, [pc, #380]	; (8006188 <HAL_DMA_Abort+0x468>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01d      	beq.n	800604a <HAL_DMA_Abort+0x32a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a5e      	ldr	r2, [pc, #376]	; (800618c <HAL_DMA_Abort+0x46c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d018      	beq.n	800604a <HAL_DMA_Abort+0x32a>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a5c      	ldr	r2, [pc, #368]	; (8006190 <HAL_DMA_Abort+0x470>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d013      	beq.n	800604a <HAL_DMA_Abort+0x32a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a5b      	ldr	r2, [pc, #364]	; (8006194 <HAL_DMA_Abort+0x474>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00e      	beq.n	800604a <HAL_DMA_Abort+0x32a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a59      	ldr	r2, [pc, #356]	; (8006198 <HAL_DMA_Abort+0x478>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d009      	beq.n	800604a <HAL_DMA_Abort+0x32a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a58      	ldr	r2, [pc, #352]	; (800619c <HAL_DMA_Abort+0x47c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d004      	beq.n	800604a <HAL_DMA_Abort+0x32a>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a56      	ldr	r2, [pc, #344]	; (80061a0 <HAL_DMA_Abort+0x480>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d108      	bne.n	800605c <HAL_DMA_Abort+0x33c>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0201 	bic.w	r2, r2, #1
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	e007      	b.n	800606c <HAL_DMA_Abort+0x34c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0201 	bic.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800606c:	e013      	b.n	8006096 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800606e:	f7fc ff69 	bl	8002f44 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b05      	cmp	r3, #5
 800607a:	d90c      	bls.n	8006096 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2220      	movs	r2, #32
 8006080:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2203      	movs	r2, #3
 8006086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e12d      	b.n	80062f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e5      	bne.n	800606e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a2f      	ldr	r2, [pc, #188]	; (8006164 <HAL_DMA_Abort+0x444>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d04a      	beq.n	8006142 <HAL_DMA_Abort+0x422>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a2d      	ldr	r2, [pc, #180]	; (8006168 <HAL_DMA_Abort+0x448>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d045      	beq.n	8006142 <HAL_DMA_Abort+0x422>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a2c      	ldr	r2, [pc, #176]	; (800616c <HAL_DMA_Abort+0x44c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d040      	beq.n	8006142 <HAL_DMA_Abort+0x422>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a2a      	ldr	r2, [pc, #168]	; (8006170 <HAL_DMA_Abort+0x450>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d03b      	beq.n	8006142 <HAL_DMA_Abort+0x422>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a29      	ldr	r2, [pc, #164]	; (8006174 <HAL_DMA_Abort+0x454>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d036      	beq.n	8006142 <HAL_DMA_Abort+0x422>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a27      	ldr	r2, [pc, #156]	; (8006178 <HAL_DMA_Abort+0x458>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d031      	beq.n	8006142 <HAL_DMA_Abort+0x422>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a26      	ldr	r2, [pc, #152]	; (800617c <HAL_DMA_Abort+0x45c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d02c      	beq.n	8006142 <HAL_DMA_Abort+0x422>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a24      	ldr	r2, [pc, #144]	; (8006180 <HAL_DMA_Abort+0x460>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d027      	beq.n	8006142 <HAL_DMA_Abort+0x422>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a23      	ldr	r2, [pc, #140]	; (8006184 <HAL_DMA_Abort+0x464>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d022      	beq.n	8006142 <HAL_DMA_Abort+0x422>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a21      	ldr	r2, [pc, #132]	; (8006188 <HAL_DMA_Abort+0x468>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d01d      	beq.n	8006142 <HAL_DMA_Abort+0x422>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a20      	ldr	r2, [pc, #128]	; (800618c <HAL_DMA_Abort+0x46c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d018      	beq.n	8006142 <HAL_DMA_Abort+0x422>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1e      	ldr	r2, [pc, #120]	; (8006190 <HAL_DMA_Abort+0x470>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d013      	beq.n	8006142 <HAL_DMA_Abort+0x422>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1d      	ldr	r2, [pc, #116]	; (8006194 <HAL_DMA_Abort+0x474>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d00e      	beq.n	8006142 <HAL_DMA_Abort+0x422>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a1b      	ldr	r2, [pc, #108]	; (8006198 <HAL_DMA_Abort+0x478>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d009      	beq.n	8006142 <HAL_DMA_Abort+0x422>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a1a      	ldr	r2, [pc, #104]	; (800619c <HAL_DMA_Abort+0x47c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d004      	beq.n	8006142 <HAL_DMA_Abort+0x422>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a18      	ldr	r2, [pc, #96]	; (80061a0 <HAL_DMA_Abort+0x480>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d101      	bne.n	8006146 <HAL_DMA_Abort+0x426>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <HAL_DMA_Abort+0x428>
 8006146:	2300      	movs	r3, #0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d02b      	beq.n	80061a4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006150:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006156:	f003 031f 	and.w	r3, r3, #31
 800615a:	223f      	movs	r2, #63	; 0x3f
 800615c:	409a      	lsls	r2, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	609a      	str	r2, [r3, #8]
 8006162:	e02a      	b.n	80061ba <HAL_DMA_Abort+0x49a>
 8006164:	40020010 	.word	0x40020010
 8006168:	40020028 	.word	0x40020028
 800616c:	40020040 	.word	0x40020040
 8006170:	40020058 	.word	0x40020058
 8006174:	40020070 	.word	0x40020070
 8006178:	40020088 	.word	0x40020088
 800617c:	400200a0 	.word	0x400200a0
 8006180:	400200b8 	.word	0x400200b8
 8006184:	40020410 	.word	0x40020410
 8006188:	40020428 	.word	0x40020428
 800618c:	40020440 	.word	0x40020440
 8006190:	40020458 	.word	0x40020458
 8006194:	40020470 	.word	0x40020470
 8006198:	40020488 	.word	0x40020488
 800619c:	400204a0 	.word	0x400204a0
 80061a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ae:	f003 031f 	and.w	r3, r3, #31
 80061b2:	2201      	movs	r2, #1
 80061b4:	409a      	lsls	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a4f      	ldr	r2, [pc, #316]	; (80062fc <HAL_DMA_Abort+0x5dc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d072      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a4d      	ldr	r2, [pc, #308]	; (8006300 <HAL_DMA_Abort+0x5e0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d06d      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a4c      	ldr	r2, [pc, #304]	; (8006304 <HAL_DMA_Abort+0x5e4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d068      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a4a      	ldr	r2, [pc, #296]	; (8006308 <HAL_DMA_Abort+0x5e8>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d063      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a49      	ldr	r2, [pc, #292]	; (800630c <HAL_DMA_Abort+0x5ec>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d05e      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a47      	ldr	r2, [pc, #284]	; (8006310 <HAL_DMA_Abort+0x5f0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d059      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a46      	ldr	r2, [pc, #280]	; (8006314 <HAL_DMA_Abort+0x5f4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d054      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a44      	ldr	r2, [pc, #272]	; (8006318 <HAL_DMA_Abort+0x5f8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d04f      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a43      	ldr	r2, [pc, #268]	; (800631c <HAL_DMA_Abort+0x5fc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d04a      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a41      	ldr	r2, [pc, #260]	; (8006320 <HAL_DMA_Abort+0x600>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d045      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a40      	ldr	r2, [pc, #256]	; (8006324 <HAL_DMA_Abort+0x604>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d040      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a3e      	ldr	r2, [pc, #248]	; (8006328 <HAL_DMA_Abort+0x608>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d03b      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a3d      	ldr	r2, [pc, #244]	; (800632c <HAL_DMA_Abort+0x60c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d036      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a3b      	ldr	r2, [pc, #236]	; (8006330 <HAL_DMA_Abort+0x610>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d031      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a3a      	ldr	r2, [pc, #232]	; (8006334 <HAL_DMA_Abort+0x614>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d02c      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a38      	ldr	r2, [pc, #224]	; (8006338 <HAL_DMA_Abort+0x618>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d027      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a37      	ldr	r2, [pc, #220]	; (800633c <HAL_DMA_Abort+0x61c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d022      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a35      	ldr	r2, [pc, #212]	; (8006340 <HAL_DMA_Abort+0x620>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d01d      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a34      	ldr	r2, [pc, #208]	; (8006344 <HAL_DMA_Abort+0x624>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d018      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a32      	ldr	r2, [pc, #200]	; (8006348 <HAL_DMA_Abort+0x628>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d013      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a31      	ldr	r2, [pc, #196]	; (800634c <HAL_DMA_Abort+0x62c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00e      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a2f      	ldr	r2, [pc, #188]	; (8006350 <HAL_DMA_Abort+0x630>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d009      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a2e      	ldr	r2, [pc, #184]	; (8006354 <HAL_DMA_Abort+0x634>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d004      	beq.n	80062aa <HAL_DMA_Abort+0x58a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a2c      	ldr	r2, [pc, #176]	; (8006358 <HAL_DMA_Abort+0x638>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d101      	bne.n	80062ae <HAL_DMA_Abort+0x58e>
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <HAL_DMA_Abort+0x590>
 80062ae:	2300      	movs	r3, #0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d015      	beq.n	80062e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00c      	beq.n	80062e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	40020010 	.word	0x40020010
 8006300:	40020028 	.word	0x40020028
 8006304:	40020040 	.word	0x40020040
 8006308:	40020058 	.word	0x40020058
 800630c:	40020070 	.word	0x40020070
 8006310:	40020088 	.word	0x40020088
 8006314:	400200a0 	.word	0x400200a0
 8006318:	400200b8 	.word	0x400200b8
 800631c:	40020410 	.word	0x40020410
 8006320:	40020428 	.word	0x40020428
 8006324:	40020440 	.word	0x40020440
 8006328:	40020458 	.word	0x40020458
 800632c:	40020470 	.word	0x40020470
 8006330:	40020488 	.word	0x40020488
 8006334:	400204a0 	.word	0x400204a0
 8006338:	400204b8 	.word	0x400204b8
 800633c:	58025408 	.word	0x58025408
 8006340:	5802541c 	.word	0x5802541c
 8006344:	58025430 	.word	0x58025430
 8006348:	58025444 	.word	0x58025444
 800634c:	58025458 	.word	0x58025458
 8006350:	5802546c 	.word	0x5802546c
 8006354:	58025480 	.word	0x58025480
 8006358:	58025494 	.word	0x58025494

0800635c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e237      	b.n	80067de <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d004      	beq.n	8006384 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2280      	movs	r2, #128	; 0x80
 800637e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e22c      	b.n	80067de <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a5c      	ldr	r2, [pc, #368]	; (80064fc <HAL_DMA_Abort_IT+0x1a0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d04a      	beq.n	8006424 <HAL_DMA_Abort_IT+0xc8>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a5b      	ldr	r2, [pc, #364]	; (8006500 <HAL_DMA_Abort_IT+0x1a4>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d045      	beq.n	8006424 <HAL_DMA_Abort_IT+0xc8>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a59      	ldr	r2, [pc, #356]	; (8006504 <HAL_DMA_Abort_IT+0x1a8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d040      	beq.n	8006424 <HAL_DMA_Abort_IT+0xc8>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a58      	ldr	r2, [pc, #352]	; (8006508 <HAL_DMA_Abort_IT+0x1ac>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d03b      	beq.n	8006424 <HAL_DMA_Abort_IT+0xc8>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a56      	ldr	r2, [pc, #344]	; (800650c <HAL_DMA_Abort_IT+0x1b0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d036      	beq.n	8006424 <HAL_DMA_Abort_IT+0xc8>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a55      	ldr	r2, [pc, #340]	; (8006510 <HAL_DMA_Abort_IT+0x1b4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d031      	beq.n	8006424 <HAL_DMA_Abort_IT+0xc8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a53      	ldr	r2, [pc, #332]	; (8006514 <HAL_DMA_Abort_IT+0x1b8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d02c      	beq.n	8006424 <HAL_DMA_Abort_IT+0xc8>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a52      	ldr	r2, [pc, #328]	; (8006518 <HAL_DMA_Abort_IT+0x1bc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d027      	beq.n	8006424 <HAL_DMA_Abort_IT+0xc8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a50      	ldr	r2, [pc, #320]	; (800651c <HAL_DMA_Abort_IT+0x1c0>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d022      	beq.n	8006424 <HAL_DMA_Abort_IT+0xc8>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a4f      	ldr	r2, [pc, #316]	; (8006520 <HAL_DMA_Abort_IT+0x1c4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d01d      	beq.n	8006424 <HAL_DMA_Abort_IT+0xc8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a4d      	ldr	r2, [pc, #308]	; (8006524 <HAL_DMA_Abort_IT+0x1c8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d018      	beq.n	8006424 <HAL_DMA_Abort_IT+0xc8>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a4c      	ldr	r2, [pc, #304]	; (8006528 <HAL_DMA_Abort_IT+0x1cc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d013      	beq.n	8006424 <HAL_DMA_Abort_IT+0xc8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a4a      	ldr	r2, [pc, #296]	; (800652c <HAL_DMA_Abort_IT+0x1d0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00e      	beq.n	8006424 <HAL_DMA_Abort_IT+0xc8>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a49      	ldr	r2, [pc, #292]	; (8006530 <HAL_DMA_Abort_IT+0x1d4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d009      	beq.n	8006424 <HAL_DMA_Abort_IT+0xc8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a47      	ldr	r2, [pc, #284]	; (8006534 <HAL_DMA_Abort_IT+0x1d8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <HAL_DMA_Abort_IT+0xc8>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a46      	ldr	r2, [pc, #280]	; (8006538 <HAL_DMA_Abort_IT+0x1dc>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d101      	bne.n	8006428 <HAL_DMA_Abort_IT+0xcc>
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <HAL_DMA_Abort_IT+0xce>
 8006428:	2300      	movs	r3, #0
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 8086 	beq.w	800653c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2204      	movs	r2, #4
 8006434:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a2f      	ldr	r2, [pc, #188]	; (80064fc <HAL_DMA_Abort_IT+0x1a0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d04a      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x17c>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a2e      	ldr	r2, [pc, #184]	; (8006500 <HAL_DMA_Abort_IT+0x1a4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d045      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x17c>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a2c      	ldr	r2, [pc, #176]	; (8006504 <HAL_DMA_Abort_IT+0x1a8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d040      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x17c>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a2b      	ldr	r2, [pc, #172]	; (8006508 <HAL_DMA_Abort_IT+0x1ac>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d03b      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x17c>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a29      	ldr	r2, [pc, #164]	; (800650c <HAL_DMA_Abort_IT+0x1b0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d036      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x17c>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a28      	ldr	r2, [pc, #160]	; (8006510 <HAL_DMA_Abort_IT+0x1b4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d031      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x17c>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a26      	ldr	r2, [pc, #152]	; (8006514 <HAL_DMA_Abort_IT+0x1b8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d02c      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x17c>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a25      	ldr	r2, [pc, #148]	; (8006518 <HAL_DMA_Abort_IT+0x1bc>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d027      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x17c>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a23      	ldr	r2, [pc, #140]	; (800651c <HAL_DMA_Abort_IT+0x1c0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d022      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x17c>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a22      	ldr	r2, [pc, #136]	; (8006520 <HAL_DMA_Abort_IT+0x1c4>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d01d      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x17c>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a20      	ldr	r2, [pc, #128]	; (8006524 <HAL_DMA_Abort_IT+0x1c8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d018      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x17c>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1f      	ldr	r2, [pc, #124]	; (8006528 <HAL_DMA_Abort_IT+0x1cc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d013      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x17c>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a1d      	ldr	r2, [pc, #116]	; (800652c <HAL_DMA_Abort_IT+0x1d0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00e      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x17c>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a1c      	ldr	r2, [pc, #112]	; (8006530 <HAL_DMA_Abort_IT+0x1d4>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d009      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x17c>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1a      	ldr	r2, [pc, #104]	; (8006534 <HAL_DMA_Abort_IT+0x1d8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d004      	beq.n	80064d8 <HAL_DMA_Abort_IT+0x17c>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a19      	ldr	r2, [pc, #100]	; (8006538 <HAL_DMA_Abort_IT+0x1dc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d108      	bne.n	80064ea <HAL_DMA_Abort_IT+0x18e>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0201 	bic.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	e178      	b.n	80067dc <HAL_DMA_Abort_IT+0x480>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f022 0201 	bic.w	r2, r2, #1
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	e16f      	b.n	80067dc <HAL_DMA_Abort_IT+0x480>
 80064fc:	40020010 	.word	0x40020010
 8006500:	40020028 	.word	0x40020028
 8006504:	40020040 	.word	0x40020040
 8006508:	40020058 	.word	0x40020058
 800650c:	40020070 	.word	0x40020070
 8006510:	40020088 	.word	0x40020088
 8006514:	400200a0 	.word	0x400200a0
 8006518:	400200b8 	.word	0x400200b8
 800651c:	40020410 	.word	0x40020410
 8006520:	40020428 	.word	0x40020428
 8006524:	40020440 	.word	0x40020440
 8006528:	40020458 	.word	0x40020458
 800652c:	40020470 	.word	0x40020470
 8006530:	40020488 	.word	0x40020488
 8006534:	400204a0 	.word	0x400204a0
 8006538:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 020e 	bic.w	r2, r2, #14
 800654a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a6c      	ldr	r2, [pc, #432]	; (8006704 <HAL_DMA_Abort_IT+0x3a8>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d04a      	beq.n	80065ec <HAL_DMA_Abort_IT+0x290>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a6b      	ldr	r2, [pc, #428]	; (8006708 <HAL_DMA_Abort_IT+0x3ac>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d045      	beq.n	80065ec <HAL_DMA_Abort_IT+0x290>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a69      	ldr	r2, [pc, #420]	; (800670c <HAL_DMA_Abort_IT+0x3b0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d040      	beq.n	80065ec <HAL_DMA_Abort_IT+0x290>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a68      	ldr	r2, [pc, #416]	; (8006710 <HAL_DMA_Abort_IT+0x3b4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d03b      	beq.n	80065ec <HAL_DMA_Abort_IT+0x290>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a66      	ldr	r2, [pc, #408]	; (8006714 <HAL_DMA_Abort_IT+0x3b8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d036      	beq.n	80065ec <HAL_DMA_Abort_IT+0x290>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a65      	ldr	r2, [pc, #404]	; (8006718 <HAL_DMA_Abort_IT+0x3bc>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d031      	beq.n	80065ec <HAL_DMA_Abort_IT+0x290>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a63      	ldr	r2, [pc, #396]	; (800671c <HAL_DMA_Abort_IT+0x3c0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d02c      	beq.n	80065ec <HAL_DMA_Abort_IT+0x290>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a62      	ldr	r2, [pc, #392]	; (8006720 <HAL_DMA_Abort_IT+0x3c4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d027      	beq.n	80065ec <HAL_DMA_Abort_IT+0x290>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a60      	ldr	r2, [pc, #384]	; (8006724 <HAL_DMA_Abort_IT+0x3c8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d022      	beq.n	80065ec <HAL_DMA_Abort_IT+0x290>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a5f      	ldr	r2, [pc, #380]	; (8006728 <HAL_DMA_Abort_IT+0x3cc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d01d      	beq.n	80065ec <HAL_DMA_Abort_IT+0x290>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a5d      	ldr	r2, [pc, #372]	; (800672c <HAL_DMA_Abort_IT+0x3d0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d018      	beq.n	80065ec <HAL_DMA_Abort_IT+0x290>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a5c      	ldr	r2, [pc, #368]	; (8006730 <HAL_DMA_Abort_IT+0x3d4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <HAL_DMA_Abort_IT+0x290>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a5a      	ldr	r2, [pc, #360]	; (8006734 <HAL_DMA_Abort_IT+0x3d8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00e      	beq.n	80065ec <HAL_DMA_Abort_IT+0x290>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a59      	ldr	r2, [pc, #356]	; (8006738 <HAL_DMA_Abort_IT+0x3dc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d009      	beq.n	80065ec <HAL_DMA_Abort_IT+0x290>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a57      	ldr	r2, [pc, #348]	; (800673c <HAL_DMA_Abort_IT+0x3e0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d004      	beq.n	80065ec <HAL_DMA_Abort_IT+0x290>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a56      	ldr	r2, [pc, #344]	; (8006740 <HAL_DMA_Abort_IT+0x3e4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d108      	bne.n	80065fe <HAL_DMA_Abort_IT+0x2a2>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0201 	bic.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	e007      	b.n	800660e <HAL_DMA_Abort_IT+0x2b2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 0201 	bic.w	r2, r2, #1
 800660c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a3c      	ldr	r2, [pc, #240]	; (8006704 <HAL_DMA_Abort_IT+0x3a8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d072      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a3a      	ldr	r2, [pc, #232]	; (8006708 <HAL_DMA_Abort_IT+0x3ac>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d06d      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a39      	ldr	r2, [pc, #228]	; (800670c <HAL_DMA_Abort_IT+0x3b0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d068      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a37      	ldr	r2, [pc, #220]	; (8006710 <HAL_DMA_Abort_IT+0x3b4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d063      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a36      	ldr	r2, [pc, #216]	; (8006714 <HAL_DMA_Abort_IT+0x3b8>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d05e      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a34      	ldr	r2, [pc, #208]	; (8006718 <HAL_DMA_Abort_IT+0x3bc>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d059      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a33      	ldr	r2, [pc, #204]	; (800671c <HAL_DMA_Abort_IT+0x3c0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d054      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a31      	ldr	r2, [pc, #196]	; (8006720 <HAL_DMA_Abort_IT+0x3c4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d04f      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a30      	ldr	r2, [pc, #192]	; (8006724 <HAL_DMA_Abort_IT+0x3c8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d04a      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a2e      	ldr	r2, [pc, #184]	; (8006728 <HAL_DMA_Abort_IT+0x3cc>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d045      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a2d      	ldr	r2, [pc, #180]	; (800672c <HAL_DMA_Abort_IT+0x3d0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d040      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a2b      	ldr	r2, [pc, #172]	; (8006730 <HAL_DMA_Abort_IT+0x3d4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d03b      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a2a      	ldr	r2, [pc, #168]	; (8006734 <HAL_DMA_Abort_IT+0x3d8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d036      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a28      	ldr	r2, [pc, #160]	; (8006738 <HAL_DMA_Abort_IT+0x3dc>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d031      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a27      	ldr	r2, [pc, #156]	; (800673c <HAL_DMA_Abort_IT+0x3e0>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d02c      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a25      	ldr	r2, [pc, #148]	; (8006740 <HAL_DMA_Abort_IT+0x3e4>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d027      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a24      	ldr	r2, [pc, #144]	; (8006744 <HAL_DMA_Abort_IT+0x3e8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d022      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a22      	ldr	r2, [pc, #136]	; (8006748 <HAL_DMA_Abort_IT+0x3ec>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d01d      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a21      	ldr	r2, [pc, #132]	; (800674c <HAL_DMA_Abort_IT+0x3f0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d018      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <HAL_DMA_Abort_IT+0x3f4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d013      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a1e      	ldr	r2, [pc, #120]	; (8006754 <HAL_DMA_Abort_IT+0x3f8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00e      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a1c      	ldr	r2, [pc, #112]	; (8006758 <HAL_DMA_Abort_IT+0x3fc>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d009      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a1b      	ldr	r2, [pc, #108]	; (800675c <HAL_DMA_Abort_IT+0x400>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d004      	beq.n	80066fe <HAL_DMA_Abort_IT+0x3a2>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a19      	ldr	r2, [pc, #100]	; (8006760 <HAL_DMA_Abort_IT+0x404>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d132      	bne.n	8006764 <HAL_DMA_Abort_IT+0x408>
 80066fe:	2301      	movs	r3, #1
 8006700:	e031      	b.n	8006766 <HAL_DMA_Abort_IT+0x40a>
 8006702:	bf00      	nop
 8006704:	40020010 	.word	0x40020010
 8006708:	40020028 	.word	0x40020028
 800670c:	40020040 	.word	0x40020040
 8006710:	40020058 	.word	0x40020058
 8006714:	40020070 	.word	0x40020070
 8006718:	40020088 	.word	0x40020088
 800671c:	400200a0 	.word	0x400200a0
 8006720:	400200b8 	.word	0x400200b8
 8006724:	40020410 	.word	0x40020410
 8006728:	40020428 	.word	0x40020428
 800672c:	40020440 	.word	0x40020440
 8006730:	40020458 	.word	0x40020458
 8006734:	40020470 	.word	0x40020470
 8006738:	40020488 	.word	0x40020488
 800673c:	400204a0 	.word	0x400204a0
 8006740:	400204b8 	.word	0x400204b8
 8006744:	58025408 	.word	0x58025408
 8006748:	5802541c 	.word	0x5802541c
 800674c:	58025430 	.word	0x58025430
 8006750:	58025444 	.word	0x58025444
 8006754:	58025458 	.word	0x58025458
 8006758:	5802546c 	.word	0x5802546c
 800675c:	58025480 	.word	0x58025480
 8006760:	58025494 	.word	0x58025494
 8006764:	2300      	movs	r3, #0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d028      	beq.n	80067bc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006778:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006784:	f003 031f 	and.w	r3, r3, #31
 8006788:	2201      	movs	r2, #1
 800678a:	409a      	lsls	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006798:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00c      	beq.n	80067bc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80067ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d003      	beq.n	80067dc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop

080067e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08a      	sub	sp, #40	; 0x28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80067f4:	4b67      	ldr	r3, [pc, #412]	; (8006994 <HAL_DMA_IRQHandler+0x1ac>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a67      	ldr	r2, [pc, #412]	; (8006998 <HAL_DMA_IRQHandler+0x1b0>)
 80067fa:	fba2 2303 	umull	r2, r3, r2, r3
 80067fe:	0a9b      	lsrs	r3, r3, #10
 8006800:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006806:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a5f      	ldr	r2, [pc, #380]	; (800699c <HAL_DMA_IRQHandler+0x1b4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d04a      	beq.n	80068ba <HAL_DMA_IRQHandler+0xd2>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a5d      	ldr	r2, [pc, #372]	; (80069a0 <HAL_DMA_IRQHandler+0x1b8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d045      	beq.n	80068ba <HAL_DMA_IRQHandler+0xd2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a5c      	ldr	r2, [pc, #368]	; (80069a4 <HAL_DMA_IRQHandler+0x1bc>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d040      	beq.n	80068ba <HAL_DMA_IRQHandler+0xd2>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a5a      	ldr	r2, [pc, #360]	; (80069a8 <HAL_DMA_IRQHandler+0x1c0>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d03b      	beq.n	80068ba <HAL_DMA_IRQHandler+0xd2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a59      	ldr	r2, [pc, #356]	; (80069ac <HAL_DMA_IRQHandler+0x1c4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d036      	beq.n	80068ba <HAL_DMA_IRQHandler+0xd2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a57      	ldr	r2, [pc, #348]	; (80069b0 <HAL_DMA_IRQHandler+0x1c8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d031      	beq.n	80068ba <HAL_DMA_IRQHandler+0xd2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a56      	ldr	r2, [pc, #344]	; (80069b4 <HAL_DMA_IRQHandler+0x1cc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d02c      	beq.n	80068ba <HAL_DMA_IRQHandler+0xd2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a54      	ldr	r2, [pc, #336]	; (80069b8 <HAL_DMA_IRQHandler+0x1d0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d027      	beq.n	80068ba <HAL_DMA_IRQHandler+0xd2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a53      	ldr	r2, [pc, #332]	; (80069bc <HAL_DMA_IRQHandler+0x1d4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d022      	beq.n	80068ba <HAL_DMA_IRQHandler+0xd2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a51      	ldr	r2, [pc, #324]	; (80069c0 <HAL_DMA_IRQHandler+0x1d8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d01d      	beq.n	80068ba <HAL_DMA_IRQHandler+0xd2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a50      	ldr	r2, [pc, #320]	; (80069c4 <HAL_DMA_IRQHandler+0x1dc>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d018      	beq.n	80068ba <HAL_DMA_IRQHandler+0xd2>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a4e      	ldr	r2, [pc, #312]	; (80069c8 <HAL_DMA_IRQHandler+0x1e0>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d013      	beq.n	80068ba <HAL_DMA_IRQHandler+0xd2>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a4d      	ldr	r2, [pc, #308]	; (80069cc <HAL_DMA_IRQHandler+0x1e4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00e      	beq.n	80068ba <HAL_DMA_IRQHandler+0xd2>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a4b      	ldr	r2, [pc, #300]	; (80069d0 <HAL_DMA_IRQHandler+0x1e8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d009      	beq.n	80068ba <HAL_DMA_IRQHandler+0xd2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a4a      	ldr	r2, [pc, #296]	; (80069d4 <HAL_DMA_IRQHandler+0x1ec>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d004      	beq.n	80068ba <HAL_DMA_IRQHandler+0xd2>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a48      	ldr	r2, [pc, #288]	; (80069d8 <HAL_DMA_IRQHandler+0x1f0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d101      	bne.n	80068be <HAL_DMA_IRQHandler+0xd6>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <HAL_DMA_IRQHandler+0xd8>
 80068be:	2300      	movs	r3, #0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 842b 	beq.w	800711c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	2208      	movs	r2, #8
 80068d0:	409a      	lsls	r2, r3
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	4013      	ands	r3, r2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 80a2 	beq.w	8006a20 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a2e      	ldr	r2, [pc, #184]	; (800699c <HAL_DMA_IRQHandler+0x1b4>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d04a      	beq.n	800697c <HAL_DMA_IRQHandler+0x194>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a2d      	ldr	r2, [pc, #180]	; (80069a0 <HAL_DMA_IRQHandler+0x1b8>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d045      	beq.n	800697c <HAL_DMA_IRQHandler+0x194>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a2b      	ldr	r2, [pc, #172]	; (80069a4 <HAL_DMA_IRQHandler+0x1bc>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d040      	beq.n	800697c <HAL_DMA_IRQHandler+0x194>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a2a      	ldr	r2, [pc, #168]	; (80069a8 <HAL_DMA_IRQHandler+0x1c0>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d03b      	beq.n	800697c <HAL_DMA_IRQHandler+0x194>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a28      	ldr	r2, [pc, #160]	; (80069ac <HAL_DMA_IRQHandler+0x1c4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d036      	beq.n	800697c <HAL_DMA_IRQHandler+0x194>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a27      	ldr	r2, [pc, #156]	; (80069b0 <HAL_DMA_IRQHandler+0x1c8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d031      	beq.n	800697c <HAL_DMA_IRQHandler+0x194>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a25      	ldr	r2, [pc, #148]	; (80069b4 <HAL_DMA_IRQHandler+0x1cc>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d02c      	beq.n	800697c <HAL_DMA_IRQHandler+0x194>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a24      	ldr	r2, [pc, #144]	; (80069b8 <HAL_DMA_IRQHandler+0x1d0>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d027      	beq.n	800697c <HAL_DMA_IRQHandler+0x194>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a22      	ldr	r2, [pc, #136]	; (80069bc <HAL_DMA_IRQHandler+0x1d4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d022      	beq.n	800697c <HAL_DMA_IRQHandler+0x194>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a21      	ldr	r2, [pc, #132]	; (80069c0 <HAL_DMA_IRQHandler+0x1d8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d01d      	beq.n	800697c <HAL_DMA_IRQHandler+0x194>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1f      	ldr	r2, [pc, #124]	; (80069c4 <HAL_DMA_IRQHandler+0x1dc>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d018      	beq.n	800697c <HAL_DMA_IRQHandler+0x194>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a1e      	ldr	r2, [pc, #120]	; (80069c8 <HAL_DMA_IRQHandler+0x1e0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d013      	beq.n	800697c <HAL_DMA_IRQHandler+0x194>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a1c      	ldr	r2, [pc, #112]	; (80069cc <HAL_DMA_IRQHandler+0x1e4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00e      	beq.n	800697c <HAL_DMA_IRQHandler+0x194>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a1b      	ldr	r2, [pc, #108]	; (80069d0 <HAL_DMA_IRQHandler+0x1e8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d009      	beq.n	800697c <HAL_DMA_IRQHandler+0x194>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a19      	ldr	r2, [pc, #100]	; (80069d4 <HAL_DMA_IRQHandler+0x1ec>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d004      	beq.n	800697c <HAL_DMA_IRQHandler+0x194>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a18      	ldr	r2, [pc, #96]	; (80069d8 <HAL_DMA_IRQHandler+0x1f0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d12f      	bne.n	80069dc <HAL_DMA_IRQHandler+0x1f4>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b00      	cmp	r3, #0
 8006988:	bf14      	ite	ne
 800698a:	2301      	movne	r3, #1
 800698c:	2300      	moveq	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	e02e      	b.n	80069f0 <HAL_DMA_IRQHandler+0x208>
 8006992:	bf00      	nop
 8006994:	24000088 	.word	0x24000088
 8006998:	1b4e81b5 	.word	0x1b4e81b5
 800699c:	40020010 	.word	0x40020010
 80069a0:	40020028 	.word	0x40020028
 80069a4:	40020040 	.word	0x40020040
 80069a8:	40020058 	.word	0x40020058
 80069ac:	40020070 	.word	0x40020070
 80069b0:	40020088 	.word	0x40020088
 80069b4:	400200a0 	.word	0x400200a0
 80069b8:	400200b8 	.word	0x400200b8
 80069bc:	40020410 	.word	0x40020410
 80069c0:	40020428 	.word	0x40020428
 80069c4:	40020440 	.word	0x40020440
 80069c8:	40020458 	.word	0x40020458
 80069cc:	40020470 	.word	0x40020470
 80069d0:	40020488 	.word	0x40020488
 80069d4:	400204a0 	.word	0x400204a0
 80069d8:	400204b8 	.word	0x400204b8
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bf14      	ite	ne
 80069ea:	2301      	movne	r3, #1
 80069ec:	2300      	moveq	r3, #0
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d015      	beq.n	8006a20 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0204 	bic.w	r2, r2, #4
 8006a02:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	409a      	lsls	r2, r3
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a18:	f043 0201 	orr.w	r2, r3, #1
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d06e      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a69      	ldr	r2, [pc, #420]	; (8006be0 <HAL_DMA_IRQHandler+0x3f8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d04a      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ee>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a67      	ldr	r2, [pc, #412]	; (8006be4 <HAL_DMA_IRQHandler+0x3fc>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d045      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ee>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a66      	ldr	r2, [pc, #408]	; (8006be8 <HAL_DMA_IRQHandler+0x400>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d040      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ee>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a64      	ldr	r2, [pc, #400]	; (8006bec <HAL_DMA_IRQHandler+0x404>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d03b      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ee>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a63      	ldr	r2, [pc, #396]	; (8006bf0 <HAL_DMA_IRQHandler+0x408>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d036      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ee>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a61      	ldr	r2, [pc, #388]	; (8006bf4 <HAL_DMA_IRQHandler+0x40c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d031      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ee>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a60      	ldr	r2, [pc, #384]	; (8006bf8 <HAL_DMA_IRQHandler+0x410>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d02c      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ee>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a5e      	ldr	r2, [pc, #376]	; (8006bfc <HAL_DMA_IRQHandler+0x414>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d027      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ee>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a5d      	ldr	r2, [pc, #372]	; (8006c00 <HAL_DMA_IRQHandler+0x418>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d022      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ee>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a5b      	ldr	r2, [pc, #364]	; (8006c04 <HAL_DMA_IRQHandler+0x41c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d01d      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ee>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a5a      	ldr	r2, [pc, #360]	; (8006c08 <HAL_DMA_IRQHandler+0x420>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d018      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ee>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a58      	ldr	r2, [pc, #352]	; (8006c0c <HAL_DMA_IRQHandler+0x424>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d013      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ee>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a57      	ldr	r2, [pc, #348]	; (8006c10 <HAL_DMA_IRQHandler+0x428>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00e      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ee>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a55      	ldr	r2, [pc, #340]	; (8006c14 <HAL_DMA_IRQHandler+0x42c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d009      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ee>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a54      	ldr	r2, [pc, #336]	; (8006c18 <HAL_DMA_IRQHandler+0x430>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d004      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ee>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a52      	ldr	r2, [pc, #328]	; (8006c1c <HAL_DMA_IRQHandler+0x434>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d10a      	bne.n	8006aec <HAL_DMA_IRQHandler+0x304>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bf14      	ite	ne
 8006ae4:	2301      	movne	r3, #1
 8006ae6:	2300      	moveq	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	e003      	b.n	8006af4 <HAL_DMA_IRQHandler+0x30c>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2300      	movs	r3, #0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00d      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006afc:	f003 031f 	and.w	r3, r3, #31
 8006b00:	2201      	movs	r2, #1
 8006b02:	409a      	lsls	r2, r3
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0c:	f043 0202 	orr.w	r2, r3, #2
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b18:	f003 031f 	and.w	r3, r3, #31
 8006b1c:	2204      	movs	r2, #4
 8006b1e:	409a      	lsls	r2, r3
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	4013      	ands	r3, r2
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 808f 	beq.w	8006c48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a2c      	ldr	r2, [pc, #176]	; (8006be0 <HAL_DMA_IRQHandler+0x3f8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d04a      	beq.n	8006bca <HAL_DMA_IRQHandler+0x3e2>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a2a      	ldr	r2, [pc, #168]	; (8006be4 <HAL_DMA_IRQHandler+0x3fc>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d045      	beq.n	8006bca <HAL_DMA_IRQHandler+0x3e2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a29      	ldr	r2, [pc, #164]	; (8006be8 <HAL_DMA_IRQHandler+0x400>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d040      	beq.n	8006bca <HAL_DMA_IRQHandler+0x3e2>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a27      	ldr	r2, [pc, #156]	; (8006bec <HAL_DMA_IRQHandler+0x404>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d03b      	beq.n	8006bca <HAL_DMA_IRQHandler+0x3e2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a26      	ldr	r2, [pc, #152]	; (8006bf0 <HAL_DMA_IRQHandler+0x408>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d036      	beq.n	8006bca <HAL_DMA_IRQHandler+0x3e2>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a24      	ldr	r2, [pc, #144]	; (8006bf4 <HAL_DMA_IRQHandler+0x40c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d031      	beq.n	8006bca <HAL_DMA_IRQHandler+0x3e2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a23      	ldr	r2, [pc, #140]	; (8006bf8 <HAL_DMA_IRQHandler+0x410>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d02c      	beq.n	8006bca <HAL_DMA_IRQHandler+0x3e2>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a21      	ldr	r2, [pc, #132]	; (8006bfc <HAL_DMA_IRQHandler+0x414>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d027      	beq.n	8006bca <HAL_DMA_IRQHandler+0x3e2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a20      	ldr	r2, [pc, #128]	; (8006c00 <HAL_DMA_IRQHandler+0x418>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d022      	beq.n	8006bca <HAL_DMA_IRQHandler+0x3e2>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a1e      	ldr	r2, [pc, #120]	; (8006c04 <HAL_DMA_IRQHandler+0x41c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d01d      	beq.n	8006bca <HAL_DMA_IRQHandler+0x3e2>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a1d      	ldr	r2, [pc, #116]	; (8006c08 <HAL_DMA_IRQHandler+0x420>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d018      	beq.n	8006bca <HAL_DMA_IRQHandler+0x3e2>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a1b      	ldr	r2, [pc, #108]	; (8006c0c <HAL_DMA_IRQHandler+0x424>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d013      	beq.n	8006bca <HAL_DMA_IRQHandler+0x3e2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a1a      	ldr	r2, [pc, #104]	; (8006c10 <HAL_DMA_IRQHandler+0x428>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d00e      	beq.n	8006bca <HAL_DMA_IRQHandler+0x3e2>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a18      	ldr	r2, [pc, #96]	; (8006c14 <HAL_DMA_IRQHandler+0x42c>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d009      	beq.n	8006bca <HAL_DMA_IRQHandler+0x3e2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a17      	ldr	r2, [pc, #92]	; (8006c18 <HAL_DMA_IRQHandler+0x430>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d004      	beq.n	8006bca <HAL_DMA_IRQHandler+0x3e2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a15      	ldr	r2, [pc, #84]	; (8006c1c <HAL_DMA_IRQHandler+0x434>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d12a      	bne.n	8006c20 <HAL_DMA_IRQHandler+0x438>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	bf14      	ite	ne
 8006bd8:	2301      	movne	r3, #1
 8006bda:	2300      	moveq	r3, #0
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	e023      	b.n	8006c28 <HAL_DMA_IRQHandler+0x440>
 8006be0:	40020010 	.word	0x40020010
 8006be4:	40020028 	.word	0x40020028
 8006be8:	40020040 	.word	0x40020040
 8006bec:	40020058 	.word	0x40020058
 8006bf0:	40020070 	.word	0x40020070
 8006bf4:	40020088 	.word	0x40020088
 8006bf8:	400200a0 	.word	0x400200a0
 8006bfc:	400200b8 	.word	0x400200b8
 8006c00:	40020410 	.word	0x40020410
 8006c04:	40020428 	.word	0x40020428
 8006c08:	40020440 	.word	0x40020440
 8006c0c:	40020458 	.word	0x40020458
 8006c10:	40020470 	.word	0x40020470
 8006c14:	40020488 	.word	0x40020488
 8006c18:	400204a0 	.word	0x400204a0
 8006c1c:	400204b8 	.word	0x400204b8
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2300      	movs	r3, #0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00d      	beq.n	8006c48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c30:	f003 031f 	and.w	r3, r3, #31
 8006c34:	2204      	movs	r2, #4
 8006c36:	409a      	lsls	r2, r3
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c40:	f043 0204 	orr.w	r2, r3, #4
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c4c:	f003 031f 	and.w	r3, r3, #31
 8006c50:	2210      	movs	r2, #16
 8006c52:	409a      	lsls	r2, r3
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 80a6 	beq.w	8006daa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a85      	ldr	r2, [pc, #532]	; (8006e78 <HAL_DMA_IRQHandler+0x690>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d04a      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x516>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a83      	ldr	r2, [pc, #524]	; (8006e7c <HAL_DMA_IRQHandler+0x694>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d045      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x516>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a82      	ldr	r2, [pc, #520]	; (8006e80 <HAL_DMA_IRQHandler+0x698>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d040      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x516>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a80      	ldr	r2, [pc, #512]	; (8006e84 <HAL_DMA_IRQHandler+0x69c>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d03b      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x516>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a7f      	ldr	r2, [pc, #508]	; (8006e88 <HAL_DMA_IRQHandler+0x6a0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d036      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x516>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a7d      	ldr	r2, [pc, #500]	; (8006e8c <HAL_DMA_IRQHandler+0x6a4>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d031      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x516>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a7c      	ldr	r2, [pc, #496]	; (8006e90 <HAL_DMA_IRQHandler+0x6a8>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d02c      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x516>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a7a      	ldr	r2, [pc, #488]	; (8006e94 <HAL_DMA_IRQHandler+0x6ac>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d027      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x516>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a79      	ldr	r2, [pc, #484]	; (8006e98 <HAL_DMA_IRQHandler+0x6b0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d022      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x516>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a77      	ldr	r2, [pc, #476]	; (8006e9c <HAL_DMA_IRQHandler+0x6b4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d01d      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x516>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a76      	ldr	r2, [pc, #472]	; (8006ea0 <HAL_DMA_IRQHandler+0x6b8>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d018      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x516>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a74      	ldr	r2, [pc, #464]	; (8006ea4 <HAL_DMA_IRQHandler+0x6bc>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d013      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x516>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a73      	ldr	r2, [pc, #460]	; (8006ea8 <HAL_DMA_IRQHandler+0x6c0>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00e      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x516>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a71      	ldr	r2, [pc, #452]	; (8006eac <HAL_DMA_IRQHandler+0x6c4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d009      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x516>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a70      	ldr	r2, [pc, #448]	; (8006eb0 <HAL_DMA_IRQHandler+0x6c8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <HAL_DMA_IRQHandler+0x516>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a6e      	ldr	r2, [pc, #440]	; (8006eb4 <HAL_DMA_IRQHandler+0x6cc>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d10a      	bne.n	8006d14 <HAL_DMA_IRQHandler+0x52c>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0308 	and.w	r3, r3, #8
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	bf14      	ite	ne
 8006d0c:	2301      	movne	r3, #1
 8006d0e:	2300      	moveq	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	e009      	b.n	8006d28 <HAL_DMA_IRQHandler+0x540>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0304 	and.w	r3, r3, #4
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	bf14      	ite	ne
 8006d22:	2301      	movne	r3, #1
 8006d24:	2300      	moveq	r3, #0
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d03e      	beq.n	8006daa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	2210      	movs	r2, #16
 8006d36:	409a      	lsls	r2, r3
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d018      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d108      	bne.n	8006d6a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d024      	beq.n	8006daa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	4798      	blx	r3
 8006d68:	e01f      	b.n	8006daa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d01b      	beq.n	8006daa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	4798      	blx	r3
 8006d7a:	e016      	b.n	8006daa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d107      	bne.n	8006d9a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0208 	bic.w	r2, r2, #8
 8006d98:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dae:	f003 031f 	and.w	r3, r3, #31
 8006db2:	2220      	movs	r2, #32
 8006db4:	409a      	lsls	r2, r3
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	4013      	ands	r3, r2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 8110 	beq.w	8006fe0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a2c      	ldr	r2, [pc, #176]	; (8006e78 <HAL_DMA_IRQHandler+0x690>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d04a      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x678>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a2b      	ldr	r2, [pc, #172]	; (8006e7c <HAL_DMA_IRQHandler+0x694>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d045      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x678>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a29      	ldr	r2, [pc, #164]	; (8006e80 <HAL_DMA_IRQHandler+0x698>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d040      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x678>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a28      	ldr	r2, [pc, #160]	; (8006e84 <HAL_DMA_IRQHandler+0x69c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d03b      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x678>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a26      	ldr	r2, [pc, #152]	; (8006e88 <HAL_DMA_IRQHandler+0x6a0>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d036      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x678>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a25      	ldr	r2, [pc, #148]	; (8006e8c <HAL_DMA_IRQHandler+0x6a4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d031      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x678>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a23      	ldr	r2, [pc, #140]	; (8006e90 <HAL_DMA_IRQHandler+0x6a8>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d02c      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x678>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a22      	ldr	r2, [pc, #136]	; (8006e94 <HAL_DMA_IRQHandler+0x6ac>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d027      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x678>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a20      	ldr	r2, [pc, #128]	; (8006e98 <HAL_DMA_IRQHandler+0x6b0>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d022      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x678>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1f      	ldr	r2, [pc, #124]	; (8006e9c <HAL_DMA_IRQHandler+0x6b4>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d01d      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x678>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a1d      	ldr	r2, [pc, #116]	; (8006ea0 <HAL_DMA_IRQHandler+0x6b8>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d018      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x678>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a1c      	ldr	r2, [pc, #112]	; (8006ea4 <HAL_DMA_IRQHandler+0x6bc>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d013      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x678>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a1a      	ldr	r2, [pc, #104]	; (8006ea8 <HAL_DMA_IRQHandler+0x6c0>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00e      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x678>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a19      	ldr	r2, [pc, #100]	; (8006eac <HAL_DMA_IRQHandler+0x6c4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d009      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x678>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a17      	ldr	r2, [pc, #92]	; (8006eb0 <HAL_DMA_IRQHandler+0x6c8>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_DMA_IRQHandler+0x678>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a16      	ldr	r2, [pc, #88]	; (8006eb4 <HAL_DMA_IRQHandler+0x6cc>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d12b      	bne.n	8006eb8 <HAL_DMA_IRQHandler+0x6d0>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0310 	and.w	r3, r3, #16
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	bf14      	ite	ne
 8006e6e:	2301      	movne	r3, #1
 8006e70:	2300      	moveq	r3, #0
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	e02a      	b.n	8006ecc <HAL_DMA_IRQHandler+0x6e4>
 8006e76:	bf00      	nop
 8006e78:	40020010 	.word	0x40020010
 8006e7c:	40020028 	.word	0x40020028
 8006e80:	40020040 	.word	0x40020040
 8006e84:	40020058 	.word	0x40020058
 8006e88:	40020070 	.word	0x40020070
 8006e8c:	40020088 	.word	0x40020088
 8006e90:	400200a0 	.word	0x400200a0
 8006e94:	400200b8 	.word	0x400200b8
 8006e98:	40020410 	.word	0x40020410
 8006e9c:	40020428 	.word	0x40020428
 8006ea0:	40020440 	.word	0x40020440
 8006ea4:	40020458 	.word	0x40020458
 8006ea8:	40020470 	.word	0x40020470
 8006eac:	40020488 	.word	0x40020488
 8006eb0:	400204a0 	.word	0x400204a0
 8006eb4:	400204b8 	.word	0x400204b8
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	bf14      	ite	ne
 8006ec6:	2301      	movne	r3, #1
 8006ec8:	2300      	moveq	r3, #0
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 8087 	beq.w	8006fe0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed6:	f003 031f 	and.w	r3, r3, #31
 8006eda:	2220      	movs	r2, #32
 8006edc:	409a      	lsls	r2, r3
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d139      	bne.n	8006f62 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0216 	bic.w	r2, r2, #22
 8006efc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695a      	ldr	r2, [r3, #20]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f0c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d103      	bne.n	8006f1e <HAL_DMA_IRQHandler+0x736>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d007      	beq.n	8006f2e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f022 0208 	bic.w	r2, r2, #8
 8006f2c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f32:	f003 031f 	and.w	r3, r3, #31
 8006f36:	223f      	movs	r2, #63	; 0x3f
 8006f38:	409a      	lsls	r2, r3
 8006f3a:	6a3b      	ldr	r3, [r7, #32]
 8006f3c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 834a 	beq.w	80075ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
          }
          return;
 8006f60:	e344      	b.n	80075ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d018      	beq.n	8006fa2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d108      	bne.n	8006f90 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d02c      	beq.n	8006fe0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	4798      	blx	r3
 8006f8e:	e027      	b.n	8006fe0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d023      	beq.n	8006fe0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	4798      	blx	r3
 8006fa0:	e01e      	b.n	8006fe0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10f      	bne.n	8006fd0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0210 	bic.w	r2, r2, #16
 8006fbe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 8306 	beq.w	80075f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 8088 	beq.w	8007108 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2204      	movs	r2, #4
 8006ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a7a      	ldr	r2, [pc, #488]	; (80071f0 <HAL_DMA_IRQHandler+0xa08>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d04a      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x8b8>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a79      	ldr	r2, [pc, #484]	; (80071f4 <HAL_DMA_IRQHandler+0xa0c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d045      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x8b8>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a77      	ldr	r2, [pc, #476]	; (80071f8 <HAL_DMA_IRQHandler+0xa10>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d040      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x8b8>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a76      	ldr	r2, [pc, #472]	; (80071fc <HAL_DMA_IRQHandler+0xa14>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d03b      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x8b8>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a74      	ldr	r2, [pc, #464]	; (8007200 <HAL_DMA_IRQHandler+0xa18>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d036      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x8b8>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a73      	ldr	r2, [pc, #460]	; (8007204 <HAL_DMA_IRQHandler+0xa1c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d031      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x8b8>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a71      	ldr	r2, [pc, #452]	; (8007208 <HAL_DMA_IRQHandler+0xa20>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d02c      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x8b8>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a70      	ldr	r2, [pc, #448]	; (800720c <HAL_DMA_IRQHandler+0xa24>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d027      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x8b8>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a6e      	ldr	r2, [pc, #440]	; (8007210 <HAL_DMA_IRQHandler+0xa28>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d022      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x8b8>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a6d      	ldr	r2, [pc, #436]	; (8007214 <HAL_DMA_IRQHandler+0xa2c>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d01d      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x8b8>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a6b      	ldr	r2, [pc, #428]	; (8007218 <HAL_DMA_IRQHandler+0xa30>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d018      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x8b8>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a6a      	ldr	r2, [pc, #424]	; (800721c <HAL_DMA_IRQHandler+0xa34>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d013      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x8b8>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a68      	ldr	r2, [pc, #416]	; (8007220 <HAL_DMA_IRQHandler+0xa38>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00e      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x8b8>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a67      	ldr	r2, [pc, #412]	; (8007224 <HAL_DMA_IRQHandler+0xa3c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d009      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x8b8>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a65      	ldr	r2, [pc, #404]	; (8007228 <HAL_DMA_IRQHandler+0xa40>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d004      	beq.n	80070a0 <HAL_DMA_IRQHandler+0x8b8>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a64      	ldr	r2, [pc, #400]	; (800722c <HAL_DMA_IRQHandler+0xa44>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d108      	bne.n	80070b2 <HAL_DMA_IRQHandler+0x8ca>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0201 	bic.w	r2, r2, #1
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	e007      	b.n	80070c2 <HAL_DMA_IRQHandler+0x8da>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0201 	bic.w	r2, r2, #1
 80070c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3301      	adds	r3, #1
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d307      	bcc.n	80070de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1f2      	bne.n	80070c2 <HAL_DMA_IRQHandler+0x8da>
 80070dc:	e000      	b.n	80070e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80070de:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d004      	beq.n	80070f8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2203      	movs	r2, #3
 80070f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80070f6:	e003      	b.n	8007100 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 8272 	beq.w	80075f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	4798      	blx	r3
 800711a:	e26c      	b.n	80075f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a43      	ldr	r2, [pc, #268]	; (8007230 <HAL_DMA_IRQHandler+0xa48>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d022      	beq.n	800716c <HAL_DMA_IRQHandler+0x984>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a42      	ldr	r2, [pc, #264]	; (8007234 <HAL_DMA_IRQHandler+0xa4c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d01d      	beq.n	800716c <HAL_DMA_IRQHandler+0x984>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a40      	ldr	r2, [pc, #256]	; (8007238 <HAL_DMA_IRQHandler+0xa50>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d018      	beq.n	800716c <HAL_DMA_IRQHandler+0x984>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a3f      	ldr	r2, [pc, #252]	; (800723c <HAL_DMA_IRQHandler+0xa54>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d013      	beq.n	800716c <HAL_DMA_IRQHandler+0x984>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a3d      	ldr	r2, [pc, #244]	; (8007240 <HAL_DMA_IRQHandler+0xa58>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00e      	beq.n	800716c <HAL_DMA_IRQHandler+0x984>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a3c      	ldr	r2, [pc, #240]	; (8007244 <HAL_DMA_IRQHandler+0xa5c>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d009      	beq.n	800716c <HAL_DMA_IRQHandler+0x984>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a3a      	ldr	r2, [pc, #232]	; (8007248 <HAL_DMA_IRQHandler+0xa60>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d004      	beq.n	800716c <HAL_DMA_IRQHandler+0x984>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a39      	ldr	r2, [pc, #228]	; (800724c <HAL_DMA_IRQHandler+0xa64>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d101      	bne.n	8007170 <HAL_DMA_IRQHandler+0x988>
 800716c:	2301      	movs	r3, #1
 800716e:	e000      	b.n	8007172 <HAL_DMA_IRQHandler+0x98a>
 8007170:	2300      	movs	r3, #0
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 823f 	beq.w	80075f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007184:	f003 031f 	and.w	r3, r3, #31
 8007188:	2204      	movs	r2, #4
 800718a:	409a      	lsls	r2, r3
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80cd 	beq.w	8007330 <HAL_DMA_IRQHandler+0xb48>
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 80c7 	beq.w	8007330 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a6:	f003 031f 	and.w	r3, r3, #31
 80071aa:	2204      	movs	r2, #4
 80071ac:	409a      	lsls	r2, r3
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d049      	beq.n	8007250 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d109      	bne.n	80071da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f000 8210 	beq.w	80075f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071d8:	e20a      	b.n	80075f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 8206 	beq.w	80075f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071ec:	e200      	b.n	80075f0 <HAL_DMA_IRQHandler+0xe08>
 80071ee:	bf00      	nop
 80071f0:	40020010 	.word	0x40020010
 80071f4:	40020028 	.word	0x40020028
 80071f8:	40020040 	.word	0x40020040
 80071fc:	40020058 	.word	0x40020058
 8007200:	40020070 	.word	0x40020070
 8007204:	40020088 	.word	0x40020088
 8007208:	400200a0 	.word	0x400200a0
 800720c:	400200b8 	.word	0x400200b8
 8007210:	40020410 	.word	0x40020410
 8007214:	40020428 	.word	0x40020428
 8007218:	40020440 	.word	0x40020440
 800721c:	40020458 	.word	0x40020458
 8007220:	40020470 	.word	0x40020470
 8007224:	40020488 	.word	0x40020488
 8007228:	400204a0 	.word	0x400204a0
 800722c:	400204b8 	.word	0x400204b8
 8007230:	58025408 	.word	0x58025408
 8007234:	5802541c 	.word	0x5802541c
 8007238:	58025430 	.word	0x58025430
 800723c:	58025444 	.word	0x58025444
 8007240:	58025458 	.word	0x58025458
 8007244:	5802546c 	.word	0x5802546c
 8007248:	58025480 	.word	0x58025480
 800724c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f003 0320 	and.w	r3, r3, #32
 8007256:	2b00      	cmp	r3, #0
 8007258:	d160      	bne.n	800731c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a7f      	ldr	r2, [pc, #508]	; (800745c <HAL_DMA_IRQHandler+0xc74>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d04a      	beq.n	80072fa <HAL_DMA_IRQHandler+0xb12>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a7d      	ldr	r2, [pc, #500]	; (8007460 <HAL_DMA_IRQHandler+0xc78>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d045      	beq.n	80072fa <HAL_DMA_IRQHandler+0xb12>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a7c      	ldr	r2, [pc, #496]	; (8007464 <HAL_DMA_IRQHandler+0xc7c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d040      	beq.n	80072fa <HAL_DMA_IRQHandler+0xb12>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a7a      	ldr	r2, [pc, #488]	; (8007468 <HAL_DMA_IRQHandler+0xc80>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d03b      	beq.n	80072fa <HAL_DMA_IRQHandler+0xb12>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a79      	ldr	r2, [pc, #484]	; (800746c <HAL_DMA_IRQHandler+0xc84>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d036      	beq.n	80072fa <HAL_DMA_IRQHandler+0xb12>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a77      	ldr	r2, [pc, #476]	; (8007470 <HAL_DMA_IRQHandler+0xc88>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d031      	beq.n	80072fa <HAL_DMA_IRQHandler+0xb12>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a76      	ldr	r2, [pc, #472]	; (8007474 <HAL_DMA_IRQHandler+0xc8c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d02c      	beq.n	80072fa <HAL_DMA_IRQHandler+0xb12>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a74      	ldr	r2, [pc, #464]	; (8007478 <HAL_DMA_IRQHandler+0xc90>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d027      	beq.n	80072fa <HAL_DMA_IRQHandler+0xb12>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a73      	ldr	r2, [pc, #460]	; (800747c <HAL_DMA_IRQHandler+0xc94>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d022      	beq.n	80072fa <HAL_DMA_IRQHandler+0xb12>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a71      	ldr	r2, [pc, #452]	; (8007480 <HAL_DMA_IRQHandler+0xc98>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d01d      	beq.n	80072fa <HAL_DMA_IRQHandler+0xb12>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a70      	ldr	r2, [pc, #448]	; (8007484 <HAL_DMA_IRQHandler+0xc9c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d018      	beq.n	80072fa <HAL_DMA_IRQHandler+0xb12>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a6e      	ldr	r2, [pc, #440]	; (8007488 <HAL_DMA_IRQHandler+0xca0>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d013      	beq.n	80072fa <HAL_DMA_IRQHandler+0xb12>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a6d      	ldr	r2, [pc, #436]	; (800748c <HAL_DMA_IRQHandler+0xca4>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d00e      	beq.n	80072fa <HAL_DMA_IRQHandler+0xb12>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a6b      	ldr	r2, [pc, #428]	; (8007490 <HAL_DMA_IRQHandler+0xca8>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d009      	beq.n	80072fa <HAL_DMA_IRQHandler+0xb12>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a6a      	ldr	r2, [pc, #424]	; (8007494 <HAL_DMA_IRQHandler+0xcac>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d004      	beq.n	80072fa <HAL_DMA_IRQHandler+0xb12>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a68      	ldr	r2, [pc, #416]	; (8007498 <HAL_DMA_IRQHandler+0xcb0>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d108      	bne.n	800730c <HAL_DMA_IRQHandler+0xb24>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 0208 	bic.w	r2, r2, #8
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	e007      	b.n	800731c <HAL_DMA_IRQHandler+0xb34>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0204 	bic.w	r2, r2, #4
 800731a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 8165 	beq.w	80075f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800732e:	e15f      	b.n	80075f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007334:	f003 031f 	and.w	r3, r3, #31
 8007338:	2202      	movs	r2, #2
 800733a:	409a      	lsls	r2, r3
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	4013      	ands	r3, r2
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 80c5 	beq.w	80074d0 <HAL_DMA_IRQHandler+0xce8>
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 80bf 	beq.w	80074d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007356:	f003 031f 	and.w	r3, r3, #31
 800735a:	2202      	movs	r2, #2
 800735c:	409a      	lsls	r2, r3
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d018      	beq.n	800739e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d109      	bne.n	800738a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 813a 	beq.w	80075f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007388:	e134      	b.n	80075f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 8130 	beq.w	80075f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800739c:	e12a      	b.n	80075f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f040 8089 	bne.w	80074bc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a2b      	ldr	r2, [pc, #172]	; (800745c <HAL_DMA_IRQHandler+0xc74>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d04a      	beq.n	800744a <HAL_DMA_IRQHandler+0xc62>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a29      	ldr	r2, [pc, #164]	; (8007460 <HAL_DMA_IRQHandler+0xc78>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d045      	beq.n	800744a <HAL_DMA_IRQHandler+0xc62>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a28      	ldr	r2, [pc, #160]	; (8007464 <HAL_DMA_IRQHandler+0xc7c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d040      	beq.n	800744a <HAL_DMA_IRQHandler+0xc62>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a26      	ldr	r2, [pc, #152]	; (8007468 <HAL_DMA_IRQHandler+0xc80>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d03b      	beq.n	800744a <HAL_DMA_IRQHandler+0xc62>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a25      	ldr	r2, [pc, #148]	; (800746c <HAL_DMA_IRQHandler+0xc84>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d036      	beq.n	800744a <HAL_DMA_IRQHandler+0xc62>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a23      	ldr	r2, [pc, #140]	; (8007470 <HAL_DMA_IRQHandler+0xc88>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d031      	beq.n	800744a <HAL_DMA_IRQHandler+0xc62>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a22      	ldr	r2, [pc, #136]	; (8007474 <HAL_DMA_IRQHandler+0xc8c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d02c      	beq.n	800744a <HAL_DMA_IRQHandler+0xc62>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a20      	ldr	r2, [pc, #128]	; (8007478 <HAL_DMA_IRQHandler+0xc90>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d027      	beq.n	800744a <HAL_DMA_IRQHandler+0xc62>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a1f      	ldr	r2, [pc, #124]	; (800747c <HAL_DMA_IRQHandler+0xc94>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d022      	beq.n	800744a <HAL_DMA_IRQHandler+0xc62>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a1d      	ldr	r2, [pc, #116]	; (8007480 <HAL_DMA_IRQHandler+0xc98>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d01d      	beq.n	800744a <HAL_DMA_IRQHandler+0xc62>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a1c      	ldr	r2, [pc, #112]	; (8007484 <HAL_DMA_IRQHandler+0xc9c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d018      	beq.n	800744a <HAL_DMA_IRQHandler+0xc62>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a1a      	ldr	r2, [pc, #104]	; (8007488 <HAL_DMA_IRQHandler+0xca0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d013      	beq.n	800744a <HAL_DMA_IRQHandler+0xc62>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a19      	ldr	r2, [pc, #100]	; (800748c <HAL_DMA_IRQHandler+0xca4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d00e      	beq.n	800744a <HAL_DMA_IRQHandler+0xc62>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a17      	ldr	r2, [pc, #92]	; (8007490 <HAL_DMA_IRQHandler+0xca8>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d009      	beq.n	800744a <HAL_DMA_IRQHandler+0xc62>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a16      	ldr	r2, [pc, #88]	; (8007494 <HAL_DMA_IRQHandler+0xcac>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d004      	beq.n	800744a <HAL_DMA_IRQHandler+0xc62>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a14      	ldr	r2, [pc, #80]	; (8007498 <HAL_DMA_IRQHandler+0xcb0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d128      	bne.n	800749c <HAL_DMA_IRQHandler+0xcb4>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 0214 	bic.w	r2, r2, #20
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	e027      	b.n	80074ac <HAL_DMA_IRQHandler+0xcc4>
 800745c:	40020010 	.word	0x40020010
 8007460:	40020028 	.word	0x40020028
 8007464:	40020040 	.word	0x40020040
 8007468:	40020058 	.word	0x40020058
 800746c:	40020070 	.word	0x40020070
 8007470:	40020088 	.word	0x40020088
 8007474:	400200a0 	.word	0x400200a0
 8007478:	400200b8 	.word	0x400200b8
 800747c:	40020410 	.word	0x40020410
 8007480:	40020428 	.word	0x40020428
 8007484:	40020440 	.word	0x40020440
 8007488:	40020458 	.word	0x40020458
 800748c:	40020470 	.word	0x40020470
 8007490:	40020488 	.word	0x40020488
 8007494:	400204a0 	.word	0x400204a0
 8007498:	400204b8 	.word	0x400204b8
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 020a 	bic.w	r2, r2, #10
 80074aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 8097 	beq.w	80075f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80074ce:	e091      	b.n	80075f4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d4:	f003 031f 	and.w	r3, r3, #31
 80074d8:	2208      	movs	r2, #8
 80074da:	409a      	lsls	r2, r3
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	4013      	ands	r3, r2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 8088 	beq.w	80075f6 <HAL_DMA_IRQHandler+0xe0e>
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f003 0308 	and.w	r3, r3, #8
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 8082 	beq.w	80075f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a41      	ldr	r2, [pc, #260]	; (80075fc <HAL_DMA_IRQHandler+0xe14>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d04a      	beq.n	8007592 <HAL_DMA_IRQHandler+0xdaa>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a3f      	ldr	r2, [pc, #252]	; (8007600 <HAL_DMA_IRQHandler+0xe18>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d045      	beq.n	8007592 <HAL_DMA_IRQHandler+0xdaa>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a3e      	ldr	r2, [pc, #248]	; (8007604 <HAL_DMA_IRQHandler+0xe1c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d040      	beq.n	8007592 <HAL_DMA_IRQHandler+0xdaa>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a3c      	ldr	r2, [pc, #240]	; (8007608 <HAL_DMA_IRQHandler+0xe20>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d03b      	beq.n	8007592 <HAL_DMA_IRQHandler+0xdaa>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a3b      	ldr	r2, [pc, #236]	; (800760c <HAL_DMA_IRQHandler+0xe24>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d036      	beq.n	8007592 <HAL_DMA_IRQHandler+0xdaa>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a39      	ldr	r2, [pc, #228]	; (8007610 <HAL_DMA_IRQHandler+0xe28>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d031      	beq.n	8007592 <HAL_DMA_IRQHandler+0xdaa>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a38      	ldr	r2, [pc, #224]	; (8007614 <HAL_DMA_IRQHandler+0xe2c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d02c      	beq.n	8007592 <HAL_DMA_IRQHandler+0xdaa>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a36      	ldr	r2, [pc, #216]	; (8007618 <HAL_DMA_IRQHandler+0xe30>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d027      	beq.n	8007592 <HAL_DMA_IRQHandler+0xdaa>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a35      	ldr	r2, [pc, #212]	; (800761c <HAL_DMA_IRQHandler+0xe34>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d022      	beq.n	8007592 <HAL_DMA_IRQHandler+0xdaa>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a33      	ldr	r2, [pc, #204]	; (8007620 <HAL_DMA_IRQHandler+0xe38>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d01d      	beq.n	8007592 <HAL_DMA_IRQHandler+0xdaa>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a32      	ldr	r2, [pc, #200]	; (8007624 <HAL_DMA_IRQHandler+0xe3c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d018      	beq.n	8007592 <HAL_DMA_IRQHandler+0xdaa>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a30      	ldr	r2, [pc, #192]	; (8007628 <HAL_DMA_IRQHandler+0xe40>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d013      	beq.n	8007592 <HAL_DMA_IRQHandler+0xdaa>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a2f      	ldr	r2, [pc, #188]	; (800762c <HAL_DMA_IRQHandler+0xe44>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d00e      	beq.n	8007592 <HAL_DMA_IRQHandler+0xdaa>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a2d      	ldr	r2, [pc, #180]	; (8007630 <HAL_DMA_IRQHandler+0xe48>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d009      	beq.n	8007592 <HAL_DMA_IRQHandler+0xdaa>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a2c      	ldr	r2, [pc, #176]	; (8007634 <HAL_DMA_IRQHandler+0xe4c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d004      	beq.n	8007592 <HAL_DMA_IRQHandler+0xdaa>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a2a      	ldr	r2, [pc, #168]	; (8007638 <HAL_DMA_IRQHandler+0xe50>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d108      	bne.n	80075a4 <HAL_DMA_IRQHandler+0xdbc>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 021c 	bic.w	r2, r2, #28
 80075a0:	601a      	str	r2, [r3, #0]
 80075a2:	e007      	b.n	80075b4 <HAL_DMA_IRQHandler+0xdcc>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 020e 	bic.w	r2, r2, #14
 80075b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075b8:	f003 031f 	and.w	r3, r3, #31
 80075bc:	2201      	movs	r2, #1
 80075be:	409a      	lsls	r2, r3
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d009      	beq.n	80075f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	4798      	blx	r3
 80075ea:	e004      	b.n	80075f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80075ec:	bf00      	nop
 80075ee:	e002      	b.n	80075f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075f0:	bf00      	nop
 80075f2:	e000      	b.n	80075f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80075f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80075f6:	3728      	adds	r7, #40	; 0x28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	40020010 	.word	0x40020010
 8007600:	40020028 	.word	0x40020028
 8007604:	40020040 	.word	0x40020040
 8007608:	40020058 	.word	0x40020058
 800760c:	40020070 	.word	0x40020070
 8007610:	40020088 	.word	0x40020088
 8007614:	400200a0 	.word	0x400200a0
 8007618:	400200b8 	.word	0x400200b8
 800761c:	40020410 	.word	0x40020410
 8007620:	40020428 	.word	0x40020428
 8007624:	40020440 	.word	0x40020440
 8007628:	40020458 	.word	0x40020458
 800762c:	40020470 	.word	0x40020470
 8007630:	40020488 	.word	0x40020488
 8007634:	400204a0 	.word	0x400204a0
 8007638:	400204b8 	.word	0x400204b8

0800763c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007654:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a7f      	ldr	r2, [pc, #508]	; (8007858 <DMA_SetConfig+0x21c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d072      	beq.n	8007746 <DMA_SetConfig+0x10a>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a7d      	ldr	r2, [pc, #500]	; (800785c <DMA_SetConfig+0x220>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d06d      	beq.n	8007746 <DMA_SetConfig+0x10a>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a7c      	ldr	r2, [pc, #496]	; (8007860 <DMA_SetConfig+0x224>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d068      	beq.n	8007746 <DMA_SetConfig+0x10a>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a7a      	ldr	r2, [pc, #488]	; (8007864 <DMA_SetConfig+0x228>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d063      	beq.n	8007746 <DMA_SetConfig+0x10a>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a79      	ldr	r2, [pc, #484]	; (8007868 <DMA_SetConfig+0x22c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d05e      	beq.n	8007746 <DMA_SetConfig+0x10a>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a77      	ldr	r2, [pc, #476]	; (800786c <DMA_SetConfig+0x230>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d059      	beq.n	8007746 <DMA_SetConfig+0x10a>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a76      	ldr	r2, [pc, #472]	; (8007870 <DMA_SetConfig+0x234>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d054      	beq.n	8007746 <DMA_SetConfig+0x10a>
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a74      	ldr	r2, [pc, #464]	; (8007874 <DMA_SetConfig+0x238>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d04f      	beq.n	8007746 <DMA_SetConfig+0x10a>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a73      	ldr	r2, [pc, #460]	; (8007878 <DMA_SetConfig+0x23c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d04a      	beq.n	8007746 <DMA_SetConfig+0x10a>
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a71      	ldr	r2, [pc, #452]	; (800787c <DMA_SetConfig+0x240>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d045      	beq.n	8007746 <DMA_SetConfig+0x10a>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a70      	ldr	r2, [pc, #448]	; (8007880 <DMA_SetConfig+0x244>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d040      	beq.n	8007746 <DMA_SetConfig+0x10a>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a6e      	ldr	r2, [pc, #440]	; (8007884 <DMA_SetConfig+0x248>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d03b      	beq.n	8007746 <DMA_SetConfig+0x10a>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a6d      	ldr	r2, [pc, #436]	; (8007888 <DMA_SetConfig+0x24c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d036      	beq.n	8007746 <DMA_SetConfig+0x10a>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a6b      	ldr	r2, [pc, #428]	; (800788c <DMA_SetConfig+0x250>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d031      	beq.n	8007746 <DMA_SetConfig+0x10a>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a6a      	ldr	r2, [pc, #424]	; (8007890 <DMA_SetConfig+0x254>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d02c      	beq.n	8007746 <DMA_SetConfig+0x10a>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a68      	ldr	r2, [pc, #416]	; (8007894 <DMA_SetConfig+0x258>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d027      	beq.n	8007746 <DMA_SetConfig+0x10a>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a67      	ldr	r2, [pc, #412]	; (8007898 <DMA_SetConfig+0x25c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d022      	beq.n	8007746 <DMA_SetConfig+0x10a>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a65      	ldr	r2, [pc, #404]	; (800789c <DMA_SetConfig+0x260>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d01d      	beq.n	8007746 <DMA_SetConfig+0x10a>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a64      	ldr	r2, [pc, #400]	; (80078a0 <DMA_SetConfig+0x264>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d018      	beq.n	8007746 <DMA_SetConfig+0x10a>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a62      	ldr	r2, [pc, #392]	; (80078a4 <DMA_SetConfig+0x268>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d013      	beq.n	8007746 <DMA_SetConfig+0x10a>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a61      	ldr	r2, [pc, #388]	; (80078a8 <DMA_SetConfig+0x26c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d00e      	beq.n	8007746 <DMA_SetConfig+0x10a>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a5f      	ldr	r2, [pc, #380]	; (80078ac <DMA_SetConfig+0x270>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d009      	beq.n	8007746 <DMA_SetConfig+0x10a>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a5e      	ldr	r2, [pc, #376]	; (80078b0 <DMA_SetConfig+0x274>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d004      	beq.n	8007746 <DMA_SetConfig+0x10a>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a5c      	ldr	r2, [pc, #368]	; (80078b4 <DMA_SetConfig+0x278>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d101      	bne.n	800774a <DMA_SetConfig+0x10e>
 8007746:	2301      	movs	r3, #1
 8007748:	e000      	b.n	800774c <DMA_SetConfig+0x110>
 800774a:	2300      	movs	r3, #0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00d      	beq.n	800776c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007758:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800776a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a39      	ldr	r2, [pc, #228]	; (8007858 <DMA_SetConfig+0x21c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d04a      	beq.n	800780c <DMA_SetConfig+0x1d0>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a38      	ldr	r2, [pc, #224]	; (800785c <DMA_SetConfig+0x220>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d045      	beq.n	800780c <DMA_SetConfig+0x1d0>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a36      	ldr	r2, [pc, #216]	; (8007860 <DMA_SetConfig+0x224>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d040      	beq.n	800780c <DMA_SetConfig+0x1d0>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a35      	ldr	r2, [pc, #212]	; (8007864 <DMA_SetConfig+0x228>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d03b      	beq.n	800780c <DMA_SetConfig+0x1d0>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a33      	ldr	r2, [pc, #204]	; (8007868 <DMA_SetConfig+0x22c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d036      	beq.n	800780c <DMA_SetConfig+0x1d0>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a32      	ldr	r2, [pc, #200]	; (800786c <DMA_SetConfig+0x230>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d031      	beq.n	800780c <DMA_SetConfig+0x1d0>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a30      	ldr	r2, [pc, #192]	; (8007870 <DMA_SetConfig+0x234>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d02c      	beq.n	800780c <DMA_SetConfig+0x1d0>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a2f      	ldr	r2, [pc, #188]	; (8007874 <DMA_SetConfig+0x238>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d027      	beq.n	800780c <DMA_SetConfig+0x1d0>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a2d      	ldr	r2, [pc, #180]	; (8007878 <DMA_SetConfig+0x23c>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d022      	beq.n	800780c <DMA_SetConfig+0x1d0>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a2c      	ldr	r2, [pc, #176]	; (800787c <DMA_SetConfig+0x240>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d01d      	beq.n	800780c <DMA_SetConfig+0x1d0>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a2a      	ldr	r2, [pc, #168]	; (8007880 <DMA_SetConfig+0x244>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d018      	beq.n	800780c <DMA_SetConfig+0x1d0>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a29      	ldr	r2, [pc, #164]	; (8007884 <DMA_SetConfig+0x248>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d013      	beq.n	800780c <DMA_SetConfig+0x1d0>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a27      	ldr	r2, [pc, #156]	; (8007888 <DMA_SetConfig+0x24c>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00e      	beq.n	800780c <DMA_SetConfig+0x1d0>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a26      	ldr	r2, [pc, #152]	; (800788c <DMA_SetConfig+0x250>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d009      	beq.n	800780c <DMA_SetConfig+0x1d0>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a24      	ldr	r2, [pc, #144]	; (8007890 <DMA_SetConfig+0x254>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d004      	beq.n	800780c <DMA_SetConfig+0x1d0>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a23      	ldr	r2, [pc, #140]	; (8007894 <DMA_SetConfig+0x258>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d101      	bne.n	8007810 <DMA_SetConfig+0x1d4>
 800780c:	2301      	movs	r3, #1
 800780e:	e000      	b.n	8007812 <DMA_SetConfig+0x1d6>
 8007810:	2300      	movs	r3, #0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d059      	beq.n	80078ca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800781a:	f003 031f 	and.w	r3, r3, #31
 800781e:	223f      	movs	r2, #63	; 0x3f
 8007820:	409a      	lsls	r2, r3
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007834:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	2b40      	cmp	r3, #64	; 0x40
 8007844:	d138      	bne.n	80078b8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007856:	e086      	b.n	8007966 <DMA_SetConfig+0x32a>
 8007858:	40020010 	.word	0x40020010
 800785c:	40020028 	.word	0x40020028
 8007860:	40020040 	.word	0x40020040
 8007864:	40020058 	.word	0x40020058
 8007868:	40020070 	.word	0x40020070
 800786c:	40020088 	.word	0x40020088
 8007870:	400200a0 	.word	0x400200a0
 8007874:	400200b8 	.word	0x400200b8
 8007878:	40020410 	.word	0x40020410
 800787c:	40020428 	.word	0x40020428
 8007880:	40020440 	.word	0x40020440
 8007884:	40020458 	.word	0x40020458
 8007888:	40020470 	.word	0x40020470
 800788c:	40020488 	.word	0x40020488
 8007890:	400204a0 	.word	0x400204a0
 8007894:	400204b8 	.word	0x400204b8
 8007898:	58025408 	.word	0x58025408
 800789c:	5802541c 	.word	0x5802541c
 80078a0:	58025430 	.word	0x58025430
 80078a4:	58025444 	.word	0x58025444
 80078a8:	58025458 	.word	0x58025458
 80078ac:	5802546c 	.word	0x5802546c
 80078b0:	58025480 	.word	0x58025480
 80078b4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	60da      	str	r2, [r3, #12]
}
 80078c8:	e04d      	b.n	8007966 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a29      	ldr	r2, [pc, #164]	; (8007974 <DMA_SetConfig+0x338>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d022      	beq.n	800791a <DMA_SetConfig+0x2de>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a27      	ldr	r2, [pc, #156]	; (8007978 <DMA_SetConfig+0x33c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d01d      	beq.n	800791a <DMA_SetConfig+0x2de>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a26      	ldr	r2, [pc, #152]	; (800797c <DMA_SetConfig+0x340>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d018      	beq.n	800791a <DMA_SetConfig+0x2de>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a24      	ldr	r2, [pc, #144]	; (8007980 <DMA_SetConfig+0x344>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d013      	beq.n	800791a <DMA_SetConfig+0x2de>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a23      	ldr	r2, [pc, #140]	; (8007984 <DMA_SetConfig+0x348>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d00e      	beq.n	800791a <DMA_SetConfig+0x2de>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a21      	ldr	r2, [pc, #132]	; (8007988 <DMA_SetConfig+0x34c>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d009      	beq.n	800791a <DMA_SetConfig+0x2de>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a20      	ldr	r2, [pc, #128]	; (800798c <DMA_SetConfig+0x350>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d004      	beq.n	800791a <DMA_SetConfig+0x2de>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a1e      	ldr	r2, [pc, #120]	; (8007990 <DMA_SetConfig+0x354>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d101      	bne.n	800791e <DMA_SetConfig+0x2e2>
 800791a:	2301      	movs	r3, #1
 800791c:	e000      	b.n	8007920 <DMA_SetConfig+0x2e4>
 800791e:	2300      	movs	r3, #0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d020      	beq.n	8007966 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007928:	f003 031f 	and.w	r3, r3, #31
 800792c:	2201      	movs	r2, #1
 800792e:	409a      	lsls	r2, r3
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	2b40      	cmp	r3, #64	; 0x40
 8007942:	d108      	bne.n	8007956 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	60da      	str	r2, [r3, #12]
}
 8007954:	e007      	b.n	8007966 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	60da      	str	r2, [r3, #12]
}
 8007966:	bf00      	nop
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	58025408 	.word	0x58025408
 8007978:	5802541c 	.word	0x5802541c
 800797c:	58025430 	.word	0x58025430
 8007980:	58025444 	.word	0x58025444
 8007984:	58025458 	.word	0x58025458
 8007988:	5802546c 	.word	0x5802546c
 800798c:	58025480 	.word	0x58025480
 8007990:	58025494 	.word	0x58025494

08007994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a42      	ldr	r2, [pc, #264]	; (8007aac <DMA_CalcBaseAndBitshift+0x118>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d04a      	beq.n	8007a3c <DMA_CalcBaseAndBitshift+0xa8>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a41      	ldr	r2, [pc, #260]	; (8007ab0 <DMA_CalcBaseAndBitshift+0x11c>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d045      	beq.n	8007a3c <DMA_CalcBaseAndBitshift+0xa8>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a3f      	ldr	r2, [pc, #252]	; (8007ab4 <DMA_CalcBaseAndBitshift+0x120>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d040      	beq.n	8007a3c <DMA_CalcBaseAndBitshift+0xa8>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a3e      	ldr	r2, [pc, #248]	; (8007ab8 <DMA_CalcBaseAndBitshift+0x124>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d03b      	beq.n	8007a3c <DMA_CalcBaseAndBitshift+0xa8>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a3c      	ldr	r2, [pc, #240]	; (8007abc <DMA_CalcBaseAndBitshift+0x128>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d036      	beq.n	8007a3c <DMA_CalcBaseAndBitshift+0xa8>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a3b      	ldr	r2, [pc, #236]	; (8007ac0 <DMA_CalcBaseAndBitshift+0x12c>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d031      	beq.n	8007a3c <DMA_CalcBaseAndBitshift+0xa8>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a39      	ldr	r2, [pc, #228]	; (8007ac4 <DMA_CalcBaseAndBitshift+0x130>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d02c      	beq.n	8007a3c <DMA_CalcBaseAndBitshift+0xa8>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a38      	ldr	r2, [pc, #224]	; (8007ac8 <DMA_CalcBaseAndBitshift+0x134>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d027      	beq.n	8007a3c <DMA_CalcBaseAndBitshift+0xa8>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a36      	ldr	r2, [pc, #216]	; (8007acc <DMA_CalcBaseAndBitshift+0x138>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d022      	beq.n	8007a3c <DMA_CalcBaseAndBitshift+0xa8>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a35      	ldr	r2, [pc, #212]	; (8007ad0 <DMA_CalcBaseAndBitshift+0x13c>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d01d      	beq.n	8007a3c <DMA_CalcBaseAndBitshift+0xa8>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a33      	ldr	r2, [pc, #204]	; (8007ad4 <DMA_CalcBaseAndBitshift+0x140>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d018      	beq.n	8007a3c <DMA_CalcBaseAndBitshift+0xa8>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a32      	ldr	r2, [pc, #200]	; (8007ad8 <DMA_CalcBaseAndBitshift+0x144>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d013      	beq.n	8007a3c <DMA_CalcBaseAndBitshift+0xa8>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a30      	ldr	r2, [pc, #192]	; (8007adc <DMA_CalcBaseAndBitshift+0x148>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d00e      	beq.n	8007a3c <DMA_CalcBaseAndBitshift+0xa8>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a2f      	ldr	r2, [pc, #188]	; (8007ae0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d009      	beq.n	8007a3c <DMA_CalcBaseAndBitshift+0xa8>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a2d      	ldr	r2, [pc, #180]	; (8007ae4 <DMA_CalcBaseAndBitshift+0x150>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d004      	beq.n	8007a3c <DMA_CalcBaseAndBitshift+0xa8>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a2c      	ldr	r2, [pc, #176]	; (8007ae8 <DMA_CalcBaseAndBitshift+0x154>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d101      	bne.n	8007a40 <DMA_CalcBaseAndBitshift+0xac>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e000      	b.n	8007a42 <DMA_CalcBaseAndBitshift+0xae>
 8007a40:	2300      	movs	r3, #0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d024      	beq.n	8007a90 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	3b10      	subs	r3, #16
 8007a4e:	4a27      	ldr	r2, [pc, #156]	; (8007aec <DMA_CalcBaseAndBitshift+0x158>)
 8007a50:	fba2 2303 	umull	r2, r3, r2, r3
 8007a54:	091b      	lsrs	r3, r3, #4
 8007a56:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f003 0307 	and.w	r3, r3, #7
 8007a5e:	4a24      	ldr	r2, [pc, #144]	; (8007af0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007a60:	5cd3      	ldrb	r3, [r2, r3]
 8007a62:	461a      	mov	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b03      	cmp	r3, #3
 8007a6c:	d908      	bls.n	8007a80 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	4b1f      	ldr	r3, [pc, #124]	; (8007af4 <DMA_CalcBaseAndBitshift+0x160>)
 8007a76:	4013      	ands	r3, r2
 8007a78:	1d1a      	adds	r2, r3, #4
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	659a      	str	r2, [r3, #88]	; 0x58
 8007a7e:	e00d      	b.n	8007a9c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	461a      	mov	r2, r3
 8007a86:	4b1b      	ldr	r3, [pc, #108]	; (8007af4 <DMA_CalcBaseAndBitshift+0x160>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8007a8e:	e005      	b.n	8007a9c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	40020010 	.word	0x40020010
 8007ab0:	40020028 	.word	0x40020028
 8007ab4:	40020040 	.word	0x40020040
 8007ab8:	40020058 	.word	0x40020058
 8007abc:	40020070 	.word	0x40020070
 8007ac0:	40020088 	.word	0x40020088
 8007ac4:	400200a0 	.word	0x400200a0
 8007ac8:	400200b8 	.word	0x400200b8
 8007acc:	40020410 	.word	0x40020410
 8007ad0:	40020428 	.word	0x40020428
 8007ad4:	40020440 	.word	0x40020440
 8007ad8:	40020458 	.word	0x40020458
 8007adc:	40020470 	.word	0x40020470
 8007ae0:	40020488 	.word	0x40020488
 8007ae4:	400204a0 	.word	0x400204a0
 8007ae8:	400204b8 	.word	0x400204b8
 8007aec:	aaaaaaab 	.word	0xaaaaaaab
 8007af0:	08015dc4 	.word	0x08015dc4
 8007af4:	fffffc00 	.word	0xfffffc00

08007af8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d120      	bne.n	8007b4e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d858      	bhi.n	8007bc6 <DMA_CheckFifoParam+0xce>
 8007b14:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <DMA_CheckFifoParam+0x24>)
 8007b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1a:	bf00      	nop
 8007b1c:	08007b2d 	.word	0x08007b2d
 8007b20:	08007b3f 	.word	0x08007b3f
 8007b24:	08007b2d 	.word	0x08007b2d
 8007b28:	08007bc7 	.word	0x08007bc7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d048      	beq.n	8007bca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b3c:	e045      	b.n	8007bca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b46:	d142      	bne.n	8007bce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b4c:	e03f      	b.n	8007bce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b56:	d123      	bne.n	8007ba0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	2b03      	cmp	r3, #3
 8007b5e:	d838      	bhi.n	8007bd2 <DMA_CheckFifoParam+0xda>
 8007b60:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <DMA_CheckFifoParam+0x70>)
 8007b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b66:	bf00      	nop
 8007b68:	08007b79 	.word	0x08007b79
 8007b6c:	08007b7f 	.word	0x08007b7f
 8007b70:	08007b79 	.word	0x08007b79
 8007b74:	08007b91 	.word	0x08007b91
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	73fb      	strb	r3, [r7, #15]
        break;
 8007b7c:	e030      	b.n	8007be0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d025      	beq.n	8007bd6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b8e:	e022      	b.n	8007bd6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b98:	d11f      	bne.n	8007bda <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b9e:	e01c      	b.n	8007bda <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d902      	bls.n	8007bae <DMA_CheckFifoParam+0xb6>
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d003      	beq.n	8007bb4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007bac:	e018      	b.n	8007be0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	73fb      	strb	r3, [r7, #15]
        break;
 8007bb2:	e015      	b.n	8007be0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00e      	beq.n	8007bde <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc4:	e00b      	b.n	8007bde <DMA_CheckFifoParam+0xe6>
        break;
 8007bc6:	bf00      	nop
 8007bc8:	e00a      	b.n	8007be0 <DMA_CheckFifoParam+0xe8>
        break;
 8007bca:	bf00      	nop
 8007bcc:	e008      	b.n	8007be0 <DMA_CheckFifoParam+0xe8>
        break;
 8007bce:	bf00      	nop
 8007bd0:	e006      	b.n	8007be0 <DMA_CheckFifoParam+0xe8>
        break;
 8007bd2:	bf00      	nop
 8007bd4:	e004      	b.n	8007be0 <DMA_CheckFifoParam+0xe8>
        break;
 8007bd6:	bf00      	nop
 8007bd8:	e002      	b.n	8007be0 <DMA_CheckFifoParam+0xe8>
        break;
 8007bda:	bf00      	nop
 8007bdc:	e000      	b.n	8007be0 <DMA_CheckFifoParam+0xe8>
    break;
 8007bde:	bf00      	nop
    }
  }

  return status;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop

08007bf0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a38      	ldr	r2, [pc, #224]	; (8007ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d022      	beq.n	8007c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a36      	ldr	r2, [pc, #216]	; (8007ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d01d      	beq.n	8007c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a35      	ldr	r2, [pc, #212]	; (8007cec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d018      	beq.n	8007c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a33      	ldr	r2, [pc, #204]	; (8007cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d013      	beq.n	8007c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a32      	ldr	r2, [pc, #200]	; (8007cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d00e      	beq.n	8007c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a30      	ldr	r2, [pc, #192]	; (8007cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d009      	beq.n	8007c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a2f      	ldr	r2, [pc, #188]	; (8007cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d004      	beq.n	8007c4e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a2d      	ldr	r2, [pc, #180]	; (8007d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d101      	bne.n	8007c52 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e000      	b.n	8007c54 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007c52:	2300      	movs	r3, #0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01a      	beq.n	8007c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	3b08      	subs	r3, #8
 8007c60:	4a28      	ldr	r2, [pc, #160]	; (8007d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007c62:	fba2 2303 	umull	r2, r3, r2, r3
 8007c66:	091b      	lsrs	r3, r3, #4
 8007c68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	4b26      	ldr	r3, [pc, #152]	; (8007d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	461a      	mov	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	4a24      	ldr	r2, [pc, #144]	; (8007d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007c7c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	2201      	movs	r2, #1
 8007c86:	409a      	lsls	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007c8c:	e024      	b.n	8007cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	3b10      	subs	r3, #16
 8007c96:	4a1e      	ldr	r2, [pc, #120]	; (8007d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007c98:	fba2 2303 	umull	r2, r3, r2, r3
 8007c9c:	091b      	lsrs	r3, r3, #4
 8007c9e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4a1c      	ldr	r2, [pc, #112]	; (8007d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d806      	bhi.n	8007cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4a1b      	ldr	r2, [pc, #108]	; (8007d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d902      	bls.n	8007cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	3308      	adds	r3, #8
 8007cb4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	4b18      	ldr	r3, [pc, #96]	; (8007d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007cba:	4413      	add	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a16      	ldr	r2, [pc, #88]	; (8007d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007cc8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f003 031f 	and.w	r3, r3, #31
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	409a      	lsls	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007cd8:	bf00      	nop
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	58025408 	.word	0x58025408
 8007ce8:	5802541c 	.word	0x5802541c
 8007cec:	58025430 	.word	0x58025430
 8007cf0:	58025444 	.word	0x58025444
 8007cf4:	58025458 	.word	0x58025458
 8007cf8:	5802546c 	.word	0x5802546c
 8007cfc:	58025480 	.word	0x58025480
 8007d00:	58025494 	.word	0x58025494
 8007d04:	cccccccd 	.word	0xcccccccd
 8007d08:	16009600 	.word	0x16009600
 8007d0c:	58025880 	.word	0x58025880
 8007d10:	aaaaaaab 	.word	0xaaaaaaab
 8007d14:	400204b8 	.word	0x400204b8
 8007d18:	4002040f 	.word	0x4002040f
 8007d1c:	10008200 	.word	0x10008200
 8007d20:	40020880 	.word	0x40020880

08007d24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d04a      	beq.n	8007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b08      	cmp	r3, #8
 8007d3e:	d847      	bhi.n	8007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a25      	ldr	r2, [pc, #148]	; (8007ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d022      	beq.n	8007d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a24      	ldr	r2, [pc, #144]	; (8007de0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d01d      	beq.n	8007d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a22      	ldr	r2, [pc, #136]	; (8007de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d018      	beq.n	8007d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a21      	ldr	r2, [pc, #132]	; (8007de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d013      	beq.n	8007d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a1f      	ldr	r2, [pc, #124]	; (8007dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d00e      	beq.n	8007d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a1e      	ldr	r2, [pc, #120]	; (8007df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d009      	beq.n	8007d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a1c      	ldr	r2, [pc, #112]	; (8007df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d004      	beq.n	8007d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a1b      	ldr	r2, [pc, #108]	; (8007df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d101      	bne.n	8007d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007d90:	2301      	movs	r3, #1
 8007d92:	e000      	b.n	8007d96 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007d94:	2300      	movs	r3, #0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4b17      	ldr	r3, [pc, #92]	; (8007dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007d9e:	4413      	add	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	461a      	mov	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a15      	ldr	r2, [pc, #84]	; (8007e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007dac:	671a      	str	r2, [r3, #112]	; 0x70
 8007dae:	e009      	b.n	8007dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4b14      	ldr	r3, [pc, #80]	; (8007e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007db4:	4413      	add	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	461a      	mov	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a11      	ldr	r2, [pc, #68]	; (8007e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007dc2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	2201      	movs	r2, #1
 8007dca:	409a      	lsls	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007dd0:	bf00      	nop
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr
 8007ddc:	58025408 	.word	0x58025408
 8007de0:	5802541c 	.word	0x5802541c
 8007de4:	58025430 	.word	0x58025430
 8007de8:	58025444 	.word	0x58025444
 8007dec:	58025458 	.word	0x58025458
 8007df0:	5802546c 	.word	0x5802546c
 8007df4:	58025480 	.word	0x58025480
 8007df8:	58025494 	.word	0x58025494
 8007dfc:	1600963f 	.word	0x1600963f
 8007e00:	58025940 	.word	0x58025940
 8007e04:	1000823f 	.word	0x1000823f
 8007e08:	40020940 	.word	0x40020940

08007e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b089      	sub	sp, #36	; 0x24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007e1a:	4b89      	ldr	r3, [pc, #548]	; (8008040 <HAL_GPIO_Init+0x234>)
 8007e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e1e:	e194      	b.n	800814a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	2101      	movs	r1, #1
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	fa01 f303 	lsl.w	r3, r1, r3
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 8186 	beq.w	8008144 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f003 0303 	and.w	r3, r3, #3
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d005      	beq.n	8007e50 <HAL_GPIO_Init+0x44>
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f003 0303 	and.w	r3, r3, #3
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d130      	bne.n	8007eb2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	2203      	movs	r2, #3
 8007e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e60:	43db      	mvns	r3, r3
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	4013      	ands	r3, r2
 8007e66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	68da      	ldr	r2, [r3, #12]
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	fa02 f303 	lsl.w	r3, r2, r3
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e86:	2201      	movs	r2, #1
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8e:	43db      	mvns	r3, r3
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	4013      	ands	r3, r2
 8007e94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	091b      	lsrs	r3, r3, #4
 8007e9c:	f003 0201 	and.w	r2, r3, #1
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d017      	beq.n	8007eee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	2203      	movs	r2, #3
 8007eca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ece:	43db      	mvns	r3, r3
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	689a      	ldr	r2, [r3, #8]
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d123      	bne.n	8007f42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	08da      	lsrs	r2, r3, #3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	3208      	adds	r2, #8
 8007f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	f003 0307 	and.w	r3, r3, #7
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	220f      	movs	r2, #15
 8007f12:	fa02 f303 	lsl.w	r3, r2, r3
 8007f16:	43db      	mvns	r3, r3
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	691a      	ldr	r2, [r3, #16]
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	f003 0307 	and.w	r3, r3, #7
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2e:	69ba      	ldr	r2, [r7, #24]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	08da      	lsrs	r2, r3, #3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3208      	adds	r2, #8
 8007f3c:	69b9      	ldr	r1, [r7, #24]
 8007f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	005b      	lsls	r3, r3, #1
 8007f4c:	2203      	movs	r2, #3
 8007f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f52:	43db      	mvns	r3, r3
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	4013      	ands	r3, r2
 8007f58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f003 0203 	and.w	r2, r3, #3
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 80e0 	beq.w	8008144 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f84:	4b2f      	ldr	r3, [pc, #188]	; (8008044 <HAL_GPIO_Init+0x238>)
 8007f86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f8a:	4a2e      	ldr	r2, [pc, #184]	; (8008044 <HAL_GPIO_Init+0x238>)
 8007f8c:	f043 0302 	orr.w	r3, r3, #2
 8007f90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007f94:	4b2b      	ldr	r3, [pc, #172]	; (8008044 <HAL_GPIO_Init+0x238>)
 8007f96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007fa2:	4a29      	ldr	r2, [pc, #164]	; (8008048 <HAL_GPIO_Init+0x23c>)
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	089b      	lsrs	r3, r3, #2
 8007fa8:	3302      	adds	r3, #2
 8007faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	f003 0303 	and.w	r3, r3, #3
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	220f      	movs	r2, #15
 8007fba:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbe:	43db      	mvns	r3, r3
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a20      	ldr	r2, [pc, #128]	; (800804c <HAL_GPIO_Init+0x240>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d052      	beq.n	8008074 <HAL_GPIO_Init+0x268>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a1f      	ldr	r2, [pc, #124]	; (8008050 <HAL_GPIO_Init+0x244>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d031      	beq.n	800803a <HAL_GPIO_Init+0x22e>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a1e      	ldr	r2, [pc, #120]	; (8008054 <HAL_GPIO_Init+0x248>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d02b      	beq.n	8008036 <HAL_GPIO_Init+0x22a>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a1d      	ldr	r2, [pc, #116]	; (8008058 <HAL_GPIO_Init+0x24c>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d025      	beq.n	8008032 <HAL_GPIO_Init+0x226>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a1c      	ldr	r2, [pc, #112]	; (800805c <HAL_GPIO_Init+0x250>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d01f      	beq.n	800802e <HAL_GPIO_Init+0x222>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a1b      	ldr	r2, [pc, #108]	; (8008060 <HAL_GPIO_Init+0x254>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d019      	beq.n	800802a <HAL_GPIO_Init+0x21e>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a1a      	ldr	r2, [pc, #104]	; (8008064 <HAL_GPIO_Init+0x258>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d013      	beq.n	8008026 <HAL_GPIO_Init+0x21a>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a19      	ldr	r2, [pc, #100]	; (8008068 <HAL_GPIO_Init+0x25c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d00d      	beq.n	8008022 <HAL_GPIO_Init+0x216>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a18      	ldr	r2, [pc, #96]	; (800806c <HAL_GPIO_Init+0x260>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d007      	beq.n	800801e <HAL_GPIO_Init+0x212>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a17      	ldr	r2, [pc, #92]	; (8008070 <HAL_GPIO_Init+0x264>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d101      	bne.n	800801a <HAL_GPIO_Init+0x20e>
 8008016:	2309      	movs	r3, #9
 8008018:	e02d      	b.n	8008076 <HAL_GPIO_Init+0x26a>
 800801a:	230a      	movs	r3, #10
 800801c:	e02b      	b.n	8008076 <HAL_GPIO_Init+0x26a>
 800801e:	2308      	movs	r3, #8
 8008020:	e029      	b.n	8008076 <HAL_GPIO_Init+0x26a>
 8008022:	2307      	movs	r3, #7
 8008024:	e027      	b.n	8008076 <HAL_GPIO_Init+0x26a>
 8008026:	2306      	movs	r3, #6
 8008028:	e025      	b.n	8008076 <HAL_GPIO_Init+0x26a>
 800802a:	2305      	movs	r3, #5
 800802c:	e023      	b.n	8008076 <HAL_GPIO_Init+0x26a>
 800802e:	2304      	movs	r3, #4
 8008030:	e021      	b.n	8008076 <HAL_GPIO_Init+0x26a>
 8008032:	2303      	movs	r3, #3
 8008034:	e01f      	b.n	8008076 <HAL_GPIO_Init+0x26a>
 8008036:	2302      	movs	r3, #2
 8008038:	e01d      	b.n	8008076 <HAL_GPIO_Init+0x26a>
 800803a:	2301      	movs	r3, #1
 800803c:	e01b      	b.n	8008076 <HAL_GPIO_Init+0x26a>
 800803e:	bf00      	nop
 8008040:	58000080 	.word	0x58000080
 8008044:	58024400 	.word	0x58024400
 8008048:	58000400 	.word	0x58000400
 800804c:	58020000 	.word	0x58020000
 8008050:	58020400 	.word	0x58020400
 8008054:	58020800 	.word	0x58020800
 8008058:	58020c00 	.word	0x58020c00
 800805c:	58021000 	.word	0x58021000
 8008060:	58021400 	.word	0x58021400
 8008064:	58021800 	.word	0x58021800
 8008068:	58021c00 	.word	0x58021c00
 800806c:	58022000 	.word	0x58022000
 8008070:	58022400 	.word	0x58022400
 8008074:	2300      	movs	r3, #0
 8008076:	69fa      	ldr	r2, [r7, #28]
 8008078:	f002 0203 	and.w	r2, r2, #3
 800807c:	0092      	lsls	r2, r2, #2
 800807e:	4093      	lsls	r3, r2
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	4313      	orrs	r3, r2
 8008084:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008086:	4938      	ldr	r1, [pc, #224]	; (8008168 <HAL_GPIO_Init+0x35c>)
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	089b      	lsrs	r3, r3, #2
 800808c:	3302      	adds	r3, #2
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	43db      	mvns	r3, r3
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	4013      	ands	r3, r2
 80080a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80080ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80080c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	43db      	mvns	r3, r3
 80080ce:	69ba      	ldr	r2, [r7, #24]
 80080d0:	4013      	ands	r3, r2
 80080d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d003      	beq.n	80080e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80080e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	43db      	mvns	r3, r3
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	4013      	ands	r3, r2
 80080fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	4313      	orrs	r3, r2
 8008112:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	69ba      	ldr	r2, [r7, #24]
 8008118:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	43db      	mvns	r3, r3
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	4013      	ands	r3, r2
 8008128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	4313      	orrs	r3, r2
 800813c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	3301      	adds	r3, #1
 8008148:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	fa22 f303 	lsr.w	r3, r2, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	f47f ae63 	bne.w	8007e20 <HAL_GPIO_Init+0x14>
  }
}
 800815a:	bf00      	nop
 800815c:	bf00      	nop
 800815e:	3724      	adds	r7, #36	; 0x24
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	58000400 	.word	0x58000400

0800816c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	807b      	strh	r3, [r7, #2]
 8008178:	4613      	mov	r3, r2
 800817a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800817c:	787b      	ldrb	r3, [r7, #1]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008182:	887a      	ldrh	r2, [r7, #2]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008188:	e003      	b.n	8008192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800818a:	887b      	ldrh	r3, [r7, #2]
 800818c:	041a      	lsls	r2, r3, #16
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	619a      	str	r2, [r3, #24]
}
 8008192:	bf00      	nop
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
	...

080081a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d101      	bne.n	80081b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e08b      	b.n	80082ca <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d106      	bne.n	80081cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7fa f982 	bl	80024d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2224      	movs	r2, #36	; 0x24
 80081d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 0201 	bic.w	r2, r2, #1
 80081e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80081f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689a      	ldr	r2, [r3, #8]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008200:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d107      	bne.n	800821a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	689a      	ldr	r2, [r3, #8]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008216:	609a      	str	r2, [r3, #8]
 8008218:	e006      	b.n	8008228 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	689a      	ldr	r2, [r3, #8]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008226:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	2b02      	cmp	r3, #2
 800822e:	d108      	bne.n	8008242 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800823e:	605a      	str	r2, [r3, #4]
 8008240:	e007      	b.n	8008252 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008250:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6859      	ldr	r1, [r3, #4]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	4b1d      	ldr	r3, [pc, #116]	; (80082d4 <HAL_I2C_Init+0x134>)
 800825e:	430b      	orrs	r3, r1
 8008260:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008270:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691a      	ldr	r2, [r3, #16]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	430a      	orrs	r2, r1
 800828a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	69d9      	ldr	r1, [r3, #28]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a1a      	ldr	r2, [r3, #32]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f042 0201 	orr.w	r2, r2, #1
 80082aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	02008000 	.word	0x02008000

080082d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b088      	sub	sp, #32
 80082dc:	af02      	add	r7, sp, #8
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	607a      	str	r2, [r7, #4]
 80082e2:	461a      	mov	r2, r3
 80082e4:	460b      	mov	r3, r1
 80082e6:	817b      	strh	r3, [r7, #10]
 80082e8:	4613      	mov	r3, r2
 80082ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b20      	cmp	r3, #32
 80082f6:	f040 80fd 	bne.w	80084f4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008300:	2b01      	cmp	r3, #1
 8008302:	d101      	bne.n	8008308 <HAL_I2C_Master_Transmit+0x30>
 8008304:	2302      	movs	r3, #2
 8008306:	e0f6      	b.n	80084f6 <HAL_I2C_Master_Transmit+0x21e>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008310:	f7fa fe18 	bl	8002f44 <HAL_GetTick>
 8008314:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	9300      	str	r3, [sp, #0]
 800831a:	2319      	movs	r3, #25
 800831c:	2201      	movs	r2, #1
 800831e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 fa0a 	bl	800873c <I2C_WaitOnFlagUntilTimeout>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e0e1      	b.n	80084f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2221      	movs	r2, #33	; 0x21
 8008336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2210      	movs	r2, #16
 800833e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	893a      	ldrh	r2, [r7, #8]
 8008352:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800835e:	b29b      	uxth	r3, r3
 8008360:	2bff      	cmp	r3, #255	; 0xff
 8008362:	d906      	bls.n	8008372 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	22ff      	movs	r2, #255	; 0xff
 8008368:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800836a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800836e:	617b      	str	r3, [r7, #20]
 8008370:	e007      	b.n	8008382 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008376:	b29a      	uxth	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800837c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008380:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008386:	2b00      	cmp	r3, #0
 8008388:	d024      	beq.n	80083d4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	781a      	ldrb	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	1c5a      	adds	r2, r3, #1
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	3b01      	subs	r3, #1
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083b2:	3b01      	subs	r3, #1
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	3301      	adds	r3, #1
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	8979      	ldrh	r1, [r7, #10]
 80083c6:	4b4e      	ldr	r3, [pc, #312]	; (8008500 <HAL_I2C_Master_Transmit+0x228>)
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 fc05 	bl	8008bdc <I2C_TransferConfig>
 80083d2:	e066      	b.n	80084a2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	8979      	ldrh	r1, [r7, #10]
 80083dc:	4b48      	ldr	r3, [pc, #288]	; (8008500 <HAL_I2C_Master_Transmit+0x228>)
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 fbfa 	bl	8008bdc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80083e8:	e05b      	b.n	80084a2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	6a39      	ldr	r1, [r7, #32]
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 f9fd 	bl	80087ee <I2C_WaitOnTXISFlagUntilTimeout>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e07b      	b.n	80084f6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	781a      	ldrb	r2, [r3, #0]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008418:	b29b      	uxth	r3, r3
 800841a:	3b01      	subs	r3, #1
 800841c:	b29a      	uxth	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008426:	3b01      	subs	r3, #1
 8008428:	b29a      	uxth	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008432:	b29b      	uxth	r3, r3
 8008434:	2b00      	cmp	r3, #0
 8008436:	d034      	beq.n	80084a2 <HAL_I2C_Master_Transmit+0x1ca>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800843c:	2b00      	cmp	r3, #0
 800843e:	d130      	bne.n	80084a2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	2200      	movs	r2, #0
 8008448:	2180      	movs	r1, #128	; 0x80
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 f976 	bl	800873c <I2C_WaitOnFlagUntilTimeout>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e04d      	b.n	80084f6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800845e:	b29b      	uxth	r3, r3
 8008460:	2bff      	cmp	r3, #255	; 0xff
 8008462:	d90e      	bls.n	8008482 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	22ff      	movs	r2, #255	; 0xff
 8008468:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800846e:	b2da      	uxtb	r2, r3
 8008470:	8979      	ldrh	r1, [r7, #10]
 8008472:	2300      	movs	r3, #0
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800847a:	68f8      	ldr	r0, [r7, #12]
 800847c:	f000 fbae 	bl	8008bdc <I2C_TransferConfig>
 8008480:	e00f      	b.n	80084a2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008486:	b29a      	uxth	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008490:	b2da      	uxtb	r2, r3
 8008492:	8979      	ldrh	r1, [r7, #10]
 8008494:	2300      	movs	r3, #0
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f000 fb9d 	bl	8008bdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d19e      	bne.n	80083ea <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084ac:	693a      	ldr	r2, [r7, #16]
 80084ae:	6a39      	ldr	r1, [r7, #32]
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 f9e3 	bl	800887c <I2C_WaitOnSTOPFlagUntilTimeout>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e01a      	b.n	80084f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2220      	movs	r2, #32
 80084c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	6859      	ldr	r1, [r3, #4]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	4b0c      	ldr	r3, [pc, #48]	; (8008504 <HAL_I2C_Master_Transmit+0x22c>)
 80084d4:	400b      	ands	r3, r1
 80084d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2220      	movs	r2, #32
 80084dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	e000      	b.n	80084f6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80084f4:	2302      	movs	r3, #2
  }
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	80002000 	.word	0x80002000
 8008504:	fe00e800 	.word	0xfe00e800

08008508 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af02      	add	r7, sp, #8
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	607a      	str	r2, [r7, #4]
 8008512:	461a      	mov	r2, r3
 8008514:	460b      	mov	r3, r1
 8008516:	817b      	strh	r3, [r7, #10]
 8008518:	4613      	mov	r3, r2
 800851a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b20      	cmp	r3, #32
 8008526:	f040 80db 	bne.w	80086e0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008530:	2b01      	cmp	r3, #1
 8008532:	d101      	bne.n	8008538 <HAL_I2C_Master_Receive+0x30>
 8008534:	2302      	movs	r3, #2
 8008536:	e0d4      	b.n	80086e2 <HAL_I2C_Master_Receive+0x1da>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008540:	f7fa fd00 	bl	8002f44 <HAL_GetTick>
 8008544:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	2319      	movs	r3, #25
 800854c:	2201      	movs	r2, #1
 800854e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 f8f2 	bl	800873c <I2C_WaitOnFlagUntilTimeout>
 8008558:	4603      	mov	r3, r0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e0bf      	b.n	80086e2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2222      	movs	r2, #34	; 0x22
 8008566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2210      	movs	r2, #16
 800856e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	893a      	ldrh	r2, [r7, #8]
 8008582:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800858e:	b29b      	uxth	r3, r3
 8008590:	2bff      	cmp	r3, #255	; 0xff
 8008592:	d90e      	bls.n	80085b2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	22ff      	movs	r2, #255	; 0xff
 8008598:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800859e:	b2da      	uxtb	r2, r3
 80085a0:	8979      	ldrh	r1, [r7, #10]
 80085a2:	4b52      	ldr	r3, [pc, #328]	; (80086ec <HAL_I2C_Master_Receive+0x1e4>)
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085aa:	68f8      	ldr	r0, [r7, #12]
 80085ac:	f000 fb16 	bl	8008bdc <I2C_TransferConfig>
 80085b0:	e06d      	b.n	800868e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	8979      	ldrh	r1, [r7, #10]
 80085c4:	4b49      	ldr	r3, [pc, #292]	; (80086ec <HAL_I2C_Master_Receive+0x1e4>)
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 fb05 	bl	8008bdc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80085d2:	e05c      	b.n	800868e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	6a39      	ldr	r1, [r7, #32]
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 f993 	bl	8008904 <I2C_WaitOnRXNEFlagUntilTimeout>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e07c      	b.n	80086e2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f2:	b2d2      	uxtb	r2, r2
 80085f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008604:	3b01      	subs	r3, #1
 8008606:	b29a      	uxth	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008610:	b29b      	uxth	r3, r3
 8008612:	3b01      	subs	r3, #1
 8008614:	b29a      	uxth	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800861e:	b29b      	uxth	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d034      	beq.n	800868e <HAL_I2C_Master_Receive+0x186>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008628:	2b00      	cmp	r3, #0
 800862a:	d130      	bne.n	800868e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	6a3b      	ldr	r3, [r7, #32]
 8008632:	2200      	movs	r2, #0
 8008634:	2180      	movs	r1, #128	; 0x80
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 f880 	bl	800873c <I2C_WaitOnFlagUntilTimeout>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	e04d      	b.n	80086e2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800864a:	b29b      	uxth	r3, r3
 800864c:	2bff      	cmp	r3, #255	; 0xff
 800864e:	d90e      	bls.n	800866e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	22ff      	movs	r2, #255	; 0xff
 8008654:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800865a:	b2da      	uxtb	r2, r3
 800865c:	8979      	ldrh	r1, [r7, #10]
 800865e:	2300      	movs	r3, #0
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 fab8 	bl	8008bdc <I2C_TransferConfig>
 800866c:	e00f      	b.n	800868e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008672:	b29a      	uxth	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800867c:	b2da      	uxtb	r2, r3
 800867e:	8979      	ldrh	r1, [r7, #10]
 8008680:	2300      	movs	r3, #0
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 faa7 	bl	8008bdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008692:	b29b      	uxth	r3, r3
 8008694:	2b00      	cmp	r3, #0
 8008696:	d19d      	bne.n	80085d4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	6a39      	ldr	r1, [r7, #32]
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f000 f8ed 	bl	800887c <I2C_WaitOnSTOPFlagUntilTimeout>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e01a      	b.n	80086e2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2220      	movs	r2, #32
 80086b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6859      	ldr	r1, [r3, #4]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	4b0c      	ldr	r3, [pc, #48]	; (80086f0 <HAL_I2C_Master_Receive+0x1e8>)
 80086c0:	400b      	ands	r3, r1
 80086c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	e000      	b.n	80086e2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80086e0:	2302      	movs	r3, #2
  }
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	80002400 	.word	0x80002400
 80086f0:	fe00e800 	.word	0xfe00e800

080086f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	f003 0302 	and.w	r3, r3, #2
 8008706:	2b02      	cmp	r3, #2
 8008708:	d103      	bne.n	8008712 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2200      	movs	r2, #0
 8008710:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	699b      	ldr	r3, [r3, #24]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b01      	cmp	r3, #1
 800871e:	d007      	beq.n	8008730 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	699a      	ldr	r2, [r3, #24]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f042 0201 	orr.w	r2, r2, #1
 800872e:	619a      	str	r2, [r3, #24]
  }
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	603b      	str	r3, [r7, #0]
 8008748:	4613      	mov	r3, r2
 800874a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800874c:	e03b      	b.n	80087c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 f962 	bl	8008a1c <I2C_IsErrorOccurred>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e041      	b.n	80087e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008768:	d02d      	beq.n	80087c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800876a:	f7fa fbeb 	bl	8002f44 <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	429a      	cmp	r2, r3
 8008778:	d302      	bcc.n	8008780 <I2C_WaitOnFlagUntilTimeout+0x44>
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d122      	bne.n	80087c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	699a      	ldr	r2, [r3, #24]
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	4013      	ands	r3, r2
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	429a      	cmp	r2, r3
 800878e:	bf0c      	ite	eq
 8008790:	2301      	moveq	r3, #1
 8008792:	2300      	movne	r3, #0
 8008794:	b2db      	uxtb	r3, r3
 8008796:	461a      	mov	r2, r3
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	429a      	cmp	r2, r3
 800879c:	d113      	bne.n	80087c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a2:	f043 0220 	orr.w	r2, r3, #32
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2220      	movs	r2, #32
 80087ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e00f      	b.n	80087e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	699a      	ldr	r2, [r3, #24]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	4013      	ands	r3, r2
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	bf0c      	ite	eq
 80087d6:	2301      	moveq	r3, #1
 80087d8:	2300      	movne	r3, #0
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	461a      	mov	r2, r3
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d0b4      	beq.n	800874e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	60b9      	str	r1, [r7, #8]
 80087f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80087fa:	e033      	b.n	8008864 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 f90b 	bl	8008a1c <I2C_IsErrorOccurred>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e031      	b.n	8008874 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008816:	d025      	beq.n	8008864 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008818:	f7fa fb94 	bl	8002f44 <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	429a      	cmp	r2, r3
 8008826:	d302      	bcc.n	800882e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d11a      	bne.n	8008864 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	f003 0302 	and.w	r3, r3, #2
 8008838:	2b02      	cmp	r3, #2
 800883a:	d013      	beq.n	8008864 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008840:	f043 0220 	orr.w	r2, r3, #32
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2220      	movs	r2, #32
 800884c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e007      	b.n	8008874 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b02      	cmp	r3, #2
 8008870:	d1c4      	bne.n	80087fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008888:	e02f      	b.n	80088ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	68b9      	ldr	r1, [r7, #8]
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f000 f8c4 	bl	8008a1c <I2C_IsErrorOccurred>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e02d      	b.n	80088fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800889e:	f7fa fb51 	bl	8002f44 <HAL_GetTick>
 80088a2:	4602      	mov	r2, r0
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	68ba      	ldr	r2, [r7, #8]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d302      	bcc.n	80088b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d11a      	bne.n	80088ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b20      	cmp	r3, #32
 80088c0:	d013      	beq.n	80088ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c6:	f043 0220 	orr.w	r2, r3, #32
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2220      	movs	r2, #32
 80088d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e007      	b.n	80088fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	f003 0320 	and.w	r3, r3, #32
 80088f4:	2b20      	cmp	r3, #32
 80088f6:	d1c8      	bne.n	800888a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008910:	2300      	movs	r3, #0
 8008912:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008914:	e071      	b.n	80089fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	68b9      	ldr	r1, [r7, #8]
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 f87e 	bl	8008a1c <I2C_IsErrorOccurred>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	f003 0320 	and.w	r3, r3, #32
 8008934:	2b20      	cmp	r3, #32
 8008936:	d13b      	bne.n	80089b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d138      	bne.n	80089b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	f003 0304 	and.w	r3, r3, #4
 8008948:	2b04      	cmp	r3, #4
 800894a:	d105      	bne.n	8008958 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	f003 0310 	and.w	r3, r3, #16
 8008962:	2b10      	cmp	r3, #16
 8008964:	d121      	bne.n	80089aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2210      	movs	r2, #16
 800896c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2204      	movs	r2, #4
 8008972:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2220      	movs	r2, #32
 800897a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6859      	ldr	r1, [r3, #4]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	4b24      	ldr	r3, [pc, #144]	; (8008a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008988:	400b      	ands	r3, r1
 800898a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2220      	movs	r2, #32
 8008990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	75fb      	strb	r3, [r7, #23]
 80089a8:	e002      	b.n	80089b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80089b0:	f7fa fac8 	bl	8002f44 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d302      	bcc.n	80089c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d119      	bne.n	80089fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80089c6:	7dfb      	ldrb	r3, [r7, #23]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d116      	bne.n	80089fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	f003 0304 	and.w	r3, r3, #4
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d00f      	beq.n	80089fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089de:	f043 0220 	orr.w	r2, r3, #32
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2220      	movs	r2, #32
 80089ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	f003 0304 	and.w	r3, r3, #4
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	d002      	beq.n	8008a0e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d083      	beq.n	8008916 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	fe00e800 	.word	0xfe00e800

08008a1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08a      	sub	sp, #40	; 0x28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008a36:	2300      	movs	r3, #0
 8008a38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	f003 0310 	and.w	r3, r3, #16
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d068      	beq.n	8008b1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2210      	movs	r2, #16
 8008a4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a50:	e049      	b.n	8008ae6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a58:	d045      	beq.n	8008ae6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008a5a:	f7fa fa73 	bl	8002f44 <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d302      	bcc.n	8008a70 <I2C_IsErrorOccurred+0x54>
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d13a      	bne.n	8008ae6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a92:	d121      	bne.n	8008ad8 <I2C_IsErrorOccurred+0xbc>
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a9a:	d01d      	beq.n	8008ad8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008a9c:	7cfb      	ldrb	r3, [r7, #19]
 8008a9e:	2b20      	cmp	r3, #32
 8008aa0:	d01a      	beq.n	8008ad8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ab0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008ab2:	f7fa fa47 	bl	8002f44 <HAL_GetTick>
 8008ab6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ab8:	e00e      	b.n	8008ad8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008aba:	f7fa fa43 	bl	8002f44 <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	2b19      	cmp	r3, #25
 8008ac6:	d907      	bls.n	8008ad8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	f043 0320 	orr.w	r3, r3, #32
 8008ace:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008ad6:	e006      	b.n	8008ae6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	f003 0320 	and.w	r3, r3, #32
 8008ae2:	2b20      	cmp	r3, #32
 8008ae4:	d1e9      	bne.n	8008aba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	f003 0320 	and.w	r3, r3, #32
 8008af0:	2b20      	cmp	r3, #32
 8008af2:	d003      	beq.n	8008afc <I2C_IsErrorOccurred+0xe0>
 8008af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d0aa      	beq.n	8008a52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d103      	bne.n	8008b0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	f043 0304 	orr.w	r3, r3, #4
 8008b12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	f043 0301 	orr.w	r3, r3, #1
 8008b32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00b      	beq.n	8008b66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	f043 0308 	orr.w	r3, r3, #8
 8008b54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00b      	beq.n	8008b88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	f043 0302 	orr.w	r3, r3, #2
 8008b76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d01c      	beq.n	8008bca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f7ff fdaf 	bl	80086f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6859      	ldr	r1, [r3, #4]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	4b0d      	ldr	r3, [pc, #52]	; (8008bd8 <I2C_IsErrorOccurred+0x1bc>)
 8008ba2:	400b      	ands	r3, r1
 8008ba4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	431a      	orrs	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008bca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3728      	adds	r7, #40	; 0x28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	fe00e800 	.word	0xfe00e800

08008bdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	607b      	str	r3, [r7, #4]
 8008be6:	460b      	mov	r3, r1
 8008be8:	817b      	strh	r3, [r7, #10]
 8008bea:	4613      	mov	r3, r2
 8008bec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008bee:	897b      	ldrh	r3, [r7, #10]
 8008bf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008bf4:	7a7b      	ldrb	r3, [r7, #9]
 8008bf6:	041b      	lsls	r3, r3, #16
 8008bf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008bfc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	685a      	ldr	r2, [r3, #4]
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	0d5b      	lsrs	r3, r3, #21
 8008c16:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008c1a:	4b08      	ldr	r3, [pc, #32]	; (8008c3c <I2C_TransferConfig+0x60>)
 8008c1c:	430b      	orrs	r3, r1
 8008c1e:	43db      	mvns	r3, r3
 8008c20:	ea02 0103 	and.w	r1, r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008c2e:	bf00      	nop
 8008c30:	371c      	adds	r7, #28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	03ff63ff 	.word	0x03ff63ff

08008c40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b20      	cmp	r3, #32
 8008c54:	d138      	bne.n	8008cc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d101      	bne.n	8008c64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c60:	2302      	movs	r3, #2
 8008c62:	e032      	b.n	8008cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2224      	movs	r2, #36	; 0x24
 8008c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f022 0201 	bic.w	r2, r2, #1
 8008c82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6819      	ldr	r1, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f042 0201 	orr.w	r2, r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e000      	b.n	8008cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008cc8:	2302      	movs	r3, #2
  }
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b085      	sub	sp, #20
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b20      	cmp	r3, #32
 8008cea:	d139      	bne.n	8008d60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d101      	bne.n	8008cfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	e033      	b.n	8008d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2224      	movs	r2, #36	; 0x24
 8008d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f022 0201 	bic.w	r2, r2, #1
 8008d18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008d28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	021b      	lsls	r3, r3, #8
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f042 0201 	orr.w	r2, r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2220      	movs	r2, #32
 8008d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	e000      	b.n	8008d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d60:	2302      	movs	r3, #2
  }
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
	...

08008d70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d78:	4b19      	ldr	r3, [pc, #100]	; (8008de0 <HAL_PWREx_ConfigSupply+0x70>)
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f003 0304 	and.w	r3, r3, #4
 8008d80:	2b04      	cmp	r3, #4
 8008d82:	d00a      	beq.n	8008d9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d84:	4b16      	ldr	r3, [pc, #88]	; (8008de0 <HAL_PWREx_ConfigSupply+0x70>)
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d001      	beq.n	8008d96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e01f      	b.n	8008dd6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	e01d      	b.n	8008dd6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d9a:	4b11      	ldr	r3, [pc, #68]	; (8008de0 <HAL_PWREx_ConfigSupply+0x70>)
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	f023 0207 	bic.w	r2, r3, #7
 8008da2:	490f      	ldr	r1, [pc, #60]	; (8008de0 <HAL_PWREx_ConfigSupply+0x70>)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008daa:	f7fa f8cb 	bl	8002f44 <HAL_GetTick>
 8008dae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008db0:	e009      	b.n	8008dc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008db2:	f7fa f8c7 	bl	8002f44 <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dc0:	d901      	bls.n	8008dc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e007      	b.n	8008dd6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008dc6:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <HAL_PWREx_ConfigSupply+0x70>)
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd2:	d1ee      	bne.n	8008db2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	58024800 	.word	0x58024800

08008de4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08c      	sub	sp, #48	; 0x30
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d102      	bne.n	8008df8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	f000 bc48 	b.w	8009688 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0301 	and.w	r3, r3, #1
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 8088 	beq.w	8008f16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e06:	4b99      	ldr	r3, [pc, #612]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e10:	4b96      	ldr	r3, [pc, #600]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e14:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e18:	2b10      	cmp	r3, #16
 8008e1a:	d007      	beq.n	8008e2c <HAL_RCC_OscConfig+0x48>
 8008e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1e:	2b18      	cmp	r3, #24
 8008e20:	d111      	bne.n	8008e46 <HAL_RCC_OscConfig+0x62>
 8008e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e24:	f003 0303 	and.w	r3, r3, #3
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d10c      	bne.n	8008e46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e2c:	4b8f      	ldr	r3, [pc, #572]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d06d      	beq.n	8008f14 <HAL_RCC_OscConfig+0x130>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d169      	bne.n	8008f14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008e40:	2301      	movs	r3, #1
 8008e42:	f000 bc21 	b.w	8009688 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e4e:	d106      	bne.n	8008e5e <HAL_RCC_OscConfig+0x7a>
 8008e50:	4b86      	ldr	r3, [pc, #536]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a85      	ldr	r2, [pc, #532]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e5a:	6013      	str	r3, [r2, #0]
 8008e5c:	e02e      	b.n	8008ebc <HAL_RCC_OscConfig+0xd8>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10c      	bne.n	8008e80 <HAL_RCC_OscConfig+0x9c>
 8008e66:	4b81      	ldr	r3, [pc, #516]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a80      	ldr	r2, [pc, #512]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	4b7e      	ldr	r3, [pc, #504]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a7d      	ldr	r2, [pc, #500]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008e78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e7c:	6013      	str	r3, [r2, #0]
 8008e7e:	e01d      	b.n	8008ebc <HAL_RCC_OscConfig+0xd8>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e88:	d10c      	bne.n	8008ea4 <HAL_RCC_OscConfig+0xc0>
 8008e8a:	4b78      	ldr	r3, [pc, #480]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a77      	ldr	r2, [pc, #476]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	4b75      	ldr	r3, [pc, #468]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a74      	ldr	r2, [pc, #464]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	e00b      	b.n	8008ebc <HAL_RCC_OscConfig+0xd8>
 8008ea4:	4b71      	ldr	r3, [pc, #452]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a70      	ldr	r2, [pc, #448]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	4b6e      	ldr	r3, [pc, #440]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a6d      	ldr	r2, [pc, #436]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d013      	beq.n	8008eec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec4:	f7fa f83e 	bl	8002f44 <HAL_GetTick>
 8008ec8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008eca:	e008      	b.n	8008ede <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ecc:	f7fa f83a 	bl	8002f44 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b64      	cmp	r3, #100	; 0x64
 8008ed8:	d901      	bls.n	8008ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e3d4      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ede:	4b63      	ldr	r3, [pc, #396]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d0f0      	beq.n	8008ecc <HAL_RCC_OscConfig+0xe8>
 8008eea:	e014      	b.n	8008f16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eec:	f7fa f82a 	bl	8002f44 <HAL_GetTick>
 8008ef0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ef2:	e008      	b.n	8008f06 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ef4:	f7fa f826 	bl	8002f44 <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	2b64      	cmp	r3, #100	; 0x64
 8008f00:	d901      	bls.n	8008f06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e3c0      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f06:	4b59      	ldr	r3, [pc, #356]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1f0      	bne.n	8008ef4 <HAL_RCC_OscConfig+0x110>
 8008f12:	e000      	b.n	8008f16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0302 	and.w	r3, r3, #2
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 80ca 	beq.w	80090b8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f24:	4b51      	ldr	r3, [pc, #324]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f2e:	4b4f      	ldr	r3, [pc, #316]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f32:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d007      	beq.n	8008f4a <HAL_RCC_OscConfig+0x166>
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	2b18      	cmp	r3, #24
 8008f3e:	d156      	bne.n	8008fee <HAL_RCC_OscConfig+0x20a>
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	f003 0303 	and.w	r3, r3, #3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d151      	bne.n	8008fee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f4a:	4b48      	ldr	r3, [pc, #288]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0304 	and.w	r3, r3, #4
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d005      	beq.n	8008f62 <HAL_RCC_OscConfig+0x17e>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e392      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f62:	4b42      	ldr	r3, [pc, #264]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f023 0219 	bic.w	r2, r3, #25
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	493f      	ldr	r1, [pc, #252]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008f70:	4313      	orrs	r3, r2
 8008f72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f74:	f7f9 ffe6 	bl	8002f44 <HAL_GetTick>
 8008f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f7a:	e008      	b.n	8008f8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f7c:	f7f9 ffe2 	bl	8002f44 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d901      	bls.n	8008f8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e37c      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f8e:	4b37      	ldr	r3, [pc, #220]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0304 	and.w	r3, r3, #4
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d0f0      	beq.n	8008f7c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f9a:	f7f9 ffdf 	bl	8002f5c <HAL_GetREVID>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	f241 0203 	movw	r2, #4099	; 0x1003
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d817      	bhi.n	8008fd8 <HAL_RCC_OscConfig+0x1f4>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	2b40      	cmp	r3, #64	; 0x40
 8008fae:	d108      	bne.n	8008fc2 <HAL_RCC_OscConfig+0x1de>
 8008fb0:	4b2e      	ldr	r3, [pc, #184]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008fb8:	4a2c      	ldr	r2, [pc, #176]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fbe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fc0:	e07a      	b.n	80090b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fc2:	4b2a      	ldr	r3, [pc, #168]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	031b      	lsls	r3, r3, #12
 8008fd0:	4926      	ldr	r1, [pc, #152]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fd6:	e06f      	b.n	80090b8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fd8:	4b24      	ldr	r3, [pc, #144]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	061b      	lsls	r3, r3, #24
 8008fe6:	4921      	ldr	r1, [pc, #132]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fec:	e064      	b.n	80090b8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d047      	beq.n	8009086 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ff6:	4b1d      	ldr	r3, [pc, #116]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f023 0219 	bic.w	r2, r3, #25
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	491a      	ldr	r1, [pc, #104]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8009004:	4313      	orrs	r3, r2
 8009006:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009008:	f7f9 ff9c 	bl	8002f44 <HAL_GetTick>
 800900c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800900e:	e008      	b.n	8009022 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009010:	f7f9 ff98 	bl	8002f44 <HAL_GetTick>
 8009014:	4602      	mov	r2, r0
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	1ad3      	subs	r3, r2, r3
 800901a:	2b02      	cmp	r3, #2
 800901c:	d901      	bls.n	8009022 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	e332      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009022:	4b12      	ldr	r3, [pc, #72]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0304 	and.w	r3, r3, #4
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0f0      	beq.n	8009010 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800902e:	f7f9 ff95 	bl	8002f5c <HAL_GetREVID>
 8009032:	4603      	mov	r3, r0
 8009034:	f241 0203 	movw	r2, #4099	; 0x1003
 8009038:	4293      	cmp	r3, r2
 800903a:	d819      	bhi.n	8009070 <HAL_RCC_OscConfig+0x28c>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	2b40      	cmp	r3, #64	; 0x40
 8009042:	d108      	bne.n	8009056 <HAL_RCC_OscConfig+0x272>
 8009044:	4b09      	ldr	r3, [pc, #36]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800904c:	4a07      	ldr	r2, [pc, #28]	; (800906c <HAL_RCC_OscConfig+0x288>)
 800904e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009052:	6053      	str	r3, [r2, #4]
 8009054:	e030      	b.n	80090b8 <HAL_RCC_OscConfig+0x2d4>
 8009056:	4b05      	ldr	r3, [pc, #20]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	031b      	lsls	r3, r3, #12
 8009064:	4901      	ldr	r1, [pc, #4]	; (800906c <HAL_RCC_OscConfig+0x288>)
 8009066:	4313      	orrs	r3, r2
 8009068:	604b      	str	r3, [r1, #4]
 800906a:	e025      	b.n	80090b8 <HAL_RCC_OscConfig+0x2d4>
 800906c:	58024400 	.word	0x58024400
 8009070:	4b9a      	ldr	r3, [pc, #616]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	061b      	lsls	r3, r3, #24
 800907e:	4997      	ldr	r1, [pc, #604]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 8009080:	4313      	orrs	r3, r2
 8009082:	604b      	str	r3, [r1, #4]
 8009084:	e018      	b.n	80090b8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009086:	4b95      	ldr	r3, [pc, #596]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a94      	ldr	r2, [pc, #592]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 800908c:	f023 0301 	bic.w	r3, r3, #1
 8009090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009092:	f7f9 ff57 	bl	8002f44 <HAL_GetTick>
 8009096:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009098:	e008      	b.n	80090ac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800909a:	f7f9 ff53 	bl	8002f44 <HAL_GetTick>
 800909e:	4602      	mov	r2, r0
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	d901      	bls.n	80090ac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80090a8:	2303      	movs	r3, #3
 80090aa:	e2ed      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80090ac:	4b8b      	ldr	r3, [pc, #556]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0304 	and.w	r3, r3, #4
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1f0      	bne.n	800909a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0310 	and.w	r3, r3, #16
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 80a9 	beq.w	8009218 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090c6:	4b85      	ldr	r3, [pc, #532]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090ce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80090d0:	4b82      	ldr	r3, [pc, #520]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 80090d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b08      	cmp	r3, #8
 80090da:	d007      	beq.n	80090ec <HAL_RCC_OscConfig+0x308>
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	2b18      	cmp	r3, #24
 80090e0:	d13a      	bne.n	8009158 <HAL_RCC_OscConfig+0x374>
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f003 0303 	and.w	r3, r3, #3
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d135      	bne.n	8009158 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090ec:	4b7b      	ldr	r3, [pc, #492]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d005      	beq.n	8009104 <HAL_RCC_OscConfig+0x320>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	69db      	ldr	r3, [r3, #28]
 80090fc:	2b80      	cmp	r3, #128	; 0x80
 80090fe:	d001      	beq.n	8009104 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e2c1      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009104:	f7f9 ff2a 	bl	8002f5c <HAL_GetREVID>
 8009108:	4603      	mov	r3, r0
 800910a:	f241 0203 	movw	r2, #4099	; 0x1003
 800910e:	4293      	cmp	r3, r2
 8009110:	d817      	bhi.n	8009142 <HAL_RCC_OscConfig+0x35e>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	2b20      	cmp	r3, #32
 8009118:	d108      	bne.n	800912c <HAL_RCC_OscConfig+0x348>
 800911a:	4b70      	ldr	r3, [pc, #448]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009122:	4a6e      	ldr	r2, [pc, #440]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 8009124:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009128:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800912a:	e075      	b.n	8009218 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800912c:	4b6b      	ldr	r3, [pc, #428]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a1b      	ldr	r3, [r3, #32]
 8009138:	069b      	lsls	r3, r3, #26
 800913a:	4968      	ldr	r1, [pc, #416]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 800913c:	4313      	orrs	r3, r2
 800913e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009140:	e06a      	b.n	8009218 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009142:	4b66      	ldr	r3, [pc, #408]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	061b      	lsls	r3, r3, #24
 8009150:	4962      	ldr	r1, [pc, #392]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 8009152:	4313      	orrs	r3, r2
 8009154:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009156:	e05f      	b.n	8009218 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	69db      	ldr	r3, [r3, #28]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d042      	beq.n	80091e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009160:	4b5e      	ldr	r3, [pc, #376]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a5d      	ldr	r2, [pc, #372]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 8009166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800916a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800916c:	f7f9 feea 	bl	8002f44 <HAL_GetTick>
 8009170:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009172:	e008      	b.n	8009186 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009174:	f7f9 fee6 	bl	8002f44 <HAL_GetTick>
 8009178:	4602      	mov	r2, r0
 800917a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	2b02      	cmp	r3, #2
 8009180:	d901      	bls.n	8009186 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e280      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009186:	4b55      	ldr	r3, [pc, #340]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0f0      	beq.n	8009174 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009192:	f7f9 fee3 	bl	8002f5c <HAL_GetREVID>
 8009196:	4603      	mov	r3, r0
 8009198:	f241 0203 	movw	r2, #4099	; 0x1003
 800919c:	4293      	cmp	r3, r2
 800919e:	d817      	bhi.n	80091d0 <HAL_RCC_OscConfig+0x3ec>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a1b      	ldr	r3, [r3, #32]
 80091a4:	2b20      	cmp	r3, #32
 80091a6:	d108      	bne.n	80091ba <HAL_RCC_OscConfig+0x3d6>
 80091a8:	4b4c      	ldr	r3, [pc, #304]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80091b0:	4a4a      	ldr	r2, [pc, #296]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 80091b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091b6:	6053      	str	r3, [r2, #4]
 80091b8:	e02e      	b.n	8009218 <HAL_RCC_OscConfig+0x434>
 80091ba:	4b48      	ldr	r3, [pc, #288]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	069b      	lsls	r3, r3, #26
 80091c8:	4944      	ldr	r1, [pc, #272]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 80091ca:	4313      	orrs	r3, r2
 80091cc:	604b      	str	r3, [r1, #4]
 80091ce:	e023      	b.n	8009218 <HAL_RCC_OscConfig+0x434>
 80091d0:	4b42      	ldr	r3, [pc, #264]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a1b      	ldr	r3, [r3, #32]
 80091dc:	061b      	lsls	r3, r3, #24
 80091de:	493f      	ldr	r1, [pc, #252]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 80091e0:	4313      	orrs	r3, r2
 80091e2:	60cb      	str	r3, [r1, #12]
 80091e4:	e018      	b.n	8009218 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80091e6:	4b3d      	ldr	r3, [pc, #244]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a3c      	ldr	r2, [pc, #240]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 80091ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091f2:	f7f9 fea7 	bl	8002f44 <HAL_GetTick>
 80091f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091f8:	e008      	b.n	800920c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80091fa:	f7f9 fea3 	bl	8002f44 <HAL_GetTick>
 80091fe:	4602      	mov	r2, r0
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	2b02      	cmp	r3, #2
 8009206:	d901      	bls.n	800920c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009208:	2303      	movs	r3, #3
 800920a:	e23d      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800920c:	4b33      	ldr	r3, [pc, #204]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1f0      	bne.n	80091fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 0308 	and.w	r3, r3, #8
 8009220:	2b00      	cmp	r3, #0
 8009222:	d036      	beq.n	8009292 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d019      	beq.n	8009260 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800922c:	4b2b      	ldr	r3, [pc, #172]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 800922e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009230:	4a2a      	ldr	r2, [pc, #168]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 8009232:	f043 0301 	orr.w	r3, r3, #1
 8009236:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009238:	f7f9 fe84 	bl	8002f44 <HAL_GetTick>
 800923c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800923e:	e008      	b.n	8009252 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009240:	f7f9 fe80 	bl	8002f44 <HAL_GetTick>
 8009244:	4602      	mov	r2, r0
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009248:	1ad3      	subs	r3, r2, r3
 800924a:	2b02      	cmp	r3, #2
 800924c:	d901      	bls.n	8009252 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	e21a      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009252:	4b22      	ldr	r3, [pc, #136]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 8009254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009256:	f003 0302 	and.w	r3, r3, #2
 800925a:	2b00      	cmp	r3, #0
 800925c:	d0f0      	beq.n	8009240 <HAL_RCC_OscConfig+0x45c>
 800925e:	e018      	b.n	8009292 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009260:	4b1e      	ldr	r3, [pc, #120]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 8009262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009264:	4a1d      	ldr	r2, [pc, #116]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 8009266:	f023 0301 	bic.w	r3, r3, #1
 800926a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800926c:	f7f9 fe6a 	bl	8002f44 <HAL_GetTick>
 8009270:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009272:	e008      	b.n	8009286 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009274:	f7f9 fe66 	bl	8002f44 <HAL_GetTick>
 8009278:	4602      	mov	r2, r0
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	2b02      	cmp	r3, #2
 8009280:	d901      	bls.n	8009286 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009282:	2303      	movs	r3, #3
 8009284:	e200      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009286:	4b15      	ldr	r3, [pc, #84]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 8009288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800928a:	f003 0302 	and.w	r3, r3, #2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1f0      	bne.n	8009274 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0320 	and.w	r3, r3, #32
 800929a:	2b00      	cmp	r3, #0
 800929c:	d039      	beq.n	8009312 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d01c      	beq.n	80092e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80092a6:	4b0d      	ldr	r3, [pc, #52]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a0c      	ldr	r2, [pc, #48]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 80092ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80092b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092b2:	f7f9 fe47 	bl	8002f44 <HAL_GetTick>
 80092b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092b8:	e008      	b.n	80092cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092ba:	f7f9 fe43 	bl	8002f44 <HAL_GetTick>
 80092be:	4602      	mov	r2, r0
 80092c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d901      	bls.n	80092cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e1dd      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092cc:	4b03      	ldr	r3, [pc, #12]	; (80092dc <HAL_RCC_OscConfig+0x4f8>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d0f0      	beq.n	80092ba <HAL_RCC_OscConfig+0x4d6>
 80092d8:	e01b      	b.n	8009312 <HAL_RCC_OscConfig+0x52e>
 80092da:	bf00      	nop
 80092dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092e0:	4b9b      	ldr	r3, [pc, #620]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a9a      	ldr	r2, [pc, #616]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80092e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092ec:	f7f9 fe2a 	bl	8002f44 <HAL_GetTick>
 80092f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092f2:	e008      	b.n	8009306 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092f4:	f7f9 fe26 	bl	8002f44 <HAL_GetTick>
 80092f8:	4602      	mov	r2, r0
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d901      	bls.n	8009306 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e1c0      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009306:	4b92      	ldr	r3, [pc, #584]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1f0      	bne.n	80092f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f003 0304 	and.w	r3, r3, #4
 800931a:	2b00      	cmp	r3, #0
 800931c:	f000 8081 	beq.w	8009422 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009320:	4b8c      	ldr	r3, [pc, #560]	; (8009554 <HAL_RCC_OscConfig+0x770>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a8b      	ldr	r2, [pc, #556]	; (8009554 <HAL_RCC_OscConfig+0x770>)
 8009326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800932a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800932c:	f7f9 fe0a 	bl	8002f44 <HAL_GetTick>
 8009330:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009332:	e008      	b.n	8009346 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009334:	f7f9 fe06 	bl	8002f44 <HAL_GetTick>
 8009338:	4602      	mov	r2, r0
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	2b64      	cmp	r3, #100	; 0x64
 8009340:	d901      	bls.n	8009346 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e1a0      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009346:	4b83      	ldr	r3, [pc, #524]	; (8009554 <HAL_RCC_OscConfig+0x770>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0f0      	beq.n	8009334 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d106      	bne.n	8009368 <HAL_RCC_OscConfig+0x584>
 800935a:	4b7d      	ldr	r3, [pc, #500]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 800935c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935e:	4a7c      	ldr	r2, [pc, #496]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009360:	f043 0301 	orr.w	r3, r3, #1
 8009364:	6713      	str	r3, [r2, #112]	; 0x70
 8009366:	e02d      	b.n	80093c4 <HAL_RCC_OscConfig+0x5e0>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10c      	bne.n	800938a <HAL_RCC_OscConfig+0x5a6>
 8009370:	4b77      	ldr	r3, [pc, #476]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009374:	4a76      	ldr	r2, [pc, #472]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009376:	f023 0301 	bic.w	r3, r3, #1
 800937a:	6713      	str	r3, [r2, #112]	; 0x70
 800937c:	4b74      	ldr	r3, [pc, #464]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 800937e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009380:	4a73      	ldr	r2, [pc, #460]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009382:	f023 0304 	bic.w	r3, r3, #4
 8009386:	6713      	str	r3, [r2, #112]	; 0x70
 8009388:	e01c      	b.n	80093c4 <HAL_RCC_OscConfig+0x5e0>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	2b05      	cmp	r3, #5
 8009390:	d10c      	bne.n	80093ac <HAL_RCC_OscConfig+0x5c8>
 8009392:	4b6f      	ldr	r3, [pc, #444]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009396:	4a6e      	ldr	r2, [pc, #440]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009398:	f043 0304 	orr.w	r3, r3, #4
 800939c:	6713      	str	r3, [r2, #112]	; 0x70
 800939e:	4b6c      	ldr	r3, [pc, #432]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80093a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a2:	4a6b      	ldr	r2, [pc, #428]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80093a4:	f043 0301 	orr.w	r3, r3, #1
 80093a8:	6713      	str	r3, [r2, #112]	; 0x70
 80093aa:	e00b      	b.n	80093c4 <HAL_RCC_OscConfig+0x5e0>
 80093ac:	4b68      	ldr	r3, [pc, #416]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80093ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b0:	4a67      	ldr	r2, [pc, #412]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80093b2:	f023 0301 	bic.w	r3, r3, #1
 80093b6:	6713      	str	r3, [r2, #112]	; 0x70
 80093b8:	4b65      	ldr	r3, [pc, #404]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80093ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093bc:	4a64      	ldr	r2, [pc, #400]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80093be:	f023 0304 	bic.w	r3, r3, #4
 80093c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d015      	beq.n	80093f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093cc:	f7f9 fdba 	bl	8002f44 <HAL_GetTick>
 80093d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093d2:	e00a      	b.n	80093ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093d4:	f7f9 fdb6 	bl	8002f44 <HAL_GetTick>
 80093d8:	4602      	mov	r2, r0
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	f241 3288 	movw	r2, #5000	; 0x1388
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d901      	bls.n	80093ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80093e6:	2303      	movs	r3, #3
 80093e8:	e14e      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093ea:	4b59      	ldr	r3, [pc, #356]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80093ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ee:	f003 0302 	and.w	r3, r3, #2
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0ee      	beq.n	80093d4 <HAL_RCC_OscConfig+0x5f0>
 80093f6:	e014      	b.n	8009422 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093f8:	f7f9 fda4 	bl	8002f44 <HAL_GetTick>
 80093fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093fe:	e00a      	b.n	8009416 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009400:	f7f9 fda0 	bl	8002f44 <HAL_GetTick>
 8009404:	4602      	mov	r2, r0
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	f241 3288 	movw	r2, #5000	; 0x1388
 800940e:	4293      	cmp	r3, r2
 8009410:	d901      	bls.n	8009416 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	e138      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009416:	4b4e      	ldr	r3, [pc, #312]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800941a:	f003 0302 	and.w	r3, r3, #2
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1ee      	bne.n	8009400 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009426:	2b00      	cmp	r3, #0
 8009428:	f000 812d 	beq.w	8009686 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800942c:	4b48      	ldr	r3, [pc, #288]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009434:	2b18      	cmp	r3, #24
 8009436:	f000 80bd 	beq.w	80095b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943e:	2b02      	cmp	r3, #2
 8009440:	f040 809e 	bne.w	8009580 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009444:	4b42      	ldr	r3, [pc, #264]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a41      	ldr	r2, [pc, #260]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 800944a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800944e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009450:	f7f9 fd78 	bl	8002f44 <HAL_GetTick>
 8009454:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009456:	e008      	b.n	800946a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009458:	f7f9 fd74 	bl	8002f44 <HAL_GetTick>
 800945c:	4602      	mov	r2, r0
 800945e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	2b02      	cmp	r3, #2
 8009464:	d901      	bls.n	800946a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e10e      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800946a:	4b39      	ldr	r3, [pc, #228]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1f0      	bne.n	8009458 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009476:	4b36      	ldr	r3, [pc, #216]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009478:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800947a:	4b37      	ldr	r3, [pc, #220]	; (8009558 <HAL_RCC_OscConfig+0x774>)
 800947c:	4013      	ands	r3, r2
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009486:	0112      	lsls	r2, r2, #4
 8009488:	430a      	orrs	r2, r1
 800948a:	4931      	ldr	r1, [pc, #196]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 800948c:	4313      	orrs	r3, r2
 800948e:	628b      	str	r3, [r1, #40]	; 0x28
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009494:	3b01      	subs	r3, #1
 8009496:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949e:	3b01      	subs	r3, #1
 80094a0:	025b      	lsls	r3, r3, #9
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094aa:	3b01      	subs	r3, #1
 80094ac:	041b      	lsls	r3, r3, #16
 80094ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80094b2:	431a      	orrs	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094b8:	3b01      	subs	r3, #1
 80094ba:	061b      	lsls	r3, r3, #24
 80094bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094c0:	4923      	ldr	r1, [pc, #140]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80094c2:	4313      	orrs	r3, r2
 80094c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80094c6:	4b22      	ldr	r3, [pc, #136]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80094c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ca:	4a21      	ldr	r2, [pc, #132]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80094cc:	f023 0301 	bic.w	r3, r3, #1
 80094d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80094d2:	4b1f      	ldr	r3, [pc, #124]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80094d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094d6:	4b21      	ldr	r3, [pc, #132]	; (800955c <HAL_RCC_OscConfig+0x778>)
 80094d8:	4013      	ands	r3, r2
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80094de:	00d2      	lsls	r2, r2, #3
 80094e0:	491b      	ldr	r1, [pc, #108]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80094e6:	4b1a      	ldr	r3, [pc, #104]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80094e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ea:	f023 020c 	bic.w	r2, r3, #12
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f2:	4917      	ldr	r1, [pc, #92]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80094f4:	4313      	orrs	r3, r2
 80094f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80094f8:	4b15      	ldr	r3, [pc, #84]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 80094fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fc:	f023 0202 	bic.w	r2, r3, #2
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009504:	4912      	ldr	r1, [pc, #72]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009506:	4313      	orrs	r3, r2
 8009508:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800950a:	4b11      	ldr	r3, [pc, #68]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 800950c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950e:	4a10      	ldr	r2, [pc, #64]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009514:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009516:	4b0e      	ldr	r3, [pc, #56]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	4a0d      	ldr	r2, [pc, #52]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 800951c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009520:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009522:	4b0b      	ldr	r3, [pc, #44]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009526:	4a0a      	ldr	r2, [pc, #40]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800952c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800952e:	4b08      	ldr	r3, [pc, #32]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009532:	4a07      	ldr	r2, [pc, #28]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009534:	f043 0301 	orr.w	r3, r3, #1
 8009538:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800953a:	4b05      	ldr	r3, [pc, #20]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a04      	ldr	r2, [pc, #16]	; (8009550 <HAL_RCC_OscConfig+0x76c>)
 8009540:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009546:	f7f9 fcfd 	bl	8002f44 <HAL_GetTick>
 800954a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800954c:	e011      	b.n	8009572 <HAL_RCC_OscConfig+0x78e>
 800954e:	bf00      	nop
 8009550:	58024400 	.word	0x58024400
 8009554:	58024800 	.word	0x58024800
 8009558:	fffffc0c 	.word	0xfffffc0c
 800955c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009560:	f7f9 fcf0 	bl	8002f44 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	2b02      	cmp	r3, #2
 800956c:	d901      	bls.n	8009572 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e08a      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009572:	4b47      	ldr	r3, [pc, #284]	; (8009690 <HAL_RCC_OscConfig+0x8ac>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d0f0      	beq.n	8009560 <HAL_RCC_OscConfig+0x77c>
 800957e:	e082      	b.n	8009686 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009580:	4b43      	ldr	r3, [pc, #268]	; (8009690 <HAL_RCC_OscConfig+0x8ac>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a42      	ldr	r2, [pc, #264]	; (8009690 <HAL_RCC_OscConfig+0x8ac>)
 8009586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800958a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800958c:	f7f9 fcda 	bl	8002f44 <HAL_GetTick>
 8009590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009592:	e008      	b.n	80095a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009594:	f7f9 fcd6 	bl	8002f44 <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d901      	bls.n	80095a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e070      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80095a6:	4b3a      	ldr	r3, [pc, #232]	; (8009690 <HAL_RCC_OscConfig+0x8ac>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1f0      	bne.n	8009594 <HAL_RCC_OscConfig+0x7b0>
 80095b2:	e068      	b.n	8009686 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80095b4:	4b36      	ldr	r3, [pc, #216]	; (8009690 <HAL_RCC_OscConfig+0x8ac>)
 80095b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80095ba:	4b35      	ldr	r3, [pc, #212]	; (8009690 <HAL_RCC_OscConfig+0x8ac>)
 80095bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d031      	beq.n	800962c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	f003 0203 	and.w	r2, r3, #3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d12a      	bne.n	800962c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	091b      	lsrs	r3, r3, #4
 80095da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d122      	bne.n	800962c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d11a      	bne.n	800962c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	0a5b      	lsrs	r3, r3, #9
 80095fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009602:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009604:	429a      	cmp	r2, r3
 8009606:	d111      	bne.n	800962c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	0c1b      	lsrs	r3, r3, #16
 800960c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009614:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009616:	429a      	cmp	r2, r3
 8009618:	d108      	bne.n	800962c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	0e1b      	lsrs	r3, r3, #24
 800961e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009626:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009628:	429a      	cmp	r2, r3
 800962a:	d001      	beq.n	8009630 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e02b      	b.n	8009688 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009630:	4b17      	ldr	r3, [pc, #92]	; (8009690 <HAL_RCC_OscConfig+0x8ac>)
 8009632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009634:	08db      	lsrs	r3, r3, #3
 8009636:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800963a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	429a      	cmp	r2, r3
 8009644:	d01f      	beq.n	8009686 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009646:	4b12      	ldr	r3, [pc, #72]	; (8009690 <HAL_RCC_OscConfig+0x8ac>)
 8009648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964a:	4a11      	ldr	r2, [pc, #68]	; (8009690 <HAL_RCC_OscConfig+0x8ac>)
 800964c:	f023 0301 	bic.w	r3, r3, #1
 8009650:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009652:	f7f9 fc77 	bl	8002f44 <HAL_GetTick>
 8009656:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009658:	bf00      	nop
 800965a:	f7f9 fc73 	bl	8002f44 <HAL_GetTick>
 800965e:	4602      	mov	r2, r0
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	4293      	cmp	r3, r2
 8009664:	d0f9      	beq.n	800965a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009666:	4b0a      	ldr	r3, [pc, #40]	; (8009690 <HAL_RCC_OscConfig+0x8ac>)
 8009668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800966a:	4b0a      	ldr	r3, [pc, #40]	; (8009694 <HAL_RCC_OscConfig+0x8b0>)
 800966c:	4013      	ands	r3, r2
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009672:	00d2      	lsls	r2, r2, #3
 8009674:	4906      	ldr	r1, [pc, #24]	; (8009690 <HAL_RCC_OscConfig+0x8ac>)
 8009676:	4313      	orrs	r3, r2
 8009678:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800967a:	4b05      	ldr	r3, [pc, #20]	; (8009690 <HAL_RCC_OscConfig+0x8ac>)
 800967c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967e:	4a04      	ldr	r2, [pc, #16]	; (8009690 <HAL_RCC_OscConfig+0x8ac>)
 8009680:	f043 0301 	orr.w	r3, r3, #1
 8009684:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3730      	adds	r7, #48	; 0x30
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	58024400 	.word	0x58024400
 8009694:	ffff0007 	.word	0xffff0007

08009698 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e19c      	b.n	80099e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80096ac:	4b8a      	ldr	r3, [pc, #552]	; (80098d8 <HAL_RCC_ClockConfig+0x240>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 030f 	and.w	r3, r3, #15
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d910      	bls.n	80096dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096ba:	4b87      	ldr	r3, [pc, #540]	; (80098d8 <HAL_RCC_ClockConfig+0x240>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f023 020f 	bic.w	r2, r3, #15
 80096c2:	4985      	ldr	r1, [pc, #532]	; (80098d8 <HAL_RCC_ClockConfig+0x240>)
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096ca:	4b83      	ldr	r3, [pc, #524]	; (80098d8 <HAL_RCC_ClockConfig+0x240>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 030f 	and.w	r3, r3, #15
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d001      	beq.n	80096dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e184      	b.n	80099e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0304 	and.w	r3, r3, #4
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d010      	beq.n	800970a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	691a      	ldr	r2, [r3, #16]
 80096ec:	4b7b      	ldr	r3, [pc, #492]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d908      	bls.n	800970a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80096f8:	4b78      	ldr	r3, [pc, #480]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	4975      	ldr	r1, [pc, #468]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 8009706:	4313      	orrs	r3, r2
 8009708:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0308 	and.w	r3, r3, #8
 8009712:	2b00      	cmp	r3, #0
 8009714:	d010      	beq.n	8009738 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	695a      	ldr	r2, [r3, #20]
 800971a:	4b70      	ldr	r3, [pc, #448]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 800971c:	69db      	ldr	r3, [r3, #28]
 800971e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009722:	429a      	cmp	r2, r3
 8009724:	d908      	bls.n	8009738 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009726:	4b6d      	ldr	r3, [pc, #436]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	695b      	ldr	r3, [r3, #20]
 8009732:	496a      	ldr	r1, [pc, #424]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 8009734:	4313      	orrs	r3, r2
 8009736:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0310 	and.w	r3, r3, #16
 8009740:	2b00      	cmp	r3, #0
 8009742:	d010      	beq.n	8009766 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	699a      	ldr	r2, [r3, #24]
 8009748:	4b64      	ldr	r3, [pc, #400]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 800974a:	69db      	ldr	r3, [r3, #28]
 800974c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009750:	429a      	cmp	r2, r3
 8009752:	d908      	bls.n	8009766 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009754:	4b61      	ldr	r3, [pc, #388]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 8009756:	69db      	ldr	r3, [r3, #28]
 8009758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	495e      	ldr	r1, [pc, #376]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 8009762:	4313      	orrs	r3, r2
 8009764:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 0320 	and.w	r3, r3, #32
 800976e:	2b00      	cmp	r3, #0
 8009770:	d010      	beq.n	8009794 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	69da      	ldr	r2, [r3, #28]
 8009776:	4b59      	ldr	r3, [pc, #356]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800977e:	429a      	cmp	r2, r3
 8009780:	d908      	bls.n	8009794 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009782:	4b56      	ldr	r3, [pc, #344]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	4953      	ldr	r1, [pc, #332]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 8009790:	4313      	orrs	r3, r2
 8009792:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d010      	beq.n	80097c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	68da      	ldr	r2, [r3, #12]
 80097a4:	4b4d      	ldr	r3, [pc, #308]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	f003 030f 	and.w	r3, r3, #15
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d908      	bls.n	80097c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097b0:	4b4a      	ldr	r3, [pc, #296]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 80097b2:	699b      	ldr	r3, [r3, #24]
 80097b4:	f023 020f 	bic.w	r2, r3, #15
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	4947      	ldr	r1, [pc, #284]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d055      	beq.n	800987a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80097ce:	4b43      	ldr	r3, [pc, #268]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	4940      	ldr	r1, [pc, #256]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 80097dc:	4313      	orrs	r3, r2
 80097de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d107      	bne.n	80097f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097e8:	4b3c      	ldr	r3, [pc, #240]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d121      	bne.n	8009838 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e0f6      	b.n	80099e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	2b03      	cmp	r3, #3
 80097fe:	d107      	bne.n	8009810 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009800:	4b36      	ldr	r3, [pc, #216]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d115      	bne.n	8009838 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	e0ea      	b.n	80099e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d107      	bne.n	8009828 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009818:	4b30      	ldr	r3, [pc, #192]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009820:	2b00      	cmp	r3, #0
 8009822:	d109      	bne.n	8009838 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	e0de      	b.n	80099e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009828:	4b2c      	ldr	r3, [pc, #176]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 0304 	and.w	r3, r3, #4
 8009830:	2b00      	cmp	r3, #0
 8009832:	d101      	bne.n	8009838 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e0d6      	b.n	80099e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009838:	4b28      	ldr	r3, [pc, #160]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	f023 0207 	bic.w	r2, r3, #7
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	4925      	ldr	r1, [pc, #148]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 8009846:	4313      	orrs	r3, r2
 8009848:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800984a:	f7f9 fb7b 	bl	8002f44 <HAL_GetTick>
 800984e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009850:	e00a      	b.n	8009868 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009852:	f7f9 fb77 	bl	8002f44 <HAL_GetTick>
 8009856:	4602      	mov	r2, r0
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009860:	4293      	cmp	r3, r2
 8009862:	d901      	bls.n	8009868 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009864:	2303      	movs	r3, #3
 8009866:	e0be      	b.n	80099e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009868:	4b1c      	ldr	r3, [pc, #112]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	00db      	lsls	r3, r3, #3
 8009876:	429a      	cmp	r2, r3
 8009878:	d1eb      	bne.n	8009852 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 0302 	and.w	r3, r3, #2
 8009882:	2b00      	cmp	r3, #0
 8009884:	d010      	beq.n	80098a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68da      	ldr	r2, [r3, #12]
 800988a:	4b14      	ldr	r3, [pc, #80]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	f003 030f 	and.w	r3, r3, #15
 8009892:	429a      	cmp	r2, r3
 8009894:	d208      	bcs.n	80098a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009896:	4b11      	ldr	r3, [pc, #68]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 8009898:	699b      	ldr	r3, [r3, #24]
 800989a:	f023 020f 	bic.w	r2, r3, #15
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	490e      	ldr	r1, [pc, #56]	; (80098dc <HAL_RCC_ClockConfig+0x244>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80098a8:	4b0b      	ldr	r3, [pc, #44]	; (80098d8 <HAL_RCC_ClockConfig+0x240>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 030f 	and.w	r3, r3, #15
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d214      	bcs.n	80098e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098b6:	4b08      	ldr	r3, [pc, #32]	; (80098d8 <HAL_RCC_ClockConfig+0x240>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f023 020f 	bic.w	r2, r3, #15
 80098be:	4906      	ldr	r1, [pc, #24]	; (80098d8 <HAL_RCC_ClockConfig+0x240>)
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80098c6:	4b04      	ldr	r3, [pc, #16]	; (80098d8 <HAL_RCC_ClockConfig+0x240>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 030f 	and.w	r3, r3, #15
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d005      	beq.n	80098e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	e086      	b.n	80099e6 <HAL_RCC_ClockConfig+0x34e>
 80098d8:	52002000 	.word	0x52002000
 80098dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 0304 	and.w	r3, r3, #4
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d010      	beq.n	800990e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	691a      	ldr	r2, [r3, #16]
 80098f0:	4b3f      	ldr	r3, [pc, #252]	; (80099f0 <HAL_RCC_ClockConfig+0x358>)
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d208      	bcs.n	800990e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80098fc:	4b3c      	ldr	r3, [pc, #240]	; (80099f0 <HAL_RCC_ClockConfig+0x358>)
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	4939      	ldr	r1, [pc, #228]	; (80099f0 <HAL_RCC_ClockConfig+0x358>)
 800990a:	4313      	orrs	r3, r2
 800990c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0308 	and.w	r3, r3, #8
 8009916:	2b00      	cmp	r3, #0
 8009918:	d010      	beq.n	800993c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	695a      	ldr	r2, [r3, #20]
 800991e:	4b34      	ldr	r3, [pc, #208]	; (80099f0 <HAL_RCC_ClockConfig+0x358>)
 8009920:	69db      	ldr	r3, [r3, #28]
 8009922:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009926:	429a      	cmp	r2, r3
 8009928:	d208      	bcs.n	800993c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800992a:	4b31      	ldr	r3, [pc, #196]	; (80099f0 <HAL_RCC_ClockConfig+0x358>)
 800992c:	69db      	ldr	r3, [r3, #28]
 800992e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	492e      	ldr	r1, [pc, #184]	; (80099f0 <HAL_RCC_ClockConfig+0x358>)
 8009938:	4313      	orrs	r3, r2
 800993a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 0310 	and.w	r3, r3, #16
 8009944:	2b00      	cmp	r3, #0
 8009946:	d010      	beq.n	800996a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	699a      	ldr	r2, [r3, #24]
 800994c:	4b28      	ldr	r3, [pc, #160]	; (80099f0 <HAL_RCC_ClockConfig+0x358>)
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009954:	429a      	cmp	r2, r3
 8009956:	d208      	bcs.n	800996a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009958:	4b25      	ldr	r3, [pc, #148]	; (80099f0 <HAL_RCC_ClockConfig+0x358>)
 800995a:	69db      	ldr	r3, [r3, #28]
 800995c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	4922      	ldr	r1, [pc, #136]	; (80099f0 <HAL_RCC_ClockConfig+0x358>)
 8009966:	4313      	orrs	r3, r2
 8009968:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0320 	and.w	r3, r3, #32
 8009972:	2b00      	cmp	r3, #0
 8009974:	d010      	beq.n	8009998 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	69da      	ldr	r2, [r3, #28]
 800997a:	4b1d      	ldr	r3, [pc, #116]	; (80099f0 <HAL_RCC_ClockConfig+0x358>)
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009982:	429a      	cmp	r2, r3
 8009984:	d208      	bcs.n	8009998 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009986:	4b1a      	ldr	r3, [pc, #104]	; (80099f0 <HAL_RCC_ClockConfig+0x358>)
 8009988:	6a1b      	ldr	r3, [r3, #32]
 800998a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	69db      	ldr	r3, [r3, #28]
 8009992:	4917      	ldr	r1, [pc, #92]	; (80099f0 <HAL_RCC_ClockConfig+0x358>)
 8009994:	4313      	orrs	r3, r2
 8009996:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009998:	f000 f834 	bl	8009a04 <HAL_RCC_GetSysClockFreq>
 800999c:	4602      	mov	r2, r0
 800999e:	4b14      	ldr	r3, [pc, #80]	; (80099f0 <HAL_RCC_ClockConfig+0x358>)
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	0a1b      	lsrs	r3, r3, #8
 80099a4:	f003 030f 	and.w	r3, r3, #15
 80099a8:	4912      	ldr	r1, [pc, #72]	; (80099f4 <HAL_RCC_ClockConfig+0x35c>)
 80099aa:	5ccb      	ldrb	r3, [r1, r3]
 80099ac:	f003 031f 	and.w	r3, r3, #31
 80099b0:	fa22 f303 	lsr.w	r3, r2, r3
 80099b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80099b6:	4b0e      	ldr	r3, [pc, #56]	; (80099f0 <HAL_RCC_ClockConfig+0x358>)
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	f003 030f 	and.w	r3, r3, #15
 80099be:	4a0d      	ldr	r2, [pc, #52]	; (80099f4 <HAL_RCC_ClockConfig+0x35c>)
 80099c0:	5cd3      	ldrb	r3, [r2, r3]
 80099c2:	f003 031f 	and.w	r3, r3, #31
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	fa22 f303 	lsr.w	r3, r2, r3
 80099cc:	4a0a      	ldr	r2, [pc, #40]	; (80099f8 <HAL_RCC_ClockConfig+0x360>)
 80099ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80099d0:	4a0a      	ldr	r2, [pc, #40]	; (80099fc <HAL_RCC_ClockConfig+0x364>)
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80099d6:	4b0a      	ldr	r3, [pc, #40]	; (8009a00 <HAL_RCC_ClockConfig+0x368>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4618      	mov	r0, r3
 80099dc:	f7f8 ffea 	bl	80029b4 <HAL_InitTick>
 80099e0:	4603      	mov	r3, r0
 80099e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	58024400 	.word	0x58024400
 80099f4:	08015db4 	.word	0x08015db4
 80099f8:	2400008c 	.word	0x2400008c
 80099fc:	24000088 	.word	0x24000088
 8009a00:	24000090 	.word	0x24000090

08009a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b089      	sub	sp, #36	; 0x24
 8009a08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a0a:	4bb3      	ldr	r3, [pc, #716]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a12:	2b18      	cmp	r3, #24
 8009a14:	f200 8155 	bhi.w	8009cc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009a18:	a201      	add	r2, pc, #4	; (adr r2, 8009a20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1e:	bf00      	nop
 8009a20:	08009a85 	.word	0x08009a85
 8009a24:	08009cc3 	.word	0x08009cc3
 8009a28:	08009cc3 	.word	0x08009cc3
 8009a2c:	08009cc3 	.word	0x08009cc3
 8009a30:	08009cc3 	.word	0x08009cc3
 8009a34:	08009cc3 	.word	0x08009cc3
 8009a38:	08009cc3 	.word	0x08009cc3
 8009a3c:	08009cc3 	.word	0x08009cc3
 8009a40:	08009aab 	.word	0x08009aab
 8009a44:	08009cc3 	.word	0x08009cc3
 8009a48:	08009cc3 	.word	0x08009cc3
 8009a4c:	08009cc3 	.word	0x08009cc3
 8009a50:	08009cc3 	.word	0x08009cc3
 8009a54:	08009cc3 	.word	0x08009cc3
 8009a58:	08009cc3 	.word	0x08009cc3
 8009a5c:	08009cc3 	.word	0x08009cc3
 8009a60:	08009ab1 	.word	0x08009ab1
 8009a64:	08009cc3 	.word	0x08009cc3
 8009a68:	08009cc3 	.word	0x08009cc3
 8009a6c:	08009cc3 	.word	0x08009cc3
 8009a70:	08009cc3 	.word	0x08009cc3
 8009a74:	08009cc3 	.word	0x08009cc3
 8009a78:	08009cc3 	.word	0x08009cc3
 8009a7c:	08009cc3 	.word	0x08009cc3
 8009a80:	08009ab7 	.word	0x08009ab7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a84:	4b94      	ldr	r3, [pc, #592]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0320 	and.w	r3, r3, #32
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d009      	beq.n	8009aa4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a90:	4b91      	ldr	r3, [pc, #580]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	08db      	lsrs	r3, r3, #3
 8009a96:	f003 0303 	and.w	r3, r3, #3
 8009a9a:	4a90      	ldr	r2, [pc, #576]	; (8009cdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009aa0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009aa2:	e111      	b.n	8009cc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009aa4:	4b8d      	ldr	r3, [pc, #564]	; (8009cdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009aa6:	61bb      	str	r3, [r7, #24]
      break;
 8009aa8:	e10e      	b.n	8009cc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009aaa:	4b8d      	ldr	r3, [pc, #564]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009aac:	61bb      	str	r3, [r7, #24]
      break;
 8009aae:	e10b      	b.n	8009cc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009ab0:	4b8c      	ldr	r3, [pc, #560]	; (8009ce4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009ab2:	61bb      	str	r3, [r7, #24]
      break;
 8009ab4:	e108      	b.n	8009cc8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ab6:	4b88      	ldr	r3, [pc, #544]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aba:	f003 0303 	and.w	r3, r3, #3
 8009abe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009ac0:	4b85      	ldr	r3, [pc, #532]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac4:	091b      	lsrs	r3, r3, #4
 8009ac6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009acc:	4b82      	ldr	r3, [pc, #520]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009ad6:	4b80      	ldr	r3, [pc, #512]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ada:	08db      	lsrs	r3, r3, #3
 8009adc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	fb02 f303 	mul.w	r3, r2, r3
 8009ae6:	ee07 3a90 	vmov	s15, r3
 8009aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 80e1 	beq.w	8009cbc <HAL_RCC_GetSysClockFreq+0x2b8>
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	f000 8083 	beq.w	8009c08 <HAL_RCC_GetSysClockFreq+0x204>
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	f200 80a1 	bhi.w	8009c4c <HAL_RCC_GetSysClockFreq+0x248>
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d003      	beq.n	8009b18 <HAL_RCC_GetSysClockFreq+0x114>
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d056      	beq.n	8009bc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009b16:	e099      	b.n	8009c4c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b18:	4b6f      	ldr	r3, [pc, #444]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0320 	and.w	r3, r3, #32
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d02d      	beq.n	8009b80 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b24:	4b6c      	ldr	r3, [pc, #432]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	08db      	lsrs	r3, r3, #3
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	4a6b      	ldr	r2, [pc, #428]	; (8009cdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b30:	fa22 f303 	lsr.w	r3, r2, r3
 8009b34:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	ee07 3a90 	vmov	s15, r3
 8009b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	ee07 3a90 	vmov	s15, r3
 8009b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b4e:	4b62      	ldr	r3, [pc, #392]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b62:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009ce8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009b7e:	e087      	b.n	8009c90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	ee07 3a90 	vmov	s15, r3
 8009b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009cec <HAL_RCC_GetSysClockFreq+0x2e8>
 8009b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b92:	4b51      	ldr	r3, [pc, #324]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b9a:	ee07 3a90 	vmov	s15, r3
 8009b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ba6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009ce8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bc2:	e065      	b.n	8009c90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	ee07 3a90 	vmov	s15, r3
 8009bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bce:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009cf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bd6:	4b40      	ldr	r3, [pc, #256]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009be6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009ce8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c06:	e043      	b.n	8009c90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	ee07 3a90 	vmov	s15, r3
 8009c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c12:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009cf4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c1a:	4b2f      	ldr	r3, [pc, #188]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c22:	ee07 3a90 	vmov	s15, r3
 8009c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009ce8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c4a:	e021      	b.n	8009c90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	ee07 3a90 	vmov	s15, r3
 8009c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c56:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009cf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c5e:	4b1e      	ldr	r3, [pc, #120]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c66:	ee07 3a90 	vmov	s15, r3
 8009c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009ce8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009c90:	4b11      	ldr	r3, [pc, #68]	; (8009cd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c94:	0a5b      	lsrs	r3, r3, #9
 8009c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	ee07 3a90 	vmov	s15, r3
 8009ca4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009ca8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cb4:	ee17 3a90 	vmov	r3, s15
 8009cb8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009cba:	e005      	b.n	8009cc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	61bb      	str	r3, [r7, #24]
      break;
 8009cc0:	e002      	b.n	8009cc8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009cc2:	4b07      	ldr	r3, [pc, #28]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009cc4:	61bb      	str	r3, [r7, #24]
      break;
 8009cc6:	bf00      	nop
  }

  return sysclockfreq;
 8009cc8:	69bb      	ldr	r3, [r7, #24]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3724      	adds	r7, #36	; 0x24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	58024400 	.word	0x58024400
 8009cdc:	03d09000 	.word	0x03d09000
 8009ce0:	003d0900 	.word	0x003d0900
 8009ce4:	017d7840 	.word	0x017d7840
 8009ce8:	46000000 	.word	0x46000000
 8009cec:	4c742400 	.word	0x4c742400
 8009cf0:	4a742400 	.word	0x4a742400
 8009cf4:	4bbebc20 	.word	0x4bbebc20

08009cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009cfe:	f7ff fe81 	bl	8009a04 <HAL_RCC_GetSysClockFreq>
 8009d02:	4602      	mov	r2, r0
 8009d04:	4b10      	ldr	r3, [pc, #64]	; (8009d48 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d06:	699b      	ldr	r3, [r3, #24]
 8009d08:	0a1b      	lsrs	r3, r3, #8
 8009d0a:	f003 030f 	and.w	r3, r3, #15
 8009d0e:	490f      	ldr	r1, [pc, #60]	; (8009d4c <HAL_RCC_GetHCLKFreq+0x54>)
 8009d10:	5ccb      	ldrb	r3, [r1, r3]
 8009d12:	f003 031f 	and.w	r3, r3, #31
 8009d16:	fa22 f303 	lsr.w	r3, r2, r3
 8009d1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009d1c:	4b0a      	ldr	r3, [pc, #40]	; (8009d48 <HAL_RCC_GetHCLKFreq+0x50>)
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	f003 030f 	and.w	r3, r3, #15
 8009d24:	4a09      	ldr	r2, [pc, #36]	; (8009d4c <HAL_RCC_GetHCLKFreq+0x54>)
 8009d26:	5cd3      	ldrb	r3, [r2, r3]
 8009d28:	f003 031f 	and.w	r3, r3, #31
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d32:	4a07      	ldr	r2, [pc, #28]	; (8009d50 <HAL_RCC_GetHCLKFreq+0x58>)
 8009d34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009d36:	4a07      	ldr	r2, [pc, #28]	; (8009d54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009d3c:	4b04      	ldr	r3, [pc, #16]	; (8009d50 <HAL_RCC_GetHCLKFreq+0x58>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	58024400 	.word	0x58024400
 8009d4c:	08015db4 	.word	0x08015db4
 8009d50:	2400008c 	.word	0x2400008c
 8009d54:	24000088 	.word	0x24000088

08009d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009d5c:	f7ff ffcc 	bl	8009cf8 <HAL_RCC_GetHCLKFreq>
 8009d60:	4602      	mov	r2, r0
 8009d62:	4b06      	ldr	r3, [pc, #24]	; (8009d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	091b      	lsrs	r3, r3, #4
 8009d68:	f003 0307 	and.w	r3, r3, #7
 8009d6c:	4904      	ldr	r1, [pc, #16]	; (8009d80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009d6e:	5ccb      	ldrb	r3, [r1, r3]
 8009d70:	f003 031f 	and.w	r3, r3, #31
 8009d74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	58024400 	.word	0x58024400
 8009d80:	08015db4 	.word	0x08015db4

08009d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009d88:	f7ff ffb6 	bl	8009cf8 <HAL_RCC_GetHCLKFreq>
 8009d8c:	4602      	mov	r2, r0
 8009d8e:	4b06      	ldr	r3, [pc, #24]	; (8009da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d90:	69db      	ldr	r3, [r3, #28]
 8009d92:	0a1b      	lsrs	r3, r3, #8
 8009d94:	f003 0307 	and.w	r3, r3, #7
 8009d98:	4904      	ldr	r1, [pc, #16]	; (8009dac <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d9a:	5ccb      	ldrb	r3, [r1, r3]
 8009d9c:	f003 031f 	and.w	r3, r3, #31
 8009da0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	58024400 	.word	0x58024400
 8009dac:	08015db4 	.word	0x08015db4

08009db0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	223f      	movs	r2, #63	; 0x3f
 8009dbe:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009dc0:	4b1a      	ldr	r3, [pc, #104]	; (8009e2c <HAL_RCC_GetClockConfig+0x7c>)
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	f003 0207 	and.w	r2, r3, #7
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009dcc:	4b17      	ldr	r3, [pc, #92]	; (8009e2c <HAL_RCC_GetClockConfig+0x7c>)
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009dd8:	4b14      	ldr	r3, [pc, #80]	; (8009e2c <HAL_RCC_GetClockConfig+0x7c>)
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	f003 020f 	and.w	r2, r3, #15
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009de4:	4b11      	ldr	r3, [pc, #68]	; (8009e2c <HAL_RCC_GetClockConfig+0x7c>)
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009df0:	4b0e      	ldr	r3, [pc, #56]	; (8009e2c <HAL_RCC_GetClockConfig+0x7c>)
 8009df2:	69db      	ldr	r3, [r3, #28]
 8009df4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009dfc:	4b0b      	ldr	r3, [pc, #44]	; (8009e2c <HAL_RCC_GetClockConfig+0x7c>)
 8009dfe:	69db      	ldr	r3, [r3, #28]
 8009e00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009e08:	4b08      	ldr	r3, [pc, #32]	; (8009e2c <HAL_RCC_GetClockConfig+0x7c>)
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009e14:	4b06      	ldr	r3, [pc, #24]	; (8009e30 <HAL_RCC_GetClockConfig+0x80>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 020f 	and.w	r2, r3, #15
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	601a      	str	r2, [r3, #0]
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	58024400 	.word	0x58024400
 8009e30:	52002000 	.word	0x52002000

08009e34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e38:	b0ca      	sub	sp, #296	; 0x128
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009e40:	2300      	movs	r3, #0
 8009e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009e46:	2300      	movs	r3, #0
 8009e48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009e58:	2500      	movs	r5, #0
 8009e5a:	ea54 0305 	orrs.w	r3, r4, r5
 8009e5e:	d049      	beq.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e6a:	d02f      	beq.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009e6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009e70:	d828      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e76:	d01a      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009e78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e7c:	d822      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e86:	d007      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009e88:	e01c      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e8a:	4bb8      	ldr	r3, [pc, #736]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8e:	4ab7      	ldr	r2, [pc, #732]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009e96:	e01a      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e9c:	3308      	adds	r3, #8
 8009e9e:	2102      	movs	r1, #2
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f002 fb61 	bl	800c568 <RCCEx_PLL2_Config>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009eac:	e00f      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eb2:	3328      	adds	r3, #40	; 0x28
 8009eb4:	2102      	movs	r1, #2
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f002 fc08 	bl	800c6cc <RCCEx_PLL3_Config>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009ec2:	e004      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009eca:	e000      	b.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ece:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d10a      	bne.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009ed6:	4ba5      	ldr	r3, [pc, #660]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eda:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ee4:	4aa1      	ldr	r2, [pc, #644]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ee6:	430b      	orrs	r3, r1
 8009ee8:	6513      	str	r3, [r2, #80]	; 0x50
 8009eea:	e003      	b.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ef0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009f00:	f04f 0900 	mov.w	r9, #0
 8009f04:	ea58 0309 	orrs.w	r3, r8, r9
 8009f08:	d047      	beq.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f10:	2b04      	cmp	r3, #4
 8009f12:	d82a      	bhi.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009f14:	a201      	add	r2, pc, #4	; (adr r2, 8009f1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1a:	bf00      	nop
 8009f1c:	08009f31 	.word	0x08009f31
 8009f20:	08009f3f 	.word	0x08009f3f
 8009f24:	08009f55 	.word	0x08009f55
 8009f28:	08009f73 	.word	0x08009f73
 8009f2c:	08009f73 	.word	0x08009f73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f30:	4b8e      	ldr	r3, [pc, #568]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f34:	4a8d      	ldr	r2, [pc, #564]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f3c:	e01a      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f42:	3308      	adds	r3, #8
 8009f44:	2100      	movs	r1, #0
 8009f46:	4618      	mov	r0, r3
 8009f48:	f002 fb0e 	bl	800c568 <RCCEx_PLL2_Config>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f52:	e00f      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f58:	3328      	adds	r3, #40	; 0x28
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f002 fbb5 	bl	800c6cc <RCCEx_PLL3_Config>
 8009f62:	4603      	mov	r3, r0
 8009f64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009f68:	e004      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f70:	e000      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10a      	bne.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f7c:	4b7b      	ldr	r3, [pc, #492]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f80:	f023 0107 	bic.w	r1, r3, #7
 8009f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f8a:	4a78      	ldr	r2, [pc, #480]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009f8c:	430b      	orrs	r3, r1
 8009f8e:	6513      	str	r3, [r2, #80]	; 0x50
 8009f90:	e003      	b.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009fa6:	f04f 0b00 	mov.w	fp, #0
 8009faa:	ea5a 030b 	orrs.w	r3, sl, fp
 8009fae:	d04c      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fba:	d030      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fc0:	d829      	bhi.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009fc2:	2bc0      	cmp	r3, #192	; 0xc0
 8009fc4:	d02d      	beq.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009fc6:	2bc0      	cmp	r3, #192	; 0xc0
 8009fc8:	d825      	bhi.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009fca:	2b80      	cmp	r3, #128	; 0x80
 8009fcc:	d018      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009fce:	2b80      	cmp	r3, #128	; 0x80
 8009fd0:	d821      	bhi.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d002      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009fd6:	2b40      	cmp	r3, #64	; 0x40
 8009fd8:	d007      	beq.n	8009fea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009fda:	e01c      	b.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fdc:	4b63      	ldr	r3, [pc, #396]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe0:	4a62      	ldr	r2, [pc, #392]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009fe8:	e01c      	b.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fee:	3308      	adds	r3, #8
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f002 fab8 	bl	800c568 <RCCEx_PLL2_Config>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009ffe:	e011      	b.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a004:	3328      	adds	r3, #40	; 0x28
 800a006:	2100      	movs	r1, #0
 800a008:	4618      	mov	r0, r3
 800a00a:	f002 fb5f 	bl	800c6cc <RCCEx_PLL3_Config>
 800a00e:	4603      	mov	r3, r0
 800a010:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800a014:	e006      	b.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a01c:	e002      	b.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a01e:	bf00      	nop
 800a020:	e000      	b.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800a022:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a024:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10a      	bne.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a02c:	4b4f      	ldr	r3, [pc, #316]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a02e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a030:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800a034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a03a:	4a4c      	ldr	r2, [pc, #304]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a03c:	430b      	orrs	r3, r1
 800a03e:	6513      	str	r3, [r2, #80]	; 0x50
 800a040:	e003      	b.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a046:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a052:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a056:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a05a:	2300      	movs	r3, #0
 800a05c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800a060:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800a064:	460b      	mov	r3, r1
 800a066:	4313      	orrs	r3, r2
 800a068:	d053      	beq.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a06e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a072:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a076:	d035      	beq.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a078:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a07c:	d82e      	bhi.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a07e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a082:	d031      	beq.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a084:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a088:	d828      	bhi.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a08a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a08e:	d01a      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800a090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a094:	d822      	bhi.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800a09a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a09e:	d007      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800a0a0:	e01c      	b.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0a2:	4b32      	ldr	r3, [pc, #200]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a6:	4a31      	ldr	r2, [pc, #196]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a0a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0ae:	e01c      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0b4:	3308      	adds	r3, #8
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f002 fa55 	bl	800c568 <RCCEx_PLL2_Config>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a0c4:	e011      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0ca:	3328      	adds	r3, #40	; 0x28
 800a0cc:	2100      	movs	r1, #0
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f002 fafc 	bl	800c6cc <RCCEx_PLL3_Config>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0da:	e006      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0e2:	e002      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a0e4:	bf00      	nop
 800a0e6:	e000      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800a0e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10b      	bne.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a0f2:	4b1e      	ldr	r3, [pc, #120]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a0f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a102:	4a1a      	ldr	r2, [pc, #104]	; (800a16c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a104:	430b      	orrs	r3, r1
 800a106:	6593      	str	r3, [r2, #88]	; 0x58
 800a108:	e003      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a10a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a10e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a11e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a122:	2300      	movs	r3, #0
 800a124:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a128:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800a12c:	460b      	mov	r3, r1
 800a12e:	4313      	orrs	r3, r2
 800a130:	d056      	beq.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a136:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a13a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a13e:	d038      	beq.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a144:	d831      	bhi.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a146:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a14a:	d034      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a14c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a150:	d82b      	bhi.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a156:	d01d      	beq.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a15c:	d825      	bhi.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d006      	beq.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a162:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a166:	d00a      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a168:	e01f      	b.n	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a16a:	bf00      	nop
 800a16c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a170:	4ba2      	ldr	r3, [pc, #648]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a174:	4aa1      	ldr	r2, [pc, #644]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a17a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a17c:	e01c      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a182:	3308      	adds	r3, #8
 800a184:	2100      	movs	r1, #0
 800a186:	4618      	mov	r0, r3
 800a188:	f002 f9ee 	bl	800c568 <RCCEx_PLL2_Config>
 800a18c:	4603      	mov	r3, r0
 800a18e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a192:	e011      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a198:	3328      	adds	r3, #40	; 0x28
 800a19a:	2100      	movs	r1, #0
 800a19c:	4618      	mov	r0, r3
 800a19e:	f002 fa95 	bl	800c6cc <RCCEx_PLL3_Config>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a1a8:	e006      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a1b0:	e002      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a1b2:	bf00      	nop
 800a1b4:	e000      	b.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800a1b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10b      	bne.n	800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a1c0:	4b8e      	ldr	r3, [pc, #568]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1c4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a1c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1d0:	4a8a      	ldr	r2, [pc, #552]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a1d2:	430b      	orrs	r3, r1
 800a1d4:	6593      	str	r3, [r2, #88]	; 0x58
 800a1d6:	e003      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a1e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a1ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a1f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	d03a      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800a200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a206:	2b30      	cmp	r3, #48	; 0x30
 800a208:	d01f      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800a20a:	2b30      	cmp	r3, #48	; 0x30
 800a20c:	d819      	bhi.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a20e:	2b20      	cmp	r3, #32
 800a210:	d00c      	beq.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a212:	2b20      	cmp	r3, #32
 800a214:	d815      	bhi.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800a216:	2b00      	cmp	r3, #0
 800a218:	d019      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a21a:	2b10      	cmp	r3, #16
 800a21c:	d111      	bne.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a21e:	4b77      	ldr	r3, [pc, #476]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a222:	4a76      	ldr	r2, [pc, #472]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a228:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a22a:	e011      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a22c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a230:	3308      	adds	r3, #8
 800a232:	2102      	movs	r1, #2
 800a234:	4618      	mov	r0, r3
 800a236:	f002 f997 	bl	800c568 <RCCEx_PLL2_Config>
 800a23a:	4603      	mov	r3, r0
 800a23c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800a240:	e006      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a248:	e002      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a24a:	bf00      	nop
 800a24c:	e000      	b.n	800a250 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800a24e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a250:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a254:	2b00      	cmp	r3, #0
 800a256:	d10a      	bne.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a258:	4b68      	ldr	r3, [pc, #416]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a25a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a25c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a266:	4a65      	ldr	r2, [pc, #404]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a268:	430b      	orrs	r3, r1
 800a26a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a26c:	e003      	b.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a26e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a272:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a282:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a286:	2300      	movs	r3, #0
 800a288:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a28c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a290:	460b      	mov	r3, r1
 800a292:	4313      	orrs	r3, r2
 800a294:	d051      	beq.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a29a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a29c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2a0:	d035      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800a2a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2a6:	d82e      	bhi.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a2a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2ac:	d031      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800a2ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2b2:	d828      	bhi.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a2b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2b8:	d01a      	beq.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800a2ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2be:	d822      	bhi.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d003      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a2c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2c8:	d007      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800a2ca:	e01c      	b.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2cc:	4b4b      	ldr	r3, [pc, #300]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d0:	4a4a      	ldr	r2, [pc, #296]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a2d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a2d8:	e01c      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2de:	3308      	adds	r3, #8
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f002 f940 	bl	800c568 <RCCEx_PLL2_Config>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a2ee:	e011      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a2f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2f4:	3328      	adds	r3, #40	; 0x28
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f002 f9e7 	bl	800c6cc <RCCEx_PLL3_Config>
 800a2fe:	4603      	mov	r3, r0
 800a300:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a304:	e006      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a30c:	e002      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a30e:	bf00      	nop
 800a310:	e000      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800a312:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a314:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10a      	bne.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a31c:	4b37      	ldr	r3, [pc, #220]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a31e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a320:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a32a:	4a34      	ldr	r2, [pc, #208]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a32c:	430b      	orrs	r3, r1
 800a32e:	6513      	str	r3, [r2, #80]	; 0x50
 800a330:	e003      	b.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a336:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a33a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a342:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a346:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a34a:	2300      	movs	r3, #0
 800a34c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a350:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a354:	460b      	mov	r3, r1
 800a356:	4313      	orrs	r3, r2
 800a358:	d056      	beq.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a35e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a364:	d033      	beq.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a366:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a36a:	d82c      	bhi.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a36c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a370:	d02f      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800a372:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a376:	d826      	bhi.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a378:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a37c:	d02b      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800a37e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a382:	d820      	bhi.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a384:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a388:	d012      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800a38a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a38e:	d81a      	bhi.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800a390:	2b00      	cmp	r3, #0
 800a392:	d022      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a398:	d115      	bne.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a39a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a39e:	3308      	adds	r3, #8
 800a3a0:	2101      	movs	r1, #1
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f002 f8e0 	bl	800c568 <RCCEx_PLL2_Config>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a3ae:	e015      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b4:	3328      	adds	r3, #40	; 0x28
 800a3b6:	2101      	movs	r1, #1
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f002 f987 	bl	800c6cc <RCCEx_PLL3_Config>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a3c4:	e00a      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a3cc:	e006      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a3ce:	bf00      	nop
 800a3d0:	e004      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a3d2:	bf00      	nop
 800a3d4:	e002      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a3d6:	bf00      	nop
 800a3d8:	e000      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800a3da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10d      	bne.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a3e4:	4b05      	ldr	r3, [pc, #20]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a3e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3e8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3f2:	4a02      	ldr	r2, [pc, #8]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a3f4:	430b      	orrs	r3, r1
 800a3f6:	6513      	str	r3, [r2, #80]	; 0x50
 800a3f8:	e006      	b.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a3fa:	bf00      	nop
 800a3fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a400:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a404:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a414:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a418:	2300      	movs	r3, #0
 800a41a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a41e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a422:	460b      	mov	r3, r1
 800a424:	4313      	orrs	r3, r2
 800a426:	d055      	beq.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a42c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a434:	d033      	beq.n	800a49e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800a436:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a43a:	d82c      	bhi.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a43c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a440:	d02f      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800a442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a446:	d826      	bhi.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a448:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a44c:	d02b      	beq.n	800a4a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800a44e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a452:	d820      	bhi.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a458:	d012      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800a45a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a45e:	d81a      	bhi.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800a460:	2b00      	cmp	r3, #0
 800a462:	d022      	beq.n	800a4aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 800a464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a468:	d115      	bne.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a46a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a46e:	3308      	adds	r3, #8
 800a470:	2101      	movs	r1, #1
 800a472:	4618      	mov	r0, r3
 800a474:	f002 f878 	bl	800c568 <RCCEx_PLL2_Config>
 800a478:	4603      	mov	r3, r0
 800a47a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a47e:	e015      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a484:	3328      	adds	r3, #40	; 0x28
 800a486:	2101      	movs	r1, #1
 800a488:	4618      	mov	r0, r3
 800a48a:	f002 f91f 	bl	800c6cc <RCCEx_PLL3_Config>
 800a48e:	4603      	mov	r3, r0
 800a490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a494:	e00a      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a49c:	e006      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a49e:	bf00      	nop
 800a4a0:	e004      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a4a2:	bf00      	nop
 800a4a4:	e002      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a4a6:	bf00      	nop
 800a4a8:	e000      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800a4aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10b      	bne.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a4b4:	4ba3      	ldr	r3, [pc, #652]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4b8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a4bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4c4:	4a9f      	ldr	r2, [pc, #636]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a4c6:	430b      	orrs	r3, r1
 800a4c8:	6593      	str	r3, [r2, #88]	; 0x58
 800a4ca:	e003      	b.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a4d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4dc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a4e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a4ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	d037      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a4f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4fe:	d00e      	beq.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800a500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a504:	d816      	bhi.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800a506:	2b00      	cmp	r3, #0
 800a508:	d018      	beq.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800a50a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a50e:	d111      	bne.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a510:	4b8c      	ldr	r3, [pc, #560]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a514:	4a8b      	ldr	r2, [pc, #556]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a51a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a51c:	e00f      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a522:	3308      	adds	r3, #8
 800a524:	2101      	movs	r1, #1
 800a526:	4618      	mov	r0, r3
 800a528:	f002 f81e 	bl	800c568 <RCCEx_PLL2_Config>
 800a52c:	4603      	mov	r3, r0
 800a52e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a532:	e004      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a53a:	e000      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800a53c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a53e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10a      	bne.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a546:	4b7f      	ldr	r3, [pc, #508]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a54a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a54e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a554:	4a7b      	ldr	r2, [pc, #492]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a556:	430b      	orrs	r3, r1
 800a558:	6513      	str	r3, [r2, #80]	; 0x50
 800a55a:	e003      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a55c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a560:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a574:	2300      	movs	r3, #0
 800a576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a57a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a57e:	460b      	mov	r3, r1
 800a580:	4313      	orrs	r3, r2
 800a582:	d039      	beq.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d81c      	bhi.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800a58e:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a5d1 	.word	0x0800a5d1
 800a598:	0800a5a5 	.word	0x0800a5a5
 800a59c:	0800a5b3 	.word	0x0800a5b3
 800a5a0:	0800a5d1 	.word	0x0800a5d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5a4:	4b67      	ldr	r3, [pc, #412]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a8:	4a66      	ldr	r2, [pc, #408]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a5b0:	e00f      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	2102      	movs	r1, #2
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f001 ffd4 	bl	800c568 <RCCEx_PLL2_Config>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a5c6:	e004      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5ce:	e000      	b.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800a5d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10a      	bne.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a5da:	4b5a      	ldr	r3, [pc, #360]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5de:	f023 0103 	bic.w	r1, r3, #3
 800a5e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5e8:	4a56      	ldr	r2, [pc, #344]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a5ea:	430b      	orrs	r3, r1
 800a5ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5ee:	e003      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a5f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a5f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a600:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a604:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a608:	2300      	movs	r3, #0
 800a60a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a60e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a612:	460b      	mov	r3, r1
 800a614:	4313      	orrs	r3, r2
 800a616:	f000 809f 	beq.w	800a758 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a61a:	4b4b      	ldr	r3, [pc, #300]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a4a      	ldr	r2, [pc, #296]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a624:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a626:	f7f8 fc8d 	bl	8002f44 <HAL_GetTick>
 800a62a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a62e:	e00b      	b.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a630:	f7f8 fc88 	bl	8002f44 <HAL_GetTick>
 800a634:	4602      	mov	r2, r0
 800a636:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	2b64      	cmp	r3, #100	; 0x64
 800a63e:	d903      	bls.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a640:	2303      	movs	r3, #3
 800a642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a646:	e005      	b.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a648:	4b3f      	ldr	r3, [pc, #252]	; (800a748 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a650:	2b00      	cmp	r3, #0
 800a652:	d0ed      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d179      	bne.n	800a750 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a65c:	4b39      	ldr	r3, [pc, #228]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a65e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a664:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a668:	4053      	eors	r3, r2
 800a66a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d015      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a672:	4b34      	ldr	r3, [pc, #208]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a67a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a67e:	4b31      	ldr	r3, [pc, #196]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a682:	4a30      	ldr	r2, [pc, #192]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a688:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a68a:	4b2e      	ldr	r3, [pc, #184]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a68c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a68e:	4a2d      	ldr	r2, [pc, #180]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a694:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a696:	4a2b      	ldr	r2, [pc, #172]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a698:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a69c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a69e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a6a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6aa:	d118      	bne.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ac:	f7f8 fc4a 	bl	8002f44 <HAL_GetTick>
 800a6b0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6b4:	e00d      	b.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6b6:	f7f8 fc45 	bl	8002f44 <HAL_GetTick>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a6c0:	1ad2      	subs	r2, r2, r3
 800a6c2:	f241 3388 	movw	r3, #5000	; 0x1388
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d903      	bls.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a6ca:	2303      	movs	r3, #3
 800a6cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a6d0:	e005      	b.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6d2:	4b1c      	ldr	r3, [pc, #112]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d6:	f003 0302 	and.w	r3, r3, #2
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d0eb      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a6de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d129      	bne.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a6e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a6ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6f6:	d10e      	bne.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a6f8:	4b12      	ldr	r3, [pc, #72]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a704:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a708:	091a      	lsrs	r2, r3, #4
 800a70a:	4b10      	ldr	r3, [pc, #64]	; (800a74c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a70c:	4013      	ands	r3, r2
 800a70e:	4a0d      	ldr	r2, [pc, #52]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a710:	430b      	orrs	r3, r1
 800a712:	6113      	str	r3, [r2, #16]
 800a714:	e005      	b.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a716:	4b0b      	ldr	r3, [pc, #44]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	4a0a      	ldr	r2, [pc, #40]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a71c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a720:	6113      	str	r3, [r2, #16]
 800a722:	4b08      	ldr	r3, [pc, #32]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a724:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a72a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a72e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a732:	4a04      	ldr	r2, [pc, #16]	; (800a744 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a734:	430b      	orrs	r3, r1
 800a736:	6713      	str	r3, [r2, #112]	; 0x70
 800a738:	e00e      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a73a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a73e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a742:	e009      	b.n	800a758 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a744:	58024400 	.word	0x58024400
 800a748:	58024800 	.word	0x58024800
 800a74c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a750:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a754:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a760:	f002 0301 	and.w	r3, r2, #1
 800a764:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a768:	2300      	movs	r3, #0
 800a76a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a76e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a772:	460b      	mov	r3, r1
 800a774:	4313      	orrs	r3, r2
 800a776:	f000 8089 	beq.w	800a88c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a77a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a77e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a780:	2b28      	cmp	r3, #40	; 0x28
 800a782:	d86b      	bhi.n	800a85c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a784:	a201      	add	r2, pc, #4	; (adr r2, 800a78c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78a:	bf00      	nop
 800a78c:	0800a865 	.word	0x0800a865
 800a790:	0800a85d 	.word	0x0800a85d
 800a794:	0800a85d 	.word	0x0800a85d
 800a798:	0800a85d 	.word	0x0800a85d
 800a79c:	0800a85d 	.word	0x0800a85d
 800a7a0:	0800a85d 	.word	0x0800a85d
 800a7a4:	0800a85d 	.word	0x0800a85d
 800a7a8:	0800a85d 	.word	0x0800a85d
 800a7ac:	0800a831 	.word	0x0800a831
 800a7b0:	0800a85d 	.word	0x0800a85d
 800a7b4:	0800a85d 	.word	0x0800a85d
 800a7b8:	0800a85d 	.word	0x0800a85d
 800a7bc:	0800a85d 	.word	0x0800a85d
 800a7c0:	0800a85d 	.word	0x0800a85d
 800a7c4:	0800a85d 	.word	0x0800a85d
 800a7c8:	0800a85d 	.word	0x0800a85d
 800a7cc:	0800a847 	.word	0x0800a847
 800a7d0:	0800a85d 	.word	0x0800a85d
 800a7d4:	0800a85d 	.word	0x0800a85d
 800a7d8:	0800a85d 	.word	0x0800a85d
 800a7dc:	0800a85d 	.word	0x0800a85d
 800a7e0:	0800a85d 	.word	0x0800a85d
 800a7e4:	0800a85d 	.word	0x0800a85d
 800a7e8:	0800a85d 	.word	0x0800a85d
 800a7ec:	0800a865 	.word	0x0800a865
 800a7f0:	0800a85d 	.word	0x0800a85d
 800a7f4:	0800a85d 	.word	0x0800a85d
 800a7f8:	0800a85d 	.word	0x0800a85d
 800a7fc:	0800a85d 	.word	0x0800a85d
 800a800:	0800a85d 	.word	0x0800a85d
 800a804:	0800a85d 	.word	0x0800a85d
 800a808:	0800a85d 	.word	0x0800a85d
 800a80c:	0800a865 	.word	0x0800a865
 800a810:	0800a85d 	.word	0x0800a85d
 800a814:	0800a85d 	.word	0x0800a85d
 800a818:	0800a85d 	.word	0x0800a85d
 800a81c:	0800a85d 	.word	0x0800a85d
 800a820:	0800a85d 	.word	0x0800a85d
 800a824:	0800a85d 	.word	0x0800a85d
 800a828:	0800a85d 	.word	0x0800a85d
 800a82c:	0800a865 	.word	0x0800a865
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a834:	3308      	adds	r3, #8
 800a836:	2101      	movs	r1, #1
 800a838:	4618      	mov	r0, r3
 800a83a:	f001 fe95 	bl	800c568 <RCCEx_PLL2_Config>
 800a83e:	4603      	mov	r3, r0
 800a840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a844:	e00f      	b.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a84a:	3328      	adds	r3, #40	; 0x28
 800a84c:	2101      	movs	r1, #1
 800a84e:	4618      	mov	r0, r3
 800a850:	f001 ff3c 	bl	800c6cc <RCCEx_PLL3_Config>
 800a854:	4603      	mov	r3, r0
 800a856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a85a:	e004      	b.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a862:	e000      	b.n	800a866 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a864:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d10a      	bne.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a86e:	4bbf      	ldr	r3, [pc, #764]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a872:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a87a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a87c:	4abb      	ldr	r2, [pc, #748]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a87e:	430b      	orrs	r3, r1
 800a880:	6553      	str	r3, [r2, #84]	; 0x54
 800a882:	e003      	b.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a884:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a888:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a88c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a894:	f002 0302 	and.w	r3, r2, #2
 800a898:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a89c:	2300      	movs	r3, #0
 800a89e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a8a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	d041      	beq.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a8ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8b2:	2b05      	cmp	r3, #5
 800a8b4:	d824      	bhi.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a8b6:	a201      	add	r2, pc, #4	; (adr r2, 800a8bc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8bc:	0800a909 	.word	0x0800a909
 800a8c0:	0800a8d5 	.word	0x0800a8d5
 800a8c4:	0800a8eb 	.word	0x0800a8eb
 800a8c8:	0800a909 	.word	0x0800a909
 800a8cc:	0800a909 	.word	0x0800a909
 800a8d0:	0800a909 	.word	0x0800a909
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8d8:	3308      	adds	r3, #8
 800a8da:	2101      	movs	r1, #1
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f001 fe43 	bl	800c568 <RCCEx_PLL2_Config>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a8e8:	e00f      	b.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ee:	3328      	adds	r3, #40	; 0x28
 800a8f0:	2101      	movs	r1, #1
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f001 feea 	bl	800c6cc <RCCEx_PLL3_Config>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a8fe:	e004      	b.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a906:	e000      	b.n	800a90a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a90a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d10a      	bne.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a912:	4b96      	ldr	r3, [pc, #600]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a916:	f023 0107 	bic.w	r1, r3, #7
 800a91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a91e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a920:	4a92      	ldr	r2, [pc, #584]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a922:	430b      	orrs	r3, r1
 800a924:	6553      	str	r3, [r2, #84]	; 0x54
 800a926:	e003      	b.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a928:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a92c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a938:	f002 0304 	and.w	r3, r2, #4
 800a93c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a940:	2300      	movs	r3, #0
 800a942:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a946:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a94a:	460b      	mov	r3, r1
 800a94c:	4313      	orrs	r3, r2
 800a94e:	d044      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a958:	2b05      	cmp	r3, #5
 800a95a:	d825      	bhi.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a95c:	a201      	add	r2, pc, #4	; (adr r2, 800a964 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a962:	bf00      	nop
 800a964:	0800a9b1 	.word	0x0800a9b1
 800a968:	0800a97d 	.word	0x0800a97d
 800a96c:	0800a993 	.word	0x0800a993
 800a970:	0800a9b1 	.word	0x0800a9b1
 800a974:	0800a9b1 	.word	0x0800a9b1
 800a978:	0800a9b1 	.word	0x0800a9b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a980:	3308      	adds	r3, #8
 800a982:	2101      	movs	r1, #1
 800a984:	4618      	mov	r0, r3
 800a986:	f001 fdef 	bl	800c568 <RCCEx_PLL2_Config>
 800a98a:	4603      	mov	r3, r0
 800a98c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a990:	e00f      	b.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a996:	3328      	adds	r3, #40	; 0x28
 800a998:	2101      	movs	r1, #1
 800a99a:	4618      	mov	r0, r3
 800a99c:	f001 fe96 	bl	800c6cc <RCCEx_PLL3_Config>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a9a6:	e004      	b.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a9ae:	e000      	b.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a9b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10b      	bne.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a9ba:	4b6c      	ldr	r3, [pc, #432]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9be:	f023 0107 	bic.w	r1, r3, #7
 800a9c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9ca:	4a68      	ldr	r2, [pc, #416]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a9cc:	430b      	orrs	r3, r1
 800a9ce:	6593      	str	r3, [r2, #88]	; 0x58
 800a9d0:	e003      	b.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a9d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	f002 0320 	and.w	r3, r2, #32
 800a9e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a9f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	d055      	beq.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa06:	d033      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800aa08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa0c:	d82c      	bhi.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa12:	d02f      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800aa14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa18:	d826      	bhi.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa1e:	d02b      	beq.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800aa20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa24:	d820      	bhi.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa2a:	d012      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800aa2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa30:	d81a      	bhi.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d022      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800aa36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa3a:	d115      	bne.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa40:	3308      	adds	r3, #8
 800aa42:	2100      	movs	r1, #0
 800aa44:	4618      	mov	r0, r3
 800aa46:	f001 fd8f 	bl	800c568 <RCCEx_PLL2_Config>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aa50:	e015      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa56:	3328      	adds	r3, #40	; 0x28
 800aa58:	2102      	movs	r1, #2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f001 fe36 	bl	800c6cc <RCCEx_PLL3_Config>
 800aa60:	4603      	mov	r3, r0
 800aa62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aa66:	e00a      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa6e:	e006      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa70:	bf00      	nop
 800aa72:	e004      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa74:	bf00      	nop
 800aa76:	e002      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa78:	bf00      	nop
 800aa7a:	e000      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800aa7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10b      	bne.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa86:	4b39      	ldr	r3, [pc, #228]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa8a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800aa8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa96:	4a35      	ldr	r2, [pc, #212]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800aa98:	430b      	orrs	r3, r1
 800aa9a:	6553      	str	r3, [r2, #84]	; 0x54
 800aa9c:	e003      	b.n	800aaa6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaa2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aaa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800aab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aab6:	2300      	movs	r3, #0
 800aab8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aabc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800aac0:	460b      	mov	r3, r1
 800aac2:	4313      	orrs	r3, r2
 800aac4:	d058      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800aace:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aad2:	d033      	beq.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800aad4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aad8:	d82c      	bhi.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aade:	d02f      	beq.n	800ab40 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800aae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aae4:	d826      	bhi.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aae6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aaea:	d02b      	beq.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800aaec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aaf0:	d820      	bhi.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aaf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaf6:	d012      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800aaf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aafc:	d81a      	bhi.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d022      	beq.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ab02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab06:	d115      	bne.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	2100      	movs	r1, #0
 800ab10:	4618      	mov	r0, r3
 800ab12:	f001 fd29 	bl	800c568 <RCCEx_PLL2_Config>
 800ab16:	4603      	mov	r3, r0
 800ab18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ab1c:	e015      	b.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab22:	3328      	adds	r3, #40	; 0x28
 800ab24:	2102      	movs	r1, #2
 800ab26:	4618      	mov	r0, r3
 800ab28:	f001 fdd0 	bl	800c6cc <RCCEx_PLL3_Config>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ab32:	e00a      	b.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab3a:	e006      	b.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab3c:	bf00      	nop
 800ab3e:	e004      	b.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab40:	bf00      	nop
 800ab42:	e002      	b.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab44:	bf00      	nop
 800ab46:	e000      	b.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ab48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d10e      	bne.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ab52:	4b06      	ldr	r3, [pc, #24]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ab54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab56:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800ab5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab62:	4a02      	ldr	r2, [pc, #8]	; (800ab6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ab64:	430b      	orrs	r3, r1
 800ab66:	6593      	str	r3, [r2, #88]	; 0x58
 800ab68:	e006      	b.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800ab6a:	bf00      	nop
 800ab6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ab78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab80:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ab84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ab88:	2300      	movs	r3, #0
 800ab8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ab8e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ab92:	460b      	mov	r3, r1
 800ab94:	4313      	orrs	r3, r2
 800ab96:	d055      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ab98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aba0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aba4:	d033      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800aba6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800abaa:	d82c      	bhi.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800abac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abb0:	d02f      	beq.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800abb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abb6:	d826      	bhi.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800abb8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800abbc:	d02b      	beq.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800abbe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800abc2:	d820      	bhi.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800abc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abc8:	d012      	beq.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800abca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abce:	d81a      	bhi.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d022      	beq.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800abd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abd8:	d115      	bne.n	800ac06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abde:	3308      	adds	r3, #8
 800abe0:	2100      	movs	r1, #0
 800abe2:	4618      	mov	r0, r3
 800abe4:	f001 fcc0 	bl	800c568 <RCCEx_PLL2_Config>
 800abe8:	4603      	mov	r3, r0
 800abea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800abee:	e015      	b.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800abf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abf4:	3328      	adds	r3, #40	; 0x28
 800abf6:	2102      	movs	r1, #2
 800abf8:	4618      	mov	r0, r3
 800abfa:	f001 fd67 	bl	800c6cc <RCCEx_PLL3_Config>
 800abfe:	4603      	mov	r3, r0
 800ac00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ac04:	e00a      	b.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac0c:	e006      	b.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac0e:	bf00      	nop
 800ac10:	e004      	b.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac12:	bf00      	nop
 800ac14:	e002      	b.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac16:	bf00      	nop
 800ac18:	e000      	b.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800ac1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10b      	bne.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ac24:	4ba1      	ldr	r3, [pc, #644]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac28:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800ac2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ac34:	4a9d      	ldr	r2, [pc, #628]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac36:	430b      	orrs	r3, r1
 800ac38:	6593      	str	r3, [r2, #88]	; 0x58
 800ac3a:	e003      	b.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800ac44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4c:	f002 0308 	and.w	r3, r2, #8
 800ac50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ac54:	2300      	movs	r3, #0
 800ac56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ac5a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ac5e:	460b      	mov	r3, r1
 800ac60:	4313      	orrs	r3, r2
 800ac62:	d01e      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800ac64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac70:	d10c      	bne.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac76:	3328      	adds	r3, #40	; 0x28
 800ac78:	2102      	movs	r1, #2
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f001 fd26 	bl	800c6cc <RCCEx_PLL3_Config>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d002      	beq.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ac8c:	4b87      	ldr	r3, [pc, #540]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac9c:	4a83      	ldr	r2, [pc, #524]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ac9e:	430b      	orrs	r3, r1
 800aca0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acaa:	f002 0310 	and.w	r3, r2, #16
 800acae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800acb2:	2300      	movs	r3, #0
 800acb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800acb8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800acbc:	460b      	mov	r3, r1
 800acbe:	4313      	orrs	r3, r2
 800acc0:	d01e      	beq.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800acc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800acca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acce:	d10c      	bne.n	800acea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800acd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acd4:	3328      	adds	r3, #40	; 0x28
 800acd6:	2102      	movs	r1, #2
 800acd8:	4618      	mov	r0, r3
 800acda:	f001 fcf7 	bl	800c6cc <RCCEx_PLL3_Config>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d002      	beq.n	800acea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800acea:	4b70      	ldr	r3, [pc, #448]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800acf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800acfa:	4a6c      	ldr	r2, [pc, #432]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800acfc:	430b      	orrs	r3, r1
 800acfe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad08:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ad0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad10:	2300      	movs	r3, #0
 800ad12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad16:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	d03e      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ad20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad2c:	d022      	beq.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ad2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad32:	d81b      	bhi.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d003      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ad38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad3c:	d00b      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ad3e:	e015      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad44:	3308      	adds	r3, #8
 800ad46:	2100      	movs	r1, #0
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f001 fc0d 	bl	800c568 <RCCEx_PLL2_Config>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad54:	e00f      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad5a:	3328      	adds	r3, #40	; 0x28
 800ad5c:	2102      	movs	r1, #2
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f001 fcb4 	bl	800c6cc <RCCEx_PLL3_Config>
 800ad64:	4603      	mov	r3, r0
 800ad66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad6a:	e004      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad72:	e000      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ad74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10b      	bne.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad7e:	4b4b      	ldr	r3, [pc, #300]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad82:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ad86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad8e:	4a47      	ldr	r2, [pc, #284]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ad90:	430b      	orrs	r3, r1
 800ad92:	6593      	str	r3, [r2, #88]	; 0x58
 800ad94:	e003      	b.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800adaa:	67bb      	str	r3, [r7, #120]	; 0x78
 800adac:	2300      	movs	r3, #0
 800adae:	67fb      	str	r3, [r7, #124]	; 0x7c
 800adb0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800adb4:	460b      	mov	r3, r1
 800adb6:	4313      	orrs	r3, r2
 800adb8:	d03b      	beq.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800adba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800adc6:	d01f      	beq.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800adc8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800adcc:	d818      	bhi.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800adce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800add2:	d003      	beq.n	800addc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800add4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800add8:	d007      	beq.n	800adea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800adda:	e011      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800addc:	4b33      	ldr	r3, [pc, #204]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800adde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade0:	4a32      	ldr	r2, [pc, #200]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ade2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ade6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ade8:	e00f      	b.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800adea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adee:	3328      	adds	r3, #40	; 0x28
 800adf0:	2101      	movs	r1, #1
 800adf2:	4618      	mov	r0, r3
 800adf4:	f001 fc6a 	bl	800c6cc <RCCEx_PLL3_Config>
 800adf8:	4603      	mov	r3, r0
 800adfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800adfe:	e004      	b.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae06:	e000      	b.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800ae08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10b      	bne.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ae12:	4b26      	ldr	r3, [pc, #152]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae16:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ae1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae22:	4a22      	ldr	r2, [pc, #136]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae24:	430b      	orrs	r3, r1
 800ae26:	6553      	str	r3, [r2, #84]	; 0x54
 800ae28:	e003      	b.n	800ae32 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ae32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ae3e:	673b      	str	r3, [r7, #112]	; 0x70
 800ae40:	2300      	movs	r3, #0
 800ae42:	677b      	str	r3, [r7, #116]	; 0x74
 800ae44:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800ae48:	460b      	mov	r3, r1
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	d034      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ae4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d003      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800ae58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae5c:	d007      	beq.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ae5e:	e011      	b.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae60:	4b12      	ldr	r3, [pc, #72]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae64:	4a11      	ldr	r2, [pc, #68]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae6c:	e00e      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae72:	3308      	adds	r3, #8
 800ae74:	2102      	movs	r1, #2
 800ae76:	4618      	mov	r0, r3
 800ae78:	f001 fb76 	bl	800c568 <RCCEx_PLL2_Config>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae82:	e003      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10d      	bne.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ae94:	4b05      	ldr	r3, [pc, #20]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ae96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aea2:	4a02      	ldr	r2, [pc, #8]	; (800aeac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800aea4:	430b      	orrs	r3, r1
 800aea6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aea8:	e006      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800aeaa:	bf00      	nop
 800aeac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aeb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800aec4:	66bb      	str	r3, [r7, #104]	; 0x68
 800aec6:	2300      	movs	r3, #0
 800aec8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aeca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800aece:	460b      	mov	r3, r1
 800aed0:	4313      	orrs	r3, r2
 800aed2:	d00c      	beq.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aed8:	3328      	adds	r3, #40	; 0x28
 800aeda:	2102      	movs	r1, #2
 800aedc:	4618      	mov	r0, r3
 800aede:	f001 fbf5 	bl	800c6cc <RCCEx_PLL3_Config>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d002      	beq.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aeee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800aefa:	663b      	str	r3, [r7, #96]	; 0x60
 800aefc:	2300      	movs	r3, #0
 800aefe:	667b      	str	r3, [r7, #100]	; 0x64
 800af00:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800af04:	460b      	mov	r3, r1
 800af06:	4313      	orrs	r3, r2
 800af08:	d038      	beq.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800af0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af16:	d018      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800af18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af1c:	d811      	bhi.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800af1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af22:	d014      	beq.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800af24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af28:	d80b      	bhi.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d011      	beq.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800af2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af32:	d106      	bne.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af34:	4bc3      	ldr	r3, [pc, #780]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af38:	4ac2      	ldr	r2, [pc, #776]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800af40:	e008      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af48:	e004      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800af4a:	bf00      	nop
 800af4c:	e002      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800af4e:	bf00      	nop
 800af50:	e000      	b.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800af52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10b      	bne.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800af5c:	4bb9      	ldr	r3, [pc, #740]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af60:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800af64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af6c:	4ab5      	ldr	r2, [pc, #724]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af6e:	430b      	orrs	r3, r1
 800af70:	6553      	str	r3, [r2, #84]	; 0x54
 800af72:	e003      	b.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800af7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af84:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800af88:	65bb      	str	r3, [r7, #88]	; 0x58
 800af8a:	2300      	movs	r3, #0
 800af8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af8e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800af92:	460b      	mov	r3, r1
 800af94:	4313      	orrs	r3, r2
 800af96:	d009      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800af98:	4baa      	ldr	r3, [pc, #680]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800af9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af9c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800afa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afa6:	4aa7      	ldr	r2, [pc, #668]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afa8:	430b      	orrs	r3, r1
 800afaa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800afac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800afb8:	653b      	str	r3, [r7, #80]	; 0x50
 800afba:	2300      	movs	r3, #0
 800afbc:	657b      	str	r3, [r7, #84]	; 0x54
 800afbe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800afc2:	460b      	mov	r3, r1
 800afc4:	4313      	orrs	r3, r2
 800afc6:	d00a      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800afc8:	4b9e      	ldr	r3, [pc, #632]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afca:	691b      	ldr	r3, [r3, #16]
 800afcc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800afd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800afd8:	4a9a      	ldr	r2, [pc, #616]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800afda:	430b      	orrs	r3, r1
 800afdc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800afde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800afea:	64bb      	str	r3, [r7, #72]	; 0x48
 800afec:	2300      	movs	r3, #0
 800afee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aff0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800aff4:	460b      	mov	r3, r1
 800aff6:	4313      	orrs	r3, r2
 800aff8:	d009      	beq.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800affa:	4b92      	ldr	r3, [pc, #584]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800affc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800affe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b008:	4a8e      	ldr	r2, [pc, #568]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b00a:	430b      	orrs	r3, r1
 800b00c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b016:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b01a:	643b      	str	r3, [r7, #64]	; 0x40
 800b01c:	2300      	movs	r3, #0
 800b01e:	647b      	str	r3, [r7, #68]	; 0x44
 800b020:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b024:	460b      	mov	r3, r1
 800b026:	4313      	orrs	r3, r2
 800b028:	d00e      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b02a:	4b86      	ldr	r3, [pc, #536]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	4a85      	ldr	r2, [pc, #532]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b030:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b034:	6113      	str	r3, [r2, #16]
 800b036:	4b83      	ldr	r3, [pc, #524]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b038:	6919      	ldr	r1, [r3, #16]
 800b03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b03e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b042:	4a80      	ldr	r2, [pc, #512]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b044:	430b      	orrs	r3, r1
 800b046:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b050:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b054:	63bb      	str	r3, [r7, #56]	; 0x38
 800b056:	2300      	movs	r3, #0
 800b058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b05a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b05e:	460b      	mov	r3, r1
 800b060:	4313      	orrs	r3, r2
 800b062:	d009      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b064:	4b77      	ldr	r3, [pc, #476]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b068:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b06c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b072:	4a74      	ldr	r2, [pc, #464]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b074:	430b      	orrs	r3, r1
 800b076:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b080:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b084:	633b      	str	r3, [r7, #48]	; 0x30
 800b086:	2300      	movs	r3, #0
 800b088:	637b      	str	r3, [r7, #52]	; 0x34
 800b08a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b08e:	460b      	mov	r3, r1
 800b090:	4313      	orrs	r3, r2
 800b092:	d00a      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b094:	4b6b      	ldr	r3, [pc, #428]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b098:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0a4:	4a67      	ldr	r2, [pc, #412]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800b0a6:	430b      	orrs	r3, r1
 800b0a8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	62b9      	str	r1, [r7, #40]	; 0x28
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	d011      	beq.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	2100      	movs	r1, #0
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f001 fa4a 	bl	800c568 <RCCEx_PLL2_Config>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b0da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b0ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	6239      	str	r1, [r7, #32]
 800b0f6:	f003 0302 	and.w	r3, r3, #2
 800b0fa:	627b      	str	r3, [r7, #36]	; 0x24
 800b0fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b100:	460b      	mov	r3, r1
 800b102:	4313      	orrs	r3, r2
 800b104:	d011      	beq.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b10a:	3308      	adds	r3, #8
 800b10c:	2101      	movs	r1, #1
 800b10e:	4618      	mov	r0, r3
 800b110:	f001 fa2a 	bl	800c568 <RCCEx_PLL2_Config>
 800b114:	4603      	mov	r3, r0
 800b116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b11a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b122:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b126:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b12a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b132:	2100      	movs	r1, #0
 800b134:	61b9      	str	r1, [r7, #24]
 800b136:	f003 0304 	and.w	r3, r3, #4
 800b13a:	61fb      	str	r3, [r7, #28]
 800b13c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b140:	460b      	mov	r3, r1
 800b142:	4313      	orrs	r3, r2
 800b144:	d011      	beq.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b14a:	3308      	adds	r3, #8
 800b14c:	2102      	movs	r1, #2
 800b14e:	4618      	mov	r0, r3
 800b150:	f001 fa0a 	bl	800c568 <RCCEx_PLL2_Config>
 800b154:	4603      	mov	r3, r0
 800b156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b15a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d003      	beq.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b166:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b172:	2100      	movs	r1, #0
 800b174:	6139      	str	r1, [r7, #16]
 800b176:	f003 0308 	and.w	r3, r3, #8
 800b17a:	617b      	str	r3, [r7, #20]
 800b17c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b180:	460b      	mov	r3, r1
 800b182:	4313      	orrs	r3, r2
 800b184:	d011      	beq.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b18a:	3328      	adds	r3, #40	; 0x28
 800b18c:	2100      	movs	r1, #0
 800b18e:	4618      	mov	r0, r3
 800b190:	f001 fa9c 	bl	800c6cc <RCCEx_PLL3_Config>
 800b194:	4603      	mov	r3, r0
 800b196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800b19a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d003      	beq.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	f003 0310 	and.w	r3, r3, #16
 800b1ba:	60fb      	str	r3, [r7, #12]
 800b1bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	d011      	beq.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ca:	3328      	adds	r3, #40	; 0x28
 800b1cc:	2101      	movs	r1, #1
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f001 fa7c 	bl	800c6cc <RCCEx_PLL3_Config>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b1da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d003      	beq.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	6039      	str	r1, [r7, #0]
 800b1f6:	f003 0320 	and.w	r3, r3, #32
 800b1fa:	607b      	str	r3, [r7, #4]
 800b1fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b200:	460b      	mov	r3, r1
 800b202:	4313      	orrs	r3, r2
 800b204:	d011      	beq.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b20a:	3328      	adds	r3, #40	; 0x28
 800b20c:	2102      	movs	r1, #2
 800b20e:	4618      	mov	r0, r3
 800b210:	f001 fa5c 	bl	800c6cc <RCCEx_PLL3_Config>
 800b214:	4603      	mov	r3, r0
 800b216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800b21a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d003      	beq.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b226:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800b22a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d101      	bne.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800b232:	2300      	movs	r3, #0
 800b234:	e000      	b.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800b236:	2301      	movs	r3, #1
}
 800b238:	4618      	mov	r0, r3
 800b23a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800b23e:	46bd      	mov	sp, r7
 800b240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b244:	58024400 	.word	0x58024400

0800b248 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b090      	sub	sp, #64	; 0x40
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b252:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b256:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b25a:	430b      	orrs	r3, r1
 800b25c:	f040 8094 	bne.w	800b388 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b260:	4b9e      	ldr	r3, [pc, #632]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b264:	f003 0307 	and.w	r3, r3, #7
 800b268:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26c:	2b04      	cmp	r3, #4
 800b26e:	f200 8087 	bhi.w	800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b272:	a201      	add	r2, pc, #4	; (adr r2, 800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b278:	0800b28d 	.word	0x0800b28d
 800b27c:	0800b2b5 	.word	0x0800b2b5
 800b280:	0800b2dd 	.word	0x0800b2dd
 800b284:	0800b379 	.word	0x0800b379
 800b288:	0800b305 	.word	0x0800b305
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b28c:	4b93      	ldr	r3, [pc, #588]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b294:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b298:	d108      	bne.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b29a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f001 f810 	bl	800c2c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2a8:	f000 bd45 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2b0:	f000 bd41 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b2b4:	4b89      	ldr	r3, [pc, #548]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2c0:	d108      	bne.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2c2:	f107 0318 	add.w	r3, r7, #24
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 fd54 	bl	800bd74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2d0:	f000 bd31 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2d8:	f000 bd2d 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2dc:	4b7f      	ldr	r3, [pc, #508]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2e8:	d108      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2ea:	f107 030c 	add.w	r3, r7, #12
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 fe94 	bl	800c01c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2f8:	f000 bd1d 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b300:	f000 bd19 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b304:	4b75      	ldr	r3, [pc, #468]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b308:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b30c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b30e:	4b73      	ldr	r3, [pc, #460]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f003 0304 	and.w	r3, r3, #4
 800b316:	2b04      	cmp	r3, #4
 800b318:	d10c      	bne.n	800b334 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d109      	bne.n	800b334 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b320:	4b6e      	ldr	r3, [pc, #440]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	08db      	lsrs	r3, r3, #3
 800b326:	f003 0303 	and.w	r3, r3, #3
 800b32a:	4a6d      	ldr	r2, [pc, #436]	; (800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b32c:	fa22 f303 	lsr.w	r3, r2, r3
 800b330:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b332:	e01f      	b.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b334:	4b69      	ldr	r3, [pc, #420]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b33c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b340:	d106      	bne.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b344:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b348:	d102      	bne.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b34a:	4b66      	ldr	r3, [pc, #408]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b34c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b34e:	e011      	b.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b350:	4b62      	ldr	r3, [pc, #392]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b35c:	d106      	bne.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b364:	d102      	bne.n	800b36c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b366:	4b60      	ldr	r3, [pc, #384]	; (800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b36a:	e003      	b.n	800b374 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b36c:	2300      	movs	r3, #0
 800b36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b370:	f000 bce1 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b374:	f000 bcdf 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b378:	4b5c      	ldr	r3, [pc, #368]	; (800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b37c:	f000 bcdb 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b380:	2300      	movs	r3, #0
 800b382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b384:	f000 bcd7 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b38c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800b390:	430b      	orrs	r3, r1
 800b392:	f040 80ad 	bne.w	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800b396:	4b51      	ldr	r3, [pc, #324]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b39a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b39e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3a6:	d056      	beq.n	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800b3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3ae:	f200 8090 	bhi.w	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b4:	2bc0      	cmp	r3, #192	; 0xc0
 800b3b6:	f000 8088 	beq.w	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800b3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3bc:	2bc0      	cmp	r3, #192	; 0xc0
 800b3be:	f200 8088 	bhi.w	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c4:	2b80      	cmp	r3, #128	; 0x80
 800b3c6:	d032      	beq.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ca:	2b80      	cmp	r3, #128	; 0x80
 800b3cc:	f200 8081 	bhi.w	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d003      	beq.n	800b3de <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d8:	2b40      	cmp	r3, #64	; 0x40
 800b3da:	d014      	beq.n	800b406 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800b3dc:	e079      	b.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3de:	4b3f      	ldr	r3, [pc, #252]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3ea:	d108      	bne.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f000 ff67 	bl	800c2c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3fa:	f000 bc9c 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3fe:	2300      	movs	r3, #0
 800b400:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b402:	f000 bc98 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b406:	4b35      	ldr	r3, [pc, #212]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b40e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b412:	d108      	bne.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b414:	f107 0318 	add.w	r3, r7, #24
 800b418:	4618      	mov	r0, r3
 800b41a:	f000 fcab 	bl	800bd74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b422:	f000 bc88 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b426:	2300      	movs	r3, #0
 800b428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b42a:	f000 bc84 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b42e:	4b2b      	ldr	r3, [pc, #172]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b43a:	d108      	bne.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b43c:	f107 030c 	add.w	r3, r7, #12
 800b440:	4618      	mov	r0, r3
 800b442:	f000 fdeb 	bl	800c01c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b44a:	f000 bc74 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b44e:	2300      	movs	r3, #0
 800b450:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b452:	f000 bc70 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b456:	4b21      	ldr	r3, [pc, #132]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b45a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b45e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b460:	4b1e      	ldr	r3, [pc, #120]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 0304 	and.w	r3, r3, #4
 800b468:	2b04      	cmp	r3, #4
 800b46a:	d10c      	bne.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800b46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d109      	bne.n	800b486 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b472:	4b1a      	ldr	r3, [pc, #104]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	08db      	lsrs	r3, r3, #3
 800b478:	f003 0303 	and.w	r3, r3, #3
 800b47c:	4a18      	ldr	r2, [pc, #96]	; (800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b47e:	fa22 f303 	lsr.w	r3, r2, r3
 800b482:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b484:	e01f      	b.n	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b486:	4b15      	ldr	r3, [pc, #84]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b48e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b492:	d106      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800b494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b496:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b49a:	d102      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b49c:	4b11      	ldr	r3, [pc, #68]	; (800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b49e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4a0:	e011      	b.n	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4a2:	4b0e      	ldr	r3, [pc, #56]	; (800b4dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4ae:	d106      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800b4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4b6:	d102      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4b8:	4b0b      	ldr	r3, [pc, #44]	; (800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4bc:	e003      	b.n	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b4c2:	f000 bc38 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4c6:	f000 bc36 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b4ca:	4b08      	ldr	r3, [pc, #32]	; (800b4ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4ce:	f000 bc32 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4d6:	f000 bc2e 	b.w	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4da:	bf00      	nop
 800b4dc:	58024400 	.word	0x58024400
 800b4e0:	03d09000 	.word	0x03d09000
 800b4e4:	003d0900 	.word	0x003d0900
 800b4e8:	017d7840 	.word	0x017d7840
 800b4ec:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b4f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4f4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b4f8:	430b      	orrs	r3, r1
 800b4fa:	f040 809c 	bne.w	800b636 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b4fe:	4b9e      	ldr	r3, [pc, #632]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b502:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b506:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b50e:	d054      	beq.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b512:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b516:	f200 808b 	bhi.w	800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b51c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b520:	f000 8083 	beq.w	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800b524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b526:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b52a:	f200 8081 	bhi.w	800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b534:	d02f      	beq.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800b536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b538:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b53c:	d878      	bhi.n	800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800b53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b540:	2b00      	cmp	r3, #0
 800b542:	d004      	beq.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b546:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b54a:	d012      	beq.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b54c:	e070      	b.n	800b630 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b54e:	4b8a      	ldr	r3, [pc, #552]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b556:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b55a:	d107      	bne.n	800b56c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b55c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b560:	4618      	mov	r0, r3
 800b562:	f000 feaf 	bl	800c2c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b568:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b56a:	e3e4      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b56c:	2300      	movs	r3, #0
 800b56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b570:	e3e1      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b572:	4b81      	ldr	r3, [pc, #516]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b57a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b57e:	d107      	bne.n	800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b580:	f107 0318 	add.w	r3, r7, #24
 800b584:	4618      	mov	r0, r3
 800b586:	f000 fbf5 	bl	800bd74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b58e:	e3d2      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b590:	2300      	movs	r3, #0
 800b592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b594:	e3cf      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b596:	4b78      	ldr	r3, [pc, #480]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b59e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5a2:	d107      	bne.n	800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5a4:	f107 030c 	add.w	r3, r7, #12
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f000 fd37 	bl	800c01c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5b2:	e3c0      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5b8:	e3bd      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b5ba:	4b6f      	ldr	r3, [pc, #444]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5c2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b5c4:	4b6c      	ldr	r3, [pc, #432]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 0304 	and.w	r3, r3, #4
 800b5cc:	2b04      	cmp	r3, #4
 800b5ce:	d10c      	bne.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d109      	bne.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5d6:	4b68      	ldr	r3, [pc, #416]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	08db      	lsrs	r3, r3, #3
 800b5dc:	f003 0303 	and.w	r3, r3, #3
 800b5e0:	4a66      	ldr	r2, [pc, #408]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b5e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5e8:	e01e      	b.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b5ea:	4b63      	ldr	r3, [pc, #396]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5f6:	d106      	bne.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5fe:	d102      	bne.n	800b606 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b600:	4b5f      	ldr	r3, [pc, #380]	; (800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b602:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b604:	e010      	b.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b606:	4b5c      	ldr	r3, [pc, #368]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b60e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b612:	d106      	bne.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b61a:	d102      	bne.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b61c:	4b59      	ldr	r3, [pc, #356]	; (800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b61e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b620:	e002      	b.n	800b628 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b622:	2300      	movs	r3, #0
 800b624:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b626:	e386      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b628:	e385      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b62a:	4b57      	ldr	r3, [pc, #348]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b62e:	e382      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b630:	2300      	movs	r3, #0
 800b632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b634:	e37f      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b636:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b63a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b63e:	430b      	orrs	r3, r1
 800b640:	f040 80a7 	bne.w	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b644:	4b4c      	ldr	r3, [pc, #304]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b648:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b64c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b654:	d055      	beq.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b658:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b65c:	f200 8096 	bhi.w	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b662:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b666:	f000 8084 	beq.w	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b670:	f200 808c 	bhi.w	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b67a:	d030      	beq.n	800b6de <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b682:	f200 8083 	bhi.w	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d004      	beq.n	800b696 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b692:	d012      	beq.n	800b6ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b694:	e07a      	b.n	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b696:	4b38      	ldr	r3, [pc, #224]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b69e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6a2:	d107      	bne.n	800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f000 fe0b 	bl	800c2c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6b2:	e340      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6b8:	e33d      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6ba:	4b2f      	ldr	r3, [pc, #188]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6c6:	d107      	bne.n	800b6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6c8:	f107 0318 	add.w	r3, r7, #24
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f000 fb51 	bl	800bd74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6d2:	69bb      	ldr	r3, [r7, #24]
 800b6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6d6:	e32e      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6dc:	e32b      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6de:	4b26      	ldr	r3, [pc, #152]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6ea:	d107      	bne.n	800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6ec:	f107 030c 	add.w	r3, r7, #12
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 fc93 	bl	800c01c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6fa:	e31c      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b700:	e319      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b702:	4b1d      	ldr	r3, [pc, #116]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b706:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b70a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b70c:	4b1a      	ldr	r3, [pc, #104]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f003 0304 	and.w	r3, r3, #4
 800b714:	2b04      	cmp	r3, #4
 800b716:	d10c      	bne.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d109      	bne.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b71e:	4b16      	ldr	r3, [pc, #88]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	08db      	lsrs	r3, r3, #3
 800b724:	f003 0303 	and.w	r3, r3, #3
 800b728:	4a14      	ldr	r2, [pc, #80]	; (800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b72a:	fa22 f303 	lsr.w	r3, r2, r3
 800b72e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b730:	e01e      	b.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b732:	4b11      	ldr	r3, [pc, #68]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b73a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b73e:	d106      	bne.n	800b74e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b746:	d102      	bne.n	800b74e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b748:	4b0d      	ldr	r3, [pc, #52]	; (800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b74a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b74c:	e010      	b.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b74e:	4b0a      	ldr	r3, [pc, #40]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b75a:	d106      	bne.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b75e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b762:	d102      	bne.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b764:	4b07      	ldr	r3, [pc, #28]	; (800b784 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b766:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b768:	e002      	b.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b76e:	e2e2      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b770:	e2e1      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b772:	4b05      	ldr	r3, [pc, #20]	; (800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b774:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b776:	e2de      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b778:	58024400 	.word	0x58024400
 800b77c:	03d09000 	.word	0x03d09000
 800b780:	003d0900 	.word	0x003d0900
 800b784:	017d7840 	.word	0x017d7840
 800b788:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b78c:	2300      	movs	r3, #0
 800b78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b790:	e2d1      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b792:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b796:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b79a:	430b      	orrs	r3, r1
 800b79c:	f040 809c 	bne.w	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b7a0:	4b93      	ldr	r3, [pc, #588]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b7a8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7b0:	d054      	beq.n	800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7b8:	f200 808b 	bhi.w	800b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7c2:	f000 8083 	beq.w	800b8cc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7cc:	f200 8081 	bhi.w	800b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7d6:	d02f      	beq.n	800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7de:	d878      	bhi.n	800b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d004      	beq.n	800b7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7ec:	d012      	beq.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b7ee:	e070      	b.n	800b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b7f0:	4b7f      	ldr	r3, [pc, #508]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b7fc:	d107      	bne.n	800b80e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b802:	4618      	mov	r0, r3
 800b804:	f000 fd5e 	bl	800c2c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b80c:	e293      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b80e:	2300      	movs	r3, #0
 800b810:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b812:	e290      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b814:	4b76      	ldr	r3, [pc, #472]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b81c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b820:	d107      	bne.n	800b832 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b822:	f107 0318 	add.w	r3, r7, #24
 800b826:	4618      	mov	r0, r3
 800b828:	f000 faa4 	bl	800bd74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b82c:	69bb      	ldr	r3, [r7, #24]
 800b82e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b830:	e281      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b832:	2300      	movs	r3, #0
 800b834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b836:	e27e      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b838:	4b6d      	ldr	r3, [pc, #436]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b844:	d107      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b846:	f107 030c 	add.w	r3, r7, #12
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 fbe6 	bl	800c01c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b854:	e26f      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b85a:	e26c      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b85c:	4b64      	ldr	r3, [pc, #400]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b85e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b860:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b864:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b866:	4b62      	ldr	r3, [pc, #392]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f003 0304 	and.w	r3, r3, #4
 800b86e:	2b04      	cmp	r3, #4
 800b870:	d10c      	bne.n	800b88c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b874:	2b00      	cmp	r3, #0
 800b876:	d109      	bne.n	800b88c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b878:	4b5d      	ldr	r3, [pc, #372]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	08db      	lsrs	r3, r3, #3
 800b87e:	f003 0303 	and.w	r3, r3, #3
 800b882:	4a5c      	ldr	r2, [pc, #368]	; (800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b884:	fa22 f303 	lsr.w	r3, r2, r3
 800b888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b88a:	e01e      	b.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b88c:	4b58      	ldr	r3, [pc, #352]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b894:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b898:	d106      	bne.n	800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b89c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8a0:	d102      	bne.n	800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b8a2:	4b55      	ldr	r3, [pc, #340]	; (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8a6:	e010      	b.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b8a8:	4b51      	ldr	r3, [pc, #324]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8b4:	d106      	bne.n	800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8bc:	d102      	bne.n	800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b8be:	4b4f      	ldr	r3, [pc, #316]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8c2:	e002      	b.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b8c8:	e235      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b8ca:	e234      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b8cc:	4b4c      	ldr	r3, [pc, #304]	; (800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b8ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8d0:	e231      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8d6:	e22e      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b8d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8dc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b8e0:	430b      	orrs	r3, r1
 800b8e2:	f040 808f 	bne.w	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b8e6:	4b42      	ldr	r3, [pc, #264]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b8e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ea:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b8ee:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8f6:	d06b      	beq.n	800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b8fe:	d874      	bhi.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b902:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b906:	d056      	beq.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b90e:	d86c      	bhi.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b912:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b916:	d03b      	beq.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b91e:	d864      	bhi.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b926:	d021      	beq.n	800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b92e:	d85c      	bhi.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b932:	2b00      	cmp	r3, #0
 800b934:	d004      	beq.n	800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b93c:	d004      	beq.n	800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b93e:	e054      	b.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b940:	f7fe fa0a 	bl	8009d58 <HAL_RCC_GetPCLK1Freq>
 800b944:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b946:	e1f6      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b948:	4b29      	ldr	r3, [pc, #164]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b954:	d107      	bne.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b956:	f107 0318 	add.w	r3, r7, #24
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 fa0a 	bl	800bd74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b964:	e1e7      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b966:	2300      	movs	r3, #0
 800b968:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b96a:	e1e4      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b96c:	4b20      	ldr	r3, [pc, #128]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b978:	d107      	bne.n	800b98a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b97a:	f107 030c 	add.w	r3, r7, #12
 800b97e:	4618      	mov	r0, r3
 800b980:	f000 fb4c 	bl	800c01c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b988:	e1d5      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b98a:	2300      	movs	r3, #0
 800b98c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b98e:	e1d2      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b990:	4b17      	ldr	r3, [pc, #92]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b04      	cmp	r3, #4
 800b99a:	d109      	bne.n	800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b99c:	4b14      	ldr	r3, [pc, #80]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	08db      	lsrs	r3, r3, #3
 800b9a2:	f003 0303 	and.w	r3, r3, #3
 800b9a6:	4a13      	ldr	r2, [pc, #76]	; (800b9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b9a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9ae:	e1c2      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9b4:	e1bf      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b9b6:	4b0e      	ldr	r3, [pc, #56]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9c2:	d102      	bne.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b9c4:	4b0c      	ldr	r3, [pc, #48]	; (800b9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9c8:	e1b5      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9ce:	e1b2      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b9d0:	4b07      	ldr	r3, [pc, #28]	; (800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9dc:	d102      	bne.n	800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b9de:	4b07      	ldr	r3, [pc, #28]	; (800b9fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9e2:	e1a8      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9e8:	e1a5      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9ee:	e1a2      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b9f0:	58024400 	.word	0x58024400
 800b9f4:	03d09000 	.word	0x03d09000
 800b9f8:	003d0900 	.word	0x003d0900
 800b9fc:	017d7840 	.word	0x017d7840
 800ba00:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ba04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba08:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ba0c:	430b      	orrs	r3, r1
 800ba0e:	d173      	bne.n	800baf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ba10:	4b9c      	ldr	r3, [pc, #624]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ba18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ba1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba20:	d02f      	beq.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ba22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba28:	d863      	bhi.n	800baf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ba2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d004      	beq.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ba30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba36:	d012      	beq.n	800ba5e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ba38:	e05b      	b.n	800baf2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba3a:	4b92      	ldr	r3, [pc, #584]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba46:	d107      	bne.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba48:	f107 0318 	add.w	r3, r7, #24
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f000 f991 	bl	800bd74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba56:	e16e      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba5c:	e16b      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba5e:	4b89      	ldr	r3, [pc, #548]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba6a:	d107      	bne.n	800ba7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba6c:	f107 030c 	add.w	r3, r7, #12
 800ba70:	4618      	mov	r0, r3
 800ba72:	f000 fad3 	bl	800c01c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba7a:	e15c      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba80:	e159      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ba82:	4b80      	ldr	r3, [pc, #512]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ba8a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ba8c:	4b7d      	ldr	r3, [pc, #500]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f003 0304 	and.w	r3, r3, #4
 800ba94:	2b04      	cmp	r3, #4
 800ba96:	d10c      	bne.n	800bab2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ba98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d109      	bne.n	800bab2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba9e:	4b79      	ldr	r3, [pc, #484]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	08db      	lsrs	r3, r3, #3
 800baa4:	f003 0303 	and.w	r3, r3, #3
 800baa8:	4a77      	ldr	r2, [pc, #476]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800baaa:	fa22 f303 	lsr.w	r3, r2, r3
 800baae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bab0:	e01e      	b.n	800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bab2:	4b74      	ldr	r3, [pc, #464]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800babe:	d106      	bne.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800bac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bac6:	d102      	bne.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bac8:	4b70      	ldr	r3, [pc, #448]	; (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800baca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bacc:	e010      	b.n	800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bace:	4b6d      	ldr	r3, [pc, #436]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bada:	d106      	bne.n	800baea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800badc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bae2:	d102      	bne.n	800baea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bae4:	4b6a      	ldr	r3, [pc, #424]	; (800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bae8:	e002      	b.n	800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800baea:	2300      	movs	r3, #0
 800baec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800baee:	e122      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800baf0:	e121      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800baf2:	2300      	movs	r3, #0
 800baf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baf6:	e11e      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800baf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bafc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800bb00:	430b      	orrs	r3, r1
 800bb02:	d133      	bne.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800bb04:	4b5f      	ldr	r3, [pc, #380]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb0c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d004      	beq.n	800bb1e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800bb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb1a:	d012      	beq.n	800bb42 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800bb1c:	e023      	b.n	800bb66 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb1e:	4b59      	ldr	r3, [pc, #356]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb2a:	d107      	bne.n	800bb3c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 fbc7 	bl	800c2c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb3a:	e0fc      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb40:	e0f9      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb42:	4b50      	ldr	r3, [pc, #320]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb4e:	d107      	bne.n	800bb60 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb50:	f107 0318 	add.w	r3, r7, #24
 800bb54:	4618      	mov	r0, r3
 800bb56:	f000 f90d 	bl	800bd74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bb5a:	6a3b      	ldr	r3, [r7, #32]
 800bb5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb5e:	e0ea      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bb60:	2300      	movs	r3, #0
 800bb62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb64:	e0e7      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800bb66:	2300      	movs	r3, #0
 800bb68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb6a:	e0e4      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800bb6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb70:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800bb74:	430b      	orrs	r3, r1
 800bb76:	f040 808d 	bne.w	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800bb7a:	4b42      	ldr	r3, [pc, #264]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bb7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb7e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800bb82:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb8a:	d06b      	beq.n	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800bb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb92:	d874      	bhi.n	800bc7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb9a:	d056      	beq.n	800bc4a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800bb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bba2:	d86c      	bhi.n	800bc7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbaa:	d03b      	beq.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800bbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbb2:	d864      	bhi.n	800bc7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbba:	d021      	beq.n	800bc00 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800bbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbc2:	d85c      	bhi.n	800bc7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800bbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d004      	beq.n	800bbd4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800bbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbd0:	d004      	beq.n	800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800bbd2:	e054      	b.n	800bc7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800bbd4:	f000 f8b8 	bl	800bd48 <HAL_RCCEx_GetD3PCLK1Freq>
 800bbd8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bbda:	e0ac      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbdc:	4b29      	ldr	r3, [pc, #164]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbe8:	d107      	bne.n	800bbfa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbea:	f107 0318 	add.w	r3, r7, #24
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f000 f8c0 	bl	800bd74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbf8:	e09d      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbfe:	e09a      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc00:	4b20      	ldr	r3, [pc, #128]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc0c:	d107      	bne.n	800bc1e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc0e:	f107 030c 	add.w	r3, r7, #12
 800bc12:	4618      	mov	r0, r3
 800bc14:	f000 fa02 	bl	800c01c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc1c:	e08b      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc22:	e088      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc24:	4b17      	ldr	r3, [pc, #92]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 0304 	and.w	r3, r3, #4
 800bc2c:	2b04      	cmp	r3, #4
 800bc2e:	d109      	bne.n	800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc30:	4b14      	ldr	r3, [pc, #80]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	08db      	lsrs	r3, r3, #3
 800bc36:	f003 0303 	and.w	r3, r3, #3
 800bc3a:	4a13      	ldr	r2, [pc, #76]	; (800bc88 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800bc3c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc42:	e078      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc44:	2300      	movs	r3, #0
 800bc46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc48:	e075      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bc4a:	4b0e      	ldr	r3, [pc, #56]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc56:	d102      	bne.n	800bc5e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800bc58:	4b0c      	ldr	r3, [pc, #48]	; (800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800bc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc5c:	e06b      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc62:	e068      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bc64:	4b07      	ldr	r3, [pc, #28]	; (800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc70:	d102      	bne.n	800bc78 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800bc72:	4b07      	ldr	r3, [pc, #28]	; (800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800bc74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc76:	e05e      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc7c:	e05b      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc82:	e058      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bc84:	58024400 	.word	0x58024400
 800bc88:	03d09000 	.word	0x03d09000
 800bc8c:	003d0900 	.word	0x003d0900
 800bc90:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bc94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc98:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800bc9c:	430b      	orrs	r3, r1
 800bc9e:	d148      	bne.n	800bd32 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bca0:	4b27      	ldr	r3, [pc, #156]	; (800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bca4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bca8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcb0:	d02a      	beq.n	800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800bcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcb8:	d838      	bhi.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800bcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d004      	beq.n	800bcca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcc6:	d00d      	beq.n	800bce4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800bcc8:	e030      	b.n	800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bcca:	4b1d      	ldr	r3, [pc, #116]	; (800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bcd6:	d102      	bne.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800bcd8:	4b1a      	ldr	r3, [pc, #104]	; (800bd44 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800bcda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcdc:	e02b      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bcde:	2300      	movs	r3, #0
 800bce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bce2:	e028      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bce4:	4b16      	ldr	r3, [pc, #88]	; (800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcf0:	d107      	bne.n	800bd02 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bcf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f000 fae4 	bl	800c2c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd00:	e019      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd02:	2300      	movs	r3, #0
 800bd04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd06:	e016      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd08:	4b0d      	ldr	r3, [pc, #52]	; (800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd14:	d107      	bne.n	800bd26 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd16:	f107 0318 	add.w	r3, r7, #24
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 f82a 	bl	800bd74 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd24:	e007      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bd26:	2300      	movs	r3, #0
 800bd28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd2a:	e004      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd30:	e001      	b.n	800bd36 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800bd32:	2300      	movs	r3, #0
 800bd34:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800bd36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3740      	adds	r7, #64	; 0x40
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	58024400 	.word	0x58024400
 800bd44:	017d7840 	.word	0x017d7840

0800bd48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bd4c:	f7fd ffd4 	bl	8009cf8 <HAL_RCC_GetHCLKFreq>
 800bd50:	4602      	mov	r2, r0
 800bd52:	4b06      	ldr	r3, [pc, #24]	; (800bd6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bd54:	6a1b      	ldr	r3, [r3, #32]
 800bd56:	091b      	lsrs	r3, r3, #4
 800bd58:	f003 0307 	and.w	r3, r3, #7
 800bd5c:	4904      	ldr	r1, [pc, #16]	; (800bd70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bd5e:	5ccb      	ldrb	r3, [r1, r3]
 800bd60:	f003 031f 	and.w	r3, r3, #31
 800bd64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	58024400 	.word	0x58024400
 800bd70:	08015db4 	.word	0x08015db4

0800bd74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b089      	sub	sp, #36	; 0x24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd7c:	4ba1      	ldr	r3, [pc, #644]	; (800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd80:	f003 0303 	and.w	r3, r3, #3
 800bd84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bd86:	4b9f      	ldr	r3, [pc, #636]	; (800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd8a:	0b1b      	lsrs	r3, r3, #12
 800bd8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bd92:	4b9c      	ldr	r3, [pc, #624]	; (800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd96:	091b      	lsrs	r3, r3, #4
 800bd98:	f003 0301 	and.w	r3, r3, #1
 800bd9c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bd9e:	4b99      	ldr	r3, [pc, #612]	; (800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bda0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bda2:	08db      	lsrs	r3, r3, #3
 800bda4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bda8:	693a      	ldr	r2, [r7, #16]
 800bdaa:	fb02 f303 	mul.w	r3, r2, r3
 800bdae:	ee07 3a90 	vmov	s15, r3
 800bdb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f000 8111 	beq.w	800bfe4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	f000 8083 	beq.w	800bed0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	2b02      	cmp	r3, #2
 800bdce:	f200 80a1 	bhi.w	800bf14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d003      	beq.n	800bde0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d056      	beq.n	800be8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bdde:	e099      	b.n	800bf14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bde0:	4b88      	ldr	r3, [pc, #544]	; (800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f003 0320 	and.w	r3, r3, #32
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d02d      	beq.n	800be48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdec:	4b85      	ldr	r3, [pc, #532]	; (800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	08db      	lsrs	r3, r3, #3
 800bdf2:	f003 0303 	and.w	r3, r3, #3
 800bdf6:	4a84      	ldr	r2, [pc, #528]	; (800c008 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bdf8:	fa22 f303 	lsr.w	r3, r2, r3
 800bdfc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	ee07 3a90 	vmov	s15, r3
 800be04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	ee07 3a90 	vmov	s15, r3
 800be0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be16:	4b7b      	ldr	r3, [pc, #492]	; (800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be1e:	ee07 3a90 	vmov	s15, r3
 800be22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be26:	ed97 6a03 	vldr	s12, [r7, #12]
 800be2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c00c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800be46:	e087      	b.n	800bf58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	ee07 3a90 	vmov	s15, r3
 800be4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c010 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800be56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be5a:	4b6a      	ldr	r3, [pc, #424]	; (800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be62:	ee07 3a90 	vmov	s15, r3
 800be66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c00c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800be72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be8a:	e065      	b.n	800bf58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	ee07 3a90 	vmov	s15, r3
 800be92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c014 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800be9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be9e:	4b59      	ldr	r3, [pc, #356]	; (800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bea6:	ee07 3a90 	vmov	s15, r3
 800beaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800beae:	ed97 6a03 	vldr	s12, [r7, #12]
 800beb2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c00c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800beb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800beba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bece:	e043      	b.n	800bf58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	ee07 3a90 	vmov	s15, r3
 800bed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c018 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bee2:	4b48      	ldr	r3, [pc, #288]	; (800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beea:	ee07 3a90 	vmov	s15, r3
 800beee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bef2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bef6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c00c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800befa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800befe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf12:	e021      	b.n	800bf58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	ee07 3a90 	vmov	s15, r3
 800bf1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c014 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bf22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf26:	4b37      	ldr	r3, [pc, #220]	; (800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf2e:	ee07 3a90 	vmov	s15, r3
 800bf32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf36:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c00c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bf3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bf58:	4b2a      	ldr	r3, [pc, #168]	; (800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5c:	0a5b      	lsrs	r3, r3, #9
 800bf5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf62:	ee07 3a90 	vmov	s15, r3
 800bf66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf72:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf7e:	ee17 2a90 	vmov	r2, s15
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bf86:	4b1f      	ldr	r3, [pc, #124]	; (800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bf88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf8a:	0c1b      	lsrs	r3, r3, #16
 800bf8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf90:	ee07 3a90 	vmov	s15, r3
 800bf94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfa0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfac:	ee17 2a90 	vmov	r2, s15
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bfb4:	4b13      	ldr	r3, [pc, #76]	; (800c004 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bfb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb8:	0e1b      	lsrs	r3, r3, #24
 800bfba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfbe:	ee07 3a90 	vmov	s15, r3
 800bfc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bfca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bfce:	edd7 6a07 	vldr	s13, [r7, #28]
 800bfd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfda:	ee17 2a90 	vmov	r2, s15
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bfe2:	e008      	b.n	800bff6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	609a      	str	r2, [r3, #8]
}
 800bff6:	bf00      	nop
 800bff8:	3724      	adds	r7, #36	; 0x24
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr
 800c002:	bf00      	nop
 800c004:	58024400 	.word	0x58024400
 800c008:	03d09000 	.word	0x03d09000
 800c00c:	46000000 	.word	0x46000000
 800c010:	4c742400 	.word	0x4c742400
 800c014:	4a742400 	.word	0x4a742400
 800c018:	4bbebc20 	.word	0x4bbebc20

0800c01c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b089      	sub	sp, #36	; 0x24
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c024:	4ba1      	ldr	r3, [pc, #644]	; (800c2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c028:	f003 0303 	and.w	r3, r3, #3
 800c02c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c02e:	4b9f      	ldr	r3, [pc, #636]	; (800c2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c032:	0d1b      	lsrs	r3, r3, #20
 800c034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c038:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c03a:	4b9c      	ldr	r3, [pc, #624]	; (800c2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03e:	0a1b      	lsrs	r3, r3, #8
 800c040:	f003 0301 	and.w	r3, r3, #1
 800c044:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c046:	4b99      	ldr	r3, [pc, #612]	; (800c2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c04a:	08db      	lsrs	r3, r3, #3
 800c04c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	fb02 f303 	mul.w	r3, r2, r3
 800c056:	ee07 3a90 	vmov	s15, r3
 800c05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c05e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	2b00      	cmp	r3, #0
 800c066:	f000 8111 	beq.w	800c28c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	2b02      	cmp	r3, #2
 800c06e:	f000 8083 	beq.w	800c178 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c072:	69bb      	ldr	r3, [r7, #24]
 800c074:	2b02      	cmp	r3, #2
 800c076:	f200 80a1 	bhi.w	800c1bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c07a:	69bb      	ldr	r3, [r7, #24]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d003      	beq.n	800c088 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	2b01      	cmp	r3, #1
 800c084:	d056      	beq.n	800c134 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c086:	e099      	b.n	800c1bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c088:	4b88      	ldr	r3, [pc, #544]	; (800c2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f003 0320 	and.w	r3, r3, #32
 800c090:	2b00      	cmp	r3, #0
 800c092:	d02d      	beq.n	800c0f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c094:	4b85      	ldr	r3, [pc, #532]	; (800c2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	08db      	lsrs	r3, r3, #3
 800c09a:	f003 0303 	and.w	r3, r3, #3
 800c09e:	4a84      	ldr	r2, [pc, #528]	; (800c2b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c0a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c0a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	ee07 3a90 	vmov	s15, r3
 800c0ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	ee07 3a90 	vmov	s15, r3
 800c0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0be:	4b7b      	ldr	r3, [pc, #492]	; (800c2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0c6:	ee07 3a90 	vmov	s15, r3
 800c0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c0ee:	e087      	b.n	800c200 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	ee07 3a90 	vmov	s15, r3
 800c0f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c2b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c0fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c102:	4b6a      	ldr	r3, [pc, #424]	; (800c2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c10a:	ee07 3a90 	vmov	s15, r3
 800c10e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c112:	ed97 6a03 	vldr	s12, [r7, #12]
 800c116:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c11a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c11e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c12e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c132:	e065      	b.n	800c200 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	ee07 3a90 	vmov	s15, r3
 800c13a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c13e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c2bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c146:	4b59      	ldr	r3, [pc, #356]	; (800c2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c14a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c14e:	ee07 3a90 	vmov	s15, r3
 800c152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c156:	ed97 6a03 	vldr	s12, [r7, #12]
 800c15a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c15e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c16a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c16e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c176:	e043      	b.n	800c200 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	ee07 3a90 	vmov	s15, r3
 800c17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c182:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c18a:	4b48      	ldr	r3, [pc, #288]	; (800c2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c192:	ee07 3a90 	vmov	s15, r3
 800c196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c19a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c19e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1ba:	e021      	b.n	800c200 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	ee07 3a90 	vmov	s15, r3
 800c1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c2bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c1ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ce:	4b37      	ldr	r3, [pc, #220]	; (800c2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d6:	ee07 3a90 	vmov	s15, r3
 800c1da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c2b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c1e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c1fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c200:	4b2a      	ldr	r3, [pc, #168]	; (800c2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c204:	0a5b      	lsrs	r3, r3, #9
 800c206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c20a:	ee07 3a90 	vmov	s15, r3
 800c20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c21a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c21e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c226:	ee17 2a90 	vmov	r2, s15
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c22e:	4b1f      	ldr	r3, [pc, #124]	; (800c2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c232:	0c1b      	lsrs	r3, r3, #16
 800c234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c238:	ee07 3a90 	vmov	s15, r3
 800c23c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c244:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c248:	edd7 6a07 	vldr	s13, [r7, #28]
 800c24c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c254:	ee17 2a90 	vmov	r2, s15
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c25c:	4b13      	ldr	r3, [pc, #76]	; (800c2ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c260:	0e1b      	lsrs	r3, r3, #24
 800c262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c266:	ee07 3a90 	vmov	s15, r3
 800c26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c26e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c272:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c276:	edd7 6a07 	vldr	s13, [r7, #28]
 800c27a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c27e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c282:	ee17 2a90 	vmov	r2, s15
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c28a:	e008      	b.n	800c29e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	609a      	str	r2, [r3, #8]
}
 800c29e:	bf00      	nop
 800c2a0:	3724      	adds	r7, #36	; 0x24
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	58024400 	.word	0x58024400
 800c2b0:	03d09000 	.word	0x03d09000
 800c2b4:	46000000 	.word	0x46000000
 800c2b8:	4c742400 	.word	0x4c742400
 800c2bc:	4a742400 	.word	0x4a742400
 800c2c0:	4bbebc20 	.word	0x4bbebc20

0800c2c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b089      	sub	sp, #36	; 0x24
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c2cc:	4ba0      	ldr	r3, [pc, #640]	; (800c550 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2d0:	f003 0303 	and.w	r3, r3, #3
 800c2d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c2d6:	4b9e      	ldr	r3, [pc, #632]	; (800c550 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2da:	091b      	lsrs	r3, r3, #4
 800c2dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c2e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c2e2:	4b9b      	ldr	r3, [pc, #620]	; (800c550 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2e6:	f003 0301 	and.w	r3, r3, #1
 800c2ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c2ec:	4b98      	ldr	r3, [pc, #608]	; (800c550 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2f0:	08db      	lsrs	r3, r3, #3
 800c2f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2f6:	693a      	ldr	r2, [r7, #16]
 800c2f8:	fb02 f303 	mul.w	r3, r2, r3
 800c2fc:	ee07 3a90 	vmov	s15, r3
 800c300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c304:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f000 8111 	beq.w	800c532 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	2b02      	cmp	r3, #2
 800c314:	f000 8083 	beq.w	800c41e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c318:	69bb      	ldr	r3, [r7, #24]
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	f200 80a1 	bhi.w	800c462 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d003      	beq.n	800c32e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d056      	beq.n	800c3da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c32c:	e099      	b.n	800c462 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c32e:	4b88      	ldr	r3, [pc, #544]	; (800c550 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f003 0320 	and.w	r3, r3, #32
 800c336:	2b00      	cmp	r3, #0
 800c338:	d02d      	beq.n	800c396 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c33a:	4b85      	ldr	r3, [pc, #532]	; (800c550 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	08db      	lsrs	r3, r3, #3
 800c340:	f003 0303 	and.w	r3, r3, #3
 800c344:	4a83      	ldr	r2, [pc, #524]	; (800c554 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c346:	fa22 f303 	lsr.w	r3, r2, r3
 800c34a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	ee07 3a90 	vmov	s15, r3
 800c352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	ee07 3a90 	vmov	s15, r3
 800c35c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c364:	4b7a      	ldr	r3, [pc, #488]	; (800c550 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c36c:	ee07 3a90 	vmov	s15, r3
 800c370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c374:	ed97 6a03 	vldr	s12, [r7, #12]
 800c378:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c558 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c37c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c380:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c384:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c388:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c38c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c390:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c394:	e087      	b.n	800c4a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	ee07 3a90 	vmov	s15, r3
 800c39c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c55c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c3a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3a8:	4b69      	ldr	r3, [pc, #420]	; (800c550 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3b0:	ee07 3a90 	vmov	s15, r3
 800c3b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c558 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c3c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c3d8:	e065      	b.n	800c4a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	ee07 3a90 	vmov	s15, r3
 800c3e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c560 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c3e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3ec:	4b58      	ldr	r3, [pc, #352]	; (800c550 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3f4:	ee07 3a90 	vmov	s15, r3
 800c3f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c400:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c558 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c404:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c408:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c40c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c410:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c414:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c418:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c41c:	e043      	b.n	800c4a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	ee07 3a90 	vmov	s15, r3
 800c424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c428:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c564 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c42c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c430:	4b47      	ldr	r3, [pc, #284]	; (800c550 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c438:	ee07 3a90 	vmov	s15, r3
 800c43c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c440:	ed97 6a03 	vldr	s12, [r7, #12]
 800c444:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c558 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c448:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c44c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c450:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c454:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c45c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c460:	e021      	b.n	800c4a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	ee07 3a90 	vmov	s15, r3
 800c468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c46c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c55c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c474:	4b36      	ldr	r3, [pc, #216]	; (800c550 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c47c:	ee07 3a90 	vmov	s15, r3
 800c480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c484:	ed97 6a03 	vldr	s12, [r7, #12]
 800c488:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c558 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c48c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c494:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c49c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c4a4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c4a6:	4b2a      	ldr	r3, [pc, #168]	; (800c550 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4aa:	0a5b      	lsrs	r3, r3, #9
 800c4ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4b0:	ee07 3a90 	vmov	s15, r3
 800c4b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4cc:	ee17 2a90 	vmov	r2, s15
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c4d4:	4b1e      	ldr	r3, [pc, #120]	; (800c550 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4d8:	0c1b      	lsrs	r3, r3, #16
 800c4da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4de:	ee07 3a90 	vmov	s15, r3
 800c4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c4ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800c4f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4fa:	ee17 2a90 	vmov	r2, s15
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c502:	4b13      	ldr	r3, [pc, #76]	; (800c550 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c506:	0e1b      	lsrs	r3, r3, #24
 800c508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c50c:	ee07 3a90 	vmov	s15, r3
 800c510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c518:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c51c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c528:	ee17 2a90 	vmov	r2, s15
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c530:	e008      	b.n	800c544 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2200      	movs	r2, #0
 800c536:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2200      	movs	r2, #0
 800c542:	609a      	str	r2, [r3, #8]
}
 800c544:	bf00      	nop
 800c546:	3724      	adds	r7, #36	; 0x24
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr
 800c550:	58024400 	.word	0x58024400
 800c554:	03d09000 	.word	0x03d09000
 800c558:	46000000 	.word	0x46000000
 800c55c:	4c742400 	.word	0x4c742400
 800c560:	4a742400 	.word	0x4a742400
 800c564:	4bbebc20 	.word	0x4bbebc20

0800c568 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c576:	4b53      	ldr	r3, [pc, #332]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c57a:	f003 0303 	and.w	r3, r3, #3
 800c57e:	2b03      	cmp	r3, #3
 800c580:	d101      	bne.n	800c586 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	e099      	b.n	800c6ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c586:	4b4f      	ldr	r3, [pc, #316]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a4e      	ldr	r2, [pc, #312]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c58c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c592:	f7f6 fcd7 	bl	8002f44 <HAL_GetTick>
 800c596:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c598:	e008      	b.n	800c5ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c59a:	f7f6 fcd3 	bl	8002f44 <HAL_GetTick>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d901      	bls.n	800c5ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	e086      	b.n	800c6ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c5ac:	4b45      	ldr	r3, [pc, #276]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1f0      	bne.n	800c59a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c5b8:	4b42      	ldr	r3, [pc, #264]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c5ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	031b      	lsls	r3, r3, #12
 800c5c6:	493f      	ldr	r1, [pc, #252]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	628b      	str	r3, [r1, #40]	; 0x28
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	025b      	lsls	r3, r3, #9
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	431a      	orrs	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	041b      	lsls	r3, r3, #16
 800c5ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c5ee:	431a      	orrs	r2, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	691b      	ldr	r3, [r3, #16]
 800c5f4:	3b01      	subs	r3, #1
 800c5f6:	061b      	lsls	r3, r3, #24
 800c5f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c5fc:	4931      	ldr	r1, [pc, #196]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c5fe:	4313      	orrs	r3, r2
 800c600:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c602:	4b30      	ldr	r3, [pc, #192]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c606:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	695b      	ldr	r3, [r3, #20]
 800c60e:	492d      	ldr	r1, [pc, #180]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c610:	4313      	orrs	r3, r2
 800c612:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c614:	4b2b      	ldr	r3, [pc, #172]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c618:	f023 0220 	bic.w	r2, r3, #32
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	699b      	ldr	r3, [r3, #24]
 800c620:	4928      	ldr	r1, [pc, #160]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c622:	4313      	orrs	r3, r2
 800c624:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c626:	4b27      	ldr	r3, [pc, #156]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62a:	4a26      	ldr	r2, [pc, #152]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c62c:	f023 0310 	bic.w	r3, r3, #16
 800c630:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c632:	4b24      	ldr	r3, [pc, #144]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c636:	4b24      	ldr	r3, [pc, #144]	; (800c6c8 <RCCEx_PLL2_Config+0x160>)
 800c638:	4013      	ands	r3, r2
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	69d2      	ldr	r2, [r2, #28]
 800c63e:	00d2      	lsls	r2, r2, #3
 800c640:	4920      	ldr	r1, [pc, #128]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c642:	4313      	orrs	r3, r2
 800c644:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c646:	4b1f      	ldr	r3, [pc, #124]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64a:	4a1e      	ldr	r2, [pc, #120]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c64c:	f043 0310 	orr.w	r3, r3, #16
 800c650:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d106      	bne.n	800c666 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c658:	4b1a      	ldr	r3, [pc, #104]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65c:	4a19      	ldr	r2, [pc, #100]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c65e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c662:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c664:	e00f      	b.n	800c686 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d106      	bne.n	800c67a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c66c:	4b15      	ldr	r3, [pc, #84]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c670:	4a14      	ldr	r2, [pc, #80]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c676:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c678:	e005      	b.n	800c686 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c67a:	4b12      	ldr	r3, [pc, #72]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c67e:	4a11      	ldr	r2, [pc, #68]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c684:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c686:	4b0f      	ldr	r3, [pc, #60]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a0e      	ldr	r2, [pc, #56]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c68c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c692:	f7f6 fc57 	bl	8002f44 <HAL_GetTick>
 800c696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c698:	e008      	b.n	800c6ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c69a:	f7f6 fc53 	bl	8002f44 <HAL_GetTick>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	1ad3      	subs	r3, r2, r3
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d901      	bls.n	800c6ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c6a8:	2303      	movs	r3, #3
 800c6aa:	e006      	b.n	800c6ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c6ac:	4b05      	ldr	r3, [pc, #20]	; (800c6c4 <RCCEx_PLL2_Config+0x15c>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d0f0      	beq.n	800c69a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	58024400 	.word	0x58024400
 800c6c8:	ffff0007 	.word	0xffff0007

0800c6cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c6da:	4b53      	ldr	r3, [pc, #332]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6de:	f003 0303 	and.w	r3, r3, #3
 800c6e2:	2b03      	cmp	r3, #3
 800c6e4:	d101      	bne.n	800c6ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e099      	b.n	800c81e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c6ea:	4b4f      	ldr	r3, [pc, #316]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4a4e      	ldr	r2, [pc, #312]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c6f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6f6:	f7f6 fc25 	bl	8002f44 <HAL_GetTick>
 800c6fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c6fc:	e008      	b.n	800c710 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c6fe:	f7f6 fc21 	bl	8002f44 <HAL_GetTick>
 800c702:	4602      	mov	r2, r0
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	1ad3      	subs	r3, r2, r3
 800c708:	2b02      	cmp	r3, #2
 800c70a:	d901      	bls.n	800c710 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c70c:	2303      	movs	r3, #3
 800c70e:	e086      	b.n	800c81e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c710:	4b45      	ldr	r3, [pc, #276]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1f0      	bne.n	800c6fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c71c:	4b42      	ldr	r3, [pc, #264]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c720:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	051b      	lsls	r3, r3, #20
 800c72a:	493f      	ldr	r1, [pc, #252]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c72c:	4313      	orrs	r3, r2
 800c72e:	628b      	str	r3, [r1, #40]	; 0x28
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	3b01      	subs	r3, #1
 800c736:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	3b01      	subs	r3, #1
 800c740:	025b      	lsls	r3, r3, #9
 800c742:	b29b      	uxth	r3, r3
 800c744:	431a      	orrs	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	3b01      	subs	r3, #1
 800c74c:	041b      	lsls	r3, r3, #16
 800c74e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c752:	431a      	orrs	r2, r3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	691b      	ldr	r3, [r3, #16]
 800c758:	3b01      	subs	r3, #1
 800c75a:	061b      	lsls	r3, r3, #24
 800c75c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c760:	4931      	ldr	r1, [pc, #196]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c762:	4313      	orrs	r3, r2
 800c764:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c766:	4b30      	ldr	r3, [pc, #192]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c76a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	695b      	ldr	r3, [r3, #20]
 800c772:	492d      	ldr	r1, [pc, #180]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c774:	4313      	orrs	r3, r2
 800c776:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c778:	4b2b      	ldr	r3, [pc, #172]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c77c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	699b      	ldr	r3, [r3, #24]
 800c784:	4928      	ldr	r1, [pc, #160]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c786:	4313      	orrs	r3, r2
 800c788:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c78a:	4b27      	ldr	r3, [pc, #156]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78e:	4a26      	ldr	r2, [pc, #152]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c794:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c796:	4b24      	ldr	r3, [pc, #144]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c79a:	4b24      	ldr	r3, [pc, #144]	; (800c82c <RCCEx_PLL3_Config+0x160>)
 800c79c:	4013      	ands	r3, r2
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	69d2      	ldr	r2, [r2, #28]
 800c7a2:	00d2      	lsls	r2, r2, #3
 800c7a4:	4920      	ldr	r1, [pc, #128]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c7aa:	4b1f      	ldr	r3, [pc, #124]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ae:	4a1e      	ldr	r2, [pc, #120]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d106      	bne.n	800c7ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c7bc:	4b1a      	ldr	r3, [pc, #104]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c0:	4a19      	ldr	r2, [pc, #100]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c7c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c7c8:	e00f      	b.n	800c7ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d106      	bne.n	800c7de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c7d0:	4b15      	ldr	r3, [pc, #84]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d4:	4a14      	ldr	r2, [pc, #80]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c7da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c7dc:	e005      	b.n	800c7ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c7de:	4b12      	ldr	r3, [pc, #72]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e2:	4a11      	ldr	r2, [pc, #68]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c7ea:	4b0f      	ldr	r3, [pc, #60]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a0e      	ldr	r2, [pc, #56]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c7f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7f6:	f7f6 fba5 	bl	8002f44 <HAL_GetTick>
 800c7fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c7fc:	e008      	b.n	800c810 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c7fe:	f7f6 fba1 	bl	8002f44 <HAL_GetTick>
 800c802:	4602      	mov	r2, r0
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	2b02      	cmp	r3, #2
 800c80a:	d901      	bls.n	800c810 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e006      	b.n	800c81e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c810:	4b05      	ldr	r3, [pc, #20]	; (800c828 <RCCEx_PLL3_Config+0x15c>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d0f0      	beq.n	800c7fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3710      	adds	r7, #16
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	58024400 	.word	0x58024400
 800c82c:	ffff0007 	.word	0xffff0007

0800c830 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d101      	bne.n	800c842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c83e:	2301      	movs	r3, #1
 800c840:	e10f      	b.n	800ca62 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a87      	ldr	r2, [pc, #540]	; (800ca6c <HAL_SPI_Init+0x23c>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d00f      	beq.n	800c872 <HAL_SPI_Init+0x42>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a86      	ldr	r2, [pc, #536]	; (800ca70 <HAL_SPI_Init+0x240>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d00a      	beq.n	800c872 <HAL_SPI_Init+0x42>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a84      	ldr	r2, [pc, #528]	; (800ca74 <HAL_SPI_Init+0x244>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d005      	beq.n	800c872 <HAL_SPI_Init+0x42>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	2b0f      	cmp	r3, #15
 800c86c:	d901      	bls.n	800c872 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c86e:	2301      	movs	r3, #1
 800c870:	e0f7      	b.n	800ca62 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 fc12 	bl	800d09c <SPI_GetPacketSize>
 800c878:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	4a7b      	ldr	r2, [pc, #492]	; (800ca6c <HAL_SPI_Init+0x23c>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d00c      	beq.n	800c89e <HAL_SPI_Init+0x6e>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a79      	ldr	r2, [pc, #484]	; (800ca70 <HAL_SPI_Init+0x240>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d007      	beq.n	800c89e <HAL_SPI_Init+0x6e>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a78      	ldr	r2, [pc, #480]	; (800ca74 <HAL_SPI_Init+0x244>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d002      	beq.n	800c89e <HAL_SPI_Init+0x6e>
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b08      	cmp	r3, #8
 800c89c:	d811      	bhi.n	800c8c2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c8a2:	4a72      	ldr	r2, [pc, #456]	; (800ca6c <HAL_SPI_Init+0x23c>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d009      	beq.n	800c8bc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a70      	ldr	r2, [pc, #448]	; (800ca70 <HAL_SPI_Init+0x240>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d004      	beq.n	800c8bc <HAL_SPI_Init+0x8c>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a6f      	ldr	r2, [pc, #444]	; (800ca74 <HAL_SPI_Init+0x244>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d104      	bne.n	800c8c6 <HAL_SPI_Init+0x96>
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2b10      	cmp	r3, #16
 800c8c0:	d901      	bls.n	800c8c6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	e0cd      	b.n	800ca62 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d106      	bne.n	800c8e0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7f5 fe62 	bl	80025a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2202      	movs	r2, #2
 800c8e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f022 0201 	bic.w	r2, r2, #1
 800c8f6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	689b      	ldr	r3, [r3, #8]
 800c8fe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c902:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	699b      	ldr	r3, [r3, #24]
 800c908:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c90c:	d119      	bne.n	800c942 <HAL_SPI_Init+0x112>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c916:	d103      	bne.n	800c920 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d008      	beq.n	800c932 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c924:	2b00      	cmp	r3, #0
 800c926:	d10c      	bne.n	800c942 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c92c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c930:	d107      	bne.n	800c942 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c940:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00f      	beq.n	800c96e <HAL_SPI_Init+0x13e>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	2b06      	cmp	r3, #6
 800c954:	d90b      	bls.n	800c96e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	430a      	orrs	r2, r1
 800c96a:	601a      	str	r2, [r3, #0]
 800c96c:	e007      	b.n	800c97e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c97c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	69da      	ldr	r2, [r3, #28]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c986:	431a      	orrs	r2, r3
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	431a      	orrs	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c990:	ea42 0103 	orr.w	r1, r2, r3
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68da      	ldr	r2, [r3, #12]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	430a      	orrs	r2, r1
 800c99e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a8:	431a      	orrs	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ae:	431a      	orrs	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	699b      	ldr	r3, [r3, #24]
 800c9b4:	431a      	orrs	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	691b      	ldr	r3, [r3, #16]
 800c9ba:	431a      	orrs	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	695b      	ldr	r3, [r3, #20]
 800c9c0:	431a      	orrs	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	431a      	orrs	r2, r3
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	431a      	orrs	r2, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9d2:	431a      	orrs	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	431a      	orrs	r2, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9de:	ea42 0103 	orr.w	r1, r2, r3
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	430a      	orrs	r2, r1
 800c9ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d113      	bne.n	800ca1e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ca1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f022 0201 	bic.w	r2, r2, #1
 800ca2c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d00a      	beq.n	800ca50 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	430a      	orrs	r2, r1
 800ca4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2200      	movs	r2, #0
 800ca54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	40013000 	.word	0x40013000
 800ca70:	40003800 	.word	0x40003800
 800ca74:	40003c00 	.word	0x40003c00

0800ca78 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b088      	sub	sp, #32
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	603b      	str	r3, [r7, #0]
 800ca84:	4613      	mov	r3, r2
 800ca86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca8c:	095b      	lsrs	r3, r3, #5
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	3301      	adds	r3, #1
 800ca92:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	3330      	adds	r3, #48	; 0x30
 800ca9a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ca9c:	f7f6 fa52 	bl	8002f44 <HAL_GetTick>
 800caa0:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d001      	beq.n	800cab2 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800caae:	2302      	movs	r3, #2
 800cab0:	e250      	b.n	800cf54 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d002      	beq.n	800cabe <HAL_SPI_Receive+0x46>
 800cab8:	88fb      	ldrh	r3, [r7, #6]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d101      	bne.n	800cac2 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e248      	b.n	800cf54 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d101      	bne.n	800cad0 <HAL_SPI_Receive+0x58>
 800cacc:	2302      	movs	r3, #2
 800cace:	e241      	b.n	800cf54 <HAL_SPI_Receive+0x4dc>
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2201      	movs	r2, #1
 800cad4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2204      	movs	r2, #4
 800cadc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	88fa      	ldrh	r2, [r7, #6]
 800caf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	88fa      	ldrh	r2, [r7, #6]
 800cafa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2200      	movs	r2, #0
 800cb02:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2200      	movs	r2, #0
 800cb08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2200      	movs	r2, #0
 800cb18:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cb28:	d108      	bne.n	800cb3c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb38:	601a      	str	r2, [r3, #0]
 800cb3a:	e009      	b.n	800cb50 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800cb4e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	685a      	ldr	r2, [r3, #4]
 800cb56:	4b95      	ldr	r3, [pc, #596]	; (800cdac <HAL_SPI_Receive+0x334>)
 800cb58:	4013      	ands	r3, r2
 800cb5a:	88f9      	ldrh	r1, [r7, #6]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	6812      	ldr	r2, [r2, #0]
 800cb60:	430b      	orrs	r3, r1
 800cb62:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f042 0201 	orr.w	r2, r2, #1
 800cb72:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb7c:	d107      	bne.n	800cb8e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cb8c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	68db      	ldr	r3, [r3, #12]
 800cb92:	2b0f      	cmp	r3, #15
 800cb94:	d96c      	bls.n	800cc70 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cb96:	e064      	b.n	800cc62 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	695b      	ldr	r3, [r3, #20]
 800cb9e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	695b      	ldr	r3, [r3, #20]
 800cba6:	f003 0301 	and.w	r3, r3, #1
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d114      	bne.n	800cbd8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cbb8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbbe:	1d1a      	adds	r2, r3, #4
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	3b01      	subs	r3, #1
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cbd6:	e044      	b.n	800cc62 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	8bfa      	ldrh	r2, [r7, #30]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d919      	bls.n	800cc1a <HAL_SPI_Receive+0x1a2>
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d014      	beq.n	800cc1a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbf8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cbfa:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc00:	1d1a      	adds	r2, r3, #4
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	3b01      	subs	r3, #1
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cc18:	e023      	b.n	800cc62 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc1a:	f7f6 f993 	bl	8002f44 <HAL_GetTick>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	1ad3      	subs	r3, r2, r3
 800cc24:	683a      	ldr	r2, [r7, #0]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d803      	bhi.n	800cc32 <HAL_SPI_Receive+0x1ba>
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc30:	d102      	bne.n	800cc38 <HAL_SPI_Receive+0x1c0>
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d114      	bne.n	800cc62 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	f000 f98f 	bl	800cf5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2201      	movs	r2, #1
 800cc52:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cc5e:	2303      	movs	r3, #3
 800cc60:	e178      	b.n	800cf54 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d194      	bne.n	800cb98 <HAL_SPI_Receive+0x120>
 800cc6e:	e15e      	b.n	800cf2e <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	2b07      	cmp	r3, #7
 800cc76:	f240 8153 	bls.w	800cf20 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800cc7a:	e08f      	b.n	800cd9c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	695b      	ldr	r3, [r3, #20]
 800cc82:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	695b      	ldr	r3, [r3, #20]
 800cc8a:	f003 0301 	and.w	r3, r3, #1
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d114      	bne.n	800ccbc <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc96:	69ba      	ldr	r2, [r7, #24]
 800cc98:	8812      	ldrh	r2, [r2, #0]
 800cc9a:	b292      	uxth	r2, r2
 800cc9c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cca2:	1c9a      	adds	r2, r3, #2
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ccae:	b29b      	uxth	r3, r3
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ccba:	e06f      	b.n	800cd9c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ccc2:	b29b      	uxth	r3, r3
 800ccc4:	8bfa      	ldrh	r2, [r7, #30]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d924      	bls.n	800cd14 <HAL_SPI_Receive+0x29c>
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d01f      	beq.n	800cd14 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccd8:	69ba      	ldr	r2, [r7, #24]
 800ccda:	8812      	ldrh	r2, [r2, #0]
 800ccdc:	b292      	uxth	r2, r2
 800ccde:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cce4:	1c9a      	adds	r2, r3, #2
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccee:	69ba      	ldr	r2, [r7, #24]
 800ccf0:	8812      	ldrh	r2, [r2, #0]
 800ccf2:	b292      	uxth	r2, r2
 800ccf4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccfa:	1c9a      	adds	r2, r3, #2
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	3b02      	subs	r3, #2
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cd12:	e043      	b.n	800cd9c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d119      	bne.n	800cd54 <HAL_SPI_Receive+0x2dc>
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d014      	beq.n	800cd54 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd2e:	69ba      	ldr	r2, [r7, #24]
 800cd30:	8812      	ldrh	r2, [r2, #0]
 800cd32:	b292      	uxth	r2, r2
 800cd34:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd3a:	1c9a      	adds	r2, r3, #2
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cd46:	b29b      	uxth	r3, r3
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cd52:	e023      	b.n	800cd9c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd54:	f7f6 f8f6 	bl	8002f44 <HAL_GetTick>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	1ad3      	subs	r3, r2, r3
 800cd5e:	683a      	ldr	r2, [r7, #0]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d803      	bhi.n	800cd6c <HAL_SPI_Receive+0x2f4>
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd6a:	d102      	bne.n	800cd72 <HAL_SPI_Receive+0x2fa>
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d114      	bne.n	800cd9c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cd72:	68f8      	ldr	r0, [r7, #12]
 800cd74:	f000 f8f2 	bl	800cf5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2200      	movs	r2, #0
 800cd94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cd98:	2303      	movs	r3, #3
 800cd9a:	e0db      	b.n	800cf54 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f47f af69 	bne.w	800cc7c <HAL_SPI_Receive+0x204>
 800cdaa:	e0c0      	b.n	800cf2e <HAL_SPI_Receive+0x4b6>
 800cdac:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	695b      	ldr	r3, [r3, #20]
 800cdb6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	695b      	ldr	r3, [r3, #20]
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d117      	bne.n	800cdf6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cdd2:	7812      	ldrb	r2, [r2, #0]
 800cdd4:	b2d2      	uxtb	r2, r2
 800cdd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cddc:	1c5a      	adds	r2, r3, #1
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	3b01      	subs	r3, #1
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800cdf4:	e094      	b.n	800cf20 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	8bfa      	ldrh	r2, [r7, #30]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d946      	bls.n	800ce92 <HAL_SPI_Receive+0x41a>
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d041      	beq.n	800ce92 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce1a:	7812      	ldrb	r2, [r2, #0]
 800ce1c:	b2d2      	uxtb	r2, r2
 800ce1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce24:	1c5a      	adds	r2, r3, #1
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce36:	7812      	ldrb	r2, [r2, #0]
 800ce38:	b2d2      	uxtb	r2, r2
 800ce3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce40:	1c5a      	adds	r2, r3, #1
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce52:	7812      	ldrb	r2, [r2, #0]
 800ce54:	b2d2      	uxtb	r2, r2
 800ce56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce5c:	1c5a      	adds	r2, r3, #1
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce6e:	7812      	ldrb	r2, [r2, #0]
 800ce70:	b2d2      	uxtb	r2, r2
 800ce72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce78:	1c5a      	adds	r2, r3, #1
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	3b04      	subs	r3, #4
 800ce88:	b29a      	uxth	r2, r3
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ce90:	e046      	b.n	800cf20 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	2b03      	cmp	r3, #3
 800ce9c:	d81c      	bhi.n	800ced8 <HAL_SPI_Receive+0x460>
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d017      	beq.n	800ced8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ceb4:	7812      	ldrb	r2, [r2, #0]
 800ceb6:	b2d2      	uxtb	r2, r2
 800ceb8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cebe:	1c5a      	adds	r2, r3, #1
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	3b01      	subs	r3, #1
 800cece:	b29a      	uxth	r2, r3
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ced6:	e023      	b.n	800cf20 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ced8:	f7f6 f834 	bl	8002f44 <HAL_GetTick>
 800cedc:	4602      	mov	r2, r0
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	1ad3      	subs	r3, r2, r3
 800cee2:	683a      	ldr	r2, [r7, #0]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d803      	bhi.n	800cef0 <HAL_SPI_Receive+0x478>
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ceee:	d102      	bne.n	800cef6 <HAL_SPI_Receive+0x47e>
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d114      	bne.n	800cf20 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cef6:	68f8      	ldr	r0, [r7, #12]
 800cef8:	f000 f830 	bl	800cf5c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cf1c:	2303      	movs	r3, #3
 800cf1e:	e019      	b.n	800cf54 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	f47f af41 	bne.w	800cdb0 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cf2e:	68f8      	ldr	r0, [r7, #12]
 800cf30:	f000 f814 	bl	800cf5c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2201      	movs	r2, #1
 800cf38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d001      	beq.n	800cf52 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e000      	b.n	800cf54 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800cf52:	2300      	movs	r3, #0
  }
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3720      	adds	r7, #32
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b085      	sub	sp, #20
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	695b      	ldr	r3, [r3, #20]
 800cf6a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	699a      	ldr	r2, [r3, #24]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f042 0208 	orr.w	r2, r2, #8
 800cf7a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	699a      	ldr	r2, [r3, #24]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f042 0210 	orr.w	r2, r2, #16
 800cf8a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f022 0201 	bic.w	r2, r2, #1
 800cf9a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	6919      	ldr	r1, [r3, #16]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	4b3c      	ldr	r3, [pc, #240]	; (800d098 <SPI_CloseTransfer+0x13c>)
 800cfa8:	400b      	ands	r3, r1
 800cfaa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	689a      	ldr	r2, [r3, #8]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cfba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	2b04      	cmp	r3, #4
 800cfc6:	d014      	beq.n	800cff2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f003 0320 	and.w	r3, r3, #32
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00f      	beq.n	800cff2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	699a      	ldr	r2, [r3, #24]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f042 0220 	orr.w	r2, r2, #32
 800cff0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	2b03      	cmp	r3, #3
 800cffc:	d014      	beq.n	800d028 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00f      	beq.n	800d028 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d00e:	f043 0204 	orr.w	r2, r3, #4
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	699a      	ldr	r2, [r3, #24]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d026:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00f      	beq.n	800d052 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d038:	f043 0201 	orr.w	r2, r3, #1
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	699a      	ldr	r2, [r3, #24]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d050:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d00f      	beq.n	800d07c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d062:	f043 0208 	orr.w	r2, r3, #8
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	699a      	ldr	r2, [r3, #24]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d07a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d08c:	bf00      	nop
 800d08e:	3714      	adds	r7, #20
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr
 800d098:	fffffc90 	.word	0xfffffc90

0800d09c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0a8:	095b      	lsrs	r3, r3, #5
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	68db      	ldr	r3, [r3, #12]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	3307      	adds	r3, #7
 800d0ba:	08db      	lsrs	r3, r3, #3
 800d0bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	fb02 f303 	mul.w	r3, r2, r3
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3714      	adds	r7, #20
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d0:	4770      	bx	lr

0800d0d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b082      	sub	sp, #8
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d101      	bne.n	800d0e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e049      	b.n	800d178 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d106      	bne.n	800d0fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f7f5 fb09 	bl	8002710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2202      	movs	r2, #2
 800d102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	3304      	adds	r3, #4
 800d10e:	4619      	mov	r1, r3
 800d110:	4610      	mov	r0, r2
 800d112:	f000 ff41 	bl	800df98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2201      	movs	r2, #1
 800d11a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2201      	movs	r2, #1
 800d122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2201      	movs	r2, #1
 800d12a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2201      	movs	r2, #1
 800d132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2201      	movs	r2, #1
 800d13a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2201      	movs	r2, #1
 800d142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2201      	movs	r2, #1
 800d14a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2201      	movs	r2, #1
 800d152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2201      	movs	r2, #1
 800d15a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2201      	movs	r2, #1
 800d162:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2201      	movs	r2, #1
 800d16a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2201      	movs	r2, #1
 800d172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d176:	2300      	movs	r3, #0
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3708      	adds	r7, #8
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}

0800d180 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d180:	b480      	push	{r7}
 800d182:	b085      	sub	sp, #20
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	2b01      	cmp	r3, #1
 800d192:	d001      	beq.n	800d198 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d194:	2301      	movs	r3, #1
 800d196:	e04c      	b.n	800d232 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2202      	movs	r2, #2
 800d19c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a26      	ldr	r2, [pc, #152]	; (800d240 <HAL_TIM_Base_Start+0xc0>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d022      	beq.n	800d1f0 <HAL_TIM_Base_Start+0x70>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1b2:	d01d      	beq.n	800d1f0 <HAL_TIM_Base_Start+0x70>
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a22      	ldr	r2, [pc, #136]	; (800d244 <HAL_TIM_Base_Start+0xc4>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d018      	beq.n	800d1f0 <HAL_TIM_Base_Start+0x70>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4a21      	ldr	r2, [pc, #132]	; (800d248 <HAL_TIM_Base_Start+0xc8>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d013      	beq.n	800d1f0 <HAL_TIM_Base_Start+0x70>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	4a1f      	ldr	r2, [pc, #124]	; (800d24c <HAL_TIM_Base_Start+0xcc>)
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d00e      	beq.n	800d1f0 <HAL_TIM_Base_Start+0x70>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a1e      	ldr	r2, [pc, #120]	; (800d250 <HAL_TIM_Base_Start+0xd0>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d009      	beq.n	800d1f0 <HAL_TIM_Base_Start+0x70>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a1c      	ldr	r2, [pc, #112]	; (800d254 <HAL_TIM_Base_Start+0xd4>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d004      	beq.n	800d1f0 <HAL_TIM_Base_Start+0x70>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a1b      	ldr	r2, [pc, #108]	; (800d258 <HAL_TIM_Base_Start+0xd8>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d115      	bne.n	800d21c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	689a      	ldr	r2, [r3, #8]
 800d1f6:	4b19      	ldr	r3, [pc, #100]	; (800d25c <HAL_TIM_Base_Start+0xdc>)
 800d1f8:	4013      	ands	r3, r2
 800d1fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2b06      	cmp	r3, #6
 800d200:	d015      	beq.n	800d22e <HAL_TIM_Base_Start+0xae>
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d208:	d011      	beq.n	800d22e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f042 0201 	orr.w	r2, r2, #1
 800d218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d21a:	e008      	b.n	800d22e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f042 0201 	orr.w	r2, r2, #1
 800d22a:	601a      	str	r2, [r3, #0]
 800d22c:	e000      	b.n	800d230 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d22e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3714      	adds	r7, #20
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	40010000 	.word	0x40010000
 800d244:	40000400 	.word	0x40000400
 800d248:	40000800 	.word	0x40000800
 800d24c:	40000c00 	.word	0x40000c00
 800d250:	40010400 	.word	0x40010400
 800d254:	40001800 	.word	0x40001800
 800d258:	40014000 	.word	0x40014000
 800d25c:	00010007 	.word	0x00010007

0800d260 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	6a1a      	ldr	r2, [r3, #32]
 800d26e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d272:	4013      	ands	r3, r2
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10f      	bne.n	800d298 <HAL_TIM_Base_Stop+0x38>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	6a1a      	ldr	r2, [r3, #32]
 800d27e:	f240 4344 	movw	r3, #1092	; 0x444
 800d282:	4013      	ands	r3, r2
 800d284:	2b00      	cmp	r3, #0
 800d286:	d107      	bne.n	800d298 <HAL_TIM_Base_Stop+0x38>
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f022 0201 	bic.w	r2, r2, #1
 800d296:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d2a0:	2300      	movs	r3, #0
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	370c      	adds	r7, #12
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr
	...

0800d2b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b085      	sub	sp, #20
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d001      	beq.n	800d2c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e054      	b.n	800d372 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2202      	movs	r2, #2
 800d2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	68da      	ldr	r2, [r3, #12]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f042 0201 	orr.w	r2, r2, #1
 800d2de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a26      	ldr	r2, [pc, #152]	; (800d380 <HAL_TIM_Base_Start_IT+0xd0>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d022      	beq.n	800d330 <HAL_TIM_Base_Start_IT+0x80>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2f2:	d01d      	beq.n	800d330 <HAL_TIM_Base_Start_IT+0x80>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a22      	ldr	r2, [pc, #136]	; (800d384 <HAL_TIM_Base_Start_IT+0xd4>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d018      	beq.n	800d330 <HAL_TIM_Base_Start_IT+0x80>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a21      	ldr	r2, [pc, #132]	; (800d388 <HAL_TIM_Base_Start_IT+0xd8>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d013      	beq.n	800d330 <HAL_TIM_Base_Start_IT+0x80>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a1f      	ldr	r2, [pc, #124]	; (800d38c <HAL_TIM_Base_Start_IT+0xdc>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d00e      	beq.n	800d330 <HAL_TIM_Base_Start_IT+0x80>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a1e      	ldr	r2, [pc, #120]	; (800d390 <HAL_TIM_Base_Start_IT+0xe0>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d009      	beq.n	800d330 <HAL_TIM_Base_Start_IT+0x80>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4a1c      	ldr	r2, [pc, #112]	; (800d394 <HAL_TIM_Base_Start_IT+0xe4>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d004      	beq.n	800d330 <HAL_TIM_Base_Start_IT+0x80>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a1b      	ldr	r2, [pc, #108]	; (800d398 <HAL_TIM_Base_Start_IT+0xe8>)
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d115      	bne.n	800d35c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	689a      	ldr	r2, [r3, #8]
 800d336:	4b19      	ldr	r3, [pc, #100]	; (800d39c <HAL_TIM_Base_Start_IT+0xec>)
 800d338:	4013      	ands	r3, r2
 800d33a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2b06      	cmp	r3, #6
 800d340:	d015      	beq.n	800d36e <HAL_TIM_Base_Start_IT+0xbe>
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d348:	d011      	beq.n	800d36e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f042 0201 	orr.w	r2, r2, #1
 800d358:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d35a:	e008      	b.n	800d36e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f042 0201 	orr.w	r2, r2, #1
 800d36a:	601a      	str	r2, [r3, #0]
 800d36c:	e000      	b.n	800d370 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d36e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3714      	adds	r7, #20
 800d376:	46bd      	mov	sp, r7
 800d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37c:	4770      	bx	lr
 800d37e:	bf00      	nop
 800d380:	40010000 	.word	0x40010000
 800d384:	40000400 	.word	0x40000400
 800d388:	40000800 	.word	0x40000800
 800d38c:	40000c00 	.word	0x40000c00
 800d390:	40010400 	.word	0x40010400
 800d394:	40001800 	.word	0x40001800
 800d398:	40014000 	.word	0x40014000
 800d39c:	00010007 	.word	0x00010007

0800d3a0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d109      	bne.n	800d3c8 <HAL_TIM_OC_Start_IT+0x28>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	bf14      	ite	ne
 800d3c0:	2301      	movne	r3, #1
 800d3c2:	2300      	moveq	r3, #0
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	e03c      	b.n	800d442 <HAL_TIM_OC_Start_IT+0xa2>
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	2b04      	cmp	r3, #4
 800d3cc:	d109      	bne.n	800d3e2 <HAL_TIM_OC_Start_IT+0x42>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	bf14      	ite	ne
 800d3da:	2301      	movne	r3, #1
 800d3dc:	2300      	moveq	r3, #0
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	e02f      	b.n	800d442 <HAL_TIM_OC_Start_IT+0xa2>
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	2b08      	cmp	r3, #8
 800d3e6:	d109      	bne.n	800d3fc <HAL_TIM_OC_Start_IT+0x5c>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	bf14      	ite	ne
 800d3f4:	2301      	movne	r3, #1
 800d3f6:	2300      	moveq	r3, #0
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	e022      	b.n	800d442 <HAL_TIM_OC_Start_IT+0xa2>
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	2b0c      	cmp	r3, #12
 800d400:	d109      	bne.n	800d416 <HAL_TIM_OC_Start_IT+0x76>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	bf14      	ite	ne
 800d40e:	2301      	movne	r3, #1
 800d410:	2300      	moveq	r3, #0
 800d412:	b2db      	uxtb	r3, r3
 800d414:	e015      	b.n	800d442 <HAL_TIM_OC_Start_IT+0xa2>
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	2b10      	cmp	r3, #16
 800d41a:	d109      	bne.n	800d430 <HAL_TIM_OC_Start_IT+0x90>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d422:	b2db      	uxtb	r3, r3
 800d424:	2b01      	cmp	r3, #1
 800d426:	bf14      	ite	ne
 800d428:	2301      	movne	r3, #1
 800d42a:	2300      	moveq	r3, #0
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	e008      	b.n	800d442 <HAL_TIM_OC_Start_IT+0xa2>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d436:	b2db      	uxtb	r3, r3
 800d438:	2b01      	cmp	r3, #1
 800d43a:	bf14      	ite	ne
 800d43c:	2301      	movne	r3, #1
 800d43e:	2300      	moveq	r3, #0
 800d440:	b2db      	uxtb	r3, r3
 800d442:	2b00      	cmp	r3, #0
 800d444:	d001      	beq.n	800d44a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d446:	2301      	movs	r3, #1
 800d448:	e0ec      	b.n	800d624 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d104      	bne.n	800d45a <HAL_TIM_OC_Start_IT+0xba>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2202      	movs	r2, #2
 800d454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d458:	e023      	b.n	800d4a2 <HAL_TIM_OC_Start_IT+0x102>
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	2b04      	cmp	r3, #4
 800d45e:	d104      	bne.n	800d46a <HAL_TIM_OC_Start_IT+0xca>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2202      	movs	r2, #2
 800d464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d468:	e01b      	b.n	800d4a2 <HAL_TIM_OC_Start_IT+0x102>
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	2b08      	cmp	r3, #8
 800d46e:	d104      	bne.n	800d47a <HAL_TIM_OC_Start_IT+0xda>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2202      	movs	r2, #2
 800d474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d478:	e013      	b.n	800d4a2 <HAL_TIM_OC_Start_IT+0x102>
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	2b0c      	cmp	r3, #12
 800d47e:	d104      	bne.n	800d48a <HAL_TIM_OC_Start_IT+0xea>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2202      	movs	r2, #2
 800d484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d488:	e00b      	b.n	800d4a2 <HAL_TIM_OC_Start_IT+0x102>
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	2b10      	cmp	r3, #16
 800d48e:	d104      	bne.n	800d49a <HAL_TIM_OC_Start_IT+0xfa>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2202      	movs	r2, #2
 800d494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d498:	e003      	b.n	800d4a2 <HAL_TIM_OC_Start_IT+0x102>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2202      	movs	r2, #2
 800d49e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	2b0c      	cmp	r3, #12
 800d4a6:	d841      	bhi.n	800d52c <HAL_TIM_OC_Start_IT+0x18c>
 800d4a8:	a201      	add	r2, pc, #4	; (adr r2, 800d4b0 <HAL_TIM_OC_Start_IT+0x110>)
 800d4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ae:	bf00      	nop
 800d4b0:	0800d4e5 	.word	0x0800d4e5
 800d4b4:	0800d52d 	.word	0x0800d52d
 800d4b8:	0800d52d 	.word	0x0800d52d
 800d4bc:	0800d52d 	.word	0x0800d52d
 800d4c0:	0800d4f7 	.word	0x0800d4f7
 800d4c4:	0800d52d 	.word	0x0800d52d
 800d4c8:	0800d52d 	.word	0x0800d52d
 800d4cc:	0800d52d 	.word	0x0800d52d
 800d4d0:	0800d509 	.word	0x0800d509
 800d4d4:	0800d52d 	.word	0x0800d52d
 800d4d8:	0800d52d 	.word	0x0800d52d
 800d4dc:	0800d52d 	.word	0x0800d52d
 800d4e0:	0800d51b 	.word	0x0800d51b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	68da      	ldr	r2, [r3, #12]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f042 0202 	orr.w	r2, r2, #2
 800d4f2:	60da      	str	r2, [r3, #12]
      break;
 800d4f4:	e01d      	b.n	800d532 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	68da      	ldr	r2, [r3, #12]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f042 0204 	orr.w	r2, r2, #4
 800d504:	60da      	str	r2, [r3, #12]
      break;
 800d506:	e014      	b.n	800d532 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	68da      	ldr	r2, [r3, #12]
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f042 0208 	orr.w	r2, r2, #8
 800d516:	60da      	str	r2, [r3, #12]
      break;
 800d518:	e00b      	b.n	800d532 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	68da      	ldr	r2, [r3, #12]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f042 0210 	orr.w	r2, r2, #16
 800d528:	60da      	str	r2, [r3, #12]
      break;
 800d52a:	e002      	b.n	800d532 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d52c:	2301      	movs	r3, #1
 800d52e:	73fb      	strb	r3, [r7, #15]
      break;
 800d530:	bf00      	nop
  }

  if (status == HAL_OK)
 800d532:	7bfb      	ldrb	r3, [r7, #15]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d174      	bne.n	800d622 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2201      	movs	r2, #1
 800d53e:	6839      	ldr	r1, [r7, #0]
 800d540:	4618      	mov	r0, r3
 800d542:	f001 f943 	bl	800e7cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a38      	ldr	r2, [pc, #224]	; (800d62c <HAL_TIM_OC_Start_IT+0x28c>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d013      	beq.n	800d578 <HAL_TIM_OC_Start_IT+0x1d8>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a36      	ldr	r2, [pc, #216]	; (800d630 <HAL_TIM_OC_Start_IT+0x290>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d00e      	beq.n	800d578 <HAL_TIM_OC_Start_IT+0x1d8>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4a35      	ldr	r2, [pc, #212]	; (800d634 <HAL_TIM_OC_Start_IT+0x294>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d009      	beq.n	800d578 <HAL_TIM_OC_Start_IT+0x1d8>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a33      	ldr	r2, [pc, #204]	; (800d638 <HAL_TIM_OC_Start_IT+0x298>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d004      	beq.n	800d578 <HAL_TIM_OC_Start_IT+0x1d8>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a32      	ldr	r2, [pc, #200]	; (800d63c <HAL_TIM_OC_Start_IT+0x29c>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d101      	bne.n	800d57c <HAL_TIM_OC_Start_IT+0x1dc>
 800d578:	2301      	movs	r3, #1
 800d57a:	e000      	b.n	800d57e <HAL_TIM_OC_Start_IT+0x1de>
 800d57c:	2300      	movs	r3, #0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d007      	beq.n	800d592 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d590:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a25      	ldr	r2, [pc, #148]	; (800d62c <HAL_TIM_OC_Start_IT+0x28c>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d022      	beq.n	800d5e2 <HAL_TIM_OC_Start_IT+0x242>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5a4:	d01d      	beq.n	800d5e2 <HAL_TIM_OC_Start_IT+0x242>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a25      	ldr	r2, [pc, #148]	; (800d640 <HAL_TIM_OC_Start_IT+0x2a0>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d018      	beq.n	800d5e2 <HAL_TIM_OC_Start_IT+0x242>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4a23      	ldr	r2, [pc, #140]	; (800d644 <HAL_TIM_OC_Start_IT+0x2a4>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d013      	beq.n	800d5e2 <HAL_TIM_OC_Start_IT+0x242>
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4a22      	ldr	r2, [pc, #136]	; (800d648 <HAL_TIM_OC_Start_IT+0x2a8>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d00e      	beq.n	800d5e2 <HAL_TIM_OC_Start_IT+0x242>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	4a19      	ldr	r2, [pc, #100]	; (800d630 <HAL_TIM_OC_Start_IT+0x290>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	d009      	beq.n	800d5e2 <HAL_TIM_OC_Start_IT+0x242>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a1e      	ldr	r2, [pc, #120]	; (800d64c <HAL_TIM_OC_Start_IT+0x2ac>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d004      	beq.n	800d5e2 <HAL_TIM_OC_Start_IT+0x242>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4a15      	ldr	r2, [pc, #84]	; (800d634 <HAL_TIM_OC_Start_IT+0x294>)
 800d5de:	4293      	cmp	r3, r2
 800d5e0:	d115      	bne.n	800d60e <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	689a      	ldr	r2, [r3, #8]
 800d5e8:	4b19      	ldr	r3, [pc, #100]	; (800d650 <HAL_TIM_OC_Start_IT+0x2b0>)
 800d5ea:	4013      	ands	r3, r2
 800d5ec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	2b06      	cmp	r3, #6
 800d5f2:	d015      	beq.n	800d620 <HAL_TIM_OC_Start_IT+0x280>
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5fa:	d011      	beq.n	800d620 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f042 0201 	orr.w	r2, r2, #1
 800d60a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d60c:	e008      	b.n	800d620 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f042 0201 	orr.w	r2, r2, #1
 800d61c:	601a      	str	r2, [r3, #0]
 800d61e:	e000      	b.n	800d622 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d620:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d622:	7bfb      	ldrb	r3, [r7, #15]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	40010000 	.word	0x40010000
 800d630:	40010400 	.word	0x40010400
 800d634:	40014000 	.word	0x40014000
 800d638:	40014400 	.word	0x40014400
 800d63c:	40014800 	.word	0x40014800
 800d640:	40000400 	.word	0x40000400
 800d644:	40000800 	.word	0x40000800
 800d648:	40000c00 	.word	0x40000c00
 800d64c:	40001800 	.word	0x40001800
 800d650:	00010007 	.word	0x00010007

0800d654 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d101      	bne.n	800d666 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d662:	2301      	movs	r3, #1
 800d664:	e049      	b.n	800d6fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d66c:	b2db      	uxtb	r3, r3
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d106      	bne.n	800d680 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 f841 	bl	800d702 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2202      	movs	r2, #2
 800d684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	3304      	adds	r3, #4
 800d690:	4619      	mov	r1, r3
 800d692:	4610      	mov	r0, r2
 800d694:	f000 fc80 	bl	800df98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2201      	movs	r2, #1
 800d69c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3708      	adds	r7, #8
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d702:	b480      	push	{r7}
 800d704:	b083      	sub	sp, #12
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d70a:	bf00      	nop
 800d70c:	370c      	adds	r7, #12
 800d70e:	46bd      	mov	sp, r7
 800d710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d714:	4770      	bx	lr
	...

0800d718 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d109      	bne.n	800d73c <HAL_TIM_PWM_Start+0x24>
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d72e:	b2db      	uxtb	r3, r3
 800d730:	2b01      	cmp	r3, #1
 800d732:	bf14      	ite	ne
 800d734:	2301      	movne	r3, #1
 800d736:	2300      	moveq	r3, #0
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	e03c      	b.n	800d7b6 <HAL_TIM_PWM_Start+0x9e>
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	2b04      	cmp	r3, #4
 800d740:	d109      	bne.n	800d756 <HAL_TIM_PWM_Start+0x3e>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	2b01      	cmp	r3, #1
 800d74c:	bf14      	ite	ne
 800d74e:	2301      	movne	r3, #1
 800d750:	2300      	moveq	r3, #0
 800d752:	b2db      	uxtb	r3, r3
 800d754:	e02f      	b.n	800d7b6 <HAL_TIM_PWM_Start+0x9e>
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	2b08      	cmp	r3, #8
 800d75a:	d109      	bne.n	800d770 <HAL_TIM_PWM_Start+0x58>
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d762:	b2db      	uxtb	r3, r3
 800d764:	2b01      	cmp	r3, #1
 800d766:	bf14      	ite	ne
 800d768:	2301      	movne	r3, #1
 800d76a:	2300      	moveq	r3, #0
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	e022      	b.n	800d7b6 <HAL_TIM_PWM_Start+0x9e>
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	2b0c      	cmp	r3, #12
 800d774:	d109      	bne.n	800d78a <HAL_TIM_PWM_Start+0x72>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	2b01      	cmp	r3, #1
 800d780:	bf14      	ite	ne
 800d782:	2301      	movne	r3, #1
 800d784:	2300      	moveq	r3, #0
 800d786:	b2db      	uxtb	r3, r3
 800d788:	e015      	b.n	800d7b6 <HAL_TIM_PWM_Start+0x9e>
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	2b10      	cmp	r3, #16
 800d78e:	d109      	bne.n	800d7a4 <HAL_TIM_PWM_Start+0x8c>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d796:	b2db      	uxtb	r3, r3
 800d798:	2b01      	cmp	r3, #1
 800d79a:	bf14      	ite	ne
 800d79c:	2301      	movne	r3, #1
 800d79e:	2300      	moveq	r3, #0
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	e008      	b.n	800d7b6 <HAL_TIM_PWM_Start+0x9e>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	bf14      	ite	ne
 800d7b0:	2301      	movne	r3, #1
 800d7b2:	2300      	moveq	r3, #0
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d001      	beq.n	800d7be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	e0a1      	b.n	800d902 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d104      	bne.n	800d7ce <HAL_TIM_PWM_Start+0xb6>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2202      	movs	r2, #2
 800d7c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d7cc:	e023      	b.n	800d816 <HAL_TIM_PWM_Start+0xfe>
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	2b04      	cmp	r3, #4
 800d7d2:	d104      	bne.n	800d7de <HAL_TIM_PWM_Start+0xc6>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2202      	movs	r2, #2
 800d7d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d7dc:	e01b      	b.n	800d816 <HAL_TIM_PWM_Start+0xfe>
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2b08      	cmp	r3, #8
 800d7e2:	d104      	bne.n	800d7ee <HAL_TIM_PWM_Start+0xd6>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2202      	movs	r2, #2
 800d7e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d7ec:	e013      	b.n	800d816 <HAL_TIM_PWM_Start+0xfe>
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	2b0c      	cmp	r3, #12
 800d7f2:	d104      	bne.n	800d7fe <HAL_TIM_PWM_Start+0xe6>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2202      	movs	r2, #2
 800d7f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d7fc:	e00b      	b.n	800d816 <HAL_TIM_PWM_Start+0xfe>
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	2b10      	cmp	r3, #16
 800d802:	d104      	bne.n	800d80e <HAL_TIM_PWM_Start+0xf6>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2202      	movs	r2, #2
 800d808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d80c:	e003      	b.n	800d816 <HAL_TIM_PWM_Start+0xfe>
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2202      	movs	r2, #2
 800d812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	2201      	movs	r2, #1
 800d81c:	6839      	ldr	r1, [r7, #0]
 800d81e:	4618      	mov	r0, r3
 800d820:	f000 ffd4 	bl	800e7cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a38      	ldr	r2, [pc, #224]	; (800d90c <HAL_TIM_PWM_Start+0x1f4>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d013      	beq.n	800d856 <HAL_TIM_PWM_Start+0x13e>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4a37      	ldr	r2, [pc, #220]	; (800d910 <HAL_TIM_PWM_Start+0x1f8>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d00e      	beq.n	800d856 <HAL_TIM_PWM_Start+0x13e>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4a35      	ldr	r2, [pc, #212]	; (800d914 <HAL_TIM_PWM_Start+0x1fc>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d009      	beq.n	800d856 <HAL_TIM_PWM_Start+0x13e>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a34      	ldr	r2, [pc, #208]	; (800d918 <HAL_TIM_PWM_Start+0x200>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d004      	beq.n	800d856 <HAL_TIM_PWM_Start+0x13e>
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a32      	ldr	r2, [pc, #200]	; (800d91c <HAL_TIM_PWM_Start+0x204>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d101      	bne.n	800d85a <HAL_TIM_PWM_Start+0x142>
 800d856:	2301      	movs	r3, #1
 800d858:	e000      	b.n	800d85c <HAL_TIM_PWM_Start+0x144>
 800d85a:	2300      	movs	r3, #0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d007      	beq.n	800d870 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d86e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a25      	ldr	r2, [pc, #148]	; (800d90c <HAL_TIM_PWM_Start+0x1f4>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d022      	beq.n	800d8c0 <HAL_TIM_PWM_Start+0x1a8>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d882:	d01d      	beq.n	800d8c0 <HAL_TIM_PWM_Start+0x1a8>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a25      	ldr	r2, [pc, #148]	; (800d920 <HAL_TIM_PWM_Start+0x208>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d018      	beq.n	800d8c0 <HAL_TIM_PWM_Start+0x1a8>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4a24      	ldr	r2, [pc, #144]	; (800d924 <HAL_TIM_PWM_Start+0x20c>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d013      	beq.n	800d8c0 <HAL_TIM_PWM_Start+0x1a8>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a22      	ldr	r2, [pc, #136]	; (800d928 <HAL_TIM_PWM_Start+0x210>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d00e      	beq.n	800d8c0 <HAL_TIM_PWM_Start+0x1a8>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4a1a      	ldr	r2, [pc, #104]	; (800d910 <HAL_TIM_PWM_Start+0x1f8>)
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d009      	beq.n	800d8c0 <HAL_TIM_PWM_Start+0x1a8>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a1e      	ldr	r2, [pc, #120]	; (800d92c <HAL_TIM_PWM_Start+0x214>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d004      	beq.n	800d8c0 <HAL_TIM_PWM_Start+0x1a8>
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	4a16      	ldr	r2, [pc, #88]	; (800d914 <HAL_TIM_PWM_Start+0x1fc>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d115      	bne.n	800d8ec <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	689a      	ldr	r2, [r3, #8]
 800d8c6:	4b1a      	ldr	r3, [pc, #104]	; (800d930 <HAL_TIM_PWM_Start+0x218>)
 800d8c8:	4013      	ands	r3, r2
 800d8ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2b06      	cmp	r3, #6
 800d8d0:	d015      	beq.n	800d8fe <HAL_TIM_PWM_Start+0x1e6>
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8d8:	d011      	beq.n	800d8fe <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f042 0201 	orr.w	r2, r2, #1
 800d8e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8ea:	e008      	b.n	800d8fe <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f042 0201 	orr.w	r2, r2, #1
 800d8fa:	601a      	str	r2, [r3, #0]
 800d8fc:	e000      	b.n	800d900 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d900:	2300      	movs	r3, #0
}
 800d902:	4618      	mov	r0, r3
 800d904:	3710      	adds	r7, #16
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	40010000 	.word	0x40010000
 800d910:	40010400 	.word	0x40010400
 800d914:	40014000 	.word	0x40014000
 800d918:	40014400 	.word	0x40014400
 800d91c:	40014800 	.word	0x40014800
 800d920:	40000400 	.word	0x40000400
 800d924:	40000800 	.word	0x40000800
 800d928:	40000c00 	.word	0x40000c00
 800d92c:	40001800 	.word	0x40001800
 800d930:	00010007 	.word	0x00010007

0800d934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	68db      	ldr	r3, [r3, #12]
 800d942:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	691b      	ldr	r3, [r3, #16]
 800d94a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	f003 0302 	and.w	r3, r3, #2
 800d952:	2b00      	cmp	r3, #0
 800d954:	d020      	beq.n	800d998 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f003 0302 	and.w	r3, r3, #2
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d01b      	beq.n	800d998 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f06f 0202 	mvn.w	r2, #2
 800d968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2201      	movs	r2, #1
 800d96e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	699b      	ldr	r3, [r3, #24]
 800d976:	f003 0303 	and.w	r3, r3, #3
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d003      	beq.n	800d986 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f000 faec 	bl	800df5c <HAL_TIM_IC_CaptureCallback>
 800d984:	e005      	b.n	800d992 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f7f2 fe7c 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f000 faef 	bl	800df70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2200      	movs	r2, #0
 800d996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	f003 0304 	and.w	r3, r3, #4
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d020      	beq.n	800d9e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	f003 0304 	and.w	r3, r3, #4
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d01b      	beq.n	800d9e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f06f 0204 	mvn.w	r2, #4
 800d9b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2202      	movs	r2, #2
 800d9ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	699b      	ldr	r3, [r3, #24]
 800d9c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d003      	beq.n	800d9d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 fac6 	bl	800df5c <HAL_TIM_IC_CaptureCallback>
 800d9d0:	e005      	b.n	800d9de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7f2 fe56 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f000 fac9 	bl	800df70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	f003 0308 	and.w	r3, r3, #8
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d020      	beq.n	800da30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f003 0308 	and.w	r3, r3, #8
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d01b      	beq.n	800da30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f06f 0208 	mvn.w	r2, #8
 800da00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2204      	movs	r2, #4
 800da06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	69db      	ldr	r3, [r3, #28]
 800da0e:	f003 0303 	and.w	r3, r3, #3
 800da12:	2b00      	cmp	r3, #0
 800da14:	d003      	beq.n	800da1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 faa0 	bl	800df5c <HAL_TIM_IC_CaptureCallback>
 800da1c:	e005      	b.n	800da2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f7f2 fe30 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f000 faa3 	bl	800df70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2200      	movs	r2, #0
 800da2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	f003 0310 	and.w	r3, r3, #16
 800da36:	2b00      	cmp	r3, #0
 800da38:	d020      	beq.n	800da7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f003 0310 	and.w	r3, r3, #16
 800da40:	2b00      	cmp	r3, #0
 800da42:	d01b      	beq.n	800da7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f06f 0210 	mvn.w	r2, #16
 800da4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2208      	movs	r2, #8
 800da52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	69db      	ldr	r3, [r3, #28]
 800da5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d003      	beq.n	800da6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 fa7a 	bl	800df5c <HAL_TIM_IC_CaptureCallback>
 800da68:	e005      	b.n	800da76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f7f2 fe0a 	bl	8000684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 fa7d 	bl	800df70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2200      	movs	r2, #0
 800da7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	f003 0301 	and.w	r3, r3, #1
 800da82:	2b00      	cmp	r3, #0
 800da84:	d00c      	beq.n	800daa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f003 0301 	and.w	r3, r3, #1
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d007      	beq.n	800daa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f06f 0201 	mvn.w	r2, #1
 800da98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f7f4 fb46 	bl	800212c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d104      	bne.n	800dab4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d00c      	beq.n	800dace <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d007      	beq.n	800dace <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800dac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 ffbb 	bl	800ea44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d00c      	beq.n	800daf2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d007      	beq.n	800daf2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800daea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 ffb3 	bl	800ea58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d00c      	beq.n	800db16 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db02:	2b00      	cmp	r3, #0
 800db04:	d007      	beq.n	800db16 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800db0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f000 fa37 	bl	800df84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	f003 0320 	and.w	r3, r3, #32
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00c      	beq.n	800db3a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f003 0320 	and.w	r3, r3, #32
 800db26:	2b00      	cmp	r3, #0
 800db28:	d007      	beq.n	800db3a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f06f 0220 	mvn.w	r2, #32
 800db32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f000 ff7b 	bl	800ea30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db3a:	bf00      	nop
 800db3c:	3710      	adds	r7, #16
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}
	...

0800db44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b086      	sub	sp, #24
 800db48:	af00      	add	r7, sp, #0
 800db4a:	60f8      	str	r0, [r7, #12]
 800db4c:	60b9      	str	r1, [r7, #8]
 800db4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db50:	2300      	movs	r3, #0
 800db52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d101      	bne.n	800db62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800db5e:	2302      	movs	r3, #2
 800db60:	e0ff      	b.n	800dd62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2201      	movs	r2, #1
 800db66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2b14      	cmp	r3, #20
 800db6e:	f200 80f0 	bhi.w	800dd52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800db72:	a201      	add	r2, pc, #4	; (adr r2, 800db78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800db74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db78:	0800dbcd 	.word	0x0800dbcd
 800db7c:	0800dd53 	.word	0x0800dd53
 800db80:	0800dd53 	.word	0x0800dd53
 800db84:	0800dd53 	.word	0x0800dd53
 800db88:	0800dc0d 	.word	0x0800dc0d
 800db8c:	0800dd53 	.word	0x0800dd53
 800db90:	0800dd53 	.word	0x0800dd53
 800db94:	0800dd53 	.word	0x0800dd53
 800db98:	0800dc4f 	.word	0x0800dc4f
 800db9c:	0800dd53 	.word	0x0800dd53
 800dba0:	0800dd53 	.word	0x0800dd53
 800dba4:	0800dd53 	.word	0x0800dd53
 800dba8:	0800dc8f 	.word	0x0800dc8f
 800dbac:	0800dd53 	.word	0x0800dd53
 800dbb0:	0800dd53 	.word	0x0800dd53
 800dbb4:	0800dd53 	.word	0x0800dd53
 800dbb8:	0800dcd1 	.word	0x0800dcd1
 800dbbc:	0800dd53 	.word	0x0800dd53
 800dbc0:	0800dd53 	.word	0x0800dd53
 800dbc4:	0800dd53 	.word	0x0800dd53
 800dbc8:	0800dd11 	.word	0x0800dd11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	68b9      	ldr	r1, [r7, #8]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f000 fa86 	bl	800e0e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	699a      	ldr	r2, [r3, #24]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f042 0208 	orr.w	r2, r2, #8
 800dbe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	699a      	ldr	r2, [r3, #24]
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f022 0204 	bic.w	r2, r2, #4
 800dbf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	6999      	ldr	r1, [r3, #24]
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	691a      	ldr	r2, [r3, #16]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	430a      	orrs	r2, r1
 800dc08:	619a      	str	r2, [r3, #24]
      break;
 800dc0a:	e0a5      	b.n	800dd58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	68b9      	ldr	r1, [r7, #8]
 800dc12:	4618      	mov	r0, r3
 800dc14:	f000 faf6 	bl	800e204 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	699a      	ldr	r2, [r3, #24]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	699a      	ldr	r2, [r3, #24]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	6999      	ldr	r1, [r3, #24]
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	691b      	ldr	r3, [r3, #16]
 800dc42:	021a      	lsls	r2, r3, #8
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	430a      	orrs	r2, r1
 800dc4a:	619a      	str	r2, [r3, #24]
      break;
 800dc4c:	e084      	b.n	800dd58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	68b9      	ldr	r1, [r7, #8]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 fb5f 	bl	800e318 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	69da      	ldr	r2, [r3, #28]
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f042 0208 	orr.w	r2, r2, #8
 800dc68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	69da      	ldr	r2, [r3, #28]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f022 0204 	bic.w	r2, r2, #4
 800dc78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	69d9      	ldr	r1, [r3, #28]
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	691a      	ldr	r2, [r3, #16]
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	430a      	orrs	r2, r1
 800dc8a:	61da      	str	r2, [r3, #28]
      break;
 800dc8c:	e064      	b.n	800dd58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	68b9      	ldr	r1, [r7, #8]
 800dc94:	4618      	mov	r0, r3
 800dc96:	f000 fbc7 	bl	800e428 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	69da      	ldr	r2, [r3, #28]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	69da      	ldr	r2, [r3, #28]
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dcb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	69d9      	ldr	r1, [r3, #28]
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	691b      	ldr	r3, [r3, #16]
 800dcc4:	021a      	lsls	r2, r3, #8
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	430a      	orrs	r2, r1
 800dccc:	61da      	str	r2, [r3, #28]
      break;
 800dcce:	e043      	b.n	800dd58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	68b9      	ldr	r1, [r7, #8]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f000 fc10 	bl	800e4fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f042 0208 	orr.w	r2, r2, #8
 800dcea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f022 0204 	bic.w	r2, r2, #4
 800dcfa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	691a      	ldr	r2, [r3, #16]
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	430a      	orrs	r2, r1
 800dd0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dd0e:	e023      	b.n	800dd58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	68b9      	ldr	r1, [r7, #8]
 800dd16:	4618      	mov	r0, r3
 800dd18:	f000 fc54 	bl	800e5c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	691b      	ldr	r3, [r3, #16]
 800dd46:	021a      	lsls	r2, r3, #8
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	430a      	orrs	r2, r1
 800dd4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dd50:	e002      	b.n	800dd58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dd52:	2301      	movs	r3, #1
 800dd54:	75fb      	strb	r3, [r7, #23]
      break;
 800dd56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dd60:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3718      	adds	r7, #24
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop

0800dd6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd76:	2300      	movs	r3, #0
 800dd78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d101      	bne.n	800dd88 <HAL_TIM_ConfigClockSource+0x1c>
 800dd84:	2302      	movs	r3, #2
 800dd86:	e0dc      	b.n	800df42 <HAL_TIM_ConfigClockSource+0x1d6>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2202      	movs	r2, #2
 800dd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	689b      	ldr	r3, [r3, #8]
 800dd9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	4b6a      	ldr	r3, [pc, #424]	; (800df4c <HAL_TIM_ConfigClockSource+0x1e0>)
 800dda4:	4013      	ands	r3, r2
 800dda6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ddae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	68ba      	ldr	r2, [r7, #8]
 800ddb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a64      	ldr	r2, [pc, #400]	; (800df50 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	f000 80a9 	beq.w	800df16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ddc4:	4a62      	ldr	r2, [pc, #392]	; (800df50 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	f200 80ae 	bhi.w	800df28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddcc:	4a61      	ldr	r2, [pc, #388]	; (800df54 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	f000 80a1 	beq.w	800df16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ddd4:	4a5f      	ldr	r2, [pc, #380]	; (800df54 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	f200 80a6 	bhi.w	800df28 <HAL_TIM_ConfigClockSource+0x1bc>
 800dddc:	4a5e      	ldr	r2, [pc, #376]	; (800df58 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	f000 8099 	beq.w	800df16 <HAL_TIM_ConfigClockSource+0x1aa>
 800dde4:	4a5c      	ldr	r2, [pc, #368]	; (800df58 <HAL_TIM_ConfigClockSource+0x1ec>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	f200 809e 	bhi.w	800df28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ddf0:	f000 8091 	beq.w	800df16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ddf4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ddf8:	f200 8096 	bhi.w	800df28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ddfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de00:	f000 8089 	beq.w	800df16 <HAL_TIM_ConfigClockSource+0x1aa>
 800de04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de08:	f200 808e 	bhi.w	800df28 <HAL_TIM_ConfigClockSource+0x1bc>
 800de0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de10:	d03e      	beq.n	800de90 <HAL_TIM_ConfigClockSource+0x124>
 800de12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de16:	f200 8087 	bhi.w	800df28 <HAL_TIM_ConfigClockSource+0x1bc>
 800de1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de1e:	f000 8086 	beq.w	800df2e <HAL_TIM_ConfigClockSource+0x1c2>
 800de22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de26:	d87f      	bhi.n	800df28 <HAL_TIM_ConfigClockSource+0x1bc>
 800de28:	2b70      	cmp	r3, #112	; 0x70
 800de2a:	d01a      	beq.n	800de62 <HAL_TIM_ConfigClockSource+0xf6>
 800de2c:	2b70      	cmp	r3, #112	; 0x70
 800de2e:	d87b      	bhi.n	800df28 <HAL_TIM_ConfigClockSource+0x1bc>
 800de30:	2b60      	cmp	r3, #96	; 0x60
 800de32:	d050      	beq.n	800ded6 <HAL_TIM_ConfigClockSource+0x16a>
 800de34:	2b60      	cmp	r3, #96	; 0x60
 800de36:	d877      	bhi.n	800df28 <HAL_TIM_ConfigClockSource+0x1bc>
 800de38:	2b50      	cmp	r3, #80	; 0x50
 800de3a:	d03c      	beq.n	800deb6 <HAL_TIM_ConfigClockSource+0x14a>
 800de3c:	2b50      	cmp	r3, #80	; 0x50
 800de3e:	d873      	bhi.n	800df28 <HAL_TIM_ConfigClockSource+0x1bc>
 800de40:	2b40      	cmp	r3, #64	; 0x40
 800de42:	d058      	beq.n	800def6 <HAL_TIM_ConfigClockSource+0x18a>
 800de44:	2b40      	cmp	r3, #64	; 0x40
 800de46:	d86f      	bhi.n	800df28 <HAL_TIM_ConfigClockSource+0x1bc>
 800de48:	2b30      	cmp	r3, #48	; 0x30
 800de4a:	d064      	beq.n	800df16 <HAL_TIM_ConfigClockSource+0x1aa>
 800de4c:	2b30      	cmp	r3, #48	; 0x30
 800de4e:	d86b      	bhi.n	800df28 <HAL_TIM_ConfigClockSource+0x1bc>
 800de50:	2b20      	cmp	r3, #32
 800de52:	d060      	beq.n	800df16 <HAL_TIM_ConfigClockSource+0x1aa>
 800de54:	2b20      	cmp	r3, #32
 800de56:	d867      	bhi.n	800df28 <HAL_TIM_ConfigClockSource+0x1bc>
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d05c      	beq.n	800df16 <HAL_TIM_ConfigClockSource+0x1aa>
 800de5c:	2b10      	cmp	r3, #16
 800de5e:	d05a      	beq.n	800df16 <HAL_TIM_ConfigClockSource+0x1aa>
 800de60:	e062      	b.n	800df28 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6818      	ldr	r0, [r3, #0]
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	6899      	ldr	r1, [r3, #8]
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	685a      	ldr	r2, [r3, #4]
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	68db      	ldr	r3, [r3, #12]
 800de72:	f000 fc8b 	bl	800e78c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800de84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	68ba      	ldr	r2, [r7, #8]
 800de8c:	609a      	str	r2, [r3, #8]
      break;
 800de8e:	e04f      	b.n	800df30 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6818      	ldr	r0, [r3, #0]
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	6899      	ldr	r1, [r3, #8]
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	685a      	ldr	r2, [r3, #4]
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	f000 fc74 	bl	800e78c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	689a      	ldr	r2, [r3, #8]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800deb2:	609a      	str	r2, [r3, #8]
      break;
 800deb4:	e03c      	b.n	800df30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6818      	ldr	r0, [r3, #0]
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	6859      	ldr	r1, [r3, #4]
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	68db      	ldr	r3, [r3, #12]
 800dec2:	461a      	mov	r2, r3
 800dec4:	f000 fbe4 	bl	800e690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	2150      	movs	r1, #80	; 0x50
 800dece:	4618      	mov	r0, r3
 800ded0:	f000 fc3e 	bl	800e750 <TIM_ITRx_SetConfig>
      break;
 800ded4:	e02c      	b.n	800df30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6818      	ldr	r0, [r3, #0]
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	6859      	ldr	r1, [r3, #4]
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	68db      	ldr	r3, [r3, #12]
 800dee2:	461a      	mov	r2, r3
 800dee4:	f000 fc03 	bl	800e6ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2160      	movs	r1, #96	; 0x60
 800deee:	4618      	mov	r0, r3
 800def0:	f000 fc2e 	bl	800e750 <TIM_ITRx_SetConfig>
      break;
 800def4:	e01c      	b.n	800df30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6818      	ldr	r0, [r3, #0]
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	6859      	ldr	r1, [r3, #4]
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	461a      	mov	r2, r3
 800df04:	f000 fbc4 	bl	800e690 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2140      	movs	r1, #64	; 0x40
 800df0e:	4618      	mov	r0, r3
 800df10:	f000 fc1e 	bl	800e750 <TIM_ITRx_SetConfig>
      break;
 800df14:	e00c      	b.n	800df30 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	4619      	mov	r1, r3
 800df20:	4610      	mov	r0, r2
 800df22:	f000 fc15 	bl	800e750 <TIM_ITRx_SetConfig>
      break;
 800df26:	e003      	b.n	800df30 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800df28:	2301      	movs	r3, #1
 800df2a:	73fb      	strb	r3, [r7, #15]
      break;
 800df2c:	e000      	b.n	800df30 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800df2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2201      	movs	r2, #1
 800df34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800df40:	7bfb      	ldrb	r3, [r7, #15]
}
 800df42:	4618      	mov	r0, r3
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	ffceff88 	.word	0xffceff88
 800df50:	00100040 	.word	0x00100040
 800df54:	00100030 	.word	0x00100030
 800df58:	00100020 	.word	0x00100020

0800df5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800df64:	bf00      	nop
 800df66:	370c      	adds	r7, #12
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr

0800df70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800df78:	bf00      	nop
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800df8c:	bf00      	nop
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr

0800df98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800df98:	b480      	push	{r7}
 800df9a:	b085      	sub	sp, #20
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
 800dfa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	4a46      	ldr	r2, [pc, #280]	; (800e0c4 <TIM_Base_SetConfig+0x12c>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d013      	beq.n	800dfd8 <TIM_Base_SetConfig+0x40>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfb6:	d00f      	beq.n	800dfd8 <TIM_Base_SetConfig+0x40>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	4a43      	ldr	r2, [pc, #268]	; (800e0c8 <TIM_Base_SetConfig+0x130>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d00b      	beq.n	800dfd8 <TIM_Base_SetConfig+0x40>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	4a42      	ldr	r2, [pc, #264]	; (800e0cc <TIM_Base_SetConfig+0x134>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d007      	beq.n	800dfd8 <TIM_Base_SetConfig+0x40>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	4a41      	ldr	r2, [pc, #260]	; (800e0d0 <TIM_Base_SetConfig+0x138>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d003      	beq.n	800dfd8 <TIM_Base_SetConfig+0x40>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	4a40      	ldr	r2, [pc, #256]	; (800e0d4 <TIM_Base_SetConfig+0x13c>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d108      	bne.n	800dfea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	68fa      	ldr	r2, [r7, #12]
 800dfe6:	4313      	orrs	r3, r2
 800dfe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	4a35      	ldr	r2, [pc, #212]	; (800e0c4 <TIM_Base_SetConfig+0x12c>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d01f      	beq.n	800e032 <TIM_Base_SetConfig+0x9a>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dff8:	d01b      	beq.n	800e032 <TIM_Base_SetConfig+0x9a>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	4a32      	ldr	r2, [pc, #200]	; (800e0c8 <TIM_Base_SetConfig+0x130>)
 800dffe:	4293      	cmp	r3, r2
 800e000:	d017      	beq.n	800e032 <TIM_Base_SetConfig+0x9a>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4a31      	ldr	r2, [pc, #196]	; (800e0cc <TIM_Base_SetConfig+0x134>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d013      	beq.n	800e032 <TIM_Base_SetConfig+0x9a>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	4a30      	ldr	r2, [pc, #192]	; (800e0d0 <TIM_Base_SetConfig+0x138>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d00f      	beq.n	800e032 <TIM_Base_SetConfig+0x9a>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	4a2f      	ldr	r2, [pc, #188]	; (800e0d4 <TIM_Base_SetConfig+0x13c>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d00b      	beq.n	800e032 <TIM_Base_SetConfig+0x9a>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	4a2e      	ldr	r2, [pc, #184]	; (800e0d8 <TIM_Base_SetConfig+0x140>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d007      	beq.n	800e032 <TIM_Base_SetConfig+0x9a>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	4a2d      	ldr	r2, [pc, #180]	; (800e0dc <TIM_Base_SetConfig+0x144>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d003      	beq.n	800e032 <TIM_Base_SetConfig+0x9a>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	4a2c      	ldr	r2, [pc, #176]	; (800e0e0 <TIM_Base_SetConfig+0x148>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d108      	bne.n	800e044 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	68fa      	ldr	r2, [r7, #12]
 800e040:	4313      	orrs	r3, r2
 800e042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	695b      	ldr	r3, [r3, #20]
 800e04e:	4313      	orrs	r3, r2
 800e050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	689a      	ldr	r2, [r3, #8]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	4a16      	ldr	r2, [pc, #88]	; (800e0c4 <TIM_Base_SetConfig+0x12c>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d00f      	beq.n	800e090 <TIM_Base_SetConfig+0xf8>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	4a18      	ldr	r2, [pc, #96]	; (800e0d4 <TIM_Base_SetConfig+0x13c>)
 800e074:	4293      	cmp	r3, r2
 800e076:	d00b      	beq.n	800e090 <TIM_Base_SetConfig+0xf8>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	4a17      	ldr	r2, [pc, #92]	; (800e0d8 <TIM_Base_SetConfig+0x140>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d007      	beq.n	800e090 <TIM_Base_SetConfig+0xf8>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	4a16      	ldr	r2, [pc, #88]	; (800e0dc <TIM_Base_SetConfig+0x144>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d003      	beq.n	800e090 <TIM_Base_SetConfig+0xf8>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	4a15      	ldr	r2, [pc, #84]	; (800e0e0 <TIM_Base_SetConfig+0x148>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d103      	bne.n	800e098 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	691a      	ldr	r2, [r3, #16]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	691b      	ldr	r3, [r3, #16]
 800e0a2:	f003 0301 	and.w	r3, r3, #1
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d105      	bne.n	800e0b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	691b      	ldr	r3, [r3, #16]
 800e0ae:	f023 0201 	bic.w	r2, r3, #1
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	611a      	str	r2, [r3, #16]
  }
}
 800e0b6:	bf00      	nop
 800e0b8:	3714      	adds	r7, #20
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop
 800e0c4:	40010000 	.word	0x40010000
 800e0c8:	40000400 	.word	0x40000400
 800e0cc:	40000800 	.word	0x40000800
 800e0d0:	40000c00 	.word	0x40000c00
 800e0d4:	40010400 	.word	0x40010400
 800e0d8:	40014000 	.word	0x40014000
 800e0dc:	40014400 	.word	0x40014400
 800e0e0:	40014800 	.word	0x40014800

0800e0e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b087      	sub	sp, #28
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6a1b      	ldr	r3, [r3, #32]
 800e0f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6a1b      	ldr	r3, [r3, #32]
 800e0f8:	f023 0201 	bic.w	r2, r3, #1
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	699b      	ldr	r3, [r3, #24]
 800e10a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	4b37      	ldr	r3, [pc, #220]	; (800e1ec <TIM_OC1_SetConfig+0x108>)
 800e110:	4013      	ands	r3, r2
 800e112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f023 0303 	bic.w	r3, r3, #3
 800e11a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	68fa      	ldr	r2, [r7, #12]
 800e122:	4313      	orrs	r3, r2
 800e124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	f023 0302 	bic.w	r3, r3, #2
 800e12c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	689b      	ldr	r3, [r3, #8]
 800e132:	697a      	ldr	r2, [r7, #20]
 800e134:	4313      	orrs	r3, r2
 800e136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	4a2d      	ldr	r2, [pc, #180]	; (800e1f0 <TIM_OC1_SetConfig+0x10c>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d00f      	beq.n	800e160 <TIM_OC1_SetConfig+0x7c>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	4a2c      	ldr	r2, [pc, #176]	; (800e1f4 <TIM_OC1_SetConfig+0x110>)
 800e144:	4293      	cmp	r3, r2
 800e146:	d00b      	beq.n	800e160 <TIM_OC1_SetConfig+0x7c>
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	4a2b      	ldr	r2, [pc, #172]	; (800e1f8 <TIM_OC1_SetConfig+0x114>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d007      	beq.n	800e160 <TIM_OC1_SetConfig+0x7c>
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	4a2a      	ldr	r2, [pc, #168]	; (800e1fc <TIM_OC1_SetConfig+0x118>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d003      	beq.n	800e160 <TIM_OC1_SetConfig+0x7c>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	4a29      	ldr	r2, [pc, #164]	; (800e200 <TIM_OC1_SetConfig+0x11c>)
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d10c      	bne.n	800e17a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	f023 0308 	bic.w	r3, r3, #8
 800e166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	68db      	ldr	r3, [r3, #12]
 800e16c:	697a      	ldr	r2, [r7, #20]
 800e16e:	4313      	orrs	r3, r2
 800e170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	f023 0304 	bic.w	r3, r3, #4
 800e178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	4a1c      	ldr	r2, [pc, #112]	; (800e1f0 <TIM_OC1_SetConfig+0x10c>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d00f      	beq.n	800e1a2 <TIM_OC1_SetConfig+0xbe>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	4a1b      	ldr	r2, [pc, #108]	; (800e1f4 <TIM_OC1_SetConfig+0x110>)
 800e186:	4293      	cmp	r3, r2
 800e188:	d00b      	beq.n	800e1a2 <TIM_OC1_SetConfig+0xbe>
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	4a1a      	ldr	r2, [pc, #104]	; (800e1f8 <TIM_OC1_SetConfig+0x114>)
 800e18e:	4293      	cmp	r3, r2
 800e190:	d007      	beq.n	800e1a2 <TIM_OC1_SetConfig+0xbe>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	4a19      	ldr	r2, [pc, #100]	; (800e1fc <TIM_OC1_SetConfig+0x118>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d003      	beq.n	800e1a2 <TIM_OC1_SetConfig+0xbe>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	4a18      	ldr	r2, [pc, #96]	; (800e200 <TIM_OC1_SetConfig+0x11c>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d111      	bne.n	800e1c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e1a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e1b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	695b      	ldr	r3, [r3, #20]
 800e1b6:	693a      	ldr	r2, [r7, #16]
 800e1b8:	4313      	orrs	r3, r2
 800e1ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	699b      	ldr	r3, [r3, #24]
 800e1c0:	693a      	ldr	r2, [r7, #16]
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	693a      	ldr	r2, [r7, #16]
 800e1ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	68fa      	ldr	r2, [r7, #12]
 800e1d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	685a      	ldr	r2, [r3, #4]
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	697a      	ldr	r2, [r7, #20]
 800e1de:	621a      	str	r2, [r3, #32]
}
 800e1e0:	bf00      	nop
 800e1e2:	371c      	adds	r7, #28
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr
 800e1ec:	fffeff8f 	.word	0xfffeff8f
 800e1f0:	40010000 	.word	0x40010000
 800e1f4:	40010400 	.word	0x40010400
 800e1f8:	40014000 	.word	0x40014000
 800e1fc:	40014400 	.word	0x40014400
 800e200:	40014800 	.word	0x40014800

0800e204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e204:	b480      	push	{r7}
 800e206:	b087      	sub	sp, #28
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6a1b      	ldr	r3, [r3, #32]
 800e212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6a1b      	ldr	r3, [r3, #32]
 800e218:	f023 0210 	bic.w	r2, r3, #16
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	685b      	ldr	r3, [r3, #4]
 800e224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	699b      	ldr	r3, [r3, #24]
 800e22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e22c:	68fa      	ldr	r2, [r7, #12]
 800e22e:	4b34      	ldr	r3, [pc, #208]	; (800e300 <TIM_OC2_SetConfig+0xfc>)
 800e230:	4013      	ands	r3, r2
 800e232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e23a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	021b      	lsls	r3, r3, #8
 800e242:	68fa      	ldr	r2, [r7, #12]
 800e244:	4313      	orrs	r3, r2
 800e246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	f023 0320 	bic.w	r3, r3, #32
 800e24e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	011b      	lsls	r3, r3, #4
 800e256:	697a      	ldr	r2, [r7, #20]
 800e258:	4313      	orrs	r3, r2
 800e25a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	4a29      	ldr	r2, [pc, #164]	; (800e304 <TIM_OC2_SetConfig+0x100>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d003      	beq.n	800e26c <TIM_OC2_SetConfig+0x68>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	4a28      	ldr	r2, [pc, #160]	; (800e308 <TIM_OC2_SetConfig+0x104>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d10d      	bne.n	800e288 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e272:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	011b      	lsls	r3, r3, #4
 800e27a:	697a      	ldr	r2, [r7, #20]
 800e27c:	4313      	orrs	r3, r2
 800e27e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e286:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	4a1e      	ldr	r2, [pc, #120]	; (800e304 <TIM_OC2_SetConfig+0x100>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d00f      	beq.n	800e2b0 <TIM_OC2_SetConfig+0xac>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	4a1d      	ldr	r2, [pc, #116]	; (800e308 <TIM_OC2_SetConfig+0x104>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d00b      	beq.n	800e2b0 <TIM_OC2_SetConfig+0xac>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	4a1c      	ldr	r2, [pc, #112]	; (800e30c <TIM_OC2_SetConfig+0x108>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d007      	beq.n	800e2b0 <TIM_OC2_SetConfig+0xac>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	4a1b      	ldr	r2, [pc, #108]	; (800e310 <TIM_OC2_SetConfig+0x10c>)
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d003      	beq.n	800e2b0 <TIM_OC2_SetConfig+0xac>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4a1a      	ldr	r2, [pc, #104]	; (800e314 <TIM_OC2_SetConfig+0x110>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d113      	bne.n	800e2d8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e2b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e2be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e2c0:	683b      	ldr	r3, [r7, #0]
 800e2c2:	695b      	ldr	r3, [r3, #20]
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	693a      	ldr	r2, [r7, #16]
 800e2c8:	4313      	orrs	r3, r2
 800e2ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	699b      	ldr	r3, [r3, #24]
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	693a      	ldr	r2, [r7, #16]
 800e2d4:	4313      	orrs	r3, r2
 800e2d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	693a      	ldr	r2, [r7, #16]
 800e2dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	68fa      	ldr	r2, [r7, #12]
 800e2e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	685a      	ldr	r2, [r3, #4]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	697a      	ldr	r2, [r7, #20]
 800e2f0:	621a      	str	r2, [r3, #32]
}
 800e2f2:	bf00      	nop
 800e2f4:	371c      	adds	r7, #28
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop
 800e300:	feff8fff 	.word	0xfeff8fff
 800e304:	40010000 	.word	0x40010000
 800e308:	40010400 	.word	0x40010400
 800e30c:	40014000 	.word	0x40014000
 800e310:	40014400 	.word	0x40014400
 800e314:	40014800 	.word	0x40014800

0800e318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e318:	b480      	push	{r7}
 800e31a:	b087      	sub	sp, #28
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6a1b      	ldr	r3, [r3, #32]
 800e326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	6a1b      	ldr	r3, [r3, #32]
 800e32c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	69db      	ldr	r3, [r3, #28]
 800e33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e340:	68fa      	ldr	r2, [r7, #12]
 800e342:	4b33      	ldr	r3, [pc, #204]	; (800e410 <TIM_OC3_SetConfig+0xf8>)
 800e344:	4013      	ands	r3, r2
 800e346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	f023 0303 	bic.w	r3, r3, #3
 800e34e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	4313      	orrs	r3, r2
 800e358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	689b      	ldr	r3, [r3, #8]
 800e366:	021b      	lsls	r3, r3, #8
 800e368:	697a      	ldr	r2, [r7, #20]
 800e36a:	4313      	orrs	r3, r2
 800e36c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4a28      	ldr	r2, [pc, #160]	; (800e414 <TIM_OC3_SetConfig+0xfc>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d003      	beq.n	800e37e <TIM_OC3_SetConfig+0x66>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	4a27      	ldr	r2, [pc, #156]	; (800e418 <TIM_OC3_SetConfig+0x100>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d10d      	bne.n	800e39a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e384:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	021b      	lsls	r3, r3, #8
 800e38c:	697a      	ldr	r2, [r7, #20]
 800e38e:	4313      	orrs	r3, r2
 800e390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	4a1d      	ldr	r2, [pc, #116]	; (800e414 <TIM_OC3_SetConfig+0xfc>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d00f      	beq.n	800e3c2 <TIM_OC3_SetConfig+0xaa>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	4a1c      	ldr	r2, [pc, #112]	; (800e418 <TIM_OC3_SetConfig+0x100>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d00b      	beq.n	800e3c2 <TIM_OC3_SetConfig+0xaa>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	4a1b      	ldr	r2, [pc, #108]	; (800e41c <TIM_OC3_SetConfig+0x104>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d007      	beq.n	800e3c2 <TIM_OC3_SetConfig+0xaa>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	4a1a      	ldr	r2, [pc, #104]	; (800e420 <TIM_OC3_SetConfig+0x108>)
 800e3b6:	4293      	cmp	r3, r2
 800e3b8:	d003      	beq.n	800e3c2 <TIM_OC3_SetConfig+0xaa>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	4a19      	ldr	r2, [pc, #100]	; (800e424 <TIM_OC3_SetConfig+0x10c>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d113      	bne.n	800e3ea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e3d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	695b      	ldr	r3, [r3, #20]
 800e3d6:	011b      	lsls	r3, r3, #4
 800e3d8:	693a      	ldr	r2, [r7, #16]
 800e3da:	4313      	orrs	r3, r2
 800e3dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	699b      	ldr	r3, [r3, #24]
 800e3e2:	011b      	lsls	r3, r3, #4
 800e3e4:	693a      	ldr	r2, [r7, #16]
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	693a      	ldr	r2, [r7, #16]
 800e3ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	685a      	ldr	r2, [r3, #4]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	697a      	ldr	r2, [r7, #20]
 800e402:	621a      	str	r2, [r3, #32]
}
 800e404:	bf00      	nop
 800e406:	371c      	adds	r7, #28
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr
 800e410:	fffeff8f 	.word	0xfffeff8f
 800e414:	40010000 	.word	0x40010000
 800e418:	40010400 	.word	0x40010400
 800e41c:	40014000 	.word	0x40014000
 800e420:	40014400 	.word	0x40014400
 800e424:	40014800 	.word	0x40014800

0800e428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e428:	b480      	push	{r7}
 800e42a:	b087      	sub	sp, #28
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	6a1b      	ldr	r3, [r3, #32]
 800e436:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6a1b      	ldr	r3, [r3, #32]
 800e43c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	69db      	ldr	r3, [r3, #28]
 800e44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e450:	68fa      	ldr	r2, [r7, #12]
 800e452:	4b24      	ldr	r3, [pc, #144]	; (800e4e4 <TIM_OC4_SetConfig+0xbc>)
 800e454:	4013      	ands	r3, r2
 800e456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e45e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	021b      	lsls	r3, r3, #8
 800e466:	68fa      	ldr	r2, [r7, #12]
 800e468:	4313      	orrs	r3, r2
 800e46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	689b      	ldr	r3, [r3, #8]
 800e478:	031b      	lsls	r3, r3, #12
 800e47a:	693a      	ldr	r2, [r7, #16]
 800e47c:	4313      	orrs	r3, r2
 800e47e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	4a19      	ldr	r2, [pc, #100]	; (800e4e8 <TIM_OC4_SetConfig+0xc0>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d00f      	beq.n	800e4a8 <TIM_OC4_SetConfig+0x80>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	4a18      	ldr	r2, [pc, #96]	; (800e4ec <TIM_OC4_SetConfig+0xc4>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d00b      	beq.n	800e4a8 <TIM_OC4_SetConfig+0x80>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	4a17      	ldr	r2, [pc, #92]	; (800e4f0 <TIM_OC4_SetConfig+0xc8>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d007      	beq.n	800e4a8 <TIM_OC4_SetConfig+0x80>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4a16      	ldr	r2, [pc, #88]	; (800e4f4 <TIM_OC4_SetConfig+0xcc>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d003      	beq.n	800e4a8 <TIM_OC4_SetConfig+0x80>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a15      	ldr	r2, [pc, #84]	; (800e4f8 <TIM_OC4_SetConfig+0xd0>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d109      	bne.n	800e4bc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e4ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	695b      	ldr	r3, [r3, #20]
 800e4b4:	019b      	lsls	r3, r3, #6
 800e4b6:	697a      	ldr	r2, [r7, #20]
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	697a      	ldr	r2, [r7, #20]
 800e4c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	693a      	ldr	r2, [r7, #16]
 800e4d4:	621a      	str	r2, [r3, #32]
}
 800e4d6:	bf00      	nop
 800e4d8:	371c      	adds	r7, #28
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	feff8fff 	.word	0xfeff8fff
 800e4e8:	40010000 	.word	0x40010000
 800e4ec:	40010400 	.word	0x40010400
 800e4f0:	40014000 	.word	0x40014000
 800e4f4:	40014400 	.word	0x40014400
 800e4f8:	40014800 	.word	0x40014800

0800e4fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b087      	sub	sp, #28
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
 800e504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6a1b      	ldr	r3, [r3, #32]
 800e50a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6a1b      	ldr	r3, [r3, #32]
 800e510:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e524:	68fa      	ldr	r2, [r7, #12]
 800e526:	4b21      	ldr	r3, [pc, #132]	; (800e5ac <TIM_OC5_SetConfig+0xb0>)
 800e528:	4013      	ands	r3, r2
 800e52a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	68fa      	ldr	r2, [r7, #12]
 800e532:	4313      	orrs	r3, r2
 800e534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e53c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	041b      	lsls	r3, r3, #16
 800e544:	693a      	ldr	r2, [r7, #16]
 800e546:	4313      	orrs	r3, r2
 800e548:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	4a18      	ldr	r2, [pc, #96]	; (800e5b0 <TIM_OC5_SetConfig+0xb4>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d00f      	beq.n	800e572 <TIM_OC5_SetConfig+0x76>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	4a17      	ldr	r2, [pc, #92]	; (800e5b4 <TIM_OC5_SetConfig+0xb8>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d00b      	beq.n	800e572 <TIM_OC5_SetConfig+0x76>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4a16      	ldr	r2, [pc, #88]	; (800e5b8 <TIM_OC5_SetConfig+0xbc>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d007      	beq.n	800e572 <TIM_OC5_SetConfig+0x76>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4a15      	ldr	r2, [pc, #84]	; (800e5bc <TIM_OC5_SetConfig+0xc0>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d003      	beq.n	800e572 <TIM_OC5_SetConfig+0x76>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	4a14      	ldr	r2, [pc, #80]	; (800e5c0 <TIM_OC5_SetConfig+0xc4>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d109      	bne.n	800e586 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e578:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	695b      	ldr	r3, [r3, #20]
 800e57e:	021b      	lsls	r3, r3, #8
 800e580:	697a      	ldr	r2, [r7, #20]
 800e582:	4313      	orrs	r3, r2
 800e584:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	697a      	ldr	r2, [r7, #20]
 800e58a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	68fa      	ldr	r2, [r7, #12]
 800e590:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	685a      	ldr	r2, [r3, #4]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	693a      	ldr	r2, [r7, #16]
 800e59e:	621a      	str	r2, [r3, #32]
}
 800e5a0:	bf00      	nop
 800e5a2:	371c      	adds	r7, #28
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr
 800e5ac:	fffeff8f 	.word	0xfffeff8f
 800e5b0:	40010000 	.word	0x40010000
 800e5b4:	40010400 	.word	0x40010400
 800e5b8:	40014000 	.word	0x40014000
 800e5bc:	40014400 	.word	0x40014400
 800e5c0:	40014800 	.word	0x40014800

0800e5c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b087      	sub	sp, #28
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6a1b      	ldr	r3, [r3, #32]
 800e5d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6a1b      	ldr	r3, [r3, #32]
 800e5d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e5ec:	68fa      	ldr	r2, [r7, #12]
 800e5ee:	4b22      	ldr	r3, [pc, #136]	; (800e678 <TIM_OC6_SetConfig+0xb4>)
 800e5f0:	4013      	ands	r3, r2
 800e5f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	021b      	lsls	r3, r3, #8
 800e5fa:	68fa      	ldr	r2, [r7, #12]
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e606:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	689b      	ldr	r3, [r3, #8]
 800e60c:	051b      	lsls	r3, r3, #20
 800e60e:	693a      	ldr	r2, [r7, #16]
 800e610:	4313      	orrs	r3, r2
 800e612:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	4a19      	ldr	r2, [pc, #100]	; (800e67c <TIM_OC6_SetConfig+0xb8>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d00f      	beq.n	800e63c <TIM_OC6_SetConfig+0x78>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	4a18      	ldr	r2, [pc, #96]	; (800e680 <TIM_OC6_SetConfig+0xbc>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d00b      	beq.n	800e63c <TIM_OC6_SetConfig+0x78>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	4a17      	ldr	r2, [pc, #92]	; (800e684 <TIM_OC6_SetConfig+0xc0>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d007      	beq.n	800e63c <TIM_OC6_SetConfig+0x78>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	4a16      	ldr	r2, [pc, #88]	; (800e688 <TIM_OC6_SetConfig+0xc4>)
 800e630:	4293      	cmp	r3, r2
 800e632:	d003      	beq.n	800e63c <TIM_OC6_SetConfig+0x78>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	4a15      	ldr	r2, [pc, #84]	; (800e68c <TIM_OC6_SetConfig+0xc8>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d109      	bne.n	800e650 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e642:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	695b      	ldr	r3, [r3, #20]
 800e648:	029b      	lsls	r3, r3, #10
 800e64a:	697a      	ldr	r2, [r7, #20]
 800e64c:	4313      	orrs	r3, r2
 800e64e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	697a      	ldr	r2, [r7, #20]
 800e654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	68fa      	ldr	r2, [r7, #12]
 800e65a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	685a      	ldr	r2, [r3, #4]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	693a      	ldr	r2, [r7, #16]
 800e668:	621a      	str	r2, [r3, #32]
}
 800e66a:	bf00      	nop
 800e66c:	371c      	adds	r7, #28
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop
 800e678:	feff8fff 	.word	0xfeff8fff
 800e67c:	40010000 	.word	0x40010000
 800e680:	40010400 	.word	0x40010400
 800e684:	40014000 	.word	0x40014000
 800e688:	40014400 	.word	0x40014400
 800e68c:	40014800 	.word	0x40014800

0800e690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e690:	b480      	push	{r7}
 800e692:	b087      	sub	sp, #28
 800e694:	af00      	add	r7, sp, #0
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	60b9      	str	r1, [r7, #8]
 800e69a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	6a1b      	ldr	r3, [r3, #32]
 800e6a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	6a1b      	ldr	r3, [r3, #32]
 800e6a6:	f023 0201 	bic.w	r2, r3, #1
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	699b      	ldr	r3, [r3, #24]
 800e6b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e6ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	011b      	lsls	r3, r3, #4
 800e6c0:	693a      	ldr	r2, [r7, #16]
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	f023 030a 	bic.w	r3, r3, #10
 800e6cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e6ce:	697a      	ldr	r2, [r7, #20]
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	4313      	orrs	r3, r2
 800e6d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	693a      	ldr	r2, [r7, #16]
 800e6da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	697a      	ldr	r2, [r7, #20]
 800e6e0:	621a      	str	r2, [r3, #32]
}
 800e6e2:	bf00      	nop
 800e6e4:	371c      	adds	r7, #28
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr

0800e6ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e6ee:	b480      	push	{r7}
 800e6f0:	b087      	sub	sp, #28
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	60f8      	str	r0, [r7, #12]
 800e6f6:	60b9      	str	r1, [r7, #8]
 800e6f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	6a1b      	ldr	r3, [r3, #32]
 800e6fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	6a1b      	ldr	r3, [r3, #32]
 800e704:	f023 0210 	bic.w	r2, r3, #16
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	699b      	ldr	r3, [r3, #24]
 800e710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e718:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	031b      	lsls	r3, r3, #12
 800e71e:	693a      	ldr	r2, [r7, #16]
 800e720:	4313      	orrs	r3, r2
 800e722:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e72a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	011b      	lsls	r3, r3, #4
 800e730:	697a      	ldr	r2, [r7, #20]
 800e732:	4313      	orrs	r3, r2
 800e734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	693a      	ldr	r2, [r7, #16]
 800e73a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	697a      	ldr	r2, [r7, #20]
 800e740:	621a      	str	r2, [r3, #32]
}
 800e742:	bf00      	nop
 800e744:	371c      	adds	r7, #28
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
	...

0800e750 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	689b      	ldr	r3, [r3, #8]
 800e75e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e760:	68fa      	ldr	r2, [r7, #12]
 800e762:	4b09      	ldr	r3, [pc, #36]	; (800e788 <TIM_ITRx_SetConfig+0x38>)
 800e764:	4013      	ands	r3, r2
 800e766:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e768:	683a      	ldr	r2, [r7, #0]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	4313      	orrs	r3, r2
 800e76e:	f043 0307 	orr.w	r3, r3, #7
 800e772:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	68fa      	ldr	r2, [r7, #12]
 800e778:	609a      	str	r2, [r3, #8]
}
 800e77a:	bf00      	nop
 800e77c:	3714      	adds	r7, #20
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop
 800e788:	ffcfff8f 	.word	0xffcfff8f

0800e78c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b087      	sub	sp, #28
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	607a      	str	r2, [r7, #4]
 800e798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e7a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	021a      	lsls	r2, r3, #8
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	431a      	orrs	r2, r3
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	4313      	orrs	r3, r2
 800e7b4:	697a      	ldr	r2, [r7, #20]
 800e7b6:	4313      	orrs	r3, r2
 800e7b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	697a      	ldr	r2, [r7, #20]
 800e7be:	609a      	str	r2, [r3, #8]
}
 800e7c0:	bf00      	nop
 800e7c2:	371c      	adds	r7, #28
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b087      	sub	sp, #28
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	f003 031f 	and.w	r3, r3, #31
 800e7de:	2201      	movs	r2, #1
 800e7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e7e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	6a1a      	ldr	r2, [r3, #32]
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	43db      	mvns	r3, r3
 800e7ee:	401a      	ands	r2, r3
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	6a1a      	ldr	r2, [r3, #32]
 800e7f8:	68bb      	ldr	r3, [r7, #8]
 800e7fa:	f003 031f 	and.w	r3, r3, #31
 800e7fe:	6879      	ldr	r1, [r7, #4]
 800e800:	fa01 f303 	lsl.w	r3, r1, r3
 800e804:	431a      	orrs	r2, r3
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	621a      	str	r2, [r3, #32]
}
 800e80a:	bf00      	nop
 800e80c:	371c      	adds	r7, #28
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr
	...

0800e818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e828:	2b01      	cmp	r3, #1
 800e82a:	d101      	bne.n	800e830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e82c:	2302      	movs	r3, #2
 800e82e:	e06d      	b.n	800e90c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2202      	movs	r2, #2
 800e83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4a30      	ldr	r2, [pc, #192]	; (800e918 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d004      	beq.n	800e864 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	4a2f      	ldr	r2, [pc, #188]	; (800e91c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d108      	bne.n	800e876 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e86a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	68fa      	ldr	r2, [r7, #12]
 800e872:	4313      	orrs	r3, r2
 800e874:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e87c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	68fa      	ldr	r2, [r7, #12]
 800e884:	4313      	orrs	r3, r2
 800e886:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a20      	ldr	r2, [pc, #128]	; (800e918 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d022      	beq.n	800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8a2:	d01d      	beq.n	800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	4a1d      	ldr	r2, [pc, #116]	; (800e920 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d018      	beq.n	800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	4a1c      	ldr	r2, [pc, #112]	; (800e924 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	d013      	beq.n	800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4a1a      	ldr	r2, [pc, #104]	; (800e928 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d00e      	beq.n	800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	4a15      	ldr	r2, [pc, #84]	; (800e91c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d009      	beq.n	800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4a16      	ldr	r2, [pc, #88]	; (800e92c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d004      	beq.n	800e8e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a15      	ldr	r2, [pc, #84]	; (800e930 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d10c      	bne.n	800e8fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e8e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	689b      	ldr	r3, [r3, #8]
 800e8ec:	68ba      	ldr	r2, [r7, #8]
 800e8ee:	4313      	orrs	r3, r2
 800e8f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	68ba      	ldr	r2, [r7, #8]
 800e8f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3714      	adds	r7, #20
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr
 800e918:	40010000 	.word	0x40010000
 800e91c:	40010400 	.word	0x40010400
 800e920:	40000400 	.word	0x40000400
 800e924:	40000800 	.word	0x40000800
 800e928:	40000c00 	.word	0x40000c00
 800e92c:	40001800 	.word	0x40001800
 800e930:	40014000 	.word	0x40014000

0800e934 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e934:	b480      	push	{r7}
 800e936:	b085      	sub	sp, #20
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e93e:	2300      	movs	r3, #0
 800e940:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d101      	bne.n	800e950 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e94c:	2302      	movs	r3, #2
 800e94e:	e065      	b.n	800ea1c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2201      	movs	r2, #1
 800e954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	4313      	orrs	r3, r2
 800e964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	689b      	ldr	r3, [r3, #8]
 800e970:	4313      	orrs	r3, r2
 800e972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	4313      	orrs	r3, r2
 800e980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	4313      	orrs	r3, r2
 800e98e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	691b      	ldr	r3, [r3, #16]
 800e99a:	4313      	orrs	r3, r2
 800e99c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	695b      	ldr	r3, [r3, #20]
 800e9a8:	4313      	orrs	r3, r2
 800e9aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9b6:	4313      	orrs	r3, r2
 800e9b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	699b      	ldr	r3, [r3, #24]
 800e9c4:	041b      	lsls	r3, r3, #16
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4a16      	ldr	r2, [pc, #88]	; (800ea28 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d004      	beq.n	800e9de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4a14      	ldr	r2, [pc, #80]	; (800ea2c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d115      	bne.n	800ea0a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9e8:	051b      	lsls	r3, r3, #20
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	69db      	ldr	r3, [r3, #28]
 800e9f8:	4313      	orrs	r3, r2
 800e9fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	6a1b      	ldr	r3, [r3, #32]
 800ea06:	4313      	orrs	r3, r2
 800ea08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	68fa      	ldr	r2, [r7, #12]
 800ea10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2200      	movs	r2, #0
 800ea16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea1a:	2300      	movs	r3, #0
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3714      	adds	r7, #20
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr
 800ea28:	40010000 	.word	0x40010000
 800ea2c:	40010400 	.word	0x40010400

0800ea30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b083      	sub	sp, #12
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ea38:	bf00      	nop
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr

0800ea44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ea4c:	bf00      	nop
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr

0800ea58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ea60:	bf00      	nop
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d101      	bne.n	800ea7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e042      	b.n	800eb04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d106      	bne.n	800ea96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f7f3 ff1d 	bl	80028d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2224      	movs	r2, #36	; 0x24
 800ea9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f022 0201 	bic.w	r2, r2, #1
 800eaac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d002      	beq.n	800eabc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f001 fa44 	bl	800ff44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f000 fcd9 	bl	800f474 <UART_SetConfig>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d101      	bne.n	800eacc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800eac8:	2301      	movs	r3, #1
 800eaca:	e01b      	b.n	800eb04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	685a      	ldr	r2, [r3, #4]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	689a      	ldr	r2, [r3, #8]
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eaea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f042 0201 	orr.w	r2, r2, #1
 800eafa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f001 fac3 	bl	8010088 <UART_CheckIdleState>
 800eb02:	4603      	mov	r3, r0
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3708      	adds	r7, #8
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b08a      	sub	sp, #40	; 0x28
 800eb10:	af02      	add	r7, sp, #8
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	603b      	str	r3, [r7, #0]
 800eb18:	4613      	mov	r3, r2
 800eb1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb22:	2b20      	cmp	r3, #32
 800eb24:	d17b      	bne.n	800ec1e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d002      	beq.n	800eb32 <HAL_UART_Transmit+0x26>
 800eb2c:	88fb      	ldrh	r3, [r7, #6]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d101      	bne.n	800eb36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800eb32:	2301      	movs	r3, #1
 800eb34:	e074      	b.n	800ec20 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2221      	movs	r2, #33	; 0x21
 800eb42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eb46:	f7f4 f9fd 	bl	8002f44 <HAL_GetTick>
 800eb4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	88fa      	ldrh	r2, [r7, #6]
 800eb50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	88fa      	ldrh	r2, [r7, #6]
 800eb58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb64:	d108      	bne.n	800eb78 <HAL_UART_Transmit+0x6c>
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	691b      	ldr	r3, [r3, #16]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d104      	bne.n	800eb78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	61bb      	str	r3, [r7, #24]
 800eb76:	e003      	b.n	800eb80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800eb80:	e030      	b.n	800ebe4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	9300      	str	r3, [sp, #0]
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	2180      	movs	r1, #128	; 0x80
 800eb8c:	68f8      	ldr	r0, [r7, #12]
 800eb8e:	f001 fb25 	bl	80101dc <UART_WaitOnFlagUntilTimeout>
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d005      	beq.n	800eba4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2220      	movs	r2, #32
 800eb9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800eba0:	2303      	movs	r3, #3
 800eba2:	e03d      	b.n	800ec20 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800eba4:	69fb      	ldr	r3, [r7, #28]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d10b      	bne.n	800ebc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ebaa:	69bb      	ldr	r3, [r7, #24]
 800ebac:	881b      	ldrh	r3, [r3, #0]
 800ebae:	461a      	mov	r2, r3
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ebb8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	3302      	adds	r3, #2
 800ebbe:	61bb      	str	r3, [r7, #24]
 800ebc0:	e007      	b.n	800ebd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	781a      	ldrb	r2, [r3, #0]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ebcc:	69fb      	ldr	r3, [r7, #28]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ebd8:	b29b      	uxth	r3, r3
 800ebda:	3b01      	subs	r3, #1
 800ebdc:	b29a      	uxth	r2, r3
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d1c8      	bne.n	800eb82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	9300      	str	r3, [sp, #0]
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	2140      	movs	r1, #64	; 0x40
 800ebfa:	68f8      	ldr	r0, [r7, #12]
 800ebfc:	f001 faee 	bl	80101dc <UART_WaitOnFlagUntilTimeout>
 800ec00:	4603      	mov	r3, r0
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d005      	beq.n	800ec12 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2220      	movs	r2, #32
 800ec0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ec0e:	2303      	movs	r3, #3
 800ec10:	e006      	b.n	800ec20 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2220      	movs	r2, #32
 800ec16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	e000      	b.n	800ec20 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800ec1e:	2302      	movs	r3, #2
  }
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3720      	adds	r7, #32
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b08a      	sub	sp, #40	; 0x28
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	60b9      	str	r1, [r7, #8]
 800ec32:	4613      	mov	r3, r2
 800ec34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec3c:	2b20      	cmp	r3, #32
 800ec3e:	d137      	bne.n	800ecb0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec40:	68bb      	ldr	r3, [r7, #8]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d002      	beq.n	800ec4c <HAL_UART_Receive_IT+0x24>
 800ec46:	88fb      	ldrh	r3, [r7, #6]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d101      	bne.n	800ec50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	e030      	b.n	800ecb2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2200      	movs	r2, #0
 800ec54:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	4a18      	ldr	r2, [pc, #96]	; (800ecbc <HAL_UART_Receive_IT+0x94>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d01f      	beq.n	800eca0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	685b      	ldr	r3, [r3, #4]
 800ec66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d018      	beq.n	800eca0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	e853 3f00 	ldrex	r3, [r3]
 800ec7a:	613b      	str	r3, [r7, #16]
   return(result);
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ec82:	627b      	str	r3, [r7, #36]	; 0x24
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	461a      	mov	r2, r3
 800ec8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec8c:	623b      	str	r3, [r7, #32]
 800ec8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec90:	69f9      	ldr	r1, [r7, #28]
 800ec92:	6a3a      	ldr	r2, [r7, #32]
 800ec94:	e841 2300 	strex	r3, r2, [r1]
 800ec98:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d1e6      	bne.n	800ec6e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800eca0:	88fb      	ldrh	r3, [r7, #6]
 800eca2:	461a      	mov	r2, r3
 800eca4:	68b9      	ldr	r1, [r7, #8]
 800eca6:	68f8      	ldr	r0, [r7, #12]
 800eca8:	f001 fb06 	bl	80102b8 <UART_Start_Receive_IT>
 800ecac:	4603      	mov	r3, r0
 800ecae:	e000      	b.n	800ecb2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ecb0:	2302      	movs	r3, #2
  }
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3728      	adds	r7, #40	; 0x28
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	58000c00 	.word	0x58000c00

0800ecc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b0ba      	sub	sp, #232	; 0xe8
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	69db      	ldr	r3, [r3, #28]
 800ecce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	689b      	ldr	r3, [r3, #8]
 800ece2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ece6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ecea:	f640 030f 	movw	r3, #2063	; 0x80f
 800ecee:	4013      	ands	r3, r2
 800ecf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ecf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d11b      	bne.n	800ed34 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ecfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed00:	f003 0320 	and.w	r3, r3, #32
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d015      	beq.n	800ed34 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ed08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed0c:	f003 0320 	and.w	r3, r3, #32
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d105      	bne.n	800ed20 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ed14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d009      	beq.n	800ed34 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	f000 8377 	beq.w	800f418 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	4798      	blx	r3
      }
      return;
 800ed32:	e371      	b.n	800f418 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ed34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	f000 8123 	beq.w	800ef84 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ed3e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ed42:	4b8d      	ldr	r3, [pc, #564]	; (800ef78 <HAL_UART_IRQHandler+0x2b8>)
 800ed44:	4013      	ands	r3, r2
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d106      	bne.n	800ed58 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ed4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ed4e:	4b8b      	ldr	r3, [pc, #556]	; (800ef7c <HAL_UART_IRQHandler+0x2bc>)
 800ed50:	4013      	ands	r3, r2
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	f000 8116 	beq.w	800ef84 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ed58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed5c:	f003 0301 	and.w	r3, r3, #1
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d011      	beq.n	800ed88 <HAL_UART_IRQHandler+0xc8>
 800ed64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ed68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d00b      	beq.n	800ed88 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2201      	movs	r2, #1
 800ed76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed7e:	f043 0201 	orr.w	r2, r3, #1
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ed88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ed8c:	f003 0302 	and.w	r3, r3, #2
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d011      	beq.n	800edb8 <HAL_UART_IRQHandler+0xf8>
 800ed94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed98:	f003 0301 	and.w	r3, r3, #1
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d00b      	beq.n	800edb8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	2202      	movs	r2, #2
 800eda6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edae:	f043 0204 	orr.w	r2, r3, #4
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800edb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edbc:	f003 0304 	and.w	r3, r3, #4
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d011      	beq.n	800ede8 <HAL_UART_IRQHandler+0x128>
 800edc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800edc8:	f003 0301 	and.w	r3, r3, #1
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d00b      	beq.n	800ede8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	2204      	movs	r2, #4
 800edd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800edde:	f043 0202 	orr.w	r2, r3, #2
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ede8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800edec:	f003 0308 	and.w	r3, r3, #8
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d017      	beq.n	800ee24 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800edf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edf8:	f003 0320 	and.w	r3, r3, #32
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d105      	bne.n	800ee0c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ee00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ee04:	4b5c      	ldr	r3, [pc, #368]	; (800ef78 <HAL_UART_IRQHandler+0x2b8>)
 800ee06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d00b      	beq.n	800ee24 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	2208      	movs	r2, #8
 800ee12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee1a:	f043 0208 	orr.w	r2, r3, #8
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ee24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d012      	beq.n	800ee56 <HAL_UART_IRQHandler+0x196>
 800ee30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d00c      	beq.n	800ee56 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ee44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee4c:	f043 0220 	orr.w	r2, r3, #32
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f000 82dd 	beq.w	800f41c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ee62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee66:	f003 0320 	and.w	r3, r3, #32
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d013      	beq.n	800ee96 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ee6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee72:	f003 0320 	and.w	r3, r3, #32
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d105      	bne.n	800ee86 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ee7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d007      	beq.n	800ee96 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d003      	beq.n	800ee96 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	689b      	ldr	r3, [r3, #8]
 800eea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeaa:	2b40      	cmp	r3, #64	; 0x40
 800eeac:	d005      	beq.n	800eeba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800eeae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eeb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d054      	beq.n	800ef64 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f001 fb1e 	bl	80104fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	689b      	ldr	r3, [r3, #8]
 800eec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeca:	2b40      	cmp	r3, #64	; 0x40
 800eecc:	d146      	bne.n	800ef5c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	3308      	adds	r3, #8
 800eed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800eedc:	e853 3f00 	ldrex	r3, [r3]
 800eee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800eee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eeec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	3308      	adds	r3, #8
 800eef6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800eefa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800eefe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ef06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ef0a:	e841 2300 	strex	r3, r2, [r1]
 800ef0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ef12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d1d9      	bne.n	800eece <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d017      	beq.n	800ef54 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef2a:	4a15      	ldr	r2, [pc, #84]	; (800ef80 <HAL_UART_IRQHandler+0x2c0>)
 800ef2c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7f7 fa11 	bl	800635c <HAL_DMA_Abort_IT>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d019      	beq.n	800ef74 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ef46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef48:	687a      	ldr	r2, [r7, #4]
 800ef4a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800ef4e:	4610      	mov	r0, r2
 800ef50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef52:	e00f      	b.n	800ef74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f000 fa77 	bl	800f448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef5a:	e00b      	b.n	800ef74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f000 fa73 	bl	800f448 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef62:	e007      	b.n	800ef74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 fa6f 	bl	800f448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800ef72:	e253      	b.n	800f41c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef74:	bf00      	nop
    return;
 800ef76:	e251      	b.n	800f41c <HAL_UART_IRQHandler+0x75c>
 800ef78:	10000001 	.word	0x10000001
 800ef7c:	04000120 	.word	0x04000120
 800ef80:	080105c9 	.word	0x080105c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef88:	2b01      	cmp	r3, #1
 800ef8a:	f040 81e7 	bne.w	800f35c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ef8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef92:	f003 0310 	and.w	r3, r3, #16
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	f000 81e0 	beq.w	800f35c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ef9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efa0:	f003 0310 	and.w	r3, r3, #16
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	f000 81d9 	beq.w	800f35c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	2210      	movs	r2, #16
 800efb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	689b      	ldr	r3, [r3, #8]
 800efb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efbc:	2b40      	cmp	r3, #64	; 0x40
 800efbe:	f040 8151 	bne.w	800f264 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	4a96      	ldr	r2, [pc, #600]	; (800f224 <HAL_UART_IRQHandler+0x564>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d068      	beq.n	800f0a2 <HAL_UART_IRQHandler+0x3e2>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4a93      	ldr	r2, [pc, #588]	; (800f228 <HAL_UART_IRQHandler+0x568>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d061      	beq.n	800f0a2 <HAL_UART_IRQHandler+0x3e2>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	4a91      	ldr	r2, [pc, #580]	; (800f22c <HAL_UART_IRQHandler+0x56c>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d05a      	beq.n	800f0a2 <HAL_UART_IRQHandler+0x3e2>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4a8e      	ldr	r2, [pc, #568]	; (800f230 <HAL_UART_IRQHandler+0x570>)
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d053      	beq.n	800f0a2 <HAL_UART_IRQHandler+0x3e2>
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	4a8c      	ldr	r2, [pc, #560]	; (800f234 <HAL_UART_IRQHandler+0x574>)
 800f004:	4293      	cmp	r3, r2
 800f006:	d04c      	beq.n	800f0a2 <HAL_UART_IRQHandler+0x3e2>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4a89      	ldr	r2, [pc, #548]	; (800f238 <HAL_UART_IRQHandler+0x578>)
 800f012:	4293      	cmp	r3, r2
 800f014:	d045      	beq.n	800f0a2 <HAL_UART_IRQHandler+0x3e2>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	4a87      	ldr	r2, [pc, #540]	; (800f23c <HAL_UART_IRQHandler+0x57c>)
 800f020:	4293      	cmp	r3, r2
 800f022:	d03e      	beq.n	800f0a2 <HAL_UART_IRQHandler+0x3e2>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	4a84      	ldr	r2, [pc, #528]	; (800f240 <HAL_UART_IRQHandler+0x580>)
 800f02e:	4293      	cmp	r3, r2
 800f030:	d037      	beq.n	800f0a2 <HAL_UART_IRQHandler+0x3e2>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4a82      	ldr	r2, [pc, #520]	; (800f244 <HAL_UART_IRQHandler+0x584>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d030      	beq.n	800f0a2 <HAL_UART_IRQHandler+0x3e2>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4a7f      	ldr	r2, [pc, #508]	; (800f248 <HAL_UART_IRQHandler+0x588>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d029      	beq.n	800f0a2 <HAL_UART_IRQHandler+0x3e2>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	4a7d      	ldr	r2, [pc, #500]	; (800f24c <HAL_UART_IRQHandler+0x58c>)
 800f058:	4293      	cmp	r3, r2
 800f05a:	d022      	beq.n	800f0a2 <HAL_UART_IRQHandler+0x3e2>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4a7a      	ldr	r2, [pc, #488]	; (800f250 <HAL_UART_IRQHandler+0x590>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d01b      	beq.n	800f0a2 <HAL_UART_IRQHandler+0x3e2>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	4a78      	ldr	r2, [pc, #480]	; (800f254 <HAL_UART_IRQHandler+0x594>)
 800f074:	4293      	cmp	r3, r2
 800f076:	d014      	beq.n	800f0a2 <HAL_UART_IRQHandler+0x3e2>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	4a75      	ldr	r2, [pc, #468]	; (800f258 <HAL_UART_IRQHandler+0x598>)
 800f082:	4293      	cmp	r3, r2
 800f084:	d00d      	beq.n	800f0a2 <HAL_UART_IRQHandler+0x3e2>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	4a73      	ldr	r2, [pc, #460]	; (800f25c <HAL_UART_IRQHandler+0x59c>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d006      	beq.n	800f0a2 <HAL_UART_IRQHandler+0x3e2>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a70      	ldr	r2, [pc, #448]	; (800f260 <HAL_UART_IRQHandler+0x5a0>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d106      	bne.n	800f0b0 <HAL_UART_IRQHandler+0x3f0>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	e005      	b.n	800f0bc <HAL_UART_IRQHandler+0x3fc>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	685b      	ldr	r3, [r3, #4]
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f0c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	f000 81ab 	beq.w	800f420 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f0d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f0d4:	429a      	cmp	r2, r3
 800f0d6:	f080 81a3 	bcs.w	800f420 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f0e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f0ea:	69db      	ldr	r3, [r3, #28]
 800f0ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0f0:	f000 8087 	beq.w	800f202 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f100:	e853 3f00 	ldrex	r3, [r3]
 800f104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f10c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	461a      	mov	r2, r3
 800f11a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f11e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f122:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f126:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f12a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f12e:	e841 2300 	strex	r3, r2, [r1]
 800f132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d1da      	bne.n	800f0f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	3308      	adds	r3, #8
 800f144:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f148:	e853 3f00 	ldrex	r3, [r3]
 800f14c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f14e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f150:	f023 0301 	bic.w	r3, r3, #1
 800f154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	3308      	adds	r3, #8
 800f15e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f162:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f166:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f168:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f16a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f16e:	e841 2300 	strex	r3, r2, [r1]
 800f172:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f176:	2b00      	cmp	r3, #0
 800f178:	d1e1      	bne.n	800f13e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	3308      	adds	r3, #8
 800f180:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f184:	e853 3f00 	ldrex	r3, [r3]
 800f188:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f18a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f18c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	3308      	adds	r3, #8
 800f19a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f19e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f1a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f1a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f1a6:	e841 2300 	strex	r3, r2, [r1]
 800f1aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f1ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d1e3      	bne.n	800f17a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2220      	movs	r2, #32
 800f1b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1c8:	e853 3f00 	ldrex	r3, [r3]
 800f1cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f1ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1d0:	f023 0310 	bic.w	r3, r3, #16
 800f1d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	461a      	mov	r2, r3
 800f1de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f1e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800f1e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f1e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f1ea:	e841 2300 	strex	r3, r2, [r1]
 800f1ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f1f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d1e4      	bne.n	800f1c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7f6 fd8f 	bl	8005d20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2202      	movs	r2, #2
 800f206:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f214:	b29b      	uxth	r3, r3
 800f216:	1ad3      	subs	r3, r2, r3
 800f218:	b29b      	uxth	r3, r3
 800f21a:	4619      	mov	r1, r3
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f000 f91d 	bl	800f45c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f222:	e0fd      	b.n	800f420 <HAL_UART_IRQHandler+0x760>
 800f224:	40020010 	.word	0x40020010
 800f228:	40020028 	.word	0x40020028
 800f22c:	40020040 	.word	0x40020040
 800f230:	40020058 	.word	0x40020058
 800f234:	40020070 	.word	0x40020070
 800f238:	40020088 	.word	0x40020088
 800f23c:	400200a0 	.word	0x400200a0
 800f240:	400200b8 	.word	0x400200b8
 800f244:	40020410 	.word	0x40020410
 800f248:	40020428 	.word	0x40020428
 800f24c:	40020440 	.word	0x40020440
 800f250:	40020458 	.word	0x40020458
 800f254:	40020470 	.word	0x40020470
 800f258:	40020488 	.word	0x40020488
 800f25c:	400204a0 	.word	0x400204a0
 800f260:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f270:	b29b      	uxth	r3, r3
 800f272:	1ad3      	subs	r3, r2, r3
 800f274:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f27e:	b29b      	uxth	r3, r3
 800f280:	2b00      	cmp	r3, #0
 800f282:	f000 80cf 	beq.w	800f424 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800f286:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f000 80ca 	beq.w	800f424 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f298:	e853 3f00 	ldrex	r3, [r3]
 800f29c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f2a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f2b2:	647b      	str	r3, [r7, #68]	; 0x44
 800f2b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f2b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2ba:	e841 2300 	strex	r3, r2, [r1]
 800f2be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d1e4      	bne.n	800f290 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	3308      	adds	r3, #8
 800f2cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d0:	e853 3f00 	ldrex	r3, [r3]
 800f2d4:	623b      	str	r3, [r7, #32]
   return(result);
 800f2d6:	6a3a      	ldr	r2, [r7, #32]
 800f2d8:	4b55      	ldr	r3, [pc, #340]	; (800f430 <HAL_UART_IRQHandler+0x770>)
 800f2da:	4013      	ands	r3, r2
 800f2dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	3308      	adds	r3, #8
 800f2e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f2ea:	633a      	str	r2, [r7, #48]	; 0x30
 800f2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f2f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2f2:	e841 2300 	strex	r3, r2, [r1]
 800f2f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d1e3      	bne.n	800f2c6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2220      	movs	r2, #32
 800f302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2200      	movs	r2, #0
 800f30a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2200      	movs	r2, #0
 800f310:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	e853 3f00 	ldrex	r3, [r3]
 800f31e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f023 0310 	bic.w	r3, r3, #16
 800f326:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	461a      	mov	r2, r3
 800f330:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f334:	61fb      	str	r3, [r7, #28]
 800f336:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f338:	69b9      	ldr	r1, [r7, #24]
 800f33a:	69fa      	ldr	r2, [r7, #28]
 800f33c:	e841 2300 	strex	r3, r2, [r1]
 800f340:	617b      	str	r3, [r7, #20]
   return(result);
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d1e4      	bne.n	800f312 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2202      	movs	r2, #2
 800f34c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f34e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f352:	4619      	mov	r1, r3
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 f881 	bl	800f45c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f35a:	e063      	b.n	800f424 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f35c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f364:	2b00      	cmp	r3, #0
 800f366:	d00e      	beq.n	800f386 <HAL_UART_IRQHandler+0x6c6>
 800f368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f36c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f370:	2b00      	cmp	r3, #0
 800f372:	d008      	beq.n	800f386 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f37c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f001 fe80 	bl	8011084 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f384:	e051      	b.n	800f42a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f38a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d014      	beq.n	800f3bc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d105      	bne.n	800f3aa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f39e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f3a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d008      	beq.n	800f3bc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d03a      	beq.n	800f428 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	4798      	blx	r3
    }
    return;
 800f3ba:	e035      	b.n	800f428 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f3bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d009      	beq.n	800f3dc <HAL_UART_IRQHandler+0x71c>
 800f3c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d003      	beq.n	800f3dc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f001 f90d 	bl	80105f4 <UART_EndTransmit_IT>
    return;
 800f3da:	e026      	b.n	800f42a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f3dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d009      	beq.n	800f3fc <HAL_UART_IRQHandler+0x73c>
 800f3e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f3ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d003      	beq.n	800f3fc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f001 fe59 	bl	80110ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f3fa:	e016      	b.n	800f42a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f404:	2b00      	cmp	r3, #0
 800f406:	d010      	beq.n	800f42a <HAL_UART_IRQHandler+0x76a>
 800f408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	da0c      	bge.n	800f42a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f001 fe41 	bl	8011098 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f416:	e008      	b.n	800f42a <HAL_UART_IRQHandler+0x76a>
      return;
 800f418:	bf00      	nop
 800f41a:	e006      	b.n	800f42a <HAL_UART_IRQHandler+0x76a>
    return;
 800f41c:	bf00      	nop
 800f41e:	e004      	b.n	800f42a <HAL_UART_IRQHandler+0x76a>
      return;
 800f420:	bf00      	nop
 800f422:	e002      	b.n	800f42a <HAL_UART_IRQHandler+0x76a>
      return;
 800f424:	bf00      	nop
 800f426:	e000      	b.n	800f42a <HAL_UART_IRQHandler+0x76a>
    return;
 800f428:	bf00      	nop
  }
}
 800f42a:	37e8      	adds	r7, #232	; 0xe8
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	effffffe 	.word	0xeffffffe

0800f434 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f43c:	bf00      	nop
 800f43e:	370c      	adds	r7, #12
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr

0800f448 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f448:	b480      	push	{r7}
 800f44a:	b083      	sub	sp, #12
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f450:	bf00      	nop
 800f452:	370c      	adds	r7, #12
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr

0800f45c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	460b      	mov	r3, r1
 800f466:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f468:	bf00      	nop
 800f46a:	370c      	adds	r7, #12
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr

0800f474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f478:	b092      	sub	sp, #72	; 0x48
 800f47a:	af00      	add	r7, sp, #0
 800f47c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f47e:	2300      	movs	r3, #0
 800f480:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	689a      	ldr	r2, [r3, #8]
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	691b      	ldr	r3, [r3, #16]
 800f48c:	431a      	orrs	r2, r3
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	695b      	ldr	r3, [r3, #20]
 800f492:	431a      	orrs	r2, r3
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	69db      	ldr	r3, [r3, #28]
 800f498:	4313      	orrs	r3, r2
 800f49a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	681a      	ldr	r2, [r3, #0]
 800f4a2:	4bbe      	ldr	r3, [pc, #760]	; (800f79c <UART_SetConfig+0x328>)
 800f4a4:	4013      	ands	r3, r2
 800f4a6:	697a      	ldr	r2, [r7, #20]
 800f4a8:	6812      	ldr	r2, [r2, #0]
 800f4aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4ac:	430b      	orrs	r3, r1
 800f4ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	685b      	ldr	r3, [r3, #4]
 800f4b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	68da      	ldr	r2, [r3, #12]
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	430a      	orrs	r2, r1
 800f4c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	699b      	ldr	r3, [r3, #24]
 800f4ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4ab3      	ldr	r2, [pc, #716]	; (800f7a0 <UART_SetConfig+0x32c>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d004      	beq.n	800f4e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	6a1b      	ldr	r3, [r3, #32]
 800f4da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4dc:	4313      	orrs	r3, r2
 800f4de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	689a      	ldr	r2, [r3, #8]
 800f4e6:	4baf      	ldr	r3, [pc, #700]	; (800f7a4 <UART_SetConfig+0x330>)
 800f4e8:	4013      	ands	r3, r2
 800f4ea:	697a      	ldr	r2, [r7, #20]
 800f4ec:	6812      	ldr	r2, [r2, #0]
 800f4ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4f0:	430b      	orrs	r3, r1
 800f4f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f4f4:	697b      	ldr	r3, [r7, #20]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4fa:	f023 010f 	bic.w	r1, r3, #15
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	430a      	orrs	r2, r1
 800f508:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	4aa6      	ldr	r2, [pc, #664]	; (800f7a8 <UART_SetConfig+0x334>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d177      	bne.n	800f604 <UART_SetConfig+0x190>
 800f514:	4ba5      	ldr	r3, [pc, #660]	; (800f7ac <UART_SetConfig+0x338>)
 800f516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f51c:	2b28      	cmp	r3, #40	; 0x28
 800f51e:	d86d      	bhi.n	800f5fc <UART_SetConfig+0x188>
 800f520:	a201      	add	r2, pc, #4	; (adr r2, 800f528 <UART_SetConfig+0xb4>)
 800f522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f526:	bf00      	nop
 800f528:	0800f5cd 	.word	0x0800f5cd
 800f52c:	0800f5fd 	.word	0x0800f5fd
 800f530:	0800f5fd 	.word	0x0800f5fd
 800f534:	0800f5fd 	.word	0x0800f5fd
 800f538:	0800f5fd 	.word	0x0800f5fd
 800f53c:	0800f5fd 	.word	0x0800f5fd
 800f540:	0800f5fd 	.word	0x0800f5fd
 800f544:	0800f5fd 	.word	0x0800f5fd
 800f548:	0800f5d5 	.word	0x0800f5d5
 800f54c:	0800f5fd 	.word	0x0800f5fd
 800f550:	0800f5fd 	.word	0x0800f5fd
 800f554:	0800f5fd 	.word	0x0800f5fd
 800f558:	0800f5fd 	.word	0x0800f5fd
 800f55c:	0800f5fd 	.word	0x0800f5fd
 800f560:	0800f5fd 	.word	0x0800f5fd
 800f564:	0800f5fd 	.word	0x0800f5fd
 800f568:	0800f5dd 	.word	0x0800f5dd
 800f56c:	0800f5fd 	.word	0x0800f5fd
 800f570:	0800f5fd 	.word	0x0800f5fd
 800f574:	0800f5fd 	.word	0x0800f5fd
 800f578:	0800f5fd 	.word	0x0800f5fd
 800f57c:	0800f5fd 	.word	0x0800f5fd
 800f580:	0800f5fd 	.word	0x0800f5fd
 800f584:	0800f5fd 	.word	0x0800f5fd
 800f588:	0800f5e5 	.word	0x0800f5e5
 800f58c:	0800f5fd 	.word	0x0800f5fd
 800f590:	0800f5fd 	.word	0x0800f5fd
 800f594:	0800f5fd 	.word	0x0800f5fd
 800f598:	0800f5fd 	.word	0x0800f5fd
 800f59c:	0800f5fd 	.word	0x0800f5fd
 800f5a0:	0800f5fd 	.word	0x0800f5fd
 800f5a4:	0800f5fd 	.word	0x0800f5fd
 800f5a8:	0800f5ed 	.word	0x0800f5ed
 800f5ac:	0800f5fd 	.word	0x0800f5fd
 800f5b0:	0800f5fd 	.word	0x0800f5fd
 800f5b4:	0800f5fd 	.word	0x0800f5fd
 800f5b8:	0800f5fd 	.word	0x0800f5fd
 800f5bc:	0800f5fd 	.word	0x0800f5fd
 800f5c0:	0800f5fd 	.word	0x0800f5fd
 800f5c4:	0800f5fd 	.word	0x0800f5fd
 800f5c8:	0800f5f5 	.word	0x0800f5f5
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5d2:	e222      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f5d4:	2304      	movs	r3, #4
 800f5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5da:	e21e      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f5dc:	2308      	movs	r3, #8
 800f5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5e2:	e21a      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f5e4:	2310      	movs	r3, #16
 800f5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ea:	e216      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f5ec:	2320      	movs	r3, #32
 800f5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5f2:	e212      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f5f4:	2340      	movs	r3, #64	; 0x40
 800f5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5fa:	e20e      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f5fc:	2380      	movs	r3, #128	; 0x80
 800f5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f602:	e20a      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4a69      	ldr	r2, [pc, #420]	; (800f7b0 <UART_SetConfig+0x33c>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d130      	bne.n	800f670 <UART_SetConfig+0x1fc>
 800f60e:	4b67      	ldr	r3, [pc, #412]	; (800f7ac <UART_SetConfig+0x338>)
 800f610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f612:	f003 0307 	and.w	r3, r3, #7
 800f616:	2b05      	cmp	r3, #5
 800f618:	d826      	bhi.n	800f668 <UART_SetConfig+0x1f4>
 800f61a:	a201      	add	r2, pc, #4	; (adr r2, 800f620 <UART_SetConfig+0x1ac>)
 800f61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f620:	0800f639 	.word	0x0800f639
 800f624:	0800f641 	.word	0x0800f641
 800f628:	0800f649 	.word	0x0800f649
 800f62c:	0800f651 	.word	0x0800f651
 800f630:	0800f659 	.word	0x0800f659
 800f634:	0800f661 	.word	0x0800f661
 800f638:	2300      	movs	r3, #0
 800f63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f63e:	e1ec      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f640:	2304      	movs	r3, #4
 800f642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f646:	e1e8      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f648:	2308      	movs	r3, #8
 800f64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f64e:	e1e4      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f650:	2310      	movs	r3, #16
 800f652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f656:	e1e0      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f658:	2320      	movs	r3, #32
 800f65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f65e:	e1dc      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f660:	2340      	movs	r3, #64	; 0x40
 800f662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f666:	e1d8      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f668:	2380      	movs	r3, #128	; 0x80
 800f66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f66e:	e1d4      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4a4f      	ldr	r2, [pc, #316]	; (800f7b4 <UART_SetConfig+0x340>)
 800f676:	4293      	cmp	r3, r2
 800f678:	d130      	bne.n	800f6dc <UART_SetConfig+0x268>
 800f67a:	4b4c      	ldr	r3, [pc, #304]	; (800f7ac <UART_SetConfig+0x338>)
 800f67c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f67e:	f003 0307 	and.w	r3, r3, #7
 800f682:	2b05      	cmp	r3, #5
 800f684:	d826      	bhi.n	800f6d4 <UART_SetConfig+0x260>
 800f686:	a201      	add	r2, pc, #4	; (adr r2, 800f68c <UART_SetConfig+0x218>)
 800f688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f68c:	0800f6a5 	.word	0x0800f6a5
 800f690:	0800f6ad 	.word	0x0800f6ad
 800f694:	0800f6b5 	.word	0x0800f6b5
 800f698:	0800f6bd 	.word	0x0800f6bd
 800f69c:	0800f6c5 	.word	0x0800f6c5
 800f6a0:	0800f6cd 	.word	0x0800f6cd
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6aa:	e1b6      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f6ac:	2304      	movs	r3, #4
 800f6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6b2:	e1b2      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f6b4:	2308      	movs	r3, #8
 800f6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ba:	e1ae      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f6bc:	2310      	movs	r3, #16
 800f6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6c2:	e1aa      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f6c4:	2320      	movs	r3, #32
 800f6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ca:	e1a6      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f6cc:	2340      	movs	r3, #64	; 0x40
 800f6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6d2:	e1a2      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f6d4:	2380      	movs	r3, #128	; 0x80
 800f6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6da:	e19e      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4a35      	ldr	r2, [pc, #212]	; (800f7b8 <UART_SetConfig+0x344>)
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d130      	bne.n	800f748 <UART_SetConfig+0x2d4>
 800f6e6:	4b31      	ldr	r3, [pc, #196]	; (800f7ac <UART_SetConfig+0x338>)
 800f6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6ea:	f003 0307 	and.w	r3, r3, #7
 800f6ee:	2b05      	cmp	r3, #5
 800f6f0:	d826      	bhi.n	800f740 <UART_SetConfig+0x2cc>
 800f6f2:	a201      	add	r2, pc, #4	; (adr r2, 800f6f8 <UART_SetConfig+0x284>)
 800f6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6f8:	0800f711 	.word	0x0800f711
 800f6fc:	0800f719 	.word	0x0800f719
 800f700:	0800f721 	.word	0x0800f721
 800f704:	0800f729 	.word	0x0800f729
 800f708:	0800f731 	.word	0x0800f731
 800f70c:	0800f739 	.word	0x0800f739
 800f710:	2300      	movs	r3, #0
 800f712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f716:	e180      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f718:	2304      	movs	r3, #4
 800f71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f71e:	e17c      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f720:	2308      	movs	r3, #8
 800f722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f726:	e178      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f728:	2310      	movs	r3, #16
 800f72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f72e:	e174      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f730:	2320      	movs	r3, #32
 800f732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f736:	e170      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f738:	2340      	movs	r3, #64	; 0x40
 800f73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f73e:	e16c      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f740:	2380      	movs	r3, #128	; 0x80
 800f742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f746:	e168      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	4a1b      	ldr	r2, [pc, #108]	; (800f7bc <UART_SetConfig+0x348>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d142      	bne.n	800f7d8 <UART_SetConfig+0x364>
 800f752:	4b16      	ldr	r3, [pc, #88]	; (800f7ac <UART_SetConfig+0x338>)
 800f754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f756:	f003 0307 	and.w	r3, r3, #7
 800f75a:	2b05      	cmp	r3, #5
 800f75c:	d838      	bhi.n	800f7d0 <UART_SetConfig+0x35c>
 800f75e:	a201      	add	r2, pc, #4	; (adr r2, 800f764 <UART_SetConfig+0x2f0>)
 800f760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f764:	0800f77d 	.word	0x0800f77d
 800f768:	0800f785 	.word	0x0800f785
 800f76c:	0800f78d 	.word	0x0800f78d
 800f770:	0800f795 	.word	0x0800f795
 800f774:	0800f7c1 	.word	0x0800f7c1
 800f778:	0800f7c9 	.word	0x0800f7c9
 800f77c:	2300      	movs	r3, #0
 800f77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f782:	e14a      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f784:	2304      	movs	r3, #4
 800f786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f78a:	e146      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f78c:	2308      	movs	r3, #8
 800f78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f792:	e142      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f794:	2310      	movs	r3, #16
 800f796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f79a:	e13e      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f79c:	cfff69f3 	.word	0xcfff69f3
 800f7a0:	58000c00 	.word	0x58000c00
 800f7a4:	11fff4ff 	.word	0x11fff4ff
 800f7a8:	40011000 	.word	0x40011000
 800f7ac:	58024400 	.word	0x58024400
 800f7b0:	40004400 	.word	0x40004400
 800f7b4:	40004800 	.word	0x40004800
 800f7b8:	40004c00 	.word	0x40004c00
 800f7bc:	40005000 	.word	0x40005000
 800f7c0:	2320      	movs	r3, #32
 800f7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7c6:	e128      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f7c8:	2340      	movs	r3, #64	; 0x40
 800f7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ce:	e124      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f7d0:	2380      	movs	r3, #128	; 0x80
 800f7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7d6:	e120      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	4acb      	ldr	r2, [pc, #812]	; (800fb0c <UART_SetConfig+0x698>)
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d176      	bne.n	800f8d0 <UART_SetConfig+0x45c>
 800f7e2:	4bcb      	ldr	r3, [pc, #812]	; (800fb10 <UART_SetConfig+0x69c>)
 800f7e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f7ea:	2b28      	cmp	r3, #40	; 0x28
 800f7ec:	d86c      	bhi.n	800f8c8 <UART_SetConfig+0x454>
 800f7ee:	a201      	add	r2, pc, #4	; (adr r2, 800f7f4 <UART_SetConfig+0x380>)
 800f7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7f4:	0800f899 	.word	0x0800f899
 800f7f8:	0800f8c9 	.word	0x0800f8c9
 800f7fc:	0800f8c9 	.word	0x0800f8c9
 800f800:	0800f8c9 	.word	0x0800f8c9
 800f804:	0800f8c9 	.word	0x0800f8c9
 800f808:	0800f8c9 	.word	0x0800f8c9
 800f80c:	0800f8c9 	.word	0x0800f8c9
 800f810:	0800f8c9 	.word	0x0800f8c9
 800f814:	0800f8a1 	.word	0x0800f8a1
 800f818:	0800f8c9 	.word	0x0800f8c9
 800f81c:	0800f8c9 	.word	0x0800f8c9
 800f820:	0800f8c9 	.word	0x0800f8c9
 800f824:	0800f8c9 	.word	0x0800f8c9
 800f828:	0800f8c9 	.word	0x0800f8c9
 800f82c:	0800f8c9 	.word	0x0800f8c9
 800f830:	0800f8c9 	.word	0x0800f8c9
 800f834:	0800f8a9 	.word	0x0800f8a9
 800f838:	0800f8c9 	.word	0x0800f8c9
 800f83c:	0800f8c9 	.word	0x0800f8c9
 800f840:	0800f8c9 	.word	0x0800f8c9
 800f844:	0800f8c9 	.word	0x0800f8c9
 800f848:	0800f8c9 	.word	0x0800f8c9
 800f84c:	0800f8c9 	.word	0x0800f8c9
 800f850:	0800f8c9 	.word	0x0800f8c9
 800f854:	0800f8b1 	.word	0x0800f8b1
 800f858:	0800f8c9 	.word	0x0800f8c9
 800f85c:	0800f8c9 	.word	0x0800f8c9
 800f860:	0800f8c9 	.word	0x0800f8c9
 800f864:	0800f8c9 	.word	0x0800f8c9
 800f868:	0800f8c9 	.word	0x0800f8c9
 800f86c:	0800f8c9 	.word	0x0800f8c9
 800f870:	0800f8c9 	.word	0x0800f8c9
 800f874:	0800f8b9 	.word	0x0800f8b9
 800f878:	0800f8c9 	.word	0x0800f8c9
 800f87c:	0800f8c9 	.word	0x0800f8c9
 800f880:	0800f8c9 	.word	0x0800f8c9
 800f884:	0800f8c9 	.word	0x0800f8c9
 800f888:	0800f8c9 	.word	0x0800f8c9
 800f88c:	0800f8c9 	.word	0x0800f8c9
 800f890:	0800f8c9 	.word	0x0800f8c9
 800f894:	0800f8c1 	.word	0x0800f8c1
 800f898:	2301      	movs	r3, #1
 800f89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f89e:	e0bc      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f8a0:	2304      	movs	r3, #4
 800f8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8a6:	e0b8      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f8a8:	2308      	movs	r3, #8
 800f8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ae:	e0b4      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f8b0:	2310      	movs	r3, #16
 800f8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8b6:	e0b0      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f8b8:	2320      	movs	r3, #32
 800f8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8be:	e0ac      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f8c0:	2340      	movs	r3, #64	; 0x40
 800f8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8c6:	e0a8      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f8c8:	2380      	movs	r3, #128	; 0x80
 800f8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ce:	e0a4      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	4a8f      	ldr	r2, [pc, #572]	; (800fb14 <UART_SetConfig+0x6a0>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d130      	bne.n	800f93c <UART_SetConfig+0x4c8>
 800f8da:	4b8d      	ldr	r3, [pc, #564]	; (800fb10 <UART_SetConfig+0x69c>)
 800f8dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8de:	f003 0307 	and.w	r3, r3, #7
 800f8e2:	2b05      	cmp	r3, #5
 800f8e4:	d826      	bhi.n	800f934 <UART_SetConfig+0x4c0>
 800f8e6:	a201      	add	r2, pc, #4	; (adr r2, 800f8ec <UART_SetConfig+0x478>)
 800f8e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8ec:	0800f905 	.word	0x0800f905
 800f8f0:	0800f90d 	.word	0x0800f90d
 800f8f4:	0800f915 	.word	0x0800f915
 800f8f8:	0800f91d 	.word	0x0800f91d
 800f8fc:	0800f925 	.word	0x0800f925
 800f900:	0800f92d 	.word	0x0800f92d
 800f904:	2300      	movs	r3, #0
 800f906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f90a:	e086      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f90c:	2304      	movs	r3, #4
 800f90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f912:	e082      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f914:	2308      	movs	r3, #8
 800f916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f91a:	e07e      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f91c:	2310      	movs	r3, #16
 800f91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f922:	e07a      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f924:	2320      	movs	r3, #32
 800f926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f92a:	e076      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f92c:	2340      	movs	r3, #64	; 0x40
 800f92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f932:	e072      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f934:	2380      	movs	r3, #128	; 0x80
 800f936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f93a:	e06e      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4a75      	ldr	r2, [pc, #468]	; (800fb18 <UART_SetConfig+0x6a4>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d130      	bne.n	800f9a8 <UART_SetConfig+0x534>
 800f946:	4b72      	ldr	r3, [pc, #456]	; (800fb10 <UART_SetConfig+0x69c>)
 800f948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f94a:	f003 0307 	and.w	r3, r3, #7
 800f94e:	2b05      	cmp	r3, #5
 800f950:	d826      	bhi.n	800f9a0 <UART_SetConfig+0x52c>
 800f952:	a201      	add	r2, pc, #4	; (adr r2, 800f958 <UART_SetConfig+0x4e4>)
 800f954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f958:	0800f971 	.word	0x0800f971
 800f95c:	0800f979 	.word	0x0800f979
 800f960:	0800f981 	.word	0x0800f981
 800f964:	0800f989 	.word	0x0800f989
 800f968:	0800f991 	.word	0x0800f991
 800f96c:	0800f999 	.word	0x0800f999
 800f970:	2300      	movs	r3, #0
 800f972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f976:	e050      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f978:	2304      	movs	r3, #4
 800f97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f97e:	e04c      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f980:	2308      	movs	r3, #8
 800f982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f986:	e048      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f988:	2310      	movs	r3, #16
 800f98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f98e:	e044      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f990:	2320      	movs	r3, #32
 800f992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f996:	e040      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f998:	2340      	movs	r3, #64	; 0x40
 800f99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f99e:	e03c      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f9a0:	2380      	movs	r3, #128	; 0x80
 800f9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9a6:	e038      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	4a5b      	ldr	r2, [pc, #364]	; (800fb1c <UART_SetConfig+0x6a8>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d130      	bne.n	800fa14 <UART_SetConfig+0x5a0>
 800f9b2:	4b57      	ldr	r3, [pc, #348]	; (800fb10 <UART_SetConfig+0x69c>)
 800f9b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9b6:	f003 0307 	and.w	r3, r3, #7
 800f9ba:	2b05      	cmp	r3, #5
 800f9bc:	d826      	bhi.n	800fa0c <UART_SetConfig+0x598>
 800f9be:	a201      	add	r2, pc, #4	; (adr r2, 800f9c4 <UART_SetConfig+0x550>)
 800f9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9c4:	0800f9dd 	.word	0x0800f9dd
 800f9c8:	0800f9e5 	.word	0x0800f9e5
 800f9cc:	0800f9ed 	.word	0x0800f9ed
 800f9d0:	0800f9f5 	.word	0x0800f9f5
 800f9d4:	0800f9fd 	.word	0x0800f9fd
 800f9d8:	0800fa05 	.word	0x0800fa05
 800f9dc:	2302      	movs	r3, #2
 800f9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9e2:	e01a      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f9e4:	2304      	movs	r3, #4
 800f9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ea:	e016      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f9ec:	2308      	movs	r3, #8
 800f9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9f2:	e012      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f9f4:	2310      	movs	r3, #16
 800f9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9fa:	e00e      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800f9fc:	2320      	movs	r3, #32
 800f9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa02:	e00a      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800fa04:	2340      	movs	r3, #64	; 0x40
 800fa06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa0a:	e006      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800fa0c:	2380      	movs	r3, #128	; 0x80
 800fa0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa12:	e002      	b.n	800fa1a <UART_SetConfig+0x5a6>
 800fa14:	2380      	movs	r3, #128	; 0x80
 800fa16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	4a3f      	ldr	r2, [pc, #252]	; (800fb1c <UART_SetConfig+0x6a8>)
 800fa20:	4293      	cmp	r3, r2
 800fa22:	f040 80f8 	bne.w	800fc16 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fa26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fa2a:	2b20      	cmp	r3, #32
 800fa2c:	dc46      	bgt.n	800fabc <UART_SetConfig+0x648>
 800fa2e:	2b02      	cmp	r3, #2
 800fa30:	f2c0 8082 	blt.w	800fb38 <UART_SetConfig+0x6c4>
 800fa34:	3b02      	subs	r3, #2
 800fa36:	2b1e      	cmp	r3, #30
 800fa38:	d87e      	bhi.n	800fb38 <UART_SetConfig+0x6c4>
 800fa3a:	a201      	add	r2, pc, #4	; (adr r2, 800fa40 <UART_SetConfig+0x5cc>)
 800fa3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa40:	0800fac3 	.word	0x0800fac3
 800fa44:	0800fb39 	.word	0x0800fb39
 800fa48:	0800facb 	.word	0x0800facb
 800fa4c:	0800fb39 	.word	0x0800fb39
 800fa50:	0800fb39 	.word	0x0800fb39
 800fa54:	0800fb39 	.word	0x0800fb39
 800fa58:	0800fadb 	.word	0x0800fadb
 800fa5c:	0800fb39 	.word	0x0800fb39
 800fa60:	0800fb39 	.word	0x0800fb39
 800fa64:	0800fb39 	.word	0x0800fb39
 800fa68:	0800fb39 	.word	0x0800fb39
 800fa6c:	0800fb39 	.word	0x0800fb39
 800fa70:	0800fb39 	.word	0x0800fb39
 800fa74:	0800fb39 	.word	0x0800fb39
 800fa78:	0800faeb 	.word	0x0800faeb
 800fa7c:	0800fb39 	.word	0x0800fb39
 800fa80:	0800fb39 	.word	0x0800fb39
 800fa84:	0800fb39 	.word	0x0800fb39
 800fa88:	0800fb39 	.word	0x0800fb39
 800fa8c:	0800fb39 	.word	0x0800fb39
 800fa90:	0800fb39 	.word	0x0800fb39
 800fa94:	0800fb39 	.word	0x0800fb39
 800fa98:	0800fb39 	.word	0x0800fb39
 800fa9c:	0800fb39 	.word	0x0800fb39
 800faa0:	0800fb39 	.word	0x0800fb39
 800faa4:	0800fb39 	.word	0x0800fb39
 800faa8:	0800fb39 	.word	0x0800fb39
 800faac:	0800fb39 	.word	0x0800fb39
 800fab0:	0800fb39 	.word	0x0800fb39
 800fab4:	0800fb39 	.word	0x0800fb39
 800fab8:	0800fb2b 	.word	0x0800fb2b
 800fabc:	2b40      	cmp	r3, #64	; 0x40
 800fabe:	d037      	beq.n	800fb30 <UART_SetConfig+0x6bc>
 800fac0:	e03a      	b.n	800fb38 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fac2:	f7fc f941 	bl	800bd48 <HAL_RCCEx_GetD3PCLK1Freq>
 800fac6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fac8:	e03c      	b.n	800fb44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800faca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800face:	4618      	mov	r0, r3
 800fad0:	f7fc f950 	bl	800bd74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fad8:	e034      	b.n	800fb44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fada:	f107 0318 	add.w	r3, r7, #24
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fc fa9c 	bl	800c01c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fae8:	e02c      	b.n	800fb44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800faea:	4b09      	ldr	r3, [pc, #36]	; (800fb10 <UART_SetConfig+0x69c>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f003 0320 	and.w	r3, r3, #32
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d016      	beq.n	800fb24 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800faf6:	4b06      	ldr	r3, [pc, #24]	; (800fb10 <UART_SetConfig+0x69c>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	08db      	lsrs	r3, r3, #3
 800fafc:	f003 0303 	and.w	r3, r3, #3
 800fb00:	4a07      	ldr	r2, [pc, #28]	; (800fb20 <UART_SetConfig+0x6ac>)
 800fb02:	fa22 f303 	lsr.w	r3, r2, r3
 800fb06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fb08:	e01c      	b.n	800fb44 <UART_SetConfig+0x6d0>
 800fb0a:	bf00      	nop
 800fb0c:	40011400 	.word	0x40011400
 800fb10:	58024400 	.word	0x58024400
 800fb14:	40007800 	.word	0x40007800
 800fb18:	40007c00 	.word	0x40007c00
 800fb1c:	58000c00 	.word	0x58000c00
 800fb20:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fb24:	4b9d      	ldr	r3, [pc, #628]	; (800fd9c <UART_SetConfig+0x928>)
 800fb26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb28:	e00c      	b.n	800fb44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fb2a:	4b9d      	ldr	r3, [pc, #628]	; (800fda0 <UART_SetConfig+0x92c>)
 800fb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb2e:	e009      	b.n	800fb44 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb36:	e005      	b.n	800fb44 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fb42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	f000 81de 	beq.w	800ff08 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb50:	4a94      	ldr	r2, [pc, #592]	; (800fda4 <UART_SetConfig+0x930>)
 800fb52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb56:	461a      	mov	r2, r3
 800fb58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb5a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb5e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	685a      	ldr	r2, [r3, #4]
 800fb64:	4613      	mov	r3, r2
 800fb66:	005b      	lsls	r3, r3, #1
 800fb68:	4413      	add	r3, r2
 800fb6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d305      	bcc.n	800fb7c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	685b      	ldr	r3, [r3, #4]
 800fb74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fb76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb78:	429a      	cmp	r2, r3
 800fb7a:	d903      	bls.n	800fb84 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fb82:	e1c1      	b.n	800ff08 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fb84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb86:	2200      	movs	r2, #0
 800fb88:	60bb      	str	r3, [r7, #8]
 800fb8a:	60fa      	str	r2, [r7, #12]
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb90:	4a84      	ldr	r2, [pc, #528]	; (800fda4 <UART_SetConfig+0x930>)
 800fb92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	2200      	movs	r2, #0
 800fb9a:	603b      	str	r3, [r7, #0]
 800fb9c:	607a      	str	r2, [r7, #4]
 800fb9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fba2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fba6:	f7f0 fbeb 	bl	8000380 <__aeabi_uldivmod>
 800fbaa:	4602      	mov	r2, r0
 800fbac:	460b      	mov	r3, r1
 800fbae:	4610      	mov	r0, r2
 800fbb0:	4619      	mov	r1, r3
 800fbb2:	f04f 0200 	mov.w	r2, #0
 800fbb6:	f04f 0300 	mov.w	r3, #0
 800fbba:	020b      	lsls	r3, r1, #8
 800fbbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fbc0:	0202      	lsls	r2, r0, #8
 800fbc2:	6979      	ldr	r1, [r7, #20]
 800fbc4:	6849      	ldr	r1, [r1, #4]
 800fbc6:	0849      	lsrs	r1, r1, #1
 800fbc8:	2000      	movs	r0, #0
 800fbca:	460c      	mov	r4, r1
 800fbcc:	4605      	mov	r5, r0
 800fbce:	eb12 0804 	adds.w	r8, r2, r4
 800fbd2:	eb43 0905 	adc.w	r9, r3, r5
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	469a      	mov	sl, r3
 800fbde:	4693      	mov	fp, r2
 800fbe0:	4652      	mov	r2, sl
 800fbe2:	465b      	mov	r3, fp
 800fbe4:	4640      	mov	r0, r8
 800fbe6:	4649      	mov	r1, r9
 800fbe8:	f7f0 fbca 	bl	8000380 <__aeabi_uldivmod>
 800fbec:	4602      	mov	r2, r0
 800fbee:	460b      	mov	r3, r1
 800fbf0:	4613      	mov	r3, r2
 800fbf2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fbfa:	d308      	bcc.n	800fc0e <UART_SetConfig+0x79a>
 800fbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc02:	d204      	bcs.n	800fc0e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc0a:	60da      	str	r2, [r3, #12]
 800fc0c:	e17c      	b.n	800ff08 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fc14:	e178      	b.n	800ff08 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	69db      	ldr	r3, [r3, #28]
 800fc1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fc1e:	f040 80c5 	bne.w	800fdac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fc22:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fc26:	2b20      	cmp	r3, #32
 800fc28:	dc48      	bgt.n	800fcbc <UART_SetConfig+0x848>
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	db7b      	blt.n	800fd26 <UART_SetConfig+0x8b2>
 800fc2e:	2b20      	cmp	r3, #32
 800fc30:	d879      	bhi.n	800fd26 <UART_SetConfig+0x8b2>
 800fc32:	a201      	add	r2, pc, #4	; (adr r2, 800fc38 <UART_SetConfig+0x7c4>)
 800fc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc38:	0800fcc3 	.word	0x0800fcc3
 800fc3c:	0800fccb 	.word	0x0800fccb
 800fc40:	0800fd27 	.word	0x0800fd27
 800fc44:	0800fd27 	.word	0x0800fd27
 800fc48:	0800fcd3 	.word	0x0800fcd3
 800fc4c:	0800fd27 	.word	0x0800fd27
 800fc50:	0800fd27 	.word	0x0800fd27
 800fc54:	0800fd27 	.word	0x0800fd27
 800fc58:	0800fce3 	.word	0x0800fce3
 800fc5c:	0800fd27 	.word	0x0800fd27
 800fc60:	0800fd27 	.word	0x0800fd27
 800fc64:	0800fd27 	.word	0x0800fd27
 800fc68:	0800fd27 	.word	0x0800fd27
 800fc6c:	0800fd27 	.word	0x0800fd27
 800fc70:	0800fd27 	.word	0x0800fd27
 800fc74:	0800fd27 	.word	0x0800fd27
 800fc78:	0800fcf3 	.word	0x0800fcf3
 800fc7c:	0800fd27 	.word	0x0800fd27
 800fc80:	0800fd27 	.word	0x0800fd27
 800fc84:	0800fd27 	.word	0x0800fd27
 800fc88:	0800fd27 	.word	0x0800fd27
 800fc8c:	0800fd27 	.word	0x0800fd27
 800fc90:	0800fd27 	.word	0x0800fd27
 800fc94:	0800fd27 	.word	0x0800fd27
 800fc98:	0800fd27 	.word	0x0800fd27
 800fc9c:	0800fd27 	.word	0x0800fd27
 800fca0:	0800fd27 	.word	0x0800fd27
 800fca4:	0800fd27 	.word	0x0800fd27
 800fca8:	0800fd27 	.word	0x0800fd27
 800fcac:	0800fd27 	.word	0x0800fd27
 800fcb0:	0800fd27 	.word	0x0800fd27
 800fcb4:	0800fd27 	.word	0x0800fd27
 800fcb8:	0800fd19 	.word	0x0800fd19
 800fcbc:	2b40      	cmp	r3, #64	; 0x40
 800fcbe:	d02e      	beq.n	800fd1e <UART_SetConfig+0x8aa>
 800fcc0:	e031      	b.n	800fd26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fcc2:	f7fa f849 	bl	8009d58 <HAL_RCC_GetPCLK1Freq>
 800fcc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fcc8:	e033      	b.n	800fd32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fcca:	f7fa f85b 	bl	8009d84 <HAL_RCC_GetPCLK2Freq>
 800fcce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fcd0:	e02f      	b.n	800fd32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7fc f84c 	bl	800bd74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fce0:	e027      	b.n	800fd32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fce2:	f107 0318 	add.w	r3, r7, #24
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7fc f998 	bl	800c01c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcf0:	e01f      	b.n	800fd32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fcf2:	4b2d      	ldr	r3, [pc, #180]	; (800fda8 <UART_SetConfig+0x934>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f003 0320 	and.w	r3, r3, #32
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d009      	beq.n	800fd12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fcfe:	4b2a      	ldr	r3, [pc, #168]	; (800fda8 <UART_SetConfig+0x934>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	08db      	lsrs	r3, r3, #3
 800fd04:	f003 0303 	and.w	r3, r3, #3
 800fd08:	4a24      	ldr	r2, [pc, #144]	; (800fd9c <UART_SetConfig+0x928>)
 800fd0a:	fa22 f303 	lsr.w	r3, r2, r3
 800fd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd10:	e00f      	b.n	800fd32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fd12:	4b22      	ldr	r3, [pc, #136]	; (800fd9c <UART_SetConfig+0x928>)
 800fd14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd16:	e00c      	b.n	800fd32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd18:	4b21      	ldr	r3, [pc, #132]	; (800fda0 <UART_SetConfig+0x92c>)
 800fd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd1c:	e009      	b.n	800fd32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd24:	e005      	b.n	800fd32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fd26:	2300      	movs	r3, #0
 800fd28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fd30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fd32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	f000 80e7 	beq.w	800ff08 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd3e:	4a19      	ldr	r2, [pc, #100]	; (800fda4 <UART_SetConfig+0x930>)
 800fd40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd44:	461a      	mov	r2, r3
 800fd46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd48:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd4c:	005a      	lsls	r2, r3, #1
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	085b      	lsrs	r3, r3, #1
 800fd54:	441a      	add	r2, r3
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd62:	2b0f      	cmp	r3, #15
 800fd64:	d916      	bls.n	800fd94 <UART_SetConfig+0x920>
 800fd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd6c:	d212      	bcs.n	800fd94 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	f023 030f 	bic.w	r3, r3, #15
 800fd76:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7a:	085b      	lsrs	r3, r3, #1
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	f003 0307 	and.w	r3, r3, #7
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fd86:	4313      	orrs	r3, r2
 800fd88:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fd90:	60da      	str	r2, [r3, #12]
 800fd92:	e0b9      	b.n	800ff08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fd94:	2301      	movs	r3, #1
 800fd96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fd9a:	e0b5      	b.n	800ff08 <UART_SetConfig+0xa94>
 800fd9c:	03d09000 	.word	0x03d09000
 800fda0:	003d0900 	.word	0x003d0900
 800fda4:	08015dcc 	.word	0x08015dcc
 800fda8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800fdac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fdb0:	2b20      	cmp	r3, #32
 800fdb2:	dc49      	bgt.n	800fe48 <UART_SetConfig+0x9d4>
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	db7c      	blt.n	800feb2 <UART_SetConfig+0xa3e>
 800fdb8:	2b20      	cmp	r3, #32
 800fdba:	d87a      	bhi.n	800feb2 <UART_SetConfig+0xa3e>
 800fdbc:	a201      	add	r2, pc, #4	; (adr r2, 800fdc4 <UART_SetConfig+0x950>)
 800fdbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdc2:	bf00      	nop
 800fdc4:	0800fe4f 	.word	0x0800fe4f
 800fdc8:	0800fe57 	.word	0x0800fe57
 800fdcc:	0800feb3 	.word	0x0800feb3
 800fdd0:	0800feb3 	.word	0x0800feb3
 800fdd4:	0800fe5f 	.word	0x0800fe5f
 800fdd8:	0800feb3 	.word	0x0800feb3
 800fddc:	0800feb3 	.word	0x0800feb3
 800fde0:	0800feb3 	.word	0x0800feb3
 800fde4:	0800fe6f 	.word	0x0800fe6f
 800fde8:	0800feb3 	.word	0x0800feb3
 800fdec:	0800feb3 	.word	0x0800feb3
 800fdf0:	0800feb3 	.word	0x0800feb3
 800fdf4:	0800feb3 	.word	0x0800feb3
 800fdf8:	0800feb3 	.word	0x0800feb3
 800fdfc:	0800feb3 	.word	0x0800feb3
 800fe00:	0800feb3 	.word	0x0800feb3
 800fe04:	0800fe7f 	.word	0x0800fe7f
 800fe08:	0800feb3 	.word	0x0800feb3
 800fe0c:	0800feb3 	.word	0x0800feb3
 800fe10:	0800feb3 	.word	0x0800feb3
 800fe14:	0800feb3 	.word	0x0800feb3
 800fe18:	0800feb3 	.word	0x0800feb3
 800fe1c:	0800feb3 	.word	0x0800feb3
 800fe20:	0800feb3 	.word	0x0800feb3
 800fe24:	0800feb3 	.word	0x0800feb3
 800fe28:	0800feb3 	.word	0x0800feb3
 800fe2c:	0800feb3 	.word	0x0800feb3
 800fe30:	0800feb3 	.word	0x0800feb3
 800fe34:	0800feb3 	.word	0x0800feb3
 800fe38:	0800feb3 	.word	0x0800feb3
 800fe3c:	0800feb3 	.word	0x0800feb3
 800fe40:	0800feb3 	.word	0x0800feb3
 800fe44:	0800fea5 	.word	0x0800fea5
 800fe48:	2b40      	cmp	r3, #64	; 0x40
 800fe4a:	d02e      	beq.n	800feaa <UART_SetConfig+0xa36>
 800fe4c:	e031      	b.n	800feb2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe4e:	f7f9 ff83 	bl	8009d58 <HAL_RCC_GetPCLK1Freq>
 800fe52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fe54:	e033      	b.n	800febe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe56:	f7f9 ff95 	bl	8009d84 <HAL_RCC_GetPCLK2Freq>
 800fe5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fe5c:	e02f      	b.n	800febe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7fb ff86 	bl	800bd74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe6c:	e027      	b.n	800febe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe6e:	f107 0318 	add.w	r3, r7, #24
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fc f8d2 	bl	800c01c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe78:	69fb      	ldr	r3, [r7, #28]
 800fe7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe7c:	e01f      	b.n	800febe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe7e:	4b2d      	ldr	r3, [pc, #180]	; (800ff34 <UART_SetConfig+0xac0>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f003 0320 	and.w	r3, r3, #32
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d009      	beq.n	800fe9e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe8a:	4b2a      	ldr	r3, [pc, #168]	; (800ff34 <UART_SetConfig+0xac0>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	08db      	lsrs	r3, r3, #3
 800fe90:	f003 0303 	and.w	r3, r3, #3
 800fe94:	4a28      	ldr	r2, [pc, #160]	; (800ff38 <UART_SetConfig+0xac4>)
 800fe96:	fa22 f303 	lsr.w	r3, r2, r3
 800fe9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe9c:	e00f      	b.n	800febe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800fe9e:	4b26      	ldr	r3, [pc, #152]	; (800ff38 <UART_SetConfig+0xac4>)
 800fea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fea2:	e00c      	b.n	800febe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fea4:	4b25      	ldr	r3, [pc, #148]	; (800ff3c <UART_SetConfig+0xac8>)
 800fea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fea8:	e009      	b.n	800febe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800feaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800feae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800feb0:	e005      	b.n	800febe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800feb2:	2300      	movs	r3, #0
 800feb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800feb6:	2301      	movs	r3, #1
 800feb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800febc:	bf00      	nop
    }

    if (pclk != 0U)
 800febe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d021      	beq.n	800ff08 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec8:	4a1d      	ldr	r2, [pc, #116]	; (800ff40 <UART_SetConfig+0xacc>)
 800feca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fece:	461a      	mov	r2, r3
 800fed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fed2:	fbb3 f2f2 	udiv	r2, r3, r2
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	685b      	ldr	r3, [r3, #4]
 800feda:	085b      	lsrs	r3, r3, #1
 800fedc:	441a      	add	r2, r3
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fee6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feea:	2b0f      	cmp	r3, #15
 800feec:	d909      	bls.n	800ff02 <UART_SetConfig+0xa8e>
 800feee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fef4:	d205      	bcs.n	800ff02 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef8:	b29a      	uxth	r2, r3
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	60da      	str	r2, [r3, #12]
 800ff00:	e002      	b.n	800ff08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ff02:	2301      	movs	r3, #1
 800ff04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	2201      	movs	r2, #1
 800ff14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	2200      	movs	r2, #0
 800ff22:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ff24:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3748      	adds	r7, #72	; 0x48
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ff32:	bf00      	nop
 800ff34:	58024400 	.word	0x58024400
 800ff38:	03d09000 	.word	0x03d09000
 800ff3c:	003d0900 	.word	0x003d0900
 800ff40:	08015dcc 	.word	0x08015dcc

0800ff44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff50:	f003 0308 	and.w	r3, r3, #8
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d00a      	beq.n	800ff6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	430a      	orrs	r2, r1
 800ff6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff72:	f003 0301 	and.w	r3, r3, #1
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d00a      	beq.n	800ff90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	430a      	orrs	r2, r1
 800ff8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff94:	f003 0302 	and.w	r3, r3, #2
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d00a      	beq.n	800ffb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	430a      	orrs	r2, r1
 800ffb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffb6:	f003 0304 	and.w	r3, r3, #4
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d00a      	beq.n	800ffd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	430a      	orrs	r2, r1
 800ffd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffd8:	f003 0310 	and.w	r3, r3, #16
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d00a      	beq.n	800fff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	689b      	ldr	r3, [r3, #8]
 800ffe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	430a      	orrs	r2, r1
 800fff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fffa:	f003 0320 	and.w	r3, r3, #32
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d00a      	beq.n	8010018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	689b      	ldr	r3, [r3, #8]
 8010008:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	430a      	orrs	r2, r1
 8010016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801001c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010020:	2b00      	cmp	r3, #0
 8010022:	d01a      	beq.n	801005a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	430a      	orrs	r2, r1
 8010038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801003e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010042:	d10a      	bne.n	801005a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	430a      	orrs	r2, r1
 8010058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801005e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010062:	2b00      	cmp	r3, #0
 8010064:	d00a      	beq.n	801007c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	430a      	orrs	r2, r1
 801007a:	605a      	str	r2, [r3, #4]
  }
}
 801007c:	bf00      	nop
 801007e:	370c      	adds	r7, #12
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr

08010088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b098      	sub	sp, #96	; 0x60
 801008c:	af02      	add	r7, sp, #8
 801008e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2200      	movs	r2, #0
 8010094:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010098:	f7f2 ff54 	bl	8002f44 <HAL_GetTick>
 801009c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	f003 0308 	and.w	r3, r3, #8
 80100a8:	2b08      	cmp	r3, #8
 80100aa:	d12f      	bne.n	801010c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80100ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80100b0:	9300      	str	r3, [sp, #0]
 80100b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100b4:	2200      	movs	r2, #0
 80100b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f000 f88e 	bl	80101dc <UART_WaitOnFlagUntilTimeout>
 80100c0:	4603      	mov	r3, r0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d022      	beq.n	801010c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ce:	e853 3f00 	ldrex	r3, [r3]
 80100d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80100d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80100da:	653b      	str	r3, [r7, #80]	; 0x50
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	461a      	mov	r2, r3
 80100e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100e4:	647b      	str	r3, [r7, #68]	; 0x44
 80100e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80100ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100ec:	e841 2300 	strex	r3, r2, [r1]
 80100f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80100f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d1e6      	bne.n	80100c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2220      	movs	r2, #32
 80100fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2200      	movs	r2, #0
 8010104:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010108:	2303      	movs	r3, #3
 801010a:	e063      	b.n	80101d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f003 0304 	and.w	r3, r3, #4
 8010116:	2b04      	cmp	r3, #4
 8010118:	d149      	bne.n	80101ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801011a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801011e:	9300      	str	r3, [sp, #0]
 8010120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010122:	2200      	movs	r2, #0
 8010124:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f000 f857 	bl	80101dc <UART_WaitOnFlagUntilTimeout>
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	d03c      	beq.n	80101ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801013a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013c:	e853 3f00 	ldrex	r3, [r3]
 8010140:	623b      	str	r3, [r7, #32]
   return(result);
 8010142:	6a3b      	ldr	r3, [r7, #32]
 8010144:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010148:	64fb      	str	r3, [r7, #76]	; 0x4c
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	461a      	mov	r2, r3
 8010150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010152:	633b      	str	r3, [r7, #48]	; 0x30
 8010154:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801015a:	e841 2300 	strex	r3, r2, [r1]
 801015e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010162:	2b00      	cmp	r3, #0
 8010164:	d1e6      	bne.n	8010134 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	3308      	adds	r3, #8
 801016c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801016e:	693b      	ldr	r3, [r7, #16]
 8010170:	e853 3f00 	ldrex	r3, [r3]
 8010174:	60fb      	str	r3, [r7, #12]
   return(result);
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	f023 0301 	bic.w	r3, r3, #1
 801017c:	64bb      	str	r3, [r7, #72]	; 0x48
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	3308      	adds	r3, #8
 8010184:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010186:	61fa      	str	r2, [r7, #28]
 8010188:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801018a:	69b9      	ldr	r1, [r7, #24]
 801018c:	69fa      	ldr	r2, [r7, #28]
 801018e:	e841 2300 	strex	r3, r2, [r1]
 8010192:	617b      	str	r3, [r7, #20]
   return(result);
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d1e5      	bne.n	8010166 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2220      	movs	r2, #32
 801019e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2200      	movs	r2, #0
 80101a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80101aa:	2303      	movs	r3, #3
 80101ac:	e012      	b.n	80101d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	2220      	movs	r2, #32
 80101b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2220      	movs	r2, #32
 80101ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2200      	movs	r2, #0
 80101c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2200      	movs	r2, #0
 80101c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2200      	movs	r2, #0
 80101ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80101d2:	2300      	movs	r3, #0
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3758      	adds	r7, #88	; 0x58
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}

080101dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	60f8      	str	r0, [r7, #12]
 80101e4:	60b9      	str	r1, [r7, #8]
 80101e6:	603b      	str	r3, [r7, #0]
 80101e8:	4613      	mov	r3, r2
 80101ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101ec:	e04f      	b.n	801028e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80101ee:	69bb      	ldr	r3, [r7, #24]
 80101f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101f4:	d04b      	beq.n	801028e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80101f6:	f7f2 fea5 	bl	8002f44 <HAL_GetTick>
 80101fa:	4602      	mov	r2, r0
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	1ad3      	subs	r3, r2, r3
 8010200:	69ba      	ldr	r2, [r7, #24]
 8010202:	429a      	cmp	r2, r3
 8010204:	d302      	bcc.n	801020c <UART_WaitOnFlagUntilTimeout+0x30>
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d101      	bne.n	8010210 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801020c:	2303      	movs	r3, #3
 801020e:	e04e      	b.n	80102ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	f003 0304 	and.w	r3, r3, #4
 801021a:	2b00      	cmp	r3, #0
 801021c:	d037      	beq.n	801028e <UART_WaitOnFlagUntilTimeout+0xb2>
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	2b80      	cmp	r3, #128	; 0x80
 8010222:	d034      	beq.n	801028e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	2b40      	cmp	r3, #64	; 0x40
 8010228:	d031      	beq.n	801028e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	69db      	ldr	r3, [r3, #28]
 8010230:	f003 0308 	and.w	r3, r3, #8
 8010234:	2b08      	cmp	r3, #8
 8010236:	d110      	bne.n	801025a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2208      	movs	r2, #8
 801023e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010240:	68f8      	ldr	r0, [r7, #12]
 8010242:	f000 f95b 	bl	80104fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2208      	movs	r2, #8
 801024a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2200      	movs	r2, #0
 8010252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8010256:	2301      	movs	r3, #1
 8010258:	e029      	b.n	80102ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	69db      	ldr	r3, [r3, #28]
 8010260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010268:	d111      	bne.n	801028e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010272:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010274:	68f8      	ldr	r0, [r7, #12]
 8010276:	f000 f941 	bl	80104fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2220      	movs	r2, #32
 801027e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	2200      	movs	r2, #0
 8010286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801028a:	2303      	movs	r3, #3
 801028c:	e00f      	b.n	80102ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	69da      	ldr	r2, [r3, #28]
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	4013      	ands	r3, r2
 8010298:	68ba      	ldr	r2, [r7, #8]
 801029a:	429a      	cmp	r2, r3
 801029c:	bf0c      	ite	eq
 801029e:	2301      	moveq	r3, #1
 80102a0:	2300      	movne	r3, #0
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	461a      	mov	r2, r3
 80102a6:	79fb      	ldrb	r3, [r7, #7]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d0a0      	beq.n	80101ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80102ac:	2300      	movs	r3, #0
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3710      	adds	r7, #16
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
	...

080102b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b0a3      	sub	sp, #140	; 0x8c
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	4613      	mov	r3, r2
 80102c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	68ba      	ldr	r2, [r7, #8]
 80102ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	88fa      	ldrh	r2, [r7, #6]
 80102d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	88fa      	ldrh	r2, [r7, #6]
 80102d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	2200      	movs	r2, #0
 80102e0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	689b      	ldr	r3, [r3, #8]
 80102e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102ea:	d10e      	bne.n	801030a <UART_Start_Receive_IT+0x52>
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	691b      	ldr	r3, [r3, #16]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d105      	bne.n	8010300 <UART_Start_Receive_IT+0x48>
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80102fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80102fe:	e02d      	b.n	801035c <UART_Start_Receive_IT+0xa4>
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	22ff      	movs	r2, #255	; 0xff
 8010304:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010308:	e028      	b.n	801035c <UART_Start_Receive_IT+0xa4>
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	689b      	ldr	r3, [r3, #8]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d10d      	bne.n	801032e <UART_Start_Receive_IT+0x76>
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	691b      	ldr	r3, [r3, #16]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d104      	bne.n	8010324 <UART_Start_Receive_IT+0x6c>
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	22ff      	movs	r2, #255	; 0xff
 801031e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010322:	e01b      	b.n	801035c <UART_Start_Receive_IT+0xa4>
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	227f      	movs	r2, #127	; 0x7f
 8010328:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801032c:	e016      	b.n	801035c <UART_Start_Receive_IT+0xa4>
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	689b      	ldr	r3, [r3, #8]
 8010332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010336:	d10d      	bne.n	8010354 <UART_Start_Receive_IT+0x9c>
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	691b      	ldr	r3, [r3, #16]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d104      	bne.n	801034a <UART_Start_Receive_IT+0x92>
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	227f      	movs	r2, #127	; 0x7f
 8010344:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010348:	e008      	b.n	801035c <UART_Start_Receive_IT+0xa4>
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	223f      	movs	r2, #63	; 0x3f
 801034e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010352:	e003      	b.n	801035c <UART_Start_Receive_IT+0xa4>
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2200      	movs	r2, #0
 8010358:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	2200      	movs	r2, #0
 8010360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2222      	movs	r2, #34	; 0x22
 8010368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	3308      	adds	r3, #8
 8010372:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010376:	e853 3f00 	ldrex	r3, [r3]
 801037a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801037c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801037e:	f043 0301 	orr.w	r3, r3, #1
 8010382:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	3308      	adds	r3, #8
 801038c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010390:	673a      	str	r2, [r7, #112]	; 0x70
 8010392:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010394:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010396:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010398:	e841 2300 	strex	r3, r2, [r1]
 801039c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801039e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d1e3      	bne.n	801036c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80103a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80103ac:	d14f      	bne.n	801044e <UART_Start_Receive_IT+0x196>
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80103b4:	88fa      	ldrh	r2, [r7, #6]
 80103b6:	429a      	cmp	r2, r3
 80103b8:	d349      	bcc.n	801044e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	689b      	ldr	r3, [r3, #8]
 80103be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103c2:	d107      	bne.n	80103d4 <UART_Start_Receive_IT+0x11c>
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	691b      	ldr	r3, [r3, #16]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d103      	bne.n	80103d4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	4a47      	ldr	r2, [pc, #284]	; (80104ec <UART_Start_Receive_IT+0x234>)
 80103d0:	675a      	str	r2, [r3, #116]	; 0x74
 80103d2:	e002      	b.n	80103da <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	4a46      	ldr	r2, [pc, #280]	; (80104f0 <UART_Start_Receive_IT+0x238>)
 80103d8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	691b      	ldr	r3, [r3, #16]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d01a      	beq.n	8010418 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103ea:	e853 3f00 	ldrex	r3, [r3]
 80103ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80103f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80103f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	461a      	mov	r2, r3
 8010400:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010404:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010406:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010408:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801040a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801040c:	e841 2300 	strex	r3, r2, [r1]
 8010410:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010414:	2b00      	cmp	r3, #0
 8010416:	d1e4      	bne.n	80103e2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	3308      	adds	r3, #8
 801041e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010422:	e853 3f00 	ldrex	r3, [r3]
 8010426:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801042a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801042e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	3308      	adds	r3, #8
 8010436:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010438:	64ba      	str	r2, [r7, #72]	; 0x48
 801043a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801043c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801043e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010440:	e841 2300 	strex	r3, r2, [r1]
 8010444:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010448:	2b00      	cmp	r3, #0
 801044a:	d1e5      	bne.n	8010418 <UART_Start_Receive_IT+0x160>
 801044c:	e046      	b.n	80104dc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	689b      	ldr	r3, [r3, #8]
 8010452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010456:	d107      	bne.n	8010468 <UART_Start_Receive_IT+0x1b0>
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	691b      	ldr	r3, [r3, #16]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d103      	bne.n	8010468 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	4a24      	ldr	r2, [pc, #144]	; (80104f4 <UART_Start_Receive_IT+0x23c>)
 8010464:	675a      	str	r2, [r3, #116]	; 0x74
 8010466:	e002      	b.n	801046e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	4a23      	ldr	r2, [pc, #140]	; (80104f8 <UART_Start_Receive_IT+0x240>)
 801046c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	691b      	ldr	r3, [r3, #16]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d019      	beq.n	80104aa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801047c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801047e:	e853 3f00 	ldrex	r3, [r3]
 8010482:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010486:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801048a:	677b      	str	r3, [r7, #116]	; 0x74
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	461a      	mov	r2, r3
 8010492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010494:	637b      	str	r3, [r7, #52]	; 0x34
 8010496:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801049a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801049c:	e841 2300 	strex	r3, r2, [r1]
 80104a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80104a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d1e6      	bne.n	8010476 <UART_Start_Receive_IT+0x1be>
 80104a8:	e018      	b.n	80104dc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	e853 3f00 	ldrex	r3, [r3]
 80104b6:	613b      	str	r3, [r7, #16]
   return(result);
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	f043 0320 	orr.w	r3, r3, #32
 80104be:	67bb      	str	r3, [r7, #120]	; 0x78
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	461a      	mov	r2, r3
 80104c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104c8:	623b      	str	r3, [r7, #32]
 80104ca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104cc:	69f9      	ldr	r1, [r7, #28]
 80104ce:	6a3a      	ldr	r2, [r7, #32]
 80104d0:	e841 2300 	strex	r3, r2, [r1]
 80104d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80104d6:	69bb      	ldr	r3, [r7, #24]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d1e6      	bne.n	80104aa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	378c      	adds	r7, #140	; 0x8c
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr
 80104ea:	bf00      	nop
 80104ec:	08010d1d 	.word	0x08010d1d
 80104f0:	080109bd 	.word	0x080109bd
 80104f4:	08010805 	.word	0x08010805
 80104f8:	0801064d 	.word	0x0801064d

080104fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80104fc:	b480      	push	{r7}
 80104fe:	b095      	sub	sp, #84	; 0x54
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801050a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801050c:	e853 3f00 	ldrex	r3, [r3]
 8010510:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010514:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010518:	64fb      	str	r3, [r7, #76]	; 0x4c
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	461a      	mov	r2, r3
 8010520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010522:	643b      	str	r3, [r7, #64]	; 0x40
 8010524:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010526:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801052a:	e841 2300 	strex	r3, r2, [r1]
 801052e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010532:	2b00      	cmp	r3, #0
 8010534:	d1e6      	bne.n	8010504 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	3308      	adds	r3, #8
 801053c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801053e:	6a3b      	ldr	r3, [r7, #32]
 8010540:	e853 3f00 	ldrex	r3, [r3]
 8010544:	61fb      	str	r3, [r7, #28]
   return(result);
 8010546:	69fa      	ldr	r2, [r7, #28]
 8010548:	4b1e      	ldr	r3, [pc, #120]	; (80105c4 <UART_EndRxTransfer+0xc8>)
 801054a:	4013      	ands	r3, r2
 801054c:	64bb      	str	r3, [r7, #72]	; 0x48
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	3308      	adds	r3, #8
 8010554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010558:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801055a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801055c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801055e:	e841 2300 	strex	r3, r2, [r1]
 8010562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010566:	2b00      	cmp	r3, #0
 8010568:	d1e5      	bne.n	8010536 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801056e:	2b01      	cmp	r3, #1
 8010570:	d118      	bne.n	80105a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	e853 3f00 	ldrex	r3, [r3]
 801057e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	f023 0310 	bic.w	r3, r3, #16
 8010586:	647b      	str	r3, [r7, #68]	; 0x44
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	461a      	mov	r2, r3
 801058e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010590:	61bb      	str	r3, [r7, #24]
 8010592:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010594:	6979      	ldr	r1, [r7, #20]
 8010596:	69ba      	ldr	r2, [r7, #24]
 8010598:	e841 2300 	strex	r3, r2, [r1]
 801059c:	613b      	str	r3, [r7, #16]
   return(result);
 801059e:	693b      	ldr	r3, [r7, #16]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d1e6      	bne.n	8010572 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2220      	movs	r2, #32
 80105a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2200      	movs	r2, #0
 80105b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2200      	movs	r2, #0
 80105b6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80105b8:	bf00      	nop
 80105ba:	3754      	adds	r7, #84	; 0x54
 80105bc:	46bd      	mov	sp, r7
 80105be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c2:	4770      	bx	lr
 80105c4:	effffffe 	.word	0xeffffffe

080105c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	2200      	movs	r2, #0
 80105da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2200      	movs	r2, #0
 80105e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80105e6:	68f8      	ldr	r0, [r7, #12]
 80105e8:	f7fe ff2e 	bl	800f448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80105ec:	bf00      	nop
 80105ee:	3710      	adds	r7, #16
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd80      	pop	{r7, pc}

080105f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b088      	sub	sp, #32
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	e853 3f00 	ldrex	r3, [r3]
 8010608:	60bb      	str	r3, [r7, #8]
   return(result);
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010610:	61fb      	str	r3, [r7, #28]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	461a      	mov	r2, r3
 8010618:	69fb      	ldr	r3, [r7, #28]
 801061a:	61bb      	str	r3, [r7, #24]
 801061c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801061e:	6979      	ldr	r1, [r7, #20]
 8010620:	69ba      	ldr	r2, [r7, #24]
 8010622:	e841 2300 	strex	r3, r2, [r1]
 8010626:	613b      	str	r3, [r7, #16]
   return(result);
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d1e6      	bne.n	80105fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2220      	movs	r2, #32
 8010632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2200      	movs	r2, #0
 801063a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f7fe fef9 	bl	800f434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010642:	bf00      	nop
 8010644:	3720      	adds	r7, #32
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
	...

0801064c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b09c      	sub	sp, #112	; 0x70
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801065a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010664:	2b22      	cmp	r3, #34	; 0x22
 8010666:	f040 80be 	bne.w	80107e6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010670:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010674:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010678:	b2d9      	uxtb	r1, r3
 801067a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801067e:	b2da      	uxtb	r2, r3
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010684:	400a      	ands	r2, r1
 8010686:	b2d2      	uxtb	r2, r2
 8010688:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801068e:	1c5a      	adds	r2, r3, #1
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801069a:	b29b      	uxth	r3, r3
 801069c:	3b01      	subs	r3, #1
 801069e:	b29a      	uxth	r2, r3
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	f040 80a1 	bne.w	80107f6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106bc:	e853 3f00 	ldrex	r3, [r3]
 80106c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80106c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80106c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	461a      	mov	r2, r3
 80106d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80106d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80106d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80106da:	e841 2300 	strex	r3, r2, [r1]
 80106de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80106e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d1e6      	bne.n	80106b4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	3308      	adds	r3, #8
 80106ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f0:	e853 3f00 	ldrex	r3, [r3]
 80106f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80106f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106f8:	f023 0301 	bic.w	r3, r3, #1
 80106fc:	667b      	str	r3, [r7, #100]	; 0x64
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	3308      	adds	r3, #8
 8010704:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010706:	647a      	str	r2, [r7, #68]	; 0x44
 8010708:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801070a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801070c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801070e:	e841 2300 	strex	r3, r2, [r1]
 8010712:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010716:	2b00      	cmp	r3, #0
 8010718:	d1e5      	bne.n	80106e6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2220      	movs	r2, #32
 801071e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2200      	movs	r2, #0
 8010726:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2200      	movs	r2, #0
 801072c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	4a33      	ldr	r2, [pc, #204]	; (8010800 <UART_RxISR_8BIT+0x1b4>)
 8010734:	4293      	cmp	r3, r2
 8010736:	d01f      	beq.n	8010778 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	685b      	ldr	r3, [r3, #4]
 801073e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010742:	2b00      	cmp	r3, #0
 8010744:	d018      	beq.n	8010778 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074e:	e853 3f00 	ldrex	r3, [r3]
 8010752:	623b      	str	r3, [r7, #32]
   return(result);
 8010754:	6a3b      	ldr	r3, [r7, #32]
 8010756:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801075a:	663b      	str	r3, [r7, #96]	; 0x60
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	461a      	mov	r2, r3
 8010762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010764:	633b      	str	r3, [r7, #48]	; 0x30
 8010766:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010768:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801076a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801076c:	e841 2300 	strex	r3, r2, [r1]
 8010770:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010774:	2b00      	cmp	r3, #0
 8010776:	d1e6      	bne.n	8010746 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801077c:	2b01      	cmp	r3, #1
 801077e:	d12e      	bne.n	80107de <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2200      	movs	r2, #0
 8010784:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	e853 3f00 	ldrex	r3, [r3]
 8010792:	60fb      	str	r3, [r7, #12]
   return(result);
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f023 0310 	bic.w	r3, r3, #16
 801079a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	461a      	mov	r2, r3
 80107a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107a4:	61fb      	str	r3, [r7, #28]
 80107a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107a8:	69b9      	ldr	r1, [r7, #24]
 80107aa:	69fa      	ldr	r2, [r7, #28]
 80107ac:	e841 2300 	strex	r3, r2, [r1]
 80107b0:	617b      	str	r3, [r7, #20]
   return(result);
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d1e6      	bne.n	8010786 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	69db      	ldr	r3, [r3, #28]
 80107be:	f003 0310 	and.w	r3, r3, #16
 80107c2:	2b10      	cmp	r3, #16
 80107c4:	d103      	bne.n	80107ce <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	2210      	movs	r2, #16
 80107cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80107d4:	4619      	mov	r1, r3
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f7fe fe40 	bl	800f45c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80107dc:	e00b      	b.n	80107f6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f7ef ff86 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 80107e4:	e007      	b.n	80107f6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	699a      	ldr	r2, [r3, #24]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f042 0208 	orr.w	r2, r2, #8
 80107f4:	619a      	str	r2, [r3, #24]
}
 80107f6:	bf00      	nop
 80107f8:	3770      	adds	r7, #112	; 0x70
 80107fa:	46bd      	mov	sp, r7
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	58000c00 	.word	0x58000c00

08010804 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b09c      	sub	sp, #112	; 0x70
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010812:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801081c:	2b22      	cmp	r3, #34	; 0x22
 801081e:	f040 80be 	bne.w	801099e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010828:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010830:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8010832:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8010836:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801083a:	4013      	ands	r3, r2
 801083c:	b29a      	uxth	r2, r3
 801083e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010840:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010846:	1c9a      	adds	r2, r3, #2
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010852:	b29b      	uxth	r3, r3
 8010854:	3b01      	subs	r3, #1
 8010856:	b29a      	uxth	r2, r3
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010864:	b29b      	uxth	r3, r3
 8010866:	2b00      	cmp	r3, #0
 8010868:	f040 80a1 	bne.w	80109ae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010874:	e853 3f00 	ldrex	r3, [r3]
 8010878:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801087a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801087c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010880:	667b      	str	r3, [r7, #100]	; 0x64
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	461a      	mov	r2, r3
 8010888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801088a:	657b      	str	r3, [r7, #84]	; 0x54
 801088c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801088e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010890:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010892:	e841 2300 	strex	r3, r2, [r1]
 8010896:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801089a:	2b00      	cmp	r3, #0
 801089c:	d1e6      	bne.n	801086c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	3308      	adds	r3, #8
 80108a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a8:	e853 3f00 	ldrex	r3, [r3]
 80108ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80108ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b0:	f023 0301 	bic.w	r3, r3, #1
 80108b4:	663b      	str	r3, [r7, #96]	; 0x60
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	3308      	adds	r3, #8
 80108bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80108be:	643a      	str	r2, [r7, #64]	; 0x40
 80108c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80108c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80108c6:	e841 2300 	strex	r3, r2, [r1]
 80108ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80108cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d1e5      	bne.n	801089e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2220      	movs	r2, #32
 80108d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2200      	movs	r2, #0
 80108de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2200      	movs	r2, #0
 80108e4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	4a33      	ldr	r2, [pc, #204]	; (80109b8 <UART_RxISR_16BIT+0x1b4>)
 80108ec:	4293      	cmp	r3, r2
 80108ee:	d01f      	beq.n	8010930 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d018      	beq.n	8010930 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010904:	6a3b      	ldr	r3, [r7, #32]
 8010906:	e853 3f00 	ldrex	r3, [r3]
 801090a:	61fb      	str	r3, [r7, #28]
   return(result);
 801090c:	69fb      	ldr	r3, [r7, #28]
 801090e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010912:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	461a      	mov	r2, r3
 801091a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801091c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801091e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010924:	e841 2300 	strex	r3, r2, [r1]
 8010928:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092c:	2b00      	cmp	r3, #0
 801092e:	d1e6      	bne.n	80108fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010934:	2b01      	cmp	r3, #1
 8010936:	d12e      	bne.n	8010996 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2200      	movs	r2, #0
 801093c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	e853 3f00 	ldrex	r3, [r3]
 801094a:	60bb      	str	r3, [r7, #8]
   return(result);
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	f023 0310 	bic.w	r3, r3, #16
 8010952:	65bb      	str	r3, [r7, #88]	; 0x58
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	461a      	mov	r2, r3
 801095a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801095c:	61bb      	str	r3, [r7, #24]
 801095e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010960:	6979      	ldr	r1, [r7, #20]
 8010962:	69ba      	ldr	r2, [r7, #24]
 8010964:	e841 2300 	strex	r3, r2, [r1]
 8010968:	613b      	str	r3, [r7, #16]
   return(result);
 801096a:	693b      	ldr	r3, [r7, #16]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d1e6      	bne.n	801093e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	69db      	ldr	r3, [r3, #28]
 8010976:	f003 0310 	and.w	r3, r3, #16
 801097a:	2b10      	cmp	r3, #16
 801097c:	d103      	bne.n	8010986 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	2210      	movs	r2, #16
 8010984:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801098c:	4619      	mov	r1, r3
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f7fe fd64 	bl	800f45c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010994:	e00b      	b.n	80109ae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f7ef feaa 	bl	80006f0 <HAL_UART_RxCpltCallback>
}
 801099c:	e007      	b.n	80109ae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	699a      	ldr	r2, [r3, #24]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f042 0208 	orr.w	r2, r2, #8
 80109ac:	619a      	str	r2, [r3, #24]
}
 80109ae:	bf00      	nop
 80109b0:	3770      	adds	r7, #112	; 0x70
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}
 80109b6:	bf00      	nop
 80109b8:	58000c00 	.word	0x58000c00

080109bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b0ac      	sub	sp, #176	; 0xb0
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80109ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	69db      	ldr	r3, [r3, #28]
 80109d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	689b      	ldr	r3, [r3, #8]
 80109e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80109f2:	2b22      	cmp	r3, #34	; 0x22
 80109f4:	f040 8180 	bne.w	8010cf8 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80109fe:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010a02:	e123      	b.n	8010c4c <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a0a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010a0e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8010a12:	b2d9      	uxtb	r1, r3
 8010a14:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8010a18:	b2da      	uxtb	r2, r3
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a1e:	400a      	ands	r2, r1
 8010a20:	b2d2      	uxtb	r2, r2
 8010a22:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a28:	1c5a      	adds	r2, r3, #1
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	3b01      	subs	r3, #1
 8010a38:	b29a      	uxth	r2, r3
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	69db      	ldr	r3, [r3, #28]
 8010a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a4e:	f003 0307 	and.w	r3, r3, #7
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d053      	beq.n	8010afe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010a56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a5a:	f003 0301 	and.w	r3, r3, #1
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d011      	beq.n	8010a86 <UART_RxISR_8BIT_FIFOEN+0xca>
 8010a62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d00b      	beq.n	8010a86 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	2201      	movs	r2, #1
 8010a74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a7c:	f043 0201 	orr.w	r2, r3, #1
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010a86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010a8a:	f003 0302 	and.w	r3, r3, #2
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d011      	beq.n	8010ab6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010a96:	f003 0301 	and.w	r3, r3, #1
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d00b      	beq.n	8010ab6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	2202      	movs	r2, #2
 8010aa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010aac:	f043 0204 	orr.w	r2, r3, #4
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010aba:	f003 0304 	and.w	r3, r3, #4
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d011      	beq.n	8010ae6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010ac2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010ac6:	f003 0301 	and.w	r3, r3, #1
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d00b      	beq.n	8010ae6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	2204      	movs	r2, #4
 8010ad4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010adc:	f043 0202 	orr.w	r2, r3, #2
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d006      	beq.n	8010afe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f7fe fca9 	bl	800f448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2200      	movs	r2, #0
 8010afa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b04:	b29b      	uxth	r3, r3
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	f040 80a0 	bne.w	8010c4c <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010b14:	e853 3f00 	ldrex	r3, [r3]
 8010b18:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8010b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	461a      	mov	r2, r3
 8010b2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010b30:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b32:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010b34:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010b36:	e841 2300 	strex	r3, r2, [r1]
 8010b3a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8010b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d1e4      	bne.n	8010b0c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	3308      	adds	r3, #8
 8010b48:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b4c:	e853 3f00 	ldrex	r3, [r3]
 8010b50:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010b52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010b54:	4b6e      	ldr	r3, [pc, #440]	; (8010d10 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8010b56:	4013      	ands	r3, r2
 8010b58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	3308      	adds	r3, #8
 8010b62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010b66:	66ba      	str	r2, [r7, #104]	; 0x68
 8010b68:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b6a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010b6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b6e:	e841 2300 	strex	r3, r2, [r1]
 8010b72:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010b74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d1e3      	bne.n	8010b42 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2220      	movs	r2, #32
 8010b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2200      	movs	r2, #0
 8010b86:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	4a60      	ldr	r2, [pc, #384]	; (8010d14 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8010b94:	4293      	cmp	r3, r2
 8010b96:	d021      	beq.n	8010bdc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d01a      	beq.n	8010bdc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010bae:	e853 3f00 	ldrex	r3, [r3]
 8010bb2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8010bca:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bcc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010bce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010bd0:	e841 2300 	strex	r3, r2, [r1]
 8010bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d1e4      	bne.n	8010ba6 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	d130      	bne.n	8010c46 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2200      	movs	r2, #0
 8010be8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bf2:	e853 3f00 	ldrex	r3, [r3]
 8010bf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfa:	f023 0310 	bic.w	r3, r3, #16
 8010bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	461a      	mov	r2, r3
 8010c08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010c0c:	643b      	str	r3, [r7, #64]	; 0x40
 8010c0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010c12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010c14:	e841 2300 	strex	r3, r2, [r1]
 8010c18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d1e4      	bne.n	8010bea <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	69db      	ldr	r3, [r3, #28]
 8010c26:	f003 0310 	and.w	r3, r3, #16
 8010c2a:	2b10      	cmp	r3, #16
 8010c2c:	d103      	bne.n	8010c36 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	2210      	movs	r2, #16
 8010c34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010c3c:	4619      	mov	r1, r3
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f7fe fc0c 	bl	800f45c <HAL_UARTEx_RxEventCallback>
 8010c44:	e002      	b.n	8010c4c <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f7ef fd52 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010c4c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d006      	beq.n	8010c62 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8010c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c58:	f003 0320 	and.w	r3, r3, #32
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	f47f aed1 	bne.w	8010a04 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c68:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010c6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d049      	beq.n	8010d08 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010c7a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d242      	bcs.n	8010d08 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	3308      	adds	r3, #8
 8010c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c8a:	6a3b      	ldr	r3, [r7, #32]
 8010c8c:	e853 3f00 	ldrex	r3, [r3]
 8010c90:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	3308      	adds	r3, #8
 8010ca2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010ca6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010ca8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010caa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cae:	e841 2300 	strex	r3, r2, [r1]
 8010cb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d1e3      	bne.n	8010c82 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	4a16      	ldr	r2, [pc, #88]	; (8010d18 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8010cbe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	e853 3f00 	ldrex	r3, [r3]
 8010ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	f043 0320 	orr.w	r3, r3, #32
 8010cd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	461a      	mov	r2, r3
 8010cde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010ce2:	61bb      	str	r3, [r7, #24]
 8010ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ce6:	6979      	ldr	r1, [r7, #20]
 8010ce8:	69ba      	ldr	r2, [r7, #24]
 8010cea:	e841 2300 	strex	r3, r2, [r1]
 8010cee:	613b      	str	r3, [r7, #16]
   return(result);
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d1e4      	bne.n	8010cc0 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010cf6:	e007      	b.n	8010d08 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	699a      	ldr	r2, [r3, #24]
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	f042 0208 	orr.w	r2, r2, #8
 8010d06:	619a      	str	r2, [r3, #24]
}
 8010d08:	bf00      	nop
 8010d0a:	37b0      	adds	r7, #176	; 0xb0
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}
 8010d10:	effffffe 	.word	0xeffffffe
 8010d14:	58000c00 	.word	0x58000c00
 8010d18:	0801064d 	.word	0x0801064d

08010d1c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b0ae      	sub	sp, #184	; 0xb8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d2a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	69db      	ldr	r3, [r3, #28]
 8010d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	689b      	ldr	r3, [r3, #8]
 8010d48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010d52:	2b22      	cmp	r3, #34	; 0x22
 8010d54:	f040 8184 	bne.w	8011060 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010d5e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010d62:	e127      	b.n	8010fb4 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d6a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8010d76:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8010d7a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8010d7e:	4013      	ands	r3, r2
 8010d80:	b29a      	uxth	r2, r3
 8010d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010d86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d8c:	1c9a      	adds	r2, r3, #2
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d98:	b29b      	uxth	r3, r3
 8010d9a:	3b01      	subs	r3, #1
 8010d9c:	b29a      	uxth	r2, r3
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	69db      	ldr	r3, [r3, #28]
 8010daa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010dae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010db2:	f003 0307 	and.w	r3, r3, #7
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d053      	beq.n	8010e62 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010dba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010dbe:	f003 0301 	and.w	r3, r3, #1
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d011      	beq.n	8010dea <UART_RxISR_16BIT_FIFOEN+0xce>
 8010dc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d00b      	beq.n	8010dea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010de0:	f043 0201 	orr.w	r2, r3, #1
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010dea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010dee:	f003 0302 	and.w	r3, r3, #2
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d011      	beq.n	8010e1a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010df6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010dfa:	f003 0301 	and.w	r3, r3, #1
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d00b      	beq.n	8010e1a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	2202      	movs	r2, #2
 8010e08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e10:	f043 0204 	orr.w	r2, r3, #4
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010e1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010e1e:	f003 0304 	and.w	r3, r3, #4
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d011      	beq.n	8010e4a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010e26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010e2a:	f003 0301 	and.w	r3, r3, #1
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d00b      	beq.n	8010e4a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	2204      	movs	r2, #4
 8010e38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e40:	f043 0202 	orr.w	r2, r3, #2
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d006      	beq.n	8010e62 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f7fe faf7 	bl	800f448 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	f040 80a2 	bne.w	8010fb4 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010e78:	e853 3f00 	ldrex	r3, [r3]
 8010e7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010e7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	461a      	mov	r2, r3
 8010e8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010e96:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010e9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010e9e:	e841 2300 	strex	r3, r2, [r1]
 8010ea2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d1e2      	bne.n	8010e70 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	3308      	adds	r3, #8
 8010eb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010eb4:	e853 3f00 	ldrex	r3, [r3]
 8010eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010eba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010ebc:	4b6e      	ldr	r3, [pc, #440]	; (8011078 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8010ebe:	4013      	ands	r3, r2
 8010ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	3308      	adds	r3, #8
 8010eca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010ece:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010ed0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ed2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010ed4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010ed6:	e841 2300 	strex	r3, r2, [r1]
 8010eda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d1e3      	bne.n	8010eaa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2220      	movs	r2, #32
 8010ee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2200      	movs	r2, #0
 8010eee:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	4a60      	ldr	r2, [pc, #384]	; (801107c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d021      	beq.n	8010f44 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d01a      	beq.n	8010f44 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f16:	e853 3f00 	ldrex	r3, [r3]
 8010f1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010f22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	461a      	mov	r2, r3
 8010f2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f30:	65bb      	str	r3, [r7, #88]	; 0x58
 8010f32:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f38:	e841 2300 	strex	r3, r2, [r1]
 8010f3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d1e4      	bne.n	8010f0e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f48:	2b01      	cmp	r3, #1
 8010f4a:	d130      	bne.n	8010fae <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2200      	movs	r2, #0
 8010f50:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5a:	e853 3f00 	ldrex	r3, [r3]
 8010f5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f62:	f023 0310 	bic.w	r3, r3, #16
 8010f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	461a      	mov	r2, r3
 8010f70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010f74:	647b      	str	r3, [r7, #68]	; 0x44
 8010f76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010f7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010f7c:	e841 2300 	strex	r3, r2, [r1]
 8010f80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d1e4      	bne.n	8010f52 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	69db      	ldr	r3, [r3, #28]
 8010f8e:	f003 0310 	and.w	r3, r3, #16
 8010f92:	2b10      	cmp	r3, #16
 8010f94:	d103      	bne.n	8010f9e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	2210      	movs	r2, #16
 8010f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f7fe fa58 	bl	800f45c <HAL_UARTEx_RxEventCallback>
 8010fac:	e002      	b.n	8010fb4 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f7ef fb9e 	bl	80006f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010fb4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d006      	beq.n	8010fca <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8010fbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010fc0:	f003 0320 	and.w	r3, r3, #32
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	f47f aecd 	bne.w	8010d64 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010fd0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010fd4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d049      	beq.n	8011070 <UART_RxISR_16BIT_FIFOEN+0x354>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010fe2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d242      	bcs.n	8011070 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	3308      	adds	r3, #8
 8010ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff4:	e853 3f00 	ldrex	r3, [r3]
 8010ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8010ffa:	6a3b      	ldr	r3, [r7, #32]
 8010ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	3308      	adds	r3, #8
 801100a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801100e:	633a      	str	r2, [r7, #48]	; 0x30
 8011010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011016:	e841 2300 	strex	r3, r2, [r1]
 801101a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801101c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801101e:	2b00      	cmp	r3, #0
 8011020:	d1e3      	bne.n	8010fea <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4a16      	ldr	r2, [pc, #88]	; (8011080 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8011026:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	e853 3f00 	ldrex	r3, [r3]
 8011034:	60fb      	str	r3, [r7, #12]
   return(result);
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	f043 0320 	orr.w	r3, r3, #32
 801103c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	461a      	mov	r2, r3
 8011046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801104a:	61fb      	str	r3, [r7, #28]
 801104c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801104e:	69b9      	ldr	r1, [r7, #24]
 8011050:	69fa      	ldr	r2, [r7, #28]
 8011052:	e841 2300 	strex	r3, r2, [r1]
 8011056:	617b      	str	r3, [r7, #20]
   return(result);
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d1e4      	bne.n	8011028 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801105e:	e007      	b.n	8011070 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	699a      	ldr	r2, [r3, #24]
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	f042 0208 	orr.w	r2, r2, #8
 801106e:	619a      	str	r2, [r3, #24]
}
 8011070:	bf00      	nop
 8011072:	37b8      	adds	r7, #184	; 0xb8
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}
 8011078:	effffffe 	.word	0xeffffffe
 801107c:	58000c00 	.word	0x58000c00
 8011080:	08010805 	.word	0x08010805

08011084 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011084:	b480      	push	{r7}
 8011086:	b083      	sub	sp, #12
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801108c:	bf00      	nop
 801108e:	370c      	adds	r7, #12
 8011090:	46bd      	mov	sp, r7
 8011092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011096:	4770      	bx	lr

08011098 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011098:	b480      	push	{r7}
 801109a:	b083      	sub	sp, #12
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80110a0:	bf00      	nop
 80110a2:	370c      	adds	r7, #12
 80110a4:	46bd      	mov	sp, r7
 80110a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110aa:	4770      	bx	lr

080110ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80110ac:	b480      	push	{r7}
 80110ae:	b083      	sub	sp, #12
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80110b4:	bf00      	nop
 80110b6:	370c      	adds	r7, #12
 80110b8:	46bd      	mov	sp, r7
 80110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110be:	4770      	bx	lr

080110c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80110c0:	b480      	push	{r7}
 80110c2:	b085      	sub	sp, #20
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80110ce:	2b01      	cmp	r3, #1
 80110d0:	d101      	bne.n	80110d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80110d2:	2302      	movs	r3, #2
 80110d4:	e027      	b.n	8011126 <HAL_UARTEx_DisableFifoMode+0x66>
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2201      	movs	r2, #1
 80110da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2224      	movs	r2, #36	; 0x24
 80110e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	681a      	ldr	r2, [r3, #0]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	f022 0201 	bic.w	r2, r2, #1
 80110fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011104:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2200      	movs	r2, #0
 801110a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	68fa      	ldr	r2, [r7, #12]
 8011112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2220      	movs	r2, #32
 8011118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2200      	movs	r2, #0
 8011120:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011124:	2300      	movs	r3, #0
}
 8011126:	4618      	mov	r0, r3
 8011128:	3714      	adds	r7, #20
 801112a:	46bd      	mov	sp, r7
 801112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011130:	4770      	bx	lr

08011132 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011132:	b580      	push	{r7, lr}
 8011134:	b084      	sub	sp, #16
 8011136:	af00      	add	r7, sp, #0
 8011138:	6078      	str	r0, [r7, #4]
 801113a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011142:	2b01      	cmp	r3, #1
 8011144:	d101      	bne.n	801114a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011146:	2302      	movs	r3, #2
 8011148:	e02d      	b.n	80111a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2201      	movs	r2, #1
 801114e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2224      	movs	r2, #36	; 0x24
 8011156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	681a      	ldr	r2, [r3, #0]
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	f022 0201 	bic.w	r2, r2, #1
 8011170:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	689b      	ldr	r3, [r3, #8]
 8011178:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	683a      	ldr	r2, [r7, #0]
 8011182:	430a      	orrs	r2, r1
 8011184:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f000 f850 	bl	801122c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	68fa      	ldr	r2, [r7, #12]
 8011192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2220      	movs	r2, #32
 8011198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	2200      	movs	r2, #0
 80111a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80111a4:	2300      	movs	r3, #0
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3710      	adds	r7, #16
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}

080111ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80111ae:	b580      	push	{r7, lr}
 80111b0:	b084      	sub	sp, #16
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]
 80111b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80111be:	2b01      	cmp	r3, #1
 80111c0:	d101      	bne.n	80111c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80111c2:	2302      	movs	r3, #2
 80111c4:	e02d      	b.n	8011222 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2201      	movs	r2, #1
 80111ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2224      	movs	r2, #36	; 0x24
 80111d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	681a      	ldr	r2, [r3, #0]
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	f022 0201 	bic.w	r2, r2, #1
 80111ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	689b      	ldr	r3, [r3, #8]
 80111f4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	683a      	ldr	r2, [r7, #0]
 80111fe:	430a      	orrs	r2, r1
 8011200:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f000 f812 	bl	801122c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	68fa      	ldr	r2, [r7, #12]
 801120e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2220      	movs	r2, #32
 8011214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2200      	movs	r2, #0
 801121c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011220:	2300      	movs	r3, #0
}
 8011222:	4618      	mov	r0, r3
 8011224:	3710      	adds	r7, #16
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}
	...

0801122c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801122c:	b480      	push	{r7}
 801122e:	b085      	sub	sp, #20
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011238:	2b00      	cmp	r3, #0
 801123a:	d108      	bne.n	801124e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2201      	movs	r2, #1
 8011240:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2201      	movs	r2, #1
 8011248:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801124c:	e031      	b.n	80112b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801124e:	2310      	movs	r3, #16
 8011250:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011252:	2310      	movs	r3, #16
 8011254:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	689b      	ldr	r3, [r3, #8]
 801125c:	0e5b      	lsrs	r3, r3, #25
 801125e:	b2db      	uxtb	r3, r3
 8011260:	f003 0307 	and.w	r3, r3, #7
 8011264:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	689b      	ldr	r3, [r3, #8]
 801126c:	0f5b      	lsrs	r3, r3, #29
 801126e:	b2db      	uxtb	r3, r3
 8011270:	f003 0307 	and.w	r3, r3, #7
 8011274:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011276:	7bbb      	ldrb	r3, [r7, #14]
 8011278:	7b3a      	ldrb	r2, [r7, #12]
 801127a:	4911      	ldr	r1, [pc, #68]	; (80112c0 <UARTEx_SetNbDataToProcess+0x94>)
 801127c:	5c8a      	ldrb	r2, [r1, r2]
 801127e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011282:	7b3a      	ldrb	r2, [r7, #12]
 8011284:	490f      	ldr	r1, [pc, #60]	; (80112c4 <UARTEx_SetNbDataToProcess+0x98>)
 8011286:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011288:	fb93 f3f2 	sdiv	r3, r3, r2
 801128c:	b29a      	uxth	r2, r3
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011294:	7bfb      	ldrb	r3, [r7, #15]
 8011296:	7b7a      	ldrb	r2, [r7, #13]
 8011298:	4909      	ldr	r1, [pc, #36]	; (80112c0 <UARTEx_SetNbDataToProcess+0x94>)
 801129a:	5c8a      	ldrb	r2, [r1, r2]
 801129c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80112a0:	7b7a      	ldrb	r2, [r7, #13]
 80112a2:	4908      	ldr	r1, [pc, #32]	; (80112c4 <UARTEx_SetNbDataToProcess+0x98>)
 80112a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80112a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80112aa:	b29a      	uxth	r2, r3
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80112b2:	bf00      	nop
 80112b4:	3714      	adds	r7, #20
 80112b6:	46bd      	mov	sp, r7
 80112b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112bc:	4770      	bx	lr
 80112be:	bf00      	nop
 80112c0:	08015de4 	.word	0x08015de4
 80112c4:	08015dec 	.word	0x08015dec

080112c8 <__NVIC_SetPriority>:
{
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	4603      	mov	r3, r0
 80112d0:	6039      	str	r1, [r7, #0]
 80112d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80112d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	db0a      	blt.n	80112f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	b2da      	uxtb	r2, r3
 80112e0:	490c      	ldr	r1, [pc, #48]	; (8011314 <__NVIC_SetPriority+0x4c>)
 80112e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80112e6:	0112      	lsls	r2, r2, #4
 80112e8:	b2d2      	uxtb	r2, r2
 80112ea:	440b      	add	r3, r1
 80112ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80112f0:	e00a      	b.n	8011308 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	b2da      	uxtb	r2, r3
 80112f6:	4908      	ldr	r1, [pc, #32]	; (8011318 <__NVIC_SetPriority+0x50>)
 80112f8:	88fb      	ldrh	r3, [r7, #6]
 80112fa:	f003 030f 	and.w	r3, r3, #15
 80112fe:	3b04      	subs	r3, #4
 8011300:	0112      	lsls	r2, r2, #4
 8011302:	b2d2      	uxtb	r2, r2
 8011304:	440b      	add	r3, r1
 8011306:	761a      	strb	r2, [r3, #24]
}
 8011308:	bf00      	nop
 801130a:	370c      	adds	r7, #12
 801130c:	46bd      	mov	sp, r7
 801130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011312:	4770      	bx	lr
 8011314:	e000e100 	.word	0xe000e100
 8011318:	e000ed00 	.word	0xe000ed00

0801131c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801131c:	b580      	push	{r7, lr}
 801131e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011320:	4b05      	ldr	r3, [pc, #20]	; (8011338 <SysTick_Handler+0x1c>)
 8011322:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011324:	f002 fada 	bl	80138dc <xTaskGetSchedulerState>
 8011328:	4603      	mov	r3, r0
 801132a:	2b01      	cmp	r3, #1
 801132c:	d001      	beq.n	8011332 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801132e:	f003 f8fb 	bl	8014528 <xPortSysTickHandler>
  }
}
 8011332:	bf00      	nop
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	e000e010 	.word	0xe000e010

0801133c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801133c:	b580      	push	{r7, lr}
 801133e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011340:	2100      	movs	r1, #0
 8011342:	f06f 0004 	mvn.w	r0, #4
 8011346:	f7ff ffbf 	bl	80112c8 <__NVIC_SetPriority>
#endif
}
 801134a:	bf00      	nop
 801134c:	bd80      	pop	{r7, pc}
	...

08011350 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011350:	b480      	push	{r7}
 8011352:	b083      	sub	sp, #12
 8011354:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011356:	f3ef 8305 	mrs	r3, IPSR
 801135a:	603b      	str	r3, [r7, #0]
  return(result);
 801135c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801135e:	2b00      	cmp	r3, #0
 8011360:	d003      	beq.n	801136a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011362:	f06f 0305 	mvn.w	r3, #5
 8011366:	607b      	str	r3, [r7, #4]
 8011368:	e00c      	b.n	8011384 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801136a:	4b0a      	ldr	r3, [pc, #40]	; (8011394 <osKernelInitialize+0x44>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d105      	bne.n	801137e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011372:	4b08      	ldr	r3, [pc, #32]	; (8011394 <osKernelInitialize+0x44>)
 8011374:	2201      	movs	r2, #1
 8011376:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011378:	2300      	movs	r3, #0
 801137a:	607b      	str	r3, [r7, #4]
 801137c:	e002      	b.n	8011384 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801137e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011382:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011384:	687b      	ldr	r3, [r7, #4]
}
 8011386:	4618      	mov	r0, r3
 8011388:	370c      	adds	r7, #12
 801138a:	46bd      	mov	sp, r7
 801138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011390:	4770      	bx	lr
 8011392:	bf00      	nop
 8011394:	2400075c 	.word	0x2400075c

08011398 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801139e:	f3ef 8305 	mrs	r3, IPSR
 80113a2:	603b      	str	r3, [r7, #0]
  return(result);
 80113a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d003      	beq.n	80113b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80113aa:	f06f 0305 	mvn.w	r3, #5
 80113ae:	607b      	str	r3, [r7, #4]
 80113b0:	e010      	b.n	80113d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80113b2:	4b0b      	ldr	r3, [pc, #44]	; (80113e0 <osKernelStart+0x48>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	2b01      	cmp	r3, #1
 80113b8:	d109      	bne.n	80113ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80113ba:	f7ff ffbf 	bl	801133c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80113be:	4b08      	ldr	r3, [pc, #32]	; (80113e0 <osKernelStart+0x48>)
 80113c0:	2202      	movs	r2, #2
 80113c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80113c4:	f001 fda4 	bl	8012f10 <vTaskStartScheduler>
      stat = osOK;
 80113c8:	2300      	movs	r3, #0
 80113ca:	607b      	str	r3, [r7, #4]
 80113cc:	e002      	b.n	80113d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80113ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80113d4:	687b      	ldr	r3, [r7, #4]
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3708      	adds	r7, #8
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
 80113de:	bf00      	nop
 80113e0:	2400075c 	.word	0x2400075c

080113e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b08e      	sub	sp, #56	; 0x38
 80113e8:	af04      	add	r7, sp, #16
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	60b9      	str	r1, [r7, #8]
 80113ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80113f0:	2300      	movs	r3, #0
 80113f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80113f4:	f3ef 8305 	mrs	r3, IPSR
 80113f8:	617b      	str	r3, [r7, #20]
  return(result);
 80113fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d17e      	bne.n	80114fe <osThreadNew+0x11a>
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d07b      	beq.n	80114fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011406:	2380      	movs	r3, #128	; 0x80
 8011408:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801140a:	2318      	movs	r3, #24
 801140c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801140e:	2300      	movs	r3, #0
 8011410:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011416:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d045      	beq.n	80114aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d002      	beq.n	801142c <osThreadNew+0x48>
        name = attr->name;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	699b      	ldr	r3, [r3, #24]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d002      	beq.n	801143a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	699b      	ldr	r3, [r3, #24]
 8011438:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801143a:	69fb      	ldr	r3, [r7, #28]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d008      	beq.n	8011452 <osThreadNew+0x6e>
 8011440:	69fb      	ldr	r3, [r7, #28]
 8011442:	2b38      	cmp	r3, #56	; 0x38
 8011444:	d805      	bhi.n	8011452 <osThreadNew+0x6e>
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	f003 0301 	and.w	r3, r3, #1
 801144e:	2b00      	cmp	r3, #0
 8011450:	d001      	beq.n	8011456 <osThreadNew+0x72>
        return (NULL);
 8011452:	2300      	movs	r3, #0
 8011454:	e054      	b.n	8011500 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	695b      	ldr	r3, [r3, #20]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d003      	beq.n	8011466 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	695b      	ldr	r3, [r3, #20]
 8011462:	089b      	lsrs	r3, r3, #2
 8011464:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	689b      	ldr	r3, [r3, #8]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d00e      	beq.n	801148c <osThreadNew+0xa8>
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	68db      	ldr	r3, [r3, #12]
 8011472:	2b5b      	cmp	r3, #91	; 0x5b
 8011474:	d90a      	bls.n	801148c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801147a:	2b00      	cmp	r3, #0
 801147c:	d006      	beq.n	801148c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	695b      	ldr	r3, [r3, #20]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d002      	beq.n	801148c <osThreadNew+0xa8>
        mem = 1;
 8011486:	2301      	movs	r3, #1
 8011488:	61bb      	str	r3, [r7, #24]
 801148a:	e010      	b.n	80114ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	689b      	ldr	r3, [r3, #8]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d10c      	bne.n	80114ae <osThreadNew+0xca>
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	68db      	ldr	r3, [r3, #12]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d108      	bne.n	80114ae <osThreadNew+0xca>
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	691b      	ldr	r3, [r3, #16]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d104      	bne.n	80114ae <osThreadNew+0xca>
          mem = 0;
 80114a4:	2300      	movs	r3, #0
 80114a6:	61bb      	str	r3, [r7, #24]
 80114a8:	e001      	b.n	80114ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80114aa:	2300      	movs	r3, #0
 80114ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80114ae:	69bb      	ldr	r3, [r7, #24]
 80114b0:	2b01      	cmp	r3, #1
 80114b2:	d110      	bne.n	80114d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80114b8:	687a      	ldr	r2, [r7, #4]
 80114ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80114bc:	9202      	str	r2, [sp, #8]
 80114be:	9301      	str	r3, [sp, #4]
 80114c0:	69fb      	ldr	r3, [r7, #28]
 80114c2:	9300      	str	r3, [sp, #0]
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	6a3a      	ldr	r2, [r7, #32]
 80114c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114ca:	68f8      	ldr	r0, [r7, #12]
 80114cc:	f001 fb4a 	bl	8012b64 <xTaskCreateStatic>
 80114d0:	4603      	mov	r3, r0
 80114d2:	613b      	str	r3, [r7, #16]
 80114d4:	e013      	b.n	80114fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80114d6:	69bb      	ldr	r3, [r7, #24]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d110      	bne.n	80114fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80114dc:	6a3b      	ldr	r3, [r7, #32]
 80114de:	b29a      	uxth	r2, r3
 80114e0:	f107 0310 	add.w	r3, r7, #16
 80114e4:	9301      	str	r3, [sp, #4]
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	9300      	str	r3, [sp, #0]
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114ee:	68f8      	ldr	r0, [r7, #12]
 80114f0:	f001 fb95 	bl	8012c1e <xTaskCreate>
 80114f4:	4603      	mov	r3, r0
 80114f6:	2b01      	cmp	r3, #1
 80114f8:	d001      	beq.n	80114fe <osThreadNew+0x11a>
            hTask = NULL;
 80114fa:	2300      	movs	r3, #0
 80114fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80114fe:	693b      	ldr	r3, [r7, #16]
}
 8011500:	4618      	mov	r0, r3
 8011502:	3728      	adds	r7, #40	; 0x28
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}

08011508 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8011508:	b480      	push	{r7}
 801150a:	b083      	sub	sp, #12
 801150c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801150e:	f3ef 8305 	mrs	r3, IPSR
 8011512:	603b      	str	r3, [r7, #0]
  return(result);
 8011514:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011516:	2b00      	cmp	r3, #0
 8011518:	d003      	beq.n	8011522 <osThreadYield+0x1a>
    stat = osErrorISR;
 801151a:	f06f 0305 	mvn.w	r3, #5
 801151e:	607b      	str	r3, [r7, #4]
 8011520:	e009      	b.n	8011536 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8011522:	2300      	movs	r3, #0
 8011524:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8011526:	4b07      	ldr	r3, [pc, #28]	; (8011544 <osThreadYield+0x3c>)
 8011528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801152c:	601a      	str	r2, [r3, #0]
 801152e:	f3bf 8f4f 	dsb	sy
 8011532:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8011536:	687b      	ldr	r3, [r7, #4]
}
 8011538:	4618      	mov	r0, r3
 801153a:	370c      	adds	r7, #12
 801153c:	46bd      	mov	sp, r7
 801153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011542:	4770      	bx	lr
 8011544:	e000ed04 	.word	0xe000ed04

08011548 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011548:	b580      	push	{r7, lr}
 801154a:	b084      	sub	sp, #16
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011550:	f3ef 8305 	mrs	r3, IPSR
 8011554:	60bb      	str	r3, [r7, #8]
  return(result);
 8011556:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011558:	2b00      	cmp	r3, #0
 801155a:	d003      	beq.n	8011564 <osDelay+0x1c>
    stat = osErrorISR;
 801155c:	f06f 0305 	mvn.w	r3, #5
 8011560:	60fb      	str	r3, [r7, #12]
 8011562:	e007      	b.n	8011574 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011564:	2300      	movs	r3, #0
 8011566:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d002      	beq.n	8011574 <osDelay+0x2c>
      vTaskDelay(ticks);
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f001 fc9a 	bl	8012ea8 <vTaskDelay>
    }
  }

  return (stat);
 8011574:	68fb      	ldr	r3, [r7, #12]
}
 8011576:	4618      	mov	r0, r3
 8011578:	3710      	adds	r7, #16
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}

0801157e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 801157e:	b580      	push	{r7, lr}
 8011580:	b086      	sub	sp, #24
 8011582:	af00      	add	r7, sp, #0
 8011584:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8011586:	2300      	movs	r3, #0
 8011588:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801158a:	f3ef 8305 	mrs	r3, IPSR
 801158e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011590:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8011592:	2b00      	cmp	r3, #0
 8011594:	d12d      	bne.n	80115f2 <osEventFlagsNew+0x74>
    mem = -1;
 8011596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801159a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d015      	beq.n	80115ce <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	689b      	ldr	r3, [r3, #8]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d006      	beq.n	80115b8 <osEventFlagsNew+0x3a>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	68db      	ldr	r3, [r3, #12]
 80115ae:	2b1f      	cmp	r3, #31
 80115b0:	d902      	bls.n	80115b8 <osEventFlagsNew+0x3a>
        mem = 1;
 80115b2:	2301      	movs	r3, #1
 80115b4:	613b      	str	r3, [r7, #16]
 80115b6:	e00c      	b.n	80115d2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	689b      	ldr	r3, [r3, #8]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d108      	bne.n	80115d2 <osEventFlagsNew+0x54>
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	68db      	ldr	r3, [r3, #12]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d104      	bne.n	80115d2 <osEventFlagsNew+0x54>
          mem = 0;
 80115c8:	2300      	movs	r3, #0
 80115ca:	613b      	str	r3, [r7, #16]
 80115cc:	e001      	b.n	80115d2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80115ce:	2300      	movs	r3, #0
 80115d0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	2b01      	cmp	r3, #1
 80115d6:	d106      	bne.n	80115e6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	689b      	ldr	r3, [r3, #8]
 80115dc:	4618      	mov	r0, r3
 80115de:	f000 fa3d 	bl	8011a5c <xEventGroupCreateStatic>
 80115e2:	6178      	str	r0, [r7, #20]
 80115e4:	e005      	b.n	80115f2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80115e6:	693b      	ldr	r3, [r7, #16]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d102      	bne.n	80115f2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80115ec:	f000 fa6d 	bl	8011aca <xEventGroupCreate>
 80115f0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80115f2:	697b      	ldr	r3, [r7, #20]
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3718      	adds	r7, #24
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}

080115fc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b086      	sub	sp, #24
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
 8011604:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801160a:	693b      	ldr	r3, [r7, #16]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d004      	beq.n	801161a <osEventFlagsSet+0x1e>
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011616:	2b00      	cmp	r3, #0
 8011618:	d003      	beq.n	8011622 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 801161a:	f06f 0303 	mvn.w	r3, #3
 801161e:	617b      	str	r3, [r7, #20]
 8011620:	e028      	b.n	8011674 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011622:	f3ef 8305 	mrs	r3, IPSR
 8011626:	60fb      	str	r3, [r7, #12]
  return(result);
 8011628:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801162a:	2b00      	cmp	r3, #0
 801162c:	d01d      	beq.n	801166a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 801162e:	2300      	movs	r3, #0
 8011630:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8011632:	f107 0308 	add.w	r3, r7, #8
 8011636:	461a      	mov	r2, r3
 8011638:	6839      	ldr	r1, [r7, #0]
 801163a:	6938      	ldr	r0, [r7, #16]
 801163c:	f000 fbe8 	bl	8011e10 <xEventGroupSetBitsFromISR>
 8011640:	4603      	mov	r3, r0
 8011642:	2b00      	cmp	r3, #0
 8011644:	d103      	bne.n	801164e <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8011646:	f06f 0302 	mvn.w	r3, #2
 801164a:	617b      	str	r3, [r7, #20]
 801164c:	e012      	b.n	8011674 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8011652:	68bb      	ldr	r3, [r7, #8]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d00d      	beq.n	8011674 <osEventFlagsSet+0x78>
 8011658:	4b09      	ldr	r3, [pc, #36]	; (8011680 <osEventFlagsSet+0x84>)
 801165a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801165e:	601a      	str	r2, [r3, #0]
 8011660:	f3bf 8f4f 	dsb	sy
 8011664:	f3bf 8f6f 	isb	sy
 8011668:	e004      	b.n	8011674 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801166a:	6839      	ldr	r1, [r7, #0]
 801166c:	6938      	ldr	r0, [r7, #16]
 801166e:	f000 fb15 	bl	8011c9c <xEventGroupSetBits>
 8011672:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8011674:	697b      	ldr	r3, [r7, #20]
}
 8011676:	4618      	mov	r0, r3
 8011678:	3718      	adds	r7, #24
 801167a:	46bd      	mov	sp, r7
 801167c:	bd80      	pop	{r7, pc}
 801167e:	bf00      	nop
 8011680:	e000ed04 	.word	0xe000ed04

08011684 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8011684:	b580      	push	{r7, lr}
 8011686:	b08c      	sub	sp, #48	; 0x30
 8011688:	af02      	add	r7, sp, #8
 801168a:	60f8      	str	r0, [r7, #12]
 801168c:	60b9      	str	r1, [r7, #8]
 801168e:	607a      	str	r2, [r7, #4]
 8011690:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8011696:	69bb      	ldr	r3, [r7, #24]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d004      	beq.n	80116a6 <osEventFlagsWait+0x22>
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d003      	beq.n	80116ae <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80116a6:	f06f 0303 	mvn.w	r3, #3
 80116aa:	61fb      	str	r3, [r7, #28]
 80116ac:	e04b      	b.n	8011746 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80116ae:	f3ef 8305 	mrs	r3, IPSR
 80116b2:	617b      	str	r3, [r7, #20]
  return(result);
 80116b4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d003      	beq.n	80116c2 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80116ba:	f06f 0305 	mvn.w	r3, #5
 80116be:	61fb      	str	r3, [r7, #28]
 80116c0:	e041      	b.n	8011746 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f003 0301 	and.w	r3, r3, #1
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d002      	beq.n	80116d2 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80116cc:	2301      	movs	r3, #1
 80116ce:	627b      	str	r3, [r7, #36]	; 0x24
 80116d0:	e001      	b.n	80116d6 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80116d2:	2300      	movs	r3, #0
 80116d4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f003 0302 	and.w	r3, r3, #2
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d002      	beq.n	80116e6 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80116e0:	2300      	movs	r3, #0
 80116e2:	623b      	str	r3, [r7, #32]
 80116e4:	e001      	b.n	80116ea <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80116e6:	2301      	movs	r3, #1
 80116e8:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	9300      	str	r3, [sp, #0]
 80116ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f0:	6a3a      	ldr	r2, [r7, #32]
 80116f2:	68b9      	ldr	r1, [r7, #8]
 80116f4:	69b8      	ldr	r0, [r7, #24]
 80116f6:	f000 fa03 	bl	8011b00 <xEventGroupWaitBits>
 80116fa:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f003 0301 	and.w	r3, r3, #1
 8011702:	2b00      	cmp	r3, #0
 8011704:	d010      	beq.n	8011728 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8011706:	68ba      	ldr	r2, [r7, #8]
 8011708:	69fb      	ldr	r3, [r7, #28]
 801170a:	4013      	ands	r3, r2
 801170c:	68ba      	ldr	r2, [r7, #8]
 801170e:	429a      	cmp	r2, r3
 8011710:	d019      	beq.n	8011746 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d003      	beq.n	8011720 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8011718:	f06f 0301 	mvn.w	r3, #1
 801171c:	61fb      	str	r3, [r7, #28]
 801171e:	e012      	b.n	8011746 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011720:	f06f 0302 	mvn.w	r3, #2
 8011724:	61fb      	str	r3, [r7, #28]
 8011726:	e00e      	b.n	8011746 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8011728:	68ba      	ldr	r2, [r7, #8]
 801172a:	69fb      	ldr	r3, [r7, #28]
 801172c:	4013      	ands	r3, r2
 801172e:	2b00      	cmp	r3, #0
 8011730:	d109      	bne.n	8011746 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d003      	beq.n	8011740 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8011738:	f06f 0301 	mvn.w	r3, #1
 801173c:	61fb      	str	r3, [r7, #28]
 801173e:	e002      	b.n	8011746 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8011740:	f06f 0302 	mvn.w	r3, #2
 8011744:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8011746:	69fb      	ldr	r3, [r7, #28]
}
 8011748:	4618      	mov	r0, r3
 801174a:	3728      	adds	r7, #40	; 0x28
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}

08011750 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011750:	b580      	push	{r7, lr}
 8011752:	b08a      	sub	sp, #40	; 0x28
 8011754:	af02      	add	r7, sp, #8
 8011756:	60f8      	str	r0, [r7, #12]
 8011758:	60b9      	str	r1, [r7, #8]
 801175a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 801175c:	2300      	movs	r3, #0
 801175e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011760:	f3ef 8305 	mrs	r3, IPSR
 8011764:	613b      	str	r3, [r7, #16]
  return(result);
 8011766:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011768:	2b00      	cmp	r3, #0
 801176a:	d15f      	bne.n	801182c <osMessageQueueNew+0xdc>
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d05c      	beq.n	801182c <osMessageQueueNew+0xdc>
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d059      	beq.n	801182c <osMessageQueueNew+0xdc>
    mem = -1;
 8011778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801177c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d029      	beq.n	80117d8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	689b      	ldr	r3, [r3, #8]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d012      	beq.n	80117b2 <osMessageQueueNew+0x62>
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	68db      	ldr	r3, [r3, #12]
 8011790:	2b4f      	cmp	r3, #79	; 0x4f
 8011792:	d90e      	bls.n	80117b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011798:	2b00      	cmp	r3, #0
 801179a:	d00a      	beq.n	80117b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	695a      	ldr	r2, [r3, #20]
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	68b9      	ldr	r1, [r7, #8]
 80117a4:	fb01 f303 	mul.w	r3, r1, r3
 80117a8:	429a      	cmp	r2, r3
 80117aa:	d302      	bcc.n	80117b2 <osMessageQueueNew+0x62>
        mem = 1;
 80117ac:	2301      	movs	r3, #1
 80117ae:	61bb      	str	r3, [r7, #24]
 80117b0:	e014      	b.n	80117dc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	689b      	ldr	r3, [r3, #8]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d110      	bne.n	80117dc <osMessageQueueNew+0x8c>
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	68db      	ldr	r3, [r3, #12]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d10c      	bne.n	80117dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d108      	bne.n	80117dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	695b      	ldr	r3, [r3, #20]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d104      	bne.n	80117dc <osMessageQueueNew+0x8c>
          mem = 0;
 80117d2:	2300      	movs	r3, #0
 80117d4:	61bb      	str	r3, [r7, #24]
 80117d6:	e001      	b.n	80117dc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80117d8:	2300      	movs	r3, #0
 80117da:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80117dc:	69bb      	ldr	r3, [r7, #24]
 80117de:	2b01      	cmp	r3, #1
 80117e0:	d10b      	bne.n	80117fa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	691a      	ldr	r2, [r3, #16]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	689b      	ldr	r3, [r3, #8]
 80117ea:	2100      	movs	r1, #0
 80117ec:	9100      	str	r1, [sp, #0]
 80117ee:	68b9      	ldr	r1, [r7, #8]
 80117f0:	68f8      	ldr	r0, [r7, #12]
 80117f2:	f000 fc3d 	bl	8012070 <xQueueGenericCreateStatic>
 80117f6:	61f8      	str	r0, [r7, #28]
 80117f8:	e008      	b.n	801180c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80117fa:	69bb      	ldr	r3, [r7, #24]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d105      	bne.n	801180c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8011800:	2200      	movs	r2, #0
 8011802:	68b9      	ldr	r1, [r7, #8]
 8011804:	68f8      	ldr	r0, [r7, #12]
 8011806:	f000 fcab 	bl	8012160 <xQueueGenericCreate>
 801180a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d00c      	beq.n	801182c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d003      	beq.n	8011820 <osMessageQueueNew+0xd0>
        name = attr->name;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	617b      	str	r3, [r7, #20]
 801181e:	e001      	b.n	8011824 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8011820:	2300      	movs	r3, #0
 8011822:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8011824:	6979      	ldr	r1, [r7, #20]
 8011826:	69f8      	ldr	r0, [r7, #28]
 8011828:	f001 f93e 	bl	8012aa8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801182c:	69fb      	ldr	r3, [r7, #28]
}
 801182e:	4618      	mov	r0, r3
 8011830:	3720      	adds	r7, #32
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
	...

08011838 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011838:	b580      	push	{r7, lr}
 801183a:	b088      	sub	sp, #32
 801183c:	af00      	add	r7, sp, #0
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	603b      	str	r3, [r7, #0]
 8011844:	4613      	mov	r3, r2
 8011846:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801184c:	2300      	movs	r3, #0
 801184e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011850:	f3ef 8305 	mrs	r3, IPSR
 8011854:	617b      	str	r3, [r7, #20]
  return(result);
 8011856:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011858:	2b00      	cmp	r3, #0
 801185a:	d028      	beq.n	80118ae <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801185c:	69bb      	ldr	r3, [r7, #24]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d005      	beq.n	801186e <osMessageQueuePut+0x36>
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d002      	beq.n	801186e <osMessageQueuePut+0x36>
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d003      	beq.n	8011876 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801186e:	f06f 0303 	mvn.w	r3, #3
 8011872:	61fb      	str	r3, [r7, #28]
 8011874:	e038      	b.n	80118e8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8011876:	2300      	movs	r3, #0
 8011878:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801187a:	f107 0210 	add.w	r2, r7, #16
 801187e:	2300      	movs	r3, #0
 8011880:	68b9      	ldr	r1, [r7, #8]
 8011882:	69b8      	ldr	r0, [r7, #24]
 8011884:	f000 fdc8 	bl	8012418 <xQueueGenericSendFromISR>
 8011888:	4603      	mov	r3, r0
 801188a:	2b01      	cmp	r3, #1
 801188c:	d003      	beq.n	8011896 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801188e:	f06f 0302 	mvn.w	r3, #2
 8011892:	61fb      	str	r3, [r7, #28]
 8011894:	e028      	b.n	80118e8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d025      	beq.n	80118e8 <osMessageQueuePut+0xb0>
 801189c:	4b15      	ldr	r3, [pc, #84]	; (80118f4 <osMessageQueuePut+0xbc>)
 801189e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118a2:	601a      	str	r2, [r3, #0]
 80118a4:	f3bf 8f4f 	dsb	sy
 80118a8:	f3bf 8f6f 	isb	sy
 80118ac:	e01c      	b.n	80118e8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80118ae:	69bb      	ldr	r3, [r7, #24]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d002      	beq.n	80118ba <osMessageQueuePut+0x82>
 80118b4:	68bb      	ldr	r3, [r7, #8]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d103      	bne.n	80118c2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80118ba:	f06f 0303 	mvn.w	r3, #3
 80118be:	61fb      	str	r3, [r7, #28]
 80118c0:	e012      	b.n	80118e8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80118c2:	2300      	movs	r3, #0
 80118c4:	683a      	ldr	r2, [r7, #0]
 80118c6:	68b9      	ldr	r1, [r7, #8]
 80118c8:	69b8      	ldr	r0, [r7, #24]
 80118ca:	f000 fca7 	bl	801221c <xQueueGenericSend>
 80118ce:	4603      	mov	r3, r0
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d009      	beq.n	80118e8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d003      	beq.n	80118e2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80118da:	f06f 0301 	mvn.w	r3, #1
 80118de:	61fb      	str	r3, [r7, #28]
 80118e0:	e002      	b.n	80118e8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80118e2:	f06f 0302 	mvn.w	r3, #2
 80118e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80118e8:	69fb      	ldr	r3, [r7, #28]
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3720      	adds	r7, #32
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	e000ed04 	.word	0xe000ed04

080118f8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b088      	sub	sp, #32
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	60f8      	str	r0, [r7, #12]
 8011900:	60b9      	str	r1, [r7, #8]
 8011902:	607a      	str	r2, [r7, #4]
 8011904:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801190a:	2300      	movs	r3, #0
 801190c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801190e:	f3ef 8305 	mrs	r3, IPSR
 8011912:	617b      	str	r3, [r7, #20]
  return(result);
 8011914:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8011916:	2b00      	cmp	r3, #0
 8011918:	d028      	beq.n	801196c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801191a:	69bb      	ldr	r3, [r7, #24]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d005      	beq.n	801192c <osMessageQueueGet+0x34>
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d002      	beq.n	801192c <osMessageQueueGet+0x34>
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d003      	beq.n	8011934 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 801192c:	f06f 0303 	mvn.w	r3, #3
 8011930:	61fb      	str	r3, [r7, #28]
 8011932:	e037      	b.n	80119a4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8011934:	2300      	movs	r3, #0
 8011936:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8011938:	f107 0310 	add.w	r3, r7, #16
 801193c:	461a      	mov	r2, r3
 801193e:	68b9      	ldr	r1, [r7, #8]
 8011940:	69b8      	ldr	r0, [r7, #24]
 8011942:	f000 fee5 	bl	8012710 <xQueueReceiveFromISR>
 8011946:	4603      	mov	r3, r0
 8011948:	2b01      	cmp	r3, #1
 801194a:	d003      	beq.n	8011954 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 801194c:	f06f 0302 	mvn.w	r3, #2
 8011950:	61fb      	str	r3, [r7, #28]
 8011952:	e027      	b.n	80119a4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d024      	beq.n	80119a4 <osMessageQueueGet+0xac>
 801195a:	4b15      	ldr	r3, [pc, #84]	; (80119b0 <osMessageQueueGet+0xb8>)
 801195c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011960:	601a      	str	r2, [r3, #0]
 8011962:	f3bf 8f4f 	dsb	sy
 8011966:	f3bf 8f6f 	isb	sy
 801196a:	e01b      	b.n	80119a4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801196c:	69bb      	ldr	r3, [r7, #24]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d002      	beq.n	8011978 <osMessageQueueGet+0x80>
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d103      	bne.n	8011980 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8011978:	f06f 0303 	mvn.w	r3, #3
 801197c:	61fb      	str	r3, [r7, #28]
 801197e:	e011      	b.n	80119a4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011980:	683a      	ldr	r2, [r7, #0]
 8011982:	68b9      	ldr	r1, [r7, #8]
 8011984:	69b8      	ldr	r0, [r7, #24]
 8011986:	f000 fde3 	bl	8012550 <xQueueReceive>
 801198a:	4603      	mov	r3, r0
 801198c:	2b01      	cmp	r3, #1
 801198e:	d009      	beq.n	80119a4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d003      	beq.n	801199e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8011996:	f06f 0301 	mvn.w	r3, #1
 801199a:	61fb      	str	r3, [r7, #28]
 801199c:	e002      	b.n	80119a4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801199e:	f06f 0302 	mvn.w	r3, #2
 80119a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80119a4:	69fb      	ldr	r3, [r7, #28]
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3720      	adds	r7, #32
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}
 80119ae:	bf00      	nop
 80119b0:	e000ed04 	.word	0xe000ed04

080119b4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b086      	sub	sp, #24
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d102      	bne.n	80119cc <osMessageQueueGetCount+0x18>
    count = 0U;
 80119c6:	2300      	movs	r3, #0
 80119c8:	617b      	str	r3, [r7, #20]
 80119ca:	e00e      	b.n	80119ea <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80119cc:	f3ef 8305 	mrs	r3, IPSR
 80119d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80119d2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d004      	beq.n	80119e2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80119d8:	6938      	ldr	r0, [r7, #16]
 80119da:	f000 ff37 	bl	801284c <uxQueueMessagesWaitingFromISR>
 80119de:	6178      	str	r0, [r7, #20]
 80119e0:	e003      	b.n	80119ea <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80119e2:	6938      	ldr	r0, [r7, #16]
 80119e4:	f000 ff14 	bl	8012810 <uxQueueMessagesWaiting>
 80119e8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80119ea:	697b      	ldr	r3, [r7, #20]
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3718      	adds	r7, #24
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80119f4:	b480      	push	{r7}
 80119f6:	b085      	sub	sp, #20
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	60f8      	str	r0, [r7, #12]
 80119fc:	60b9      	str	r1, [r7, #8]
 80119fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	4a07      	ldr	r2, [pc, #28]	; (8011a20 <vApplicationGetIdleTaskMemory+0x2c>)
 8011a04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	4a06      	ldr	r2, [pc, #24]	; (8011a24 <vApplicationGetIdleTaskMemory+0x30>)
 8011a0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2280      	movs	r2, #128	; 0x80
 8011a10:	601a      	str	r2, [r3, #0]
}
 8011a12:	bf00      	nop
 8011a14:	3714      	adds	r7, #20
 8011a16:	46bd      	mov	sp, r7
 8011a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1c:	4770      	bx	lr
 8011a1e:	bf00      	nop
 8011a20:	24000760 	.word	0x24000760
 8011a24:	240007bc 	.word	0x240007bc

08011a28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011a28:	b480      	push	{r7}
 8011a2a:	b085      	sub	sp, #20
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	60f8      	str	r0, [r7, #12]
 8011a30:	60b9      	str	r1, [r7, #8]
 8011a32:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	4a07      	ldr	r2, [pc, #28]	; (8011a54 <vApplicationGetTimerTaskMemory+0x2c>)
 8011a38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	4a06      	ldr	r2, [pc, #24]	; (8011a58 <vApplicationGetTimerTaskMemory+0x30>)
 8011a3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011a46:	601a      	str	r2, [r3, #0]
}
 8011a48:	bf00      	nop
 8011a4a:	3714      	adds	r7, #20
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a52:	4770      	bx	lr
 8011a54:	240009bc 	.word	0x240009bc
 8011a58:	24000a18 	.word	0x24000a18

08011a5c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b086      	sub	sp, #24
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d10a      	bne.n	8011a80 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a6e:	f383 8811 	msr	BASEPRI, r3
 8011a72:	f3bf 8f6f 	isb	sy
 8011a76:	f3bf 8f4f 	dsb	sy
 8011a7a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011a7c:	bf00      	nop
 8011a7e:	e7fe      	b.n	8011a7e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8011a80:	2320      	movs	r3, #32
 8011a82:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	2b20      	cmp	r3, #32
 8011a88:	d00a      	beq.n	8011aa0 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8011a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8e:	f383 8811 	msr	BASEPRI, r3
 8011a92:	f3bf 8f6f 	isb	sy
 8011a96:	f3bf 8f4f 	dsb	sy
 8011a9a:	60fb      	str	r3, [r7, #12]
}
 8011a9c:	bf00      	nop
 8011a9e:	e7fe      	b.n	8011a9e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d00a      	beq.n	8011ac0 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	2200      	movs	r2, #0
 8011aae:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	3304      	adds	r3, #4
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f000 f9bf 	bl	8011e38 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	2201      	movs	r2, #1
 8011abe:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8011ac0:	697b      	ldr	r3, [r7, #20]
	}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	3718      	adds	r7, #24
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}

08011aca <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8011aca:	b580      	push	{r7, lr}
 8011acc:	b082      	sub	sp, #8
 8011ace:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8011ad0:	2020      	movs	r0, #32
 8011ad2:	f002 fdb9 	bl	8014648 <pvPortMalloc>
 8011ad6:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d00a      	beq.n	8011af4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	3304      	adds	r3, #4
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f000 f9a5 	bl	8011e38 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2200      	movs	r2, #0
 8011af2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8011af4:	687b      	ldr	r3, [r7, #4]
	}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3708      	adds	r7, #8
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}
	...

08011b00 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b090      	sub	sp, #64	; 0x40
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	60f8      	str	r0, [r7, #12]
 8011b08:	60b9      	str	r1, [r7, #8]
 8011b0a:	607a      	str	r2, [r7, #4]
 8011b0c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8011b12:	2300      	movs	r3, #0
 8011b14:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8011b16:	2300      	movs	r3, #0
 8011b18:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d10a      	bne.n	8011b36 <xEventGroupWaitBits+0x36>
	__asm volatile
 8011b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b24:	f383 8811 	msr	BASEPRI, r3
 8011b28:	f3bf 8f6f 	isb	sy
 8011b2c:	f3bf 8f4f 	dsb	sy
 8011b30:	623b      	str	r3, [r7, #32]
}
 8011b32:	bf00      	nop
 8011b34:	e7fe      	b.n	8011b34 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d00a      	beq.n	8011b56 <xEventGroupWaitBits+0x56>
	__asm volatile
 8011b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b44:	f383 8811 	msr	BASEPRI, r3
 8011b48:	f3bf 8f6f 	isb	sy
 8011b4c:	f3bf 8f4f 	dsb	sy
 8011b50:	61fb      	str	r3, [r7, #28]
}
 8011b52:	bf00      	nop
 8011b54:	e7fe      	b.n	8011b54 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d10a      	bne.n	8011b72 <xEventGroupWaitBits+0x72>
	__asm volatile
 8011b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b60:	f383 8811 	msr	BASEPRI, r3
 8011b64:	f3bf 8f6f 	isb	sy
 8011b68:	f3bf 8f4f 	dsb	sy
 8011b6c:	61bb      	str	r3, [r7, #24]
}
 8011b6e:	bf00      	nop
 8011b70:	e7fe      	b.n	8011b70 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b72:	f001 feb3 	bl	80138dc <xTaskGetSchedulerState>
 8011b76:	4603      	mov	r3, r0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d102      	bne.n	8011b82 <xEventGroupWaitBits+0x82>
 8011b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d101      	bne.n	8011b86 <xEventGroupWaitBits+0x86>
 8011b82:	2301      	movs	r3, #1
 8011b84:	e000      	b.n	8011b88 <xEventGroupWaitBits+0x88>
 8011b86:	2300      	movs	r3, #0
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d10a      	bne.n	8011ba2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8011b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b90:	f383 8811 	msr	BASEPRI, r3
 8011b94:	f3bf 8f6f 	isb	sy
 8011b98:	f3bf 8f4f 	dsb	sy
 8011b9c:	617b      	str	r3, [r7, #20]
}
 8011b9e:	bf00      	nop
 8011ba0:	e7fe      	b.n	8011ba0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8011ba2:	f001 fa1b 	bl	8012fdc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8011ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8011bac:	683a      	ldr	r2, [r7, #0]
 8011bae:	68b9      	ldr	r1, [r7, #8]
 8011bb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bb2:	f000 f90b 	bl	8011dcc <prvTestWaitCondition>
 8011bb6:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8011bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d00e      	beq.n	8011bdc <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8011bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d028      	beq.n	8011c1e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bce:	681a      	ldr	r2, [r3, #0]
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	43db      	mvns	r3, r3
 8011bd4:	401a      	ands	r2, r3
 8011bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bd8:	601a      	str	r2, [r3, #0]
 8011bda:	e020      	b.n	8011c1e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8011bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d104      	bne.n	8011bec <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8011be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8011be6:	2301      	movs	r3, #1
 8011be8:	633b      	str	r3, [r7, #48]	; 0x30
 8011bea:	e018      	b.n	8011c1e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d003      	beq.n	8011bfa <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8011bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011bf8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d003      	beq.n	8011c08 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8011c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011c06:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8011c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c0a:	1d18      	adds	r0, r3, #4
 8011c0c:	68ba      	ldr	r2, [r7, #8]
 8011c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c10:	4313      	orrs	r3, r2
 8011c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c14:	4619      	mov	r1, r3
 8011c16:	f001 fbd9 	bl	80133cc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8011c1e:	f001 f9eb 	bl	8012ff8 <xTaskResumeAll>
 8011c22:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8011c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d031      	beq.n	8011c8e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8011c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d107      	bne.n	8011c40 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8011c30:	4b19      	ldr	r3, [pc, #100]	; (8011c98 <xEventGroupWaitBits+0x198>)
 8011c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c36:	601a      	str	r2, [r3, #0]
 8011c38:	f3bf 8f4f 	dsb	sy
 8011c3c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8011c40:	f001 fed8 	bl	80139f4 <uxTaskResetEventItemValue>
 8011c44:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8011c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d11a      	bne.n	8011c86 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8011c50:	f002 fbd8 	bl	8014404 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8011c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8011c5a:	683a      	ldr	r2, [r7, #0]
 8011c5c:	68b9      	ldr	r1, [r7, #8]
 8011c5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011c60:	f000 f8b4 	bl	8011dcc <prvTestWaitCondition>
 8011c64:	4603      	mov	r3, r0
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d009      	beq.n	8011c7e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d006      	beq.n	8011c7e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8011c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c72:	681a      	ldr	r2, [r3, #0]
 8011c74:	68bb      	ldr	r3, [r7, #8]
 8011c76:	43db      	mvns	r3, r3
 8011c78:	401a      	ands	r2, r3
 8011c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c7c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8011c7e:	2301      	movs	r3, #1
 8011c80:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8011c82:	f002 fbef 	bl	8014464 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8011c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	3740      	adds	r7, #64	; 0x40
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	e000ed04 	.word	0xe000ed04

08011c9c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b08e      	sub	sp, #56	; 0x38
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
 8011ca4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8011cae:	2300      	movs	r3, #0
 8011cb0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d10a      	bne.n	8011cce <xEventGroupSetBits+0x32>
	__asm volatile
 8011cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cbc:	f383 8811 	msr	BASEPRI, r3
 8011cc0:	f3bf 8f6f 	isb	sy
 8011cc4:	f3bf 8f4f 	dsb	sy
 8011cc8:	613b      	str	r3, [r7, #16]
}
 8011cca:	bf00      	nop
 8011ccc:	e7fe      	b.n	8011ccc <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d00a      	beq.n	8011cee <xEventGroupSetBits+0x52>
	__asm volatile
 8011cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cdc:	f383 8811 	msr	BASEPRI, r3
 8011ce0:	f3bf 8f6f 	isb	sy
 8011ce4:	f3bf 8f4f 	dsb	sy
 8011ce8:	60fb      	str	r3, [r7, #12]
}
 8011cea:	bf00      	nop
 8011cec:	e7fe      	b.n	8011cec <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8011cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf0:	3304      	adds	r3, #4
 8011cf2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf6:	3308      	adds	r3, #8
 8011cf8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8011cfa:	f001 f96f 	bl	8012fdc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8011cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8011d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d06:	681a      	ldr	r2, [r3, #0]
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	431a      	orrs	r2, r3
 8011d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d0e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8011d10:	e03c      	b.n	8011d8c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8011d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d14:	685b      	ldr	r3, [r3, #4]
 8011d16:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8011d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8011d22:	69bb      	ldr	r3, [r7, #24]
 8011d24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011d28:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011d30:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8011d32:	697b      	ldr	r3, [r7, #20]
 8011d34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d108      	bne.n	8011d4e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8011d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d3e:	681a      	ldr	r2, [r3, #0]
 8011d40:	69bb      	ldr	r3, [r7, #24]
 8011d42:	4013      	ands	r3, r2
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d00b      	beq.n	8011d60 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8011d48:	2301      	movs	r3, #1
 8011d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d4c:	e008      	b.n	8011d60 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8011d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	69bb      	ldr	r3, [r7, #24]
 8011d54:	4013      	ands	r3, r2
 8011d56:	69ba      	ldr	r2, [r7, #24]
 8011d58:	429a      	cmp	r2, r3
 8011d5a:	d101      	bne.n	8011d60 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8011d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d010      	beq.n	8011d88 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d003      	beq.n	8011d78 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8011d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d72:	69bb      	ldr	r3, [r7, #24]
 8011d74:	4313      	orrs	r3, r2
 8011d76:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8011d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011d80:	4619      	mov	r1, r3
 8011d82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011d84:	f001 fbee 	bl	8013564 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8011d88:	69fb      	ldr	r3, [r7, #28]
 8011d8a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8011d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d8e:	6a3b      	ldr	r3, [r7, #32]
 8011d90:	429a      	cmp	r2, r3
 8011d92:	d1be      	bne.n	8011d12 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8011d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d9a:	43db      	mvns	r3, r3
 8011d9c:	401a      	ands	r2, r3
 8011d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8011da2:	f001 f929 	bl	8012ff8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8011da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da8:	681b      	ldr	r3, [r3, #0]
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3738      	adds	r7, #56	; 0x38
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}

08011db2 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8011db2:	b580      	push	{r7, lr}
 8011db4:	b082      	sub	sp, #8
 8011db6:	af00      	add	r7, sp, #0
 8011db8:	6078      	str	r0, [r7, #4]
 8011dba:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8011dbc:	6839      	ldr	r1, [r7, #0]
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f7ff ff6c 	bl	8011c9c <xEventGroupSetBits>
}
 8011dc4:	bf00      	nop
 8011dc6:	3708      	adds	r7, #8
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}

08011dcc <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b087      	sub	sp, #28
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	60f8      	str	r0, [r7, #12]
 8011dd4:	60b9      	str	r1, [r7, #8]
 8011dd6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d107      	bne.n	8011df2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8011de2:	68fa      	ldr	r2, [r7, #12]
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	4013      	ands	r3, r2
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d00a      	beq.n	8011e02 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011dec:	2301      	movs	r3, #1
 8011dee:	617b      	str	r3, [r7, #20]
 8011df0:	e007      	b.n	8011e02 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8011df2:	68fa      	ldr	r2, [r7, #12]
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	4013      	ands	r3, r2
 8011df8:	68ba      	ldr	r2, [r7, #8]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d101      	bne.n	8011e02 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011dfe:	2301      	movs	r3, #1
 8011e00:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8011e02:	697b      	ldr	r3, [r7, #20]
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	371c      	adds	r7, #28
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0e:	4770      	bx	lr

08011e10 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b086      	sub	sp, #24
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	60f8      	str	r0, [r7, #12]
 8011e18:	60b9      	str	r1, [r7, #8]
 8011e1a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	68ba      	ldr	r2, [r7, #8]
 8011e20:	68f9      	ldr	r1, [r7, #12]
 8011e22:	4804      	ldr	r0, [pc, #16]	; (8011e34 <xEventGroupSetBitsFromISR+0x24>)
 8011e24:	f002 f9a0 	bl	8014168 <xTimerPendFunctionCallFromISR>
 8011e28:	6178      	str	r0, [r7, #20]

		return xReturn;
 8011e2a:	697b      	ldr	r3, [r7, #20]
	}
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	3718      	adds	r7, #24
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bd80      	pop	{r7, pc}
 8011e34:	08011db3 	.word	0x08011db3

08011e38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011e38:	b480      	push	{r7}
 8011e3a:	b083      	sub	sp, #12
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f103 0208 	add.w	r2, r3, #8
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	f103 0208 	add.w	r2, r3, #8
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f103 0208 	add.w	r2, r3, #8
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2200      	movs	r2, #0
 8011e6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011e6c:	bf00      	nop
 8011e6e:	370c      	adds	r7, #12
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr

08011e78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011e78:	b480      	push	{r7}
 8011e7a:	b083      	sub	sp, #12
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2200      	movs	r2, #0
 8011e84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011e86:	bf00      	nop
 8011e88:	370c      	adds	r7, #12
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e90:	4770      	bx	lr

08011e92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011e92:	b480      	push	{r7}
 8011e94:	b085      	sub	sp, #20
 8011e96:	af00      	add	r7, sp, #0
 8011e98:	6078      	str	r0, [r7, #4]
 8011e9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	685b      	ldr	r3, [r3, #4]
 8011ea0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	68fa      	ldr	r2, [r7, #12]
 8011ea6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	689a      	ldr	r2, [r3, #8]
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	689b      	ldr	r3, [r3, #8]
 8011eb4:	683a      	ldr	r2, [r7, #0]
 8011eb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	683a      	ldr	r2, [r7, #0]
 8011ebc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	687a      	ldr	r2, [r7, #4]
 8011ec2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	1c5a      	adds	r2, r3, #1
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	601a      	str	r2, [r3, #0]
}
 8011ece:	bf00      	nop
 8011ed0:	3714      	adds	r7, #20
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed8:	4770      	bx	lr

08011eda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011eda:	b480      	push	{r7}
 8011edc:	b085      	sub	sp, #20
 8011ede:	af00      	add	r7, sp, #0
 8011ee0:	6078      	str	r0, [r7, #4]
 8011ee2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ef0:	d103      	bne.n	8011efa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	691b      	ldr	r3, [r3, #16]
 8011ef6:	60fb      	str	r3, [r7, #12]
 8011ef8:	e00c      	b.n	8011f14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	3308      	adds	r3, #8
 8011efe:	60fb      	str	r3, [r7, #12]
 8011f00:	e002      	b.n	8011f08 <vListInsert+0x2e>
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	685b      	ldr	r3, [r3, #4]
 8011f06:	60fb      	str	r3, [r7, #12]
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	685b      	ldr	r3, [r3, #4]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	68ba      	ldr	r2, [r7, #8]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d2f6      	bcs.n	8011f02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	685a      	ldr	r2, [r3, #4]
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	685b      	ldr	r3, [r3, #4]
 8011f20:	683a      	ldr	r2, [r7, #0]
 8011f22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	68fa      	ldr	r2, [r7, #12]
 8011f28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	683a      	ldr	r2, [r7, #0]
 8011f2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	687a      	ldr	r2, [r7, #4]
 8011f34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	1c5a      	adds	r2, r3, #1
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	601a      	str	r2, [r3, #0]
}
 8011f40:	bf00      	nop
 8011f42:	3714      	adds	r7, #20
 8011f44:	46bd      	mov	sp, r7
 8011f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4a:	4770      	bx	lr

08011f4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	b085      	sub	sp, #20
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	691b      	ldr	r3, [r3, #16]
 8011f58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	687a      	ldr	r2, [r7, #4]
 8011f60:	6892      	ldr	r2, [r2, #8]
 8011f62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	689b      	ldr	r3, [r3, #8]
 8011f68:	687a      	ldr	r2, [r7, #4]
 8011f6a:	6852      	ldr	r2, [r2, #4]
 8011f6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	687a      	ldr	r2, [r7, #4]
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d103      	bne.n	8011f80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	689a      	ldr	r2, [r3, #8]
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2200      	movs	r2, #0
 8011f84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	1e5a      	subs	r2, r3, #1
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	681b      	ldr	r3, [r3, #0]
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	3714      	adds	r7, #20
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9e:	4770      	bx	lr

08011fa0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b084      	sub	sp, #16
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d10a      	bne.n	8011fca <xQueueGenericReset+0x2a>
	__asm volatile
 8011fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb8:	f383 8811 	msr	BASEPRI, r3
 8011fbc:	f3bf 8f6f 	isb	sy
 8011fc0:	f3bf 8f4f 	dsb	sy
 8011fc4:	60bb      	str	r3, [r7, #8]
}
 8011fc6:	bf00      	nop
 8011fc8:	e7fe      	b.n	8011fc8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011fca:	f002 fa1b 	bl	8014404 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	681a      	ldr	r2, [r3, #0]
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fd6:	68f9      	ldr	r1, [r7, #12]
 8011fd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011fda:	fb01 f303 	mul.w	r3, r1, r3
 8011fde:	441a      	add	r2, r3
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	681a      	ldr	r2, [r3, #0]
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	681a      	ldr	r2, [r3, #0]
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ffa:	3b01      	subs	r3, #1
 8011ffc:	68f9      	ldr	r1, [r7, #12]
 8011ffe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012000:	fb01 f303 	mul.w	r3, r1, r3
 8012004:	441a      	add	r2, r3
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	22ff      	movs	r2, #255	; 0xff
 801200e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	22ff      	movs	r2, #255	; 0xff
 8012016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d114      	bne.n	801204a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	691b      	ldr	r3, [r3, #16]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d01a      	beq.n	801205e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	3310      	adds	r3, #16
 801202c:	4618      	mov	r0, r3
 801202e:	f001 fa35 	bl	801349c <xTaskRemoveFromEventList>
 8012032:	4603      	mov	r3, r0
 8012034:	2b00      	cmp	r3, #0
 8012036:	d012      	beq.n	801205e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012038:	4b0c      	ldr	r3, [pc, #48]	; (801206c <xQueueGenericReset+0xcc>)
 801203a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801203e:	601a      	str	r2, [r3, #0]
 8012040:	f3bf 8f4f 	dsb	sy
 8012044:	f3bf 8f6f 	isb	sy
 8012048:	e009      	b.n	801205e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	3310      	adds	r3, #16
 801204e:	4618      	mov	r0, r3
 8012050:	f7ff fef2 	bl	8011e38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	3324      	adds	r3, #36	; 0x24
 8012058:	4618      	mov	r0, r3
 801205a:	f7ff feed 	bl	8011e38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801205e:	f002 fa01 	bl	8014464 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012062:	2301      	movs	r3, #1
}
 8012064:	4618      	mov	r0, r3
 8012066:	3710      	adds	r7, #16
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}
 801206c:	e000ed04 	.word	0xe000ed04

08012070 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012070:	b580      	push	{r7, lr}
 8012072:	b08e      	sub	sp, #56	; 0x38
 8012074:	af02      	add	r7, sp, #8
 8012076:	60f8      	str	r0, [r7, #12]
 8012078:	60b9      	str	r1, [r7, #8]
 801207a:	607a      	str	r2, [r7, #4]
 801207c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d10a      	bne.n	801209a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012088:	f383 8811 	msr	BASEPRI, r3
 801208c:	f3bf 8f6f 	isb	sy
 8012090:	f3bf 8f4f 	dsb	sy
 8012094:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012096:	bf00      	nop
 8012098:	e7fe      	b.n	8012098 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d10a      	bne.n	80120b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80120a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a4:	f383 8811 	msr	BASEPRI, r3
 80120a8:	f3bf 8f6f 	isb	sy
 80120ac:	f3bf 8f4f 	dsb	sy
 80120b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80120b2:	bf00      	nop
 80120b4:	e7fe      	b.n	80120b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d002      	beq.n	80120c2 <xQueueGenericCreateStatic+0x52>
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d001      	beq.n	80120c6 <xQueueGenericCreateStatic+0x56>
 80120c2:	2301      	movs	r3, #1
 80120c4:	e000      	b.n	80120c8 <xQueueGenericCreateStatic+0x58>
 80120c6:	2300      	movs	r3, #0
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d10a      	bne.n	80120e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80120cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d0:	f383 8811 	msr	BASEPRI, r3
 80120d4:	f3bf 8f6f 	isb	sy
 80120d8:	f3bf 8f4f 	dsb	sy
 80120dc:	623b      	str	r3, [r7, #32]
}
 80120de:	bf00      	nop
 80120e0:	e7fe      	b.n	80120e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d102      	bne.n	80120ee <xQueueGenericCreateStatic+0x7e>
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d101      	bne.n	80120f2 <xQueueGenericCreateStatic+0x82>
 80120ee:	2301      	movs	r3, #1
 80120f0:	e000      	b.n	80120f4 <xQueueGenericCreateStatic+0x84>
 80120f2:	2300      	movs	r3, #0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d10a      	bne.n	801210e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80120f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120fc:	f383 8811 	msr	BASEPRI, r3
 8012100:	f3bf 8f6f 	isb	sy
 8012104:	f3bf 8f4f 	dsb	sy
 8012108:	61fb      	str	r3, [r7, #28]
}
 801210a:	bf00      	nop
 801210c:	e7fe      	b.n	801210c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801210e:	2350      	movs	r3, #80	; 0x50
 8012110:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	2b50      	cmp	r3, #80	; 0x50
 8012116:	d00a      	beq.n	801212e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801211c:	f383 8811 	msr	BASEPRI, r3
 8012120:	f3bf 8f6f 	isb	sy
 8012124:	f3bf 8f4f 	dsb	sy
 8012128:	61bb      	str	r3, [r7, #24]
}
 801212a:	bf00      	nop
 801212c:	e7fe      	b.n	801212c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801212e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012130:	683b      	ldr	r3, [r7, #0]
 8012132:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012136:	2b00      	cmp	r3, #0
 8012138:	d00d      	beq.n	8012156 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801213c:	2201      	movs	r2, #1
 801213e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012142:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012148:	9300      	str	r3, [sp, #0]
 801214a:	4613      	mov	r3, r2
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	68b9      	ldr	r1, [r7, #8]
 8012150:	68f8      	ldr	r0, [r7, #12]
 8012152:	f000 f83f 	bl	80121d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012158:	4618      	mov	r0, r3
 801215a:	3730      	adds	r7, #48	; 0x30
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012160:	b580      	push	{r7, lr}
 8012162:	b08a      	sub	sp, #40	; 0x28
 8012164:	af02      	add	r7, sp, #8
 8012166:	60f8      	str	r0, [r7, #12]
 8012168:	60b9      	str	r1, [r7, #8]
 801216a:	4613      	mov	r3, r2
 801216c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	2b00      	cmp	r3, #0
 8012172:	d10a      	bne.n	801218a <xQueueGenericCreate+0x2a>
	__asm volatile
 8012174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012178:	f383 8811 	msr	BASEPRI, r3
 801217c:	f3bf 8f6f 	isb	sy
 8012180:	f3bf 8f4f 	dsb	sy
 8012184:	613b      	str	r3, [r7, #16]
}
 8012186:	bf00      	nop
 8012188:	e7fe      	b.n	8012188 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	68ba      	ldr	r2, [r7, #8]
 801218e:	fb02 f303 	mul.w	r3, r2, r3
 8012192:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	3350      	adds	r3, #80	; 0x50
 8012198:	4618      	mov	r0, r3
 801219a:	f002 fa55 	bl	8014648 <pvPortMalloc>
 801219e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80121a0:	69bb      	ldr	r3, [r7, #24]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d011      	beq.n	80121ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80121a6:	69bb      	ldr	r3, [r7, #24]
 80121a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	3350      	adds	r3, #80	; 0x50
 80121ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80121b0:	69bb      	ldr	r3, [r7, #24]
 80121b2:	2200      	movs	r2, #0
 80121b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80121b8:	79fa      	ldrb	r2, [r7, #7]
 80121ba:	69bb      	ldr	r3, [r7, #24]
 80121bc:	9300      	str	r3, [sp, #0]
 80121be:	4613      	mov	r3, r2
 80121c0:	697a      	ldr	r2, [r7, #20]
 80121c2:	68b9      	ldr	r1, [r7, #8]
 80121c4:	68f8      	ldr	r0, [r7, #12]
 80121c6:	f000 f805 	bl	80121d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80121ca:	69bb      	ldr	r3, [r7, #24]
	}
 80121cc:	4618      	mov	r0, r3
 80121ce:	3720      	adds	r7, #32
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd80      	pop	{r7, pc}

080121d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b084      	sub	sp, #16
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
 80121e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d103      	bne.n	80121f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80121e8:	69bb      	ldr	r3, [r7, #24]
 80121ea:	69ba      	ldr	r2, [r7, #24]
 80121ec:	601a      	str	r2, [r3, #0]
 80121ee:	e002      	b.n	80121f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80121f0:	69bb      	ldr	r3, [r7, #24]
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80121f6:	69bb      	ldr	r3, [r7, #24]
 80121f8:	68fa      	ldr	r2, [r7, #12]
 80121fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80121fc:	69bb      	ldr	r3, [r7, #24]
 80121fe:	68ba      	ldr	r2, [r7, #8]
 8012200:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012202:	2101      	movs	r1, #1
 8012204:	69b8      	ldr	r0, [r7, #24]
 8012206:	f7ff fecb 	bl	8011fa0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801220a:	69bb      	ldr	r3, [r7, #24]
 801220c:	78fa      	ldrb	r2, [r7, #3]
 801220e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012212:	bf00      	nop
 8012214:	3710      	adds	r7, #16
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}
	...

0801221c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b08e      	sub	sp, #56	; 0x38
 8012220:	af00      	add	r7, sp, #0
 8012222:	60f8      	str	r0, [r7, #12]
 8012224:	60b9      	str	r1, [r7, #8]
 8012226:	607a      	str	r2, [r7, #4]
 8012228:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801222a:	2300      	movs	r3, #0
 801222c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012234:	2b00      	cmp	r3, #0
 8012236:	d10a      	bne.n	801224e <xQueueGenericSend+0x32>
	__asm volatile
 8012238:	f04f 0350 	mov.w	r3, #80	; 0x50
 801223c:	f383 8811 	msr	BASEPRI, r3
 8012240:	f3bf 8f6f 	isb	sy
 8012244:	f3bf 8f4f 	dsb	sy
 8012248:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801224a:	bf00      	nop
 801224c:	e7fe      	b.n	801224c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d103      	bne.n	801225c <xQueueGenericSend+0x40>
 8012254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012258:	2b00      	cmp	r3, #0
 801225a:	d101      	bne.n	8012260 <xQueueGenericSend+0x44>
 801225c:	2301      	movs	r3, #1
 801225e:	e000      	b.n	8012262 <xQueueGenericSend+0x46>
 8012260:	2300      	movs	r3, #0
 8012262:	2b00      	cmp	r3, #0
 8012264:	d10a      	bne.n	801227c <xQueueGenericSend+0x60>
	__asm volatile
 8012266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801226a:	f383 8811 	msr	BASEPRI, r3
 801226e:	f3bf 8f6f 	isb	sy
 8012272:	f3bf 8f4f 	dsb	sy
 8012276:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012278:	bf00      	nop
 801227a:	e7fe      	b.n	801227a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801227c:	683b      	ldr	r3, [r7, #0]
 801227e:	2b02      	cmp	r3, #2
 8012280:	d103      	bne.n	801228a <xQueueGenericSend+0x6e>
 8012282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012286:	2b01      	cmp	r3, #1
 8012288:	d101      	bne.n	801228e <xQueueGenericSend+0x72>
 801228a:	2301      	movs	r3, #1
 801228c:	e000      	b.n	8012290 <xQueueGenericSend+0x74>
 801228e:	2300      	movs	r3, #0
 8012290:	2b00      	cmp	r3, #0
 8012292:	d10a      	bne.n	80122aa <xQueueGenericSend+0x8e>
	__asm volatile
 8012294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012298:	f383 8811 	msr	BASEPRI, r3
 801229c:	f3bf 8f6f 	isb	sy
 80122a0:	f3bf 8f4f 	dsb	sy
 80122a4:	623b      	str	r3, [r7, #32]
}
 80122a6:	bf00      	nop
 80122a8:	e7fe      	b.n	80122a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80122aa:	f001 fb17 	bl	80138dc <xTaskGetSchedulerState>
 80122ae:	4603      	mov	r3, r0
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d102      	bne.n	80122ba <xQueueGenericSend+0x9e>
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d101      	bne.n	80122be <xQueueGenericSend+0xa2>
 80122ba:	2301      	movs	r3, #1
 80122bc:	e000      	b.n	80122c0 <xQueueGenericSend+0xa4>
 80122be:	2300      	movs	r3, #0
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d10a      	bne.n	80122da <xQueueGenericSend+0xbe>
	__asm volatile
 80122c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122c8:	f383 8811 	msr	BASEPRI, r3
 80122cc:	f3bf 8f6f 	isb	sy
 80122d0:	f3bf 8f4f 	dsb	sy
 80122d4:	61fb      	str	r3, [r7, #28]
}
 80122d6:	bf00      	nop
 80122d8:	e7fe      	b.n	80122d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80122da:	f002 f893 	bl	8014404 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80122de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80122e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d302      	bcc.n	80122f0 <xQueueGenericSend+0xd4>
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	2b02      	cmp	r3, #2
 80122ee:	d129      	bne.n	8012344 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80122f0:	683a      	ldr	r2, [r7, #0]
 80122f2:	68b9      	ldr	r1, [r7, #8]
 80122f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122f6:	f000 fac7 	bl	8012888 <prvCopyDataToQueue>
 80122fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80122fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012300:	2b00      	cmp	r3, #0
 8012302:	d010      	beq.n	8012326 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012306:	3324      	adds	r3, #36	; 0x24
 8012308:	4618      	mov	r0, r3
 801230a:	f001 f8c7 	bl	801349c <xTaskRemoveFromEventList>
 801230e:	4603      	mov	r3, r0
 8012310:	2b00      	cmp	r3, #0
 8012312:	d013      	beq.n	801233c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012314:	4b3f      	ldr	r3, [pc, #252]	; (8012414 <xQueueGenericSend+0x1f8>)
 8012316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801231a:	601a      	str	r2, [r3, #0]
 801231c:	f3bf 8f4f 	dsb	sy
 8012320:	f3bf 8f6f 	isb	sy
 8012324:	e00a      	b.n	801233c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012328:	2b00      	cmp	r3, #0
 801232a:	d007      	beq.n	801233c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801232c:	4b39      	ldr	r3, [pc, #228]	; (8012414 <xQueueGenericSend+0x1f8>)
 801232e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012332:	601a      	str	r2, [r3, #0]
 8012334:	f3bf 8f4f 	dsb	sy
 8012338:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801233c:	f002 f892 	bl	8014464 <vPortExitCritical>
				return pdPASS;
 8012340:	2301      	movs	r3, #1
 8012342:	e063      	b.n	801240c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d103      	bne.n	8012352 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801234a:	f002 f88b 	bl	8014464 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801234e:	2300      	movs	r3, #0
 8012350:	e05c      	b.n	801240c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012354:	2b00      	cmp	r3, #0
 8012356:	d106      	bne.n	8012366 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012358:	f107 0314 	add.w	r3, r7, #20
 801235c:	4618      	mov	r0, r3
 801235e:	f001 f963 	bl	8013628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012362:	2301      	movs	r3, #1
 8012364:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012366:	f002 f87d 	bl	8014464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801236a:	f000 fe37 	bl	8012fdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801236e:	f002 f849 	bl	8014404 <vPortEnterCritical>
 8012372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012378:	b25b      	sxtb	r3, r3
 801237a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801237e:	d103      	bne.n	8012388 <xQueueGenericSend+0x16c>
 8012380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012382:	2200      	movs	r2, #0
 8012384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801238e:	b25b      	sxtb	r3, r3
 8012390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012394:	d103      	bne.n	801239e <xQueueGenericSend+0x182>
 8012396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012398:	2200      	movs	r2, #0
 801239a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801239e:	f002 f861 	bl	8014464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80123a2:	1d3a      	adds	r2, r7, #4
 80123a4:	f107 0314 	add.w	r3, r7, #20
 80123a8:	4611      	mov	r1, r2
 80123aa:	4618      	mov	r0, r3
 80123ac:	f001 f952 	bl	8013654 <xTaskCheckForTimeOut>
 80123b0:	4603      	mov	r3, r0
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d124      	bne.n	8012400 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80123b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123b8:	f000 fb5e 	bl	8012a78 <prvIsQueueFull>
 80123bc:	4603      	mov	r3, r0
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d018      	beq.n	80123f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80123c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c4:	3310      	adds	r3, #16
 80123c6:	687a      	ldr	r2, [r7, #4]
 80123c8:	4611      	mov	r1, r2
 80123ca:	4618      	mov	r0, r3
 80123cc:	f000 ffda 	bl	8013384 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80123d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123d2:	f000 fae9 	bl	80129a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80123d6:	f000 fe0f 	bl	8012ff8 <xTaskResumeAll>
 80123da:	4603      	mov	r3, r0
 80123dc:	2b00      	cmp	r3, #0
 80123de:	f47f af7c 	bne.w	80122da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80123e2:	4b0c      	ldr	r3, [pc, #48]	; (8012414 <xQueueGenericSend+0x1f8>)
 80123e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123e8:	601a      	str	r2, [r3, #0]
 80123ea:	f3bf 8f4f 	dsb	sy
 80123ee:	f3bf 8f6f 	isb	sy
 80123f2:	e772      	b.n	80122da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80123f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123f6:	f000 fad7 	bl	80129a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80123fa:	f000 fdfd 	bl	8012ff8 <xTaskResumeAll>
 80123fe:	e76c      	b.n	80122da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012402:	f000 fad1 	bl	80129a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012406:	f000 fdf7 	bl	8012ff8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801240a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801240c:	4618      	mov	r0, r3
 801240e:	3738      	adds	r7, #56	; 0x38
 8012410:	46bd      	mov	sp, r7
 8012412:	bd80      	pop	{r7, pc}
 8012414:	e000ed04 	.word	0xe000ed04

08012418 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b090      	sub	sp, #64	; 0x40
 801241c:	af00      	add	r7, sp, #0
 801241e:	60f8      	str	r0, [r7, #12]
 8012420:	60b9      	str	r1, [r7, #8]
 8012422:	607a      	str	r2, [r7, #4]
 8012424:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801242c:	2b00      	cmp	r3, #0
 801242e:	d10a      	bne.n	8012446 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012434:	f383 8811 	msr	BASEPRI, r3
 8012438:	f3bf 8f6f 	isb	sy
 801243c:	f3bf 8f4f 	dsb	sy
 8012440:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012442:	bf00      	nop
 8012444:	e7fe      	b.n	8012444 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d103      	bne.n	8012454 <xQueueGenericSendFromISR+0x3c>
 801244c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012450:	2b00      	cmp	r3, #0
 8012452:	d101      	bne.n	8012458 <xQueueGenericSendFromISR+0x40>
 8012454:	2301      	movs	r3, #1
 8012456:	e000      	b.n	801245a <xQueueGenericSendFromISR+0x42>
 8012458:	2300      	movs	r3, #0
 801245a:	2b00      	cmp	r3, #0
 801245c:	d10a      	bne.n	8012474 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012462:	f383 8811 	msr	BASEPRI, r3
 8012466:	f3bf 8f6f 	isb	sy
 801246a:	f3bf 8f4f 	dsb	sy
 801246e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012470:	bf00      	nop
 8012472:	e7fe      	b.n	8012472 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	2b02      	cmp	r3, #2
 8012478:	d103      	bne.n	8012482 <xQueueGenericSendFromISR+0x6a>
 801247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801247e:	2b01      	cmp	r3, #1
 8012480:	d101      	bne.n	8012486 <xQueueGenericSendFromISR+0x6e>
 8012482:	2301      	movs	r3, #1
 8012484:	e000      	b.n	8012488 <xQueueGenericSendFromISR+0x70>
 8012486:	2300      	movs	r3, #0
 8012488:	2b00      	cmp	r3, #0
 801248a:	d10a      	bne.n	80124a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012490:	f383 8811 	msr	BASEPRI, r3
 8012494:	f3bf 8f6f 	isb	sy
 8012498:	f3bf 8f4f 	dsb	sy
 801249c:	623b      	str	r3, [r7, #32]
}
 801249e:	bf00      	nop
 80124a0:	e7fe      	b.n	80124a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80124a2:	f002 f891 	bl	80145c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80124a6:	f3ef 8211 	mrs	r2, BASEPRI
 80124aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ae:	f383 8811 	msr	BASEPRI, r3
 80124b2:	f3bf 8f6f 	isb	sy
 80124b6:	f3bf 8f4f 	dsb	sy
 80124ba:	61fa      	str	r2, [r7, #28]
 80124bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80124be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80124c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80124c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124ca:	429a      	cmp	r2, r3
 80124cc:	d302      	bcc.n	80124d4 <xQueueGenericSendFromISR+0xbc>
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	2b02      	cmp	r3, #2
 80124d2:	d12f      	bne.n	8012534 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80124d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80124da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80124de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80124e4:	683a      	ldr	r2, [r7, #0]
 80124e6:	68b9      	ldr	r1, [r7, #8]
 80124e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80124ea:	f000 f9cd 	bl	8012888 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80124ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80124f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80124f6:	d112      	bne.n	801251e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80124f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d016      	beq.n	801252e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012502:	3324      	adds	r3, #36	; 0x24
 8012504:	4618      	mov	r0, r3
 8012506:	f000 ffc9 	bl	801349c <xTaskRemoveFromEventList>
 801250a:	4603      	mov	r3, r0
 801250c:	2b00      	cmp	r3, #0
 801250e:	d00e      	beq.n	801252e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d00b      	beq.n	801252e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	2201      	movs	r2, #1
 801251a:	601a      	str	r2, [r3, #0]
 801251c:	e007      	b.n	801252e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801251e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012522:	3301      	adds	r3, #1
 8012524:	b2db      	uxtb	r3, r3
 8012526:	b25a      	sxtb	r2, r3
 8012528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801252a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801252e:	2301      	movs	r3, #1
 8012530:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012532:	e001      	b.n	8012538 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012534:	2300      	movs	r3, #0
 8012536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801253a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012542:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012546:	4618      	mov	r0, r3
 8012548:	3740      	adds	r7, #64	; 0x40
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}
	...

08012550 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b08c      	sub	sp, #48	; 0x30
 8012554:	af00      	add	r7, sp, #0
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801255c:	2300      	movs	r3, #0
 801255e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012566:	2b00      	cmp	r3, #0
 8012568:	d10a      	bne.n	8012580 <xQueueReceive+0x30>
	__asm volatile
 801256a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801256e:	f383 8811 	msr	BASEPRI, r3
 8012572:	f3bf 8f6f 	isb	sy
 8012576:	f3bf 8f4f 	dsb	sy
 801257a:	623b      	str	r3, [r7, #32]
}
 801257c:	bf00      	nop
 801257e:	e7fe      	b.n	801257e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d103      	bne.n	801258e <xQueueReceive+0x3e>
 8012586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801258a:	2b00      	cmp	r3, #0
 801258c:	d101      	bne.n	8012592 <xQueueReceive+0x42>
 801258e:	2301      	movs	r3, #1
 8012590:	e000      	b.n	8012594 <xQueueReceive+0x44>
 8012592:	2300      	movs	r3, #0
 8012594:	2b00      	cmp	r3, #0
 8012596:	d10a      	bne.n	80125ae <xQueueReceive+0x5e>
	__asm volatile
 8012598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801259c:	f383 8811 	msr	BASEPRI, r3
 80125a0:	f3bf 8f6f 	isb	sy
 80125a4:	f3bf 8f4f 	dsb	sy
 80125a8:	61fb      	str	r3, [r7, #28]
}
 80125aa:	bf00      	nop
 80125ac:	e7fe      	b.n	80125ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80125ae:	f001 f995 	bl	80138dc <xTaskGetSchedulerState>
 80125b2:	4603      	mov	r3, r0
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d102      	bne.n	80125be <xQueueReceive+0x6e>
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d101      	bne.n	80125c2 <xQueueReceive+0x72>
 80125be:	2301      	movs	r3, #1
 80125c0:	e000      	b.n	80125c4 <xQueueReceive+0x74>
 80125c2:	2300      	movs	r3, #0
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d10a      	bne.n	80125de <xQueueReceive+0x8e>
	__asm volatile
 80125c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125cc:	f383 8811 	msr	BASEPRI, r3
 80125d0:	f3bf 8f6f 	isb	sy
 80125d4:	f3bf 8f4f 	dsb	sy
 80125d8:	61bb      	str	r3, [r7, #24]
}
 80125da:	bf00      	nop
 80125dc:	e7fe      	b.n	80125dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80125de:	f001 ff11 	bl	8014404 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80125e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80125e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d01f      	beq.n	801262e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80125ee:	68b9      	ldr	r1, [r7, #8]
 80125f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80125f2:	f000 f9b3 	bl	801295c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80125f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f8:	1e5a      	subs	r2, r3, #1
 80125fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80125fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012600:	691b      	ldr	r3, [r3, #16]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d00f      	beq.n	8012626 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012608:	3310      	adds	r3, #16
 801260a:	4618      	mov	r0, r3
 801260c:	f000 ff46 	bl	801349c <xTaskRemoveFromEventList>
 8012610:	4603      	mov	r3, r0
 8012612:	2b00      	cmp	r3, #0
 8012614:	d007      	beq.n	8012626 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012616:	4b3d      	ldr	r3, [pc, #244]	; (801270c <xQueueReceive+0x1bc>)
 8012618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801261c:	601a      	str	r2, [r3, #0]
 801261e:	f3bf 8f4f 	dsb	sy
 8012622:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012626:	f001 ff1d 	bl	8014464 <vPortExitCritical>
				return pdPASS;
 801262a:	2301      	movs	r3, #1
 801262c:	e069      	b.n	8012702 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d103      	bne.n	801263c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012634:	f001 ff16 	bl	8014464 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012638:	2300      	movs	r3, #0
 801263a:	e062      	b.n	8012702 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801263c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801263e:	2b00      	cmp	r3, #0
 8012640:	d106      	bne.n	8012650 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012642:	f107 0310 	add.w	r3, r7, #16
 8012646:	4618      	mov	r0, r3
 8012648:	f000 ffee 	bl	8013628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801264c:	2301      	movs	r3, #1
 801264e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012650:	f001 ff08 	bl	8014464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012654:	f000 fcc2 	bl	8012fdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012658:	f001 fed4 	bl	8014404 <vPortEnterCritical>
 801265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801265e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012662:	b25b      	sxtb	r3, r3
 8012664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012668:	d103      	bne.n	8012672 <xQueueReceive+0x122>
 801266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801266c:	2200      	movs	r2, #0
 801266e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012678:	b25b      	sxtb	r3, r3
 801267a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801267e:	d103      	bne.n	8012688 <xQueueReceive+0x138>
 8012680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012682:	2200      	movs	r2, #0
 8012684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012688:	f001 feec 	bl	8014464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801268c:	1d3a      	adds	r2, r7, #4
 801268e:	f107 0310 	add.w	r3, r7, #16
 8012692:	4611      	mov	r1, r2
 8012694:	4618      	mov	r0, r3
 8012696:	f000 ffdd 	bl	8013654 <xTaskCheckForTimeOut>
 801269a:	4603      	mov	r3, r0
 801269c:	2b00      	cmp	r3, #0
 801269e:	d123      	bne.n	80126e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80126a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126a2:	f000 f9d3 	bl	8012a4c <prvIsQueueEmpty>
 80126a6:	4603      	mov	r3, r0
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d017      	beq.n	80126dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80126ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ae:	3324      	adds	r3, #36	; 0x24
 80126b0:	687a      	ldr	r2, [r7, #4]
 80126b2:	4611      	mov	r1, r2
 80126b4:	4618      	mov	r0, r3
 80126b6:	f000 fe65 	bl	8013384 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80126ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126bc:	f000 f974 	bl	80129a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80126c0:	f000 fc9a 	bl	8012ff8 <xTaskResumeAll>
 80126c4:	4603      	mov	r3, r0
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d189      	bne.n	80125de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80126ca:	4b10      	ldr	r3, [pc, #64]	; (801270c <xQueueReceive+0x1bc>)
 80126cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126d0:	601a      	str	r2, [r3, #0]
 80126d2:	f3bf 8f4f 	dsb	sy
 80126d6:	f3bf 8f6f 	isb	sy
 80126da:	e780      	b.n	80125de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80126dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126de:	f000 f963 	bl	80129a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80126e2:	f000 fc89 	bl	8012ff8 <xTaskResumeAll>
 80126e6:	e77a      	b.n	80125de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80126e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126ea:	f000 f95d 	bl	80129a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80126ee:	f000 fc83 	bl	8012ff8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80126f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126f4:	f000 f9aa 	bl	8012a4c <prvIsQueueEmpty>
 80126f8:	4603      	mov	r3, r0
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	f43f af6f 	beq.w	80125de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012700:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012702:	4618      	mov	r0, r3
 8012704:	3730      	adds	r7, #48	; 0x30
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}
 801270a:	bf00      	nop
 801270c:	e000ed04 	.word	0xe000ed04

08012710 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b08e      	sub	sp, #56	; 0x38
 8012714:	af00      	add	r7, sp, #0
 8012716:	60f8      	str	r0, [r7, #12]
 8012718:	60b9      	str	r1, [r7, #8]
 801271a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012722:	2b00      	cmp	r3, #0
 8012724:	d10a      	bne.n	801273c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801272a:	f383 8811 	msr	BASEPRI, r3
 801272e:	f3bf 8f6f 	isb	sy
 8012732:	f3bf 8f4f 	dsb	sy
 8012736:	623b      	str	r3, [r7, #32]
}
 8012738:	bf00      	nop
 801273a:	e7fe      	b.n	801273a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801273c:	68bb      	ldr	r3, [r7, #8]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d103      	bne.n	801274a <xQueueReceiveFromISR+0x3a>
 8012742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012746:	2b00      	cmp	r3, #0
 8012748:	d101      	bne.n	801274e <xQueueReceiveFromISR+0x3e>
 801274a:	2301      	movs	r3, #1
 801274c:	e000      	b.n	8012750 <xQueueReceiveFromISR+0x40>
 801274e:	2300      	movs	r3, #0
 8012750:	2b00      	cmp	r3, #0
 8012752:	d10a      	bne.n	801276a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012758:	f383 8811 	msr	BASEPRI, r3
 801275c:	f3bf 8f6f 	isb	sy
 8012760:	f3bf 8f4f 	dsb	sy
 8012764:	61fb      	str	r3, [r7, #28]
}
 8012766:	bf00      	nop
 8012768:	e7fe      	b.n	8012768 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801276a:	f001 ff2d 	bl	80145c8 <vPortValidateInterruptPriority>
	__asm volatile
 801276e:	f3ef 8211 	mrs	r2, BASEPRI
 8012772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012776:	f383 8811 	msr	BASEPRI, r3
 801277a:	f3bf 8f6f 	isb	sy
 801277e:	f3bf 8f4f 	dsb	sy
 8012782:	61ba      	str	r2, [r7, #24]
 8012784:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012786:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012788:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801278e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012792:	2b00      	cmp	r3, #0
 8012794:	d02f      	beq.n	80127f6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801279c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80127a0:	68b9      	ldr	r1, [r7, #8]
 80127a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127a4:	f000 f8da 	bl	801295c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80127a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127aa:	1e5a      	subs	r2, r3, #1
 80127ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80127b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80127b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80127b8:	d112      	bne.n	80127e0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80127ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127bc:	691b      	ldr	r3, [r3, #16]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d016      	beq.n	80127f0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80127c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c4:	3310      	adds	r3, #16
 80127c6:	4618      	mov	r0, r3
 80127c8:	f000 fe68 	bl	801349c <xTaskRemoveFromEventList>
 80127cc:	4603      	mov	r3, r0
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d00e      	beq.n	80127f0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d00b      	beq.n	80127f0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2201      	movs	r2, #1
 80127dc:	601a      	str	r2, [r3, #0]
 80127de:	e007      	b.n	80127f0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80127e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80127e4:	3301      	adds	r3, #1
 80127e6:	b2db      	uxtb	r3, r3
 80127e8:	b25a      	sxtb	r2, r3
 80127ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80127f0:	2301      	movs	r3, #1
 80127f2:	637b      	str	r3, [r7, #52]	; 0x34
 80127f4:	e001      	b.n	80127fa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80127f6:	2300      	movs	r3, #0
 80127f8:	637b      	str	r3, [r7, #52]	; 0x34
 80127fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	f383 8811 	msr	BASEPRI, r3
}
 8012804:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012808:	4618      	mov	r0, r3
 801280a:	3738      	adds	r7, #56	; 0x38
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}

08012810 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b084      	sub	sp, #16
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d10a      	bne.n	8012834 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 801281e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012822:	f383 8811 	msr	BASEPRI, r3
 8012826:	f3bf 8f6f 	isb	sy
 801282a:	f3bf 8f4f 	dsb	sy
 801282e:	60bb      	str	r3, [r7, #8]
}
 8012830:	bf00      	nop
 8012832:	e7fe      	b.n	8012832 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8012834:	f001 fde6 	bl	8014404 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801283c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801283e:	f001 fe11 	bl	8014464 <vPortExitCritical>

	return uxReturn;
 8012842:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012844:	4618      	mov	r0, r3
 8012846:	3710      	adds	r7, #16
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}

0801284c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 801284c:	b480      	push	{r7}
 801284e:	b087      	sub	sp, #28
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d10a      	bne.n	8012874 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 801285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012862:	f383 8811 	msr	BASEPRI, r3
 8012866:	f3bf 8f6f 	isb	sy
 801286a:	f3bf 8f4f 	dsb	sy
 801286e:	60fb      	str	r3, [r7, #12]
}
 8012870:	bf00      	nop
 8012872:	e7fe      	b.n	8012872 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012878:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801287a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801287c:	4618      	mov	r0, r3
 801287e:	371c      	adds	r7, #28
 8012880:	46bd      	mov	sp, r7
 8012882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012886:	4770      	bx	lr

08012888 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b086      	sub	sp, #24
 801288c:	af00      	add	r7, sp, #0
 801288e:	60f8      	str	r0, [r7, #12]
 8012890:	60b9      	str	r1, [r7, #8]
 8012892:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012894:	2300      	movs	r3, #0
 8012896:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801289c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d10d      	bne.n	80128c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d14d      	bne.n	801294a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	689b      	ldr	r3, [r3, #8]
 80128b2:	4618      	mov	r0, r3
 80128b4:	f001 f830 	bl	8013918 <xTaskPriorityDisinherit>
 80128b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	2200      	movs	r2, #0
 80128be:	609a      	str	r2, [r3, #8]
 80128c0:	e043      	b.n	801294a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d119      	bne.n	80128fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	6858      	ldr	r0, [r3, #4]
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128d0:	461a      	mov	r2, r3
 80128d2:	68b9      	ldr	r1, [r7, #8]
 80128d4:	f002 f8dc 	bl	8014a90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	685a      	ldr	r2, [r3, #4]
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128e0:	441a      	add	r2, r3
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	685a      	ldr	r2, [r3, #4]
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	689b      	ldr	r3, [r3, #8]
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d32b      	bcc.n	801294a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	681a      	ldr	r2, [r3, #0]
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	605a      	str	r2, [r3, #4]
 80128fa:	e026      	b.n	801294a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	68d8      	ldr	r0, [r3, #12]
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012904:	461a      	mov	r2, r3
 8012906:	68b9      	ldr	r1, [r7, #8]
 8012908:	f002 f8c2 	bl	8014a90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	68da      	ldr	r2, [r3, #12]
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012914:	425b      	negs	r3, r3
 8012916:	441a      	add	r2, r3
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	68da      	ldr	r2, [r3, #12]
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	429a      	cmp	r2, r3
 8012926:	d207      	bcs.n	8012938 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	689a      	ldr	r2, [r3, #8]
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012930:	425b      	negs	r3, r3
 8012932:	441a      	add	r2, r3
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2b02      	cmp	r3, #2
 801293c:	d105      	bne.n	801294a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801293e:	693b      	ldr	r3, [r7, #16]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d002      	beq.n	801294a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012944:	693b      	ldr	r3, [r7, #16]
 8012946:	3b01      	subs	r3, #1
 8012948:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801294a:	693b      	ldr	r3, [r7, #16]
 801294c:	1c5a      	adds	r2, r3, #1
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012952:	697b      	ldr	r3, [r7, #20]
}
 8012954:	4618      	mov	r0, r3
 8012956:	3718      	adds	r7, #24
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}

0801295c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b082      	sub	sp, #8
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
 8012964:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801296a:	2b00      	cmp	r3, #0
 801296c:	d018      	beq.n	80129a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	68da      	ldr	r2, [r3, #12]
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012976:	441a      	add	r2, r3
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	68da      	ldr	r2, [r3, #12]
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	689b      	ldr	r3, [r3, #8]
 8012984:	429a      	cmp	r2, r3
 8012986:	d303      	bcc.n	8012990 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	68d9      	ldr	r1, [r3, #12]
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012998:	461a      	mov	r2, r3
 801299a:	6838      	ldr	r0, [r7, #0]
 801299c:	f002 f878 	bl	8014a90 <memcpy>
	}
}
 80129a0:	bf00      	nop
 80129a2:	3708      	adds	r7, #8
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}

080129a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b084      	sub	sp, #16
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80129b0:	f001 fd28 	bl	8014404 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80129ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80129bc:	e011      	b.n	80129e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d012      	beq.n	80129ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	3324      	adds	r3, #36	; 0x24
 80129ca:	4618      	mov	r0, r3
 80129cc:	f000 fd66 	bl	801349c <xTaskRemoveFromEventList>
 80129d0:	4603      	mov	r3, r0
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d001      	beq.n	80129da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80129d6:	f000 fe9f 	bl	8013718 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80129da:	7bfb      	ldrb	r3, [r7, #15]
 80129dc:	3b01      	subs	r3, #1
 80129de:	b2db      	uxtb	r3, r3
 80129e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80129e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	dce9      	bgt.n	80129be <prvUnlockQueue+0x16>
 80129ea:	e000      	b.n	80129ee <prvUnlockQueue+0x46>
					break;
 80129ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	22ff      	movs	r2, #255	; 0xff
 80129f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80129f6:	f001 fd35 	bl	8014464 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80129fa:	f001 fd03 	bl	8014404 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012a06:	e011      	b.n	8012a2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	691b      	ldr	r3, [r3, #16]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d012      	beq.n	8012a36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	3310      	adds	r3, #16
 8012a14:	4618      	mov	r0, r3
 8012a16:	f000 fd41 	bl	801349c <xTaskRemoveFromEventList>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d001      	beq.n	8012a24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012a20:	f000 fe7a 	bl	8013718 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012a24:	7bbb      	ldrb	r3, [r7, #14]
 8012a26:	3b01      	subs	r3, #1
 8012a28:	b2db      	uxtb	r3, r3
 8012a2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012a2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	dce9      	bgt.n	8012a08 <prvUnlockQueue+0x60>
 8012a34:	e000      	b.n	8012a38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012a36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	22ff      	movs	r2, #255	; 0xff
 8012a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012a40:	f001 fd10 	bl	8014464 <vPortExitCritical>
}
 8012a44:	bf00      	nop
 8012a46:	3710      	adds	r7, #16
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}

08012a4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b084      	sub	sp, #16
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012a54:	f001 fcd6 	bl	8014404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d102      	bne.n	8012a66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012a60:	2301      	movs	r3, #1
 8012a62:	60fb      	str	r3, [r7, #12]
 8012a64:	e001      	b.n	8012a6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012a66:	2300      	movs	r3, #0
 8012a68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012a6a:	f001 fcfb 	bl	8014464 <vPortExitCritical>

	return xReturn;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	3710      	adds	r7, #16
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}

08012a78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b084      	sub	sp, #16
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012a80:	f001 fcc0 	bl	8014404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d102      	bne.n	8012a96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012a90:	2301      	movs	r3, #1
 8012a92:	60fb      	str	r3, [r7, #12]
 8012a94:	e001      	b.n	8012a9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012a96:	2300      	movs	r3, #0
 8012a98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012a9a:	f001 fce3 	bl	8014464 <vPortExitCritical>

	return xReturn;
 8012a9e:	68fb      	ldr	r3, [r7, #12]
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3710      	adds	r7, #16
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}

08012aa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b085      	sub	sp, #20
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	60fb      	str	r3, [r7, #12]
 8012ab6:	e014      	b.n	8012ae2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012ab8:	4a0f      	ldr	r2, [pc, #60]	; (8012af8 <vQueueAddToRegistry+0x50>)
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d10b      	bne.n	8012adc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012ac4:	490c      	ldr	r1, [pc, #48]	; (8012af8 <vQueueAddToRegistry+0x50>)
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	683a      	ldr	r2, [r7, #0]
 8012aca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012ace:	4a0a      	ldr	r2, [pc, #40]	; (8012af8 <vQueueAddToRegistry+0x50>)
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	00db      	lsls	r3, r3, #3
 8012ad4:	4413      	add	r3, r2
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012ada:	e006      	b.n	8012aea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	3301      	adds	r3, #1
 8012ae0:	60fb      	str	r3, [r7, #12]
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	2b07      	cmp	r3, #7
 8012ae6:	d9e7      	bls.n	8012ab8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012ae8:	bf00      	nop
 8012aea:	bf00      	nop
 8012aec:	3714      	adds	r7, #20
 8012aee:	46bd      	mov	sp, r7
 8012af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af4:	4770      	bx	lr
 8012af6:	bf00      	nop
 8012af8:	24000e18 	.word	0x24000e18

08012afc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b086      	sub	sp, #24
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	60f8      	str	r0, [r7, #12]
 8012b04:	60b9      	str	r1, [r7, #8]
 8012b06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012b0c:	f001 fc7a 	bl	8014404 <vPortEnterCritical>
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012b16:	b25b      	sxtb	r3, r3
 8012b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b1c:	d103      	bne.n	8012b26 <vQueueWaitForMessageRestricted+0x2a>
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	2200      	movs	r2, #0
 8012b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012b26:	697b      	ldr	r3, [r7, #20]
 8012b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b2c:	b25b      	sxtb	r3, r3
 8012b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b32:	d103      	bne.n	8012b3c <vQueueWaitForMessageRestricted+0x40>
 8012b34:	697b      	ldr	r3, [r7, #20]
 8012b36:	2200      	movs	r2, #0
 8012b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012b3c:	f001 fc92 	bl	8014464 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012b40:	697b      	ldr	r3, [r7, #20]
 8012b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d106      	bne.n	8012b56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	3324      	adds	r3, #36	; 0x24
 8012b4c:	687a      	ldr	r2, [r7, #4]
 8012b4e:	68b9      	ldr	r1, [r7, #8]
 8012b50:	4618      	mov	r0, r3
 8012b52:	f000 fc77 	bl	8013444 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012b56:	6978      	ldr	r0, [r7, #20]
 8012b58:	f7ff ff26 	bl	80129a8 <prvUnlockQueue>
	}
 8012b5c:	bf00      	nop
 8012b5e:	3718      	adds	r7, #24
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}

08012b64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b08e      	sub	sp, #56	; 0x38
 8012b68:	af04      	add	r7, sp, #16
 8012b6a:	60f8      	str	r0, [r7, #12]
 8012b6c:	60b9      	str	r1, [r7, #8]
 8012b6e:	607a      	str	r2, [r7, #4]
 8012b70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d10a      	bne.n	8012b8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8012b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b7c:	f383 8811 	msr	BASEPRI, r3
 8012b80:	f3bf 8f6f 	isb	sy
 8012b84:	f3bf 8f4f 	dsb	sy
 8012b88:	623b      	str	r3, [r7, #32]
}
 8012b8a:	bf00      	nop
 8012b8c:	e7fe      	b.n	8012b8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d10a      	bne.n	8012baa <xTaskCreateStatic+0x46>
	__asm volatile
 8012b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b98:	f383 8811 	msr	BASEPRI, r3
 8012b9c:	f3bf 8f6f 	isb	sy
 8012ba0:	f3bf 8f4f 	dsb	sy
 8012ba4:	61fb      	str	r3, [r7, #28]
}
 8012ba6:	bf00      	nop
 8012ba8:	e7fe      	b.n	8012ba8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012baa:	235c      	movs	r3, #92	; 0x5c
 8012bac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	2b5c      	cmp	r3, #92	; 0x5c
 8012bb2:	d00a      	beq.n	8012bca <xTaskCreateStatic+0x66>
	__asm volatile
 8012bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb8:	f383 8811 	msr	BASEPRI, r3
 8012bbc:	f3bf 8f6f 	isb	sy
 8012bc0:	f3bf 8f4f 	dsb	sy
 8012bc4:	61bb      	str	r3, [r7, #24]
}
 8012bc6:	bf00      	nop
 8012bc8:	e7fe      	b.n	8012bc8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012bca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d01e      	beq.n	8012c10 <xTaskCreateStatic+0xac>
 8012bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d01b      	beq.n	8012c10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012be0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be4:	2202      	movs	r2, #2
 8012be6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012bea:	2300      	movs	r3, #0
 8012bec:	9303      	str	r3, [sp, #12]
 8012bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf0:	9302      	str	r3, [sp, #8]
 8012bf2:	f107 0314 	add.w	r3, r7, #20
 8012bf6:	9301      	str	r3, [sp, #4]
 8012bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bfa:	9300      	str	r3, [sp, #0]
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	687a      	ldr	r2, [r7, #4]
 8012c00:	68b9      	ldr	r1, [r7, #8]
 8012c02:	68f8      	ldr	r0, [r7, #12]
 8012c04:	f000 f850 	bl	8012ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c0a:	f000 f8dd 	bl	8012dc8 <prvAddNewTaskToReadyList>
 8012c0e:	e001      	b.n	8012c14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012c10:	2300      	movs	r3, #0
 8012c12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012c14:	697b      	ldr	r3, [r7, #20]
	}
 8012c16:	4618      	mov	r0, r3
 8012c18:	3728      	adds	r7, #40	; 0x28
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}

08012c1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012c1e:	b580      	push	{r7, lr}
 8012c20:	b08c      	sub	sp, #48	; 0x30
 8012c22:	af04      	add	r7, sp, #16
 8012c24:	60f8      	str	r0, [r7, #12]
 8012c26:	60b9      	str	r1, [r7, #8]
 8012c28:	603b      	str	r3, [r7, #0]
 8012c2a:	4613      	mov	r3, r2
 8012c2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012c2e:	88fb      	ldrh	r3, [r7, #6]
 8012c30:	009b      	lsls	r3, r3, #2
 8012c32:	4618      	mov	r0, r3
 8012c34:	f001 fd08 	bl	8014648 <pvPortMalloc>
 8012c38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d00e      	beq.n	8012c5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012c40:	205c      	movs	r0, #92	; 0x5c
 8012c42:	f001 fd01 	bl	8014648 <pvPortMalloc>
 8012c46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012c48:	69fb      	ldr	r3, [r7, #28]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d003      	beq.n	8012c56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012c4e:	69fb      	ldr	r3, [r7, #28]
 8012c50:	697a      	ldr	r2, [r7, #20]
 8012c52:	631a      	str	r2, [r3, #48]	; 0x30
 8012c54:	e005      	b.n	8012c62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012c56:	6978      	ldr	r0, [r7, #20]
 8012c58:	f001 fdc2 	bl	80147e0 <vPortFree>
 8012c5c:	e001      	b.n	8012c62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012c62:	69fb      	ldr	r3, [r7, #28]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d017      	beq.n	8012c98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012c70:	88fa      	ldrh	r2, [r7, #6]
 8012c72:	2300      	movs	r3, #0
 8012c74:	9303      	str	r3, [sp, #12]
 8012c76:	69fb      	ldr	r3, [r7, #28]
 8012c78:	9302      	str	r3, [sp, #8]
 8012c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c7c:	9301      	str	r3, [sp, #4]
 8012c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c80:	9300      	str	r3, [sp, #0]
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	68b9      	ldr	r1, [r7, #8]
 8012c86:	68f8      	ldr	r0, [r7, #12]
 8012c88:	f000 f80e 	bl	8012ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012c8c:	69f8      	ldr	r0, [r7, #28]
 8012c8e:	f000 f89b 	bl	8012dc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012c92:	2301      	movs	r3, #1
 8012c94:	61bb      	str	r3, [r7, #24]
 8012c96:	e002      	b.n	8012c9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012c9e:	69bb      	ldr	r3, [r7, #24]
	}
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3720      	adds	r7, #32
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}

08012ca8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b088      	sub	sp, #32
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	60f8      	str	r0, [r7, #12]
 8012cb0:	60b9      	str	r1, [r7, #8]
 8012cb2:	607a      	str	r2, [r7, #4]
 8012cb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	009b      	lsls	r3, r3, #2
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	21a5      	movs	r1, #165	; 0xa5
 8012cc2:	f001 fef3 	bl	8014aac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012cca:	6879      	ldr	r1, [r7, #4]
 8012ccc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8012cd0:	440b      	add	r3, r1
 8012cd2:	009b      	lsls	r3, r3, #2
 8012cd4:	4413      	add	r3, r2
 8012cd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012cd8:	69bb      	ldr	r3, [r7, #24]
 8012cda:	f023 0307 	bic.w	r3, r3, #7
 8012cde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012ce0:	69bb      	ldr	r3, [r7, #24]
 8012ce2:	f003 0307 	and.w	r3, r3, #7
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d00a      	beq.n	8012d00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8012cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cee:	f383 8811 	msr	BASEPRI, r3
 8012cf2:	f3bf 8f6f 	isb	sy
 8012cf6:	f3bf 8f4f 	dsb	sy
 8012cfa:	617b      	str	r3, [r7, #20]
}
 8012cfc:	bf00      	nop
 8012cfe:	e7fe      	b.n	8012cfe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d01f      	beq.n	8012d46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012d06:	2300      	movs	r3, #0
 8012d08:	61fb      	str	r3, [r7, #28]
 8012d0a:	e012      	b.n	8012d32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012d0c:	68ba      	ldr	r2, [r7, #8]
 8012d0e:	69fb      	ldr	r3, [r7, #28]
 8012d10:	4413      	add	r3, r2
 8012d12:	7819      	ldrb	r1, [r3, #0]
 8012d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	4413      	add	r3, r2
 8012d1a:	3334      	adds	r3, #52	; 0x34
 8012d1c:	460a      	mov	r2, r1
 8012d1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012d20:	68ba      	ldr	r2, [r7, #8]
 8012d22:	69fb      	ldr	r3, [r7, #28]
 8012d24:	4413      	add	r3, r2
 8012d26:	781b      	ldrb	r3, [r3, #0]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d006      	beq.n	8012d3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012d2c:	69fb      	ldr	r3, [r7, #28]
 8012d2e:	3301      	adds	r3, #1
 8012d30:	61fb      	str	r3, [r7, #28]
 8012d32:	69fb      	ldr	r3, [r7, #28]
 8012d34:	2b0f      	cmp	r3, #15
 8012d36:	d9e9      	bls.n	8012d0c <prvInitialiseNewTask+0x64>
 8012d38:	e000      	b.n	8012d3c <prvInitialiseNewTask+0x94>
			{
				break;
 8012d3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d3e:	2200      	movs	r2, #0
 8012d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012d44:	e003      	b.n	8012d4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d48:	2200      	movs	r2, #0
 8012d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d50:	2b37      	cmp	r3, #55	; 0x37
 8012d52:	d901      	bls.n	8012d58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012d54:	2337      	movs	r3, #55	; 0x37
 8012d56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d66:	2200      	movs	r2, #0
 8012d68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d6c:	3304      	adds	r3, #4
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7ff f882 	bl	8011e78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d76:	3318      	adds	r3, #24
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f7ff f87d 	bl	8011e78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d96:	2200      	movs	r2, #0
 8012d98:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012da2:	683a      	ldr	r2, [r7, #0]
 8012da4:	68f9      	ldr	r1, [r7, #12]
 8012da6:	69b8      	ldr	r0, [r7, #24]
 8012da8:	f001 f9fe 	bl	80141a8 <pxPortInitialiseStack>
 8012dac:	4602      	mov	r2, r0
 8012dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012db0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d002      	beq.n	8012dbe <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012dbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012dbe:	bf00      	nop
 8012dc0:	3720      	adds	r7, #32
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bd80      	pop	{r7, pc}
	...

08012dc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b082      	sub	sp, #8
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012dd0:	f001 fb18 	bl	8014404 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012dd4:	4b2d      	ldr	r3, [pc, #180]	; (8012e8c <prvAddNewTaskToReadyList+0xc4>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	3301      	adds	r3, #1
 8012dda:	4a2c      	ldr	r2, [pc, #176]	; (8012e8c <prvAddNewTaskToReadyList+0xc4>)
 8012ddc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012dde:	4b2c      	ldr	r3, [pc, #176]	; (8012e90 <prvAddNewTaskToReadyList+0xc8>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d109      	bne.n	8012dfa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012de6:	4a2a      	ldr	r2, [pc, #168]	; (8012e90 <prvAddNewTaskToReadyList+0xc8>)
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012dec:	4b27      	ldr	r3, [pc, #156]	; (8012e8c <prvAddNewTaskToReadyList+0xc4>)
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	2b01      	cmp	r3, #1
 8012df2:	d110      	bne.n	8012e16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012df4:	f000 fcb4 	bl	8013760 <prvInitialiseTaskLists>
 8012df8:	e00d      	b.n	8012e16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012dfa:	4b26      	ldr	r3, [pc, #152]	; (8012e94 <prvAddNewTaskToReadyList+0xcc>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d109      	bne.n	8012e16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012e02:	4b23      	ldr	r3, [pc, #140]	; (8012e90 <prvAddNewTaskToReadyList+0xc8>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e0c:	429a      	cmp	r2, r3
 8012e0e:	d802      	bhi.n	8012e16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012e10:	4a1f      	ldr	r2, [pc, #124]	; (8012e90 <prvAddNewTaskToReadyList+0xc8>)
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012e16:	4b20      	ldr	r3, [pc, #128]	; (8012e98 <prvAddNewTaskToReadyList+0xd0>)
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	3301      	adds	r3, #1
 8012e1c:	4a1e      	ldr	r2, [pc, #120]	; (8012e98 <prvAddNewTaskToReadyList+0xd0>)
 8012e1e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012e20:	4b1d      	ldr	r3, [pc, #116]	; (8012e98 <prvAddNewTaskToReadyList+0xd0>)
 8012e22:	681a      	ldr	r2, [r3, #0]
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e2c:	4b1b      	ldr	r3, [pc, #108]	; (8012e9c <prvAddNewTaskToReadyList+0xd4>)
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	429a      	cmp	r2, r3
 8012e32:	d903      	bls.n	8012e3c <prvAddNewTaskToReadyList+0x74>
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e38:	4a18      	ldr	r2, [pc, #96]	; (8012e9c <prvAddNewTaskToReadyList+0xd4>)
 8012e3a:	6013      	str	r3, [r2, #0]
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e40:	4613      	mov	r3, r2
 8012e42:	009b      	lsls	r3, r3, #2
 8012e44:	4413      	add	r3, r2
 8012e46:	009b      	lsls	r3, r3, #2
 8012e48:	4a15      	ldr	r2, [pc, #84]	; (8012ea0 <prvAddNewTaskToReadyList+0xd8>)
 8012e4a:	441a      	add	r2, r3
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	3304      	adds	r3, #4
 8012e50:	4619      	mov	r1, r3
 8012e52:	4610      	mov	r0, r2
 8012e54:	f7ff f81d 	bl	8011e92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012e58:	f001 fb04 	bl	8014464 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012e5c:	4b0d      	ldr	r3, [pc, #52]	; (8012e94 <prvAddNewTaskToReadyList+0xcc>)
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d00e      	beq.n	8012e82 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012e64:	4b0a      	ldr	r3, [pc, #40]	; (8012e90 <prvAddNewTaskToReadyList+0xc8>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d207      	bcs.n	8012e82 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012e72:	4b0c      	ldr	r3, [pc, #48]	; (8012ea4 <prvAddNewTaskToReadyList+0xdc>)
 8012e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e78:	601a      	str	r2, [r3, #0]
 8012e7a:	f3bf 8f4f 	dsb	sy
 8012e7e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012e82:	bf00      	nop
 8012e84:	3708      	adds	r7, #8
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}
 8012e8a:	bf00      	nop
 8012e8c:	2400132c 	.word	0x2400132c
 8012e90:	24000e58 	.word	0x24000e58
 8012e94:	24001338 	.word	0x24001338
 8012e98:	24001348 	.word	0x24001348
 8012e9c:	24001334 	.word	0x24001334
 8012ea0:	24000e5c 	.word	0x24000e5c
 8012ea4:	e000ed04 	.word	0xe000ed04

08012ea8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b084      	sub	sp, #16
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d017      	beq.n	8012eea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012eba:	4b13      	ldr	r3, [pc, #76]	; (8012f08 <vTaskDelay+0x60>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d00a      	beq.n	8012ed8 <vTaskDelay+0x30>
	__asm volatile
 8012ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec6:	f383 8811 	msr	BASEPRI, r3
 8012eca:	f3bf 8f6f 	isb	sy
 8012ece:	f3bf 8f4f 	dsb	sy
 8012ed2:	60bb      	str	r3, [r7, #8]
}
 8012ed4:	bf00      	nop
 8012ed6:	e7fe      	b.n	8012ed6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012ed8:	f000 f880 	bl	8012fdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012edc:	2100      	movs	r1, #0
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f000 fda0 	bl	8013a24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012ee4:	f000 f888 	bl	8012ff8 <xTaskResumeAll>
 8012ee8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d107      	bne.n	8012f00 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012ef0:	4b06      	ldr	r3, [pc, #24]	; (8012f0c <vTaskDelay+0x64>)
 8012ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ef6:	601a      	str	r2, [r3, #0]
 8012ef8:	f3bf 8f4f 	dsb	sy
 8012efc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012f00:	bf00      	nop
 8012f02:	3710      	adds	r7, #16
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}
 8012f08:	24001354 	.word	0x24001354
 8012f0c:	e000ed04 	.word	0xe000ed04

08012f10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b08a      	sub	sp, #40	; 0x28
 8012f14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012f16:	2300      	movs	r3, #0
 8012f18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012f1e:	463a      	mov	r2, r7
 8012f20:	1d39      	adds	r1, r7, #4
 8012f22:	f107 0308 	add.w	r3, r7, #8
 8012f26:	4618      	mov	r0, r3
 8012f28:	f7fe fd64 	bl	80119f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012f2c:	6839      	ldr	r1, [r7, #0]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	68ba      	ldr	r2, [r7, #8]
 8012f32:	9202      	str	r2, [sp, #8]
 8012f34:	9301      	str	r3, [sp, #4]
 8012f36:	2300      	movs	r3, #0
 8012f38:	9300      	str	r3, [sp, #0]
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	460a      	mov	r2, r1
 8012f3e:	4921      	ldr	r1, [pc, #132]	; (8012fc4 <vTaskStartScheduler+0xb4>)
 8012f40:	4821      	ldr	r0, [pc, #132]	; (8012fc8 <vTaskStartScheduler+0xb8>)
 8012f42:	f7ff fe0f 	bl	8012b64 <xTaskCreateStatic>
 8012f46:	4603      	mov	r3, r0
 8012f48:	4a20      	ldr	r2, [pc, #128]	; (8012fcc <vTaskStartScheduler+0xbc>)
 8012f4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012f4c:	4b1f      	ldr	r3, [pc, #124]	; (8012fcc <vTaskStartScheduler+0xbc>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d002      	beq.n	8012f5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012f54:	2301      	movs	r3, #1
 8012f56:	617b      	str	r3, [r7, #20]
 8012f58:	e001      	b.n	8012f5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012f5e:	697b      	ldr	r3, [r7, #20]
 8012f60:	2b01      	cmp	r3, #1
 8012f62:	d102      	bne.n	8012f6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012f64:	f000 fdb2 	bl	8013acc <xTimerCreateTimerTask>
 8012f68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	2b01      	cmp	r3, #1
 8012f6e:	d116      	bne.n	8012f9e <vTaskStartScheduler+0x8e>
	__asm volatile
 8012f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f74:	f383 8811 	msr	BASEPRI, r3
 8012f78:	f3bf 8f6f 	isb	sy
 8012f7c:	f3bf 8f4f 	dsb	sy
 8012f80:	613b      	str	r3, [r7, #16]
}
 8012f82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012f84:	4b12      	ldr	r3, [pc, #72]	; (8012fd0 <vTaskStartScheduler+0xc0>)
 8012f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012f8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012f8c:	4b11      	ldr	r3, [pc, #68]	; (8012fd4 <vTaskStartScheduler+0xc4>)
 8012f8e:	2201      	movs	r2, #1
 8012f90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012f92:	4b11      	ldr	r3, [pc, #68]	; (8012fd8 <vTaskStartScheduler+0xc8>)
 8012f94:	2200      	movs	r2, #0
 8012f96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012f98:	f001 f992 	bl	80142c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012f9c:	e00e      	b.n	8012fbc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012fa4:	d10a      	bne.n	8012fbc <vTaskStartScheduler+0xac>
	__asm volatile
 8012fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012faa:	f383 8811 	msr	BASEPRI, r3
 8012fae:	f3bf 8f6f 	isb	sy
 8012fb2:	f3bf 8f4f 	dsb	sy
 8012fb6:	60fb      	str	r3, [r7, #12]
}
 8012fb8:	bf00      	nop
 8012fba:	e7fe      	b.n	8012fba <vTaskStartScheduler+0xaa>
}
 8012fbc:	bf00      	nop
 8012fbe:	3718      	adds	r7, #24
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}
 8012fc4:	08015ce8 	.word	0x08015ce8
 8012fc8:	08013731 	.word	0x08013731
 8012fcc:	24001350 	.word	0x24001350
 8012fd0:	2400134c 	.word	0x2400134c
 8012fd4:	24001338 	.word	0x24001338
 8012fd8:	24001330 	.word	0x24001330

08012fdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012fdc:	b480      	push	{r7}
 8012fde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012fe0:	4b04      	ldr	r3, [pc, #16]	; (8012ff4 <vTaskSuspendAll+0x18>)
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	3301      	adds	r3, #1
 8012fe6:	4a03      	ldr	r2, [pc, #12]	; (8012ff4 <vTaskSuspendAll+0x18>)
 8012fe8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012fea:	bf00      	nop
 8012fec:	46bd      	mov	sp, r7
 8012fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff2:	4770      	bx	lr
 8012ff4:	24001354 	.word	0x24001354

08012ff8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b084      	sub	sp, #16
 8012ffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012ffe:	2300      	movs	r3, #0
 8013000:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013002:	2300      	movs	r3, #0
 8013004:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013006:	4b42      	ldr	r3, [pc, #264]	; (8013110 <xTaskResumeAll+0x118>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d10a      	bne.n	8013024 <xTaskResumeAll+0x2c>
	__asm volatile
 801300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013012:	f383 8811 	msr	BASEPRI, r3
 8013016:	f3bf 8f6f 	isb	sy
 801301a:	f3bf 8f4f 	dsb	sy
 801301e:	603b      	str	r3, [r7, #0]
}
 8013020:	bf00      	nop
 8013022:	e7fe      	b.n	8013022 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013024:	f001 f9ee 	bl	8014404 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013028:	4b39      	ldr	r3, [pc, #228]	; (8013110 <xTaskResumeAll+0x118>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	3b01      	subs	r3, #1
 801302e:	4a38      	ldr	r2, [pc, #224]	; (8013110 <xTaskResumeAll+0x118>)
 8013030:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013032:	4b37      	ldr	r3, [pc, #220]	; (8013110 <xTaskResumeAll+0x118>)
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d162      	bne.n	8013100 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801303a:	4b36      	ldr	r3, [pc, #216]	; (8013114 <xTaskResumeAll+0x11c>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d05e      	beq.n	8013100 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013042:	e02f      	b.n	80130a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013044:	4b34      	ldr	r3, [pc, #208]	; (8013118 <xTaskResumeAll+0x120>)
 8013046:	68db      	ldr	r3, [r3, #12]
 8013048:	68db      	ldr	r3, [r3, #12]
 801304a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	3318      	adds	r3, #24
 8013050:	4618      	mov	r0, r3
 8013052:	f7fe ff7b 	bl	8011f4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	3304      	adds	r3, #4
 801305a:	4618      	mov	r0, r3
 801305c:	f7fe ff76 	bl	8011f4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013064:	4b2d      	ldr	r3, [pc, #180]	; (801311c <xTaskResumeAll+0x124>)
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	429a      	cmp	r2, r3
 801306a:	d903      	bls.n	8013074 <xTaskResumeAll+0x7c>
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013070:	4a2a      	ldr	r2, [pc, #168]	; (801311c <xTaskResumeAll+0x124>)
 8013072:	6013      	str	r3, [r2, #0]
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013078:	4613      	mov	r3, r2
 801307a:	009b      	lsls	r3, r3, #2
 801307c:	4413      	add	r3, r2
 801307e:	009b      	lsls	r3, r3, #2
 8013080:	4a27      	ldr	r2, [pc, #156]	; (8013120 <xTaskResumeAll+0x128>)
 8013082:	441a      	add	r2, r3
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	3304      	adds	r3, #4
 8013088:	4619      	mov	r1, r3
 801308a:	4610      	mov	r0, r2
 801308c:	f7fe ff01 	bl	8011e92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013094:	4b23      	ldr	r3, [pc, #140]	; (8013124 <xTaskResumeAll+0x12c>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801309a:	429a      	cmp	r2, r3
 801309c:	d302      	bcc.n	80130a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801309e:	4b22      	ldr	r3, [pc, #136]	; (8013128 <xTaskResumeAll+0x130>)
 80130a0:	2201      	movs	r2, #1
 80130a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80130a4:	4b1c      	ldr	r3, [pc, #112]	; (8013118 <xTaskResumeAll+0x120>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d1cb      	bne.n	8013044 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d001      	beq.n	80130b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80130b2:	f000 fbf3 	bl	801389c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80130b6:	4b1d      	ldr	r3, [pc, #116]	; (801312c <xTaskResumeAll+0x134>)
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d010      	beq.n	80130e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80130c2:	f000 f847 	bl	8013154 <xTaskIncrementTick>
 80130c6:	4603      	mov	r3, r0
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d002      	beq.n	80130d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80130cc:	4b16      	ldr	r3, [pc, #88]	; (8013128 <xTaskResumeAll+0x130>)
 80130ce:	2201      	movs	r2, #1
 80130d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	3b01      	subs	r3, #1
 80130d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d1f1      	bne.n	80130c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80130de:	4b13      	ldr	r3, [pc, #76]	; (801312c <xTaskResumeAll+0x134>)
 80130e0:	2200      	movs	r2, #0
 80130e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80130e4:	4b10      	ldr	r3, [pc, #64]	; (8013128 <xTaskResumeAll+0x130>)
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d009      	beq.n	8013100 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80130ec:	2301      	movs	r3, #1
 80130ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80130f0:	4b0f      	ldr	r3, [pc, #60]	; (8013130 <xTaskResumeAll+0x138>)
 80130f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130f6:	601a      	str	r2, [r3, #0]
 80130f8:	f3bf 8f4f 	dsb	sy
 80130fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013100:	f001 f9b0 	bl	8014464 <vPortExitCritical>

	return xAlreadyYielded;
 8013104:	68bb      	ldr	r3, [r7, #8]
}
 8013106:	4618      	mov	r0, r3
 8013108:	3710      	adds	r7, #16
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}
 801310e:	bf00      	nop
 8013110:	24001354 	.word	0x24001354
 8013114:	2400132c 	.word	0x2400132c
 8013118:	240012ec 	.word	0x240012ec
 801311c:	24001334 	.word	0x24001334
 8013120:	24000e5c 	.word	0x24000e5c
 8013124:	24000e58 	.word	0x24000e58
 8013128:	24001340 	.word	0x24001340
 801312c:	2400133c 	.word	0x2400133c
 8013130:	e000ed04 	.word	0xe000ed04

08013134 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013134:	b480      	push	{r7}
 8013136:	b083      	sub	sp, #12
 8013138:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801313a:	4b05      	ldr	r3, [pc, #20]	; (8013150 <xTaskGetTickCount+0x1c>)
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013140:	687b      	ldr	r3, [r7, #4]
}
 8013142:	4618      	mov	r0, r3
 8013144:	370c      	adds	r7, #12
 8013146:	46bd      	mov	sp, r7
 8013148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314c:	4770      	bx	lr
 801314e:	bf00      	nop
 8013150:	24001330 	.word	0x24001330

08013154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b086      	sub	sp, #24
 8013158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801315a:	2300      	movs	r3, #0
 801315c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801315e:	4b4f      	ldr	r3, [pc, #316]	; (801329c <xTaskIncrementTick+0x148>)
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	2b00      	cmp	r3, #0
 8013164:	f040 808f 	bne.w	8013286 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013168:	4b4d      	ldr	r3, [pc, #308]	; (80132a0 <xTaskIncrementTick+0x14c>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	3301      	adds	r3, #1
 801316e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013170:	4a4b      	ldr	r2, [pc, #300]	; (80132a0 <xTaskIncrementTick+0x14c>)
 8013172:	693b      	ldr	r3, [r7, #16]
 8013174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d120      	bne.n	80131be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801317c:	4b49      	ldr	r3, [pc, #292]	; (80132a4 <xTaskIncrementTick+0x150>)
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d00a      	beq.n	801319c <xTaskIncrementTick+0x48>
	__asm volatile
 8013186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801318a:	f383 8811 	msr	BASEPRI, r3
 801318e:	f3bf 8f6f 	isb	sy
 8013192:	f3bf 8f4f 	dsb	sy
 8013196:	603b      	str	r3, [r7, #0]
}
 8013198:	bf00      	nop
 801319a:	e7fe      	b.n	801319a <xTaskIncrementTick+0x46>
 801319c:	4b41      	ldr	r3, [pc, #260]	; (80132a4 <xTaskIncrementTick+0x150>)
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	60fb      	str	r3, [r7, #12]
 80131a2:	4b41      	ldr	r3, [pc, #260]	; (80132a8 <xTaskIncrementTick+0x154>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	4a3f      	ldr	r2, [pc, #252]	; (80132a4 <xTaskIncrementTick+0x150>)
 80131a8:	6013      	str	r3, [r2, #0]
 80131aa:	4a3f      	ldr	r2, [pc, #252]	; (80132a8 <xTaskIncrementTick+0x154>)
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	6013      	str	r3, [r2, #0]
 80131b0:	4b3e      	ldr	r3, [pc, #248]	; (80132ac <xTaskIncrementTick+0x158>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	3301      	adds	r3, #1
 80131b6:	4a3d      	ldr	r2, [pc, #244]	; (80132ac <xTaskIncrementTick+0x158>)
 80131b8:	6013      	str	r3, [r2, #0]
 80131ba:	f000 fb6f 	bl	801389c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80131be:	4b3c      	ldr	r3, [pc, #240]	; (80132b0 <xTaskIncrementTick+0x15c>)
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	693a      	ldr	r2, [r7, #16]
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d349      	bcc.n	801325c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80131c8:	4b36      	ldr	r3, [pc, #216]	; (80132a4 <xTaskIncrementTick+0x150>)
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d104      	bne.n	80131dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80131d2:	4b37      	ldr	r3, [pc, #220]	; (80132b0 <xTaskIncrementTick+0x15c>)
 80131d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80131d8:	601a      	str	r2, [r3, #0]
					break;
 80131da:	e03f      	b.n	801325c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131dc:	4b31      	ldr	r3, [pc, #196]	; (80132a4 <xTaskIncrementTick+0x150>)
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	68db      	ldr	r3, [r3, #12]
 80131e2:	68db      	ldr	r3, [r3, #12]
 80131e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	685b      	ldr	r3, [r3, #4]
 80131ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80131ec:	693a      	ldr	r2, [r7, #16]
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d203      	bcs.n	80131fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80131f4:	4a2e      	ldr	r2, [pc, #184]	; (80132b0 <xTaskIncrementTick+0x15c>)
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80131fa:	e02f      	b.n	801325c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	3304      	adds	r3, #4
 8013200:	4618      	mov	r0, r3
 8013202:	f7fe fea3 	bl	8011f4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801320a:	2b00      	cmp	r3, #0
 801320c:	d004      	beq.n	8013218 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801320e:	68bb      	ldr	r3, [r7, #8]
 8013210:	3318      	adds	r3, #24
 8013212:	4618      	mov	r0, r3
 8013214:	f7fe fe9a 	bl	8011f4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801321c:	4b25      	ldr	r3, [pc, #148]	; (80132b4 <xTaskIncrementTick+0x160>)
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	429a      	cmp	r2, r3
 8013222:	d903      	bls.n	801322c <xTaskIncrementTick+0xd8>
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013228:	4a22      	ldr	r2, [pc, #136]	; (80132b4 <xTaskIncrementTick+0x160>)
 801322a:	6013      	str	r3, [r2, #0]
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013230:	4613      	mov	r3, r2
 8013232:	009b      	lsls	r3, r3, #2
 8013234:	4413      	add	r3, r2
 8013236:	009b      	lsls	r3, r3, #2
 8013238:	4a1f      	ldr	r2, [pc, #124]	; (80132b8 <xTaskIncrementTick+0x164>)
 801323a:	441a      	add	r2, r3
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	3304      	adds	r3, #4
 8013240:	4619      	mov	r1, r3
 8013242:	4610      	mov	r0, r2
 8013244:	f7fe fe25 	bl	8011e92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013248:	68bb      	ldr	r3, [r7, #8]
 801324a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801324c:	4b1b      	ldr	r3, [pc, #108]	; (80132bc <xTaskIncrementTick+0x168>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013252:	429a      	cmp	r2, r3
 8013254:	d3b8      	bcc.n	80131c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013256:	2301      	movs	r3, #1
 8013258:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801325a:	e7b5      	b.n	80131c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801325c:	4b17      	ldr	r3, [pc, #92]	; (80132bc <xTaskIncrementTick+0x168>)
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013262:	4915      	ldr	r1, [pc, #84]	; (80132b8 <xTaskIncrementTick+0x164>)
 8013264:	4613      	mov	r3, r2
 8013266:	009b      	lsls	r3, r3, #2
 8013268:	4413      	add	r3, r2
 801326a:	009b      	lsls	r3, r3, #2
 801326c:	440b      	add	r3, r1
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	2b01      	cmp	r3, #1
 8013272:	d901      	bls.n	8013278 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013274:	2301      	movs	r3, #1
 8013276:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013278:	4b11      	ldr	r3, [pc, #68]	; (80132c0 <xTaskIncrementTick+0x16c>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d007      	beq.n	8013290 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013280:	2301      	movs	r3, #1
 8013282:	617b      	str	r3, [r7, #20]
 8013284:	e004      	b.n	8013290 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013286:	4b0f      	ldr	r3, [pc, #60]	; (80132c4 <xTaskIncrementTick+0x170>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	3301      	adds	r3, #1
 801328c:	4a0d      	ldr	r2, [pc, #52]	; (80132c4 <xTaskIncrementTick+0x170>)
 801328e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013290:	697b      	ldr	r3, [r7, #20]
}
 8013292:	4618      	mov	r0, r3
 8013294:	3718      	adds	r7, #24
 8013296:	46bd      	mov	sp, r7
 8013298:	bd80      	pop	{r7, pc}
 801329a:	bf00      	nop
 801329c:	24001354 	.word	0x24001354
 80132a0:	24001330 	.word	0x24001330
 80132a4:	240012e4 	.word	0x240012e4
 80132a8:	240012e8 	.word	0x240012e8
 80132ac:	24001344 	.word	0x24001344
 80132b0:	2400134c 	.word	0x2400134c
 80132b4:	24001334 	.word	0x24001334
 80132b8:	24000e5c 	.word	0x24000e5c
 80132bc:	24000e58 	.word	0x24000e58
 80132c0:	24001340 	.word	0x24001340
 80132c4:	2400133c 	.word	0x2400133c

080132c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80132c8:	b480      	push	{r7}
 80132ca:	b085      	sub	sp, #20
 80132cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80132ce:	4b28      	ldr	r3, [pc, #160]	; (8013370 <vTaskSwitchContext+0xa8>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d003      	beq.n	80132de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80132d6:	4b27      	ldr	r3, [pc, #156]	; (8013374 <vTaskSwitchContext+0xac>)
 80132d8:	2201      	movs	r2, #1
 80132da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80132dc:	e041      	b.n	8013362 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80132de:	4b25      	ldr	r3, [pc, #148]	; (8013374 <vTaskSwitchContext+0xac>)
 80132e0:	2200      	movs	r2, #0
 80132e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132e4:	4b24      	ldr	r3, [pc, #144]	; (8013378 <vTaskSwitchContext+0xb0>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	60fb      	str	r3, [r7, #12]
 80132ea:	e010      	b.n	801330e <vTaskSwitchContext+0x46>
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d10a      	bne.n	8013308 <vTaskSwitchContext+0x40>
	__asm volatile
 80132f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132f6:	f383 8811 	msr	BASEPRI, r3
 80132fa:	f3bf 8f6f 	isb	sy
 80132fe:	f3bf 8f4f 	dsb	sy
 8013302:	607b      	str	r3, [r7, #4]
}
 8013304:	bf00      	nop
 8013306:	e7fe      	b.n	8013306 <vTaskSwitchContext+0x3e>
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	3b01      	subs	r3, #1
 801330c:	60fb      	str	r3, [r7, #12]
 801330e:	491b      	ldr	r1, [pc, #108]	; (801337c <vTaskSwitchContext+0xb4>)
 8013310:	68fa      	ldr	r2, [r7, #12]
 8013312:	4613      	mov	r3, r2
 8013314:	009b      	lsls	r3, r3, #2
 8013316:	4413      	add	r3, r2
 8013318:	009b      	lsls	r3, r3, #2
 801331a:	440b      	add	r3, r1
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d0e4      	beq.n	80132ec <vTaskSwitchContext+0x24>
 8013322:	68fa      	ldr	r2, [r7, #12]
 8013324:	4613      	mov	r3, r2
 8013326:	009b      	lsls	r3, r3, #2
 8013328:	4413      	add	r3, r2
 801332a:	009b      	lsls	r3, r3, #2
 801332c:	4a13      	ldr	r2, [pc, #76]	; (801337c <vTaskSwitchContext+0xb4>)
 801332e:	4413      	add	r3, r2
 8013330:	60bb      	str	r3, [r7, #8]
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	685b      	ldr	r3, [r3, #4]
 8013336:	685a      	ldr	r2, [r3, #4]
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	605a      	str	r2, [r3, #4]
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	685a      	ldr	r2, [r3, #4]
 8013340:	68bb      	ldr	r3, [r7, #8]
 8013342:	3308      	adds	r3, #8
 8013344:	429a      	cmp	r2, r3
 8013346:	d104      	bne.n	8013352 <vTaskSwitchContext+0x8a>
 8013348:	68bb      	ldr	r3, [r7, #8]
 801334a:	685b      	ldr	r3, [r3, #4]
 801334c:	685a      	ldr	r2, [r3, #4]
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	605a      	str	r2, [r3, #4]
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	685b      	ldr	r3, [r3, #4]
 8013356:	68db      	ldr	r3, [r3, #12]
 8013358:	4a09      	ldr	r2, [pc, #36]	; (8013380 <vTaskSwitchContext+0xb8>)
 801335a:	6013      	str	r3, [r2, #0]
 801335c:	4a06      	ldr	r2, [pc, #24]	; (8013378 <vTaskSwitchContext+0xb0>)
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	6013      	str	r3, [r2, #0]
}
 8013362:	bf00      	nop
 8013364:	3714      	adds	r7, #20
 8013366:	46bd      	mov	sp, r7
 8013368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336c:	4770      	bx	lr
 801336e:	bf00      	nop
 8013370:	24001354 	.word	0x24001354
 8013374:	24001340 	.word	0x24001340
 8013378:	24001334 	.word	0x24001334
 801337c:	24000e5c 	.word	0x24000e5c
 8013380:	24000e58 	.word	0x24000e58

08013384 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b084      	sub	sp, #16
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
 801338c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d10a      	bne.n	80133aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013398:	f383 8811 	msr	BASEPRI, r3
 801339c:	f3bf 8f6f 	isb	sy
 80133a0:	f3bf 8f4f 	dsb	sy
 80133a4:	60fb      	str	r3, [r7, #12]
}
 80133a6:	bf00      	nop
 80133a8:	e7fe      	b.n	80133a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80133aa:	4b07      	ldr	r3, [pc, #28]	; (80133c8 <vTaskPlaceOnEventList+0x44>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	3318      	adds	r3, #24
 80133b0:	4619      	mov	r1, r3
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f7fe fd91 	bl	8011eda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80133b8:	2101      	movs	r1, #1
 80133ba:	6838      	ldr	r0, [r7, #0]
 80133bc:	f000 fb32 	bl	8013a24 <prvAddCurrentTaskToDelayedList>
}
 80133c0:	bf00      	nop
 80133c2:	3710      	adds	r7, #16
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}
 80133c8:	24000e58 	.word	0x24000e58

080133cc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b086      	sub	sp, #24
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	60f8      	str	r0, [r7, #12]
 80133d4:	60b9      	str	r1, [r7, #8]
 80133d6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d10a      	bne.n	80133f4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80133de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e2:	f383 8811 	msr	BASEPRI, r3
 80133e6:	f3bf 8f6f 	isb	sy
 80133ea:	f3bf 8f4f 	dsb	sy
 80133ee:	617b      	str	r3, [r7, #20]
}
 80133f0:	bf00      	nop
 80133f2:	e7fe      	b.n	80133f2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 80133f4:	4b11      	ldr	r3, [pc, #68]	; (801343c <vTaskPlaceOnUnorderedEventList+0x70>)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d10a      	bne.n	8013412 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 80133fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013400:	f383 8811 	msr	BASEPRI, r3
 8013404:	f3bf 8f6f 	isb	sy
 8013408:	f3bf 8f4f 	dsb	sy
 801340c:	613b      	str	r3, [r7, #16]
}
 801340e:	bf00      	nop
 8013410:	e7fe      	b.n	8013410 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8013412:	4b0b      	ldr	r3, [pc, #44]	; (8013440 <vTaskPlaceOnUnorderedEventList+0x74>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	68ba      	ldr	r2, [r7, #8]
 8013418:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801341c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801341e:	4b08      	ldr	r3, [pc, #32]	; (8013440 <vTaskPlaceOnUnorderedEventList+0x74>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	3318      	adds	r3, #24
 8013424:	4619      	mov	r1, r3
 8013426:	68f8      	ldr	r0, [r7, #12]
 8013428:	f7fe fd33 	bl	8011e92 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801342c:	2101      	movs	r1, #1
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f000 faf8 	bl	8013a24 <prvAddCurrentTaskToDelayedList>
}
 8013434:	bf00      	nop
 8013436:	3718      	adds	r7, #24
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}
 801343c:	24001354 	.word	0x24001354
 8013440:	24000e58 	.word	0x24000e58

08013444 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013444:	b580      	push	{r7, lr}
 8013446:	b086      	sub	sp, #24
 8013448:	af00      	add	r7, sp, #0
 801344a:	60f8      	str	r0, [r7, #12]
 801344c:	60b9      	str	r1, [r7, #8]
 801344e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d10a      	bne.n	801346c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013456:	f04f 0350 	mov.w	r3, #80	; 0x50
 801345a:	f383 8811 	msr	BASEPRI, r3
 801345e:	f3bf 8f6f 	isb	sy
 8013462:	f3bf 8f4f 	dsb	sy
 8013466:	617b      	str	r3, [r7, #20]
}
 8013468:	bf00      	nop
 801346a:	e7fe      	b.n	801346a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801346c:	4b0a      	ldr	r3, [pc, #40]	; (8013498 <vTaskPlaceOnEventListRestricted+0x54>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	3318      	adds	r3, #24
 8013472:	4619      	mov	r1, r3
 8013474:	68f8      	ldr	r0, [r7, #12]
 8013476:	f7fe fd0c 	bl	8011e92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d002      	beq.n	8013486 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013484:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013486:	6879      	ldr	r1, [r7, #4]
 8013488:	68b8      	ldr	r0, [r7, #8]
 801348a:	f000 facb 	bl	8013a24 <prvAddCurrentTaskToDelayedList>
	}
 801348e:	bf00      	nop
 8013490:	3718      	adds	r7, #24
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
 8013496:	bf00      	nop
 8013498:	24000e58 	.word	0x24000e58

0801349c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b086      	sub	sp, #24
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	68db      	ldr	r3, [r3, #12]
 80134a8:	68db      	ldr	r3, [r3, #12]
 80134aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80134ac:	693b      	ldr	r3, [r7, #16]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d10a      	bne.n	80134c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80134b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134b6:	f383 8811 	msr	BASEPRI, r3
 80134ba:	f3bf 8f6f 	isb	sy
 80134be:	f3bf 8f4f 	dsb	sy
 80134c2:	60fb      	str	r3, [r7, #12]
}
 80134c4:	bf00      	nop
 80134c6:	e7fe      	b.n	80134c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80134c8:	693b      	ldr	r3, [r7, #16]
 80134ca:	3318      	adds	r3, #24
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7fe fd3d 	bl	8011f4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80134d2:	4b1e      	ldr	r3, [pc, #120]	; (801354c <xTaskRemoveFromEventList+0xb0>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d11d      	bne.n	8013516 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80134da:	693b      	ldr	r3, [r7, #16]
 80134dc:	3304      	adds	r3, #4
 80134de:	4618      	mov	r0, r3
 80134e0:	f7fe fd34 	bl	8011f4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80134e4:	693b      	ldr	r3, [r7, #16]
 80134e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134e8:	4b19      	ldr	r3, [pc, #100]	; (8013550 <xTaskRemoveFromEventList+0xb4>)
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	429a      	cmp	r2, r3
 80134ee:	d903      	bls.n	80134f8 <xTaskRemoveFromEventList+0x5c>
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134f4:	4a16      	ldr	r2, [pc, #88]	; (8013550 <xTaskRemoveFromEventList+0xb4>)
 80134f6:	6013      	str	r3, [r2, #0]
 80134f8:	693b      	ldr	r3, [r7, #16]
 80134fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134fc:	4613      	mov	r3, r2
 80134fe:	009b      	lsls	r3, r3, #2
 8013500:	4413      	add	r3, r2
 8013502:	009b      	lsls	r3, r3, #2
 8013504:	4a13      	ldr	r2, [pc, #76]	; (8013554 <xTaskRemoveFromEventList+0xb8>)
 8013506:	441a      	add	r2, r3
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	3304      	adds	r3, #4
 801350c:	4619      	mov	r1, r3
 801350e:	4610      	mov	r0, r2
 8013510:	f7fe fcbf 	bl	8011e92 <vListInsertEnd>
 8013514:	e005      	b.n	8013522 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013516:	693b      	ldr	r3, [r7, #16]
 8013518:	3318      	adds	r3, #24
 801351a:	4619      	mov	r1, r3
 801351c:	480e      	ldr	r0, [pc, #56]	; (8013558 <xTaskRemoveFromEventList+0xbc>)
 801351e:	f7fe fcb8 	bl	8011e92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013526:	4b0d      	ldr	r3, [pc, #52]	; (801355c <xTaskRemoveFromEventList+0xc0>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801352c:	429a      	cmp	r2, r3
 801352e:	d905      	bls.n	801353c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013530:	2301      	movs	r3, #1
 8013532:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013534:	4b0a      	ldr	r3, [pc, #40]	; (8013560 <xTaskRemoveFromEventList+0xc4>)
 8013536:	2201      	movs	r2, #1
 8013538:	601a      	str	r2, [r3, #0]
 801353a:	e001      	b.n	8013540 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801353c:	2300      	movs	r3, #0
 801353e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013540:	697b      	ldr	r3, [r7, #20]
}
 8013542:	4618      	mov	r0, r3
 8013544:	3718      	adds	r7, #24
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}
 801354a:	bf00      	nop
 801354c:	24001354 	.word	0x24001354
 8013550:	24001334 	.word	0x24001334
 8013554:	24000e5c 	.word	0x24000e5c
 8013558:	240012ec 	.word	0x240012ec
 801355c:	24000e58 	.word	0x24000e58
 8013560:	24001340 	.word	0x24001340

08013564 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b086      	sub	sp, #24
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
 801356c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801356e:	4b29      	ldr	r3, [pc, #164]	; (8013614 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d10a      	bne.n	801358c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8013576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801357a:	f383 8811 	msr	BASEPRI, r3
 801357e:	f3bf 8f6f 	isb	sy
 8013582:	f3bf 8f4f 	dsb	sy
 8013586:	613b      	str	r3, [r7, #16]
}
 8013588:	bf00      	nop
 801358a:	e7fe      	b.n	801358a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	68db      	ldr	r3, [r3, #12]
 801359a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d10a      	bne.n	80135b8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80135a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a6:	f383 8811 	msr	BASEPRI, r3
 80135aa:	f3bf 8f6f 	isb	sy
 80135ae:	f3bf 8f4f 	dsb	sy
 80135b2:	60fb      	str	r3, [r7, #12]
}
 80135b4:	bf00      	nop
 80135b6:	e7fe      	b.n	80135b6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f7fe fcc7 	bl	8011f4c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80135be:	697b      	ldr	r3, [r7, #20]
 80135c0:	3304      	adds	r3, #4
 80135c2:	4618      	mov	r0, r3
 80135c4:	f7fe fcc2 	bl	8011f4c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135cc:	4b12      	ldr	r3, [pc, #72]	; (8013618 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	429a      	cmp	r2, r3
 80135d2:	d903      	bls.n	80135dc <vTaskRemoveFromUnorderedEventList+0x78>
 80135d4:	697b      	ldr	r3, [r7, #20]
 80135d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135d8:	4a0f      	ldr	r2, [pc, #60]	; (8013618 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80135da:	6013      	str	r3, [r2, #0]
 80135dc:	697b      	ldr	r3, [r7, #20]
 80135de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135e0:	4613      	mov	r3, r2
 80135e2:	009b      	lsls	r3, r3, #2
 80135e4:	4413      	add	r3, r2
 80135e6:	009b      	lsls	r3, r3, #2
 80135e8:	4a0c      	ldr	r2, [pc, #48]	; (801361c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80135ea:	441a      	add	r2, r3
 80135ec:	697b      	ldr	r3, [r7, #20]
 80135ee:	3304      	adds	r3, #4
 80135f0:	4619      	mov	r1, r3
 80135f2:	4610      	mov	r0, r2
 80135f4:	f7fe fc4d 	bl	8011e92 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135fc:	4b08      	ldr	r3, [pc, #32]	; (8013620 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013602:	429a      	cmp	r2, r3
 8013604:	d902      	bls.n	801360c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8013606:	4b07      	ldr	r3, [pc, #28]	; (8013624 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8013608:	2201      	movs	r2, #1
 801360a:	601a      	str	r2, [r3, #0]
	}
}
 801360c:	bf00      	nop
 801360e:	3718      	adds	r7, #24
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}
 8013614:	24001354 	.word	0x24001354
 8013618:	24001334 	.word	0x24001334
 801361c:	24000e5c 	.word	0x24000e5c
 8013620:	24000e58 	.word	0x24000e58
 8013624:	24001340 	.word	0x24001340

08013628 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013628:	b480      	push	{r7}
 801362a:	b083      	sub	sp, #12
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013630:	4b06      	ldr	r3, [pc, #24]	; (801364c <vTaskInternalSetTimeOutState+0x24>)
 8013632:	681a      	ldr	r2, [r3, #0]
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013638:	4b05      	ldr	r3, [pc, #20]	; (8013650 <vTaskInternalSetTimeOutState+0x28>)
 801363a:	681a      	ldr	r2, [r3, #0]
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	605a      	str	r2, [r3, #4]
}
 8013640:	bf00      	nop
 8013642:	370c      	adds	r7, #12
 8013644:	46bd      	mov	sp, r7
 8013646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364a:	4770      	bx	lr
 801364c:	24001344 	.word	0x24001344
 8013650:	24001330 	.word	0x24001330

08013654 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b088      	sub	sp, #32
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
 801365c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d10a      	bne.n	801367a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013668:	f383 8811 	msr	BASEPRI, r3
 801366c:	f3bf 8f6f 	isb	sy
 8013670:	f3bf 8f4f 	dsb	sy
 8013674:	613b      	str	r3, [r7, #16]
}
 8013676:	bf00      	nop
 8013678:	e7fe      	b.n	8013678 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d10a      	bne.n	8013696 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8013680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013684:	f383 8811 	msr	BASEPRI, r3
 8013688:	f3bf 8f6f 	isb	sy
 801368c:	f3bf 8f4f 	dsb	sy
 8013690:	60fb      	str	r3, [r7, #12]
}
 8013692:	bf00      	nop
 8013694:	e7fe      	b.n	8013694 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013696:	f000 feb5 	bl	8014404 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801369a:	4b1d      	ldr	r3, [pc, #116]	; (8013710 <xTaskCheckForTimeOut+0xbc>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	685b      	ldr	r3, [r3, #4]
 80136a4:	69ba      	ldr	r2, [r7, #24]
 80136a6:	1ad3      	subs	r3, r2, r3
 80136a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80136aa:	683b      	ldr	r3, [r7, #0]
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80136b2:	d102      	bne.n	80136ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80136b4:	2300      	movs	r3, #0
 80136b6:	61fb      	str	r3, [r7, #28]
 80136b8:	e023      	b.n	8013702 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681a      	ldr	r2, [r3, #0]
 80136be:	4b15      	ldr	r3, [pc, #84]	; (8013714 <xTaskCheckForTimeOut+0xc0>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d007      	beq.n	80136d6 <xTaskCheckForTimeOut+0x82>
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	685b      	ldr	r3, [r3, #4]
 80136ca:	69ba      	ldr	r2, [r7, #24]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d302      	bcc.n	80136d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80136d0:	2301      	movs	r3, #1
 80136d2:	61fb      	str	r3, [r7, #28]
 80136d4:	e015      	b.n	8013702 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	697a      	ldr	r2, [r7, #20]
 80136dc:	429a      	cmp	r2, r3
 80136de:	d20b      	bcs.n	80136f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	681a      	ldr	r2, [r3, #0]
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	1ad2      	subs	r2, r2, r3
 80136e8:	683b      	ldr	r3, [r7, #0]
 80136ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f7ff ff9b 	bl	8013628 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80136f2:	2300      	movs	r3, #0
 80136f4:	61fb      	str	r3, [r7, #28]
 80136f6:	e004      	b.n	8013702 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	2200      	movs	r2, #0
 80136fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80136fe:	2301      	movs	r3, #1
 8013700:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013702:	f000 feaf 	bl	8014464 <vPortExitCritical>

	return xReturn;
 8013706:	69fb      	ldr	r3, [r7, #28]
}
 8013708:	4618      	mov	r0, r3
 801370a:	3720      	adds	r7, #32
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	24001330 	.word	0x24001330
 8013714:	24001344 	.word	0x24001344

08013718 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013718:	b480      	push	{r7}
 801371a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801371c:	4b03      	ldr	r3, [pc, #12]	; (801372c <vTaskMissedYield+0x14>)
 801371e:	2201      	movs	r2, #1
 8013720:	601a      	str	r2, [r3, #0]
}
 8013722:	bf00      	nop
 8013724:	46bd      	mov	sp, r7
 8013726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372a:	4770      	bx	lr
 801372c:	24001340 	.word	0x24001340

08013730 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b082      	sub	sp, #8
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013738:	f000 f852 	bl	80137e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801373c:	4b06      	ldr	r3, [pc, #24]	; (8013758 <prvIdleTask+0x28>)
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	2b01      	cmp	r3, #1
 8013742:	d9f9      	bls.n	8013738 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013744:	4b05      	ldr	r3, [pc, #20]	; (801375c <prvIdleTask+0x2c>)
 8013746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801374a:	601a      	str	r2, [r3, #0]
 801374c:	f3bf 8f4f 	dsb	sy
 8013750:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013754:	e7f0      	b.n	8013738 <prvIdleTask+0x8>
 8013756:	bf00      	nop
 8013758:	24000e5c 	.word	0x24000e5c
 801375c:	e000ed04 	.word	0xe000ed04

08013760 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b082      	sub	sp, #8
 8013764:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013766:	2300      	movs	r3, #0
 8013768:	607b      	str	r3, [r7, #4]
 801376a:	e00c      	b.n	8013786 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801376c:	687a      	ldr	r2, [r7, #4]
 801376e:	4613      	mov	r3, r2
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	4413      	add	r3, r2
 8013774:	009b      	lsls	r3, r3, #2
 8013776:	4a12      	ldr	r2, [pc, #72]	; (80137c0 <prvInitialiseTaskLists+0x60>)
 8013778:	4413      	add	r3, r2
 801377a:	4618      	mov	r0, r3
 801377c:	f7fe fb5c 	bl	8011e38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	3301      	adds	r3, #1
 8013784:	607b      	str	r3, [r7, #4]
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2b37      	cmp	r3, #55	; 0x37
 801378a:	d9ef      	bls.n	801376c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801378c:	480d      	ldr	r0, [pc, #52]	; (80137c4 <prvInitialiseTaskLists+0x64>)
 801378e:	f7fe fb53 	bl	8011e38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013792:	480d      	ldr	r0, [pc, #52]	; (80137c8 <prvInitialiseTaskLists+0x68>)
 8013794:	f7fe fb50 	bl	8011e38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013798:	480c      	ldr	r0, [pc, #48]	; (80137cc <prvInitialiseTaskLists+0x6c>)
 801379a:	f7fe fb4d 	bl	8011e38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801379e:	480c      	ldr	r0, [pc, #48]	; (80137d0 <prvInitialiseTaskLists+0x70>)
 80137a0:	f7fe fb4a 	bl	8011e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80137a4:	480b      	ldr	r0, [pc, #44]	; (80137d4 <prvInitialiseTaskLists+0x74>)
 80137a6:	f7fe fb47 	bl	8011e38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80137aa:	4b0b      	ldr	r3, [pc, #44]	; (80137d8 <prvInitialiseTaskLists+0x78>)
 80137ac:	4a05      	ldr	r2, [pc, #20]	; (80137c4 <prvInitialiseTaskLists+0x64>)
 80137ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80137b0:	4b0a      	ldr	r3, [pc, #40]	; (80137dc <prvInitialiseTaskLists+0x7c>)
 80137b2:	4a05      	ldr	r2, [pc, #20]	; (80137c8 <prvInitialiseTaskLists+0x68>)
 80137b4:	601a      	str	r2, [r3, #0]
}
 80137b6:	bf00      	nop
 80137b8:	3708      	adds	r7, #8
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
 80137be:	bf00      	nop
 80137c0:	24000e5c 	.word	0x24000e5c
 80137c4:	240012bc 	.word	0x240012bc
 80137c8:	240012d0 	.word	0x240012d0
 80137cc:	240012ec 	.word	0x240012ec
 80137d0:	24001300 	.word	0x24001300
 80137d4:	24001318 	.word	0x24001318
 80137d8:	240012e4 	.word	0x240012e4
 80137dc:	240012e8 	.word	0x240012e8

080137e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b082      	sub	sp, #8
 80137e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80137e6:	e019      	b.n	801381c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80137e8:	f000 fe0c 	bl	8014404 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80137ec:	4b10      	ldr	r3, [pc, #64]	; (8013830 <prvCheckTasksWaitingTermination+0x50>)
 80137ee:	68db      	ldr	r3, [r3, #12]
 80137f0:	68db      	ldr	r3, [r3, #12]
 80137f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	3304      	adds	r3, #4
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7fe fba7 	bl	8011f4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80137fe:	4b0d      	ldr	r3, [pc, #52]	; (8013834 <prvCheckTasksWaitingTermination+0x54>)
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	3b01      	subs	r3, #1
 8013804:	4a0b      	ldr	r2, [pc, #44]	; (8013834 <prvCheckTasksWaitingTermination+0x54>)
 8013806:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013808:	4b0b      	ldr	r3, [pc, #44]	; (8013838 <prvCheckTasksWaitingTermination+0x58>)
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	3b01      	subs	r3, #1
 801380e:	4a0a      	ldr	r2, [pc, #40]	; (8013838 <prvCheckTasksWaitingTermination+0x58>)
 8013810:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013812:	f000 fe27 	bl	8014464 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013816:	6878      	ldr	r0, [r7, #4]
 8013818:	f000 f810 	bl	801383c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801381c:	4b06      	ldr	r3, [pc, #24]	; (8013838 <prvCheckTasksWaitingTermination+0x58>)
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d1e1      	bne.n	80137e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013824:	bf00      	nop
 8013826:	bf00      	nop
 8013828:	3708      	adds	r7, #8
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}
 801382e:	bf00      	nop
 8013830:	24001300 	.word	0x24001300
 8013834:	2400132c 	.word	0x2400132c
 8013838:	24001314 	.word	0x24001314

0801383c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801383c:	b580      	push	{r7, lr}
 801383e:	b084      	sub	sp, #16
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801384a:	2b00      	cmp	r3, #0
 801384c:	d108      	bne.n	8013860 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013852:	4618      	mov	r0, r3
 8013854:	f000 ffc4 	bl	80147e0 <vPortFree>
				vPortFree( pxTCB );
 8013858:	6878      	ldr	r0, [r7, #4]
 801385a:	f000 ffc1 	bl	80147e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801385e:	e018      	b.n	8013892 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013866:	2b01      	cmp	r3, #1
 8013868:	d103      	bne.n	8013872 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f000 ffb8 	bl	80147e0 <vPortFree>
	}
 8013870:	e00f      	b.n	8013892 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8013878:	2b02      	cmp	r3, #2
 801387a:	d00a      	beq.n	8013892 <prvDeleteTCB+0x56>
	__asm volatile
 801387c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013880:	f383 8811 	msr	BASEPRI, r3
 8013884:	f3bf 8f6f 	isb	sy
 8013888:	f3bf 8f4f 	dsb	sy
 801388c:	60fb      	str	r3, [r7, #12]
}
 801388e:	bf00      	nop
 8013890:	e7fe      	b.n	8013890 <prvDeleteTCB+0x54>
	}
 8013892:	bf00      	nop
 8013894:	3710      	adds	r7, #16
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}
	...

0801389c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801389c:	b480      	push	{r7}
 801389e:	b083      	sub	sp, #12
 80138a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80138a2:	4b0c      	ldr	r3, [pc, #48]	; (80138d4 <prvResetNextTaskUnblockTime+0x38>)
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d104      	bne.n	80138b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80138ac:	4b0a      	ldr	r3, [pc, #40]	; (80138d8 <prvResetNextTaskUnblockTime+0x3c>)
 80138ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80138b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80138b4:	e008      	b.n	80138c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80138b6:	4b07      	ldr	r3, [pc, #28]	; (80138d4 <prvResetNextTaskUnblockTime+0x38>)
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	68db      	ldr	r3, [r3, #12]
 80138bc:	68db      	ldr	r3, [r3, #12]
 80138be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	685b      	ldr	r3, [r3, #4]
 80138c4:	4a04      	ldr	r2, [pc, #16]	; (80138d8 <prvResetNextTaskUnblockTime+0x3c>)
 80138c6:	6013      	str	r3, [r2, #0]
}
 80138c8:	bf00      	nop
 80138ca:	370c      	adds	r7, #12
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr
 80138d4:	240012e4 	.word	0x240012e4
 80138d8:	2400134c 	.word	0x2400134c

080138dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80138dc:	b480      	push	{r7}
 80138de:	b083      	sub	sp, #12
 80138e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80138e2:	4b0b      	ldr	r3, [pc, #44]	; (8013910 <xTaskGetSchedulerState+0x34>)
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d102      	bne.n	80138f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80138ea:	2301      	movs	r3, #1
 80138ec:	607b      	str	r3, [r7, #4]
 80138ee:	e008      	b.n	8013902 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80138f0:	4b08      	ldr	r3, [pc, #32]	; (8013914 <xTaskGetSchedulerState+0x38>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d102      	bne.n	80138fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80138f8:	2302      	movs	r3, #2
 80138fa:	607b      	str	r3, [r7, #4]
 80138fc:	e001      	b.n	8013902 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80138fe:	2300      	movs	r3, #0
 8013900:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013902:	687b      	ldr	r3, [r7, #4]
	}
 8013904:	4618      	mov	r0, r3
 8013906:	370c      	adds	r7, #12
 8013908:	46bd      	mov	sp, r7
 801390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390e:	4770      	bx	lr
 8013910:	24001338 	.word	0x24001338
 8013914:	24001354 	.word	0x24001354

08013918 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013918:	b580      	push	{r7, lr}
 801391a:	b086      	sub	sp, #24
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013924:	2300      	movs	r3, #0
 8013926:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d056      	beq.n	80139dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801392e:	4b2e      	ldr	r3, [pc, #184]	; (80139e8 <xTaskPriorityDisinherit+0xd0>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	693a      	ldr	r2, [r7, #16]
 8013934:	429a      	cmp	r2, r3
 8013936:	d00a      	beq.n	801394e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801393c:	f383 8811 	msr	BASEPRI, r3
 8013940:	f3bf 8f6f 	isb	sy
 8013944:	f3bf 8f4f 	dsb	sy
 8013948:	60fb      	str	r3, [r7, #12]
}
 801394a:	bf00      	nop
 801394c:	e7fe      	b.n	801394c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013952:	2b00      	cmp	r3, #0
 8013954:	d10a      	bne.n	801396c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801395a:	f383 8811 	msr	BASEPRI, r3
 801395e:	f3bf 8f6f 	isb	sy
 8013962:	f3bf 8f4f 	dsb	sy
 8013966:	60bb      	str	r3, [r7, #8]
}
 8013968:	bf00      	nop
 801396a:	e7fe      	b.n	801396a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013970:	1e5a      	subs	r2, r3, #1
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801397e:	429a      	cmp	r2, r3
 8013980:	d02c      	beq.n	80139dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013986:	2b00      	cmp	r3, #0
 8013988:	d128      	bne.n	80139dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	3304      	adds	r3, #4
 801398e:	4618      	mov	r0, r3
 8013990:	f7fe fadc 	bl	8011f4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013998:	693b      	ldr	r3, [r7, #16]
 801399a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801399c:	693b      	ldr	r3, [r7, #16]
 801399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80139a4:	693b      	ldr	r3, [r7, #16]
 80139a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80139a8:	693b      	ldr	r3, [r7, #16]
 80139aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139ac:	4b0f      	ldr	r3, [pc, #60]	; (80139ec <xTaskPriorityDisinherit+0xd4>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d903      	bls.n	80139bc <xTaskPriorityDisinherit+0xa4>
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139b8:	4a0c      	ldr	r2, [pc, #48]	; (80139ec <xTaskPriorityDisinherit+0xd4>)
 80139ba:	6013      	str	r3, [r2, #0]
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139c0:	4613      	mov	r3, r2
 80139c2:	009b      	lsls	r3, r3, #2
 80139c4:	4413      	add	r3, r2
 80139c6:	009b      	lsls	r3, r3, #2
 80139c8:	4a09      	ldr	r2, [pc, #36]	; (80139f0 <xTaskPriorityDisinherit+0xd8>)
 80139ca:	441a      	add	r2, r3
 80139cc:	693b      	ldr	r3, [r7, #16]
 80139ce:	3304      	adds	r3, #4
 80139d0:	4619      	mov	r1, r3
 80139d2:	4610      	mov	r0, r2
 80139d4:	f7fe fa5d 	bl	8011e92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80139d8:	2301      	movs	r3, #1
 80139da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80139dc:	697b      	ldr	r3, [r7, #20]
	}
 80139de:	4618      	mov	r0, r3
 80139e0:	3718      	adds	r7, #24
 80139e2:	46bd      	mov	sp, r7
 80139e4:	bd80      	pop	{r7, pc}
 80139e6:	bf00      	nop
 80139e8:	24000e58 	.word	0x24000e58
 80139ec:	24001334 	.word	0x24001334
 80139f0:	24000e5c 	.word	0x24000e5c

080139f4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80139f4:	b480      	push	{r7}
 80139f6:	b083      	sub	sp, #12
 80139f8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80139fa:	4b09      	ldr	r3, [pc, #36]	; (8013a20 <uxTaskResetEventItemValue+0x2c>)
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	699b      	ldr	r3, [r3, #24]
 8013a00:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a02:	4b07      	ldr	r3, [pc, #28]	; (8013a20 <uxTaskResetEventItemValue+0x2c>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a08:	4b05      	ldr	r3, [pc, #20]	; (8013a20 <uxTaskResetEventItemValue+0x2c>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8013a10:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8013a12:	687b      	ldr	r3, [r7, #4]
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	370c      	adds	r7, #12
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr
 8013a20:	24000e58 	.word	0x24000e58

08013a24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b084      	sub	sp, #16
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
 8013a2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013a2e:	4b21      	ldr	r3, [pc, #132]	; (8013ab4 <prvAddCurrentTaskToDelayedList+0x90>)
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013a34:	4b20      	ldr	r3, [pc, #128]	; (8013ab8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	3304      	adds	r3, #4
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7fe fa86 	bl	8011f4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a46:	d10a      	bne.n	8013a5e <prvAddCurrentTaskToDelayedList+0x3a>
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d007      	beq.n	8013a5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013a4e:	4b1a      	ldr	r3, [pc, #104]	; (8013ab8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	3304      	adds	r3, #4
 8013a54:	4619      	mov	r1, r3
 8013a56:	4819      	ldr	r0, [pc, #100]	; (8013abc <prvAddCurrentTaskToDelayedList+0x98>)
 8013a58:	f7fe fa1b 	bl	8011e92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013a5c:	e026      	b.n	8013aac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013a5e:	68fa      	ldr	r2, [r7, #12]
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	4413      	add	r3, r2
 8013a64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013a66:	4b14      	ldr	r3, [pc, #80]	; (8013ab8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	68ba      	ldr	r2, [r7, #8]
 8013a6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013a6e:	68ba      	ldr	r2, [r7, #8]
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	429a      	cmp	r2, r3
 8013a74:	d209      	bcs.n	8013a8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013a76:	4b12      	ldr	r3, [pc, #72]	; (8013ac0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013a78:	681a      	ldr	r2, [r3, #0]
 8013a7a:	4b0f      	ldr	r3, [pc, #60]	; (8013ab8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	3304      	adds	r3, #4
 8013a80:	4619      	mov	r1, r3
 8013a82:	4610      	mov	r0, r2
 8013a84:	f7fe fa29 	bl	8011eda <vListInsert>
}
 8013a88:	e010      	b.n	8013aac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013a8a:	4b0e      	ldr	r3, [pc, #56]	; (8013ac4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013a8c:	681a      	ldr	r2, [r3, #0]
 8013a8e:	4b0a      	ldr	r3, [pc, #40]	; (8013ab8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	3304      	adds	r3, #4
 8013a94:	4619      	mov	r1, r3
 8013a96:	4610      	mov	r0, r2
 8013a98:	f7fe fa1f 	bl	8011eda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013a9c:	4b0a      	ldr	r3, [pc, #40]	; (8013ac8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	68ba      	ldr	r2, [r7, #8]
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d202      	bcs.n	8013aac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013aa6:	4a08      	ldr	r2, [pc, #32]	; (8013ac8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	6013      	str	r3, [r2, #0]
}
 8013aac:	bf00      	nop
 8013aae:	3710      	adds	r7, #16
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}
 8013ab4:	24001330 	.word	0x24001330
 8013ab8:	24000e58 	.word	0x24000e58
 8013abc:	24001318 	.word	0x24001318
 8013ac0:	240012e8 	.word	0x240012e8
 8013ac4:	240012e4 	.word	0x240012e4
 8013ac8:	2400134c 	.word	0x2400134c

08013acc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b08a      	sub	sp, #40	; 0x28
 8013ad0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013ad6:	f000 fb07 	bl	80140e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013ada:	4b1c      	ldr	r3, [pc, #112]	; (8013b4c <xTimerCreateTimerTask+0x80>)
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d021      	beq.n	8013b26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013aea:	1d3a      	adds	r2, r7, #4
 8013aec:	f107 0108 	add.w	r1, r7, #8
 8013af0:	f107 030c 	add.w	r3, r7, #12
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7fd ff97 	bl	8011a28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013afa:	6879      	ldr	r1, [r7, #4]
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	68fa      	ldr	r2, [r7, #12]
 8013b00:	9202      	str	r2, [sp, #8]
 8013b02:	9301      	str	r3, [sp, #4]
 8013b04:	2302      	movs	r3, #2
 8013b06:	9300      	str	r3, [sp, #0]
 8013b08:	2300      	movs	r3, #0
 8013b0a:	460a      	mov	r2, r1
 8013b0c:	4910      	ldr	r1, [pc, #64]	; (8013b50 <xTimerCreateTimerTask+0x84>)
 8013b0e:	4811      	ldr	r0, [pc, #68]	; (8013b54 <xTimerCreateTimerTask+0x88>)
 8013b10:	f7ff f828 	bl	8012b64 <xTaskCreateStatic>
 8013b14:	4603      	mov	r3, r0
 8013b16:	4a10      	ldr	r2, [pc, #64]	; (8013b58 <xTimerCreateTimerTask+0x8c>)
 8013b18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013b1a:	4b0f      	ldr	r3, [pc, #60]	; (8013b58 <xTimerCreateTimerTask+0x8c>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d001      	beq.n	8013b26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013b22:	2301      	movs	r3, #1
 8013b24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013b26:	697b      	ldr	r3, [r7, #20]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d10a      	bne.n	8013b42 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b30:	f383 8811 	msr	BASEPRI, r3
 8013b34:	f3bf 8f6f 	isb	sy
 8013b38:	f3bf 8f4f 	dsb	sy
 8013b3c:	613b      	str	r3, [r7, #16]
}
 8013b3e:	bf00      	nop
 8013b40:	e7fe      	b.n	8013b40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013b42:	697b      	ldr	r3, [r7, #20]
}
 8013b44:	4618      	mov	r0, r3
 8013b46:	3718      	adds	r7, #24
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}
 8013b4c:	24001388 	.word	0x24001388
 8013b50:	08015cf0 	.word	0x08015cf0
 8013b54:	08013c91 	.word	0x08013c91
 8013b58:	2400138c 	.word	0x2400138c

08013b5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b08a      	sub	sp, #40	; 0x28
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	60f8      	str	r0, [r7, #12]
 8013b64:	60b9      	str	r1, [r7, #8]
 8013b66:	607a      	str	r2, [r7, #4]
 8013b68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d10a      	bne.n	8013b8a <xTimerGenericCommand+0x2e>
	__asm volatile
 8013b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b78:	f383 8811 	msr	BASEPRI, r3
 8013b7c:	f3bf 8f6f 	isb	sy
 8013b80:	f3bf 8f4f 	dsb	sy
 8013b84:	623b      	str	r3, [r7, #32]
}
 8013b86:	bf00      	nop
 8013b88:	e7fe      	b.n	8013b88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013b8a:	4b1a      	ldr	r3, [pc, #104]	; (8013bf4 <xTimerGenericCommand+0x98>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d02a      	beq.n	8013be8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013b9e:	68bb      	ldr	r3, [r7, #8]
 8013ba0:	2b05      	cmp	r3, #5
 8013ba2:	dc18      	bgt.n	8013bd6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013ba4:	f7ff fe9a 	bl	80138dc <xTaskGetSchedulerState>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	2b02      	cmp	r3, #2
 8013bac:	d109      	bne.n	8013bc2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013bae:	4b11      	ldr	r3, [pc, #68]	; (8013bf4 <xTimerGenericCommand+0x98>)
 8013bb0:	6818      	ldr	r0, [r3, #0]
 8013bb2:	f107 0110 	add.w	r1, r7, #16
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013bba:	f7fe fb2f 	bl	801221c <xQueueGenericSend>
 8013bbe:	6278      	str	r0, [r7, #36]	; 0x24
 8013bc0:	e012      	b.n	8013be8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013bc2:	4b0c      	ldr	r3, [pc, #48]	; (8013bf4 <xTimerGenericCommand+0x98>)
 8013bc4:	6818      	ldr	r0, [r3, #0]
 8013bc6:	f107 0110 	add.w	r1, r7, #16
 8013bca:	2300      	movs	r3, #0
 8013bcc:	2200      	movs	r2, #0
 8013bce:	f7fe fb25 	bl	801221c <xQueueGenericSend>
 8013bd2:	6278      	str	r0, [r7, #36]	; 0x24
 8013bd4:	e008      	b.n	8013be8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013bd6:	4b07      	ldr	r3, [pc, #28]	; (8013bf4 <xTimerGenericCommand+0x98>)
 8013bd8:	6818      	ldr	r0, [r3, #0]
 8013bda:	f107 0110 	add.w	r1, r7, #16
 8013bde:	2300      	movs	r3, #0
 8013be0:	683a      	ldr	r2, [r7, #0]
 8013be2:	f7fe fc19 	bl	8012418 <xQueueGenericSendFromISR>
 8013be6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013bea:	4618      	mov	r0, r3
 8013bec:	3728      	adds	r7, #40	; 0x28
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}
 8013bf2:	bf00      	nop
 8013bf4:	24001388 	.word	0x24001388

08013bf8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b088      	sub	sp, #32
 8013bfc:	af02      	add	r7, sp, #8
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c02:	4b22      	ldr	r3, [pc, #136]	; (8013c8c <prvProcessExpiredTimer+0x94>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	68db      	ldr	r3, [r3, #12]
 8013c08:	68db      	ldr	r3, [r3, #12]
 8013c0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013c0c:	697b      	ldr	r3, [r7, #20]
 8013c0e:	3304      	adds	r3, #4
 8013c10:	4618      	mov	r0, r3
 8013c12:	f7fe f99b 	bl	8011f4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013c16:	697b      	ldr	r3, [r7, #20]
 8013c18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c1c:	f003 0304 	and.w	r3, r3, #4
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d022      	beq.n	8013c6a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	699a      	ldr	r2, [r3, #24]
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	18d1      	adds	r1, r2, r3
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	683a      	ldr	r2, [r7, #0]
 8013c30:	6978      	ldr	r0, [r7, #20]
 8013c32:	f000 f8d1 	bl	8013dd8 <prvInsertTimerInActiveList>
 8013c36:	4603      	mov	r3, r0
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d01f      	beq.n	8013c7c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	9300      	str	r3, [sp, #0]
 8013c40:	2300      	movs	r3, #0
 8013c42:	687a      	ldr	r2, [r7, #4]
 8013c44:	2100      	movs	r1, #0
 8013c46:	6978      	ldr	r0, [r7, #20]
 8013c48:	f7ff ff88 	bl	8013b5c <xTimerGenericCommand>
 8013c4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d113      	bne.n	8013c7c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c58:	f383 8811 	msr	BASEPRI, r3
 8013c5c:	f3bf 8f6f 	isb	sy
 8013c60:	f3bf 8f4f 	dsb	sy
 8013c64:	60fb      	str	r3, [r7, #12]
}
 8013c66:	bf00      	nop
 8013c68:	e7fe      	b.n	8013c68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013c6a:	697b      	ldr	r3, [r7, #20]
 8013c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c70:	f023 0301 	bic.w	r3, r3, #1
 8013c74:	b2da      	uxtb	r2, r3
 8013c76:	697b      	ldr	r3, [r7, #20]
 8013c78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	6a1b      	ldr	r3, [r3, #32]
 8013c80:	6978      	ldr	r0, [r7, #20]
 8013c82:	4798      	blx	r3
}
 8013c84:	bf00      	nop
 8013c86:	3718      	adds	r7, #24
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}
 8013c8c:	24001380 	.word	0x24001380

08013c90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013c98:	f107 0308 	add.w	r3, r7, #8
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f000 f857 	bl	8013d50 <prvGetNextExpireTime>
 8013ca2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	4619      	mov	r1, r3
 8013ca8:	68f8      	ldr	r0, [r7, #12]
 8013caa:	f000 f803 	bl	8013cb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013cae:	f000 f8d5 	bl	8013e5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013cb2:	e7f1      	b.n	8013c98 <prvTimerTask+0x8>

08013cb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b084      	sub	sp, #16
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
 8013cbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013cbe:	f7ff f98d 	bl	8012fdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013cc2:	f107 0308 	add.w	r3, r7, #8
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f000 f866 	bl	8013d98 <prvSampleTimeNow>
 8013ccc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013cce:	68bb      	ldr	r3, [r7, #8]
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d130      	bne.n	8013d36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013cd4:	683b      	ldr	r3, [r7, #0]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d10a      	bne.n	8013cf0 <prvProcessTimerOrBlockTask+0x3c>
 8013cda:	687a      	ldr	r2, [r7, #4]
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	d806      	bhi.n	8013cf0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013ce2:	f7ff f989 	bl	8012ff8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013ce6:	68f9      	ldr	r1, [r7, #12]
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f7ff ff85 	bl	8013bf8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013cee:	e024      	b.n	8013d3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013cf0:	683b      	ldr	r3, [r7, #0]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d008      	beq.n	8013d08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013cf6:	4b13      	ldr	r3, [pc, #76]	; (8013d44 <prvProcessTimerOrBlockTask+0x90>)
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d101      	bne.n	8013d04 <prvProcessTimerOrBlockTask+0x50>
 8013d00:	2301      	movs	r3, #1
 8013d02:	e000      	b.n	8013d06 <prvProcessTimerOrBlockTask+0x52>
 8013d04:	2300      	movs	r3, #0
 8013d06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013d08:	4b0f      	ldr	r3, [pc, #60]	; (8013d48 <prvProcessTimerOrBlockTask+0x94>)
 8013d0a:	6818      	ldr	r0, [r3, #0]
 8013d0c:	687a      	ldr	r2, [r7, #4]
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	1ad3      	subs	r3, r2, r3
 8013d12:	683a      	ldr	r2, [r7, #0]
 8013d14:	4619      	mov	r1, r3
 8013d16:	f7fe fef1 	bl	8012afc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013d1a:	f7ff f96d 	bl	8012ff8 <xTaskResumeAll>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d10a      	bne.n	8013d3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013d24:	4b09      	ldr	r3, [pc, #36]	; (8013d4c <prvProcessTimerOrBlockTask+0x98>)
 8013d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d2a:	601a      	str	r2, [r3, #0]
 8013d2c:	f3bf 8f4f 	dsb	sy
 8013d30:	f3bf 8f6f 	isb	sy
}
 8013d34:	e001      	b.n	8013d3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013d36:	f7ff f95f 	bl	8012ff8 <xTaskResumeAll>
}
 8013d3a:	bf00      	nop
 8013d3c:	3710      	adds	r7, #16
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}
 8013d42:	bf00      	nop
 8013d44:	24001384 	.word	0x24001384
 8013d48:	24001388 	.word	0x24001388
 8013d4c:	e000ed04 	.word	0xe000ed04

08013d50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013d50:	b480      	push	{r7}
 8013d52:	b085      	sub	sp, #20
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013d58:	4b0e      	ldr	r3, [pc, #56]	; (8013d94 <prvGetNextExpireTime+0x44>)
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d101      	bne.n	8013d66 <prvGetNextExpireTime+0x16>
 8013d62:	2201      	movs	r2, #1
 8013d64:	e000      	b.n	8013d68 <prvGetNextExpireTime+0x18>
 8013d66:	2200      	movs	r2, #0
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d105      	bne.n	8013d80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013d74:	4b07      	ldr	r3, [pc, #28]	; (8013d94 <prvGetNextExpireTime+0x44>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	68db      	ldr	r3, [r3, #12]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	60fb      	str	r3, [r7, #12]
 8013d7e:	e001      	b.n	8013d84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013d80:	2300      	movs	r3, #0
 8013d82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013d84:	68fb      	ldr	r3, [r7, #12]
}
 8013d86:	4618      	mov	r0, r3
 8013d88:	3714      	adds	r7, #20
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d90:	4770      	bx	lr
 8013d92:	bf00      	nop
 8013d94:	24001380 	.word	0x24001380

08013d98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b084      	sub	sp, #16
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013da0:	f7ff f9c8 	bl	8013134 <xTaskGetTickCount>
 8013da4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013da6:	4b0b      	ldr	r3, [pc, #44]	; (8013dd4 <prvSampleTimeNow+0x3c>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	68fa      	ldr	r2, [r7, #12]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d205      	bcs.n	8013dbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013db0:	f000 f936 	bl	8014020 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2201      	movs	r2, #1
 8013db8:	601a      	str	r2, [r3, #0]
 8013dba:	e002      	b.n	8013dc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013dc2:	4a04      	ldr	r2, [pc, #16]	; (8013dd4 <prvSampleTimeNow+0x3c>)
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013dc8:	68fb      	ldr	r3, [r7, #12]
}
 8013dca:	4618      	mov	r0, r3
 8013dcc:	3710      	adds	r7, #16
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	bd80      	pop	{r7, pc}
 8013dd2:	bf00      	nop
 8013dd4:	24001390 	.word	0x24001390

08013dd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b086      	sub	sp, #24
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	60f8      	str	r0, [r7, #12]
 8013de0:	60b9      	str	r1, [r7, #8]
 8013de2:	607a      	str	r2, [r7, #4]
 8013de4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013de6:	2300      	movs	r3, #0
 8013de8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	68ba      	ldr	r2, [r7, #8]
 8013dee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	68fa      	ldr	r2, [r7, #12]
 8013df4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013df6:	68ba      	ldr	r2, [r7, #8]
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d812      	bhi.n	8013e24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013dfe:	687a      	ldr	r2, [r7, #4]
 8013e00:	683b      	ldr	r3, [r7, #0]
 8013e02:	1ad2      	subs	r2, r2, r3
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	699b      	ldr	r3, [r3, #24]
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	d302      	bcc.n	8013e12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013e0c:	2301      	movs	r3, #1
 8013e0e:	617b      	str	r3, [r7, #20]
 8013e10:	e01b      	b.n	8013e4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013e12:	4b10      	ldr	r3, [pc, #64]	; (8013e54 <prvInsertTimerInActiveList+0x7c>)
 8013e14:	681a      	ldr	r2, [r3, #0]
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	3304      	adds	r3, #4
 8013e1a:	4619      	mov	r1, r3
 8013e1c:	4610      	mov	r0, r2
 8013e1e:	f7fe f85c 	bl	8011eda <vListInsert>
 8013e22:	e012      	b.n	8013e4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013e24:	687a      	ldr	r2, [r7, #4]
 8013e26:	683b      	ldr	r3, [r7, #0]
 8013e28:	429a      	cmp	r2, r3
 8013e2a:	d206      	bcs.n	8013e3a <prvInsertTimerInActiveList+0x62>
 8013e2c:	68ba      	ldr	r2, [r7, #8]
 8013e2e:	683b      	ldr	r3, [r7, #0]
 8013e30:	429a      	cmp	r2, r3
 8013e32:	d302      	bcc.n	8013e3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013e34:	2301      	movs	r3, #1
 8013e36:	617b      	str	r3, [r7, #20]
 8013e38:	e007      	b.n	8013e4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013e3a:	4b07      	ldr	r3, [pc, #28]	; (8013e58 <prvInsertTimerInActiveList+0x80>)
 8013e3c:	681a      	ldr	r2, [r3, #0]
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	3304      	adds	r3, #4
 8013e42:	4619      	mov	r1, r3
 8013e44:	4610      	mov	r0, r2
 8013e46:	f7fe f848 	bl	8011eda <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013e4a:	697b      	ldr	r3, [r7, #20]
}
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	3718      	adds	r7, #24
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}
 8013e54:	24001384 	.word	0x24001384
 8013e58:	24001380 	.word	0x24001380

08013e5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b08e      	sub	sp, #56	; 0x38
 8013e60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013e62:	e0ca      	b.n	8013ffa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	da18      	bge.n	8013e9c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013e6a:	1d3b      	adds	r3, r7, #4
 8013e6c:	3304      	adds	r3, #4
 8013e6e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d10a      	bne.n	8013e8c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e7a:	f383 8811 	msr	BASEPRI, r3
 8013e7e:	f3bf 8f6f 	isb	sy
 8013e82:	f3bf 8f4f 	dsb	sy
 8013e86:	61fb      	str	r3, [r7, #28]
}
 8013e88:	bf00      	nop
 8013e8a:	e7fe      	b.n	8013e8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e92:	6850      	ldr	r0, [r2, #4]
 8013e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e96:	6892      	ldr	r2, [r2, #8]
 8013e98:	4611      	mov	r1, r2
 8013e9a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	f2c0 80aa 	blt.w	8013ff8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eaa:	695b      	ldr	r3, [r3, #20]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d004      	beq.n	8013eba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb2:	3304      	adds	r3, #4
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7fe f849 	bl	8011f4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013eba:	463b      	mov	r3, r7
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f7ff ff6b 	bl	8013d98 <prvSampleTimeNow>
 8013ec2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	2b09      	cmp	r3, #9
 8013ec8:	f200 8097 	bhi.w	8013ffa <prvProcessReceivedCommands+0x19e>
 8013ecc:	a201      	add	r2, pc, #4	; (adr r2, 8013ed4 <prvProcessReceivedCommands+0x78>)
 8013ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ed2:	bf00      	nop
 8013ed4:	08013efd 	.word	0x08013efd
 8013ed8:	08013efd 	.word	0x08013efd
 8013edc:	08013efd 	.word	0x08013efd
 8013ee0:	08013f71 	.word	0x08013f71
 8013ee4:	08013f85 	.word	0x08013f85
 8013ee8:	08013fcf 	.word	0x08013fcf
 8013eec:	08013efd 	.word	0x08013efd
 8013ef0:	08013efd 	.word	0x08013efd
 8013ef4:	08013f71 	.word	0x08013f71
 8013ef8:	08013f85 	.word	0x08013f85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013efe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f02:	f043 0301 	orr.w	r3, r3, #1
 8013f06:	b2da      	uxtb	r2, r3
 8013f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013f0e:	68ba      	ldr	r2, [r7, #8]
 8013f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f12:	699b      	ldr	r3, [r3, #24]
 8013f14:	18d1      	adds	r1, r2, r3
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f1c:	f7ff ff5c 	bl	8013dd8 <prvInsertTimerInActiveList>
 8013f20:	4603      	mov	r3, r0
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d069      	beq.n	8013ffa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f28:	6a1b      	ldr	r3, [r3, #32]
 8013f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f34:	f003 0304 	and.w	r3, r3, #4
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d05e      	beq.n	8013ffa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013f3c:	68ba      	ldr	r2, [r7, #8]
 8013f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f40:	699b      	ldr	r3, [r3, #24]
 8013f42:	441a      	add	r2, r3
 8013f44:	2300      	movs	r3, #0
 8013f46:	9300      	str	r3, [sp, #0]
 8013f48:	2300      	movs	r3, #0
 8013f4a:	2100      	movs	r1, #0
 8013f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f4e:	f7ff fe05 	bl	8013b5c <xTimerGenericCommand>
 8013f52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013f54:	6a3b      	ldr	r3, [r7, #32]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d14f      	bne.n	8013ffa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f5e:	f383 8811 	msr	BASEPRI, r3
 8013f62:	f3bf 8f6f 	isb	sy
 8013f66:	f3bf 8f4f 	dsb	sy
 8013f6a:	61bb      	str	r3, [r7, #24]
}
 8013f6c:	bf00      	nop
 8013f6e:	e7fe      	b.n	8013f6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f76:	f023 0301 	bic.w	r3, r3, #1
 8013f7a:	b2da      	uxtb	r2, r3
 8013f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013f82:	e03a      	b.n	8013ffa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f8a:	f043 0301 	orr.w	r3, r3, #1
 8013f8e:	b2da      	uxtb	r2, r3
 8013f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013f96:	68ba      	ldr	r2, [r7, #8]
 8013f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f9e:	699b      	ldr	r3, [r3, #24]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d10a      	bne.n	8013fba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa8:	f383 8811 	msr	BASEPRI, r3
 8013fac:	f3bf 8f6f 	isb	sy
 8013fb0:	f3bf 8f4f 	dsb	sy
 8013fb4:	617b      	str	r3, [r7, #20]
}
 8013fb6:	bf00      	nop
 8013fb8:	e7fe      	b.n	8013fb8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fbc:	699a      	ldr	r2, [r3, #24]
 8013fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc0:	18d1      	adds	r1, r2, r3
 8013fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fc8:	f7ff ff06 	bl	8013dd8 <prvInsertTimerInActiveList>
					break;
 8013fcc:	e015      	b.n	8013ffa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013fd4:	f003 0302 	and.w	r3, r3, #2
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d103      	bne.n	8013fe4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fde:	f000 fbff 	bl	80147e0 <vPortFree>
 8013fe2:	e00a      	b.n	8013ffa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013fea:	f023 0301 	bic.w	r3, r3, #1
 8013fee:	b2da      	uxtb	r2, r3
 8013ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013ff6:	e000      	b.n	8013ffa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013ff8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013ffa:	4b08      	ldr	r3, [pc, #32]	; (801401c <prvProcessReceivedCommands+0x1c0>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	1d39      	adds	r1, r7, #4
 8014000:	2200      	movs	r2, #0
 8014002:	4618      	mov	r0, r3
 8014004:	f7fe faa4 	bl	8012550 <xQueueReceive>
 8014008:	4603      	mov	r3, r0
 801400a:	2b00      	cmp	r3, #0
 801400c:	f47f af2a 	bne.w	8013e64 <prvProcessReceivedCommands+0x8>
	}
}
 8014010:	bf00      	nop
 8014012:	bf00      	nop
 8014014:	3730      	adds	r7, #48	; 0x30
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}
 801401a:	bf00      	nop
 801401c:	24001388 	.word	0x24001388

08014020 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b088      	sub	sp, #32
 8014024:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014026:	e048      	b.n	80140ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014028:	4b2d      	ldr	r3, [pc, #180]	; (80140e0 <prvSwitchTimerLists+0xc0>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	68db      	ldr	r3, [r3, #12]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014032:	4b2b      	ldr	r3, [pc, #172]	; (80140e0 <prvSwitchTimerLists+0xc0>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	68db      	ldr	r3, [r3, #12]
 8014038:	68db      	ldr	r3, [r3, #12]
 801403a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	3304      	adds	r3, #4
 8014040:	4618      	mov	r0, r3
 8014042:	f7fd ff83 	bl	8011f4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	6a1b      	ldr	r3, [r3, #32]
 801404a:	68f8      	ldr	r0, [r7, #12]
 801404c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014054:	f003 0304 	and.w	r3, r3, #4
 8014058:	2b00      	cmp	r3, #0
 801405a:	d02e      	beq.n	80140ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	699b      	ldr	r3, [r3, #24]
 8014060:	693a      	ldr	r2, [r7, #16]
 8014062:	4413      	add	r3, r2
 8014064:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014066:	68ba      	ldr	r2, [r7, #8]
 8014068:	693b      	ldr	r3, [r7, #16]
 801406a:	429a      	cmp	r2, r3
 801406c:	d90e      	bls.n	801408c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	68ba      	ldr	r2, [r7, #8]
 8014072:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	68fa      	ldr	r2, [r7, #12]
 8014078:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801407a:	4b19      	ldr	r3, [pc, #100]	; (80140e0 <prvSwitchTimerLists+0xc0>)
 801407c:	681a      	ldr	r2, [r3, #0]
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	3304      	adds	r3, #4
 8014082:	4619      	mov	r1, r3
 8014084:	4610      	mov	r0, r2
 8014086:	f7fd ff28 	bl	8011eda <vListInsert>
 801408a:	e016      	b.n	80140ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801408c:	2300      	movs	r3, #0
 801408e:	9300      	str	r3, [sp, #0]
 8014090:	2300      	movs	r3, #0
 8014092:	693a      	ldr	r2, [r7, #16]
 8014094:	2100      	movs	r1, #0
 8014096:	68f8      	ldr	r0, [r7, #12]
 8014098:	f7ff fd60 	bl	8013b5c <xTimerGenericCommand>
 801409c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d10a      	bne.n	80140ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80140a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140a8:	f383 8811 	msr	BASEPRI, r3
 80140ac:	f3bf 8f6f 	isb	sy
 80140b0:	f3bf 8f4f 	dsb	sy
 80140b4:	603b      	str	r3, [r7, #0]
}
 80140b6:	bf00      	nop
 80140b8:	e7fe      	b.n	80140b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80140ba:	4b09      	ldr	r3, [pc, #36]	; (80140e0 <prvSwitchTimerLists+0xc0>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d1b1      	bne.n	8014028 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80140c4:	4b06      	ldr	r3, [pc, #24]	; (80140e0 <prvSwitchTimerLists+0xc0>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80140ca:	4b06      	ldr	r3, [pc, #24]	; (80140e4 <prvSwitchTimerLists+0xc4>)
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	4a04      	ldr	r2, [pc, #16]	; (80140e0 <prvSwitchTimerLists+0xc0>)
 80140d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80140d2:	4a04      	ldr	r2, [pc, #16]	; (80140e4 <prvSwitchTimerLists+0xc4>)
 80140d4:	697b      	ldr	r3, [r7, #20]
 80140d6:	6013      	str	r3, [r2, #0]
}
 80140d8:	bf00      	nop
 80140da:	3718      	adds	r7, #24
 80140dc:	46bd      	mov	sp, r7
 80140de:	bd80      	pop	{r7, pc}
 80140e0:	24001380 	.word	0x24001380
 80140e4:	24001384 	.word	0x24001384

080140e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b082      	sub	sp, #8
 80140ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80140ee:	f000 f989 	bl	8014404 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80140f2:	4b15      	ldr	r3, [pc, #84]	; (8014148 <prvCheckForValidListAndQueue+0x60>)
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d120      	bne.n	801413c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80140fa:	4814      	ldr	r0, [pc, #80]	; (801414c <prvCheckForValidListAndQueue+0x64>)
 80140fc:	f7fd fe9c 	bl	8011e38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014100:	4813      	ldr	r0, [pc, #76]	; (8014150 <prvCheckForValidListAndQueue+0x68>)
 8014102:	f7fd fe99 	bl	8011e38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014106:	4b13      	ldr	r3, [pc, #76]	; (8014154 <prvCheckForValidListAndQueue+0x6c>)
 8014108:	4a10      	ldr	r2, [pc, #64]	; (801414c <prvCheckForValidListAndQueue+0x64>)
 801410a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801410c:	4b12      	ldr	r3, [pc, #72]	; (8014158 <prvCheckForValidListAndQueue+0x70>)
 801410e:	4a10      	ldr	r2, [pc, #64]	; (8014150 <prvCheckForValidListAndQueue+0x68>)
 8014110:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014112:	2300      	movs	r3, #0
 8014114:	9300      	str	r3, [sp, #0]
 8014116:	4b11      	ldr	r3, [pc, #68]	; (801415c <prvCheckForValidListAndQueue+0x74>)
 8014118:	4a11      	ldr	r2, [pc, #68]	; (8014160 <prvCheckForValidListAndQueue+0x78>)
 801411a:	2110      	movs	r1, #16
 801411c:	200a      	movs	r0, #10
 801411e:	f7fd ffa7 	bl	8012070 <xQueueGenericCreateStatic>
 8014122:	4603      	mov	r3, r0
 8014124:	4a08      	ldr	r2, [pc, #32]	; (8014148 <prvCheckForValidListAndQueue+0x60>)
 8014126:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014128:	4b07      	ldr	r3, [pc, #28]	; (8014148 <prvCheckForValidListAndQueue+0x60>)
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d005      	beq.n	801413c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014130:	4b05      	ldr	r3, [pc, #20]	; (8014148 <prvCheckForValidListAndQueue+0x60>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	490b      	ldr	r1, [pc, #44]	; (8014164 <prvCheckForValidListAndQueue+0x7c>)
 8014136:	4618      	mov	r0, r3
 8014138:	f7fe fcb6 	bl	8012aa8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801413c:	f000 f992 	bl	8014464 <vPortExitCritical>
}
 8014140:	bf00      	nop
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}
 8014146:	bf00      	nop
 8014148:	24001388 	.word	0x24001388
 801414c:	24001358 	.word	0x24001358
 8014150:	2400136c 	.word	0x2400136c
 8014154:	24001380 	.word	0x24001380
 8014158:	24001384 	.word	0x24001384
 801415c:	24001434 	.word	0x24001434
 8014160:	24001394 	.word	0x24001394
 8014164:	08015cf8 	.word	0x08015cf8

08014168 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014168:	b580      	push	{r7, lr}
 801416a:	b08a      	sub	sp, #40	; 0x28
 801416c:	af00      	add	r7, sp, #0
 801416e:	60f8      	str	r0, [r7, #12]
 8014170:	60b9      	str	r1, [r7, #8]
 8014172:	607a      	str	r2, [r7, #4]
 8014174:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8014176:	f06f 0301 	mvn.w	r3, #1
 801417a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8014180:	68bb      	ldr	r3, [r7, #8]
 8014182:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014188:	4b06      	ldr	r3, [pc, #24]	; (80141a4 <xTimerPendFunctionCallFromISR+0x3c>)
 801418a:	6818      	ldr	r0, [r3, #0]
 801418c:	f107 0114 	add.w	r1, r7, #20
 8014190:	2300      	movs	r3, #0
 8014192:	683a      	ldr	r2, [r7, #0]
 8014194:	f7fe f940 	bl	8012418 <xQueueGenericSendFromISR>
 8014198:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801419c:	4618      	mov	r0, r3
 801419e:	3728      	adds	r7, #40	; 0x28
 80141a0:	46bd      	mov	sp, r7
 80141a2:	bd80      	pop	{r7, pc}
 80141a4:	24001388 	.word	0x24001388

080141a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80141a8:	b480      	push	{r7}
 80141aa:	b085      	sub	sp, #20
 80141ac:	af00      	add	r7, sp, #0
 80141ae:	60f8      	str	r0, [r7, #12]
 80141b0:	60b9      	str	r1, [r7, #8]
 80141b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	3b04      	subs	r3, #4
 80141b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80141c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	3b04      	subs	r3, #4
 80141c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	f023 0201 	bic.w	r2, r3, #1
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	3b04      	subs	r3, #4
 80141d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80141d8:	4a0c      	ldr	r2, [pc, #48]	; (801420c <pxPortInitialiseStack+0x64>)
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	3b14      	subs	r3, #20
 80141e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80141e4:	687a      	ldr	r2, [r7, #4]
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	3b04      	subs	r3, #4
 80141ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	f06f 0202 	mvn.w	r2, #2
 80141f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	3b20      	subs	r3, #32
 80141fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80141fe:	68fb      	ldr	r3, [r7, #12]
}
 8014200:	4618      	mov	r0, r3
 8014202:	3714      	adds	r7, #20
 8014204:	46bd      	mov	sp, r7
 8014206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420a:	4770      	bx	lr
 801420c:	08014211 	.word	0x08014211

08014210 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014210:	b480      	push	{r7}
 8014212:	b085      	sub	sp, #20
 8014214:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014216:	2300      	movs	r3, #0
 8014218:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801421a:	4b12      	ldr	r3, [pc, #72]	; (8014264 <prvTaskExitError+0x54>)
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014222:	d00a      	beq.n	801423a <prvTaskExitError+0x2a>
	__asm volatile
 8014224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014228:	f383 8811 	msr	BASEPRI, r3
 801422c:	f3bf 8f6f 	isb	sy
 8014230:	f3bf 8f4f 	dsb	sy
 8014234:	60fb      	str	r3, [r7, #12]
}
 8014236:	bf00      	nop
 8014238:	e7fe      	b.n	8014238 <prvTaskExitError+0x28>
	__asm volatile
 801423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801423e:	f383 8811 	msr	BASEPRI, r3
 8014242:	f3bf 8f6f 	isb	sy
 8014246:	f3bf 8f4f 	dsb	sy
 801424a:	60bb      	str	r3, [r7, #8]
}
 801424c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801424e:	bf00      	nop
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d0fc      	beq.n	8014250 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014256:	bf00      	nop
 8014258:	bf00      	nop
 801425a:	3714      	adds	r7, #20
 801425c:	46bd      	mov	sp, r7
 801425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014262:	4770      	bx	lr
 8014264:	24000098 	.word	0x24000098
	...

08014270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014270:	4b07      	ldr	r3, [pc, #28]	; (8014290 <pxCurrentTCBConst2>)
 8014272:	6819      	ldr	r1, [r3, #0]
 8014274:	6808      	ldr	r0, [r1, #0]
 8014276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801427a:	f380 8809 	msr	PSP, r0
 801427e:	f3bf 8f6f 	isb	sy
 8014282:	f04f 0000 	mov.w	r0, #0
 8014286:	f380 8811 	msr	BASEPRI, r0
 801428a:	4770      	bx	lr
 801428c:	f3af 8000 	nop.w

08014290 <pxCurrentTCBConst2>:
 8014290:	24000e58 	.word	0x24000e58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014294:	bf00      	nop
 8014296:	bf00      	nop

08014298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014298:	4808      	ldr	r0, [pc, #32]	; (80142bc <prvPortStartFirstTask+0x24>)
 801429a:	6800      	ldr	r0, [r0, #0]
 801429c:	6800      	ldr	r0, [r0, #0]
 801429e:	f380 8808 	msr	MSP, r0
 80142a2:	f04f 0000 	mov.w	r0, #0
 80142a6:	f380 8814 	msr	CONTROL, r0
 80142aa:	b662      	cpsie	i
 80142ac:	b661      	cpsie	f
 80142ae:	f3bf 8f4f 	dsb	sy
 80142b2:	f3bf 8f6f 	isb	sy
 80142b6:	df00      	svc	0
 80142b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80142ba:	bf00      	nop
 80142bc:	e000ed08 	.word	0xe000ed08

080142c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b086      	sub	sp, #24
 80142c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80142c6:	4b46      	ldr	r3, [pc, #280]	; (80143e0 <xPortStartScheduler+0x120>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	4a46      	ldr	r2, [pc, #280]	; (80143e4 <xPortStartScheduler+0x124>)
 80142cc:	4293      	cmp	r3, r2
 80142ce:	d10a      	bne.n	80142e6 <xPortStartScheduler+0x26>
	__asm volatile
 80142d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142d4:	f383 8811 	msr	BASEPRI, r3
 80142d8:	f3bf 8f6f 	isb	sy
 80142dc:	f3bf 8f4f 	dsb	sy
 80142e0:	613b      	str	r3, [r7, #16]
}
 80142e2:	bf00      	nop
 80142e4:	e7fe      	b.n	80142e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80142e6:	4b3e      	ldr	r3, [pc, #248]	; (80143e0 <xPortStartScheduler+0x120>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	4a3f      	ldr	r2, [pc, #252]	; (80143e8 <xPortStartScheduler+0x128>)
 80142ec:	4293      	cmp	r3, r2
 80142ee:	d10a      	bne.n	8014306 <xPortStartScheduler+0x46>
	__asm volatile
 80142f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f4:	f383 8811 	msr	BASEPRI, r3
 80142f8:	f3bf 8f6f 	isb	sy
 80142fc:	f3bf 8f4f 	dsb	sy
 8014300:	60fb      	str	r3, [r7, #12]
}
 8014302:	bf00      	nop
 8014304:	e7fe      	b.n	8014304 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014306:	4b39      	ldr	r3, [pc, #228]	; (80143ec <xPortStartScheduler+0x12c>)
 8014308:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	781b      	ldrb	r3, [r3, #0]
 801430e:	b2db      	uxtb	r3, r3
 8014310:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	22ff      	movs	r2, #255	; 0xff
 8014316:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014318:	697b      	ldr	r3, [r7, #20]
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	b2db      	uxtb	r3, r3
 801431e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014320:	78fb      	ldrb	r3, [r7, #3]
 8014322:	b2db      	uxtb	r3, r3
 8014324:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014328:	b2da      	uxtb	r2, r3
 801432a:	4b31      	ldr	r3, [pc, #196]	; (80143f0 <xPortStartScheduler+0x130>)
 801432c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801432e:	4b31      	ldr	r3, [pc, #196]	; (80143f4 <xPortStartScheduler+0x134>)
 8014330:	2207      	movs	r2, #7
 8014332:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014334:	e009      	b.n	801434a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014336:	4b2f      	ldr	r3, [pc, #188]	; (80143f4 <xPortStartScheduler+0x134>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	3b01      	subs	r3, #1
 801433c:	4a2d      	ldr	r2, [pc, #180]	; (80143f4 <xPortStartScheduler+0x134>)
 801433e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014340:	78fb      	ldrb	r3, [r7, #3]
 8014342:	b2db      	uxtb	r3, r3
 8014344:	005b      	lsls	r3, r3, #1
 8014346:	b2db      	uxtb	r3, r3
 8014348:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801434a:	78fb      	ldrb	r3, [r7, #3]
 801434c:	b2db      	uxtb	r3, r3
 801434e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014352:	2b80      	cmp	r3, #128	; 0x80
 8014354:	d0ef      	beq.n	8014336 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014356:	4b27      	ldr	r3, [pc, #156]	; (80143f4 <xPortStartScheduler+0x134>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	f1c3 0307 	rsb	r3, r3, #7
 801435e:	2b04      	cmp	r3, #4
 8014360:	d00a      	beq.n	8014378 <xPortStartScheduler+0xb8>
	__asm volatile
 8014362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014366:	f383 8811 	msr	BASEPRI, r3
 801436a:	f3bf 8f6f 	isb	sy
 801436e:	f3bf 8f4f 	dsb	sy
 8014372:	60bb      	str	r3, [r7, #8]
}
 8014374:	bf00      	nop
 8014376:	e7fe      	b.n	8014376 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014378:	4b1e      	ldr	r3, [pc, #120]	; (80143f4 <xPortStartScheduler+0x134>)
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	021b      	lsls	r3, r3, #8
 801437e:	4a1d      	ldr	r2, [pc, #116]	; (80143f4 <xPortStartScheduler+0x134>)
 8014380:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014382:	4b1c      	ldr	r3, [pc, #112]	; (80143f4 <xPortStartScheduler+0x134>)
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801438a:	4a1a      	ldr	r2, [pc, #104]	; (80143f4 <xPortStartScheduler+0x134>)
 801438c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	b2da      	uxtb	r2, r3
 8014392:	697b      	ldr	r3, [r7, #20]
 8014394:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014396:	4b18      	ldr	r3, [pc, #96]	; (80143f8 <xPortStartScheduler+0x138>)
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	4a17      	ldr	r2, [pc, #92]	; (80143f8 <xPortStartScheduler+0x138>)
 801439c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80143a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80143a2:	4b15      	ldr	r3, [pc, #84]	; (80143f8 <xPortStartScheduler+0x138>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	4a14      	ldr	r2, [pc, #80]	; (80143f8 <xPortStartScheduler+0x138>)
 80143a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80143ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80143ae:	f000 f8dd 	bl	801456c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80143b2:	4b12      	ldr	r3, [pc, #72]	; (80143fc <xPortStartScheduler+0x13c>)
 80143b4:	2200      	movs	r2, #0
 80143b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80143b8:	f000 f8fc 	bl	80145b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80143bc:	4b10      	ldr	r3, [pc, #64]	; (8014400 <xPortStartScheduler+0x140>)
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	4a0f      	ldr	r2, [pc, #60]	; (8014400 <xPortStartScheduler+0x140>)
 80143c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80143c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80143c8:	f7ff ff66 	bl	8014298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80143cc:	f7fe ff7c 	bl	80132c8 <vTaskSwitchContext>
	prvTaskExitError();
 80143d0:	f7ff ff1e 	bl	8014210 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80143d4:	2300      	movs	r3, #0
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	3718      	adds	r7, #24
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
 80143de:	bf00      	nop
 80143e0:	e000ed00 	.word	0xe000ed00
 80143e4:	410fc271 	.word	0x410fc271
 80143e8:	410fc270 	.word	0x410fc270
 80143ec:	e000e400 	.word	0xe000e400
 80143f0:	24001484 	.word	0x24001484
 80143f4:	24001488 	.word	0x24001488
 80143f8:	e000ed20 	.word	0xe000ed20
 80143fc:	24000098 	.word	0x24000098
 8014400:	e000ef34 	.word	0xe000ef34

08014404 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014404:	b480      	push	{r7}
 8014406:	b083      	sub	sp, #12
 8014408:	af00      	add	r7, sp, #0
	__asm volatile
 801440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801440e:	f383 8811 	msr	BASEPRI, r3
 8014412:	f3bf 8f6f 	isb	sy
 8014416:	f3bf 8f4f 	dsb	sy
 801441a:	607b      	str	r3, [r7, #4]
}
 801441c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801441e:	4b0f      	ldr	r3, [pc, #60]	; (801445c <vPortEnterCritical+0x58>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	3301      	adds	r3, #1
 8014424:	4a0d      	ldr	r2, [pc, #52]	; (801445c <vPortEnterCritical+0x58>)
 8014426:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014428:	4b0c      	ldr	r3, [pc, #48]	; (801445c <vPortEnterCritical+0x58>)
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	2b01      	cmp	r3, #1
 801442e:	d10f      	bne.n	8014450 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014430:	4b0b      	ldr	r3, [pc, #44]	; (8014460 <vPortEnterCritical+0x5c>)
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	b2db      	uxtb	r3, r3
 8014436:	2b00      	cmp	r3, #0
 8014438:	d00a      	beq.n	8014450 <vPortEnterCritical+0x4c>
	__asm volatile
 801443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801443e:	f383 8811 	msr	BASEPRI, r3
 8014442:	f3bf 8f6f 	isb	sy
 8014446:	f3bf 8f4f 	dsb	sy
 801444a:	603b      	str	r3, [r7, #0]
}
 801444c:	bf00      	nop
 801444e:	e7fe      	b.n	801444e <vPortEnterCritical+0x4a>
	}
}
 8014450:	bf00      	nop
 8014452:	370c      	adds	r7, #12
 8014454:	46bd      	mov	sp, r7
 8014456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801445a:	4770      	bx	lr
 801445c:	24000098 	.word	0x24000098
 8014460:	e000ed04 	.word	0xe000ed04

08014464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014464:	b480      	push	{r7}
 8014466:	b083      	sub	sp, #12
 8014468:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801446a:	4b12      	ldr	r3, [pc, #72]	; (80144b4 <vPortExitCritical+0x50>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d10a      	bne.n	8014488 <vPortExitCritical+0x24>
	__asm volatile
 8014472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014476:	f383 8811 	msr	BASEPRI, r3
 801447a:	f3bf 8f6f 	isb	sy
 801447e:	f3bf 8f4f 	dsb	sy
 8014482:	607b      	str	r3, [r7, #4]
}
 8014484:	bf00      	nop
 8014486:	e7fe      	b.n	8014486 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014488:	4b0a      	ldr	r3, [pc, #40]	; (80144b4 <vPortExitCritical+0x50>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	3b01      	subs	r3, #1
 801448e:	4a09      	ldr	r2, [pc, #36]	; (80144b4 <vPortExitCritical+0x50>)
 8014490:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014492:	4b08      	ldr	r3, [pc, #32]	; (80144b4 <vPortExitCritical+0x50>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d105      	bne.n	80144a6 <vPortExitCritical+0x42>
 801449a:	2300      	movs	r3, #0
 801449c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801449e:	683b      	ldr	r3, [r7, #0]
 80144a0:	f383 8811 	msr	BASEPRI, r3
}
 80144a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80144a6:	bf00      	nop
 80144a8:	370c      	adds	r7, #12
 80144aa:	46bd      	mov	sp, r7
 80144ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b0:	4770      	bx	lr
 80144b2:	bf00      	nop
 80144b4:	24000098 	.word	0x24000098
	...

080144c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80144c0:	f3ef 8009 	mrs	r0, PSP
 80144c4:	f3bf 8f6f 	isb	sy
 80144c8:	4b15      	ldr	r3, [pc, #84]	; (8014520 <pxCurrentTCBConst>)
 80144ca:	681a      	ldr	r2, [r3, #0]
 80144cc:	f01e 0f10 	tst.w	lr, #16
 80144d0:	bf08      	it	eq
 80144d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80144d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144da:	6010      	str	r0, [r2, #0]
 80144dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80144e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80144e4:	f380 8811 	msr	BASEPRI, r0
 80144e8:	f3bf 8f4f 	dsb	sy
 80144ec:	f3bf 8f6f 	isb	sy
 80144f0:	f7fe feea 	bl	80132c8 <vTaskSwitchContext>
 80144f4:	f04f 0000 	mov.w	r0, #0
 80144f8:	f380 8811 	msr	BASEPRI, r0
 80144fc:	bc09      	pop	{r0, r3}
 80144fe:	6819      	ldr	r1, [r3, #0]
 8014500:	6808      	ldr	r0, [r1, #0]
 8014502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014506:	f01e 0f10 	tst.w	lr, #16
 801450a:	bf08      	it	eq
 801450c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014510:	f380 8809 	msr	PSP, r0
 8014514:	f3bf 8f6f 	isb	sy
 8014518:	4770      	bx	lr
 801451a:	bf00      	nop
 801451c:	f3af 8000 	nop.w

08014520 <pxCurrentTCBConst>:
 8014520:	24000e58 	.word	0x24000e58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014524:	bf00      	nop
 8014526:	bf00      	nop

08014528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b082      	sub	sp, #8
 801452c:	af00      	add	r7, sp, #0
	__asm volatile
 801452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014532:	f383 8811 	msr	BASEPRI, r3
 8014536:	f3bf 8f6f 	isb	sy
 801453a:	f3bf 8f4f 	dsb	sy
 801453e:	607b      	str	r3, [r7, #4]
}
 8014540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014542:	f7fe fe07 	bl	8013154 <xTaskIncrementTick>
 8014546:	4603      	mov	r3, r0
 8014548:	2b00      	cmp	r3, #0
 801454a:	d003      	beq.n	8014554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801454c:	4b06      	ldr	r3, [pc, #24]	; (8014568 <xPortSysTickHandler+0x40>)
 801454e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014552:	601a      	str	r2, [r3, #0]
 8014554:	2300      	movs	r3, #0
 8014556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	f383 8811 	msr	BASEPRI, r3
}
 801455e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014560:	bf00      	nop
 8014562:	3708      	adds	r7, #8
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}
 8014568:	e000ed04 	.word	0xe000ed04

0801456c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801456c:	b480      	push	{r7}
 801456e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014570:	4b0b      	ldr	r3, [pc, #44]	; (80145a0 <vPortSetupTimerInterrupt+0x34>)
 8014572:	2200      	movs	r2, #0
 8014574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014576:	4b0b      	ldr	r3, [pc, #44]	; (80145a4 <vPortSetupTimerInterrupt+0x38>)
 8014578:	2200      	movs	r2, #0
 801457a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801457c:	4b0a      	ldr	r3, [pc, #40]	; (80145a8 <vPortSetupTimerInterrupt+0x3c>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	4a0a      	ldr	r2, [pc, #40]	; (80145ac <vPortSetupTimerInterrupt+0x40>)
 8014582:	fba2 2303 	umull	r2, r3, r2, r3
 8014586:	099b      	lsrs	r3, r3, #6
 8014588:	4a09      	ldr	r2, [pc, #36]	; (80145b0 <vPortSetupTimerInterrupt+0x44>)
 801458a:	3b01      	subs	r3, #1
 801458c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801458e:	4b04      	ldr	r3, [pc, #16]	; (80145a0 <vPortSetupTimerInterrupt+0x34>)
 8014590:	2207      	movs	r2, #7
 8014592:	601a      	str	r2, [r3, #0]
}
 8014594:	bf00      	nop
 8014596:	46bd      	mov	sp, r7
 8014598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459c:	4770      	bx	lr
 801459e:	bf00      	nop
 80145a0:	e000e010 	.word	0xe000e010
 80145a4:	e000e018 	.word	0xe000e018
 80145a8:	24000088 	.word	0x24000088
 80145ac:	10624dd3 	.word	0x10624dd3
 80145b0:	e000e014 	.word	0xe000e014

080145b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80145b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80145c4 <vPortEnableVFP+0x10>
 80145b8:	6801      	ldr	r1, [r0, #0]
 80145ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80145be:	6001      	str	r1, [r0, #0]
 80145c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80145c2:	bf00      	nop
 80145c4:	e000ed88 	.word	0xe000ed88

080145c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80145c8:	b480      	push	{r7}
 80145ca:	b085      	sub	sp, #20
 80145cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80145ce:	f3ef 8305 	mrs	r3, IPSR
 80145d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	2b0f      	cmp	r3, #15
 80145d8:	d914      	bls.n	8014604 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80145da:	4a17      	ldr	r2, [pc, #92]	; (8014638 <vPortValidateInterruptPriority+0x70>)
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	4413      	add	r3, r2
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80145e4:	4b15      	ldr	r3, [pc, #84]	; (801463c <vPortValidateInterruptPriority+0x74>)
 80145e6:	781b      	ldrb	r3, [r3, #0]
 80145e8:	7afa      	ldrb	r2, [r7, #11]
 80145ea:	429a      	cmp	r2, r3
 80145ec:	d20a      	bcs.n	8014604 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80145ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145f2:	f383 8811 	msr	BASEPRI, r3
 80145f6:	f3bf 8f6f 	isb	sy
 80145fa:	f3bf 8f4f 	dsb	sy
 80145fe:	607b      	str	r3, [r7, #4]
}
 8014600:	bf00      	nop
 8014602:	e7fe      	b.n	8014602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014604:	4b0e      	ldr	r3, [pc, #56]	; (8014640 <vPortValidateInterruptPriority+0x78>)
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801460c:	4b0d      	ldr	r3, [pc, #52]	; (8014644 <vPortValidateInterruptPriority+0x7c>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	429a      	cmp	r2, r3
 8014612:	d90a      	bls.n	801462a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014618:	f383 8811 	msr	BASEPRI, r3
 801461c:	f3bf 8f6f 	isb	sy
 8014620:	f3bf 8f4f 	dsb	sy
 8014624:	603b      	str	r3, [r7, #0]
}
 8014626:	bf00      	nop
 8014628:	e7fe      	b.n	8014628 <vPortValidateInterruptPriority+0x60>
	}
 801462a:	bf00      	nop
 801462c:	3714      	adds	r7, #20
 801462e:	46bd      	mov	sp, r7
 8014630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014634:	4770      	bx	lr
 8014636:	bf00      	nop
 8014638:	e000e3f0 	.word	0xe000e3f0
 801463c:	24001484 	.word	0x24001484
 8014640:	e000ed0c 	.word	0xe000ed0c
 8014644:	24001488 	.word	0x24001488

08014648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b08a      	sub	sp, #40	; 0x28
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014650:	2300      	movs	r3, #0
 8014652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014654:	f7fe fcc2 	bl	8012fdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014658:	4b5b      	ldr	r3, [pc, #364]	; (80147c8 <pvPortMalloc+0x180>)
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d101      	bne.n	8014664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014660:	f000 f920 	bl	80148a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014664:	4b59      	ldr	r3, [pc, #356]	; (80147cc <pvPortMalloc+0x184>)
 8014666:	681a      	ldr	r2, [r3, #0]
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	4013      	ands	r3, r2
 801466c:	2b00      	cmp	r3, #0
 801466e:	f040 8093 	bne.w	8014798 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d01d      	beq.n	80146b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014678:	2208      	movs	r2, #8
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	4413      	add	r3, r2
 801467e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f003 0307 	and.w	r3, r3, #7
 8014686:	2b00      	cmp	r3, #0
 8014688:	d014      	beq.n	80146b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	f023 0307 	bic.w	r3, r3, #7
 8014690:	3308      	adds	r3, #8
 8014692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f003 0307 	and.w	r3, r3, #7
 801469a:	2b00      	cmp	r3, #0
 801469c:	d00a      	beq.n	80146b4 <pvPortMalloc+0x6c>
	__asm volatile
 801469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146a2:	f383 8811 	msr	BASEPRI, r3
 80146a6:	f3bf 8f6f 	isb	sy
 80146aa:	f3bf 8f4f 	dsb	sy
 80146ae:	617b      	str	r3, [r7, #20]
}
 80146b0:	bf00      	nop
 80146b2:	e7fe      	b.n	80146b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d06e      	beq.n	8014798 <pvPortMalloc+0x150>
 80146ba:	4b45      	ldr	r3, [pc, #276]	; (80147d0 <pvPortMalloc+0x188>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	687a      	ldr	r2, [r7, #4]
 80146c0:	429a      	cmp	r2, r3
 80146c2:	d869      	bhi.n	8014798 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80146c4:	4b43      	ldr	r3, [pc, #268]	; (80147d4 <pvPortMalloc+0x18c>)
 80146c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80146c8:	4b42      	ldr	r3, [pc, #264]	; (80147d4 <pvPortMalloc+0x18c>)
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80146ce:	e004      	b.n	80146da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80146d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80146d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80146da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	687a      	ldr	r2, [r7, #4]
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d903      	bls.n	80146ec <pvPortMalloc+0xa4>
 80146e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d1f1      	bne.n	80146d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80146ec:	4b36      	ldr	r3, [pc, #216]	; (80147c8 <pvPortMalloc+0x180>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146f2:	429a      	cmp	r2, r3
 80146f4:	d050      	beq.n	8014798 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80146f6:	6a3b      	ldr	r3, [r7, #32]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	2208      	movs	r2, #8
 80146fc:	4413      	add	r3, r2
 80146fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014702:	681a      	ldr	r2, [r3, #0]
 8014704:	6a3b      	ldr	r3, [r7, #32]
 8014706:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801470a:	685a      	ldr	r2, [r3, #4]
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	1ad2      	subs	r2, r2, r3
 8014710:	2308      	movs	r3, #8
 8014712:	005b      	lsls	r3, r3, #1
 8014714:	429a      	cmp	r2, r3
 8014716:	d91f      	bls.n	8014758 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	4413      	add	r3, r2
 801471e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014720:	69bb      	ldr	r3, [r7, #24]
 8014722:	f003 0307 	and.w	r3, r3, #7
 8014726:	2b00      	cmp	r3, #0
 8014728:	d00a      	beq.n	8014740 <pvPortMalloc+0xf8>
	__asm volatile
 801472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801472e:	f383 8811 	msr	BASEPRI, r3
 8014732:	f3bf 8f6f 	isb	sy
 8014736:	f3bf 8f4f 	dsb	sy
 801473a:	613b      	str	r3, [r7, #16]
}
 801473c:	bf00      	nop
 801473e:	e7fe      	b.n	801473e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014742:	685a      	ldr	r2, [r3, #4]
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	1ad2      	subs	r2, r2, r3
 8014748:	69bb      	ldr	r3, [r7, #24]
 801474a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801474e:	687a      	ldr	r2, [r7, #4]
 8014750:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014752:	69b8      	ldr	r0, [r7, #24]
 8014754:	f000 f908 	bl	8014968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014758:	4b1d      	ldr	r3, [pc, #116]	; (80147d0 <pvPortMalloc+0x188>)
 801475a:	681a      	ldr	r2, [r3, #0]
 801475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801475e:	685b      	ldr	r3, [r3, #4]
 8014760:	1ad3      	subs	r3, r2, r3
 8014762:	4a1b      	ldr	r2, [pc, #108]	; (80147d0 <pvPortMalloc+0x188>)
 8014764:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014766:	4b1a      	ldr	r3, [pc, #104]	; (80147d0 <pvPortMalloc+0x188>)
 8014768:	681a      	ldr	r2, [r3, #0]
 801476a:	4b1b      	ldr	r3, [pc, #108]	; (80147d8 <pvPortMalloc+0x190>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	429a      	cmp	r2, r3
 8014770:	d203      	bcs.n	801477a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014772:	4b17      	ldr	r3, [pc, #92]	; (80147d0 <pvPortMalloc+0x188>)
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	4a18      	ldr	r2, [pc, #96]	; (80147d8 <pvPortMalloc+0x190>)
 8014778:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801477c:	685a      	ldr	r2, [r3, #4]
 801477e:	4b13      	ldr	r3, [pc, #76]	; (80147cc <pvPortMalloc+0x184>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	431a      	orrs	r2, r3
 8014784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014786:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801478a:	2200      	movs	r2, #0
 801478c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801478e:	4b13      	ldr	r3, [pc, #76]	; (80147dc <pvPortMalloc+0x194>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	3301      	adds	r3, #1
 8014794:	4a11      	ldr	r2, [pc, #68]	; (80147dc <pvPortMalloc+0x194>)
 8014796:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014798:	f7fe fc2e 	bl	8012ff8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801479c:	69fb      	ldr	r3, [r7, #28]
 801479e:	f003 0307 	and.w	r3, r3, #7
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d00a      	beq.n	80147bc <pvPortMalloc+0x174>
	__asm volatile
 80147a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147aa:	f383 8811 	msr	BASEPRI, r3
 80147ae:	f3bf 8f6f 	isb	sy
 80147b2:	f3bf 8f4f 	dsb	sy
 80147b6:	60fb      	str	r3, [r7, #12]
}
 80147b8:	bf00      	nop
 80147ba:	e7fe      	b.n	80147ba <pvPortMalloc+0x172>
	return pvReturn;
 80147bc:	69fb      	ldr	r3, [r7, #28]
}
 80147be:	4618      	mov	r0, r3
 80147c0:	3728      	adds	r7, #40	; 0x28
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}
 80147c6:	bf00      	nop
 80147c8:	24005094 	.word	0x24005094
 80147cc:	240050a8 	.word	0x240050a8
 80147d0:	24005098 	.word	0x24005098
 80147d4:	2400508c 	.word	0x2400508c
 80147d8:	2400509c 	.word	0x2400509c
 80147dc:	240050a0 	.word	0x240050a0

080147e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b086      	sub	sp, #24
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d04d      	beq.n	801488e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80147f2:	2308      	movs	r3, #8
 80147f4:	425b      	negs	r3, r3
 80147f6:	697a      	ldr	r2, [r7, #20]
 80147f8:	4413      	add	r3, r2
 80147fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80147fc:	697b      	ldr	r3, [r7, #20]
 80147fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014800:	693b      	ldr	r3, [r7, #16]
 8014802:	685a      	ldr	r2, [r3, #4]
 8014804:	4b24      	ldr	r3, [pc, #144]	; (8014898 <vPortFree+0xb8>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	4013      	ands	r3, r2
 801480a:	2b00      	cmp	r3, #0
 801480c:	d10a      	bne.n	8014824 <vPortFree+0x44>
	__asm volatile
 801480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014812:	f383 8811 	msr	BASEPRI, r3
 8014816:	f3bf 8f6f 	isb	sy
 801481a:	f3bf 8f4f 	dsb	sy
 801481e:	60fb      	str	r3, [r7, #12]
}
 8014820:	bf00      	nop
 8014822:	e7fe      	b.n	8014822 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014824:	693b      	ldr	r3, [r7, #16]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d00a      	beq.n	8014842 <vPortFree+0x62>
	__asm volatile
 801482c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014830:	f383 8811 	msr	BASEPRI, r3
 8014834:	f3bf 8f6f 	isb	sy
 8014838:	f3bf 8f4f 	dsb	sy
 801483c:	60bb      	str	r3, [r7, #8]
}
 801483e:	bf00      	nop
 8014840:	e7fe      	b.n	8014840 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014842:	693b      	ldr	r3, [r7, #16]
 8014844:	685a      	ldr	r2, [r3, #4]
 8014846:	4b14      	ldr	r3, [pc, #80]	; (8014898 <vPortFree+0xb8>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	4013      	ands	r3, r2
 801484c:	2b00      	cmp	r3, #0
 801484e:	d01e      	beq.n	801488e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014850:	693b      	ldr	r3, [r7, #16]
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d11a      	bne.n	801488e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014858:	693b      	ldr	r3, [r7, #16]
 801485a:	685a      	ldr	r2, [r3, #4]
 801485c:	4b0e      	ldr	r3, [pc, #56]	; (8014898 <vPortFree+0xb8>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	43db      	mvns	r3, r3
 8014862:	401a      	ands	r2, r3
 8014864:	693b      	ldr	r3, [r7, #16]
 8014866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014868:	f7fe fbb8 	bl	8012fdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801486c:	693b      	ldr	r3, [r7, #16]
 801486e:	685a      	ldr	r2, [r3, #4]
 8014870:	4b0a      	ldr	r3, [pc, #40]	; (801489c <vPortFree+0xbc>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	4413      	add	r3, r2
 8014876:	4a09      	ldr	r2, [pc, #36]	; (801489c <vPortFree+0xbc>)
 8014878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801487a:	6938      	ldr	r0, [r7, #16]
 801487c:	f000 f874 	bl	8014968 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014880:	4b07      	ldr	r3, [pc, #28]	; (80148a0 <vPortFree+0xc0>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	3301      	adds	r3, #1
 8014886:	4a06      	ldr	r2, [pc, #24]	; (80148a0 <vPortFree+0xc0>)
 8014888:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801488a:	f7fe fbb5 	bl	8012ff8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801488e:	bf00      	nop
 8014890:	3718      	adds	r7, #24
 8014892:	46bd      	mov	sp, r7
 8014894:	bd80      	pop	{r7, pc}
 8014896:	bf00      	nop
 8014898:	240050a8 	.word	0x240050a8
 801489c:	24005098 	.word	0x24005098
 80148a0:	240050a4 	.word	0x240050a4

080148a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80148a4:	b480      	push	{r7}
 80148a6:	b085      	sub	sp, #20
 80148a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80148aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80148ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80148b0:	4b27      	ldr	r3, [pc, #156]	; (8014950 <prvHeapInit+0xac>)
 80148b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	f003 0307 	and.w	r3, r3, #7
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d00c      	beq.n	80148d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	3307      	adds	r3, #7
 80148c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	f023 0307 	bic.w	r3, r3, #7
 80148ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80148cc:	68ba      	ldr	r2, [r7, #8]
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	1ad3      	subs	r3, r2, r3
 80148d2:	4a1f      	ldr	r2, [pc, #124]	; (8014950 <prvHeapInit+0xac>)
 80148d4:	4413      	add	r3, r2
 80148d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80148dc:	4a1d      	ldr	r2, [pc, #116]	; (8014954 <prvHeapInit+0xb0>)
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80148e2:	4b1c      	ldr	r3, [pc, #112]	; (8014954 <prvHeapInit+0xb0>)
 80148e4:	2200      	movs	r2, #0
 80148e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	68ba      	ldr	r2, [r7, #8]
 80148ec:	4413      	add	r3, r2
 80148ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80148f0:	2208      	movs	r2, #8
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	1a9b      	subs	r3, r3, r2
 80148f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	f023 0307 	bic.w	r3, r3, #7
 80148fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	4a15      	ldr	r2, [pc, #84]	; (8014958 <prvHeapInit+0xb4>)
 8014904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014906:	4b14      	ldr	r3, [pc, #80]	; (8014958 <prvHeapInit+0xb4>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	2200      	movs	r2, #0
 801490c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801490e:	4b12      	ldr	r3, [pc, #72]	; (8014958 <prvHeapInit+0xb4>)
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	2200      	movs	r2, #0
 8014914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801491a:	683b      	ldr	r3, [r7, #0]
 801491c:	68fa      	ldr	r2, [r7, #12]
 801491e:	1ad2      	subs	r2, r2, r3
 8014920:	683b      	ldr	r3, [r7, #0]
 8014922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014924:	4b0c      	ldr	r3, [pc, #48]	; (8014958 <prvHeapInit+0xb4>)
 8014926:	681a      	ldr	r2, [r3, #0]
 8014928:	683b      	ldr	r3, [r7, #0]
 801492a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801492c:	683b      	ldr	r3, [r7, #0]
 801492e:	685b      	ldr	r3, [r3, #4]
 8014930:	4a0a      	ldr	r2, [pc, #40]	; (801495c <prvHeapInit+0xb8>)
 8014932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	685b      	ldr	r3, [r3, #4]
 8014938:	4a09      	ldr	r2, [pc, #36]	; (8014960 <prvHeapInit+0xbc>)
 801493a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801493c:	4b09      	ldr	r3, [pc, #36]	; (8014964 <prvHeapInit+0xc0>)
 801493e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014942:	601a      	str	r2, [r3, #0]
}
 8014944:	bf00      	nop
 8014946:	3714      	adds	r7, #20
 8014948:	46bd      	mov	sp, r7
 801494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494e:	4770      	bx	lr
 8014950:	2400148c 	.word	0x2400148c
 8014954:	2400508c 	.word	0x2400508c
 8014958:	24005094 	.word	0x24005094
 801495c:	2400509c 	.word	0x2400509c
 8014960:	24005098 	.word	0x24005098
 8014964:	240050a8 	.word	0x240050a8

08014968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014968:	b480      	push	{r7}
 801496a:	b085      	sub	sp, #20
 801496c:	af00      	add	r7, sp, #0
 801496e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014970:	4b28      	ldr	r3, [pc, #160]	; (8014a14 <prvInsertBlockIntoFreeList+0xac>)
 8014972:	60fb      	str	r3, [r7, #12]
 8014974:	e002      	b.n	801497c <prvInsertBlockIntoFreeList+0x14>
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	60fb      	str	r3, [r7, #12]
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	687a      	ldr	r2, [r7, #4]
 8014982:	429a      	cmp	r2, r3
 8014984:	d8f7      	bhi.n	8014976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	685b      	ldr	r3, [r3, #4]
 801498e:	68ba      	ldr	r2, [r7, #8]
 8014990:	4413      	add	r3, r2
 8014992:	687a      	ldr	r2, [r7, #4]
 8014994:	429a      	cmp	r2, r3
 8014996:	d108      	bne.n	80149aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	685a      	ldr	r2, [r3, #4]
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	685b      	ldr	r3, [r3, #4]
 80149a0:	441a      	add	r2, r3
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	685b      	ldr	r3, [r3, #4]
 80149b2:	68ba      	ldr	r2, [r7, #8]
 80149b4:	441a      	add	r2, r3
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	429a      	cmp	r2, r3
 80149bc:	d118      	bne.n	80149f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	681a      	ldr	r2, [r3, #0]
 80149c2:	4b15      	ldr	r3, [pc, #84]	; (8014a18 <prvInsertBlockIntoFreeList+0xb0>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	429a      	cmp	r2, r3
 80149c8:	d00d      	beq.n	80149e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	685a      	ldr	r2, [r3, #4]
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	685b      	ldr	r3, [r3, #4]
 80149d4:	441a      	add	r2, r3
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	681a      	ldr	r2, [r3, #0]
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	601a      	str	r2, [r3, #0]
 80149e4:	e008      	b.n	80149f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80149e6:	4b0c      	ldr	r3, [pc, #48]	; (8014a18 <prvInsertBlockIntoFreeList+0xb0>)
 80149e8:	681a      	ldr	r2, [r3, #0]
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	601a      	str	r2, [r3, #0]
 80149ee:	e003      	b.n	80149f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	681a      	ldr	r2, [r3, #0]
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80149f8:	68fa      	ldr	r2, [r7, #12]
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	429a      	cmp	r2, r3
 80149fe:	d002      	beq.n	8014a06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	687a      	ldr	r2, [r7, #4]
 8014a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014a06:	bf00      	nop
 8014a08:	3714      	adds	r7, #20
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a10:	4770      	bx	lr
 8014a12:	bf00      	nop
 8014a14:	2400508c 	.word	0x2400508c
 8014a18:	24005094 	.word	0x24005094

08014a1c <__errno>:
 8014a1c:	4b01      	ldr	r3, [pc, #4]	; (8014a24 <__errno+0x8>)
 8014a1e:	6818      	ldr	r0, [r3, #0]
 8014a20:	4770      	bx	lr
 8014a22:	bf00      	nop
 8014a24:	2400009c 	.word	0x2400009c

08014a28 <__libc_init_array>:
 8014a28:	b570      	push	{r4, r5, r6, lr}
 8014a2a:	4d0d      	ldr	r5, [pc, #52]	; (8014a60 <__libc_init_array+0x38>)
 8014a2c:	4c0d      	ldr	r4, [pc, #52]	; (8014a64 <__libc_init_array+0x3c>)
 8014a2e:	1b64      	subs	r4, r4, r5
 8014a30:	10a4      	asrs	r4, r4, #2
 8014a32:	2600      	movs	r6, #0
 8014a34:	42a6      	cmp	r6, r4
 8014a36:	d109      	bne.n	8014a4c <__libc_init_array+0x24>
 8014a38:	4d0b      	ldr	r5, [pc, #44]	; (8014a68 <__libc_init_array+0x40>)
 8014a3a:	4c0c      	ldr	r4, [pc, #48]	; (8014a6c <__libc_init_array+0x44>)
 8014a3c:	f001 f842 	bl	8015ac4 <_init>
 8014a40:	1b64      	subs	r4, r4, r5
 8014a42:	10a4      	asrs	r4, r4, #2
 8014a44:	2600      	movs	r6, #0
 8014a46:	42a6      	cmp	r6, r4
 8014a48:	d105      	bne.n	8014a56 <__libc_init_array+0x2e>
 8014a4a:	bd70      	pop	{r4, r5, r6, pc}
 8014a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a50:	4798      	blx	r3
 8014a52:	3601      	adds	r6, #1
 8014a54:	e7ee      	b.n	8014a34 <__libc_init_array+0xc>
 8014a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a5a:	4798      	blx	r3
 8014a5c:	3601      	adds	r6, #1
 8014a5e:	e7f2      	b.n	8014a46 <__libc_init_array+0x1e>
 8014a60:	08015e94 	.word	0x08015e94
 8014a64:	08015e94 	.word	0x08015e94
 8014a68:	08015e94 	.word	0x08015e94
 8014a6c:	08015e98 	.word	0x08015e98

08014a70 <malloc>:
 8014a70:	4b02      	ldr	r3, [pc, #8]	; (8014a7c <malloc+0xc>)
 8014a72:	4601      	mov	r1, r0
 8014a74:	6818      	ldr	r0, [r3, #0]
 8014a76:	f000 b88d 	b.w	8014b94 <_malloc_r>
 8014a7a:	bf00      	nop
 8014a7c:	2400009c 	.word	0x2400009c

08014a80 <free>:
 8014a80:	4b02      	ldr	r3, [pc, #8]	; (8014a8c <free+0xc>)
 8014a82:	4601      	mov	r1, r0
 8014a84:	6818      	ldr	r0, [r3, #0]
 8014a86:	f000 b819 	b.w	8014abc <_free_r>
 8014a8a:	bf00      	nop
 8014a8c:	2400009c 	.word	0x2400009c

08014a90 <memcpy>:
 8014a90:	440a      	add	r2, r1
 8014a92:	4291      	cmp	r1, r2
 8014a94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014a98:	d100      	bne.n	8014a9c <memcpy+0xc>
 8014a9a:	4770      	bx	lr
 8014a9c:	b510      	push	{r4, lr}
 8014a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014aa6:	4291      	cmp	r1, r2
 8014aa8:	d1f9      	bne.n	8014a9e <memcpy+0xe>
 8014aaa:	bd10      	pop	{r4, pc}

08014aac <memset>:
 8014aac:	4402      	add	r2, r0
 8014aae:	4603      	mov	r3, r0
 8014ab0:	4293      	cmp	r3, r2
 8014ab2:	d100      	bne.n	8014ab6 <memset+0xa>
 8014ab4:	4770      	bx	lr
 8014ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8014aba:	e7f9      	b.n	8014ab0 <memset+0x4>

08014abc <_free_r>:
 8014abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014abe:	2900      	cmp	r1, #0
 8014ac0:	d044      	beq.n	8014b4c <_free_r+0x90>
 8014ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ac6:	9001      	str	r0, [sp, #4]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	f1a1 0404 	sub.w	r4, r1, #4
 8014ace:	bfb8      	it	lt
 8014ad0:	18e4      	addlt	r4, r4, r3
 8014ad2:	f000 fc51 	bl	8015378 <__malloc_lock>
 8014ad6:	4a1e      	ldr	r2, [pc, #120]	; (8014b50 <_free_r+0x94>)
 8014ad8:	9801      	ldr	r0, [sp, #4]
 8014ada:	6813      	ldr	r3, [r2, #0]
 8014adc:	b933      	cbnz	r3, 8014aec <_free_r+0x30>
 8014ade:	6063      	str	r3, [r4, #4]
 8014ae0:	6014      	str	r4, [r2, #0]
 8014ae2:	b003      	add	sp, #12
 8014ae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014ae8:	f000 bc4c 	b.w	8015384 <__malloc_unlock>
 8014aec:	42a3      	cmp	r3, r4
 8014aee:	d908      	bls.n	8014b02 <_free_r+0x46>
 8014af0:	6825      	ldr	r5, [r4, #0]
 8014af2:	1961      	adds	r1, r4, r5
 8014af4:	428b      	cmp	r3, r1
 8014af6:	bf01      	itttt	eq
 8014af8:	6819      	ldreq	r1, [r3, #0]
 8014afa:	685b      	ldreq	r3, [r3, #4]
 8014afc:	1949      	addeq	r1, r1, r5
 8014afe:	6021      	streq	r1, [r4, #0]
 8014b00:	e7ed      	b.n	8014ade <_free_r+0x22>
 8014b02:	461a      	mov	r2, r3
 8014b04:	685b      	ldr	r3, [r3, #4]
 8014b06:	b10b      	cbz	r3, 8014b0c <_free_r+0x50>
 8014b08:	42a3      	cmp	r3, r4
 8014b0a:	d9fa      	bls.n	8014b02 <_free_r+0x46>
 8014b0c:	6811      	ldr	r1, [r2, #0]
 8014b0e:	1855      	adds	r5, r2, r1
 8014b10:	42a5      	cmp	r5, r4
 8014b12:	d10b      	bne.n	8014b2c <_free_r+0x70>
 8014b14:	6824      	ldr	r4, [r4, #0]
 8014b16:	4421      	add	r1, r4
 8014b18:	1854      	adds	r4, r2, r1
 8014b1a:	42a3      	cmp	r3, r4
 8014b1c:	6011      	str	r1, [r2, #0]
 8014b1e:	d1e0      	bne.n	8014ae2 <_free_r+0x26>
 8014b20:	681c      	ldr	r4, [r3, #0]
 8014b22:	685b      	ldr	r3, [r3, #4]
 8014b24:	6053      	str	r3, [r2, #4]
 8014b26:	4421      	add	r1, r4
 8014b28:	6011      	str	r1, [r2, #0]
 8014b2a:	e7da      	b.n	8014ae2 <_free_r+0x26>
 8014b2c:	d902      	bls.n	8014b34 <_free_r+0x78>
 8014b2e:	230c      	movs	r3, #12
 8014b30:	6003      	str	r3, [r0, #0]
 8014b32:	e7d6      	b.n	8014ae2 <_free_r+0x26>
 8014b34:	6825      	ldr	r5, [r4, #0]
 8014b36:	1961      	adds	r1, r4, r5
 8014b38:	428b      	cmp	r3, r1
 8014b3a:	bf04      	itt	eq
 8014b3c:	6819      	ldreq	r1, [r3, #0]
 8014b3e:	685b      	ldreq	r3, [r3, #4]
 8014b40:	6063      	str	r3, [r4, #4]
 8014b42:	bf04      	itt	eq
 8014b44:	1949      	addeq	r1, r1, r5
 8014b46:	6021      	streq	r1, [r4, #0]
 8014b48:	6054      	str	r4, [r2, #4]
 8014b4a:	e7ca      	b.n	8014ae2 <_free_r+0x26>
 8014b4c:	b003      	add	sp, #12
 8014b4e:	bd30      	pop	{r4, r5, pc}
 8014b50:	240050ac 	.word	0x240050ac

08014b54 <sbrk_aligned>:
 8014b54:	b570      	push	{r4, r5, r6, lr}
 8014b56:	4e0e      	ldr	r6, [pc, #56]	; (8014b90 <sbrk_aligned+0x3c>)
 8014b58:	460c      	mov	r4, r1
 8014b5a:	6831      	ldr	r1, [r6, #0]
 8014b5c:	4605      	mov	r5, r0
 8014b5e:	b911      	cbnz	r1, 8014b66 <sbrk_aligned+0x12>
 8014b60:	f000 f91a 	bl	8014d98 <_sbrk_r>
 8014b64:	6030      	str	r0, [r6, #0]
 8014b66:	4621      	mov	r1, r4
 8014b68:	4628      	mov	r0, r5
 8014b6a:	f000 f915 	bl	8014d98 <_sbrk_r>
 8014b6e:	1c43      	adds	r3, r0, #1
 8014b70:	d00a      	beq.n	8014b88 <sbrk_aligned+0x34>
 8014b72:	1cc4      	adds	r4, r0, #3
 8014b74:	f024 0403 	bic.w	r4, r4, #3
 8014b78:	42a0      	cmp	r0, r4
 8014b7a:	d007      	beq.n	8014b8c <sbrk_aligned+0x38>
 8014b7c:	1a21      	subs	r1, r4, r0
 8014b7e:	4628      	mov	r0, r5
 8014b80:	f000 f90a 	bl	8014d98 <_sbrk_r>
 8014b84:	3001      	adds	r0, #1
 8014b86:	d101      	bne.n	8014b8c <sbrk_aligned+0x38>
 8014b88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014b8c:	4620      	mov	r0, r4
 8014b8e:	bd70      	pop	{r4, r5, r6, pc}
 8014b90:	240050b0 	.word	0x240050b0

08014b94 <_malloc_r>:
 8014b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b98:	1ccd      	adds	r5, r1, #3
 8014b9a:	f025 0503 	bic.w	r5, r5, #3
 8014b9e:	3508      	adds	r5, #8
 8014ba0:	2d0c      	cmp	r5, #12
 8014ba2:	bf38      	it	cc
 8014ba4:	250c      	movcc	r5, #12
 8014ba6:	2d00      	cmp	r5, #0
 8014ba8:	4607      	mov	r7, r0
 8014baa:	db01      	blt.n	8014bb0 <_malloc_r+0x1c>
 8014bac:	42a9      	cmp	r1, r5
 8014bae:	d905      	bls.n	8014bbc <_malloc_r+0x28>
 8014bb0:	230c      	movs	r3, #12
 8014bb2:	603b      	str	r3, [r7, #0]
 8014bb4:	2600      	movs	r6, #0
 8014bb6:	4630      	mov	r0, r6
 8014bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bbc:	4e2e      	ldr	r6, [pc, #184]	; (8014c78 <_malloc_r+0xe4>)
 8014bbe:	f000 fbdb 	bl	8015378 <__malloc_lock>
 8014bc2:	6833      	ldr	r3, [r6, #0]
 8014bc4:	461c      	mov	r4, r3
 8014bc6:	bb34      	cbnz	r4, 8014c16 <_malloc_r+0x82>
 8014bc8:	4629      	mov	r1, r5
 8014bca:	4638      	mov	r0, r7
 8014bcc:	f7ff ffc2 	bl	8014b54 <sbrk_aligned>
 8014bd0:	1c43      	adds	r3, r0, #1
 8014bd2:	4604      	mov	r4, r0
 8014bd4:	d14d      	bne.n	8014c72 <_malloc_r+0xde>
 8014bd6:	6834      	ldr	r4, [r6, #0]
 8014bd8:	4626      	mov	r6, r4
 8014bda:	2e00      	cmp	r6, #0
 8014bdc:	d140      	bne.n	8014c60 <_malloc_r+0xcc>
 8014bde:	6823      	ldr	r3, [r4, #0]
 8014be0:	4631      	mov	r1, r6
 8014be2:	4638      	mov	r0, r7
 8014be4:	eb04 0803 	add.w	r8, r4, r3
 8014be8:	f000 f8d6 	bl	8014d98 <_sbrk_r>
 8014bec:	4580      	cmp	r8, r0
 8014bee:	d13a      	bne.n	8014c66 <_malloc_r+0xd2>
 8014bf0:	6821      	ldr	r1, [r4, #0]
 8014bf2:	3503      	adds	r5, #3
 8014bf4:	1a6d      	subs	r5, r5, r1
 8014bf6:	f025 0503 	bic.w	r5, r5, #3
 8014bfa:	3508      	adds	r5, #8
 8014bfc:	2d0c      	cmp	r5, #12
 8014bfe:	bf38      	it	cc
 8014c00:	250c      	movcc	r5, #12
 8014c02:	4629      	mov	r1, r5
 8014c04:	4638      	mov	r0, r7
 8014c06:	f7ff ffa5 	bl	8014b54 <sbrk_aligned>
 8014c0a:	3001      	adds	r0, #1
 8014c0c:	d02b      	beq.n	8014c66 <_malloc_r+0xd2>
 8014c0e:	6823      	ldr	r3, [r4, #0]
 8014c10:	442b      	add	r3, r5
 8014c12:	6023      	str	r3, [r4, #0]
 8014c14:	e00e      	b.n	8014c34 <_malloc_r+0xa0>
 8014c16:	6822      	ldr	r2, [r4, #0]
 8014c18:	1b52      	subs	r2, r2, r5
 8014c1a:	d41e      	bmi.n	8014c5a <_malloc_r+0xc6>
 8014c1c:	2a0b      	cmp	r2, #11
 8014c1e:	d916      	bls.n	8014c4e <_malloc_r+0xba>
 8014c20:	1961      	adds	r1, r4, r5
 8014c22:	42a3      	cmp	r3, r4
 8014c24:	6025      	str	r5, [r4, #0]
 8014c26:	bf18      	it	ne
 8014c28:	6059      	strne	r1, [r3, #4]
 8014c2a:	6863      	ldr	r3, [r4, #4]
 8014c2c:	bf08      	it	eq
 8014c2e:	6031      	streq	r1, [r6, #0]
 8014c30:	5162      	str	r2, [r4, r5]
 8014c32:	604b      	str	r3, [r1, #4]
 8014c34:	4638      	mov	r0, r7
 8014c36:	f104 060b 	add.w	r6, r4, #11
 8014c3a:	f000 fba3 	bl	8015384 <__malloc_unlock>
 8014c3e:	f026 0607 	bic.w	r6, r6, #7
 8014c42:	1d23      	adds	r3, r4, #4
 8014c44:	1af2      	subs	r2, r6, r3
 8014c46:	d0b6      	beq.n	8014bb6 <_malloc_r+0x22>
 8014c48:	1b9b      	subs	r3, r3, r6
 8014c4a:	50a3      	str	r3, [r4, r2]
 8014c4c:	e7b3      	b.n	8014bb6 <_malloc_r+0x22>
 8014c4e:	6862      	ldr	r2, [r4, #4]
 8014c50:	42a3      	cmp	r3, r4
 8014c52:	bf0c      	ite	eq
 8014c54:	6032      	streq	r2, [r6, #0]
 8014c56:	605a      	strne	r2, [r3, #4]
 8014c58:	e7ec      	b.n	8014c34 <_malloc_r+0xa0>
 8014c5a:	4623      	mov	r3, r4
 8014c5c:	6864      	ldr	r4, [r4, #4]
 8014c5e:	e7b2      	b.n	8014bc6 <_malloc_r+0x32>
 8014c60:	4634      	mov	r4, r6
 8014c62:	6876      	ldr	r6, [r6, #4]
 8014c64:	e7b9      	b.n	8014bda <_malloc_r+0x46>
 8014c66:	230c      	movs	r3, #12
 8014c68:	603b      	str	r3, [r7, #0]
 8014c6a:	4638      	mov	r0, r7
 8014c6c:	f000 fb8a 	bl	8015384 <__malloc_unlock>
 8014c70:	e7a1      	b.n	8014bb6 <_malloc_r+0x22>
 8014c72:	6025      	str	r5, [r4, #0]
 8014c74:	e7de      	b.n	8014c34 <_malloc_r+0xa0>
 8014c76:	bf00      	nop
 8014c78:	240050ac 	.word	0x240050ac

08014c7c <iprintf>:
 8014c7c:	b40f      	push	{r0, r1, r2, r3}
 8014c7e:	4b0a      	ldr	r3, [pc, #40]	; (8014ca8 <iprintf+0x2c>)
 8014c80:	b513      	push	{r0, r1, r4, lr}
 8014c82:	681c      	ldr	r4, [r3, #0]
 8014c84:	b124      	cbz	r4, 8014c90 <iprintf+0x14>
 8014c86:	69a3      	ldr	r3, [r4, #24]
 8014c88:	b913      	cbnz	r3, 8014c90 <iprintf+0x14>
 8014c8a:	4620      	mov	r0, r4
 8014c8c:	f000 fa6e 	bl	801516c <__sinit>
 8014c90:	ab05      	add	r3, sp, #20
 8014c92:	9a04      	ldr	r2, [sp, #16]
 8014c94:	68a1      	ldr	r1, [r4, #8]
 8014c96:	9301      	str	r3, [sp, #4]
 8014c98:	4620      	mov	r0, r4
 8014c9a:	f000 fba3 	bl	80153e4 <_vfiprintf_r>
 8014c9e:	b002      	add	sp, #8
 8014ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ca4:	b004      	add	sp, #16
 8014ca6:	4770      	bx	lr
 8014ca8:	2400009c 	.word	0x2400009c

08014cac <_puts_r>:
 8014cac:	b570      	push	{r4, r5, r6, lr}
 8014cae:	460e      	mov	r6, r1
 8014cb0:	4605      	mov	r5, r0
 8014cb2:	b118      	cbz	r0, 8014cbc <_puts_r+0x10>
 8014cb4:	6983      	ldr	r3, [r0, #24]
 8014cb6:	b90b      	cbnz	r3, 8014cbc <_puts_r+0x10>
 8014cb8:	f000 fa58 	bl	801516c <__sinit>
 8014cbc:	69ab      	ldr	r3, [r5, #24]
 8014cbe:	68ac      	ldr	r4, [r5, #8]
 8014cc0:	b913      	cbnz	r3, 8014cc8 <_puts_r+0x1c>
 8014cc2:	4628      	mov	r0, r5
 8014cc4:	f000 fa52 	bl	801516c <__sinit>
 8014cc8:	4b2c      	ldr	r3, [pc, #176]	; (8014d7c <_puts_r+0xd0>)
 8014cca:	429c      	cmp	r4, r3
 8014ccc:	d120      	bne.n	8014d10 <_puts_r+0x64>
 8014cce:	686c      	ldr	r4, [r5, #4]
 8014cd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014cd2:	07db      	lsls	r3, r3, #31
 8014cd4:	d405      	bmi.n	8014ce2 <_puts_r+0x36>
 8014cd6:	89a3      	ldrh	r3, [r4, #12]
 8014cd8:	0598      	lsls	r0, r3, #22
 8014cda:	d402      	bmi.n	8014ce2 <_puts_r+0x36>
 8014cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014cde:	f000 fae3 	bl	80152a8 <__retarget_lock_acquire_recursive>
 8014ce2:	89a3      	ldrh	r3, [r4, #12]
 8014ce4:	0719      	lsls	r1, r3, #28
 8014ce6:	d51d      	bpl.n	8014d24 <_puts_r+0x78>
 8014ce8:	6923      	ldr	r3, [r4, #16]
 8014cea:	b1db      	cbz	r3, 8014d24 <_puts_r+0x78>
 8014cec:	3e01      	subs	r6, #1
 8014cee:	68a3      	ldr	r3, [r4, #8]
 8014cf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014cf4:	3b01      	subs	r3, #1
 8014cf6:	60a3      	str	r3, [r4, #8]
 8014cf8:	bb39      	cbnz	r1, 8014d4a <_puts_r+0x9e>
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	da38      	bge.n	8014d70 <_puts_r+0xc4>
 8014cfe:	4622      	mov	r2, r4
 8014d00:	210a      	movs	r1, #10
 8014d02:	4628      	mov	r0, r5
 8014d04:	f000 f858 	bl	8014db8 <__swbuf_r>
 8014d08:	3001      	adds	r0, #1
 8014d0a:	d011      	beq.n	8014d30 <_puts_r+0x84>
 8014d0c:	250a      	movs	r5, #10
 8014d0e:	e011      	b.n	8014d34 <_puts_r+0x88>
 8014d10:	4b1b      	ldr	r3, [pc, #108]	; (8014d80 <_puts_r+0xd4>)
 8014d12:	429c      	cmp	r4, r3
 8014d14:	d101      	bne.n	8014d1a <_puts_r+0x6e>
 8014d16:	68ac      	ldr	r4, [r5, #8]
 8014d18:	e7da      	b.n	8014cd0 <_puts_r+0x24>
 8014d1a:	4b1a      	ldr	r3, [pc, #104]	; (8014d84 <_puts_r+0xd8>)
 8014d1c:	429c      	cmp	r4, r3
 8014d1e:	bf08      	it	eq
 8014d20:	68ec      	ldreq	r4, [r5, #12]
 8014d22:	e7d5      	b.n	8014cd0 <_puts_r+0x24>
 8014d24:	4621      	mov	r1, r4
 8014d26:	4628      	mov	r0, r5
 8014d28:	f000 f898 	bl	8014e5c <__swsetup_r>
 8014d2c:	2800      	cmp	r0, #0
 8014d2e:	d0dd      	beq.n	8014cec <_puts_r+0x40>
 8014d30:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014d36:	07da      	lsls	r2, r3, #31
 8014d38:	d405      	bmi.n	8014d46 <_puts_r+0x9a>
 8014d3a:	89a3      	ldrh	r3, [r4, #12]
 8014d3c:	059b      	lsls	r3, r3, #22
 8014d3e:	d402      	bmi.n	8014d46 <_puts_r+0x9a>
 8014d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d42:	f000 fab2 	bl	80152aa <__retarget_lock_release_recursive>
 8014d46:	4628      	mov	r0, r5
 8014d48:	bd70      	pop	{r4, r5, r6, pc}
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	da04      	bge.n	8014d58 <_puts_r+0xac>
 8014d4e:	69a2      	ldr	r2, [r4, #24]
 8014d50:	429a      	cmp	r2, r3
 8014d52:	dc06      	bgt.n	8014d62 <_puts_r+0xb6>
 8014d54:	290a      	cmp	r1, #10
 8014d56:	d004      	beq.n	8014d62 <_puts_r+0xb6>
 8014d58:	6823      	ldr	r3, [r4, #0]
 8014d5a:	1c5a      	adds	r2, r3, #1
 8014d5c:	6022      	str	r2, [r4, #0]
 8014d5e:	7019      	strb	r1, [r3, #0]
 8014d60:	e7c5      	b.n	8014cee <_puts_r+0x42>
 8014d62:	4622      	mov	r2, r4
 8014d64:	4628      	mov	r0, r5
 8014d66:	f000 f827 	bl	8014db8 <__swbuf_r>
 8014d6a:	3001      	adds	r0, #1
 8014d6c:	d1bf      	bne.n	8014cee <_puts_r+0x42>
 8014d6e:	e7df      	b.n	8014d30 <_puts_r+0x84>
 8014d70:	6823      	ldr	r3, [r4, #0]
 8014d72:	250a      	movs	r5, #10
 8014d74:	1c5a      	adds	r2, r3, #1
 8014d76:	6022      	str	r2, [r4, #0]
 8014d78:	701d      	strb	r5, [r3, #0]
 8014d7a:	e7db      	b.n	8014d34 <_puts_r+0x88>
 8014d7c:	08015e18 	.word	0x08015e18
 8014d80:	08015e38 	.word	0x08015e38
 8014d84:	08015df8 	.word	0x08015df8

08014d88 <puts>:
 8014d88:	4b02      	ldr	r3, [pc, #8]	; (8014d94 <puts+0xc>)
 8014d8a:	4601      	mov	r1, r0
 8014d8c:	6818      	ldr	r0, [r3, #0]
 8014d8e:	f7ff bf8d 	b.w	8014cac <_puts_r>
 8014d92:	bf00      	nop
 8014d94:	2400009c 	.word	0x2400009c

08014d98 <_sbrk_r>:
 8014d98:	b538      	push	{r3, r4, r5, lr}
 8014d9a:	4d06      	ldr	r5, [pc, #24]	; (8014db4 <_sbrk_r+0x1c>)
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	4604      	mov	r4, r0
 8014da0:	4608      	mov	r0, r1
 8014da2:	602b      	str	r3, [r5, #0]
 8014da4:	f7ed ff96 	bl	8002cd4 <_sbrk>
 8014da8:	1c43      	adds	r3, r0, #1
 8014daa:	d102      	bne.n	8014db2 <_sbrk_r+0x1a>
 8014dac:	682b      	ldr	r3, [r5, #0]
 8014dae:	b103      	cbz	r3, 8014db2 <_sbrk_r+0x1a>
 8014db0:	6023      	str	r3, [r4, #0]
 8014db2:	bd38      	pop	{r3, r4, r5, pc}
 8014db4:	240050b8 	.word	0x240050b8

08014db8 <__swbuf_r>:
 8014db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dba:	460e      	mov	r6, r1
 8014dbc:	4614      	mov	r4, r2
 8014dbe:	4605      	mov	r5, r0
 8014dc0:	b118      	cbz	r0, 8014dca <__swbuf_r+0x12>
 8014dc2:	6983      	ldr	r3, [r0, #24]
 8014dc4:	b90b      	cbnz	r3, 8014dca <__swbuf_r+0x12>
 8014dc6:	f000 f9d1 	bl	801516c <__sinit>
 8014dca:	4b21      	ldr	r3, [pc, #132]	; (8014e50 <__swbuf_r+0x98>)
 8014dcc:	429c      	cmp	r4, r3
 8014dce:	d12b      	bne.n	8014e28 <__swbuf_r+0x70>
 8014dd0:	686c      	ldr	r4, [r5, #4]
 8014dd2:	69a3      	ldr	r3, [r4, #24]
 8014dd4:	60a3      	str	r3, [r4, #8]
 8014dd6:	89a3      	ldrh	r3, [r4, #12]
 8014dd8:	071a      	lsls	r2, r3, #28
 8014dda:	d52f      	bpl.n	8014e3c <__swbuf_r+0x84>
 8014ddc:	6923      	ldr	r3, [r4, #16]
 8014dde:	b36b      	cbz	r3, 8014e3c <__swbuf_r+0x84>
 8014de0:	6923      	ldr	r3, [r4, #16]
 8014de2:	6820      	ldr	r0, [r4, #0]
 8014de4:	1ac0      	subs	r0, r0, r3
 8014de6:	6963      	ldr	r3, [r4, #20]
 8014de8:	b2f6      	uxtb	r6, r6
 8014dea:	4283      	cmp	r3, r0
 8014dec:	4637      	mov	r7, r6
 8014dee:	dc04      	bgt.n	8014dfa <__swbuf_r+0x42>
 8014df0:	4621      	mov	r1, r4
 8014df2:	4628      	mov	r0, r5
 8014df4:	f000 f926 	bl	8015044 <_fflush_r>
 8014df8:	bb30      	cbnz	r0, 8014e48 <__swbuf_r+0x90>
 8014dfa:	68a3      	ldr	r3, [r4, #8]
 8014dfc:	3b01      	subs	r3, #1
 8014dfe:	60a3      	str	r3, [r4, #8]
 8014e00:	6823      	ldr	r3, [r4, #0]
 8014e02:	1c5a      	adds	r2, r3, #1
 8014e04:	6022      	str	r2, [r4, #0]
 8014e06:	701e      	strb	r6, [r3, #0]
 8014e08:	6963      	ldr	r3, [r4, #20]
 8014e0a:	3001      	adds	r0, #1
 8014e0c:	4283      	cmp	r3, r0
 8014e0e:	d004      	beq.n	8014e1a <__swbuf_r+0x62>
 8014e10:	89a3      	ldrh	r3, [r4, #12]
 8014e12:	07db      	lsls	r3, r3, #31
 8014e14:	d506      	bpl.n	8014e24 <__swbuf_r+0x6c>
 8014e16:	2e0a      	cmp	r6, #10
 8014e18:	d104      	bne.n	8014e24 <__swbuf_r+0x6c>
 8014e1a:	4621      	mov	r1, r4
 8014e1c:	4628      	mov	r0, r5
 8014e1e:	f000 f911 	bl	8015044 <_fflush_r>
 8014e22:	b988      	cbnz	r0, 8014e48 <__swbuf_r+0x90>
 8014e24:	4638      	mov	r0, r7
 8014e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e28:	4b0a      	ldr	r3, [pc, #40]	; (8014e54 <__swbuf_r+0x9c>)
 8014e2a:	429c      	cmp	r4, r3
 8014e2c:	d101      	bne.n	8014e32 <__swbuf_r+0x7a>
 8014e2e:	68ac      	ldr	r4, [r5, #8]
 8014e30:	e7cf      	b.n	8014dd2 <__swbuf_r+0x1a>
 8014e32:	4b09      	ldr	r3, [pc, #36]	; (8014e58 <__swbuf_r+0xa0>)
 8014e34:	429c      	cmp	r4, r3
 8014e36:	bf08      	it	eq
 8014e38:	68ec      	ldreq	r4, [r5, #12]
 8014e3a:	e7ca      	b.n	8014dd2 <__swbuf_r+0x1a>
 8014e3c:	4621      	mov	r1, r4
 8014e3e:	4628      	mov	r0, r5
 8014e40:	f000 f80c 	bl	8014e5c <__swsetup_r>
 8014e44:	2800      	cmp	r0, #0
 8014e46:	d0cb      	beq.n	8014de0 <__swbuf_r+0x28>
 8014e48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014e4c:	e7ea      	b.n	8014e24 <__swbuf_r+0x6c>
 8014e4e:	bf00      	nop
 8014e50:	08015e18 	.word	0x08015e18
 8014e54:	08015e38 	.word	0x08015e38
 8014e58:	08015df8 	.word	0x08015df8

08014e5c <__swsetup_r>:
 8014e5c:	4b32      	ldr	r3, [pc, #200]	; (8014f28 <__swsetup_r+0xcc>)
 8014e5e:	b570      	push	{r4, r5, r6, lr}
 8014e60:	681d      	ldr	r5, [r3, #0]
 8014e62:	4606      	mov	r6, r0
 8014e64:	460c      	mov	r4, r1
 8014e66:	b125      	cbz	r5, 8014e72 <__swsetup_r+0x16>
 8014e68:	69ab      	ldr	r3, [r5, #24]
 8014e6a:	b913      	cbnz	r3, 8014e72 <__swsetup_r+0x16>
 8014e6c:	4628      	mov	r0, r5
 8014e6e:	f000 f97d 	bl	801516c <__sinit>
 8014e72:	4b2e      	ldr	r3, [pc, #184]	; (8014f2c <__swsetup_r+0xd0>)
 8014e74:	429c      	cmp	r4, r3
 8014e76:	d10f      	bne.n	8014e98 <__swsetup_r+0x3c>
 8014e78:	686c      	ldr	r4, [r5, #4]
 8014e7a:	89a3      	ldrh	r3, [r4, #12]
 8014e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e80:	0719      	lsls	r1, r3, #28
 8014e82:	d42c      	bmi.n	8014ede <__swsetup_r+0x82>
 8014e84:	06dd      	lsls	r5, r3, #27
 8014e86:	d411      	bmi.n	8014eac <__swsetup_r+0x50>
 8014e88:	2309      	movs	r3, #9
 8014e8a:	6033      	str	r3, [r6, #0]
 8014e8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014e90:	81a3      	strh	r3, [r4, #12]
 8014e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e96:	e03e      	b.n	8014f16 <__swsetup_r+0xba>
 8014e98:	4b25      	ldr	r3, [pc, #148]	; (8014f30 <__swsetup_r+0xd4>)
 8014e9a:	429c      	cmp	r4, r3
 8014e9c:	d101      	bne.n	8014ea2 <__swsetup_r+0x46>
 8014e9e:	68ac      	ldr	r4, [r5, #8]
 8014ea0:	e7eb      	b.n	8014e7a <__swsetup_r+0x1e>
 8014ea2:	4b24      	ldr	r3, [pc, #144]	; (8014f34 <__swsetup_r+0xd8>)
 8014ea4:	429c      	cmp	r4, r3
 8014ea6:	bf08      	it	eq
 8014ea8:	68ec      	ldreq	r4, [r5, #12]
 8014eaa:	e7e6      	b.n	8014e7a <__swsetup_r+0x1e>
 8014eac:	0758      	lsls	r0, r3, #29
 8014eae:	d512      	bpl.n	8014ed6 <__swsetup_r+0x7a>
 8014eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014eb2:	b141      	cbz	r1, 8014ec6 <__swsetup_r+0x6a>
 8014eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014eb8:	4299      	cmp	r1, r3
 8014eba:	d002      	beq.n	8014ec2 <__swsetup_r+0x66>
 8014ebc:	4630      	mov	r0, r6
 8014ebe:	f7ff fdfd 	bl	8014abc <_free_r>
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	6363      	str	r3, [r4, #52]	; 0x34
 8014ec6:	89a3      	ldrh	r3, [r4, #12]
 8014ec8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014ecc:	81a3      	strh	r3, [r4, #12]
 8014ece:	2300      	movs	r3, #0
 8014ed0:	6063      	str	r3, [r4, #4]
 8014ed2:	6923      	ldr	r3, [r4, #16]
 8014ed4:	6023      	str	r3, [r4, #0]
 8014ed6:	89a3      	ldrh	r3, [r4, #12]
 8014ed8:	f043 0308 	orr.w	r3, r3, #8
 8014edc:	81a3      	strh	r3, [r4, #12]
 8014ede:	6923      	ldr	r3, [r4, #16]
 8014ee0:	b94b      	cbnz	r3, 8014ef6 <__swsetup_r+0x9a>
 8014ee2:	89a3      	ldrh	r3, [r4, #12]
 8014ee4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014eec:	d003      	beq.n	8014ef6 <__swsetup_r+0x9a>
 8014eee:	4621      	mov	r1, r4
 8014ef0:	4630      	mov	r0, r6
 8014ef2:	f000 fa01 	bl	80152f8 <__smakebuf_r>
 8014ef6:	89a0      	ldrh	r0, [r4, #12]
 8014ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014efc:	f010 0301 	ands.w	r3, r0, #1
 8014f00:	d00a      	beq.n	8014f18 <__swsetup_r+0xbc>
 8014f02:	2300      	movs	r3, #0
 8014f04:	60a3      	str	r3, [r4, #8]
 8014f06:	6963      	ldr	r3, [r4, #20]
 8014f08:	425b      	negs	r3, r3
 8014f0a:	61a3      	str	r3, [r4, #24]
 8014f0c:	6923      	ldr	r3, [r4, #16]
 8014f0e:	b943      	cbnz	r3, 8014f22 <__swsetup_r+0xc6>
 8014f10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014f14:	d1ba      	bne.n	8014e8c <__swsetup_r+0x30>
 8014f16:	bd70      	pop	{r4, r5, r6, pc}
 8014f18:	0781      	lsls	r1, r0, #30
 8014f1a:	bf58      	it	pl
 8014f1c:	6963      	ldrpl	r3, [r4, #20]
 8014f1e:	60a3      	str	r3, [r4, #8]
 8014f20:	e7f4      	b.n	8014f0c <__swsetup_r+0xb0>
 8014f22:	2000      	movs	r0, #0
 8014f24:	e7f7      	b.n	8014f16 <__swsetup_r+0xba>
 8014f26:	bf00      	nop
 8014f28:	2400009c 	.word	0x2400009c
 8014f2c:	08015e18 	.word	0x08015e18
 8014f30:	08015e38 	.word	0x08015e38
 8014f34:	08015df8 	.word	0x08015df8

08014f38 <__sflush_r>:
 8014f38:	898a      	ldrh	r2, [r1, #12]
 8014f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f3e:	4605      	mov	r5, r0
 8014f40:	0710      	lsls	r0, r2, #28
 8014f42:	460c      	mov	r4, r1
 8014f44:	d458      	bmi.n	8014ff8 <__sflush_r+0xc0>
 8014f46:	684b      	ldr	r3, [r1, #4]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	dc05      	bgt.n	8014f58 <__sflush_r+0x20>
 8014f4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	dc02      	bgt.n	8014f58 <__sflush_r+0x20>
 8014f52:	2000      	movs	r0, #0
 8014f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f5a:	2e00      	cmp	r6, #0
 8014f5c:	d0f9      	beq.n	8014f52 <__sflush_r+0x1a>
 8014f5e:	2300      	movs	r3, #0
 8014f60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014f64:	682f      	ldr	r7, [r5, #0]
 8014f66:	602b      	str	r3, [r5, #0]
 8014f68:	d032      	beq.n	8014fd0 <__sflush_r+0x98>
 8014f6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014f6c:	89a3      	ldrh	r3, [r4, #12]
 8014f6e:	075a      	lsls	r2, r3, #29
 8014f70:	d505      	bpl.n	8014f7e <__sflush_r+0x46>
 8014f72:	6863      	ldr	r3, [r4, #4]
 8014f74:	1ac0      	subs	r0, r0, r3
 8014f76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f78:	b10b      	cbz	r3, 8014f7e <__sflush_r+0x46>
 8014f7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014f7c:	1ac0      	subs	r0, r0, r3
 8014f7e:	2300      	movs	r3, #0
 8014f80:	4602      	mov	r2, r0
 8014f82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f84:	6a21      	ldr	r1, [r4, #32]
 8014f86:	4628      	mov	r0, r5
 8014f88:	47b0      	blx	r6
 8014f8a:	1c43      	adds	r3, r0, #1
 8014f8c:	89a3      	ldrh	r3, [r4, #12]
 8014f8e:	d106      	bne.n	8014f9e <__sflush_r+0x66>
 8014f90:	6829      	ldr	r1, [r5, #0]
 8014f92:	291d      	cmp	r1, #29
 8014f94:	d82c      	bhi.n	8014ff0 <__sflush_r+0xb8>
 8014f96:	4a2a      	ldr	r2, [pc, #168]	; (8015040 <__sflush_r+0x108>)
 8014f98:	40ca      	lsrs	r2, r1
 8014f9a:	07d6      	lsls	r6, r2, #31
 8014f9c:	d528      	bpl.n	8014ff0 <__sflush_r+0xb8>
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	6062      	str	r2, [r4, #4]
 8014fa2:	04d9      	lsls	r1, r3, #19
 8014fa4:	6922      	ldr	r2, [r4, #16]
 8014fa6:	6022      	str	r2, [r4, #0]
 8014fa8:	d504      	bpl.n	8014fb4 <__sflush_r+0x7c>
 8014faa:	1c42      	adds	r2, r0, #1
 8014fac:	d101      	bne.n	8014fb2 <__sflush_r+0x7a>
 8014fae:	682b      	ldr	r3, [r5, #0]
 8014fb0:	b903      	cbnz	r3, 8014fb4 <__sflush_r+0x7c>
 8014fb2:	6560      	str	r0, [r4, #84]	; 0x54
 8014fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014fb6:	602f      	str	r7, [r5, #0]
 8014fb8:	2900      	cmp	r1, #0
 8014fba:	d0ca      	beq.n	8014f52 <__sflush_r+0x1a>
 8014fbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014fc0:	4299      	cmp	r1, r3
 8014fc2:	d002      	beq.n	8014fca <__sflush_r+0x92>
 8014fc4:	4628      	mov	r0, r5
 8014fc6:	f7ff fd79 	bl	8014abc <_free_r>
 8014fca:	2000      	movs	r0, #0
 8014fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8014fce:	e7c1      	b.n	8014f54 <__sflush_r+0x1c>
 8014fd0:	6a21      	ldr	r1, [r4, #32]
 8014fd2:	2301      	movs	r3, #1
 8014fd4:	4628      	mov	r0, r5
 8014fd6:	47b0      	blx	r6
 8014fd8:	1c41      	adds	r1, r0, #1
 8014fda:	d1c7      	bne.n	8014f6c <__sflush_r+0x34>
 8014fdc:	682b      	ldr	r3, [r5, #0]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d0c4      	beq.n	8014f6c <__sflush_r+0x34>
 8014fe2:	2b1d      	cmp	r3, #29
 8014fe4:	d001      	beq.n	8014fea <__sflush_r+0xb2>
 8014fe6:	2b16      	cmp	r3, #22
 8014fe8:	d101      	bne.n	8014fee <__sflush_r+0xb6>
 8014fea:	602f      	str	r7, [r5, #0]
 8014fec:	e7b1      	b.n	8014f52 <__sflush_r+0x1a>
 8014fee:	89a3      	ldrh	r3, [r4, #12]
 8014ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ff4:	81a3      	strh	r3, [r4, #12]
 8014ff6:	e7ad      	b.n	8014f54 <__sflush_r+0x1c>
 8014ff8:	690f      	ldr	r7, [r1, #16]
 8014ffa:	2f00      	cmp	r7, #0
 8014ffc:	d0a9      	beq.n	8014f52 <__sflush_r+0x1a>
 8014ffe:	0793      	lsls	r3, r2, #30
 8015000:	680e      	ldr	r6, [r1, #0]
 8015002:	bf08      	it	eq
 8015004:	694b      	ldreq	r3, [r1, #20]
 8015006:	600f      	str	r7, [r1, #0]
 8015008:	bf18      	it	ne
 801500a:	2300      	movne	r3, #0
 801500c:	eba6 0807 	sub.w	r8, r6, r7
 8015010:	608b      	str	r3, [r1, #8]
 8015012:	f1b8 0f00 	cmp.w	r8, #0
 8015016:	dd9c      	ble.n	8014f52 <__sflush_r+0x1a>
 8015018:	6a21      	ldr	r1, [r4, #32]
 801501a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801501c:	4643      	mov	r3, r8
 801501e:	463a      	mov	r2, r7
 8015020:	4628      	mov	r0, r5
 8015022:	47b0      	blx	r6
 8015024:	2800      	cmp	r0, #0
 8015026:	dc06      	bgt.n	8015036 <__sflush_r+0xfe>
 8015028:	89a3      	ldrh	r3, [r4, #12]
 801502a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801502e:	81a3      	strh	r3, [r4, #12]
 8015030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015034:	e78e      	b.n	8014f54 <__sflush_r+0x1c>
 8015036:	4407      	add	r7, r0
 8015038:	eba8 0800 	sub.w	r8, r8, r0
 801503c:	e7e9      	b.n	8015012 <__sflush_r+0xda>
 801503e:	bf00      	nop
 8015040:	20400001 	.word	0x20400001

08015044 <_fflush_r>:
 8015044:	b538      	push	{r3, r4, r5, lr}
 8015046:	690b      	ldr	r3, [r1, #16]
 8015048:	4605      	mov	r5, r0
 801504a:	460c      	mov	r4, r1
 801504c:	b913      	cbnz	r3, 8015054 <_fflush_r+0x10>
 801504e:	2500      	movs	r5, #0
 8015050:	4628      	mov	r0, r5
 8015052:	bd38      	pop	{r3, r4, r5, pc}
 8015054:	b118      	cbz	r0, 801505e <_fflush_r+0x1a>
 8015056:	6983      	ldr	r3, [r0, #24]
 8015058:	b90b      	cbnz	r3, 801505e <_fflush_r+0x1a>
 801505a:	f000 f887 	bl	801516c <__sinit>
 801505e:	4b14      	ldr	r3, [pc, #80]	; (80150b0 <_fflush_r+0x6c>)
 8015060:	429c      	cmp	r4, r3
 8015062:	d11b      	bne.n	801509c <_fflush_r+0x58>
 8015064:	686c      	ldr	r4, [r5, #4]
 8015066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d0ef      	beq.n	801504e <_fflush_r+0xa>
 801506e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015070:	07d0      	lsls	r0, r2, #31
 8015072:	d404      	bmi.n	801507e <_fflush_r+0x3a>
 8015074:	0599      	lsls	r1, r3, #22
 8015076:	d402      	bmi.n	801507e <_fflush_r+0x3a>
 8015078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801507a:	f000 f915 	bl	80152a8 <__retarget_lock_acquire_recursive>
 801507e:	4628      	mov	r0, r5
 8015080:	4621      	mov	r1, r4
 8015082:	f7ff ff59 	bl	8014f38 <__sflush_r>
 8015086:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015088:	07da      	lsls	r2, r3, #31
 801508a:	4605      	mov	r5, r0
 801508c:	d4e0      	bmi.n	8015050 <_fflush_r+0xc>
 801508e:	89a3      	ldrh	r3, [r4, #12]
 8015090:	059b      	lsls	r3, r3, #22
 8015092:	d4dd      	bmi.n	8015050 <_fflush_r+0xc>
 8015094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015096:	f000 f908 	bl	80152aa <__retarget_lock_release_recursive>
 801509a:	e7d9      	b.n	8015050 <_fflush_r+0xc>
 801509c:	4b05      	ldr	r3, [pc, #20]	; (80150b4 <_fflush_r+0x70>)
 801509e:	429c      	cmp	r4, r3
 80150a0:	d101      	bne.n	80150a6 <_fflush_r+0x62>
 80150a2:	68ac      	ldr	r4, [r5, #8]
 80150a4:	e7df      	b.n	8015066 <_fflush_r+0x22>
 80150a6:	4b04      	ldr	r3, [pc, #16]	; (80150b8 <_fflush_r+0x74>)
 80150a8:	429c      	cmp	r4, r3
 80150aa:	bf08      	it	eq
 80150ac:	68ec      	ldreq	r4, [r5, #12]
 80150ae:	e7da      	b.n	8015066 <_fflush_r+0x22>
 80150b0:	08015e18 	.word	0x08015e18
 80150b4:	08015e38 	.word	0x08015e38
 80150b8:	08015df8 	.word	0x08015df8

080150bc <std>:
 80150bc:	2300      	movs	r3, #0
 80150be:	b510      	push	{r4, lr}
 80150c0:	4604      	mov	r4, r0
 80150c2:	e9c0 3300 	strd	r3, r3, [r0]
 80150c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80150ca:	6083      	str	r3, [r0, #8]
 80150cc:	8181      	strh	r1, [r0, #12]
 80150ce:	6643      	str	r3, [r0, #100]	; 0x64
 80150d0:	81c2      	strh	r2, [r0, #14]
 80150d2:	6183      	str	r3, [r0, #24]
 80150d4:	4619      	mov	r1, r3
 80150d6:	2208      	movs	r2, #8
 80150d8:	305c      	adds	r0, #92	; 0x5c
 80150da:	f7ff fce7 	bl	8014aac <memset>
 80150de:	4b05      	ldr	r3, [pc, #20]	; (80150f4 <std+0x38>)
 80150e0:	6263      	str	r3, [r4, #36]	; 0x24
 80150e2:	4b05      	ldr	r3, [pc, #20]	; (80150f8 <std+0x3c>)
 80150e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80150e6:	4b05      	ldr	r3, [pc, #20]	; (80150fc <std+0x40>)
 80150e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80150ea:	4b05      	ldr	r3, [pc, #20]	; (8015100 <std+0x44>)
 80150ec:	6224      	str	r4, [r4, #32]
 80150ee:	6323      	str	r3, [r4, #48]	; 0x30
 80150f0:	bd10      	pop	{r4, pc}
 80150f2:	bf00      	nop
 80150f4:	0801596d 	.word	0x0801596d
 80150f8:	0801598f 	.word	0x0801598f
 80150fc:	080159c7 	.word	0x080159c7
 8015100:	080159eb 	.word	0x080159eb

08015104 <_cleanup_r>:
 8015104:	4901      	ldr	r1, [pc, #4]	; (801510c <_cleanup_r+0x8>)
 8015106:	f000 b8af 	b.w	8015268 <_fwalk_reent>
 801510a:	bf00      	nop
 801510c:	08015045 	.word	0x08015045

08015110 <__sfmoreglue>:
 8015110:	b570      	push	{r4, r5, r6, lr}
 8015112:	2268      	movs	r2, #104	; 0x68
 8015114:	1e4d      	subs	r5, r1, #1
 8015116:	4355      	muls	r5, r2
 8015118:	460e      	mov	r6, r1
 801511a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801511e:	f7ff fd39 	bl	8014b94 <_malloc_r>
 8015122:	4604      	mov	r4, r0
 8015124:	b140      	cbz	r0, 8015138 <__sfmoreglue+0x28>
 8015126:	2100      	movs	r1, #0
 8015128:	e9c0 1600 	strd	r1, r6, [r0]
 801512c:	300c      	adds	r0, #12
 801512e:	60a0      	str	r0, [r4, #8]
 8015130:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015134:	f7ff fcba 	bl	8014aac <memset>
 8015138:	4620      	mov	r0, r4
 801513a:	bd70      	pop	{r4, r5, r6, pc}

0801513c <__sfp_lock_acquire>:
 801513c:	4801      	ldr	r0, [pc, #4]	; (8015144 <__sfp_lock_acquire+0x8>)
 801513e:	f000 b8b3 	b.w	80152a8 <__retarget_lock_acquire_recursive>
 8015142:	bf00      	nop
 8015144:	240050b5 	.word	0x240050b5

08015148 <__sfp_lock_release>:
 8015148:	4801      	ldr	r0, [pc, #4]	; (8015150 <__sfp_lock_release+0x8>)
 801514a:	f000 b8ae 	b.w	80152aa <__retarget_lock_release_recursive>
 801514e:	bf00      	nop
 8015150:	240050b5 	.word	0x240050b5

08015154 <__sinit_lock_acquire>:
 8015154:	4801      	ldr	r0, [pc, #4]	; (801515c <__sinit_lock_acquire+0x8>)
 8015156:	f000 b8a7 	b.w	80152a8 <__retarget_lock_acquire_recursive>
 801515a:	bf00      	nop
 801515c:	240050b6 	.word	0x240050b6

08015160 <__sinit_lock_release>:
 8015160:	4801      	ldr	r0, [pc, #4]	; (8015168 <__sinit_lock_release+0x8>)
 8015162:	f000 b8a2 	b.w	80152aa <__retarget_lock_release_recursive>
 8015166:	bf00      	nop
 8015168:	240050b6 	.word	0x240050b6

0801516c <__sinit>:
 801516c:	b510      	push	{r4, lr}
 801516e:	4604      	mov	r4, r0
 8015170:	f7ff fff0 	bl	8015154 <__sinit_lock_acquire>
 8015174:	69a3      	ldr	r3, [r4, #24]
 8015176:	b11b      	cbz	r3, 8015180 <__sinit+0x14>
 8015178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801517c:	f7ff bff0 	b.w	8015160 <__sinit_lock_release>
 8015180:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015184:	6523      	str	r3, [r4, #80]	; 0x50
 8015186:	4b13      	ldr	r3, [pc, #76]	; (80151d4 <__sinit+0x68>)
 8015188:	4a13      	ldr	r2, [pc, #76]	; (80151d8 <__sinit+0x6c>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	62a2      	str	r2, [r4, #40]	; 0x28
 801518e:	42a3      	cmp	r3, r4
 8015190:	bf04      	itt	eq
 8015192:	2301      	moveq	r3, #1
 8015194:	61a3      	streq	r3, [r4, #24]
 8015196:	4620      	mov	r0, r4
 8015198:	f000 f820 	bl	80151dc <__sfp>
 801519c:	6060      	str	r0, [r4, #4]
 801519e:	4620      	mov	r0, r4
 80151a0:	f000 f81c 	bl	80151dc <__sfp>
 80151a4:	60a0      	str	r0, [r4, #8]
 80151a6:	4620      	mov	r0, r4
 80151a8:	f000 f818 	bl	80151dc <__sfp>
 80151ac:	2200      	movs	r2, #0
 80151ae:	60e0      	str	r0, [r4, #12]
 80151b0:	2104      	movs	r1, #4
 80151b2:	6860      	ldr	r0, [r4, #4]
 80151b4:	f7ff ff82 	bl	80150bc <std>
 80151b8:	68a0      	ldr	r0, [r4, #8]
 80151ba:	2201      	movs	r2, #1
 80151bc:	2109      	movs	r1, #9
 80151be:	f7ff ff7d 	bl	80150bc <std>
 80151c2:	68e0      	ldr	r0, [r4, #12]
 80151c4:	2202      	movs	r2, #2
 80151c6:	2112      	movs	r1, #18
 80151c8:	f7ff ff78 	bl	80150bc <std>
 80151cc:	2301      	movs	r3, #1
 80151ce:	61a3      	str	r3, [r4, #24]
 80151d0:	e7d2      	b.n	8015178 <__sinit+0xc>
 80151d2:	bf00      	nop
 80151d4:	08015df4 	.word	0x08015df4
 80151d8:	08015105 	.word	0x08015105

080151dc <__sfp>:
 80151dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151de:	4607      	mov	r7, r0
 80151e0:	f7ff ffac 	bl	801513c <__sfp_lock_acquire>
 80151e4:	4b1e      	ldr	r3, [pc, #120]	; (8015260 <__sfp+0x84>)
 80151e6:	681e      	ldr	r6, [r3, #0]
 80151e8:	69b3      	ldr	r3, [r6, #24]
 80151ea:	b913      	cbnz	r3, 80151f2 <__sfp+0x16>
 80151ec:	4630      	mov	r0, r6
 80151ee:	f7ff ffbd 	bl	801516c <__sinit>
 80151f2:	3648      	adds	r6, #72	; 0x48
 80151f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80151f8:	3b01      	subs	r3, #1
 80151fa:	d503      	bpl.n	8015204 <__sfp+0x28>
 80151fc:	6833      	ldr	r3, [r6, #0]
 80151fe:	b30b      	cbz	r3, 8015244 <__sfp+0x68>
 8015200:	6836      	ldr	r6, [r6, #0]
 8015202:	e7f7      	b.n	80151f4 <__sfp+0x18>
 8015204:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015208:	b9d5      	cbnz	r5, 8015240 <__sfp+0x64>
 801520a:	4b16      	ldr	r3, [pc, #88]	; (8015264 <__sfp+0x88>)
 801520c:	60e3      	str	r3, [r4, #12]
 801520e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015212:	6665      	str	r5, [r4, #100]	; 0x64
 8015214:	f000 f847 	bl	80152a6 <__retarget_lock_init_recursive>
 8015218:	f7ff ff96 	bl	8015148 <__sfp_lock_release>
 801521c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015220:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015224:	6025      	str	r5, [r4, #0]
 8015226:	61a5      	str	r5, [r4, #24]
 8015228:	2208      	movs	r2, #8
 801522a:	4629      	mov	r1, r5
 801522c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015230:	f7ff fc3c 	bl	8014aac <memset>
 8015234:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015238:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801523c:	4620      	mov	r0, r4
 801523e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015240:	3468      	adds	r4, #104	; 0x68
 8015242:	e7d9      	b.n	80151f8 <__sfp+0x1c>
 8015244:	2104      	movs	r1, #4
 8015246:	4638      	mov	r0, r7
 8015248:	f7ff ff62 	bl	8015110 <__sfmoreglue>
 801524c:	4604      	mov	r4, r0
 801524e:	6030      	str	r0, [r6, #0]
 8015250:	2800      	cmp	r0, #0
 8015252:	d1d5      	bne.n	8015200 <__sfp+0x24>
 8015254:	f7ff ff78 	bl	8015148 <__sfp_lock_release>
 8015258:	230c      	movs	r3, #12
 801525a:	603b      	str	r3, [r7, #0]
 801525c:	e7ee      	b.n	801523c <__sfp+0x60>
 801525e:	bf00      	nop
 8015260:	08015df4 	.word	0x08015df4
 8015264:	ffff0001 	.word	0xffff0001

08015268 <_fwalk_reent>:
 8015268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801526c:	4606      	mov	r6, r0
 801526e:	4688      	mov	r8, r1
 8015270:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015274:	2700      	movs	r7, #0
 8015276:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801527a:	f1b9 0901 	subs.w	r9, r9, #1
 801527e:	d505      	bpl.n	801528c <_fwalk_reent+0x24>
 8015280:	6824      	ldr	r4, [r4, #0]
 8015282:	2c00      	cmp	r4, #0
 8015284:	d1f7      	bne.n	8015276 <_fwalk_reent+0xe>
 8015286:	4638      	mov	r0, r7
 8015288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801528c:	89ab      	ldrh	r3, [r5, #12]
 801528e:	2b01      	cmp	r3, #1
 8015290:	d907      	bls.n	80152a2 <_fwalk_reent+0x3a>
 8015292:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015296:	3301      	adds	r3, #1
 8015298:	d003      	beq.n	80152a2 <_fwalk_reent+0x3a>
 801529a:	4629      	mov	r1, r5
 801529c:	4630      	mov	r0, r6
 801529e:	47c0      	blx	r8
 80152a0:	4307      	orrs	r7, r0
 80152a2:	3568      	adds	r5, #104	; 0x68
 80152a4:	e7e9      	b.n	801527a <_fwalk_reent+0x12>

080152a6 <__retarget_lock_init_recursive>:
 80152a6:	4770      	bx	lr

080152a8 <__retarget_lock_acquire_recursive>:
 80152a8:	4770      	bx	lr

080152aa <__retarget_lock_release_recursive>:
 80152aa:	4770      	bx	lr

080152ac <__swhatbuf_r>:
 80152ac:	b570      	push	{r4, r5, r6, lr}
 80152ae:	460e      	mov	r6, r1
 80152b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80152b4:	2900      	cmp	r1, #0
 80152b6:	b096      	sub	sp, #88	; 0x58
 80152b8:	4614      	mov	r4, r2
 80152ba:	461d      	mov	r5, r3
 80152bc:	da08      	bge.n	80152d0 <__swhatbuf_r+0x24>
 80152be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80152c2:	2200      	movs	r2, #0
 80152c4:	602a      	str	r2, [r5, #0]
 80152c6:	061a      	lsls	r2, r3, #24
 80152c8:	d410      	bmi.n	80152ec <__swhatbuf_r+0x40>
 80152ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80152ce:	e00e      	b.n	80152ee <__swhatbuf_r+0x42>
 80152d0:	466a      	mov	r2, sp
 80152d2:	f000 fbb1 	bl	8015a38 <_fstat_r>
 80152d6:	2800      	cmp	r0, #0
 80152d8:	dbf1      	blt.n	80152be <__swhatbuf_r+0x12>
 80152da:	9a01      	ldr	r2, [sp, #4]
 80152dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80152e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80152e4:	425a      	negs	r2, r3
 80152e6:	415a      	adcs	r2, r3
 80152e8:	602a      	str	r2, [r5, #0]
 80152ea:	e7ee      	b.n	80152ca <__swhatbuf_r+0x1e>
 80152ec:	2340      	movs	r3, #64	; 0x40
 80152ee:	2000      	movs	r0, #0
 80152f0:	6023      	str	r3, [r4, #0]
 80152f2:	b016      	add	sp, #88	; 0x58
 80152f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080152f8 <__smakebuf_r>:
 80152f8:	898b      	ldrh	r3, [r1, #12]
 80152fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80152fc:	079d      	lsls	r5, r3, #30
 80152fe:	4606      	mov	r6, r0
 8015300:	460c      	mov	r4, r1
 8015302:	d507      	bpl.n	8015314 <__smakebuf_r+0x1c>
 8015304:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015308:	6023      	str	r3, [r4, #0]
 801530a:	6123      	str	r3, [r4, #16]
 801530c:	2301      	movs	r3, #1
 801530e:	6163      	str	r3, [r4, #20]
 8015310:	b002      	add	sp, #8
 8015312:	bd70      	pop	{r4, r5, r6, pc}
 8015314:	ab01      	add	r3, sp, #4
 8015316:	466a      	mov	r2, sp
 8015318:	f7ff ffc8 	bl	80152ac <__swhatbuf_r>
 801531c:	9900      	ldr	r1, [sp, #0]
 801531e:	4605      	mov	r5, r0
 8015320:	4630      	mov	r0, r6
 8015322:	f7ff fc37 	bl	8014b94 <_malloc_r>
 8015326:	b948      	cbnz	r0, 801533c <__smakebuf_r+0x44>
 8015328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801532c:	059a      	lsls	r2, r3, #22
 801532e:	d4ef      	bmi.n	8015310 <__smakebuf_r+0x18>
 8015330:	f023 0303 	bic.w	r3, r3, #3
 8015334:	f043 0302 	orr.w	r3, r3, #2
 8015338:	81a3      	strh	r3, [r4, #12]
 801533a:	e7e3      	b.n	8015304 <__smakebuf_r+0xc>
 801533c:	4b0d      	ldr	r3, [pc, #52]	; (8015374 <__smakebuf_r+0x7c>)
 801533e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015340:	89a3      	ldrh	r3, [r4, #12]
 8015342:	6020      	str	r0, [r4, #0]
 8015344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015348:	81a3      	strh	r3, [r4, #12]
 801534a:	9b00      	ldr	r3, [sp, #0]
 801534c:	6163      	str	r3, [r4, #20]
 801534e:	9b01      	ldr	r3, [sp, #4]
 8015350:	6120      	str	r0, [r4, #16]
 8015352:	b15b      	cbz	r3, 801536c <__smakebuf_r+0x74>
 8015354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015358:	4630      	mov	r0, r6
 801535a:	f000 fb7f 	bl	8015a5c <_isatty_r>
 801535e:	b128      	cbz	r0, 801536c <__smakebuf_r+0x74>
 8015360:	89a3      	ldrh	r3, [r4, #12]
 8015362:	f023 0303 	bic.w	r3, r3, #3
 8015366:	f043 0301 	orr.w	r3, r3, #1
 801536a:	81a3      	strh	r3, [r4, #12]
 801536c:	89a0      	ldrh	r0, [r4, #12]
 801536e:	4305      	orrs	r5, r0
 8015370:	81a5      	strh	r5, [r4, #12]
 8015372:	e7cd      	b.n	8015310 <__smakebuf_r+0x18>
 8015374:	08015105 	.word	0x08015105

08015378 <__malloc_lock>:
 8015378:	4801      	ldr	r0, [pc, #4]	; (8015380 <__malloc_lock+0x8>)
 801537a:	f7ff bf95 	b.w	80152a8 <__retarget_lock_acquire_recursive>
 801537e:	bf00      	nop
 8015380:	240050b4 	.word	0x240050b4

08015384 <__malloc_unlock>:
 8015384:	4801      	ldr	r0, [pc, #4]	; (801538c <__malloc_unlock+0x8>)
 8015386:	f7ff bf90 	b.w	80152aa <__retarget_lock_release_recursive>
 801538a:	bf00      	nop
 801538c:	240050b4 	.word	0x240050b4

08015390 <__sfputc_r>:
 8015390:	6893      	ldr	r3, [r2, #8]
 8015392:	3b01      	subs	r3, #1
 8015394:	2b00      	cmp	r3, #0
 8015396:	b410      	push	{r4}
 8015398:	6093      	str	r3, [r2, #8]
 801539a:	da08      	bge.n	80153ae <__sfputc_r+0x1e>
 801539c:	6994      	ldr	r4, [r2, #24]
 801539e:	42a3      	cmp	r3, r4
 80153a0:	db01      	blt.n	80153a6 <__sfputc_r+0x16>
 80153a2:	290a      	cmp	r1, #10
 80153a4:	d103      	bne.n	80153ae <__sfputc_r+0x1e>
 80153a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153aa:	f7ff bd05 	b.w	8014db8 <__swbuf_r>
 80153ae:	6813      	ldr	r3, [r2, #0]
 80153b0:	1c58      	adds	r0, r3, #1
 80153b2:	6010      	str	r0, [r2, #0]
 80153b4:	7019      	strb	r1, [r3, #0]
 80153b6:	4608      	mov	r0, r1
 80153b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153bc:	4770      	bx	lr

080153be <__sfputs_r>:
 80153be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153c0:	4606      	mov	r6, r0
 80153c2:	460f      	mov	r7, r1
 80153c4:	4614      	mov	r4, r2
 80153c6:	18d5      	adds	r5, r2, r3
 80153c8:	42ac      	cmp	r4, r5
 80153ca:	d101      	bne.n	80153d0 <__sfputs_r+0x12>
 80153cc:	2000      	movs	r0, #0
 80153ce:	e007      	b.n	80153e0 <__sfputs_r+0x22>
 80153d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153d4:	463a      	mov	r2, r7
 80153d6:	4630      	mov	r0, r6
 80153d8:	f7ff ffda 	bl	8015390 <__sfputc_r>
 80153dc:	1c43      	adds	r3, r0, #1
 80153de:	d1f3      	bne.n	80153c8 <__sfputs_r+0xa>
 80153e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080153e4 <_vfiprintf_r>:
 80153e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153e8:	460d      	mov	r5, r1
 80153ea:	b09d      	sub	sp, #116	; 0x74
 80153ec:	4614      	mov	r4, r2
 80153ee:	4698      	mov	r8, r3
 80153f0:	4606      	mov	r6, r0
 80153f2:	b118      	cbz	r0, 80153fc <_vfiprintf_r+0x18>
 80153f4:	6983      	ldr	r3, [r0, #24]
 80153f6:	b90b      	cbnz	r3, 80153fc <_vfiprintf_r+0x18>
 80153f8:	f7ff feb8 	bl	801516c <__sinit>
 80153fc:	4b89      	ldr	r3, [pc, #548]	; (8015624 <_vfiprintf_r+0x240>)
 80153fe:	429d      	cmp	r5, r3
 8015400:	d11b      	bne.n	801543a <_vfiprintf_r+0x56>
 8015402:	6875      	ldr	r5, [r6, #4]
 8015404:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015406:	07d9      	lsls	r1, r3, #31
 8015408:	d405      	bmi.n	8015416 <_vfiprintf_r+0x32>
 801540a:	89ab      	ldrh	r3, [r5, #12]
 801540c:	059a      	lsls	r2, r3, #22
 801540e:	d402      	bmi.n	8015416 <_vfiprintf_r+0x32>
 8015410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015412:	f7ff ff49 	bl	80152a8 <__retarget_lock_acquire_recursive>
 8015416:	89ab      	ldrh	r3, [r5, #12]
 8015418:	071b      	lsls	r3, r3, #28
 801541a:	d501      	bpl.n	8015420 <_vfiprintf_r+0x3c>
 801541c:	692b      	ldr	r3, [r5, #16]
 801541e:	b9eb      	cbnz	r3, 801545c <_vfiprintf_r+0x78>
 8015420:	4629      	mov	r1, r5
 8015422:	4630      	mov	r0, r6
 8015424:	f7ff fd1a 	bl	8014e5c <__swsetup_r>
 8015428:	b1c0      	cbz	r0, 801545c <_vfiprintf_r+0x78>
 801542a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801542c:	07dc      	lsls	r4, r3, #31
 801542e:	d50e      	bpl.n	801544e <_vfiprintf_r+0x6a>
 8015430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015434:	b01d      	add	sp, #116	; 0x74
 8015436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801543a:	4b7b      	ldr	r3, [pc, #492]	; (8015628 <_vfiprintf_r+0x244>)
 801543c:	429d      	cmp	r5, r3
 801543e:	d101      	bne.n	8015444 <_vfiprintf_r+0x60>
 8015440:	68b5      	ldr	r5, [r6, #8]
 8015442:	e7df      	b.n	8015404 <_vfiprintf_r+0x20>
 8015444:	4b79      	ldr	r3, [pc, #484]	; (801562c <_vfiprintf_r+0x248>)
 8015446:	429d      	cmp	r5, r3
 8015448:	bf08      	it	eq
 801544a:	68f5      	ldreq	r5, [r6, #12]
 801544c:	e7da      	b.n	8015404 <_vfiprintf_r+0x20>
 801544e:	89ab      	ldrh	r3, [r5, #12]
 8015450:	0598      	lsls	r0, r3, #22
 8015452:	d4ed      	bmi.n	8015430 <_vfiprintf_r+0x4c>
 8015454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015456:	f7ff ff28 	bl	80152aa <__retarget_lock_release_recursive>
 801545a:	e7e9      	b.n	8015430 <_vfiprintf_r+0x4c>
 801545c:	2300      	movs	r3, #0
 801545e:	9309      	str	r3, [sp, #36]	; 0x24
 8015460:	2320      	movs	r3, #32
 8015462:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015466:	f8cd 800c 	str.w	r8, [sp, #12]
 801546a:	2330      	movs	r3, #48	; 0x30
 801546c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015630 <_vfiprintf_r+0x24c>
 8015470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015474:	f04f 0901 	mov.w	r9, #1
 8015478:	4623      	mov	r3, r4
 801547a:	469a      	mov	sl, r3
 801547c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015480:	b10a      	cbz	r2, 8015486 <_vfiprintf_r+0xa2>
 8015482:	2a25      	cmp	r2, #37	; 0x25
 8015484:	d1f9      	bne.n	801547a <_vfiprintf_r+0x96>
 8015486:	ebba 0b04 	subs.w	fp, sl, r4
 801548a:	d00b      	beq.n	80154a4 <_vfiprintf_r+0xc0>
 801548c:	465b      	mov	r3, fp
 801548e:	4622      	mov	r2, r4
 8015490:	4629      	mov	r1, r5
 8015492:	4630      	mov	r0, r6
 8015494:	f7ff ff93 	bl	80153be <__sfputs_r>
 8015498:	3001      	adds	r0, #1
 801549a:	f000 80aa 	beq.w	80155f2 <_vfiprintf_r+0x20e>
 801549e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80154a0:	445a      	add	r2, fp
 80154a2:	9209      	str	r2, [sp, #36]	; 0x24
 80154a4:	f89a 3000 	ldrb.w	r3, [sl]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	f000 80a2 	beq.w	80155f2 <_vfiprintf_r+0x20e>
 80154ae:	2300      	movs	r3, #0
 80154b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80154b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80154b8:	f10a 0a01 	add.w	sl, sl, #1
 80154bc:	9304      	str	r3, [sp, #16]
 80154be:	9307      	str	r3, [sp, #28]
 80154c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80154c4:	931a      	str	r3, [sp, #104]	; 0x68
 80154c6:	4654      	mov	r4, sl
 80154c8:	2205      	movs	r2, #5
 80154ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154ce:	4858      	ldr	r0, [pc, #352]	; (8015630 <_vfiprintf_r+0x24c>)
 80154d0:	f7ea ff06 	bl	80002e0 <memchr>
 80154d4:	9a04      	ldr	r2, [sp, #16]
 80154d6:	b9d8      	cbnz	r0, 8015510 <_vfiprintf_r+0x12c>
 80154d8:	06d1      	lsls	r1, r2, #27
 80154da:	bf44      	itt	mi
 80154dc:	2320      	movmi	r3, #32
 80154de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80154e2:	0713      	lsls	r3, r2, #28
 80154e4:	bf44      	itt	mi
 80154e6:	232b      	movmi	r3, #43	; 0x2b
 80154e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80154ec:	f89a 3000 	ldrb.w	r3, [sl]
 80154f0:	2b2a      	cmp	r3, #42	; 0x2a
 80154f2:	d015      	beq.n	8015520 <_vfiprintf_r+0x13c>
 80154f4:	9a07      	ldr	r2, [sp, #28]
 80154f6:	4654      	mov	r4, sl
 80154f8:	2000      	movs	r0, #0
 80154fa:	f04f 0c0a 	mov.w	ip, #10
 80154fe:	4621      	mov	r1, r4
 8015500:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015504:	3b30      	subs	r3, #48	; 0x30
 8015506:	2b09      	cmp	r3, #9
 8015508:	d94e      	bls.n	80155a8 <_vfiprintf_r+0x1c4>
 801550a:	b1b0      	cbz	r0, 801553a <_vfiprintf_r+0x156>
 801550c:	9207      	str	r2, [sp, #28]
 801550e:	e014      	b.n	801553a <_vfiprintf_r+0x156>
 8015510:	eba0 0308 	sub.w	r3, r0, r8
 8015514:	fa09 f303 	lsl.w	r3, r9, r3
 8015518:	4313      	orrs	r3, r2
 801551a:	9304      	str	r3, [sp, #16]
 801551c:	46a2      	mov	sl, r4
 801551e:	e7d2      	b.n	80154c6 <_vfiprintf_r+0xe2>
 8015520:	9b03      	ldr	r3, [sp, #12]
 8015522:	1d19      	adds	r1, r3, #4
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	9103      	str	r1, [sp, #12]
 8015528:	2b00      	cmp	r3, #0
 801552a:	bfbb      	ittet	lt
 801552c:	425b      	neglt	r3, r3
 801552e:	f042 0202 	orrlt.w	r2, r2, #2
 8015532:	9307      	strge	r3, [sp, #28]
 8015534:	9307      	strlt	r3, [sp, #28]
 8015536:	bfb8      	it	lt
 8015538:	9204      	strlt	r2, [sp, #16]
 801553a:	7823      	ldrb	r3, [r4, #0]
 801553c:	2b2e      	cmp	r3, #46	; 0x2e
 801553e:	d10c      	bne.n	801555a <_vfiprintf_r+0x176>
 8015540:	7863      	ldrb	r3, [r4, #1]
 8015542:	2b2a      	cmp	r3, #42	; 0x2a
 8015544:	d135      	bne.n	80155b2 <_vfiprintf_r+0x1ce>
 8015546:	9b03      	ldr	r3, [sp, #12]
 8015548:	1d1a      	adds	r2, r3, #4
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	9203      	str	r2, [sp, #12]
 801554e:	2b00      	cmp	r3, #0
 8015550:	bfb8      	it	lt
 8015552:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015556:	3402      	adds	r4, #2
 8015558:	9305      	str	r3, [sp, #20]
 801555a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015640 <_vfiprintf_r+0x25c>
 801555e:	7821      	ldrb	r1, [r4, #0]
 8015560:	2203      	movs	r2, #3
 8015562:	4650      	mov	r0, sl
 8015564:	f7ea febc 	bl	80002e0 <memchr>
 8015568:	b140      	cbz	r0, 801557c <_vfiprintf_r+0x198>
 801556a:	2340      	movs	r3, #64	; 0x40
 801556c:	eba0 000a 	sub.w	r0, r0, sl
 8015570:	fa03 f000 	lsl.w	r0, r3, r0
 8015574:	9b04      	ldr	r3, [sp, #16]
 8015576:	4303      	orrs	r3, r0
 8015578:	3401      	adds	r4, #1
 801557a:	9304      	str	r3, [sp, #16]
 801557c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015580:	482c      	ldr	r0, [pc, #176]	; (8015634 <_vfiprintf_r+0x250>)
 8015582:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015586:	2206      	movs	r2, #6
 8015588:	f7ea feaa 	bl	80002e0 <memchr>
 801558c:	2800      	cmp	r0, #0
 801558e:	d03f      	beq.n	8015610 <_vfiprintf_r+0x22c>
 8015590:	4b29      	ldr	r3, [pc, #164]	; (8015638 <_vfiprintf_r+0x254>)
 8015592:	bb1b      	cbnz	r3, 80155dc <_vfiprintf_r+0x1f8>
 8015594:	9b03      	ldr	r3, [sp, #12]
 8015596:	3307      	adds	r3, #7
 8015598:	f023 0307 	bic.w	r3, r3, #7
 801559c:	3308      	adds	r3, #8
 801559e:	9303      	str	r3, [sp, #12]
 80155a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155a2:	443b      	add	r3, r7
 80155a4:	9309      	str	r3, [sp, #36]	; 0x24
 80155a6:	e767      	b.n	8015478 <_vfiprintf_r+0x94>
 80155a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80155ac:	460c      	mov	r4, r1
 80155ae:	2001      	movs	r0, #1
 80155b0:	e7a5      	b.n	80154fe <_vfiprintf_r+0x11a>
 80155b2:	2300      	movs	r3, #0
 80155b4:	3401      	adds	r4, #1
 80155b6:	9305      	str	r3, [sp, #20]
 80155b8:	4619      	mov	r1, r3
 80155ba:	f04f 0c0a 	mov.w	ip, #10
 80155be:	4620      	mov	r0, r4
 80155c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155c4:	3a30      	subs	r2, #48	; 0x30
 80155c6:	2a09      	cmp	r2, #9
 80155c8:	d903      	bls.n	80155d2 <_vfiprintf_r+0x1ee>
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d0c5      	beq.n	801555a <_vfiprintf_r+0x176>
 80155ce:	9105      	str	r1, [sp, #20]
 80155d0:	e7c3      	b.n	801555a <_vfiprintf_r+0x176>
 80155d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80155d6:	4604      	mov	r4, r0
 80155d8:	2301      	movs	r3, #1
 80155da:	e7f0      	b.n	80155be <_vfiprintf_r+0x1da>
 80155dc:	ab03      	add	r3, sp, #12
 80155de:	9300      	str	r3, [sp, #0]
 80155e0:	462a      	mov	r2, r5
 80155e2:	4b16      	ldr	r3, [pc, #88]	; (801563c <_vfiprintf_r+0x258>)
 80155e4:	a904      	add	r1, sp, #16
 80155e6:	4630      	mov	r0, r6
 80155e8:	f3af 8000 	nop.w
 80155ec:	4607      	mov	r7, r0
 80155ee:	1c78      	adds	r0, r7, #1
 80155f0:	d1d6      	bne.n	80155a0 <_vfiprintf_r+0x1bc>
 80155f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80155f4:	07d9      	lsls	r1, r3, #31
 80155f6:	d405      	bmi.n	8015604 <_vfiprintf_r+0x220>
 80155f8:	89ab      	ldrh	r3, [r5, #12]
 80155fa:	059a      	lsls	r2, r3, #22
 80155fc:	d402      	bmi.n	8015604 <_vfiprintf_r+0x220>
 80155fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015600:	f7ff fe53 	bl	80152aa <__retarget_lock_release_recursive>
 8015604:	89ab      	ldrh	r3, [r5, #12]
 8015606:	065b      	lsls	r3, r3, #25
 8015608:	f53f af12 	bmi.w	8015430 <_vfiprintf_r+0x4c>
 801560c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801560e:	e711      	b.n	8015434 <_vfiprintf_r+0x50>
 8015610:	ab03      	add	r3, sp, #12
 8015612:	9300      	str	r3, [sp, #0]
 8015614:	462a      	mov	r2, r5
 8015616:	4b09      	ldr	r3, [pc, #36]	; (801563c <_vfiprintf_r+0x258>)
 8015618:	a904      	add	r1, sp, #16
 801561a:	4630      	mov	r0, r6
 801561c:	f000 f880 	bl	8015720 <_printf_i>
 8015620:	e7e4      	b.n	80155ec <_vfiprintf_r+0x208>
 8015622:	bf00      	nop
 8015624:	08015e18 	.word	0x08015e18
 8015628:	08015e38 	.word	0x08015e38
 801562c:	08015df8 	.word	0x08015df8
 8015630:	08015e58 	.word	0x08015e58
 8015634:	08015e62 	.word	0x08015e62
 8015638:	00000000 	.word	0x00000000
 801563c:	080153bf 	.word	0x080153bf
 8015640:	08015e5e 	.word	0x08015e5e

08015644 <_printf_common>:
 8015644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015648:	4616      	mov	r6, r2
 801564a:	4699      	mov	r9, r3
 801564c:	688a      	ldr	r2, [r1, #8]
 801564e:	690b      	ldr	r3, [r1, #16]
 8015650:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015654:	4293      	cmp	r3, r2
 8015656:	bfb8      	it	lt
 8015658:	4613      	movlt	r3, r2
 801565a:	6033      	str	r3, [r6, #0]
 801565c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015660:	4607      	mov	r7, r0
 8015662:	460c      	mov	r4, r1
 8015664:	b10a      	cbz	r2, 801566a <_printf_common+0x26>
 8015666:	3301      	adds	r3, #1
 8015668:	6033      	str	r3, [r6, #0]
 801566a:	6823      	ldr	r3, [r4, #0]
 801566c:	0699      	lsls	r1, r3, #26
 801566e:	bf42      	ittt	mi
 8015670:	6833      	ldrmi	r3, [r6, #0]
 8015672:	3302      	addmi	r3, #2
 8015674:	6033      	strmi	r3, [r6, #0]
 8015676:	6825      	ldr	r5, [r4, #0]
 8015678:	f015 0506 	ands.w	r5, r5, #6
 801567c:	d106      	bne.n	801568c <_printf_common+0x48>
 801567e:	f104 0a19 	add.w	sl, r4, #25
 8015682:	68e3      	ldr	r3, [r4, #12]
 8015684:	6832      	ldr	r2, [r6, #0]
 8015686:	1a9b      	subs	r3, r3, r2
 8015688:	42ab      	cmp	r3, r5
 801568a:	dc26      	bgt.n	80156da <_printf_common+0x96>
 801568c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015690:	1e13      	subs	r3, r2, #0
 8015692:	6822      	ldr	r2, [r4, #0]
 8015694:	bf18      	it	ne
 8015696:	2301      	movne	r3, #1
 8015698:	0692      	lsls	r2, r2, #26
 801569a:	d42b      	bmi.n	80156f4 <_printf_common+0xb0>
 801569c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80156a0:	4649      	mov	r1, r9
 80156a2:	4638      	mov	r0, r7
 80156a4:	47c0      	blx	r8
 80156a6:	3001      	adds	r0, #1
 80156a8:	d01e      	beq.n	80156e8 <_printf_common+0xa4>
 80156aa:	6823      	ldr	r3, [r4, #0]
 80156ac:	68e5      	ldr	r5, [r4, #12]
 80156ae:	6832      	ldr	r2, [r6, #0]
 80156b0:	f003 0306 	and.w	r3, r3, #6
 80156b4:	2b04      	cmp	r3, #4
 80156b6:	bf08      	it	eq
 80156b8:	1aad      	subeq	r5, r5, r2
 80156ba:	68a3      	ldr	r3, [r4, #8]
 80156bc:	6922      	ldr	r2, [r4, #16]
 80156be:	bf0c      	ite	eq
 80156c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80156c4:	2500      	movne	r5, #0
 80156c6:	4293      	cmp	r3, r2
 80156c8:	bfc4      	itt	gt
 80156ca:	1a9b      	subgt	r3, r3, r2
 80156cc:	18ed      	addgt	r5, r5, r3
 80156ce:	2600      	movs	r6, #0
 80156d0:	341a      	adds	r4, #26
 80156d2:	42b5      	cmp	r5, r6
 80156d4:	d11a      	bne.n	801570c <_printf_common+0xc8>
 80156d6:	2000      	movs	r0, #0
 80156d8:	e008      	b.n	80156ec <_printf_common+0xa8>
 80156da:	2301      	movs	r3, #1
 80156dc:	4652      	mov	r2, sl
 80156de:	4649      	mov	r1, r9
 80156e0:	4638      	mov	r0, r7
 80156e2:	47c0      	blx	r8
 80156e4:	3001      	adds	r0, #1
 80156e6:	d103      	bne.n	80156f0 <_printf_common+0xac>
 80156e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80156ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156f0:	3501      	adds	r5, #1
 80156f2:	e7c6      	b.n	8015682 <_printf_common+0x3e>
 80156f4:	18e1      	adds	r1, r4, r3
 80156f6:	1c5a      	adds	r2, r3, #1
 80156f8:	2030      	movs	r0, #48	; 0x30
 80156fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80156fe:	4422      	add	r2, r4
 8015700:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015708:	3302      	adds	r3, #2
 801570a:	e7c7      	b.n	801569c <_printf_common+0x58>
 801570c:	2301      	movs	r3, #1
 801570e:	4622      	mov	r2, r4
 8015710:	4649      	mov	r1, r9
 8015712:	4638      	mov	r0, r7
 8015714:	47c0      	blx	r8
 8015716:	3001      	adds	r0, #1
 8015718:	d0e6      	beq.n	80156e8 <_printf_common+0xa4>
 801571a:	3601      	adds	r6, #1
 801571c:	e7d9      	b.n	80156d2 <_printf_common+0x8e>
	...

08015720 <_printf_i>:
 8015720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015724:	7e0f      	ldrb	r7, [r1, #24]
 8015726:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015728:	2f78      	cmp	r7, #120	; 0x78
 801572a:	4691      	mov	r9, r2
 801572c:	4680      	mov	r8, r0
 801572e:	460c      	mov	r4, r1
 8015730:	469a      	mov	sl, r3
 8015732:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015736:	d807      	bhi.n	8015748 <_printf_i+0x28>
 8015738:	2f62      	cmp	r7, #98	; 0x62
 801573a:	d80a      	bhi.n	8015752 <_printf_i+0x32>
 801573c:	2f00      	cmp	r7, #0
 801573e:	f000 80d8 	beq.w	80158f2 <_printf_i+0x1d2>
 8015742:	2f58      	cmp	r7, #88	; 0x58
 8015744:	f000 80a3 	beq.w	801588e <_printf_i+0x16e>
 8015748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801574c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015750:	e03a      	b.n	80157c8 <_printf_i+0xa8>
 8015752:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015756:	2b15      	cmp	r3, #21
 8015758:	d8f6      	bhi.n	8015748 <_printf_i+0x28>
 801575a:	a101      	add	r1, pc, #4	; (adr r1, 8015760 <_printf_i+0x40>)
 801575c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015760:	080157b9 	.word	0x080157b9
 8015764:	080157cd 	.word	0x080157cd
 8015768:	08015749 	.word	0x08015749
 801576c:	08015749 	.word	0x08015749
 8015770:	08015749 	.word	0x08015749
 8015774:	08015749 	.word	0x08015749
 8015778:	080157cd 	.word	0x080157cd
 801577c:	08015749 	.word	0x08015749
 8015780:	08015749 	.word	0x08015749
 8015784:	08015749 	.word	0x08015749
 8015788:	08015749 	.word	0x08015749
 801578c:	080158d9 	.word	0x080158d9
 8015790:	080157fd 	.word	0x080157fd
 8015794:	080158bb 	.word	0x080158bb
 8015798:	08015749 	.word	0x08015749
 801579c:	08015749 	.word	0x08015749
 80157a0:	080158fb 	.word	0x080158fb
 80157a4:	08015749 	.word	0x08015749
 80157a8:	080157fd 	.word	0x080157fd
 80157ac:	08015749 	.word	0x08015749
 80157b0:	08015749 	.word	0x08015749
 80157b4:	080158c3 	.word	0x080158c3
 80157b8:	682b      	ldr	r3, [r5, #0]
 80157ba:	1d1a      	adds	r2, r3, #4
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	602a      	str	r2, [r5, #0]
 80157c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80157c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80157c8:	2301      	movs	r3, #1
 80157ca:	e0a3      	b.n	8015914 <_printf_i+0x1f4>
 80157cc:	6820      	ldr	r0, [r4, #0]
 80157ce:	6829      	ldr	r1, [r5, #0]
 80157d0:	0606      	lsls	r6, r0, #24
 80157d2:	f101 0304 	add.w	r3, r1, #4
 80157d6:	d50a      	bpl.n	80157ee <_printf_i+0xce>
 80157d8:	680e      	ldr	r6, [r1, #0]
 80157da:	602b      	str	r3, [r5, #0]
 80157dc:	2e00      	cmp	r6, #0
 80157de:	da03      	bge.n	80157e8 <_printf_i+0xc8>
 80157e0:	232d      	movs	r3, #45	; 0x2d
 80157e2:	4276      	negs	r6, r6
 80157e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80157e8:	485e      	ldr	r0, [pc, #376]	; (8015964 <_printf_i+0x244>)
 80157ea:	230a      	movs	r3, #10
 80157ec:	e019      	b.n	8015822 <_printf_i+0x102>
 80157ee:	680e      	ldr	r6, [r1, #0]
 80157f0:	602b      	str	r3, [r5, #0]
 80157f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80157f6:	bf18      	it	ne
 80157f8:	b236      	sxthne	r6, r6
 80157fa:	e7ef      	b.n	80157dc <_printf_i+0xbc>
 80157fc:	682b      	ldr	r3, [r5, #0]
 80157fe:	6820      	ldr	r0, [r4, #0]
 8015800:	1d19      	adds	r1, r3, #4
 8015802:	6029      	str	r1, [r5, #0]
 8015804:	0601      	lsls	r1, r0, #24
 8015806:	d501      	bpl.n	801580c <_printf_i+0xec>
 8015808:	681e      	ldr	r6, [r3, #0]
 801580a:	e002      	b.n	8015812 <_printf_i+0xf2>
 801580c:	0646      	lsls	r6, r0, #25
 801580e:	d5fb      	bpl.n	8015808 <_printf_i+0xe8>
 8015810:	881e      	ldrh	r6, [r3, #0]
 8015812:	4854      	ldr	r0, [pc, #336]	; (8015964 <_printf_i+0x244>)
 8015814:	2f6f      	cmp	r7, #111	; 0x6f
 8015816:	bf0c      	ite	eq
 8015818:	2308      	moveq	r3, #8
 801581a:	230a      	movne	r3, #10
 801581c:	2100      	movs	r1, #0
 801581e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015822:	6865      	ldr	r5, [r4, #4]
 8015824:	60a5      	str	r5, [r4, #8]
 8015826:	2d00      	cmp	r5, #0
 8015828:	bfa2      	ittt	ge
 801582a:	6821      	ldrge	r1, [r4, #0]
 801582c:	f021 0104 	bicge.w	r1, r1, #4
 8015830:	6021      	strge	r1, [r4, #0]
 8015832:	b90e      	cbnz	r6, 8015838 <_printf_i+0x118>
 8015834:	2d00      	cmp	r5, #0
 8015836:	d04d      	beq.n	80158d4 <_printf_i+0x1b4>
 8015838:	4615      	mov	r5, r2
 801583a:	fbb6 f1f3 	udiv	r1, r6, r3
 801583e:	fb03 6711 	mls	r7, r3, r1, r6
 8015842:	5dc7      	ldrb	r7, [r0, r7]
 8015844:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015848:	4637      	mov	r7, r6
 801584a:	42bb      	cmp	r3, r7
 801584c:	460e      	mov	r6, r1
 801584e:	d9f4      	bls.n	801583a <_printf_i+0x11a>
 8015850:	2b08      	cmp	r3, #8
 8015852:	d10b      	bne.n	801586c <_printf_i+0x14c>
 8015854:	6823      	ldr	r3, [r4, #0]
 8015856:	07de      	lsls	r6, r3, #31
 8015858:	d508      	bpl.n	801586c <_printf_i+0x14c>
 801585a:	6923      	ldr	r3, [r4, #16]
 801585c:	6861      	ldr	r1, [r4, #4]
 801585e:	4299      	cmp	r1, r3
 8015860:	bfde      	ittt	le
 8015862:	2330      	movle	r3, #48	; 0x30
 8015864:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015868:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801586c:	1b52      	subs	r2, r2, r5
 801586e:	6122      	str	r2, [r4, #16]
 8015870:	f8cd a000 	str.w	sl, [sp]
 8015874:	464b      	mov	r3, r9
 8015876:	aa03      	add	r2, sp, #12
 8015878:	4621      	mov	r1, r4
 801587a:	4640      	mov	r0, r8
 801587c:	f7ff fee2 	bl	8015644 <_printf_common>
 8015880:	3001      	adds	r0, #1
 8015882:	d14c      	bne.n	801591e <_printf_i+0x1fe>
 8015884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015888:	b004      	add	sp, #16
 801588a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801588e:	4835      	ldr	r0, [pc, #212]	; (8015964 <_printf_i+0x244>)
 8015890:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015894:	6829      	ldr	r1, [r5, #0]
 8015896:	6823      	ldr	r3, [r4, #0]
 8015898:	f851 6b04 	ldr.w	r6, [r1], #4
 801589c:	6029      	str	r1, [r5, #0]
 801589e:	061d      	lsls	r5, r3, #24
 80158a0:	d514      	bpl.n	80158cc <_printf_i+0x1ac>
 80158a2:	07df      	lsls	r7, r3, #31
 80158a4:	bf44      	itt	mi
 80158a6:	f043 0320 	orrmi.w	r3, r3, #32
 80158aa:	6023      	strmi	r3, [r4, #0]
 80158ac:	b91e      	cbnz	r6, 80158b6 <_printf_i+0x196>
 80158ae:	6823      	ldr	r3, [r4, #0]
 80158b0:	f023 0320 	bic.w	r3, r3, #32
 80158b4:	6023      	str	r3, [r4, #0]
 80158b6:	2310      	movs	r3, #16
 80158b8:	e7b0      	b.n	801581c <_printf_i+0xfc>
 80158ba:	6823      	ldr	r3, [r4, #0]
 80158bc:	f043 0320 	orr.w	r3, r3, #32
 80158c0:	6023      	str	r3, [r4, #0]
 80158c2:	2378      	movs	r3, #120	; 0x78
 80158c4:	4828      	ldr	r0, [pc, #160]	; (8015968 <_printf_i+0x248>)
 80158c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80158ca:	e7e3      	b.n	8015894 <_printf_i+0x174>
 80158cc:	0659      	lsls	r1, r3, #25
 80158ce:	bf48      	it	mi
 80158d0:	b2b6      	uxthmi	r6, r6
 80158d2:	e7e6      	b.n	80158a2 <_printf_i+0x182>
 80158d4:	4615      	mov	r5, r2
 80158d6:	e7bb      	b.n	8015850 <_printf_i+0x130>
 80158d8:	682b      	ldr	r3, [r5, #0]
 80158da:	6826      	ldr	r6, [r4, #0]
 80158dc:	6961      	ldr	r1, [r4, #20]
 80158de:	1d18      	adds	r0, r3, #4
 80158e0:	6028      	str	r0, [r5, #0]
 80158e2:	0635      	lsls	r5, r6, #24
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	d501      	bpl.n	80158ec <_printf_i+0x1cc>
 80158e8:	6019      	str	r1, [r3, #0]
 80158ea:	e002      	b.n	80158f2 <_printf_i+0x1d2>
 80158ec:	0670      	lsls	r0, r6, #25
 80158ee:	d5fb      	bpl.n	80158e8 <_printf_i+0x1c8>
 80158f0:	8019      	strh	r1, [r3, #0]
 80158f2:	2300      	movs	r3, #0
 80158f4:	6123      	str	r3, [r4, #16]
 80158f6:	4615      	mov	r5, r2
 80158f8:	e7ba      	b.n	8015870 <_printf_i+0x150>
 80158fa:	682b      	ldr	r3, [r5, #0]
 80158fc:	1d1a      	adds	r2, r3, #4
 80158fe:	602a      	str	r2, [r5, #0]
 8015900:	681d      	ldr	r5, [r3, #0]
 8015902:	6862      	ldr	r2, [r4, #4]
 8015904:	2100      	movs	r1, #0
 8015906:	4628      	mov	r0, r5
 8015908:	f7ea fcea 	bl	80002e0 <memchr>
 801590c:	b108      	cbz	r0, 8015912 <_printf_i+0x1f2>
 801590e:	1b40      	subs	r0, r0, r5
 8015910:	6060      	str	r0, [r4, #4]
 8015912:	6863      	ldr	r3, [r4, #4]
 8015914:	6123      	str	r3, [r4, #16]
 8015916:	2300      	movs	r3, #0
 8015918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801591c:	e7a8      	b.n	8015870 <_printf_i+0x150>
 801591e:	6923      	ldr	r3, [r4, #16]
 8015920:	462a      	mov	r2, r5
 8015922:	4649      	mov	r1, r9
 8015924:	4640      	mov	r0, r8
 8015926:	47d0      	blx	sl
 8015928:	3001      	adds	r0, #1
 801592a:	d0ab      	beq.n	8015884 <_printf_i+0x164>
 801592c:	6823      	ldr	r3, [r4, #0]
 801592e:	079b      	lsls	r3, r3, #30
 8015930:	d413      	bmi.n	801595a <_printf_i+0x23a>
 8015932:	68e0      	ldr	r0, [r4, #12]
 8015934:	9b03      	ldr	r3, [sp, #12]
 8015936:	4298      	cmp	r0, r3
 8015938:	bfb8      	it	lt
 801593a:	4618      	movlt	r0, r3
 801593c:	e7a4      	b.n	8015888 <_printf_i+0x168>
 801593e:	2301      	movs	r3, #1
 8015940:	4632      	mov	r2, r6
 8015942:	4649      	mov	r1, r9
 8015944:	4640      	mov	r0, r8
 8015946:	47d0      	blx	sl
 8015948:	3001      	adds	r0, #1
 801594a:	d09b      	beq.n	8015884 <_printf_i+0x164>
 801594c:	3501      	adds	r5, #1
 801594e:	68e3      	ldr	r3, [r4, #12]
 8015950:	9903      	ldr	r1, [sp, #12]
 8015952:	1a5b      	subs	r3, r3, r1
 8015954:	42ab      	cmp	r3, r5
 8015956:	dcf2      	bgt.n	801593e <_printf_i+0x21e>
 8015958:	e7eb      	b.n	8015932 <_printf_i+0x212>
 801595a:	2500      	movs	r5, #0
 801595c:	f104 0619 	add.w	r6, r4, #25
 8015960:	e7f5      	b.n	801594e <_printf_i+0x22e>
 8015962:	bf00      	nop
 8015964:	08015e69 	.word	0x08015e69
 8015968:	08015e7a 	.word	0x08015e7a

0801596c <__sread>:
 801596c:	b510      	push	{r4, lr}
 801596e:	460c      	mov	r4, r1
 8015970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015974:	f000 f894 	bl	8015aa0 <_read_r>
 8015978:	2800      	cmp	r0, #0
 801597a:	bfab      	itete	ge
 801597c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801597e:	89a3      	ldrhlt	r3, [r4, #12]
 8015980:	181b      	addge	r3, r3, r0
 8015982:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015986:	bfac      	ite	ge
 8015988:	6563      	strge	r3, [r4, #84]	; 0x54
 801598a:	81a3      	strhlt	r3, [r4, #12]
 801598c:	bd10      	pop	{r4, pc}

0801598e <__swrite>:
 801598e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015992:	461f      	mov	r7, r3
 8015994:	898b      	ldrh	r3, [r1, #12]
 8015996:	05db      	lsls	r3, r3, #23
 8015998:	4605      	mov	r5, r0
 801599a:	460c      	mov	r4, r1
 801599c:	4616      	mov	r6, r2
 801599e:	d505      	bpl.n	80159ac <__swrite+0x1e>
 80159a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159a4:	2302      	movs	r3, #2
 80159a6:	2200      	movs	r2, #0
 80159a8:	f000 f868 	bl	8015a7c <_lseek_r>
 80159ac:	89a3      	ldrh	r3, [r4, #12]
 80159ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80159b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80159b6:	81a3      	strh	r3, [r4, #12]
 80159b8:	4632      	mov	r2, r6
 80159ba:	463b      	mov	r3, r7
 80159bc:	4628      	mov	r0, r5
 80159be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80159c2:	f000 b817 	b.w	80159f4 <_write_r>

080159c6 <__sseek>:
 80159c6:	b510      	push	{r4, lr}
 80159c8:	460c      	mov	r4, r1
 80159ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159ce:	f000 f855 	bl	8015a7c <_lseek_r>
 80159d2:	1c43      	adds	r3, r0, #1
 80159d4:	89a3      	ldrh	r3, [r4, #12]
 80159d6:	bf15      	itete	ne
 80159d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80159da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80159de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80159e2:	81a3      	strheq	r3, [r4, #12]
 80159e4:	bf18      	it	ne
 80159e6:	81a3      	strhne	r3, [r4, #12]
 80159e8:	bd10      	pop	{r4, pc}

080159ea <__sclose>:
 80159ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159ee:	f000 b813 	b.w	8015a18 <_close_r>
	...

080159f4 <_write_r>:
 80159f4:	b538      	push	{r3, r4, r5, lr}
 80159f6:	4d07      	ldr	r5, [pc, #28]	; (8015a14 <_write_r+0x20>)
 80159f8:	4604      	mov	r4, r0
 80159fa:	4608      	mov	r0, r1
 80159fc:	4611      	mov	r1, r2
 80159fe:	2200      	movs	r2, #0
 8015a00:	602a      	str	r2, [r5, #0]
 8015a02:	461a      	mov	r2, r3
 8015a04:	f7ed f915 	bl	8002c32 <_write>
 8015a08:	1c43      	adds	r3, r0, #1
 8015a0a:	d102      	bne.n	8015a12 <_write_r+0x1e>
 8015a0c:	682b      	ldr	r3, [r5, #0]
 8015a0e:	b103      	cbz	r3, 8015a12 <_write_r+0x1e>
 8015a10:	6023      	str	r3, [r4, #0]
 8015a12:	bd38      	pop	{r3, r4, r5, pc}
 8015a14:	240050b8 	.word	0x240050b8

08015a18 <_close_r>:
 8015a18:	b538      	push	{r3, r4, r5, lr}
 8015a1a:	4d06      	ldr	r5, [pc, #24]	; (8015a34 <_close_r+0x1c>)
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	4604      	mov	r4, r0
 8015a20:	4608      	mov	r0, r1
 8015a22:	602b      	str	r3, [r5, #0]
 8015a24:	f7ed f921 	bl	8002c6a <_close>
 8015a28:	1c43      	adds	r3, r0, #1
 8015a2a:	d102      	bne.n	8015a32 <_close_r+0x1a>
 8015a2c:	682b      	ldr	r3, [r5, #0]
 8015a2e:	b103      	cbz	r3, 8015a32 <_close_r+0x1a>
 8015a30:	6023      	str	r3, [r4, #0]
 8015a32:	bd38      	pop	{r3, r4, r5, pc}
 8015a34:	240050b8 	.word	0x240050b8

08015a38 <_fstat_r>:
 8015a38:	b538      	push	{r3, r4, r5, lr}
 8015a3a:	4d07      	ldr	r5, [pc, #28]	; (8015a58 <_fstat_r+0x20>)
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	4604      	mov	r4, r0
 8015a40:	4608      	mov	r0, r1
 8015a42:	4611      	mov	r1, r2
 8015a44:	602b      	str	r3, [r5, #0]
 8015a46:	f7ed f91c 	bl	8002c82 <_fstat>
 8015a4a:	1c43      	adds	r3, r0, #1
 8015a4c:	d102      	bne.n	8015a54 <_fstat_r+0x1c>
 8015a4e:	682b      	ldr	r3, [r5, #0]
 8015a50:	b103      	cbz	r3, 8015a54 <_fstat_r+0x1c>
 8015a52:	6023      	str	r3, [r4, #0]
 8015a54:	bd38      	pop	{r3, r4, r5, pc}
 8015a56:	bf00      	nop
 8015a58:	240050b8 	.word	0x240050b8

08015a5c <_isatty_r>:
 8015a5c:	b538      	push	{r3, r4, r5, lr}
 8015a5e:	4d06      	ldr	r5, [pc, #24]	; (8015a78 <_isatty_r+0x1c>)
 8015a60:	2300      	movs	r3, #0
 8015a62:	4604      	mov	r4, r0
 8015a64:	4608      	mov	r0, r1
 8015a66:	602b      	str	r3, [r5, #0]
 8015a68:	f7ed f91b 	bl	8002ca2 <_isatty>
 8015a6c:	1c43      	adds	r3, r0, #1
 8015a6e:	d102      	bne.n	8015a76 <_isatty_r+0x1a>
 8015a70:	682b      	ldr	r3, [r5, #0]
 8015a72:	b103      	cbz	r3, 8015a76 <_isatty_r+0x1a>
 8015a74:	6023      	str	r3, [r4, #0]
 8015a76:	bd38      	pop	{r3, r4, r5, pc}
 8015a78:	240050b8 	.word	0x240050b8

08015a7c <_lseek_r>:
 8015a7c:	b538      	push	{r3, r4, r5, lr}
 8015a7e:	4d07      	ldr	r5, [pc, #28]	; (8015a9c <_lseek_r+0x20>)
 8015a80:	4604      	mov	r4, r0
 8015a82:	4608      	mov	r0, r1
 8015a84:	4611      	mov	r1, r2
 8015a86:	2200      	movs	r2, #0
 8015a88:	602a      	str	r2, [r5, #0]
 8015a8a:	461a      	mov	r2, r3
 8015a8c:	f7ed f914 	bl	8002cb8 <_lseek>
 8015a90:	1c43      	adds	r3, r0, #1
 8015a92:	d102      	bne.n	8015a9a <_lseek_r+0x1e>
 8015a94:	682b      	ldr	r3, [r5, #0]
 8015a96:	b103      	cbz	r3, 8015a9a <_lseek_r+0x1e>
 8015a98:	6023      	str	r3, [r4, #0]
 8015a9a:	bd38      	pop	{r3, r4, r5, pc}
 8015a9c:	240050b8 	.word	0x240050b8

08015aa0 <_read_r>:
 8015aa0:	b538      	push	{r3, r4, r5, lr}
 8015aa2:	4d07      	ldr	r5, [pc, #28]	; (8015ac0 <_read_r+0x20>)
 8015aa4:	4604      	mov	r4, r0
 8015aa6:	4608      	mov	r0, r1
 8015aa8:	4611      	mov	r1, r2
 8015aaa:	2200      	movs	r2, #0
 8015aac:	602a      	str	r2, [r5, #0]
 8015aae:	461a      	mov	r2, r3
 8015ab0:	f7ed f8a2 	bl	8002bf8 <_read>
 8015ab4:	1c43      	adds	r3, r0, #1
 8015ab6:	d102      	bne.n	8015abe <_read_r+0x1e>
 8015ab8:	682b      	ldr	r3, [r5, #0]
 8015aba:	b103      	cbz	r3, 8015abe <_read_r+0x1e>
 8015abc:	6023      	str	r3, [r4, #0]
 8015abe:	bd38      	pop	{r3, r4, r5, pc}
 8015ac0:	240050b8 	.word	0x240050b8

08015ac4 <_init>:
 8015ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ac6:	bf00      	nop
 8015ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015aca:	bc08      	pop	{r3}
 8015acc:	469e      	mov	lr, r3
 8015ace:	4770      	bx	lr

08015ad0 <_fini>:
 8015ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ad2:	bf00      	nop
 8015ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ad6:	bc08      	pop	{r3}
 8015ad8:	469e      	mov	lr, r3
 8015ada:	4770      	bx	lr
