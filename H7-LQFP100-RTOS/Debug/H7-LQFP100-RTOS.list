
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000174a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08017740  08017740  00027740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017c0c  08017c0c  00027c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017c14  08017c14  00027c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017c18  08017c18  00027c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000100  24000000  08017c1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000054f0  24000100  08017d1c  00030100  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  240055f0  08017d1c  000355f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003ac2d  00000000  00000000  0003012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000070af  00000000  00000000  0006ad5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028d0  00000000  00000000  00071e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000025e8  00000000  00000000  000746e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044aa9  00000000  00000000  00076cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ca2a  00000000  00000000  000bb771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194dcd  00000000  00000000  000f819b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0028cf68  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b228  00000000  00000000  0028cfb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000100 	.word	0x24000100
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017728 	.word	0x08017728

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000104 	.word	0x24000104
 80002dc:	08017728 	.word	0x08017728

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f004 f903 	bl	8004874 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f001 fe0e 	bl	8002294 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f005 fa1e 	bl	8005ac4 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f001 fe01 	bl	8002294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f004 fb61 	bl	8004d7c <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f001 fde8 	bl	8002294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f004 fb53 	bl	8004d7c <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f001 fdda 	bl	8002294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f004 fb45 	bl	8004d7c <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f001 fdcc 	bl	8002294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f004 fb37 	bl	8004d7c <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f001 fdbe 	bl	8002294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f004 fb28 	bl	8004d7c <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f001 fdaf 	bl	8002294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f004 fb19 	bl	8004d7c <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f001 fda0 	bl	8002294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f004 fb0a 	bl	8004d7c <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f001 fd91 	bl	8002294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f004 fafb 	bl	8004d7c <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f001 fd82 	bl	8002294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f004 faec 	bl	8004d7c <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f001 fd73 	bl	8002294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f004 fadd 	bl	8004d7c <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f001 fd64 	bl	8002294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f004 face 	bl	8004d7c <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f001 fd55 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400011c 	.word	0x2400011c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f003 ffeb 	bl	8004874 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f001 fcf6 	bl	8002294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f004 fa56 	bl	8004d7c <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f001 fcdd 	bl	8002294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f004 fa48 	bl	8004d7c <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f001 fccf 	bl	8002294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f004 fa3a 	bl	8004d7c <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f001 fcc1 	bl	8002294 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f004 fa2c 	bl	8004d7c <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f001 fcb3 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	24000180 	.word	0x24000180
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f008 fc6e 	bl	80092dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f008 fc62 	bl	80092dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f008 fc56 	bl	80092dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f005 fde9 	bl	800664c <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f001 fc08 	bl	8002294 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f003 fca4 	bl	800442c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f003 fc9e 	bl	800442c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f005 fd89 	bl	800664c <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f001 fba8 	bl	8002294 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	240001e4 	.word	0x240001e4
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400025c 	.word	0x2400025c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f016 f8c5 	bl	8016d1c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f005 f951 	bl	8005e40 <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f001 fb76 	bl	8002294 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f005 fb6c 	bl	80062a0 <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f001 fb61 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	240002d4 	.word	0x240002d4
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f008 fb41 	bl	80092dc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f005 fcd4 	bl	800664c <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f001 faf3 	bl	8002294 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f005 f896 	bl	8005df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f005 f8ad 	bl	8005e24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	240002e8 	.word	0x240002e8
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_DMA_Init+0x6c>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f005 f86d 	bl	8005df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f005 f884 	bl	8005e24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f005 f865 	bl	8005df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f005 f87c 	bl	8005e24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f005 f85d 	bl	8005df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f005 f874 	bl	8005e24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	2010      	movs	r0, #16
 8000d42:	f005 f855 	bl	8005df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d46:	2010      	movs	r0, #16
 8000d48:	f005 f86c 	bl	8005e24 <HAL_NVIC_EnableIRQ>

}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400

08000d58 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <vApplicationTickHook+0x18>)
 8000d64:	6013      	str	r3, [r2, #0]
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	24000818 	.word	0x24000818

08000d74 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000d78:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <MX_FREERTOS_Init+0xa8>)
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4828      	ldr	r0, [pc, #160]	; (8000e20 <MX_FREERTOS_Init+0xac>)
 8000d7e:	f012 fbb5 	bl	80134ec <osThreadNew>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a27      	ldr	r2, [pc, #156]	; (8000e24 <MX_FREERTOS_Init+0xb0>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000d88:	4a27      	ldr	r2, [pc, #156]	; (8000e28 <MX_FREERTOS_Init+0xb4>)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4827      	ldr	r0, [pc, #156]	; (8000e2c <MX_FREERTOS_Init+0xb8>)
 8000d8e:	f012 fbad 	bl	80134ec <osThreadNew>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4a26      	ldr	r2, [pc, #152]	; (8000e30 <MX_FREERTOS_Init+0xbc>)
 8000d96:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000d98:	4a26      	ldr	r2, [pc, #152]	; (8000e34 <MX_FREERTOS_Init+0xc0>)
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4826      	ldr	r0, [pc, #152]	; (8000e38 <MX_FREERTOS_Init+0xc4>)
 8000d9e:	f012 fba5 	bl	80134ec <osThreadNew>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4a25      	ldr	r2, [pc, #148]	; (8000e3c <MX_FREERTOS_Init+0xc8>)
 8000da6:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 8000da8:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <MX_FREERTOS_Init+0xcc>)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4825      	ldr	r0, [pc, #148]	; (8000e44 <MX_FREERTOS_Init+0xd0>)
 8000dae:	f012 fb9d 	bl	80134ec <osThreadNew>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <MX_FREERTOS_Init+0xd4>)
 8000db6:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 8000db8:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <MX_FREERTOS_Init+0xd8>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4824      	ldr	r0, [pc, #144]	; (8000e50 <MX_FREERTOS_Init+0xdc>)
 8000dbe:	f012 fb95 	bl	80134ec <osThreadNew>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <MX_FREERTOS_Init+0xe0>)
 8000dc6:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000dc8:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <MX_FREERTOS_Init+0xe4>)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4823      	ldr	r0, [pc, #140]	; (8000e5c <MX_FREERTOS_Init+0xe8>)
 8000dce:	f012 fb8d 	bl	80134ec <osThreadNew>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <MX_FREERTOS_Init+0xec>)
 8000dd6:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000dd8:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <MX_FREERTOS_Init+0xf0>)
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4822      	ldr	r0, [pc, #136]	; (8000e68 <MX_FREERTOS_Init+0xf4>)
 8000dde:	f012 fb85 	bl	80134ec <osThreadNew>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <MX_FREERTOS_Init+0xf8>)
 8000de6:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 8000de8:	4a21      	ldr	r2, [pc, #132]	; (8000e70 <MX_FREERTOS_Init+0xfc>)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4821      	ldr	r0, [pc, #132]	; (8000e74 <MX_FREERTOS_Init+0x100>)
 8000dee:	f012 fb7d 	bl	80134ec <osThreadNew>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4a20      	ldr	r2, [pc, #128]	; (8000e78 <MX_FREERTOS_Init+0x104>)
 8000df6:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8000df8:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <MX_FREERTOS_Init+0x108>)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4820      	ldr	r0, [pc, #128]	; (8000e80 <MX_FREERTOS_Init+0x10c>)
 8000dfe:	f012 fb75 	bl	80134ec <osThreadNew>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <MX_FREERTOS_Init+0x110>)
 8000e06:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <MX_FREERTOS_Init+0x114>)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	481f      	ldr	r0, [pc, #124]	; (8000e8c <MX_FREERTOS_Init+0x118>)
 8000e0e:	f012 fb6d 	bl	80134ec <osThreadNew>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <MX_FREERTOS_Init+0x11c>)
 8000e16:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	080179b8 	.word	0x080179b8
 8000e20:	08000e95 	.word	0x08000e95
 8000e24:	24000360 	.word	0x24000360
 8000e28:	080179dc 	.word	0x080179dc
 8000e2c:	08000ebd 	.word	0x08000ebd
 8000e30:	24000364 	.word	0x24000364
 8000e34:	08017a00 	.word	0x08017a00
 8000e38:	08000ee5 	.word	0x08000ee5
 8000e3c:	24000368 	.word	0x24000368
 8000e40:	08017a24 	.word	0x08017a24
 8000e44:	08000f0d 	.word	0x08000f0d
 8000e48:	2400036c 	.word	0x2400036c
 8000e4c:	08017a48 	.word	0x08017a48
 8000e50:	08000f85 	.word	0x08000f85
 8000e54:	24000370 	.word	0x24000370
 8000e58:	08017a6c 	.word	0x08017a6c
 8000e5c:	08000ffd 	.word	0x08000ffd
 8000e60:	24000374 	.word	0x24000374
 8000e64:	08017a90 	.word	0x08017a90
 8000e68:	080010b5 	.word	0x080010b5
 8000e6c:	24000378 	.word	0x24000378
 8000e70:	08017ab4 	.word	0x08017ab4
 8000e74:	08001161 	.word	0x08001161
 8000e78:	2400037c 	.word	0x2400037c
 8000e7c:	08017ad8 	.word	0x08017ad8
 8000e80:	08001191 	.word	0x08001191
 8000e84:	24000380 	.word	0x24000380
 8000e88:	08017afc 	.word	0x08017afc
 8000e8c:	08001271 	.word	0x08001271
 8000e90:	24000384 	.word	0x24000384

08000e94 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <PMT_init+0x24>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f012 fca2 	bl	80137f0 <osEventFlagsWait>

		create_pmt_packet();
 8000eac:	f001 fa18 	bl	80022e0 <create_pmt_packet>

		osThreadYield();
 8000eb0:	f012 fbae 	bl	8013610 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eb4:	e7f2      	b.n	8000e9c <PMT_init+0x8>
 8000eb6:	bf00      	nop
 8000eb8:	240007c4 	.word	0x240007c4

08000ebc <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <ERPA_init+0x24>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2102      	movs	r1, #2
 8000ed0:	f012 fc8e 	bl	80137f0 <osEventFlagsWait>

		create_erpa_packet();
 8000ed4:	f001 fa7e 	bl	80023d4 <create_erpa_packet>

		osThreadYield();
 8000ed8:	f012 fb9a 	bl	8013610 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000edc:	e7f2      	b.n	8000ec4 <ERPA_init+0x8>
 8000ede:	bf00      	nop
 8000ee0:	240007c4 	.word	0x240007c4

08000ee4 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HK_init+0x24>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	f012 fc7a 	bl	80137f0 <osEventFlagsWait>

		create_hk_packet();
 8000efc:	f001 fb0c 	bl	8002518 <create_hk_packet>

		osThreadYield();
 8000f00:	f012 fb86 	bl	8013610 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8000f04:	e7f2      	b.n	8000eec <HK_init+0x8>
 8000f06:	bf00      	nop
 8000f08:	240007c4 	.word	0x240007c4

08000f0c <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <AUTOINIT_init+0x70>)
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2104      	movs	r1, #4
 8000f20:	f012 fc66 	bl	80137f0 <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	e012      	b.n	8000f50 <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <AUTOINIT_init+0x74>)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000f32:	4a13      	ldr	r2, [pc, #76]	; (8000f80 <AUTOINIT_init+0x74>)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4413      	add	r3, r2
 8000f3a:	889b      	ldrh	r3, [r3, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f008 fb94 	bl	800966c <HAL_GPIO_WritePin>
			osDelay(100);
 8000f44:	2064      	movs	r0, #100	; 0x64
 8000f46:	f012 fb83 	bl	8013650 <osDelay>
		for (int i = 0; i < 7; i++) {
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	dde9      	ble.n	8000f2a <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f56:	2308      	movs	r3, #8
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	e008      	b.n	8000f6e <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2101      	movs	r1, #1
 8000f62:	4618      	mov	r0, r3
 8000f64:	f003 f900 	bl	8004168 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	2b0d      	cmp	r3, #13
 8000f72:	ddf3      	ble.n	8000f5c <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8000f74:	f012 fb4c 	bl	8013610 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f78:	e7cc      	b.n	8000f14 <AUTOINIT_init+0x8>
 8000f7a:	bf00      	nop
 8000f7c:	240007c8 	.word	0x240007c8
 8000f80:	08017b20 	.word	0x08017b20

08000f84 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <AUTODEINIT_init+0x70>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f94:	2200      	movs	r2, #0
 8000f96:	2108      	movs	r1, #8
 8000f98:	f012 fc2a 	bl	80137f0 <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000f9c:	230d      	movs	r3, #13
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	e008      	b.n	8000fb4 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 f8dd 	bl	8004168 <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b07      	cmp	r3, #7
 8000fb8:	dcf3      	bgt.n	8000fa2 <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 8000fba:	2306      	movs	r3, #6
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	e012      	b.n	8000fe6 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <AUTODEINIT_init+0x74>)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <AUTODEINIT_init+0x74>)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	889b      	ldrh	r3, [r3, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f008 fb49 	bl	800966c <HAL_GPIO_WritePin>
			osDelay(100);
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	f012 fb38 	bl	8013650 <osDelay>
		for (int i = 6; i >= 0; i--) {
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	dae9      	bge.n	8000fc0 <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8000fec:	f012 fb10 	bl	8013610 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8000ff0:	e7cc      	b.n	8000f8c <AUTODEINIT_init+0x8>
 8000ff2:	bf00      	nop
 8000ff4:	240007c8 	.word	0x240007c8
 8000ff8:	08017b20 	.word	0x08017b20

08000ffc <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
	osStatus_t status;
	packet_t msg;

	while (1) {
		total_size = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <UART_TX_init+0xa8>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	f107 0108 	add.w	r1, r7, #8
 8001014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001018:	2200      	movs	r2, #0
 800101a:	f012 fd23 	bl	8013a64 <osMessageQueueGet>
 800101e:	6138      	str	r0, [r7, #16]
			if (status == osOK) {
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d11c      	bne.n	8001060 <UART_TX_init+0x64>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8001026:	89bb      	ldrh	r3, [r7, #12]
 8001028:	461a      	mov	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	4413      	add	r3, r2
 800102e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001032:	d215      	bcs.n	8001060 <UART_TX_init+0x64>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <UART_TX_init+0xac>)
 8001038:	4413      	add	r3, r2
 800103a:	68b9      	ldr	r1, [r7, #8]
 800103c:	89ba      	ldrh	r2, [r7, #12]
 800103e:	4618      	mov	r0, r3
 8001040:	f015 fe5e 	bl	8016d00 <memcpy>
					free(msg.array);
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4618      	mov	r0, r3
 8001048:	f015 fe52 	bl	8016cf0 <free>
					total_size += msg.size;
 800104c:	89bb      	ldrh	r3, [r7, #12]
 800104e:	461a      	mov	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	4413      	add	r3, r2
 8001054:	617b      	str	r3, [r7, #20]
					if (total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)) {
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f240 32b1 	movw	r2, #945	; 0x3b1
 800105c:	4293      	cmp	r3, r2
 800105e:	d808      	bhi.n	8001072 <UART_TX_init+0x76>
						break;
					}
				}
			}
		} while (osMessageQueueGetCount(mid_MsgQueue));
 8001060:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <UART_TX_init+0xa8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4618      	mov	r0, r3
 8001066:	f012 fd5b 	bl	8013b20 <osMessageQueueGetCount>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d1cd      	bne.n	800100c <UART_TX_init+0x10>
 8001070:	e000      	b.n	8001074 <UART_TX_init+0x78>
						break;
 8001072:	bf00      	nop

		if (total_size > 0) {
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d011      	beq.n	800109e <UART_TX_init+0xa2>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	b29b      	uxth	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	4909      	ldr	r1, [pc, #36]	; (80010a8 <UART_TX_init+0xac>)
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <UART_TX_init+0xb0>)
 8001084:	f00f fc22 	bl	80108cc <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8001088:	e001      	b.n	800108e <UART_TX_init+0x92>
				osThreadYield();
 800108a:	f012 fac1 	bl	8013610 <osThreadYield>
			while (tx_flag == 0) {
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <UART_TX_init+0xb4>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f8      	beq.n	800108a <UART_TX_init+0x8e>
			}

			// Reset the flag
			tx_flag = 0;
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <UART_TX_init+0xb4>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 800109e:	f012 fab7 	bl	8013610 <osThreadYield>
		total_size = 0;
 80010a2:	e7b1      	b.n	8001008 <UART_TX_init+0xc>
 80010a4:	240007d0 	.word	0x240007d0
 80010a8:	24000388 	.word	0x24000388
 80010ac:	24000acc 	.word	0x24000acc
 80010b0:	24000084 	.word	0x24000084

080010b4 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	VOLTAGE_RAIL *rail_monitor_ptr;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 80010bc:	4b27      	ldr	r3, [pc, #156]	; (800115c <Voltage_Monitor_init+0xa8>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010c4:	2200      	movs	r2, #0
 80010c6:	2101      	movs	r1, #1
 80010c8:	f012 fb92 	bl	80137f0 <osEventFlagsWait>
	  		osWaitForever);

	  set_rail_monitor();
 80010cc:	f003 f876 	bl	80041bc <set_rail_monitor>

	  rail_monitor_ptr = get_rail_monitor();
 80010d0:	f003 f86a 	bl	80041a8 <get_rail_monitor>
 80010d4:	60b8      	str	r0, [r7, #8]

		// Iterate through all voltage rails
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	e03b      	b.n	8001154 <Voltage_Monitor_init+0xa0>
			if (rail_monitor_ptr[i].is_enabled){
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	461a      	mov	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4413      	add	r3, r2
 80010ec:	789b      	ldrb	r3, [r3, #2]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d02d      	beq.n	800114e <Voltage_Monitor_init+0x9a>
				// If current rail is not in range...
				if (!in_range(rail_monitor_ptr[i].data, rail_monitor_ptr[i].min_voltage, rail_monitor_ptr[i].max_voltage)){
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	461a      	mov	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	4413      	add	r3, r2
 8001102:	8898      	ldrh	r0, [r3, #4]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	461a      	mov	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4413      	add	r3, r2
 8001114:	891b      	ldrh	r3, [r3, #8]
 8001116:	4619      	mov	r1, r3
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	461a      	mov	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4413      	add	r3, r2
 8001128:	88db      	ldrh	r3, [r3, #6]
 800112a:	461a      	mov	r2, r3
 800112c:	f003 f8d4 	bl	80042d8 <in_range>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10b      	bne.n	800114e <Voltage_Monitor_init+0x9a>
					// Increase that rails error count
					rail_monitor_ptr[i].error_count++;
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	461a      	mov	r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	4413      	add	r3, r2
 8001146:	785a      	ldrb	r2, [r3, #1]
 8001148:	3201      	adds	r2, #1
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	705a      	strb	r2, [r3, #1]
		for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3301      	adds	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b11      	cmp	r3, #17
 8001158:	ddc0      	ble.n	80010dc <Voltage_Monitor_init+0x28>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny,
 800115a:	e7af      	b.n	80010bc <Voltage_Monitor_init+0x8>
 800115c:	240007c8 	.word	0x240007c8

08001160 <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <STOP_init+0x2c>)
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001170:	2200      	movs	r2, #0
 8001172:	2102      	movs	r1, #2
 8001174:	f012 fb3c 	bl	80137f0 <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <STOP_init+0x2c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2102      	movs	r1, #2
 800117e:	4618      	mov	r0, r3
 8001180:	f012 fb04 	bl	801378c <osEventFlagsClear>

	  enter_stop();
 8001184:	f001 f864 	bl	8002250 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8001188:	e7ee      	b.n	8001168 <STOP_init+0x8>
 800118a:	bf00      	nop
 800118c:	240007c8 	.word	0x240007c8

08001190 <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af02      	add	r7, sp, #8
 8001196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8001198:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <Science_init+0xc0>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a0:	2200      	movs	r2, #0
 80011a2:	2101      	movs	r1, #1
 80011a4:	f012 fb24 	bl	80137f0 <osEventFlagsWait>

		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	e012      	b.n	80011d4 <Science_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 80011ae:	4a29      	ldr	r2, [pc, #164]	; (8001254 <Science_init+0xc4>)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80011b6:	4a27      	ldr	r2, [pc, #156]	; (8001254 <Science_init+0xc4>)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4413      	add	r3, r2
 80011be:	889b      	ldrh	r3, [r3, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	4619      	mov	r1, r3
 80011c4:	f008 fa52 	bl	800966c <HAL_GPIO_WritePin>
			osDelay(200);
 80011c8:	20c8      	movs	r0, #200	; 0xc8
 80011ca:	f012 fa41 	bl	8013650 <osDelay>
		for (int i = 0; i < 9; i++) {
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3301      	adds	r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	dde9      	ble.n	80011ae <Science_init+0x1e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80011da:	2308      	movs	r3, #8
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	e008      	b.n	80011f2 <Science_init+0x62>
			set_rail_monitor_enable(i, 1);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2101      	movs	r1, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f002 ffbe 	bl	8004168 <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_n800v; i++) {
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	3301      	adds	r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	2b10      	cmp	r3, #16
 80011f6:	ddf3      	ble.n	80011e0 <Science_init+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
		}

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 80011fc:	2300      	movs	r3, #0
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2320      	movs	r3, #32
 8001202:	4a15      	ldr	r2, [pc, #84]	; (8001258 <Science_init+0xc8>)
 8001204:	2100      	movs	r1, #0
 8001206:	4815      	ldr	r0, [pc, #84]	; (800125c <Science_init+0xcc>)
 8001208:	f004 fe94 	bl	8005f34 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <Science_init+0xd0>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet on
 8001212:	210c      	movs	r1, #12
 8001214:	4813      	ldr	r0, [pc, #76]	; (8001264 <Science_init+0xd4>)
 8001216:	f00d fe2d 	bl	800ee74 <HAL_TIM_OC_Start_IT>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 800121a:	2100      	movs	r1, #0
 800121c:	4812      	ldr	r0, [pc, #72]	; (8001268 <Science_init+0xd8>)
 800121e:	f00d fe29 	bl	800ee74 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <Science_init+0xdc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2104      	movs	r1, #4
 8001228:	4618      	mov	r0, r3
 800122a:	f012 fa6b 	bl	8013704 <osEventFlagsSet>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <Science_init+0xdc>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2102      	movs	r1, #2
 8001234:	4618      	mov	r0, r3
 8001236:	f012 fa65 	bl	8013704 <osEventFlagsSet>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <Science_init+0xdc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2101      	movs	r1, #1
 8001240:	4618      	mov	r0, r3
 8001242:	f012 fa5f 	bl	8013704 <osEventFlagsSet>
  __ASM volatile ("cpsie i" : : : "memory");
 8001246:	b662      	cpsie	i
}
 8001248:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 800124a:	f012 f9e1 	bl	8013610 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 800124e:	e7a3      	b.n	8001198 <Science_init+0x8>
 8001250:	240007cc 	.word	0x240007cc
 8001254:	08017b20 	.word	0x08017b20
 8001258:	24000000 	.word	0x24000000
 800125c:	240002d4 	.word	0x240002d4
 8001260:	24000814 	.word	0x24000814
 8001264:	24000a34 	.word	0x24000a34
 8001268:	240009e8 	.word	0x240009e8
 800126c:	240007c4 	.word	0x240007c4

08001270 <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <Idle_init+0x8c>)
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001280:	2200      	movs	r2, #0
 8001282:	2102      	movs	r1, #2
 8001284:	f012 fab4 	bl	80137f0 <osEventFlagsWait>


		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);			// ERPA packet off
 8001288:	210c      	movs	r1, #12
 800128a:	481d      	ldr	r0, [pc, #116]	; (8001300 <Idle_init+0x90>)
 800128c:	f00d ff4c 	bl	800f128 <HAL_TIM_OC_Stop_IT>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 8001290:	2100      	movs	r1, #0
 8001292:	481c      	ldr	r0, [pc, #112]	; (8001304 <Idle_init+0x94>)
 8001294:	f00d ff48 	bl	800f128 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <Idle_init+0x98>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 800129e:	2100      	movs	r1, #0
 80012a0:	481a      	ldr	r0, [pc, #104]	; (800130c <Idle_init+0x9c>)
 80012a2:	f004 ff07 	bl	80060b4 <HAL_DAC_Stop_DMA>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80012a6:	2310      	movs	r3, #16
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	e008      	b.n	80012be <Idle_init+0x4e>
			set_rail_monitor_enable(i, 0);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f002 ff58 	bl	8004168 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b07      	cmp	r3, #7
 80012c2:	dcf3      	bgt.n	80012ac <Idle_init+0x3c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 80012c4:	2308      	movs	r3, #8
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	e012      	b.n	80012f0 <Idle_init+0x80>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80012ca:	4a11      	ldr	r2, [pc, #68]	; (8001310 <Idle_init+0xa0>)
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <Idle_init+0xa0>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4413      	add	r3, r2
 80012da:	889b      	ldrh	r3, [r3, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	f008 f9c4 	bl	800966c <HAL_GPIO_WritePin>
			osDelay(200);
 80012e4:	20c8      	movs	r0, #200	; 0xc8
 80012e6:	f012 f9b3 	bl	8013650 <osDelay>
		for (int i = 8; i >= 0; i--) {
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	dae9      	bge.n	80012ca <Idle_init+0x5a>
		}

		// Yield thread control
		osThreadYield();
 80012f6:	f012 f98b 	bl	8013610 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 80012fa:	e7bd      	b.n	8001278 <Idle_init+0x8>
 80012fc:	240007cc 	.word	0x240007cc
 8001300:	24000a34 	.word	0x24000a34
 8001304:	240009e8 	.word	0x240009e8
 8001308:	24000814 	.word	0x24000814
 800130c:	240002d4 	.word	0x240002d4
 8001310:	08017b20 	.word	0x08017b20

08001314 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	4b34      	ldr	r3, [pc, #208]	; (80013fc <MX_GPIO_Init+0xe8>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	4a32      	ldr	r2, [pc, #200]	; (80013fc <MX_GPIO_Init+0xe8>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800133a:	4b30      	ldr	r3, [pc, #192]	; (80013fc <MX_GPIO_Init+0xe8>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001348:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <MX_GPIO_Init+0xe8>)
 800134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134e:	4a2b      	ldr	r2, [pc, #172]	; (80013fc <MX_GPIO_Init+0xe8>)
 8001350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001358:	4b28      	ldr	r3, [pc, #160]	; (80013fc <MX_GPIO_Init+0xe8>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b25      	ldr	r3, [pc, #148]	; (80013fc <MX_GPIO_Init+0xe8>)
 8001368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136c:	4a23      	ldr	r2, [pc, #140]	; (80013fc <MX_GPIO_Init+0xe8>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <MX_GPIO_Init+0xe8>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_GPIO_Init+0xe8>)
 8001386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138a:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <MX_GPIO_Init+0xe8>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <MX_GPIO_Init+0xe8>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 80013a8:	4815      	ldr	r0, [pc, #84]	; (8001400 <MX_GPIO_Init+0xec>)
 80013aa:	f008 f95f 	bl	800966c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2164      	movs	r1, #100	; 0x64
 80013b2:	4814      	ldr	r0, [pc, #80]	; (8001404 <MX_GPIO_Init+0xf0>)
 80013b4:	f008 f95a 	bl	800966c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80013b8:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 80013bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <MX_GPIO_Init+0xec>)
 80013d2:	f007 ff83 	bl	80092dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80013d6:	2364      	movs	r3, #100	; 0x64
 80013d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013de:	2302      	movs	r3, #2
 80013e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_GPIO_Init+0xf0>)
 80013ee:	f007 ff75 	bl	80092dc <HAL_GPIO_Init>

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	; 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	58024400 	.word	0x58024400
 8001400:	58020800 	.word	0x58020800
 8001404:	58020400 	.word	0x58020400

08001408 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <MX_I2C1_Init+0x78>)
 800140e:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <MX_I2C1_Init+0x7c>)
 8001410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_I2C1_Init+0x78>)
 8001414:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <MX_I2C1_Init+0x80>)
 8001416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_I2C1_Init+0x78>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_I2C1_Init+0x78>)
 8001420:	2201      	movs	r2, #1
 8001422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_I2C1_Init+0x78>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <MX_I2C1_Init+0x78>)
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <MX_I2C1_Init+0x78>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_I2C1_Init+0x78>)
 8001438:	2200      	movs	r2, #0
 800143a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_I2C1_Init+0x78>)
 800143e:	2200      	movs	r2, #0
 8001440:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001442:	480f      	ldr	r0, [pc, #60]	; (8001480 <MX_I2C1_Init+0x78>)
 8001444:	f008 f92c 	bl	80096a0 <HAL_I2C_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800144e:	f000 ff21 	bl	8002294 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001452:	2100      	movs	r1, #0
 8001454:	480a      	ldr	r0, [pc, #40]	; (8001480 <MX_I2C1_Init+0x78>)
 8001456:	f008 fe73 	bl	800a140 <HAL_I2CEx_ConfigAnalogFilter>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001460:	f000 ff18 	bl	8002294 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001464:	2100      	movs	r1, #0
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <MX_I2C1_Init+0x78>)
 8001468:	f008 feb5 	bl	800a1d6 <HAL_I2CEx_ConfigDigitalFilter>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001472:	f000 ff0f 	bl	8002294 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8001476:	2001      	movs	r0, #1
 8001478:	f008 fefa 	bl	800a270 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	24000770 	.word	0x24000770
 8001484:	40005400 	.word	0x40005400
 8001488:	0020081f 	.word	0x0020081f

0800148c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0ba      	sub	sp, #232	; 0xe8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	22c0      	movs	r2, #192	; 0xc0
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f015 fc35 	bl	8016d1c <memset>
  if(i2cHandle->Instance==I2C1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a27      	ldr	r2, [pc, #156]	; (8001554 <HAL_I2C_MspInit+0xc8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d146      	bne.n	800154a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014bc:	f04f 0208 	mov.w	r2, #8
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ce:	f107 0310 	add.w	r3, r7, #16
 80014d2:	4618      	mov	r0, r3
 80014d4:	f009 ff8e 	bl	800b3f4 <HAL_RCCEx_PeriphCLKConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80014de:	f000 fed9 	bl	8002294 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <HAL_I2C_MspInit+0xcc>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	4a1b      	ldr	r2, [pc, #108]	; (8001558 <HAL_I2C_MspInit+0xcc>)
 80014ea:	f043 0302 	orr.w	r3, r3, #2
 80014ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_I2C_MspInit+0xcc>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001500:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001504:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001508:	2312      	movs	r3, #18
 800150a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800151a:	2304      	movs	r3, #4
 800151c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001524:	4619      	mov	r1, r3
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <HAL_I2C_MspInit+0xd0>)
 8001528:	f007 fed8 	bl	80092dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_I2C_MspInit+0xcc>)
 800152e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_I2C_MspInit+0xcc>)
 8001534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001538:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_I2C_MspInit+0xcc>)
 800153e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800154a:	bf00      	nop
 800154c:	37e8      	adds	r7, #232	; 0xe8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40005400 	.word	0x40005400
 8001558:	58024400 	.word	0x58024400
 800155c:	58020400 	.word	0x58020400

08001560 <HAL_TIM_OC_DelayElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d106      	bne.n	800157e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	4618      	mov	r0, r3
 8001578:	f012 f8c4 	bl	8013704 <osEventFlagsSet>
#endif

	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 800157c:	e023      	b.n	80015c6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	else if (htim == &htim2) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d106      	bne.n	8001594 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2102      	movs	r1, #2
 800158c:	4618      	mov	r0, r3
 800158e:	f012 f8b9 	bl	8013704 <osEventFlagsSet>
}
 8001592:	e018      	b.n	80015c6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d111      	bne.n	80015c0 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	4618      	mov	r0, r3
 80015a4:	f012 f8ae 	bl	8013704 <osEventFlagsSet>
		if (HK_ENABLED){
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d009      	beq.n	80015c6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2104      	movs	r1, #4
 80015b8:	4618      	mov	r0, r3
 80015ba:	f012 f8a3 	bl	8013704 <osEventFlagsSet>
}
 80015be:	e002      	b.n	80015c6 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 80015c0:	4809      	ldr	r0, [pc, #36]	; (80015e8 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80015c2:	f015 fd01 	bl	8016fc8 <puts>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	240009e8 	.word	0x240009e8
 80015d4:	240007c4 	.word	0x240007c4
 80015d8:	24000a34 	.word	0x24000a34
 80015dc:	24000a80 	.word	0x24000a80
 80015e0:	240007c8 	.word	0x240007c8
 80015e4:	24000814 	.word	0x24000814
 80015e8:	080177c8 	.word	0x080177c8

080015ec <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80015f4:	2201      	movs	r2, #1
 80015f6:	49f2      	ldr	r1, [pc, #968]	; (80019c0 <HAL_UART_RxCpltCallback+0x3d4>)
 80015f8:	48f2      	ldr	r0, [pc, #968]	; (80019c4 <HAL_UART_RxCpltCallback+0x3d8>)
 80015fa:	f00f f91b 	bl	8010834 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 80015fe:	4bf0      	ldr	r3, [pc, #960]	; (80019c0 <HAL_UART_RxCpltCallback+0x3d4>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	2be0      	cmp	r3, #224	; 0xe0
 8001608:	f200 8419 	bhi.w	8001e3e <HAL_UART_RxCpltCallback+0x852>
 800160c:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <HAL_UART_RxCpltCallback+0x28>)
 800160e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001612:	bf00      	nop
 8001614:	080019ad 	.word	0x080019ad
 8001618:	080019f1 	.word	0x080019f1
 800161c:	08001a61 	.word	0x08001a61
 8001620:	08001a9b 	.word	0x08001a9b
 8001624:	08001ad3 	.word	0x08001ad3
 8001628:	08001b0d 	.word	0x08001b0d
 800162c:	08001b49 	.word	0x08001b49
 8001630:	08001b85 	.word	0x08001b85
 8001634:	08001bbf 	.word	0x08001bbf
 8001638:	08001bf3 	.word	0x08001bf3
 800163c:	08001c1f 	.word	0x08001c1f
 8001640:	08001c4b 	.word	0x08001c4b
 8001644:	08001c75 	.word	0x08001c75
 8001648:	08001d51 	.word	0x08001d51
 800164c:	08001db9 	.word	0x08001db9
 8001650:	08001de1 	.word	0x08001de1
 8001654:	08001999 	.word	0x08001999
 8001658:	080019d5 	.word	0x080019d5
 800165c:	08001a43 	.word	0x08001a43
 8001660:	08001a7f 	.word	0x08001a7f
 8001664:	08001ab7 	.word	0x08001ab7
 8001668:	08001aef 	.word	0x08001aef
 800166c:	08001b2b 	.word	0x08001b2b
 8001670:	08001b67 	.word	0x08001b67
 8001674:	08001ba3 	.word	0x08001ba3
 8001678:	08001bdb 	.word	0x08001bdb
 800167c:	08001c03 	.word	0x08001c03
 8001680:	08001c2f 	.word	0x08001c2f
 8001684:	08001c5b 	.word	0x08001c5b
 8001688:	08001c83 	.word	0x08001c83
 800168c:	08001d91 	.word	0x08001d91
 8001690:	08001e3f 	.word	0x08001e3f
 8001694:	08001e3f 	.word	0x08001e3f
 8001698:	08001e3f 	.word	0x08001e3f
 800169c:	08001e3f 	.word	0x08001e3f
 80016a0:	08001e3f 	.word	0x08001e3f
 80016a4:	08001e3f 	.word	0x08001e3f
 80016a8:	08001e3f 	.word	0x08001e3f
 80016ac:	08001e3f 	.word	0x08001e3f
 80016b0:	08001e3f 	.word	0x08001e3f
 80016b4:	08001e3f 	.word	0x08001e3f
 80016b8:	08001e3f 	.word	0x08001e3f
 80016bc:	08001e3f 	.word	0x08001e3f
 80016c0:	08001e3f 	.word	0x08001e3f
 80016c4:	08001e3f 	.word	0x08001e3f
 80016c8:	08001e3f 	.word	0x08001e3f
 80016cc:	08001e3f 	.word	0x08001e3f
 80016d0:	08001e3f 	.word	0x08001e3f
 80016d4:	08001e3f 	.word	0x08001e3f
 80016d8:	08001e3f 	.word	0x08001e3f
 80016dc:	08001e3f 	.word	0x08001e3f
 80016e0:	08001e3f 	.word	0x08001e3f
 80016e4:	08001e3f 	.word	0x08001e3f
 80016e8:	08001e3f 	.word	0x08001e3f
 80016ec:	08001e3f 	.word	0x08001e3f
 80016f0:	08001e3f 	.word	0x08001e3f
 80016f4:	08001e3f 	.word	0x08001e3f
 80016f8:	08001e3f 	.word	0x08001e3f
 80016fc:	08001e3f 	.word	0x08001e3f
 8001700:	08001e3f 	.word	0x08001e3f
 8001704:	08001e3f 	.word	0x08001e3f
 8001708:	08001e3f 	.word	0x08001e3f
 800170c:	08001e3f 	.word	0x08001e3f
 8001710:	08001e3f 	.word	0x08001e3f
 8001714:	08001e3f 	.word	0x08001e3f
 8001718:	08001e3f 	.word	0x08001e3f
 800171c:	08001e3f 	.word	0x08001e3f
 8001720:	08001e3f 	.word	0x08001e3f
 8001724:	08001e3f 	.word	0x08001e3f
 8001728:	08001e3f 	.word	0x08001e3f
 800172c:	08001e3f 	.word	0x08001e3f
 8001730:	08001e3f 	.word	0x08001e3f
 8001734:	08001e3f 	.word	0x08001e3f
 8001738:	08001e3f 	.word	0x08001e3f
 800173c:	08001e3f 	.word	0x08001e3f
 8001740:	08001e3f 	.word	0x08001e3f
 8001744:	08001e3f 	.word	0x08001e3f
 8001748:	08001e3f 	.word	0x08001e3f
 800174c:	08001e3f 	.word	0x08001e3f
 8001750:	08001e3f 	.word	0x08001e3f
 8001754:	08001e3f 	.word	0x08001e3f
 8001758:	08001e3f 	.word	0x08001e3f
 800175c:	08001e3f 	.word	0x08001e3f
 8001760:	08001e3f 	.word	0x08001e3f
 8001764:	08001e3f 	.word	0x08001e3f
 8001768:	08001e3f 	.word	0x08001e3f
 800176c:	08001e3f 	.word	0x08001e3f
 8001770:	08001e3f 	.word	0x08001e3f
 8001774:	08001e3f 	.word	0x08001e3f
 8001778:	08001e3f 	.word	0x08001e3f
 800177c:	08001e3f 	.word	0x08001e3f
 8001780:	08001e3f 	.word	0x08001e3f
 8001784:	08001e3f 	.word	0x08001e3f
 8001788:	08001e3f 	.word	0x08001e3f
 800178c:	08001e3f 	.word	0x08001e3f
 8001790:	08001e3f 	.word	0x08001e3f
 8001794:	08001e3f 	.word	0x08001e3f
 8001798:	08001e3f 	.word	0x08001e3f
 800179c:	08001e3f 	.word	0x08001e3f
 80017a0:	08001e3f 	.word	0x08001e3f
 80017a4:	08001e3f 	.word	0x08001e3f
 80017a8:	08001e3f 	.word	0x08001e3f
 80017ac:	08001e3f 	.word	0x08001e3f
 80017b0:	08001e3f 	.word	0x08001e3f
 80017b4:	08001e3f 	.word	0x08001e3f
 80017b8:	08001e3f 	.word	0x08001e3f
 80017bc:	08001e3f 	.word	0x08001e3f
 80017c0:	08001e3f 	.word	0x08001e3f
 80017c4:	08001e3f 	.word	0x08001e3f
 80017c8:	08001e3f 	.word	0x08001e3f
 80017cc:	08001e3f 	.word	0x08001e3f
 80017d0:	08001e3f 	.word	0x08001e3f
 80017d4:	08001e3f 	.word	0x08001e3f
 80017d8:	08001e3f 	.word	0x08001e3f
 80017dc:	08001e3f 	.word	0x08001e3f
 80017e0:	08001e3f 	.word	0x08001e3f
 80017e4:	08001e3f 	.word	0x08001e3f
 80017e8:	08001e3f 	.word	0x08001e3f
 80017ec:	08001e3f 	.word	0x08001e3f
 80017f0:	08001e3f 	.word	0x08001e3f
 80017f4:	08001e3f 	.word	0x08001e3f
 80017f8:	08001e3f 	.word	0x08001e3f
 80017fc:	08001e3f 	.word	0x08001e3f
 8001800:	08001e3f 	.word	0x08001e3f
 8001804:	08001e3f 	.word	0x08001e3f
 8001808:	08001e3f 	.word	0x08001e3f
 800180c:	08001e3f 	.word	0x08001e3f
 8001810:	08001e3f 	.word	0x08001e3f
 8001814:	08001e3f 	.word	0x08001e3f
 8001818:	08001e3f 	.word	0x08001e3f
 800181c:	08001e3f 	.word	0x08001e3f
 8001820:	08001e3f 	.word	0x08001e3f
 8001824:	08001e3f 	.word	0x08001e3f
 8001828:	08001e3f 	.word	0x08001e3f
 800182c:	08001e3f 	.word	0x08001e3f
 8001830:	08001e3f 	.word	0x08001e3f
 8001834:	08001e3f 	.word	0x08001e3f
 8001838:	08001e3f 	.word	0x08001e3f
 800183c:	08001e3f 	.word	0x08001e3f
 8001840:	08001e3f 	.word	0x08001e3f
 8001844:	08001e3f 	.word	0x08001e3f
 8001848:	08001e3f 	.word	0x08001e3f
 800184c:	08001e3f 	.word	0x08001e3f
 8001850:	08001e3f 	.word	0x08001e3f
 8001854:	08001e3f 	.word	0x08001e3f
 8001858:	08001e3f 	.word	0x08001e3f
 800185c:	08001e3f 	.word	0x08001e3f
 8001860:	08001e3f 	.word	0x08001e3f
 8001864:	08001e3f 	.word	0x08001e3f
 8001868:	08001e3f 	.word	0x08001e3f
 800186c:	08001e3f 	.word	0x08001e3f
 8001870:	08001e3f 	.word	0x08001e3f
 8001874:	08001e3f 	.word	0x08001e3f
 8001878:	08001e3f 	.word	0x08001e3f
 800187c:	08001e3f 	.word	0x08001e3f
 8001880:	08001e3f 	.word	0x08001e3f
 8001884:	08001e3f 	.word	0x08001e3f
 8001888:	08001e3f 	.word	0x08001e3f
 800188c:	08001e3f 	.word	0x08001e3f
 8001890:	08001e3f 	.word	0x08001e3f
 8001894:	08001e3f 	.word	0x08001e3f
 8001898:	08001e3f 	.word	0x08001e3f
 800189c:	08001e3f 	.word	0x08001e3f
 80018a0:	08001e3f 	.word	0x08001e3f
 80018a4:	08001e3f 	.word	0x08001e3f
 80018a8:	08001e3f 	.word	0x08001e3f
 80018ac:	08001e3f 	.word	0x08001e3f
 80018b0:	08001e3f 	.word	0x08001e3f
 80018b4:	08001e3f 	.word	0x08001e3f
 80018b8:	08001e3f 	.word	0x08001e3f
 80018bc:	08001e3f 	.word	0x08001e3f
 80018c0:	08001e3f 	.word	0x08001e3f
 80018c4:	08001e3f 	.word	0x08001e3f
 80018c8:	08001e3f 	.word	0x08001e3f
 80018cc:	08001e3f 	.word	0x08001e3f
 80018d0:	08001e1d 	.word	0x08001e1d
 80018d4:	08001e3f 	.word	0x08001e3f
 80018d8:	08001e3f 	.word	0x08001e3f
 80018dc:	08001e3f 	.word	0x08001e3f
 80018e0:	08001e3f 	.word	0x08001e3f
 80018e4:	08001e3f 	.word	0x08001e3f
 80018e8:	08001e3f 	.word	0x08001e3f
 80018ec:	08001e3f 	.word	0x08001e3f
 80018f0:	08001e3f 	.word	0x08001e3f
 80018f4:	08001e3f 	.word	0x08001e3f
 80018f8:	08001e3f 	.word	0x08001e3f
 80018fc:	08001e3f 	.word	0x08001e3f
 8001900:	08001e3f 	.word	0x08001e3f
 8001904:	08001e3f 	.word	0x08001e3f
 8001908:	08001e3f 	.word	0x08001e3f
 800190c:	08001e3f 	.word	0x08001e3f
 8001910:	08001e23 	.word	0x08001e23
 8001914:	08001e3f 	.word	0x08001e3f
 8001918:	08001e3f 	.word	0x08001e3f
 800191c:	08001e3f 	.word	0x08001e3f
 8001920:	08001e3f 	.word	0x08001e3f
 8001924:	08001e3f 	.word	0x08001e3f
 8001928:	08001e3f 	.word	0x08001e3f
 800192c:	08001e3f 	.word	0x08001e3f
 8001930:	08001e3f 	.word	0x08001e3f
 8001934:	08001e3f 	.word	0x08001e3f
 8001938:	08001e3f 	.word	0x08001e3f
 800193c:	08001e3f 	.word	0x08001e3f
 8001940:	08001e3f 	.word	0x08001e3f
 8001944:	08001e3f 	.word	0x08001e3f
 8001948:	08001e3f 	.word	0x08001e3f
 800194c:	08001e3f 	.word	0x08001e3f
 8001950:	08001e31 	.word	0x08001e31
 8001954:	08001e09 	.word	0x08001e09
 8001958:	08001e3f 	.word	0x08001e3f
 800195c:	08001e3f 	.word	0x08001e3f
 8001960:	08001e3f 	.word	0x08001e3f
 8001964:	08001e3f 	.word	0x08001e3f
 8001968:	08001e3f 	.word	0x08001e3f
 800196c:	08001e3f 	.word	0x08001e3f
 8001970:	08001e3f 	.word	0x08001e3f
 8001974:	08001e3f 	.word	0x08001e3f
 8001978:	08001e3f 	.word	0x08001e3f
 800197c:	08001e3f 	.word	0x08001e3f
 8001980:	08001e3f 	.word	0x08001e3f
 8001984:	08001e3f 	.word	0x08001e3f
 8001988:	08001e3f 	.word	0x08001e3f
 800198c:	08001e3f 	.word	0x08001e3f
 8001990:	08001e3f 	.word	0x08001e3f
 8001994:	08001df5 	.word	0x08001df5
	case 0x10: {
		printf("SDN1 ON\n");
 8001998:	480b      	ldr	r0, [pc, #44]	; (80019c8 <HAL_UART_RxCpltCallback+0x3dc>)
 800199a:	f015 fb15 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_UART_RxCpltCallback+0x3e0>)
 80019a0:	2104      	movs	r1, #4
 80019a2:	2201      	movs	r2, #1
 80019a4:	4618      	mov	r0, r3
 80019a6:	f007 fe61 	bl	800966c <HAL_GPIO_WritePin>
		break;
 80019aa:	e253      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 80019ac:	4808      	ldr	r0, [pc, #32]	; (80019d0 <HAL_UART_RxCpltCallback+0x3e4>)
 80019ae:	f015 fb0b 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_UART_RxCpltCallback+0x3e0>)
 80019b4:	2104      	movs	r1, #4
 80019b6:	2200      	movs	r2, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f007 fe57 	bl	800966c <HAL_GPIO_WritePin>
		break;
 80019be:	e249      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
 80019c0:	240007d4 	.word	0x240007d4
 80019c4:	24000acc 	.word	0x24000acc
 80019c8:	080177e0 	.word	0x080177e0
 80019cc:	58020400 	.word	0x58020400
 80019d0:	080177e8 	.word	0x080177e8
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 80019d4:	48bb      	ldr	r0, [pc, #748]	; (8001cc4 <HAL_UART_RxCpltCallback+0x6d8>)
 80019d6:	f015 faf7 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 80019da:	4bbb      	ldr	r3, [pc, #748]	; (8001cc8 <HAL_UART_RxCpltCallback+0x6dc>)
 80019dc:	2120      	movs	r1, #32
 80019de:	2201      	movs	r2, #1
 80019e0:	4618      	mov	r0, r3
 80019e2:	f007 fe43 	bl	800966c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 80019e6:	2101      	movs	r1, #1
 80019e8:	2008      	movs	r0, #8
 80019ea:	f002 fbbd 	bl	8004168 <set_rail_monitor_enable>
		break;
 80019ee:	e231      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 80019f0:	48b6      	ldr	r0, [pc, #728]	; (8001ccc <HAL_UART_RxCpltCallback+0x6e0>)
 80019f2:	f015 fae9 	bl	8016fc8 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 80019f6:	2308      	movs	r3, #8
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e00f      	b.n	8001a1c <HAL_UART_RxCpltCallback+0x430>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80019fc:	4ab4      	ldr	r2, [pc, #720]	; (8001cd0 <HAL_UART_RxCpltCallback+0x6e4>)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001a04:	4ab2      	ldr	r2, [pc, #712]	; (8001cd0 <HAL_UART_RxCpltCallback+0x6e4>)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	889b      	ldrh	r3, [r3, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	f007 fe2b 	bl	800966c <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	dcec      	bgt.n	80019fc <HAL_UART_RxCpltCallback+0x410>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001a22:	2310      	movs	r3, #16
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	e008      	b.n	8001a3a <HAL_UART_RxCpltCallback+0x44e>
			set_rail_monitor_enable(i, 0);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f002 fb9a 	bl	8004168 <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	2b07      	cmp	r3, #7
 8001a3e:	dcf3      	bgt.n	8001a28 <HAL_UART_RxCpltCallback+0x43c>
		}

		break;
 8001a40:	e208      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8001a42:	48a4      	ldr	r0, [pc, #656]	; (8001cd4 <HAL_UART_RxCpltCallback+0x6e8>)
 8001a44:	f015 fac0 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8001a48:	4ba3      	ldr	r3, [pc, #652]	; (8001cd8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4618      	mov	r0, r3
 8001a52:	f007 fe0b 	bl	800966c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 8001a56:	2101      	movs	r1, #1
 8001a58:	2009      	movs	r0, #9
 8001a5a:	f002 fb85 	bl	8004168 <set_rail_monitor_enable>

		break;
 8001a5e:	e1f9      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8001a60:	489e      	ldr	r0, [pc, #632]	; (8001cdc <HAL_UART_RxCpltCallback+0x6f0>)
 8001a62:	f015 fab1 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8001a66:	4b9c      	ldr	r3, [pc, #624]	; (8001cd8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f007 fdfc 	bl	800966c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8001a74:	2100      	movs	r1, #0
 8001a76:	2009      	movs	r0, #9
 8001a78:	f002 fb76 	bl	8004168 <set_rail_monitor_enable>
		break;
 8001a7c:	e1ea      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8001a7e:	4898      	ldr	r0, [pc, #608]	; (8001ce0 <HAL_UART_RxCpltCallback+0x6f4>)
 8001a80:	f015 faa2 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8001a84:	4b94      	ldr	r3, [pc, #592]	; (8001cd8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f007 fdee 	bl	800966c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8001a90:	2101      	movs	r1, #1
 8001a92:	200a      	movs	r0, #10
 8001a94:	f002 fb68 	bl	8004168 <set_rail_monitor_enable>

		break;
 8001a98:	e1dc      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8001a9a:	4892      	ldr	r0, [pc, #584]	; (8001ce4 <HAL_UART_RxCpltCallback+0x6f8>)
 8001a9c:	f015 fa94 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8001aa0:	4b8d      	ldr	r3, [pc, #564]	; (8001cd8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001aa2:	2180      	movs	r1, #128	; 0x80
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f007 fde0 	bl	800966c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8001aac:	2100      	movs	r1, #0
 8001aae:	200a      	movs	r0, #10
 8001ab0:	f002 fb5a 	bl	8004168 <set_rail_monitor_enable>
		break;
 8001ab4:	e1ce      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8001ab6:	488c      	ldr	r0, [pc, #560]	; (8001ce8 <HAL_UART_RxCpltCallback+0x6fc>)
 8001ab8:	f015 fa86 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8001abc:	4b86      	ldr	r3, [pc, #536]	; (8001cd8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001abe:	2140      	movs	r1, #64	; 0x40
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f007 fdd2 	bl	800966c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 8001ac8:	2101      	movs	r1, #1
 8001aca:	200b      	movs	r0, #11
 8001acc:	f002 fb4c 	bl	8004168 <set_rail_monitor_enable>

		break;
 8001ad0:	e1c0      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8001ad2:	4886      	ldr	r0, [pc, #536]	; (8001cec <HAL_UART_RxCpltCallback+0x700>)
 8001ad4:	f015 fa78 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8001ad8:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001ada:	2140      	movs	r1, #64	; 0x40
 8001adc:	2200      	movs	r2, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f007 fdc4 	bl	800966c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	200b      	movs	r0, #11
 8001ae8:	f002 fb3e 	bl	8004168 <set_rail_monitor_enable>
		break;
 8001aec:	e1b2      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8001aee:	4880      	ldr	r0, [pc, #512]	; (8001cf0 <HAL_UART_RxCpltCallback+0x704>)
 8001af0:	f015 fa6a 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8001af4:	4b78      	ldr	r3, [pc, #480]	; (8001cd8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001afa:	2201      	movs	r2, #1
 8001afc:	4618      	mov	r0, r3
 8001afe:	f007 fdb5 	bl	800966c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 8001b02:	2101      	movs	r1, #1
 8001b04:	200c      	movs	r0, #12
 8001b06:	f002 fb2f 	bl	8004168 <set_rail_monitor_enable>

		break;
 8001b0a:	e1a3      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8001b0c:	4879      	ldr	r0, [pc, #484]	; (8001cf4 <HAL_UART_RxCpltCallback+0x708>)
 8001b0e:	f015 fa5b 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8001b12:	4b71      	ldr	r3, [pc, #452]	; (8001cd8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b18:	2200      	movs	r2, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f007 fda6 	bl	800966c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8001b20:	2100      	movs	r1, #0
 8001b22:	200c      	movs	r0, #12
 8001b24:	f002 fb20 	bl	8004168 <set_rail_monitor_enable>
		break;
 8001b28:	e194      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8001b2a:	4873      	ldr	r0, [pc, #460]	; (8001cf8 <HAL_UART_RxCpltCallback+0x70c>)
 8001b2c:	f015 fa4c 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8001b30:	4b69      	ldr	r3, [pc, #420]	; (8001cd8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b36:	2201      	movs	r2, #1
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f007 fd97 	bl	800966c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8001b3e:	2101      	movs	r1, #1
 8001b40:	200d      	movs	r0, #13
 8001b42:	f002 fb11 	bl	8004168 <set_rail_monitor_enable>

		break;
 8001b46:	e185      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8001b48:	486c      	ldr	r0, [pc, #432]	; (8001cfc <HAL_UART_RxCpltCallback+0x710>)
 8001b4a:	f015 fa3d 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8001b4e:	4b62      	ldr	r3, [pc, #392]	; (8001cd8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b54:	2200      	movs	r2, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f007 fd88 	bl	800966c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	200d      	movs	r0, #13
 8001b60:	f002 fb02 	bl	8004168 <set_rail_monitor_enable>
		break;
 8001b64:	e176      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8001b66:	4866      	ldr	r0, [pc, #408]	; (8001d00 <HAL_UART_RxCpltCallback+0x714>)
 8001b68:	f015 fa2e 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8001b6c:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b72:	2201      	movs	r2, #1
 8001b74:	4618      	mov	r0, r3
 8001b76:	f007 fd79 	bl	800966c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	200f      	movs	r0, #15
 8001b7e:	f002 faf3 	bl	8004168 <set_rail_monitor_enable>

		break;
 8001b82:	e167      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8001b84:	485f      	ldr	r0, [pc, #380]	; (8001d04 <HAL_UART_RxCpltCallback+0x718>)
 8001b86:	f015 fa1f 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8001b8a:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_UART_RxCpltCallback+0x6ec>)
 8001b8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b90:	2200      	movs	r2, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f007 fd6a 	bl	800966c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f002 fae4 	bl	8004168 <set_rail_monitor_enable>
		break;
 8001ba0:	e158      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8001ba2:	4859      	ldr	r0, [pc, #356]	; (8001d08 <HAL_UART_RxCpltCallback+0x71c>)
 8001ba4:	f015 fa10 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8001ba8:	4b47      	ldr	r3, [pc, #284]	; (8001cc8 <HAL_UART_RxCpltCallback+0x6dc>)
 8001baa:	2140      	movs	r1, #64	; 0x40
 8001bac:	2201      	movs	r2, #1
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f007 fd5c 	bl	800966c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	2010      	movs	r0, #16
 8001bb8:	f002 fad6 	bl	8004168 <set_rail_monitor_enable>

		break;
 8001bbc:	e14a      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8001bbe:	4853      	ldr	r0, [pc, #332]	; (8001d0c <HAL_UART_RxCpltCallback+0x720>)
 8001bc0:	f015 fa02 	bl	8016fc8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8001bc4:	4b40      	ldr	r3, [pc, #256]	; (8001cc8 <HAL_UART_RxCpltCallback+0x6dc>)
 8001bc6:	2140      	movs	r1, #64	; 0x40
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f007 fd4e 	bl	800966c <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2010      	movs	r0, #16
 8001bd4:	f002 fac8 	bl	8004168 <set_rail_monitor_enable>
		break;
 8001bd8:	e13c      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8001bda:	484d      	ldr	r0, [pc, #308]	; (8001d10 <HAL_UART_RxCpltCallback+0x724>)
 8001bdc:	f015 f9f4 	bl	8016fc8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8001be0:	2300      	movs	r3, #0
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2320      	movs	r3, #32
 8001be6:	4a4b      	ldr	r2, [pc, #300]	; (8001d14 <HAL_UART_RxCpltCallback+0x728>)
 8001be8:	2100      	movs	r1, #0
 8001bea:	484b      	ldr	r0, [pc, #300]	; (8001d18 <HAL_UART_RxCpltCallback+0x72c>)
 8001bec:	f004 f9a2 	bl	8005f34 <HAL_DAC_Start_DMA>
		break;
 8001bf0:	e130      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8001bf2:	484a      	ldr	r0, [pc, #296]	; (8001d1c <HAL_UART_RxCpltCallback+0x730>)
 8001bf4:	f015 f9e8 	bl	8016fc8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4847      	ldr	r0, [pc, #284]	; (8001d18 <HAL_UART_RxCpltCallback+0x72c>)
 8001bfc:	f004 fa5a 	bl	80060b4 <HAL_DAC_Stop_DMA>
		break;
 8001c00:	e128      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8001c02:	4847      	ldr	r0, [pc, #284]	; (8001d20 <HAL_UART_RxCpltCallback+0x734>)
 8001c04:	f015 f9e0 	bl	8016fc8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8001c08:	210c      	movs	r1, #12
 8001c0a:	4846      	ldr	r0, [pc, #280]	; (8001d24 <HAL_UART_RxCpltCallback+0x738>)
 8001c0c:	f00d f932 	bl	800ee74 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8001c10:	4b45      	ldr	r3, [pc, #276]	; (8001d28 <HAL_UART_RxCpltCallback+0x73c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2102      	movs	r1, #2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f011 fd74 	bl	8013704 <osEventFlagsSet>
		break;
 8001c1c:	e11a      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8001c1e:	4843      	ldr	r0, [pc, #268]	; (8001d2c <HAL_UART_RxCpltCallback+0x740>)
 8001c20:	f015 f9d2 	bl	8016fc8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8001c24:	210c      	movs	r1, #12
 8001c26:	483f      	ldr	r0, [pc, #252]	; (8001d24 <HAL_UART_RxCpltCallback+0x738>)
 8001c28:	f00d fa7e 	bl	800f128 <HAL_TIM_OC_Stop_IT>
		break;
 8001c2c:	e112      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8001c2e:	4840      	ldr	r0, [pc, #256]	; (8001d30 <HAL_UART_RxCpltCallback+0x744>)
 8001c30:	f015 f9ca 	bl	8016fc8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001c34:	2100      	movs	r1, #0
 8001c36:	483f      	ldr	r0, [pc, #252]	; (8001d34 <HAL_UART_RxCpltCallback+0x748>)
 8001c38:	f00d f91c 	bl	800ee74 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8001c3c:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <HAL_UART_RxCpltCallback+0x73c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2101      	movs	r1, #1
 8001c42:	4618      	mov	r0, r3
 8001c44:	f011 fd5e 	bl	8013704 <osEventFlagsSet>
		break;
 8001c48:	e104      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8001c4a:	483b      	ldr	r0, [pc, #236]	; (8001d38 <HAL_UART_RxCpltCallback+0x74c>)
 8001c4c:	f015 f9bc 	bl	8016fc8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001c50:	2100      	movs	r1, #0
 8001c52:	4838      	ldr	r0, [pc, #224]	; (8001d34 <HAL_UART_RxCpltCallback+0x748>)
 8001c54:	f00d fa68 	bl	800f128 <HAL_TIM_OC_Stop_IT>
		break;
 8001c58:	e0fc      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1C: {
		printf("HK ON \n");
 8001c5a:	4838      	ldr	r0, [pc, #224]	; (8001d3c <HAL_UART_RxCpltCallback+0x750>)
 8001c5c:	f015 f9b4 	bl	8016fc8 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8001c60:	4b31      	ldr	r3, [pc, #196]	; (8001d28 <HAL_UART_RxCpltCallback+0x73c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2104      	movs	r1, #4
 8001c66:	4618      	mov	r0, r3
 8001c68:	f011 fd4c 	bl	8013704 <osEventFlagsSet>
		HK_ENABLED = 1;
 8001c6c:	4b34      	ldr	r3, [pc, #208]	; (8001d40 <HAL_UART_RxCpltCallback+0x754>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
		break;
 8001c72:	e0ef      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8001c74:	4833      	ldr	r0, [pc, #204]	; (8001d44 <HAL_UART_RxCpltCallback+0x758>)
 8001c76:	f015 f9a7 	bl	8016fc8 <puts>
		HK_ENABLED = 0;
 8001c7a:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <HAL_UART_RxCpltCallback+0x754>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
		break;
 8001c80:	e0e8      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0x1D: {
		printf("Step Up\n");
 8001c82:	4831      	ldr	r0, [pc, #196]	; (8001d48 <HAL_UART_RxCpltCallback+0x75c>)
 8001c84:	f015 f9a0 	bl	8016fc8 <puts>
		if (step < 14) {
 8001c88:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_UART_RxCpltCallback+0x760>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b0d      	cmp	r3, #13
 8001c90:	f200 80d9 	bhi.w	8001e46 <HAL_UART_RxCpltCallback+0x85a>
			step += 2;
 8001c94:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_UART_RxCpltCallback+0x760>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <HAL_UART_RxCpltCallback+0x760>)
 8001ca0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_UART_RxCpltCallback+0x760>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_UART_RxCpltCallback+0x728>)
 8001cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4818      	ldr	r0, [pc, #96]	; (8001d18 <HAL_UART_RxCpltCallback+0x72c>)
 8001cb6:	f004 faa0 	bl	80061fa <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4816      	ldr	r0, [pc, #88]	; (8001d18 <HAL_UART_RxCpltCallback+0x72c>)
 8001cbe:	f004 f8e1 	bl	8005e84 <HAL_DAC_Start>
		}
		break;
 8001cc2:	e0c0      	b.n	8001e46 <HAL_UART_RxCpltCallback+0x85a>
 8001cc4:	080177f4 	.word	0x080177f4
 8001cc8:	58020400 	.word	0x58020400
 8001ccc:	08017800 	.word	0x08017800
 8001cd0:	08017b20 	.word	0x08017b20
 8001cd4:	0801780c 	.word	0x0801780c
 8001cd8:	58020800 	.word	0x58020800
 8001cdc:	08017818 	.word	0x08017818
 8001ce0:	08017828 	.word	0x08017828
 8001ce4:	08017834 	.word	0x08017834
 8001ce8:	08017840 	.word	0x08017840
 8001cec:	0801784c 	.word	0x0801784c
 8001cf0:	0801785c 	.word	0x0801785c
 8001cf4:	08017868 	.word	0x08017868
 8001cf8:	08017874 	.word	0x08017874
 8001cfc:	08017880 	.word	0x08017880
 8001d00:	0801788c 	.word	0x0801788c
 8001d04:	0801789c 	.word	0x0801789c
 8001d08:	080178ac 	.word	0x080178ac
 8001d0c:	080178b8 	.word	0x080178b8
 8001d10:	080178c8 	.word	0x080178c8
 8001d14:	24000000 	.word	0x24000000
 8001d18:	240002d4 	.word	0x240002d4
 8001d1c:	080178d8 	.word	0x080178d8
 8001d20:	080178e8 	.word	0x080178e8
 8001d24:	24000a34 	.word	0x24000a34
 8001d28:	240007c4 	.word	0x240007c4
 8001d2c:	080178f0 	.word	0x080178f0
 8001d30:	080178fc 	.word	0x080178fc
 8001d34:	240009e8 	.word	0x240009e8
 8001d38:	08017904 	.word	0x08017904
 8001d3c:	0801790c 	.word	0x0801790c
 8001d40:	24000814 	.word	0x24000814
 8001d44:	08017914 	.word	0x08017914
 8001d48:	0801791c 	.word	0x0801791c
 8001d4c:	24000815 	.word	0x24000815
	}
	case 0x0D: {
		printf("Step Down\n");
 8001d50:	4842      	ldr	r0, [pc, #264]	; (8001e5c <HAL_UART_RxCpltCallback+0x870>)
 8001d52:	f015 f939 	bl	8016fc8 <puts>
		if (step > 1) {
 8001d56:	4b42      	ldr	r3, [pc, #264]	; (8001e60 <HAL_UART_RxCpltCallback+0x874>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d974      	bls.n	8001e4a <HAL_UART_RxCpltCallback+0x85e>
			step -= 2;
 8001d60:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <HAL_UART_RxCpltCallback+0x874>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	3b02      	subs	r3, #2
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <HAL_UART_RxCpltCallback+0x874>)
 8001d6c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8001d6e:	4b3c      	ldr	r3, [pc, #240]	; (8001e60 <HAL_UART_RxCpltCallback+0x874>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <HAL_UART_RxCpltCallback+0x878>)
 8001d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4839      	ldr	r0, [pc, #228]	; (8001e68 <HAL_UART_RxCpltCallback+0x87c>)
 8001d82:	f004 fa3a 	bl	80061fa <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001d86:	2100      	movs	r1, #0
 8001d88:	4837      	ldr	r0, [pc, #220]	; (8001e68 <HAL_UART_RxCpltCallback+0x87c>)
 8001d8a:	f004 f87b 	bl	8005e84 <HAL_DAC_Start>
		}
		break;
 8001d8e:	e05c      	b.n	8001e4a <HAL_UART_RxCpltCallback+0x85e>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8001d90:	4836      	ldr	r0, [pc, #216]	; (8001e6c <HAL_UART_RxCpltCallback+0x880>)
 8001d92:	f015 f919 	bl	8016fc8 <puts>
		if (cadence <= 50000) {
 8001d96:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_UART_RxCpltCallback+0x884>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d855      	bhi.n	8001e4e <HAL_UART_RxCpltCallback+0x862>
			cadence *= 2;
 8001da2:	4b33      	ldr	r3, [pc, #204]	; (8001e70 <HAL_UART_RxCpltCallback+0x884>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4a31      	ldr	r2, [pc, #196]	; (8001e70 <HAL_UART_RxCpltCallback+0x884>)
 8001daa:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001dac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db0:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <HAL_UART_RxCpltCallback+0x884>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001db6:	e04a      	b.n	8001e4e <HAL_UART_RxCpltCallback+0x862>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8001db8:	482e      	ldr	r0, [pc, #184]	; (8001e74 <HAL_UART_RxCpltCallback+0x888>)
 8001dba:	f015 f905 	bl	8016fc8 <puts>
		if (cadence >= 6250) {
 8001dbe:	4b2c      	ldr	r3, [pc, #176]	; (8001e70 <HAL_UART_RxCpltCallback+0x884>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f641 0269 	movw	r2, #6249	; 0x1869
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d943      	bls.n	8001e52 <HAL_UART_RxCpltCallback+0x866>
			cadence /= 2;
 8001dca:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_UART_RxCpltCallback+0x884>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	085b      	lsrs	r3, r3, #1
 8001dd0:	4a27      	ldr	r2, [pc, #156]	; (8001e70 <HAL_UART_RxCpltCallback+0x884>)
 8001dd2:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8001dd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_UART_RxCpltCallback+0x884>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8001dde:	e038      	b.n	8001e52 <HAL_UART_RxCpltCallback+0x866>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8001de0:	4825      	ldr	r0, [pc, #148]	; (8001e78 <HAL_UART_RxCpltCallback+0x88c>)
 8001de2:	f015 f8f1 	bl	8016fc8 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 8001de6:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <HAL_UART_RxCpltCallback+0x890>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2102      	movs	r1, #2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f011 fc89 	bl	8013704 <osEventFlagsSet>
		break;
 8001df2:	e02f      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8001df4:	4822      	ldr	r0, [pc, #136]	; (8001e80 <HAL_UART_RxCpltCallback+0x894>)
 8001df6:	f015 f8e7 	bl	8016fc8 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 8001dfa:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_UART_RxCpltCallback+0x890>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2104      	movs	r1, #4
 8001e00:	4618      	mov	r0, r3
 8001e02:	f011 fc7f 	bl	8013704 <osEventFlagsSet>
		break;
 8001e06:	e025      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8001e08:	481e      	ldr	r0, [pc, #120]	; (8001e84 <HAL_UART_RxCpltCallback+0x898>)
 8001e0a:	f015 f8dd 	bl	8016fc8 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8001e0e:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_UART_RxCpltCallback+0x890>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2108      	movs	r1, #8
 8001e14:	4618      	mov	r0, r3
 8001e16:	f011 fc75 	bl	8013704 <osEventFlagsSet>
		break;
 8001e1a:	e01b      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xAF: {
		sync();
 8001e1c:	f000 f97e 	bl	800211c <sync>
		break;
 8001e20:	e018      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_UART_RxCpltCallback+0x89c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2101      	movs	r1, #1
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f011 fc6b 	bl	8013704 <osEventFlagsSet>
		break;
 8001e2e:	e011      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8001e30:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_UART_RxCpltCallback+0x89c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2102      	movs	r1, #2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f011 fc64 	bl	8013704 <osEventFlagsSet>
		break;
 8001e3c:	e00a      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
	}
	default: {
		printf("Unknown Command\n");
 8001e3e:	4813      	ldr	r0, [pc, #76]	; (8001e8c <HAL_UART_RxCpltCallback+0x8a0>)
 8001e40:	f015 f8c2 	bl	8016fc8 <puts>
		break;
 8001e44:	e006      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001e46:	bf00      	nop
 8001e48:	e004      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001e4a:	bf00      	nop
 8001e4c:	e002      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001e4e:	bf00      	nop
 8001e50:	e000      	b.n	8001e54 <HAL_UART_RxCpltCallback+0x868>
		break;
 8001e52:	bf00      	nop
	}
	}
}
 8001e54:	bf00      	nop
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	08017924 	.word	0x08017924
 8001e60:	24000815 	.word	0x24000815
 8001e64:	24000000 	.word	0x24000000
 8001e68:	240002d4 	.word	0x240002d4
 8001e6c:	08017930 	.word	0x08017930
 8001e70:	24000080 	.word	0x24000080
 8001e74:	0801793c 	.word	0x0801793c
 8001e78:	08017948 	.word	0x08017948
 8001e7c:	240007c8 	.word	0x240007c8
 8001e80:	08017958 	.word	0x08017958
 8001e84:	08017964 	.word	0x08017964
 8001e88:	240007cc 	.word	0x240007cc
 8001e8c:	08017970 	.word	0x08017970

08001e90 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <HAL_UART_TxCpltCallback+0x1c>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	24000084 	.word	0x24000084

08001eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eb4:	f002 fa52 	bl	800435c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eb8:	f000 f826 	bl	8001f08 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001ebc:	f000 f8a4 	bl	8002008 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec0:	f7ff fa28 	bl	8001314 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ec4:	f7fe ff10 	bl	8000ce8 <MX_DMA_Init>
  MX_TIM3_Init();
 8001ec8:	f001 fbfc 	bl	80036c4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001ecc:	f001 fe84 	bl	8003bd8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001ed0:	f7ff fa9a 	bl	8001408 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001ed4:	f000 ff4e 	bl	8002d74 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001ed8:	f001 fb7e 	bl	80035d8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001edc:	f001 face 	bl	800347c <MX_TIM1_Init>
  MX_ADC3_Init();
 8001ee0:	f7fe fca2 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001ee4:	f7fe fb7e 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001ee8:	f7fe fe4a 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001eec:	f000 feea 	bl	8002cc4 <MX_SPI1_Init>
  MX_RTC_Init();
 8001ef0:	f000 fcce 	bl	8002890 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  system_setup();
 8001ef4:	f000 f8b8 	bl	8002068 <system_setup>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001ef8:	f011 faae 	bl	8013458 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001efc:	f7fe ff3a 	bl	8000d74 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f00:	f011 face 	bl	80134a0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001f04:	e7fe      	b.n	8001f04 <main+0x54>
	...

08001f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b09c      	sub	sp, #112	; 0x70
 8001f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f12:	224c      	movs	r2, #76	; 0x4c
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f014 ff00 	bl	8016d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2220      	movs	r2, #32
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f014 fefa 	bl	8016d1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001f28:	2002      	movs	r0, #2
 8001f2a:	f008 fa01 	bl	800a330 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	4b33      	ldr	r3, [pc, #204]	; (8002000 <SystemClock_Config+0xf8>)
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	4a32      	ldr	r2, [pc, #200]	; (8002000 <SystemClock_Config+0xf8>)
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001f3e:	4b30      	ldr	r3, [pc, #192]	; (8002000 <SystemClock_Config+0xf8>)
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <SystemClock_Config+0xfc>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f50:	4a2c      	ldr	r2, [pc, #176]	; (8002004 <SystemClock_Config+0xfc>)
 8001f52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f56:	6193      	str	r3, [r2, #24]
 8001f58:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <SystemClock_Config+0xfc>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f64:	bf00      	nop
 8001f66:	4b27      	ldr	r3, [pc, #156]	; (8002004 <SystemClock_Config+0xfc>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f72:	d1f8      	bne.n	8001f66 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001f74:	2303      	movs	r3, #3
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8001f7e:	2309      	movs	r3, #9
 8001f80:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f82:	2340      	movs	r3, #64	; 0x40
 8001f84:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f86:	2302      	movs	r3, #2
 8001f88:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001f92:	2320      	movs	r3, #32
 8001f94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f96:	2302      	movs	r3, #2
 8001f98:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001fa2:	2308      	movs	r3, #8
 8001fa4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f008 f9f6 	bl	800a3a4 <HAL_RCC_OscConfig>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001fbe:	f000 f969 	bl	8002294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc2:	233f      	movs	r3, #63	; 0x3f
 8001fc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001fd6:	2340      	movs	r3, #64	; 0x40
 8001fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f008 fe36 	bl	800ac58 <HAL_RCC_ClockConfig>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001ff2:	f000 f94f 	bl	8002294 <Error_Handler>
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3770      	adds	r7, #112	; 0x70
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	58000400 	.word	0x58000400
 8002004:	58024800 	.word	0x58024800

08002008 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b0b0      	sub	sp, #192	; 0xc0
 800200c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800200e:	463b      	mov	r3, r7
 8002010:	22c0      	movs	r2, #192	; 0xc0
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f014 fe81 	bl	8016d1c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800201a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002026:	2304      	movs	r3, #4
 8002028:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 800202a:	2320      	movs	r3, #32
 800202c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 800202e:	2308      	movs	r3, #8
 8002030:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002032:	2302      	movs	r3, #2
 8002034:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002036:	2302      	movs	r3, #2
 8002038:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800204c:	463b      	mov	r3, r7
 800204e:	4618      	mov	r0, r3
 8002050:	f009 f9d0 	bl	800b3f4 <HAL_RCCEx_PeriphCLKConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800205a:	f000 f91b 	bl	8002294 <Error_Handler>
  }
}
 800205e:	bf00      	nop
 8002060:	37c0      	adds	r7, #192	; 0xc0
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts


	// ---- 1 ---- //
	packet_event_flags = osEventFlagsNew(NULL);
 800206c:	2000      	movs	r0, #0
 800206e:	f011 fb0a 	bl	8013686 <osEventFlagsNew>
 8002072:	4603      	mov	r3, r0
 8002074:	4a22      	ldr	r2, [pc, #136]	; (8002100 <system_setup+0x98>)
 8002076:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8002078:	4b21      	ldr	r3, [pc, #132]	; (8002100 <system_setup+0x98>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d100      	bne.n	8002082 <system_setup+0x1a>
        while (1);
 8002080:	e7fe      	b.n	8002080 <system_setup+0x18>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8002082:	2000      	movs	r0, #0
 8002084:	f011 faff 	bl	8013686 <osEventFlagsNew>
 8002088:	4603      	mov	r3, r0
 800208a:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <system_setup+0x9c>)
 800208c:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <system_setup+0x9c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d100      	bne.n	8002098 <system_setup+0x30>
        while (1);
 8002096:	e7fe      	b.n	8002096 <system_setup+0x2e>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8002098:	2000      	movs	r0, #0
 800209a:	f011 faf4 	bl	8013686 <osEventFlagsNew>
 800209e:	4603      	mov	r3, r0
 80020a0:	4a19      	ldr	r2, [pc, #100]	; (8002108 <system_setup+0xa0>)
 80020a2:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <system_setup+0xa0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d100      	bne.n	80020ae <system_setup+0x46>
        while (1);
 80020ac:	e7fe      	b.n	80020ac <system_setup+0x44>
    }

	// ---- 2 ---- //
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_SIZE, sizeof(packet_t), NULL);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2108      	movs	r1, #8
 80020b2:	2080      	movs	r0, #128	; 0x80
 80020b4:	f011 fc02 	bl	80138bc <osMessageQueueNew>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4a14      	ldr	r2, [pc, #80]	; (800210c <system_setup+0xa4>)
 80020bc:	6013      	str	r3, [r2, #0]
	if (mid_MsgQueue == NULL) {
 80020be:	4b13      	ldr	r3, [pc, #76]	; (800210c <system_setup+0xa4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d100      	bne.n	80020c8 <system_setup+0x60>
		while (1);
 80020c6:	e7fe      	b.n	80020c6 <system_setup+0x5e>
	}

	// ---- 3 ---- //
	if (!voltage_monitor_init()) {
 80020c8:	f001 fe90 	bl	8003dec <voltage_monitor_init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d100      	bne.n	80020d4 <system_setup+0x6c>
		while (1);
 80020d2:	e7fe      	b.n	80020d2 <system_setup+0x6a>
	}

	// ---- 4 ---- //
	HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 80020d4:	2100      	movs	r1, #0
 80020d6:	480e      	ldr	r0, [pc, #56]	; (8002110 <system_setup+0xa8>)
 80020d8:	f00c fecc 	bl	800ee74 <HAL_TIM_OC_Start_IT>

	// ---- 5 ---- //
	TIM2->CCR4 = 312;
 80020dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020e0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40

	// ---- 6 ---- //
	if (!init_adc_dma()) {
 80020e6:	f000 fc65 	bl	80029b4 <init_adc_dma>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d100      	bne.n	80020f2 <system_setup+0x8a>
		while (1);
 80020f0:	e7fe      	b.n	80020f0 <system_setup+0x88>
	}

	// ---- 7 ---- //
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80020f2:	2201      	movs	r2, #1
 80020f4:	4907      	ldr	r1, [pc, #28]	; (8002114 <system_setup+0xac>)
 80020f6:	4808      	ldr	r0, [pc, #32]	; (8002118 <system_setup+0xb0>)
 80020f8:	f00e fb9c 	bl	8010834 <HAL_UART_Receive_IT>

}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	240007c4 	.word	0x240007c4
 8002104:	240007c8 	.word	0x240007c8
 8002108:	240007cc 	.word	0x240007cc
 800210c:	240007d0 	.word	0x240007d0
 8002110:	24000a80 	.word	0x24000a80
 8002114:	240007d4 	.word	0x240007d4
 8002118:	24000acc 	.word	0x24000acc

0800211c <sync>:

void sync() {
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
	send_ACK();
 8002122:	f000 f821 	bl	8002168 <send_ACK>

	uint8_t key;

	// Wait for 0xFF to be received
	HAL_UART_AbortReceive(&huart1);
 8002126:	480e      	ldr	r0, [pc, #56]	; (8002160 <sync+0x44>)
 8002128:	f00e fc50 	bl	80109cc <HAL_UART_AbortReceive>
	do {
		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 800212c:	2364      	movs	r3, #100	; 0x64
 800212e:	2209      	movs	r2, #9
 8002130:	490c      	ldr	r1, [pc, #48]	; (8002164 <sync+0x48>)
 8002132:	480b      	ldr	r0, [pc, #44]	; (8002160 <sync+0x44>)
 8002134:	f00e fab6 	bl	80106a4 <HAL_UART_Receive>
		key = UART_RX_BUFFER[0];
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <sync+0x48>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	71fb      	strb	r3, [r7, #7]
	} while (key != 0xFF);
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	2bff      	cmp	r3, #255	; 0xff
 8002142:	d1f3      	bne.n	800212c <sync+0x10>

	calibrateRTC(UART_RX_BUFFER); // TODO: calibrate rtc
 8002144:	4807      	ldr	r0, [pc, #28]	; (8002164 <sync+0x48>)
 8002146:	f001 fc85 	bl	8003a54 <calibrateRTC>
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800214a:	2201      	movs	r2, #1
 800214c:	4905      	ldr	r1, [pc, #20]	; (8002164 <sync+0x48>)
 800214e:	4804      	ldr	r0, [pc, #16]	; (8002160 <sync+0x44>)
 8002150:	f00e fb70 	bl	8010834 <HAL_UART_Receive_IT>

	send_ACK();
 8002154:	f000 f808 	bl	8002168 <send_ACK>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	24000acc 	.word	0x24000acc
 8002164:	240007d4 	.word	0x240007d4

08002168 <send_ACK>:

void send_ACK() {
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <send_ACK+0x1c>)
 800216e:	22ff      	movs	r2, #255	; 0xff
 8002170:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8002172:	2364      	movs	r3, #100	; 0x64
 8002174:	2201      	movs	r2, #1
 8002176:	4903      	ldr	r1, [pc, #12]	; (8002184 <send_ACK+0x1c>)
 8002178:	4803      	ldr	r0, [pc, #12]	; (8002188 <send_ACK+0x20>)
 800217a:	f00e fa05 	bl	8010588 <HAL_UART_Transmit>
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	2400081c 	.word	0x2400081c
 8002188:	24000acc 	.word	0x24000acc

0800218c <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8002192:	4b2e      	ldr	r3, [pc, #184]	; (800224c <get_current_step+0xc0>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800219e:	4293      	cmp	r3, r2
 80021a0:	d04a      	beq.n	8002238 <get_current_step+0xac>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a8:	da48      	bge.n	800223c <get_current_step+0xb0>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d03f      	beq.n	8002234 <get_current_step+0xa8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f640 628b 	movw	r2, #3723	; 0xe8b
 80021ba:	4293      	cmp	r3, r2
 80021bc:	dc3e      	bgt.n	800223c <get_current_step+0xb0>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f640 421f 	movw	r2, #3103	; 0xc1f
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d033      	beq.n	8002230 <get_current_step+0xa4>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 80021ce:	da35      	bge.n	800223c <get_current_step+0xb0>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d028      	beq.n	800222c <get_current_step+0xa0>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f640 12b2 	movw	r2, #2482	; 0x9b2
 80021e0:	4293      	cmp	r3, r2
 80021e2:	dc2b      	bgt.n	800223c <get_current_step+0xb0>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f240 7245 	movw	r2, #1861	; 0x745
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01c      	beq.n	8002228 <get_current_step+0x9c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f240 7245 	movw	r2, #1861	; 0x745
 80021f4:	4293      	cmp	r3, r2
 80021f6:	dc21      	bgt.n	800223c <get_current_step+0xb0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f240 42d9 	movw	r2, #1241	; 0x4d9
 80021fe:	4293      	cmp	r3, r2
 8002200:	d010      	beq.n	8002224 <get_current_step+0x98>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8002208:	4293      	cmp	r3, r2
 800220a:	dc17      	bgt.n	800223c <get_current_step+0xb0>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d004      	beq.n	800221c <get_current_step+0x90>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8002218:	d002      	beq.n	8002220 <get_current_step+0x94>
 800221a:	e00f      	b.n	800223c <get_current_step+0xb0>
	case 0:
		return 0;
 800221c:	2300      	movs	r3, #0
 800221e:	e00e      	b.n	800223e <get_current_step+0xb2>
	case 620:
		return 1;
 8002220:	2301      	movs	r3, #1
 8002222:	e00c      	b.n	800223e <get_current_step+0xb2>
	case 1241:
		return 2;
 8002224:	2302      	movs	r3, #2
 8002226:	e00a      	b.n	800223e <get_current_step+0xb2>
	case 1861:
		return 3;
 8002228:	2303      	movs	r3, #3
 800222a:	e008      	b.n	800223e <get_current_step+0xb2>
	case 2482:
		return 4;
 800222c:	2304      	movs	r3, #4
 800222e:	e006      	b.n	800223e <get_current_step+0xb2>
	case 3103:
		return 5;
 8002230:	2305      	movs	r3, #5
 8002232:	e004      	b.n	800223e <get_current_step+0xb2>
	case 3723:
		return 6;
 8002234:	2306      	movs	r3, #6
 8002236:	e002      	b.n	800223e <get_current_step+0xb2>
	case 4095:
		return 7;
 8002238:	2307      	movs	r3, #7
 800223a:	e000      	b.n	800223e <get_current_step+0xb2>
	default:
		return -1;
 800223c:	23ff      	movs	r3, #255	; 0xff
	}
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40007400 	.word	0x40007400

08002250 <enter_stop>:

void enter_stop() {
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
	  send_ACK();
 8002254:	f7ff ff88 	bl	8002168 <send_ACK>

	  vTaskSuspendAll();
 8002258:	f012 fff4 	bl	8015244 <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800225c:	2101      	movs	r1, #1
 800225e:	2001      	movs	r0, #1
 8002260:	f008 f82a 	bl	800a2b8 <HAL_PWR_EnterSTOPMode>
		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.

	  SystemClock_Config();
 8002264:	f7ff fe50 	bl	8001f08 <SystemClock_Config>
	  xTaskResumeAll();
 8002268:	f012 fffa 	bl	8015260 <xTaskResumeAll>
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d101      	bne.n	8002286 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002282:	f002 f8a7 	bl	80043d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40001000 	.word	0x40001000

08002294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002298:	b672      	cpsid	i
}
 800229a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800229c:	e7fe      	b.n	800229c <Error_Handler+0x8>

0800229e <packetize>:

uint16_t pmt_seq = 0;
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;

packet_t packetize(const uint8_t *data, uint16_t size) {
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	4613      	mov	r3, r2
 80022aa:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f014 fd16 	bl	8016ce0 <malloc>
 80022b4:	4603      	mov	r3, r0
 80022b6:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	88fa      	ldrh	r2, [r7, #6]
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	4618      	mov	r0, r3
 80022c0:	f014 fd1e 	bl	8016d00 <memcpy>
	packet.size = size;
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	82bb      	strh	r3, [r7, #20]
	return packet;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	461a      	mov	r2, r3
 80022cc:	f107 0310 	add.w	r3, r7, #16
 80022d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022d4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <create_pmt_packet>:

void create_pmt_packet() {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80022e6:	bf00      	nop
 80022e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ec:	4836      	ldr	r0, [pc, #216]	; (80023c8 <create_pmt_packet+0xe8>)
 80022ee:	f007 f9a5 	bl	800963c <HAL_GPIO_ReadPin>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f7      	bne.n	80022e8 <create_pmt_packet+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 80022f8:	200a      	movs	r0, #10
 80022fa:	f014 fcf1 	bl	8016ce0 <malloc>
 80022fe:	4603      	mov	r3, r0
 8002300:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002302:	2002      	movs	r0, #2
 8002304:	f014 fcec 	bl	8016ce0 <malloc>
 8002308:	4603      	mov	r3, r0
 800230a:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 800230c:	2004      	movs	r0, #4
 800230e:	f014 fce7 	bl	8016ce0 <malloc>
 8002312:	4603      	mov	r3, r0
 8002314:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f001 fb02 	bl	8003920 <get_uptime>

	sample_pmt_spi(pmt_spi);
 800231c:	6938      	ldr	r0, [r7, #16]
 800231e:	f000 fb89 	bl	8002a34 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	22bb      	movs	r2, #187	; 0xbb
 8002326:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3301      	adds	r3, #1
 800232c:	22bb      	movs	r2, #187	; 0xbb
 800232e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002330:	4b26      	ldr	r3, [pc, #152]	; (80023cc <create_pmt_packet+0xec>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	b29a      	uxth	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3302      	adds	r3, #2
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002340:	4b22      	ldr	r3, [pc, #136]	; (80023cc <create_pmt_packet+0xec>)
 8002342:	881a      	ldrh	r2, [r3, #0]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3303      	adds	r3, #3
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3304      	adds	r3, #4
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	7812      	ldrb	r2, [r2, #0]
 8002354:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3305      	adds	r3, #5
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	7852      	ldrb	r2, [r2, #1]
 800235e:	701a      	strb	r2, [r3, #0]
	buffer[6] = uptime[0];
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	3306      	adds	r3, #6
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	701a      	strb	r2, [r3, #0]
	buffer[7] = uptime[1];
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	3307      	adds	r3, #7
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	7852      	ldrb	r2, [r2, #1]
 8002372:	701a      	strb	r2, [r3, #0]
	buffer[8] = uptime[2];
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3308      	adds	r3, #8
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	7892      	ldrb	r2, [r2, #2]
 800237c:	701a      	strb	r2, [r3, #0]
	buffer[9] = uptime[3];
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3309      	adds	r3, #9
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	78d2      	ldrb	r2, [r2, #3]
 8002386:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = packetize(buffer, PMT_DATA_SIZE);
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	220a      	movs	r2, #10
 800238c:	6979      	ldr	r1, [r7, #20]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff85 	bl	800229e <packetize>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <create_pmt_packet+0xf0>)
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	1d39      	adds	r1, r7, #4
 800239a:	2300      	movs	r3, #0
 800239c:	2200      	movs	r2, #0
 800239e:	f011 fb01 	bl	80139a4 <osMessageQueuePut>
	pmt_seq++;
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <create_pmt_packet+0xec>)
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	3301      	adds	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <create_pmt_packet+0xec>)
 80023ac:	801a      	strh	r2, [r3, #0]
	free(buffer);
 80023ae:	6978      	ldr	r0, [r7, #20]
 80023b0:	f014 fc9e 	bl	8016cf0 <free>
	free(pmt_spi);
 80023b4:	6938      	ldr	r0, [r7, #16]
 80023b6:	f014 fc9b 	bl	8016cf0 <free>
	free(uptime);
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f014 fc98 	bl	8016cf0 <free>
}
 80023c0:	bf00      	nop
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	58020000 	.word	0x58020000
 80023cc:	2400081e 	.word	0x2400081e
 80023d0:	240007d0 	.word	0x240007d0

080023d4 <create_erpa_packet>:


void create_erpa_packet() {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80023da:	bf00      	nop
 80023dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023e0:	484a      	ldr	r0, [pc, #296]	; (800250c <create_erpa_packet+0x138>)
 80023e2:	f007 f92b 	bl	800963c <HAL_GPIO_ReadPin>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f7      	bne.n	80023dc <create_erpa_packet+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80023ec:	200e      	movs	r0, #14
 80023ee:	f014 fc77 	bl	8016ce0 <malloc>
 80023f2:	4603      	mov	r3, r0
 80023f4:	61fb      	str	r3, [r7, #28]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80023f6:	2002      	movs	r0, #2
 80023f8:	f014 fc72 	bl	8016ce0 <malloc>
 80023fc:	4603      	mov	r3, r0
 80023fe:	61bb      	str	r3, [r7, #24]
	uint16_t *erpa_adc = (uint16_t*) malloc(1 * sizeof(uint16_t));
 8002400:	2002      	movs	r0, #2
 8002402:	f014 fc6d 	bl	8016ce0 <malloc>
 8002406:	4603      	mov	r3, r0
 8002408:	617b      	str	r3, [r7, #20]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 800240a:	2004      	movs	r0, #4
 800240c:	f014 fc68 	bl	8016ce0 <malloc>
 8002410:	4603      	mov	r3, r0
 8002412:	613b      	str	r3, [r7, #16]
	uint8_t sweep_step = -1;
 8002414:	23ff      	movs	r3, #255	; 0xff
 8002416:	73fb      	strb	r3, [r7, #15]

	get_uptime(uptime);
 8002418:	6938      	ldr	r0, [r7, #16]
 800241a:	f001 fa81 	bl	8003920 <get_uptime>
	sweep_step = get_current_step();
 800241e:	f7ff feb5 	bl	800218c <get_current_step>
 8002422:	4603      	mov	r3, r0
 8002424:	73fb      	strb	r3, [r7, #15]

	sample_erpa_spi(erpa_spi);
 8002426:	69b8      	ldr	r0, [r7, #24]
 8002428:	f000 fb28 	bl	8002a7c <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 800242c:	6978      	ldr	r0, [r7, #20]
 800242e:	f000 fb49 	bl	8002ac4 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	22aa      	movs	r2, #170	; 0xaa
 8002436:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	3301      	adds	r3, #1
 800243c:	22aa      	movs	r2, #170	; 0xaa
 800243e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8002440:	4b33      	ldr	r3, [pc, #204]	; (8002510 <create_erpa_packet+0x13c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	0c1a      	lsrs	r2, r3, #16
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3302      	adds	r3, #2
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 800244e:	4b30      	ldr	r3, [pc, #192]	; (8002510 <create_erpa_packet+0x13c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	0a1a      	lsrs	r2, r3, #8
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	3303      	adds	r3, #3
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	701a      	strb	r2, [r3, #0]
	buffer[4] = erpa_seq & 0xFF;
 800245c:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <create_erpa_packet+0x13c>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	3304      	adds	r3, #4
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]
	buffer[5] = sweep_step;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	3305      	adds	r3, #5
 800246c:	7bfa      	ldrb	r2, [r7, #15]
 800246e:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	b29a      	uxth	r2, r3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	3306      	adds	r3, #6
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	881a      	ldrh	r2, [r3, #0]
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	3307      	adds	r3, #7
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	3308      	adds	r3, #8
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	7812      	ldrb	r2, [r2, #0]
 8002494:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3309      	adds	r3, #9
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	7852      	ldrb	r2, [r2, #1]
 800249e:	701a      	strb	r2, [r3, #0]
	buffer[10] = uptime[0];
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	330a      	adds	r3, #10
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	7812      	ldrb	r2, [r2, #0]
 80024a8:	701a      	strb	r2, [r3, #0]
	buffer[11] = uptime[1];
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	330b      	adds	r3, #11
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	7852      	ldrb	r2, [r2, #1]
 80024b2:	701a      	strb	r2, [r3, #0]
	buffer[12] = uptime[2];
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	330c      	adds	r3, #12
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	7892      	ldrb	r2, [r2, #2]
 80024bc:	701a      	strb	r2, [r3, #0]
	buffer[13] = uptime[3];
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	330d      	adds	r3, #13
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	78d2      	ldrb	r2, [r2, #3]
 80024c6:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = packetize(buffer, ERPA_DATA_SIZE);
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	220e      	movs	r2, #14
 80024cc:	69f9      	ldr	r1, [r7, #28]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fee5 	bl	800229e <packetize>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <create_erpa_packet+0x140>)
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	1d39      	adds	r1, r7, #4
 80024da:	2300      	movs	r3, #0
 80024dc:	2200      	movs	r2, #0
 80024de:	f011 fa61 	bl	80139a4 <osMessageQueuePut>
	erpa_seq++;
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <create_erpa_packet+0x13c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3301      	adds	r3, #1
 80024e8:	4a09      	ldr	r2, [pc, #36]	; (8002510 <create_erpa_packet+0x13c>)
 80024ea:	6013      	str	r3, [r2, #0]
	free(buffer);
 80024ec:	69f8      	ldr	r0, [r7, #28]
 80024ee:	f014 fbff 	bl	8016cf0 <free>
	free(erpa_spi);
 80024f2:	69b8      	ldr	r0, [r7, #24]
 80024f4:	f014 fbfc 	bl	8016cf0 <free>
	free(erpa_adc);
 80024f8:	6978      	ldr	r0, [r7, #20]
 80024fa:	f014 fbf9 	bl	8016cf0 <free>
	free(uptime);
 80024fe:	6938      	ldr	r0, [r7, #16]
 8002500:	f014 fbf6 	bl	8016cf0 <free>
}
 8002504:	bf00      	nop
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	58020400 	.word	0x58020400
 8002510:	24000820 	.word	0x24000820
 8002514:	240007d0 	.word	0x240007d0

08002518 <create_hk_packet>:


void create_hk_packet() {
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 800251e:	2036      	movs	r0, #54	; 0x36
 8002520:	f014 fbde 	bl	8016ce0 <malloc>
 8002524:	4603      	mov	r3, r0
 8002526:	617b      	str	r3, [r7, #20]
	uint8_t *timestamp = (uint8_t*) malloc(TIMESTAMP_SIZE * sizeof(uint8_t));
 8002528:	200a      	movs	r0, #10
 800252a:	f014 fbd9 	bl	8016ce0 <malloc>
 800252e:	4603      	mov	r3, r0
 8002530:	613b      	str	r3, [r7, #16]
	uint8_t *uptime = (uint8_t*) malloc(UPTIME_SIZE * sizeof(uint8_t));
 8002532:	2004      	movs	r0, #4
 8002534:	f014 fbd4 	bl	8016ce0 <malloc>
 8002538:	4603      	mov	r3, r0
 800253a:	60fb      	str	r3, [r7, #12]

	get_uptime(uptime);
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f001 f9ef 	bl	8003920 <get_uptime>
	get_timestamp(timestamp);
 8002542:	6938      	ldr	r0, [r7, #16]
 8002544:	f001 fa36 	bl	80039b4 <get_timestamp>
	rail_monitor_ptr = get_rail_monitor();
 8002548:	f001 fe2e 	bl	80041a8 <get_rail_monitor>
 800254c:	60b8      	str	r0, [r7, #8]


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	22cc      	movs	r2, #204	; 0xcc
 8002552:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	3301      	adds	r3, #1
 8002558:	22cc      	movs	r2, #204	; 0xcc
 800255a:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800255c:	4ba1      	ldr	r3, [pc, #644]	; (80027e4 <create_hk_packet+0x2cc>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	b29a      	uxth	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3302      	adds	r3, #2
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800256c:	4b9d      	ldr	r3, [pc, #628]	; (80027e4 <create_hk_packet+0x2cc>)
 800256e:	881a      	ldrh	r2, [r3, #0]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3303      	adds	r3, #3
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	889b      	ldrh	r3, [r3, #4]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	b29a      	uxth	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3304      	adds	r3, #4
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	701a      	strb	r2, [r3, #0]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	889a      	ldrh	r2, [r3, #4]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3305      	adds	r3, #5
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	330a      	adds	r3, #10
 8002598:	889b      	ldrh	r3, [r3, #4]
 800259a:	0a1b      	lsrs	r3, r3, #8
 800259c:	b29a      	uxth	r2, r3
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	3306      	adds	r3, #6
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	701a      	strb	r2, [r3, #0]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	330a      	adds	r3, #10
 80025aa:	889a      	ldrh	r2, [r3, #4]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	3307      	adds	r3, #7
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	3314      	adds	r3, #20
 80025b8:	889b      	ldrh	r3, [r3, #4]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	b29a      	uxth	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3308      	adds	r3, #8
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3314      	adds	r3, #20
 80025ca:	889a      	ldrh	r2, [r3, #4]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3309      	adds	r3, #9
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	331e      	adds	r3, #30
 80025d8:	889b      	ldrh	r3, [r3, #4]
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	b29a      	uxth	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	330a      	adds	r3, #10
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	701a      	strb	r2, [r3, #0]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	331e      	adds	r3, #30
 80025ea:	889a      	ldrh	r2, [r3, #4]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	330b      	adds	r3, #11
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	3328      	adds	r3, #40	; 0x28
 80025f8:	889b      	ldrh	r3, [r3, #4]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	330c      	adds	r3, #12
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	701a      	strb	r2, [r3, #0]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3328      	adds	r3, #40	; 0x28
 800260a:	889a      	ldrh	r2, [r3, #4]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	330d      	adds	r3, #13
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	3332      	adds	r3, #50	; 0x32
 8002618:	889b      	ldrh	r3, [r3, #4]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	b29a      	uxth	r2, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	330e      	adds	r3, #14
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3332      	adds	r3, #50	; 0x32
 800262a:	889a      	ldrh	r2, [r3, #4]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	330f      	adds	r3, #15
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	333c      	adds	r3, #60	; 0x3c
 8002638:	889b      	ldrh	r3, [r3, #4]
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	b29a      	uxth	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3310      	adds	r3, #16
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	333c      	adds	r3, #60	; 0x3c
 800264a:	889a      	ldrh	r2, [r3, #4]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3311      	adds	r3, #17
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	3346      	adds	r3, #70	; 0x46
 8002658:	889b      	ldrh	r3, [r3, #4]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	b29a      	uxth	r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3312      	adds	r3, #18
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	3346      	adds	r3, #70	; 0x46
 800266a:	889a      	ldrh	r2, [r3, #4]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	3313      	adds	r3, #19
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	3350      	adds	r3, #80	; 0x50
 8002678:	889b      	ldrh	r3, [r3, #4]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	b29a      	uxth	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	3314      	adds	r3, #20
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	3350      	adds	r3, #80	; 0x50
 800268a:	889a      	ldrh	r2, [r3, #4]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3315      	adds	r3, #21
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	335a      	adds	r3, #90	; 0x5a
 8002698:	889b      	ldrh	r3, [r3, #4]
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	b29a      	uxth	r2, r3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	3316      	adds	r3, #22
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	335a      	adds	r3, #90	; 0x5a
 80026aa:	889a      	ldrh	r2, [r3, #4]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3317      	adds	r3, #23
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	3364      	adds	r3, #100	; 0x64
 80026b8:	889b      	ldrh	r3, [r3, #4]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	b29a      	uxth	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	3318      	adds	r3, #24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3364      	adds	r3, #100	; 0x64
 80026ca:	889a      	ldrh	r2, [r3, #4]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	3319      	adds	r3, #25
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	336e      	adds	r3, #110	; 0x6e
 80026d8:	889b      	ldrh	r3, [r3, #4]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	b29a      	uxth	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	331a      	adds	r3, #26
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	336e      	adds	r3, #110	; 0x6e
 80026ea:	889a      	ldrh	r2, [r3, #4]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	331b      	adds	r3, #27
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	3378      	adds	r3, #120	; 0x78
 80026f8:	889b      	ldrh	r3, [r3, #4]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	331c      	adds	r3, #28
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	3378      	adds	r3, #120	; 0x78
 800270a:	889a      	ldrh	r2, [r3, #4]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	331d      	adds	r3, #29
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	3382      	adds	r3, #130	; 0x82
 8002718:	889b      	ldrh	r3, [r3, #4]
 800271a:	0a1b      	lsrs	r3, r3, #8
 800271c:	b29a      	uxth	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	331e      	adds	r3, #30
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	3382      	adds	r3, #130	; 0x82
 800272a:	889a      	ldrh	r2, [r3, #4]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	331f      	adds	r3, #31
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	338c      	adds	r3, #140	; 0x8c
 8002738:	889b      	ldrh	r3, [r3, #4]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	b29a      	uxth	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3320      	adds	r3, #32
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	338c      	adds	r3, #140	; 0x8c
 800274a:	889a      	ldrh	r2, [r3, #4]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	3321      	adds	r3, #33	; 0x21
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	3396      	adds	r3, #150	; 0x96
 8002758:	889b      	ldrh	r3, [r3, #4]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	b29a      	uxth	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3322      	adds	r3, #34	; 0x22
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3396      	adds	r3, #150	; 0x96
 800276a:	889a      	ldrh	r2, [r3, #4]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3323      	adds	r3, #35	; 0x23
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	33a0      	adds	r3, #160	; 0xa0
 8002778:	889b      	ldrh	r3, [r3, #4]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	b29a      	uxth	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3324      	adds	r3, #36	; 0x24
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	33a0      	adds	r3, #160	; 0xa0
 800278a:	889a      	ldrh	r2, [r3, #4]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3325      	adds	r3, #37	; 0x25
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	33aa      	adds	r3, #170	; 0xaa
 8002798:	889b      	ldrh	r3, [r3, #4]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	b29a      	uxth	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3326      	adds	r3, #38	; 0x26
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	33aa      	adds	r3, #170	; 0xaa
 80027aa:	889a      	ldrh	r2, [r3, #4]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	3327      	adds	r3, #39	; 0x27
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[0];
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3328      	adds	r3, #40	; 0x28
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	7812      	ldrb	r2, [r2, #0]
 80027bc:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[1];
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3329      	adds	r3, #41	; 0x29
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	7852      	ldrb	r2, [r2, #1]
 80027c6:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[2];
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	332a      	adds	r3, #42	; 0x2a
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	7892      	ldrb	r2, [r2, #2]
 80027d0:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[3];
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	332b      	adds	r3, #43	; 0x2b
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	78d2      	ldrb	r2, [r2, #3]
 80027da:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[4];
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	332c      	adds	r3, #44	; 0x2c
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	e001      	b.n	80027e8 <create_hk_packet+0x2d0>
 80027e4:	24000824 	.word	0x24000824
 80027e8:	7912      	ldrb	r2, [r2, #4]
 80027ea:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[5];
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	332d      	adds	r3, #45	; 0x2d
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	7952      	ldrb	r2, [r2, #5]
 80027f4:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[6];
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	332e      	adds	r3, #46	; 0x2e
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	7992      	ldrb	r2, [r2, #6]
 80027fe:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[7];
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	332f      	adds	r3, #47	; 0x2f
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	79d2      	ldrb	r2, [r2, #7]
 8002808:	701a      	strb	r2, [r3, #0]
	buffer[48] = timestamp[8];
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	3330      	adds	r3, #48	; 0x30
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	7a12      	ldrb	r2, [r2, #8]
 8002812:	701a      	strb	r2, [r3, #0]
	buffer[49] = timestamp[9];
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3331      	adds	r3, #49	; 0x31
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	7a52      	ldrb	r2, [r2, #9]
 800281c:	701a      	strb	r2, [r3, #0]
	buffer[50] = uptime[0];
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	3332      	adds	r3, #50	; 0x32
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	7812      	ldrb	r2, [r2, #0]
 8002826:	701a      	strb	r2, [r3, #0]
	buffer[51] = uptime[1];
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3333      	adds	r3, #51	; 0x33
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	7852      	ldrb	r2, [r2, #1]
 8002830:	701a      	strb	r2, [r3, #0]
	buffer[52] = uptime[2];
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3334      	adds	r3, #52	; 0x34
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	7892      	ldrb	r2, [r2, #2]
 800283a:	701a      	strb	r2, [r3, #0]
	buffer[53] = uptime[3];
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	3335      	adds	r3, #53	; 0x35
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	78d2      	ldrb	r2, [r2, #3]
 8002844:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = packetize(buffer, HK_DATA_SIZE);
 8002846:	463b      	mov	r3, r7
 8002848:	2236      	movs	r2, #54	; 0x36
 800284a:	6979      	ldr	r1, [r7, #20]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fd26 	bl	800229e <packetize>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <create_hk_packet+0x370>)
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	4639      	mov	r1, r7
 8002858:	2300      	movs	r3, #0
 800285a:	2200      	movs	r2, #0
 800285c:	f011 f8a2 	bl	80139a4 <osMessageQueuePut>
	hk_seq++;
 8002860:	4b0a      	ldr	r3, [pc, #40]	; (800288c <create_hk_packet+0x374>)
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	3301      	adds	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	4b08      	ldr	r3, [pc, #32]	; (800288c <create_hk_packet+0x374>)
 800286a:	801a      	strh	r2, [r3, #0]
	free(buffer);
 800286c:	6978      	ldr	r0, [r7, #20]
 800286e:	f014 fa3f 	bl	8016cf0 <free>
	free(timestamp);
 8002872:	6938      	ldr	r0, [r7, #16]
 8002874:	f014 fa3c 	bl	8016cf0 <free>
	free(uptime);
 8002878:	68f8      	ldr	r0, [r7, #12]
 800287a:	f014 fa39 	bl	8016cf0 <free>
}
 800287e:	bf00      	nop
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	240007d0 	.word	0x240007d0
 800288c:	24000824 	.word	0x24000824

08002890 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80028a4:	2300      	movs	r3, #0
 80028a6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028a8:	4b26      	ldr	r3, [pc, #152]	; (8002944 <MX_RTC_Init+0xb4>)
 80028aa:	4a27      	ldr	r2, [pc, #156]	; (8002948 <MX_RTC_Init+0xb8>)
 80028ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028ae:	4b25      	ldr	r3, [pc, #148]	; (8002944 <MX_RTC_Init+0xb4>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80028b4:	4b23      	ldr	r3, [pc, #140]	; (8002944 <MX_RTC_Init+0xb4>)
 80028b6:	2263      	movs	r2, #99	; 0x63
 80028b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <MX_RTC_Init+0xb4>)
 80028bc:	f242 720f 	movw	r2, #9999	; 0x270f
 80028c0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <MX_RTC_Init+0xb4>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028c8:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <MX_RTC_Init+0xb4>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028ce:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <MX_RTC_Init+0xb4>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028d4:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <MX_RTC_Init+0xb4>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028da:	481a      	ldr	r0, [pc, #104]	; (8002944 <MX_RTC_Init+0xb4>)
 80028dc:	f00b fa88 	bl	800ddf0 <HAL_RTC_Init>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80028e6:	f7ff fcd5 	bl	8002294 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	2201      	movs	r2, #1
 8002902:	4619      	mov	r1, r3
 8002904:	480f      	ldr	r0, [pc, #60]	; (8002944 <MX_RTC_Init+0xb4>)
 8002906:	f00b faf5 	bl	800def4 <HAL_RTC_SetTime>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002910:	f7ff fcc0 	bl	8002294 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002914:	2301      	movs	r3, #1
 8002916:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002918:	2301      	movs	r3, #1
 800291a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800291c:	2301      	movs	r3, #1
 800291e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002920:	2300      	movs	r3, #0
 8002922:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002924:	463b      	mov	r3, r7
 8002926:	2201      	movs	r2, #1
 8002928:	4619      	mov	r1, r3
 800292a:	4806      	ldr	r0, [pc, #24]	; (8002944 <MX_RTC_Init+0xb4>)
 800292c:	f00b fbdc 	bl	800e0e8 <HAL_RTC_SetDate>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8002936:	f7ff fcad 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800293a:	bf00      	nop
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	24000828 	.word	0x24000828
 8002948:	58004000 	.word	0x58004000

0800294c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b0b2      	sub	sp, #200	; 0xc8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002954:	f107 0308 	add.w	r3, r7, #8
 8002958:	22c0      	movs	r2, #192	; 0xc0
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f014 f9dd 	bl	8016d1c <memset>
  if(rtcHandle->Instance==RTC)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a10      	ldr	r2, [pc, #64]	; (80029a8 <HAL_RTC_MspInit+0x5c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d118      	bne.n	800299e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800296c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <HAL_RTC_MspInit+0x60>)
 800297a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800297e:	f107 0308 	add.w	r3, r7, #8
 8002982:	4618      	mov	r0, r3
 8002984:	f008 fd36 	bl	800b3f4 <HAL_RCCEx_PeriphCLKConfig>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 800298e:	f7ff fc81 	bl	8002294 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002992:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <HAL_RTC_MspInit+0x64>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	4a06      	ldr	r2, [pc, #24]	; (80029b0 <HAL_RTC_MspInit+0x64>)
 8002998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800299c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800299e:	bf00      	nop
 80029a0:	37c8      	adds	r7, #200	; 0xc8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	58004000 	.word	0x58004000
 80029ac:	00019300 	.word	0x00019300
 80029b0:	58024400 	.word	0x58024400

080029b4 <init_adc_dma>:

ALIGN_32BYTES(static uint16_t ADC1_raw_data[ADC1_NUM_CHANNELS]);
ALIGN_32BYTES(static uint16_t ADC3_raw_data[ADC3_NUM_CHANNELS]);

// Public Functions
uint8_t init_adc_dma() {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80029be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80029c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029c6:	4817      	ldr	r0, [pc, #92]	; (8002a24 <init_adc_dma+0x70>)
 80029c8:	f003 f818 	bl	80059fc <HAL_ADCEx_Calibration_Start>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80029d2:	f7ff fc5f 	bl	8002294 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80029d6:	220b      	movs	r2, #11
 80029d8:	4913      	ldr	r1, [pc, #76]	; (8002a28 <init_adc_dma+0x74>)
 80029da:	4812      	ldr	r0, [pc, #72]	; (8002a24 <init_adc_dma+0x70>)
 80029dc:	f002 f8ec 	bl	8004bb8 <HAL_ADC_Start_DMA>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80029e6:	f7ff fc55 	bl	8002294 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80029ea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80029ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029f2:	480e      	ldr	r0, [pc, #56]	; (8002a2c <init_adc_dma+0x78>)
 80029f4:	f003 f802 	bl	80059fc <HAL_ADCEx_Calibration_Start>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80029fe:	f7ff fc49 	bl	8002294 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8002a02:	2204      	movs	r2, #4
 8002a04:	490a      	ldr	r1, [pc, #40]	; (8002a30 <init_adc_dma+0x7c>)
 8002a06:	4809      	ldr	r0, [pc, #36]	; (8002a2c <init_adc_dma+0x78>)
 8002a08:	f002 f8d6 	bl	8004bb8 <HAL_ADC_Start_DMA>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8002a12:	f7ff fc3f 	bl	8002294 <Error_Handler>
	}
	status = 1;
 8002a16:	2301      	movs	r3, #1
 8002a18:	71fb      	strb	r3, [r7, #7]

	return status;
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	2400011c 	.word	0x2400011c
 8002a28:	24000860 	.word	0x24000860
 8002a2c:	24000180 	.word	0x24000180
 8002a30:	24000880 	.word	0x24000880

08002a34 <sample_pmt_spi>:

void sample_pmt_spi(uint8_t *buffer) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8002a3c:	f107 010c 	add.w	r1, r7, #12
 8002a40:	2301      	movs	r3, #1
 8002a42:	2201      	movs	r2, #1
 8002a44:	480c      	ldr	r0, [pc, #48]	; (8002a78 <sample_pmt_spi+0x44>)
 8002a46:	f00b fe19 	bl	800e67c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8002a4e:	7b7b      	ldrb	r3, [r7, #13]
 8002a50:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <sample_pmt_spi+0x44>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <sample_pmt_spi+0x44>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a60:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	7bba      	ldrb	r2, [r7, #14]
 8002a66:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	701a      	strb	r2, [r3, #0]
}
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	24000888 	.word	0x24000888

08002a7c <sample_erpa_spi>:

void sample_erpa_spi(uint8_t *buffer) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8002a84:	f107 010c 	add.w	r1, r7, #12
 8002a88:	2364      	movs	r3, #100	; 0x64
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	480c      	ldr	r0, [pc, #48]	; (8002ac0 <sample_erpa_spi+0x44>)
 8002a8e:	f00b fdf5 	bl	800e67c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8002a96:	7b7b      	ldrb	r3, [r7, #13]
 8002a98:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <sample_erpa_spi+0x44>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <sample_erpa_spi+0x44>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aa8:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7bba      	ldrb	r2, [r7, #14]
 8002aae:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	7bfa      	ldrb	r2, [r7, #15]
 8002ab6:	701a      	strb	r2, [r3, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	24000910 	.word	0x24000910

08002ac4 <sample_erpa_adc>:

void sample_erpa_adc(uint16_t *buffer) {
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <sample_erpa_adc+0x20>)
 8002ace:	885b      	ldrh	r3, [r3, #2]
 8002ad0:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	89fa      	ldrh	r2, [r7, #14]
 8002ad6:	801a      	strh	r2, [r3, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	24000860 	.word	0x24000860

08002ae8 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8002af0:	2390      	movs	r3, #144	; 0x90
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f8a2 	bl	8002c3c <poll_i2c_sensor>
 8002af8:	4603      	mov	r3, r0
 8002afa:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8002afc:	2394      	movs	r3, #148	; 0x94
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f89c 	bl	8002c3c <poll_i2c_sensor>
 8002b04:	4603      	mov	r3, r0
 8002b06:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8002b08:	2392      	movs	r3, #146	; 0x92
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f896 	bl	8002c3c <poll_i2c_sensor>
 8002b10:	4603      	mov	r3, r0
 8002b12:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8002b14:	2396      	movs	r3, #150	; 0x96
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f890 	bl	8002c3c <poll_i2c_sensor>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	89fa      	ldrh	r2, [r7, #14]
 8002b24:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	3302      	adds	r3, #2
 8002b2a:	89ba      	ldrh	r2, [r7, #12]
 8002b2c:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3304      	adds	r3, #4
 8002b32:	897a      	ldrh	r2, [r7, #10]
 8002b34:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3306      	adds	r3, #6
 8002b3a:	893a      	ldrh	r2, [r7, #8]
 8002b3c:	801a      	strh	r2, [r3, #0]
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8002b48:	b480      	push	{r7}
 8002b4a:	b089      	sub	sp, #36	; 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8002b50:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <sample_hk_adc1+0xa0>)
 8002b52:	8a9b      	ldrh	r3, [r3, #20]
 8002b54:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8002b56:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <sample_hk_adc1+0xa0>)
 8002b58:	8a1b      	ldrh	r3, [r3, #16]
 8002b5a:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8002b5c:	4b22      	ldr	r3, [pc, #136]	; (8002be8 <sample_hk_adc1+0xa0>)
 8002b5e:	899b      	ldrh	r3, [r3, #12]
 8002b60:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8002b62:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <sample_hk_adc1+0xa0>)
 8002b64:	8a5b      	ldrh	r3, [r3, #18]
 8002b66:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8002b68:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <sample_hk_adc1+0xa0>)
 8002b6a:	889b      	ldrh	r3, [r3, #4]
 8002b6c:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8002b6e:	4b1e      	ldr	r3, [pc, #120]	; (8002be8 <sample_hk_adc1+0xa0>)
 8002b70:	88db      	ldrh	r3, [r3, #6]
 8002b72:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8002b74:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <sample_hk_adc1+0xa0>)
 8002b76:	89db      	ldrh	r3, [r3, #14]
 8002b78:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8002b7a:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <sample_hk_adc1+0xa0>)
 8002b7c:	891b      	ldrh	r3, [r3, #8]
 8002b7e:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <sample_hk_adc1+0xa0>)
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8002b86:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <sample_hk_adc1+0xa0>)
 8002b88:	895b      	ldrh	r3, [r3, #10]
 8002b8a:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8bfa      	ldrh	r2, [r7, #30]
 8002b90:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3302      	adds	r3, #2
 8002b96:	8bba      	ldrh	r2, [r7, #28]
 8002b98:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	8b7a      	ldrh	r2, [r7, #26]
 8002ba0:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3306      	adds	r3, #6
 8002ba6:	8b3a      	ldrh	r2, [r7, #24]
 8002ba8:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3308      	adds	r3, #8
 8002bae:	8afa      	ldrh	r2, [r7, #22]
 8002bb0:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	330a      	adds	r3, #10
 8002bb6:	8aba      	ldrh	r2, [r7, #20]
 8002bb8:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	8a7a      	ldrh	r2, [r7, #18]
 8002bc0:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	330e      	adds	r3, #14
 8002bc6:	8a3a      	ldrh	r2, [r7, #16]
 8002bc8:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3310      	adds	r3, #16
 8002bce:	89fa      	ldrh	r2, [r7, #14]
 8002bd0:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3312      	adds	r3, #18
 8002bd6:	89ba      	ldrh	r2, [r7, #12]
 8002bd8:	801a      	strh	r2, [r3, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	24000860 	.word	0x24000860

08002bec <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8002bf4:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <sample_hk_adc3+0x4c>)
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <sample_hk_adc3+0x4c>)
 8002bfc:	885b      	ldrh	r3, [r3, #2]
 8002bfe:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8002c00:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <sample_hk_adc3+0x4c>)
 8002c02:	889b      	ldrh	r3, [r3, #4]
 8002c04:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <sample_hk_adc3+0x4c>)
 8002c08:	88db      	ldrh	r3, [r3, #6]
 8002c0a:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	89fa      	ldrh	r2, [r7, #14]
 8002c10:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3302      	adds	r3, #2
 8002c16:	89ba      	ldrh	r2, [r7, #12]
 8002c18:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	897a      	ldrh	r2, [r7, #10]
 8002c20:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3306      	adds	r3, #6
 8002c26:	893a      	ldrh	r2, [r7, #8]
 8002c28:	801a      	strh	r2, [r3, #0]
}
 8002c2a:	bf00      	nop
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	24000880 	.word	0x24000880

08002c3c <poll_i2c_sensor>:

int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af02      	add	r7, sp, #8
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8002c46:	2300      	movs	r3, #0
 8002c48:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	b299      	uxth	r1, r3
 8002c4e:	f107 0208 	add.w	r2, r7, #8
 8002c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2301      	movs	r3, #1
 8002c5a:	4817      	ldr	r0, [pc, #92]	; (8002cb8 <poll_i2c_sensor+0x7c>)
 8002c5c:	f006 fdbc 	bl	80097d8 <HAL_I2C_Master_Transmit>
 8002c60:	4603      	mov	r3, r0
 8002c62:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8002c64:	7b7b      	ldrb	r3, [r7, #13]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8002c6a:	4814      	ldr	r0, [pc, #80]	; (8002cbc <poll_i2c_sensor+0x80>)
 8002c6c:	f014 f9ac 	bl	8016fc8 <puts>
 8002c70:	e01c      	b.n	8002cac <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	b299      	uxth	r1, r3
 8002c76:	f107 0208 	add.w	r2, r7, #8
 8002c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2302      	movs	r3, #2
 8002c82:	480d      	ldr	r0, [pc, #52]	; (8002cb8 <poll_i2c_sensor+0x7c>)
 8002c84:	f006 fec0 	bl	8009a08 <HAL_I2C_Master_Receive>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8002c8c:	7b7b      	ldrb	r3, [r7, #13]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8002c92:	480b      	ldr	r0, [pc, #44]	; (8002cc0 <poll_i2c_sensor+0x84>)
 8002c94:	f014 f998 	bl	8016fc8 <puts>
 8002c98:	e008      	b.n	8002cac <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8002c9a:	7a3b      	ldrb	r3, [r7, #8]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8002ca0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ca4:	7a7a      	ldrb	r2, [r7, #9]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	10db      	asrs	r3, r3, #3
 8002caa:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8002cac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	24000770 	.word	0x24000770
 8002cbc:	08017980 	.word	0x08017980
 8002cc0:	08017990 	.word	0x08017990

08002cc4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002cc8:	4b28      	ldr	r3, [pc, #160]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002cca:	4a29      	ldr	r2, [pc, #164]	; (8002d70 <MX_SPI1_Init+0xac>)
 8002ccc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cce:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002cd0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002cd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002cd6:	4b25      	ldr	r3, [pc, #148]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002cd8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002cdc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002cde:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002ce0:	220f      	movs	r2, #15
 8002ce2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ce4:	4b21      	ldr	r3, [pc, #132]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cf0:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002cf2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cf6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002cf8:	4b1c      	ldr	r3, [pc, #112]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002cfa:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002cfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d00:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d06:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d0c:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002d12:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d1e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d56:	4805      	ldr	r0, [pc, #20]	; (8002d6c <MX_SPI1_Init+0xa8>)
 8002d58:	f00b fb6c 	bl	800e434 <HAL_SPI_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8002d62:	f7ff fa97 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	24000888 	.word	0x24000888
 8002d70:	40013000 	.word	0x40013000

08002d74 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002d78:	4b28      	ldr	r3, [pc, #160]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002d7a:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <MX_SPI2_Init+0xac>)
 8002d7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d7e:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002d80:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002d84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002d86:	4b25      	ldr	r3, [pc, #148]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002d88:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002d8c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8002d8e:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002d90:	220f      	movs	r2, #15
 8002d92:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d94:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d9a:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002da0:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002da2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002da6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002da8:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002daa:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8002dae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002db0:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002db6:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dbc:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002dc2:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002dca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dce:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002dd0:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002dd6:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e06:	4805      	ldr	r0, [pc, #20]	; (8002e1c <MX_SPI2_Init+0xa8>)
 8002e08:	f00b fb14 	bl	800e434 <HAL_SPI_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8002e12:	f7ff fa3f 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	24000910 	.word	0x24000910
 8002e20:	40003800 	.word	0x40003800

08002e24 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b0bc      	sub	sp, #240	; 0xf0
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e30:	2200      	movs	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e3c:	f107 0318 	add.w	r3, r7, #24
 8002e40:	22c0      	movs	r2, #192	; 0xc0
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f013 ff69 	bl	8016d1c <memset>
  if(spiHandle->Instance==SPI1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a4c      	ldr	r2, [pc, #304]	; (8002f80 <HAL_SPI_MspInit+0x15c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d145      	bne.n	8002ee0 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002e54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e64:	f107 0318 	add.w	r3, r7, #24
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f008 fac3 	bl	800b3f4 <HAL_RCCEx_PeriphCLKConfig>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8002e74:	f7ff fa0e 	bl	8002294 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e78:	4b42      	ldr	r3, [pc, #264]	; (8002f84 <HAL_SPI_MspInit+0x160>)
 8002e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e7e:	4a41      	ldr	r2, [pc, #260]	; (8002f84 <HAL_SPI_MspInit+0x160>)
 8002e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e88:	4b3e      	ldr	r3, [pc, #248]	; (8002f84 <HAL_SPI_MspInit+0x160>)
 8002e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e96:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <HAL_SPI_MspInit+0x160>)
 8002e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9c:	4a39      	ldr	r2, [pc, #228]	; (8002f84 <HAL_SPI_MspInit+0x160>)
 8002e9e:	f043 0302 	orr.w	r3, r3, #2
 8002ea2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ea6:	4b37      	ldr	r3, [pc, #220]	; (8002f84 <HAL_SPI_MspInit+0x160>)
 8002ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002eb4:	2318      	movs	r3, #24
 8002eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ecc:	2305      	movs	r3, #5
 8002ece:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	482b      	ldr	r0, [pc, #172]	; (8002f88 <HAL_SPI_MspInit+0x164>)
 8002eda:	f006 f9ff 	bl	80092dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002ede:	e04a      	b.n	8002f76 <HAL_SPI_MspInit+0x152>
  else if(spiHandle->Instance==SPI2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a29      	ldr	r2, [pc, #164]	; (8002f8c <HAL_SPI_MspInit+0x168>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d145      	bne.n	8002f76 <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002eea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002efa:	f107 0318 	add.w	r3, r7, #24
 8002efe:	4618      	mov	r0, r3
 8002f00:	f008 fa78 	bl	800b3f4 <HAL_RCCEx_PeriphCLKConfig>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_SPI_MspInit+0xea>
      Error_Handler();
 8002f0a:	f7ff f9c3 	bl	8002294 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <HAL_SPI_MspInit+0x160>)
 8002f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f14:	4a1b      	ldr	r2, [pc, #108]	; (8002f84 <HAL_SPI_MspInit+0x160>)
 8002f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f1e:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_SPI_MspInit+0x160>)
 8002f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2c:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <HAL_SPI_MspInit+0x160>)
 8002f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f32:	4a14      	ldr	r2, [pc, #80]	; (8002f84 <HAL_SPI_MspInit+0x160>)
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <HAL_SPI_MspInit+0x160>)
 8002f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	60bb      	str	r3, [r7, #8]
 8002f48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002f4a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f52:	2302      	movs	r3, #2
 8002f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f64:	2305      	movs	r3, #5
 8002f66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f6a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4805      	ldr	r0, [pc, #20]	; (8002f88 <HAL_SPI_MspInit+0x164>)
 8002f72:	f006 f9b3 	bl	80092dc <HAL_GPIO_Init>
}
 8002f76:	bf00      	nop
 8002f78:	37f0      	adds	r7, #240	; 0xf0
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40013000 	.word	0x40013000
 8002f84:	58024400 	.word	0x58024400
 8002f88:	58020400 	.word	0x58020400
 8002f8c:	40003800 	.word	0x40003800

08002f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <HAL_MspInit+0x38>)
 8002f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	; (8002fc8 <HAL_MspInit+0x38>)
 8002f9e:	f043 0302 	orr.w	r3, r3, #2
 8002fa2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002fa6:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <HAL_MspInit+0x38>)
 8002fa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	210f      	movs	r1, #15
 8002fb8:	f06f 0001 	mvn.w	r0, #1
 8002fbc:	f002 ff18 	bl	8005df0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	58024400 	.word	0x58024400

08002fcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b090      	sub	sp, #64	; 0x40
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b0f      	cmp	r3, #15
 8002fd8:	d827      	bhi.n	800302a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	2036      	movs	r0, #54	; 0x36
 8002fe0:	f002 ff06 	bl	8005df0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fe4:	2036      	movs	r0, #54	; 0x36
 8002fe6:	f002 ff1d 	bl	8005e24 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8002fea:	4a29      	ldr	r2, [pc, #164]	; (8003090 <HAL_InitTick+0xc4>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ff0:	4b28      	ldr	r3, [pc, #160]	; (8003094 <HAL_InitTick+0xc8>)
 8002ff2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ff6:	4a27      	ldr	r2, [pc, #156]	; (8003094 <HAL_InitTick+0xc8>)
 8002ff8:	f043 0310 	orr.w	r3, r3, #16
 8002ffc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003000:	4b24      	ldr	r3, [pc, #144]	; (8003094 <HAL_InitTick+0xc8>)
 8003002:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800300e:	f107 0210 	add.w	r2, r7, #16
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f008 f9a9 	bl	800b370 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003020:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <HAL_InitTick+0x6a>
 8003028:	e001      	b.n	800302e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e02b      	b.n	8003086 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800302e:	f008 f973 	bl	800b318 <HAL_RCC_GetPCLK1Freq>
 8003032:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003034:	e004      	b.n	8003040 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003036:	f008 f96f 	bl	800b318 <HAL_RCC_GetPCLK1Freq>
 800303a:	4603      	mov	r3, r0
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003042:	4a15      	ldr	r2, [pc, #84]	; (8003098 <HAL_InitTick+0xcc>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	0c9b      	lsrs	r3, r3, #18
 800304a:	3b01      	subs	r3, #1
 800304c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800304e:	4b13      	ldr	r3, [pc, #76]	; (800309c <HAL_InitTick+0xd0>)
 8003050:	4a13      	ldr	r2, [pc, #76]	; (80030a0 <HAL_InitTick+0xd4>)
 8003052:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <HAL_InitTick+0xd0>)
 8003056:	f240 32e7 	movw	r2, #999	; 0x3e7
 800305a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800305c:	4a0f      	ldr	r2, [pc, #60]	; (800309c <HAL_InitTick+0xd0>)
 800305e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003060:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003062:	4b0e      	ldr	r3, [pc, #56]	; (800309c <HAL_InitTick+0xd0>)
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <HAL_InitTick+0xd0>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800306e:	480b      	ldr	r0, [pc, #44]	; (800309c <HAL_InitTick+0xd0>)
 8003070:	f00b fe31 	bl	800ecd6 <HAL_TIM_Base_Init>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d104      	bne.n	8003084 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800307a:	4808      	ldr	r0, [pc, #32]	; (800309c <HAL_InitTick+0xd0>)
 800307c:	f00b fe82 	bl	800ed84 <HAL_TIM_Base_Start_IT>
 8003080:	4603      	mov	r3, r0
 8003082:	e000      	b.n	8003086 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
}
 8003086:	4618      	mov	r0, r3
 8003088:	3740      	adds	r7, #64	; 0x40
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	24000090 	.word	0x24000090
 8003094:	58024400 	.word	0x58024400
 8003098:	431bde83 	.word	0x431bde83
 800309c:	24000998 	.word	0x24000998
 80030a0:	40001000 	.word	0x40001000

080030a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80030a8:	e7fe      	b.n	80030a8 <NMI_Handler+0x4>

080030aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030aa:	b480      	push	{r7}
 80030ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ae:	e7fe      	b.n	80030ae <HardFault_Handler+0x4>

080030b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b4:	e7fe      	b.n	80030b4 <MemManage_Handler+0x4>

080030b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030b6:	b480      	push	{r7}
 80030b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ba:	e7fe      	b.n	80030ba <BusFault_Handler+0x4>

080030bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030c0:	e7fe      	b.n	80030c0 <UsageFault_Handler+0x4>

080030c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030c2:	b480      	push	{r7}
 80030c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030d4:	4802      	ldr	r0, [pc, #8]	; (80030e0 <DMA1_Stream0_IRQHandler+0x10>)
 80030d6:	f004 fde3 	bl	8007ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	240001e4 	.word	0x240001e4

080030e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80030e8:	4802      	ldr	r0, [pc, #8]	; (80030f4 <DMA1_Stream1_IRQHandler+0x10>)
 80030ea:	f004 fdd9 	bl	8007ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	2400025c 	.word	0x2400025c

080030f8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <DMA1_Stream2_IRQHandler+0x10>)
 80030fe:	f004 fdcf 	bl	8007ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	24000b60 	.word	0x24000b60

0800310c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <DMA1_Stream5_IRQHandler+0x10>)
 8003112:	f004 fdc5 	bl	8007ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	240002e8 	.word	0x240002e8

08003120 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003124:	4802      	ldr	r0, [pc, #8]	; (8003130 <TIM1_BRK_IRQHandler+0x10>)
 8003126:	f00c f944 	bl	800f3b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	240009e8 	.word	0x240009e8

08003134 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003138:	4802      	ldr	r0, [pc, #8]	; (8003144 <TIM1_UP_IRQHandler+0x10>)
 800313a:	f00c f93a 	bl	800f3b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800313e:	bf00      	nop
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	240009e8 	.word	0x240009e8

08003148 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800314c:	4802      	ldr	r0, [pc, #8]	; (8003158 <TIM1_TRG_COM_IRQHandler+0x10>)
 800314e:	f00c f930 	bl	800f3b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	240009e8 	.word	0x240009e8

0800315c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003160:	4802      	ldr	r0, [pc, #8]	; (800316c <TIM1_CC_IRQHandler+0x10>)
 8003162:	f00c f926 	bl	800f3b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	240009e8 	.word	0x240009e8

08003170 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003174:	4802      	ldr	r0, [pc, #8]	; (8003180 <TIM2_IRQHandler+0x10>)
 8003176:	f00c f91c 	bl	800f3b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	24000a34 	.word	0x24000a34

08003184 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003188:	4802      	ldr	r0, [pc, #8]	; (8003194 <TIM3_IRQHandler+0x10>)
 800318a:	f00c f912 	bl	800f3b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	24000a80 	.word	0x24000a80

08003198 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <USART1_IRQHandler+0x10>)
 800319e:	f00d fccb 	bl	8010b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	24000acc 	.word	0x24000acc

080031ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <TIM6_DAC_IRQHandler+0x20>)
 80031b2:	791b      	ldrb	r3, [r3, #4]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d002      	beq.n	80031c0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80031ba:	4804      	ldr	r0, [pc, #16]	; (80031cc <TIM6_DAC_IRQHandler+0x20>)
 80031bc:	f002 ffc7 	bl	800614e <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80031c0:	4803      	ldr	r0, [pc, #12]	; (80031d0 <TIM6_DAC_IRQHandler+0x24>)
 80031c2:	f00c f8f6 	bl	800f3b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	240002d4 	.word	0x240002d4
 80031d0:	24000998 	.word	0x24000998

080031d4 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 80031de:	4b0f      	ldr	r3, [pc, #60]	; (800321c <ITM_SendChar+0x48>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a0e      	ldr	r2, [pc, #56]	; (800321c <ITM_SendChar+0x48>)
 80031e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e8:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <ITM_SendChar+0x4c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a0c      	ldr	r2, [pc, #48]	; (8003220 <ITM_SendChar+0x4c>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 80031f6:	bf00      	nop
 80031f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f8      	beq.n	80031f8 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8003206:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	6013      	str	r3, [r2, #0]
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000edfc 	.word	0xe000edfc
 8003220:	e0000e00 	.word	0xe0000e00

08003224 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	e00a      	b.n	800324c <_read+0x28>
		*ptr++ = __io_getchar();
 8003236:	f3af 8000 	nop.w
 800323a:	4601      	mov	r1, r0
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	1c5a      	adds	r2, r3, #1
 8003240:	60ba      	str	r2, [r7, #8]
 8003242:	b2ca      	uxtb	r2, r1
 8003244:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	3301      	adds	r3, #1
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	429a      	cmp	r2, r3
 8003252:	dbf0      	blt.n	8003236 <_read+0x12>
	}

	return len;
 8003254:	687b      	ldr	r3, [r7, #4]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800326a:	2300      	movs	r3, #0
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	e009      	b.n	8003284 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	60ba      	str	r2, [r7, #8]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ffab 	bl	80031d4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	3301      	adds	r3, #1
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	429a      	cmp	r2, r3
 800328a:	dbf1      	blt.n	8003270 <_write+0x12>
	}
	return len;
 800328c:	687b      	ldr	r3, [r7, #4]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <_close>:

int _close(int file) {
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800329e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <_fstat>:

int _fstat(int file, struct stat *st) {
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032be:	605a      	str	r2, [r3, #4]
	return 0;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <_isatty>:

int _isatty(int file) {
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 80032d6:	2301      	movs	r3, #1
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8003308:	4a14      	ldr	r2, [pc, #80]	; (800335c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8003314:	4b13      	ldr	r3, [pc, #76]	; (8003364 <_sbrk+0x64>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d102      	bne.n	8003322 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800331c:	4b11      	ldr	r3, [pc, #68]	; (8003364 <_sbrk+0x64>)
 800331e:	4a12      	ldr	r2, [pc, #72]	; (8003368 <_sbrk+0x68>)
 8003320:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8003322:	4b10      	ldr	r3, [pc, #64]	; (8003364 <_sbrk+0x64>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	429a      	cmp	r2, r3
 800332e:	d207      	bcs.n	8003340 <_sbrk+0x40>
		errno = ENOMEM;
 8003330:	f013 fcac 	bl	8016c8c <__errno>
 8003334:	4603      	mov	r3, r0
 8003336:	220c      	movs	r2, #12
 8003338:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800333a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800333e:	e009      	b.n	8003354 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8003340:	4b08      	ldr	r3, [pc, #32]	; (8003364 <_sbrk+0x64>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <_sbrk+0x64>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4413      	add	r3, r2
 800334e:	4a05      	ldr	r2, [pc, #20]	; (8003364 <_sbrk+0x64>)
 8003350:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8003352:	68fb      	ldr	r3, [r7, #12]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	24080000 	.word	0x24080000
 8003360:	00000400 	.word	0x00000400
 8003364:	240009e4 	.word	0x240009e4
 8003368:	240055f0 	.word	0x240055f0

0800336c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003370:	4b37      	ldr	r3, [pc, #220]	; (8003450 <SystemInit+0xe4>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	4a36      	ldr	r2, [pc, #216]	; (8003450 <SystemInit+0xe4>)
 8003378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800337c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003380:	4b34      	ldr	r3, [pc, #208]	; (8003454 <SystemInit+0xe8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	2b06      	cmp	r3, #6
 800338a:	d807      	bhi.n	800339c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800338c:	4b31      	ldr	r3, [pc, #196]	; (8003454 <SystemInit+0xe8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 030f 	bic.w	r3, r3, #15
 8003394:	4a2f      	ldr	r2, [pc, #188]	; (8003454 <SystemInit+0xe8>)
 8003396:	f043 0307 	orr.w	r3, r3, #7
 800339a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 800339c:	4b2e      	ldr	r3, [pc, #184]	; (8003458 <SystemInit+0xec>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2d      	ldr	r2, [pc, #180]	; (8003458 <SystemInit+0xec>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80033a8:	4b2b      	ldr	r3, [pc, #172]	; (8003458 <SystemInit+0xec>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80033ae:	4b2a      	ldr	r3, [pc, #168]	; (8003458 <SystemInit+0xec>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	4929      	ldr	r1, [pc, #164]	; (8003458 <SystemInit+0xec>)
 80033b4:	4b29      	ldr	r3, [pc, #164]	; (800345c <SystemInit+0xf0>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80033ba:	4b26      	ldr	r3, [pc, #152]	; (8003454 <SystemInit+0xe8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d007      	beq.n	80033d6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80033c6:	4b23      	ldr	r3, [pc, #140]	; (8003454 <SystemInit+0xe8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 030f 	bic.w	r3, r3, #15
 80033ce:	4a21      	ldr	r2, [pc, #132]	; (8003454 <SystemInit+0xe8>)
 80033d0:	f043 0307 	orr.w	r3, r3, #7
 80033d4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <SystemInit+0xec>)
 80033d8:	2200      	movs	r2, #0
 80033da:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80033dc:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <SystemInit+0xec>)
 80033de:	2200      	movs	r2, #0
 80033e0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80033e2:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <SystemInit+0xec>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80033e8:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <SystemInit+0xec>)
 80033ea:	4a1d      	ldr	r2, [pc, #116]	; (8003460 <SystemInit+0xf4>)
 80033ec:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80033ee:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <SystemInit+0xec>)
 80033f0:	4a1c      	ldr	r2, [pc, #112]	; (8003464 <SystemInit+0xf8>)
 80033f2:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80033f4:	4b18      	ldr	r3, [pc, #96]	; (8003458 <SystemInit+0xec>)
 80033f6:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <SystemInit+0xfc>)
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80033fa:	4b17      	ldr	r3, [pc, #92]	; (8003458 <SystemInit+0xec>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003400:	4b15      	ldr	r3, [pc, #84]	; (8003458 <SystemInit+0xec>)
 8003402:	4a19      	ldr	r2, [pc, #100]	; (8003468 <SystemInit+0xfc>)
 8003404:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003406:	4b14      	ldr	r3, [pc, #80]	; (8003458 <SystemInit+0xec>)
 8003408:	2200      	movs	r2, #0
 800340a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800340c:	4b12      	ldr	r3, [pc, #72]	; (8003458 <SystemInit+0xec>)
 800340e:	4a16      	ldr	r2, [pc, #88]	; (8003468 <SystemInit+0xfc>)
 8003410:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <SystemInit+0xec>)
 8003414:	2200      	movs	r2, #0
 8003416:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <SystemInit+0xec>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a0e      	ldr	r2, [pc, #56]	; (8003458 <SystemInit+0xec>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003422:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <SystemInit+0xec>)
 8003426:	2200      	movs	r2, #0
 8003428:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <SystemInit+0x100>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <SystemInit+0x104>)
 8003430:	4013      	ands	r3, r2
 8003432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003436:	d202      	bcs.n	800343e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003438:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <SystemInit+0x108>)
 800343a:	2201      	movs	r2, #1
 800343c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <SystemInit+0x10c>)
 8003440:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003444:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003446:	bf00      	nop
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	e000ed00 	.word	0xe000ed00
 8003454:	52002000 	.word	0x52002000
 8003458:	58024400 	.word	0x58024400
 800345c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003460:	02020200 	.word	0x02020200
 8003464:	01ff0000 	.word	0x01ff0000
 8003468:	01010280 	.word	0x01010280
 800346c:	5c001000 	.word	0x5c001000
 8003470:	ffff0000 	.word	0xffff0000
 8003474:	51008108 	.word	0x51008108
 8003478:	52004000 	.word	0x52004000

0800347c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b09a      	sub	sp, #104	; 0x68
 8003480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003482:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003490:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800349c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	60da      	str	r2, [r3, #12]
 80034aa:	611a      	str	r2, [r3, #16]
 80034ac:	615a      	str	r2, [r3, #20]
 80034ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80034b0:	1d3b      	adds	r3, r7, #4
 80034b2:	222c      	movs	r2, #44	; 0x2c
 80034b4:	2100      	movs	r1, #0
 80034b6:	4618      	mov	r0, r3
 80034b8:	f013 fc30 	bl	8016d1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80034bc:	4b44      	ldr	r3, [pc, #272]	; (80035d0 <MX_TIM1_Init+0x154>)
 80034be:	4a45      	ldr	r2, [pc, #276]	; (80035d4 <MX_TIM1_Init+0x158>)
 80034c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80034c2:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <MX_TIM1_Init+0x154>)
 80034c4:	2263      	movs	r2, #99	; 0x63
 80034c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c8:	4b41      	ldr	r3, [pc, #260]	; (80035d0 <MX_TIM1_Init+0x154>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 80034ce:	4b40      	ldr	r3, [pc, #256]	; (80035d0 <MX_TIM1_Init+0x154>)
 80034d0:	f24f 4223 	movw	r2, #62499	; 0xf423
 80034d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034d6:	4b3e      	ldr	r3, [pc, #248]	; (80035d0 <MX_TIM1_Init+0x154>)
 80034d8:	2200      	movs	r2, #0
 80034da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80034dc:	4b3c      	ldr	r3, [pc, #240]	; (80035d0 <MX_TIM1_Init+0x154>)
 80034de:	2200      	movs	r2, #0
 80034e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034e2:	4b3b      	ldr	r3, [pc, #236]	; (80035d0 <MX_TIM1_Init+0x154>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80034e8:	4839      	ldr	r0, [pc, #228]	; (80035d0 <MX_TIM1_Init+0x154>)
 80034ea:	f00b fbf4 	bl	800ecd6 <HAL_TIM_Base_Init>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80034f4:	f7fe fece 	bl	8002294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034fc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80034fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003502:	4619      	mov	r1, r3
 8003504:	4832      	ldr	r0, [pc, #200]	; (80035d0 <MX_TIM1_Init+0x154>)
 8003506:	f00c f96f 	bl	800f7e8 <HAL_TIM_ConfigClockSource>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003510:	f7fe fec0 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003514:	482e      	ldr	r0, [pc, #184]	; (80035d0 <MX_TIM1_Init+0x154>)
 8003516:	f00b feeb 	bl	800f2f0 <HAL_TIM_PWM_Init>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003520:	f7fe feb8 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003524:	2300      	movs	r3, #0
 8003526:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003528:	2300      	movs	r3, #0
 800352a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800352c:	2300      	movs	r3, #0
 800352e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003530:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003534:	4619      	mov	r1, r3
 8003536:	4826      	ldr	r0, [pc, #152]	; (80035d0 <MX_TIM1_Init+0x154>)
 8003538:	f00c feac 	bl	8010294 <HAL_TIMEx_MasterConfigSynchronization>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003542:	f7fe fea7 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003546:	2360      	movs	r3, #96	; 0x60
 8003548:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 800354a:	f240 13df 	movw	r3, #479	; 0x1df
 800354e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003550:	2300      	movs	r3, #0
 8003552:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003554:	2300      	movs	r3, #0
 8003556:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003558:	2300      	movs	r3, #0
 800355a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800355c:	2300      	movs	r3, #0
 800355e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003560:	2300      	movs	r3, #0
 8003562:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003564:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003568:	2200      	movs	r2, #0
 800356a:	4619      	mov	r1, r3
 800356c:	4818      	ldr	r0, [pc, #96]	; (80035d0 <MX_TIM1_Init+0x154>)
 800356e:	f00c f827 	bl	800f5c0 <HAL_TIM_PWM_ConfigChannel>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003578:	f7fe fe8c 	bl	8002294 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800357c:	2300      	movs	r3, #0
 800357e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003580:	2300      	movs	r3, #0
 8003582:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003594:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800359a:	2300      	movs	r3, #0
 800359c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800359e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	4619      	mov	r1, r3
 80035b0:	4807      	ldr	r0, [pc, #28]	; (80035d0 <MX_TIM1_Init+0x154>)
 80035b2:	f00c fefd 	bl	80103b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80035bc:	f7fe fe6a 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80035c0:	4803      	ldr	r0, [pc, #12]	; (80035d0 <MX_TIM1_Init+0x154>)
 80035c2:	f000 f949 	bl	8003858 <HAL_TIM_MspPostInit>

}
 80035c6:	bf00      	nop
 80035c8:	3768      	adds	r7, #104	; 0x68
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	240009e8 	.word	0x240009e8
 80035d4:	40010000 	.word	0x40010000

080035d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08e      	sub	sp, #56	; 0x38
 80035dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	609a      	str	r2, [r3, #8]
 80035ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035ec:	f107 031c 	add.w	r3, r7, #28
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035f8:	463b      	mov	r3, r7
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	609a      	str	r2, [r3, #8]
 8003602:	60da      	str	r2, [r3, #12]
 8003604:	611a      	str	r2, [r3, #16]
 8003606:	615a      	str	r2, [r3, #20]
 8003608:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800360a:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <MX_TIM2_Init+0xe8>)
 800360c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003610:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8003612:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <MX_TIM2_Init+0xe8>)
 8003614:	2263      	movs	r2, #99	; 0x63
 8003616:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003618:	4b29      	ldr	r3, [pc, #164]	; (80036c0 <MX_TIM2_Init+0xe8>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800361e:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <MX_TIM2_Init+0xe8>)
 8003620:	f640 4234 	movw	r2, #3124	; 0xc34
 8003624:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003626:	4b26      	ldr	r3, [pc, #152]	; (80036c0 <MX_TIM2_Init+0xe8>)
 8003628:	2200      	movs	r2, #0
 800362a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800362c:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <MX_TIM2_Init+0xe8>)
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003632:	4823      	ldr	r0, [pc, #140]	; (80036c0 <MX_TIM2_Init+0xe8>)
 8003634:	f00b fb4f 	bl	800ecd6 <HAL_TIM_Base_Init>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800363e:	f7fe fe29 	bl	8002294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003648:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800364c:	4619      	mov	r1, r3
 800364e:	481c      	ldr	r0, [pc, #112]	; (80036c0 <MX_TIM2_Init+0xe8>)
 8003650:	f00c f8ca 	bl	800f7e8 <HAL_TIM_ConfigClockSource>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800365a:	f7fe fe1b 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800365e:	4818      	ldr	r0, [pc, #96]	; (80036c0 <MX_TIM2_Init+0xe8>)
 8003660:	f00b fe46 	bl	800f2f0 <HAL_TIM_PWM_Init>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800366a:	f7fe fe13 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800366e:	2320      	movs	r3, #32
 8003670:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003672:	2300      	movs	r3, #0
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003676:	f107 031c 	add.w	r3, r7, #28
 800367a:	4619      	mov	r1, r3
 800367c:	4810      	ldr	r0, [pc, #64]	; (80036c0 <MX_TIM2_Init+0xe8>)
 800367e:	f00c fe09 	bl	8010294 <HAL_TIMEx_MasterConfigSynchronization>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003688:	f7fe fe04 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800368c:	2360      	movs	r3, #96	; 0x60
 800368e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003694:	2300      	movs	r3, #0
 8003696:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003698:	2300      	movs	r3, #0
 800369a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800369c:	463b      	mov	r3, r7
 800369e:	220c      	movs	r2, #12
 80036a0:	4619      	mov	r1, r3
 80036a2:	4807      	ldr	r0, [pc, #28]	; (80036c0 <MX_TIM2_Init+0xe8>)
 80036a4:	f00b ff8c 	bl	800f5c0 <HAL_TIM_PWM_ConfigChannel>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80036ae:	f7fe fdf1 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80036b2:	4803      	ldr	r0, [pc, #12]	; (80036c0 <MX_TIM2_Init+0xe8>)
 80036b4:	f000 f8d0 	bl	8003858 <HAL_TIM_MspPostInit>

}
 80036b8:	bf00      	nop
 80036ba:	3738      	adds	r7, #56	; 0x38
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	24000a34 	.word	0x24000a34

080036c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ca:	f107 0310 	add.w	r3, r7, #16
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	605a      	str	r2, [r3, #4]
 80036d4:	609a      	str	r2, [r3, #8]
 80036d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036e2:	4b1d      	ldr	r3, [pc, #116]	; (8003758 <MX_TIM3_Init+0x94>)
 80036e4:	4a1d      	ldr	r2, [pc, #116]	; (800375c <MX_TIM3_Init+0x98>)
 80036e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 80036e8:	4b1b      	ldr	r3, [pc, #108]	; (8003758 <MX_TIM3_Init+0x94>)
 80036ea:	22c7      	movs	r2, #199	; 0xc7
 80036ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ee:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <MX_TIM3_Init+0x94>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 80036f4:	4b18      	ldr	r3, [pc, #96]	; (8003758 <MX_TIM3_Init+0x94>)
 80036f6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80036fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036fc:	4b16      	ldr	r3, [pc, #88]	; (8003758 <MX_TIM3_Init+0x94>)
 80036fe:	2200      	movs	r2, #0
 8003700:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003702:	4b15      	ldr	r3, [pc, #84]	; (8003758 <MX_TIM3_Init+0x94>)
 8003704:	2200      	movs	r2, #0
 8003706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003708:	4813      	ldr	r0, [pc, #76]	; (8003758 <MX_TIM3_Init+0x94>)
 800370a:	f00b fae4 	bl	800ecd6 <HAL_TIM_Base_Init>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003714:	f7fe fdbe 	bl	8002294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800371c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800371e:	f107 0310 	add.w	r3, r7, #16
 8003722:	4619      	mov	r1, r3
 8003724:	480c      	ldr	r0, [pc, #48]	; (8003758 <MX_TIM3_Init+0x94>)
 8003726:	f00c f85f 	bl	800f7e8 <HAL_TIM_ConfigClockSource>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003730:	f7fe fdb0 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003734:	2300      	movs	r3, #0
 8003736:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003738:	2300      	movs	r3, #0
 800373a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800373c:	1d3b      	adds	r3, r7, #4
 800373e:	4619      	mov	r1, r3
 8003740:	4805      	ldr	r0, [pc, #20]	; (8003758 <MX_TIM3_Init+0x94>)
 8003742:	f00c fda7 	bl	8010294 <HAL_TIMEx_MasterConfigSynchronization>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800374c:	f7fe fda2 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003750:	bf00      	nop
 8003752:	3720      	adds	r7, #32
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	24000a80 	.word	0x24000a80
 800375c:	40000400 	.word	0x40000400

08003760 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a37      	ldr	r2, [pc, #220]	; (800384c <HAL_TIM_Base_MspInit+0xec>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d12f      	bne.n	80037d2 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003772:	4b37      	ldr	r3, [pc, #220]	; (8003850 <HAL_TIM_Base_MspInit+0xf0>)
 8003774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003778:	4a35      	ldr	r2, [pc, #212]	; (8003850 <HAL_TIM_Base_MspInit+0xf0>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003782:	4b33      	ldr	r3, [pc, #204]	; (8003850 <HAL_TIM_Base_MspInit+0xf0>)
 8003784:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8003790:	2200      	movs	r2, #0
 8003792:	2105      	movs	r1, #5
 8003794:	2018      	movs	r0, #24
 8003796:	f002 fb2b 	bl	8005df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800379a:	2018      	movs	r0, #24
 800379c:	f002 fb42 	bl	8005e24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80037a0:	2200      	movs	r2, #0
 80037a2:	2105      	movs	r1, #5
 80037a4:	2019      	movs	r0, #25
 80037a6:	f002 fb23 	bl	8005df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80037aa:	2019      	movs	r0, #25
 80037ac:	f002 fb3a 	bl	8005e24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80037b0:	2200      	movs	r2, #0
 80037b2:	2105      	movs	r1, #5
 80037b4:	201a      	movs	r0, #26
 80037b6:	f002 fb1b 	bl	8005df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80037ba:	201a      	movs	r0, #26
 80037bc:	f002 fb32 	bl	8005e24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	2105      	movs	r1, #5
 80037c4:	201b      	movs	r0, #27
 80037c6:	f002 fb13 	bl	8005df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80037ca:	201b      	movs	r0, #27
 80037cc:	f002 fb2a 	bl	8005e24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80037d0:	e038      	b.n	8003844 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037da:	d117      	bne.n	800380c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037dc:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <HAL_TIM_Base_MspInit+0xf0>)
 80037de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037e2:	4a1b      	ldr	r2, [pc, #108]	; (8003850 <HAL_TIM_Base_MspInit+0xf0>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037ec:	4b18      	ldr	r3, [pc, #96]	; (8003850 <HAL_TIM_Base_MspInit+0xf0>)
 80037ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80037fa:	2200      	movs	r2, #0
 80037fc:	2105      	movs	r1, #5
 80037fe:	201c      	movs	r0, #28
 8003800:	f002 faf6 	bl	8005df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003804:	201c      	movs	r0, #28
 8003806:	f002 fb0d 	bl	8005e24 <HAL_NVIC_EnableIRQ>
}
 800380a:	e01b      	b.n	8003844 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a10      	ldr	r2, [pc, #64]	; (8003854 <HAL_TIM_Base_MspInit+0xf4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d116      	bne.n	8003844 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003816:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <HAL_TIM_Base_MspInit+0xf0>)
 8003818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800381c:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <HAL_TIM_Base_MspInit+0xf0>)
 800381e:	f043 0302 	orr.w	r3, r3, #2
 8003822:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_TIM_Base_MspInit+0xf0>)
 8003828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	60fb      	str	r3, [r7, #12]
 8003832:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003834:	2200      	movs	r2, #0
 8003836:	2105      	movs	r1, #5
 8003838:	201d      	movs	r0, #29
 800383a:	f002 fad9 	bl	8005df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800383e:	201d      	movs	r0, #29
 8003840:	f002 faf0 	bl	8005e24 <HAL_NVIC_EnableIRQ>
}
 8003844:	bf00      	nop
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40010000 	.word	0x40010000
 8003850:	58024400 	.word	0x58024400
 8003854:	40000400 	.word	0x40000400

08003858 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	; 0x28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003860:	f107 0314 	add.w	r3, r7, #20
 8003864:	2200      	movs	r2, #0
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	609a      	str	r2, [r3, #8]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a26      	ldr	r2, [pc, #152]	; (8003910 <HAL_TIM_MspPostInit+0xb8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d120      	bne.n	80038bc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800387a:	4b26      	ldr	r3, [pc, #152]	; (8003914 <HAL_TIM_MspPostInit+0xbc>)
 800387c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003880:	4a24      	ldr	r2, [pc, #144]	; (8003914 <HAL_TIM_MspPostInit+0xbc>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800388a:	4b22      	ldr	r3, [pc, #136]	; (8003914 <HAL_TIM_MspPostInit+0xbc>)
 800388c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800389c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389e:	2302      	movs	r3, #2
 80038a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a6:	2300      	movs	r3, #0
 80038a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038aa:	2301      	movs	r3, #1
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ae:	f107 0314 	add.w	r3, r7, #20
 80038b2:	4619      	mov	r1, r3
 80038b4:	4818      	ldr	r0, [pc, #96]	; (8003918 <HAL_TIM_MspPostInit+0xc0>)
 80038b6:	f005 fd11 	bl	80092dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80038ba:	e024      	b.n	8003906 <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c4:	d11f      	bne.n	8003906 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038c6:	4b13      	ldr	r3, [pc, #76]	; (8003914 <HAL_TIM_MspPostInit+0xbc>)
 80038c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038cc:	4a11      	ldr	r2, [pc, #68]	; (8003914 <HAL_TIM_MspPostInit+0xbc>)
 80038ce:	f043 0302 	orr.w	r3, r3, #2
 80038d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038d6:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <HAL_TIM_MspPostInit+0xbc>)
 80038d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80038e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ea:	2302      	movs	r3, #2
 80038ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f2:	2300      	movs	r3, #0
 80038f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038f6:	2301      	movs	r3, #1
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038fa:	f107 0314 	add.w	r3, r7, #20
 80038fe:	4619      	mov	r1, r3
 8003900:	4806      	ldr	r0, [pc, #24]	; (800391c <HAL_TIM_MspPostInit+0xc4>)
 8003902:	f005 fceb 	bl	80092dc <HAL_GPIO_Init>
}
 8003906:	bf00      	nop
 8003908:	3728      	adds	r7, #40	; 0x28
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40010000 	.word	0x40010000
 8003914:	58024400 	.word	0x58024400
 8003918:	58020000 	.word	0x58020000
 800391c:	58020400 	.word	0x58020400

08003920 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
	uint32_t ms = uptime_millis;
 800392c:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <get_uptime+0x88>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	617b      	str	r3, [r7, #20]
	uint32_t st = SysTick->VAL;
 8003932:	4b1e      	ldr	r3, [pc, #120]	; (80039ac <get_uptime+0x8c>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	613b      	str	r3, [r7, #16]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 8003938:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <get_uptime+0x88>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	429a      	cmp	r2, r3
 8003940:	d005      	beq.n	800394e <get_uptime+0x2e>
		ms = uptime_millis;
 8003942:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <get_uptime+0x88>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	617b      	str	r3, [r7, #20]
		st = SysTick->VAL;
 8003948:	4b18      	ldr	r3, [pc, #96]	; (80039ac <get_uptime+0x8c>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	613b      	str	r3, [r7, #16]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003954:	fb03 f202 	mul.w	r2, r3, r2
 8003958:	4b14      	ldr	r3, [pc, #80]	; (80039ac <get_uptime+0x8c>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	3301      	adds	r3, #1
 800395e:	4914      	ldr	r1, [pc, #80]	; (80039b0 <get_uptime+0x90>)
 8003960:	fba1 1303 	umull	r1, r3, r1, r3
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	6939      	ldr	r1, [r7, #16]
 8003968:	fbb1 f3f3 	udiv	r3, r1, r3
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	60fb      	str	r3, [r7, #12]

	buffer[0] = ((uptime >> 24) & 0xFF);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	0e1b      	lsrs	r3, r3, #24
 8003974:	b2da      	uxtb	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	0c1a      	lsrs	r2, r3, #16
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3301      	adds	r3, #1
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	0a1a      	lsrs	r2, r3, #8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3302      	adds	r3, #2
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3303      	adds	r3, #3
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	701a      	strb	r2, [r3, #0]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	24000818 	.word	0x24000818
 80039ac:	e000e010 	.word	0xe000e010
 80039b0:	10624dd3 	.word	0x10624dd3

080039b4 <get_timestamp>:

void get_timestamp(uint8_t *buffer) {
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	; 0x28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 80039bc:	f107 0310 	add.w	r3, r7, #16
 80039c0:	2200      	movs	r2, #0
 80039c2:	4619      	mov	r1, r3
 80039c4:	4821      	ldr	r0, [pc, #132]	; (8003a4c <get_timestamp+0x98>)
 80039c6:	f00a fb33 	bl	800e030 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 80039ca:	f107 030c 	add.w	r3, r7, #12
 80039ce:	2200      	movs	r2, #0
 80039d0:	4619      	mov	r1, r3
 80039d2:	481e      	ldr	r0, [pc, #120]	; (8003a4c <get_timestamp+0x98>)
 80039d4:	f00a fc10 	bl	800e1f8 <HAL_RTC_GetDate>
	uint32_t milliseconds = 1000000 - (current_time.SubSeconds * 100);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2264      	movs	r2, #100	; 0x64
 80039dc:	fb03 f202 	mul.w	r2, r3, r2
 80039e0:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <get_timestamp+0x9c>)
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = current_date.Year;				// 0-99
 80039e6:	7bfa      	ldrb	r2, [r7, #15]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	701a      	strb	r2, [r3, #0]
	buffer[1] = current_date.Month;				// 1-12
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3301      	adds	r3, #1
 80039f0:	7b7a      	ldrb	r2, [r7, #13]
 80039f2:	701a      	strb	r2, [r3, #0]
	buffer[2] = current_date.Date;				// 1-31
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3302      	adds	r3, #2
 80039f8:	7bba      	ldrb	r2, [r7, #14]
 80039fa:	701a      	strb	r2, [r3, #0]
	buffer[3] = current_time.Hours;				// 0-23
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3303      	adds	r3, #3
 8003a00:	7c3a      	ldrb	r2, [r7, #16]
 8003a02:	701a      	strb	r2, [r3, #0]
	buffer[4] = current_time.Minutes;			// 0-59
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	7c7a      	ldrb	r2, [r7, #17]
 8003a0a:	701a      	strb	r2, [r3, #0]
	buffer[5] = current_time.Seconds;			// 0-59
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3305      	adds	r3, #5
 8003a10:	7cba      	ldrb	r2, [r7, #18]
 8003a12:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	0e1a      	lsrs	r2, r3, #24
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3306      	adds	r3, #6
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	0c1a      	lsrs	r2, r3, #16
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3307      	adds	r3, #7
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	0a1a      	lsrs	r2, r3, #8
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3308      	adds	r3, #8
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3309      	adds	r3, #9
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]
}
 8003a42:	bf00      	nop
 8003a44:	3728      	adds	r7, #40	; 0x28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	24000828 	.word	0x24000828
 8003a50:	000f4240 	.word	0x000f4240

08003a54 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	; 0x30
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	785b      	ldrb	r3, [r3, #1]
 8003a60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	789b      	ldrb	r3, [r3, #2]
 8003a68:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	78db      	ldrb	r3, [r3, #3]
 8003a70:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	791b      	ldrb	r3, [r3, #4]
 8003a78:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	795b      	ldrb	r3, [r3, #5]
 8003a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	799b      	ldrb	r3, [r3, #6]
 8003a88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3307      	adds	r3, #7
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	b21a      	sxth	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3308      	adds	r3, #8
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	b21b      	sxth	r3, r3
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	b21b      	sxth	r3, r3
 8003aa2:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8003aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8003aac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003ab0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8003ab4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8003abc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ac0:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8003ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ac6:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8003ac8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003acc:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 8003ace:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ad0:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8003ad2:	f107 0320 	add.w	r3, r7, #32
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	4619      	mov	r1, r3
 8003ada:	480b      	ldr	r0, [pc, #44]	; (8003b08 <calibrateRTC+0xb4>)
 8003adc:	f00a fb04 	bl	800e0e8 <HAL_RTC_SetDate>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8003ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <calibrateRTC+0x9e>
		Error_Handler();
 8003aee:	f7fe fbd1 	bl	8002294 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8003af2:	f107 030c 	add.w	r3, r7, #12
 8003af6:	2200      	movs	r2, #0
 8003af8:	4619      	mov	r1, r3
 8003afa:	4803      	ldr	r0, [pc, #12]	; (8003b08 <calibrateRTC+0xb4>)
 8003afc:	f000 f806 	bl	8003b0c <RTC_SetTime>
}
 8003b00:	bf00      	nop
 8003b02:	3730      	adds	r7, #48	; 0x30
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	24000828 	.word	0x24000828

08003b0c <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 8003b0c:	b590      	push	{r4, r7, lr}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <RTC_SetTime+0x1a>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e051      	b.n	8003bca <RTC_SetTime+0xbe>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2202      	movs	r2, #2
 8003b32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	22ca      	movs	r2, #202	; 0xca
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2253      	movs	r2, #83	; 0x53
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f00a fbc8 	bl	800e2dc <RTC_EnterInitMode>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d129      	bne.n	8003baa <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f00a fc2d 	bl	800e3c0 <RTC_ByteToBcd2>
 8003b66:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8003b68:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	785b      	ldrb	r3, [r3, #1]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f00a fc26 	bl	800e3c0 <RTC_ByteToBcd2>
 8003b74:	4603      	mov	r3, r0
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	789b      	ldrb	r3, [r3, #2]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f00a fc1e 	bl	800e3c0 <RTC_ByteToBcd2>
 8003b84:	4603      	mov	r3, r0
 8003b86:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	78db      	ldrb	r3, [r3, #3]
 8003b8e:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	6939      	ldr	r1, [r7, #16]
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <RTC_SetTime+0xc8>)
 8003b9c:	400b      	ands	r3, r1
 8003b9e:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f00a fbcf 	bl	800e344 <RTC_ExitInitMode>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	22ff      	movs	r2, #255	; 0xff
 8003bb0:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d103      	bne.n	8003bc0 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]

}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd90      	pop	{r4, r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	007f7f7f 	.word	0x007f7f7f

08003bd8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003bdc:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003bde:	4a31      	ldr	r2, [pc, #196]	; (8003ca4 <MX_USART1_UART_Init+0xcc>)
 8003be0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8003be2:	4b2f      	ldr	r3, [pc, #188]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003be4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8003be8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bea:	4b2d      	ldr	r3, [pc, #180]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bf0:	4b2b      	ldr	r3, [pc, #172]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bf6:	4b2a      	ldr	r3, [pc, #168]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bfc:	4b28      	ldr	r3, [pc, #160]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003bfe:	220c      	movs	r2, #12
 8003c00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c02:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c0e:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c14:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c1a:	4b21      	ldr	r3, [pc, #132]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c20:	481f      	ldr	r0, [pc, #124]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c22:	f00c fc61 	bl	80104e8 <HAL_UART_Init>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003c2c:	f7fe fb32 	bl	8002294 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c30:	2100      	movs	r1, #0
 8003c32:	481b      	ldr	r0, [pc, #108]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c34:	f00f fb01 	bl	801323a <HAL_UARTEx_SetTxFifoThreshold>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003c3e:	f7fe fb29 	bl	8002294 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c42:	2100      	movs	r1, #0
 8003c44:	4816      	ldr	r0, [pc, #88]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c46:	f00f fb36 	bl	80132b6 <HAL_UARTEx_SetRxFifoThreshold>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003c50:	f7fe fb20 	bl	8002294 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003c54:	4812      	ldr	r0, [pc, #72]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c56:	f00f fab7 	bl	80131c8 <HAL_UARTEx_DisableFifoMode>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003c60:	f7fe fb18 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8003c64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c68:	480d      	ldr	r0, [pc, #52]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c6a:	f00f fb24 	bl	80132b6 <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8003c6e:	480c      	ldr	r0, [pc, #48]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c70:	f00f fa6f 	bl	8013152 <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8003c74:	480a      	ldr	r0, [pc, #40]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c76:	f00f fa39 	bl	80130ec <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8003c7a:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	4b07      	ldr	r3, [pc, #28]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c88:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	4b03      	ldr	r3, [pc, #12]	; (8003ca0 <MX_USART1_UART_Init+0xc8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003c98:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	24000acc 	.word	0x24000acc
 8003ca4:	40011000 	.word	0x40011000

08003ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b0ba      	sub	sp, #232	; 0xe8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
 8003cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cc0:	f107 0310 	add.w	r3, r7, #16
 8003cc4:	22c0      	movs	r2, #192	; 0xc0
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f013 f827 	bl	8016d1c <memset>
  if(uartHandle->Instance==USART1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a41      	ldr	r2, [pc, #260]	; (8003dd8 <HAL_UART_MspInit+0x130>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d17b      	bne.n	8003dd0 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003cd8:	f04f 0201 	mov.w	r2, #1
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8003ce4:	2318      	movs	r3, #24
 8003ce6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cea:	f107 0310 	add.w	r3, r7, #16
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f007 fb80 	bl	800b3f4 <HAL_RCCEx_PeriphCLKConfig>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003cfa:	f7fe facb 	bl	8002294 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003cfe:	4b37      	ldr	r3, [pc, #220]	; (8003ddc <HAL_UART_MspInit+0x134>)
 8003d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d04:	4a35      	ldr	r2, [pc, #212]	; (8003ddc <HAL_UART_MspInit+0x134>)
 8003d06:	f043 0310 	orr.w	r3, r3, #16
 8003d0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d0e:	4b33      	ldr	r3, [pc, #204]	; (8003ddc <HAL_UART_MspInit+0x134>)
 8003d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d1c:	4b2f      	ldr	r3, [pc, #188]	; (8003ddc <HAL_UART_MspInit+0x134>)
 8003d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d22:	4a2e      	ldr	r2, [pc, #184]	; (8003ddc <HAL_UART_MspInit+0x134>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d2c:	4b2b      	ldr	r3, [pc, #172]	; (8003ddc <HAL_UART_MspInit+0x134>)
 8003d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003d3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d42:	2302      	movs	r3, #2
 8003d44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d54:	2307      	movs	r3, #7
 8003d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d5a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d5e:	4619      	mov	r1, r3
 8003d60:	481f      	ldr	r0, [pc, #124]	; (8003de0 <HAL_UART_MspInit+0x138>)
 8003d62:	f005 fabb 	bl	80092dc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003d66:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <HAL_UART_MspInit+0x13c>)
 8003d68:	4a1f      	ldr	r2, [pc, #124]	; (8003de8 <HAL_UART_MspInit+0x140>)
 8003d6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_UART_MspInit+0x13c>)
 8003d6e:	222a      	movs	r2, #42	; 0x2a
 8003d70:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d72:	4b1c      	ldr	r3, [pc, #112]	; (8003de4 <HAL_UART_MspInit+0x13c>)
 8003d74:	2240      	movs	r2, #64	; 0x40
 8003d76:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d78:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <HAL_UART_MspInit+0x13c>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d7e:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_UART_MspInit+0x13c>)
 8003d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d84:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d86:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <HAL_UART_MspInit+0x13c>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d8c:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <HAL_UART_MspInit+0x13c>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003d92:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <HAL_UART_MspInit+0x13c>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d98:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <HAL_UART_MspInit+0x13c>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d9e:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <HAL_UART_MspInit+0x13c>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003da4:	480f      	ldr	r0, [pc, #60]	; (8003de4 <HAL_UART_MspInit+0x13c>)
 8003da6:	f002 fc51 	bl	800664c <HAL_DMA_Init>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003db0:	f7fe fa70 	bl	8002294 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a0b      	ldr	r2, [pc, #44]	; (8003de4 <HAL_UART_MspInit+0x13c>)
 8003db8:	67da      	str	r2, [r3, #124]	; 0x7c
 8003dba:	4a0a      	ldr	r2, [pc, #40]	; (8003de4 <HAL_UART_MspInit+0x13c>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2105      	movs	r1, #5
 8003dc4:	2025      	movs	r0, #37	; 0x25
 8003dc6:	f002 f813 	bl	8005df0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003dca:	2025      	movs	r0, #37	; 0x25
 8003dcc:	f002 f82a 	bl	8005e24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	37e8      	adds	r7, #232	; 0xe8
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40011000 	.word	0x40011000
 8003ddc:	58024400 	.word	0x58024400
 8003de0:	58020000 	.word	0x58020000
 8003de4:	24000b60 	.word	0x24000b60
 8003de8:	40020040 	.word	0x40020040

08003dec <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8003df6:	4bc2      	ldr	r3, [pc, #776]	; (8004100 <voltage_monitor_init+0x314>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8003dfc:	4bc0      	ldr	r3, [pc, #768]	; (8004100 <voltage_monitor_init+0x314>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8003e02:	4bbf      	ldr	r3, [pc, #764]	; (8004100 <voltage_monitor_init+0x314>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8003e08:	4bbd      	ldr	r3, [pc, #756]	; (8004100 <voltage_monitor_init+0x314>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003e0e:	4bbc      	ldr	r3, [pc, #752]	; (8004100 <voltage_monitor_init+0x314>)
 8003e10:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e14:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 0;
 8003e16:	4bba      	ldr	r3, [pc, #744]	; (8004100 <voltage_monitor_init+0x314>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	811a      	strh	r2, [r3, #8]

	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8003e1c:	4bb8      	ldr	r3, [pc, #736]	; (8004100 <voltage_monitor_init+0x314>)
 8003e1e:	2201      	movs	r2, #1
 8003e20:	729a      	strb	r2, [r3, #10]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8003e22:	4bb7      	ldr	r3, [pc, #732]	; (8004100 <voltage_monitor_init+0x314>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	72da      	strb	r2, [r3, #11]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8003e28:	4bb5      	ldr	r3, [pc, #724]	; (8004100 <voltage_monitor_init+0x314>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	731a      	strb	r2, [r3, #12]
	rail_monitor[RAIL_vrefint].data = 0;
 8003e2e:	4bb4      	ldr	r3, [pc, #720]	; (8004100 <voltage_monitor_init+0x314>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_vrefint].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003e34:	4bb2      	ldr	r3, [pc, #712]	; (8004100 <voltage_monitor_init+0x314>)
 8003e36:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e3a:	821a      	strh	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].min_voltage = 0;
 8003e3c:	4bb0      	ldr	r3, [pc, #704]	; (8004100 <voltage_monitor_init+0x314>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	825a      	strh	r2, [r3, #18]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8003e42:	4baf      	ldr	r3, [pc, #700]	; (8004100 <voltage_monitor_init+0x314>)
 8003e44:	2202      	movs	r2, #2
 8003e46:	751a      	strb	r2, [r3, #20]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8003e48:	4bad      	ldr	r3, [pc, #692]	; (8004100 <voltage_monitor_init+0x314>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	755a      	strb	r2, [r3, #21]
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8003e4e:	4bac      	ldr	r3, [pc, #688]	; (8004100 <voltage_monitor_init+0x314>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	759a      	strb	r2, [r3, #22]
	rail_monitor[RAIL_TEMP1].data = 0;
 8003e54:	4baa      	ldr	r3, [pc, #680]	; (8004100 <voltage_monitor_init+0x314>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003e5a:	4ba9      	ldr	r3, [pc, #676]	; (8004100 <voltage_monitor_init+0x314>)
 8003e5c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e60:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_TEMP1].min_voltage = 0;
 8003e62:	4ba7      	ldr	r3, [pc, #668]	; (8004100 <voltage_monitor_init+0x314>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	839a      	strh	r2, [r3, #28]

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 8003e68:	4ba5      	ldr	r3, [pc, #660]	; (8004100 <voltage_monitor_init+0x314>)
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	779a      	strb	r2, [r3, #30]
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8003e6e:	4ba4      	ldr	r3, [pc, #656]	; (8004100 <voltage_monitor_init+0x314>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	77da      	strb	r2, [r3, #31]
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 8003e74:	4ba2      	ldr	r3, [pc, #648]	; (8004100 <voltage_monitor_init+0x314>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP2].data = 0;
 8003e7c:	4ba0      	ldr	r3, [pc, #640]	; (8004100 <voltage_monitor_init+0x314>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP2].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003e82:	4b9f      	ldr	r3, [pc, #636]	; (8004100 <voltage_monitor_init+0x314>)
 8003e84:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e88:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP2].min_voltage = 0;
 8003e8a:	4b9d      	ldr	r3, [pc, #628]	; (8004100 <voltage_monitor_init+0x314>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	84da      	strh	r2, [r3, #38]	; 0x26

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 8003e90:	4b9b      	ldr	r3, [pc, #620]	; (8004100 <voltage_monitor_init+0x314>)
 8003e92:	2204      	movs	r2, #4
 8003e94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8003e98:	4b99      	ldr	r3, [pc, #612]	; (8004100 <voltage_monitor_init+0x314>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 8003ea0:	4b97      	ldr	r3, [pc, #604]	; (8004100 <voltage_monitor_init+0x314>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP3].data = 0;
 8003ea8:	4b95      	ldr	r3, [pc, #596]	; (8004100 <voltage_monitor_init+0x314>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP3].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003eae:	4b94      	ldr	r3, [pc, #592]	; (8004100 <voltage_monitor_init+0x314>)
 8003eb0:	f242 7210 	movw	r2, #10000	; 0x2710
 8003eb4:	85da      	strh	r2, [r3, #46]	; 0x2e
	rail_monitor[RAIL_TEMP3].min_voltage = 0;
 8003eb6:	4b92      	ldr	r3, [pc, #584]	; (8004100 <voltage_monitor_init+0x314>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	861a      	strh	r2, [r3, #48]	; 0x30

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 8003ebc:	4b90      	ldr	r3, [pc, #576]	; (8004100 <voltage_monitor_init+0x314>)
 8003ebe:	2205      	movs	r2, #5
 8003ec0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP4].error_count = 0;
 8003ec4:	4b8e      	ldr	r3, [pc, #568]	; (8004100 <voltage_monitor_init+0x314>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 8003ecc:	4b8c      	ldr	r3, [pc, #560]	; (8004100 <voltage_monitor_init+0x314>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP4].data = 0;
 8003ed4:	4b8a      	ldr	r3, [pc, #552]	; (8004100 <voltage_monitor_init+0x314>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP4].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003eda:	4b89      	ldr	r3, [pc, #548]	; (8004100 <voltage_monitor_init+0x314>)
 8003edc:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ee0:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP4].min_voltage = 0;
 8003ee2:	4b87      	ldr	r3, [pc, #540]	; (8004100 <voltage_monitor_init+0x314>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	875a      	strh	r2, [r3, #58]	; 0x3a

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 8003ee8:	4b85      	ldr	r3, [pc, #532]	; (8004100 <voltage_monitor_init+0x314>)
 8003eea:	2206      	movs	r2, #6
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_busvmon].error_count = 0;
 8003ef0:	4b83      	ldr	r3, [pc, #524]	; (8004100 <voltage_monitor_init+0x314>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	rail_monitor[RAIL_busvmon].is_enabled = 1;
 8003ef8:	4b81      	ldr	r3, [pc, #516]	; (8004100 <voltage_monitor_init+0x314>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	rail_monitor[RAIL_busvmon].data = 0;
 8003f00:	4b7f      	ldr	r3, [pc, #508]	; (8004100 <voltage_monitor_init+0x314>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003f08:	4b7d      	ldr	r3, [pc, #500]	; (8004100 <voltage_monitor_init+0x314>)
 8003f0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f0e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8003f12:	4b7b      	ldr	r3, [pc, #492]	; (8004100 <voltage_monitor_init+0x314>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8003f1a:	4b79      	ldr	r3, [pc, #484]	; (8004100 <voltage_monitor_init+0x314>)
 8003f1c:	2207      	movs	r2, #7
 8003f1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_busimon].error_count = 0;
 8003f22:	4b77      	ldr	r3, [pc, #476]	; (8004100 <voltage_monitor_init+0x314>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	rail_monitor[RAIL_busimon].is_enabled = 1;
 8003f2a:	4b75      	ldr	r3, [pc, #468]	; (8004100 <voltage_monitor_init+0x314>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_busimon].data = 0;
 8003f32:	4b73      	ldr	r3, [pc, #460]	; (8004100 <voltage_monitor_init+0x314>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8003f3a:	4b71      	ldr	r3, [pc, #452]	; (8004100 <voltage_monitor_init+0x314>)
 8003f3c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_busimon].min_voltage = 0;
 8003f44:	4b6e      	ldr	r3, [pc, #440]	; (8004100 <voltage_monitor_init+0x314>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 8003f4c:	4b6c      	ldr	r3, [pc, #432]	; (8004100 <voltage_monitor_init+0x314>)
 8003f4e:	2208      	movs	r2, #8
 8003f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_2v5].error_count = 0;
 8003f54:	4b6a      	ldr	r3, [pc, #424]	; (8004100 <voltage_monitor_init+0x314>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_2v5].is_enabled = 0;
 8003f5c:	4b68      	ldr	r3, [pc, #416]	; (8004100 <voltage_monitor_init+0x314>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_2v5].data = 0;
 8003f64:	4b66      	ldr	r3, [pc, #408]	; (8004100 <voltage_monitor_init+0x314>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_2v5].max_voltage = 3257;
 8003f6c:	4b64      	ldr	r3, [pc, #400]	; (8004100 <voltage_monitor_init+0x314>)
 8003f6e:	f640 42b9 	movw	r2, #3257	; 0xcb9
 8003f72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_2v5].min_voltage = 2947;
 8003f76:	4b62      	ldr	r3, [pc, #392]	; (8004100 <voltage_monitor_init+0x314>)
 8003f78:	f640 3283 	movw	r2, #2947	; 0xb83
 8003f7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 8003f80:	4b5f      	ldr	r3, [pc, #380]	; (8004100 <voltage_monitor_init+0x314>)
 8003f82:	2209      	movs	r2, #9
 8003f84:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_3v3].error_count = 0;
 8003f88:	4b5d      	ldr	r3, [pc, #372]	; (8004100 <voltage_monitor_init+0x314>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	rail_monitor[RAIL_3v3].is_enabled = 0;
 8003f90:	4b5b      	ldr	r3, [pc, #364]	; (8004100 <voltage_monitor_init+0x314>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_3v3].data = 0;
 8003f98:	4b59      	ldr	r3, [pc, #356]	; (8004100 <voltage_monitor_init+0x314>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_3v3].max_voltage = 3909;
 8003fa0:	4b57      	ldr	r3, [pc, #348]	; (8004100 <voltage_monitor_init+0x314>)
 8003fa2:	f640 7245 	movw	r2, #3909	; 0xf45
 8003fa6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	//rail_monitor[RAIL_3v3].min_voltage = 3537;
	rail_monitor[RAIL_3v3].min_voltage = 0;
 8003faa:	4b55      	ldr	r3, [pc, #340]	; (8004100 <voltage_monitor_init+0x314>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8003fb2:	4b53      	ldr	r3, [pc, #332]	; (8004100 <voltage_monitor_init+0x314>)
 8003fb4:	220a      	movs	r2, #10
 8003fb6:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_5v].error_count = 0;
 8003fba:	4b51      	ldr	r3, [pc, #324]	; (8004100 <voltage_monitor_init+0x314>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	rail_monitor[RAIL_5v].is_enabled = 0;
 8003fc2:	4b4f      	ldr	r3, [pc, #316]	; (8004100 <voltage_monitor_init+0x314>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_5v].data = 0;
 8003fca:	4b4d      	ldr	r3, [pc, #308]	; (8004100 <voltage_monitor_init+0x314>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_5v].max_voltage = 3909;
 8003fd2:	4b4b      	ldr	r3, [pc, #300]	; (8004100 <voltage_monitor_init+0x314>)
 8003fd4:	f640 7245 	movw	r2, #3909	; 0xf45
 8003fd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_5v].min_voltage = 3537;
 8003fdc:	4b48      	ldr	r3, [pc, #288]	; (8004100 <voltage_monitor_init+0x314>)
 8003fde:	f640 52d1 	movw	r2, #3537	; 0xdd1
 8003fe2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8003fe6:	4b46      	ldr	r3, [pc, #280]	; (8004100 <voltage_monitor_init+0x314>)
 8003fe8:	220b      	movs	r2, #11
 8003fea:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	rail_monitor[RAIL_n3v3].error_count = 0;
 8003fee:	4b44      	ldr	r3, [pc, #272]	; (8004100 <voltage_monitor_init+0x314>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8003ff6:	4b42      	ldr	r3, [pc, #264]	; (8004100 <voltage_monitor_init+0x314>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_n3v3].data = 0;
 8003ffe:	4b40      	ldr	r3, [pc, #256]	; (8004100 <voltage_monitor_init+0x314>)
 8004000:	2200      	movs	r2, #0
 8004002:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n3v3].max_voltage = 4091;
 8004006:	4b3e      	ldr	r3, [pc, #248]	; (8004100 <voltage_monitor_init+0x314>)
 8004008:	f640 72fb 	movw	r2, #4091	; 0xffb
 800400c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_n3v3].min_voltage = 3702;
 8004010:	4b3b      	ldr	r3, [pc, #236]	; (8004100 <voltage_monitor_init+0x314>)
 8004012:	f640 6276 	movw	r2, #3702	; 0xe76
 8004016:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 800401a:	4b39      	ldr	r3, [pc, #228]	; (8004100 <voltage_monitor_init+0x314>)
 800401c:	220c      	movs	r2, #12
 800401e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_n5v].error_count = 0;
 8004022:	4b37      	ldr	r3, [pc, #220]	; (8004100 <voltage_monitor_init+0x314>)
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	rail_monitor[RAIL_n5v].is_enabled = 0;
 800402a:	4b35      	ldr	r3, [pc, #212]	; (8004100 <voltage_monitor_init+0x314>)
 800402c:	2200      	movs	r2, #0
 800402e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_n5v].data = 0;
 8004032:	4b33      	ldr	r3, [pc, #204]	; (8004100 <voltage_monitor_init+0x314>)
 8004034:	2200      	movs	r2, #0
 8004036:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_n5v].max_voltage = 4000;
 800403a:	4b31      	ldr	r3, [pc, #196]	; (8004100 <voltage_monitor_init+0x314>)
 800403c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004040:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	//rail_monitor[RAIL_n5v].min_voltage = 3619;
	rail_monitor[RAIL_n5v].min_voltage = 0;
 8004044:	4b2e      	ldr	r3, [pc, #184]	; (8004100 <voltage_monitor_init+0x314>)
 8004046:	2200      	movs	r2, #0
 8004048:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	rail_monitor[RAIL_15v].name = RAIL_15v;
 800404c:	4b2c      	ldr	r3, [pc, #176]	; (8004100 <voltage_monitor_init+0x314>)
 800404e:	220d      	movs	r2, #13
 8004050:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_15v].error_count = 0;
 8004054:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <voltage_monitor_init+0x314>)
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	rail_monitor[RAIL_15v].is_enabled = 0;
 800405c:	4b28      	ldr	r3, [pc, #160]	; (8004100 <voltage_monitor_init+0x314>)
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_15v].data = 0;
 8004064:	4b26      	ldr	r3, [pc, #152]	; (8004100 <voltage_monitor_init+0x314>)
 8004066:	2200      	movs	r2, #0
 8004068:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_15v].max_voltage = 3896;
 800406c:	4b24      	ldr	r3, [pc, #144]	; (8004100 <voltage_monitor_init+0x314>)
 800406e:	f640 7238 	movw	r2, #3896	; 0xf38
 8004072:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_15v].min_voltage = 3525;
 8004076:	4b22      	ldr	r3, [pc, #136]	; (8004100 <voltage_monitor_init+0x314>)
 8004078:	f640 52c5 	movw	r2, #3525	; 0xdc5
 800407c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8004080:	4b1f      	ldr	r3, [pc, #124]	; (8004100 <voltage_monitor_init+0x314>)
 8004082:	220e      	movs	r2, #14
 8004084:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_5vref].error_count = 0;
 8004088:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <voltage_monitor_init+0x314>)
 800408a:	2200      	movs	r2, #0
 800408c:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8004090:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <voltage_monitor_init+0x314>)
 8004092:	2200      	movs	r2, #0
 8004094:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	rail_monitor[RAIL_5vref].data = 0;
 8004098:	4b19      	ldr	r3, [pc, #100]	; (8004100 <voltage_monitor_init+0x314>)
 800409a:	2200      	movs	r2, #0
 800409c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_5vref].max_voltage = 3909;
 80040a0:	4b17      	ldr	r3, [pc, #92]	; (8004100 <voltage_monitor_init+0x314>)
 80040a2:	f640 7245 	movw	r2, #3909	; 0xf45
 80040a6:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_5vref].min_voltage = 3537;
 80040aa:	4b15      	ldr	r3, [pc, #84]	; (8004100 <voltage_monitor_init+0x314>)
 80040ac:	f640 52d1 	movw	r2, #3537	; 0xdd1
 80040b0:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 80040b4:	4b12      	ldr	r3, [pc, #72]	; (8004100 <voltage_monitor_init+0x314>)
 80040b6:	220f      	movs	r2, #15
 80040b8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_n200v].error_count = 0;
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <voltage_monitor_init+0x314>)
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	rail_monitor[RAIL_n200v].is_enabled = 0;
 80040c4:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <voltage_monitor_init+0x314>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_n200v].data = 0;
 80040cc:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <voltage_monitor_init+0x314>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n200v].max_voltage = 4196;
 80040d4:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <voltage_monitor_init+0x314>)
 80040d6:	f241 0264 	movw	r2, #4196	; 0x1064
 80040da:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	//rail_monitor[RAIL_n200v].min_voltage = 3796;
	rail_monitor[RAIL_n200v].min_voltage = 0;		// TODO: Currently set to 0, kept triggering because it has been reading ~3351
 80040de:	4b08      	ldr	r3, [pc, #32]	; (8004100 <voltage_monitor_init+0x314>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <voltage_monitor_init+0x314>)
 80040e8:	2210      	movs	r2, #16
 80040ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_n800v].error_count = 0;
 80040ee:	4b04      	ldr	r3, [pc, #16]	; (8004100 <voltage_monitor_init+0x314>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_n800v].is_enabled = 0;
 80040f6:	4b02      	ldr	r3, [pc, #8]	; (8004100 <voltage_monitor_init+0x314>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
 80040fe:	e001      	b.n	8004104 <voltage_monitor_init+0x318>
 8004100:	24000bd8 	.word	0x24000bd8
	rail_monitor[RAIL_n800v].data = 0;
 8004104:	4b17      	ldr	r3, [pc, #92]	; (8004164 <voltage_monitor_init+0x378>)
 8004106:	2200      	movs	r2, #0
 8004108:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_n800v].max_voltage = 3336;
 800410c:	4b15      	ldr	r3, [pc, #84]	; (8004164 <voltage_monitor_init+0x378>)
 800410e:	f640 5208 	movw	r2, #3336	; 0xd08
 8004112:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_n800v].min_voltage = 3018;
 8004116:	4b13      	ldr	r3, [pc, #76]	; (8004164 <voltage_monitor_init+0x378>)
 8004118:	f640 32ca 	movw	r2, #3018	; 0xbca
 800411c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 8004120:	4b10      	ldr	r3, [pc, #64]	; (8004164 <voltage_monitor_init+0x378>)
 8004122:	2211      	movs	r2, #17
 8004124:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_TMP1].error_count = 0;
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <voltage_monitor_init+0x378>)
 800412a:	2200      	movs	r2, #0
 800412c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	rail_monitor[RAIL_TMP1].is_enabled = 1;
 8004130:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <voltage_monitor_init+0x378>)
 8004132:	2201      	movs	r2, #1
 8004134:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_TMP1].data = 0;
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <voltage_monitor_init+0x378>)
 800413a:	2200      	movs	r2, #0
 800413c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
	rail_monitor[RAIL_TMP1].max_voltage = 10000; // TODO: Get actual range from Sanj
 8004140:	4b08      	ldr	r3, [pc, #32]	; (8004164 <voltage_monitor_init+0x378>)
 8004142:	f242 7210 	movw	r2, #10000	; 0x2710
 8004146:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_TMP1].min_voltage = 0;
 800414a:	4b06      	ldr	r3, [pc, #24]	; (8004164 <voltage_monitor_init+0x378>)
 800414c:	2200      	movs	r2, #0
 800414e:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	status = 1;
 8004152:	2301      	movs	r3, #1
 8004154:	71fb      	strb	r3, [r7, #7]

	return status;
 8004156:	79fb      	ldrb	r3, [r7, #7]
}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	24000bd8 	.word	0x24000bd8

08004168 <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	460a      	mov	r2, r1
 8004172:	71fb      	strb	r3, [r7, #7]
 8004174:	4613      	mov	r3, r2
 8004176:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 800417c:	79fa      	ldrb	r2, [r7, #7]
 800417e:	4909      	ldr	r1, [pc, #36]	; (80041a4 <set_rail_monitor_enable+0x3c>)
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	440b      	add	r3, r1
 800418a:	3302      	adds	r3, #2
 800418c:	79ba      	ldrb	r2, [r7, #6]
 800418e:	701a      	strb	r2, [r3, #0]
	status = 1;
 8004190:	2301      	movs	r3, #1
 8004192:	73fb      	strb	r3, [r7, #15]

	return status;
 8004194:	7bfb      	ldrb	r3, [r7, #15]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	24000bd8 	.word	0x24000bd8

080041a8 <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
	return rail_monitor;
 80041ac:	4b02      	ldr	r3, [pc, #8]	; (80041b8 <get_rail_monitor+0x10>)
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	24000bd8 	.word	0x24000bd8

080041bc <set_rail_monitor>:

uint8_t set_rail_monitor() {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
	uint16_t *hk_adc1 = (uint16_t*) malloc(10 * sizeof(uint16_t));
 80041c6:	2014      	movs	r0, #20
 80041c8:	f012 fd8a 	bl	8016ce0 <malloc>
 80041cc:	4603      	mov	r3, r0
 80041ce:	60bb      	str	r3, [r7, #8]
	uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 80041d0:	2008      	movs	r0, #8
 80041d2:	f012 fd85 	bl	8016ce0 <malloc>
 80041d6:	4603      	mov	r3, r0
 80041d8:	607b      	str	r3, [r7, #4]
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 80041da:	2008      	movs	r0, #8
 80041dc:	f012 fd80 	bl	8016ce0 <malloc>
 80041e0:	4603      	mov	r3, r0
 80041e2:	603b      	str	r3, [r7, #0]

	sample_hk_i2c(hk_i2c);
 80041e4:	6838      	ldr	r0, [r7, #0]
 80041e6:	f7fe fc7f 	bl	8002ae8 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 80041ea:	68b8      	ldr	r0, [r7, #8]
 80041ec:	f7fe fcac 	bl	8002b48 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7fe fcfb 	bl	8002bec <sample_hk_adc3>

	rail_monitor[RAIL_vsense].data = hk_adc3[1];
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	885a      	ldrh	r2, [r3, #2]
 80041fa:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <set_rail_monitor+0x118>)
 80041fc:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vrefint].data = hk_adc3[0];
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	881a      	ldrh	r2, [r3, #0]
 8004202:	4b34      	ldr	r3, [pc, #208]	; (80042d4 <set_rail_monitor+0x118>)
 8004204:	81da      	strh	r2, [r3, #14]
	rail_monitor[RAIL_TEMP1].data = hk_i2c[0];
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800420c:	b29a      	uxth	r2, r3
 800420e:	4b31      	ldr	r3, [pc, #196]	; (80042d4 <set_rail_monitor+0x118>)
 8004210:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_TEMP2].data = hk_i2c[1];
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	3302      	adds	r3, #2
 8004216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800421a:	b29a      	uxth	r2, r3
 800421c:	4b2d      	ldr	r3, [pc, #180]	; (80042d4 <set_rail_monitor+0x118>)
 800421e:	845a      	strh	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP3].data = hk_i2c[2];
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	3304      	adds	r3, #4
 8004224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004228:	b29a      	uxth	r2, r3
 800422a:	4b2a      	ldr	r3, [pc, #168]	; (80042d4 <set_rail_monitor+0x118>)
 800422c:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP4].data = hk_i2c[3];
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	3306      	adds	r3, #6
 8004232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004236:	b29a      	uxth	r2, r3
 8004238:	4b26      	ldr	r3, [pc, #152]	; (80042d4 <set_rail_monitor+0x118>)
 800423a:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_busvmon].data = hk_adc1[0];
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	881a      	ldrh	r2, [r3, #0]
 8004240:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <set_rail_monitor+0x118>)
 8004242:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_busimon].data = hk_adc1[1];
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	885a      	ldrh	r2, [r3, #2]
 800424a:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <set_rail_monitor+0x118>)
 800424c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_2v5].data = hk_adc1[2];
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	889a      	ldrh	r2, [r3, #4]
 8004254:	4b1f      	ldr	r3, [pc, #124]	; (80042d4 <set_rail_monitor+0x118>)
 8004256:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_3v3].data = hk_adc3[3];
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	88da      	ldrh	r2, [r3, #6]
 800425e:	4b1d      	ldr	r3, [pc, #116]	; (80042d4 <set_rail_monitor+0x118>)
 8004260:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	rail_monitor[RAIL_5v].data = hk_adc1[6];
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	899a      	ldrh	r2, [r3, #12]
 8004268:	4b1a      	ldr	r3, [pc, #104]	; (80042d4 <set_rail_monitor+0x118>)
 800426a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_n3v3].data = hk_adc1[3];
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	88da      	ldrh	r2, [r3, #6]
 8004272:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <set_rail_monitor+0x118>)
 8004274:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_n5v].data = hk_adc3[2];
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	889a      	ldrh	r2, [r3, #4]
 800427c:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <set_rail_monitor+0x118>)
 800427e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_15v].data = hk_adc1[7];
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	89da      	ldrh	r2, [r3, #14]
 8004286:	4b13      	ldr	r3, [pc, #76]	; (80042d4 <set_rail_monitor+0x118>)
 8004288:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_5vref].data = hk_adc1[8];
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	8a1a      	ldrh	r2, [r3, #16]
 8004290:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <set_rail_monitor+0x118>)
 8004292:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_n200v].data = hk_adc1[4];
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	891a      	ldrh	r2, [r3, #8]
 800429a:	4b0e      	ldr	r3, [pc, #56]	; (80042d4 <set_rail_monitor+0x118>)
 800429c:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_n800v].data = hk_adc1[5];
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	895a      	ldrh	r2, [r3, #10]
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <set_rail_monitor+0x118>)
 80042a6:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_TMP1].data = hk_adc1[9];
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	8a5a      	ldrh	r2, [r3, #18]
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <set_rail_monitor+0x118>)
 80042b0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	free(hk_adc1);
 80042b4:	68b8      	ldr	r0, [r7, #8]
 80042b6:	f012 fd1b 	bl	8016cf0 <free>
	free(hk_adc3);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f012 fd18 	bl	8016cf0 <free>
	free(hk_i2c);
 80042c0:	6838      	ldr	r0, [r7, #0]
 80042c2:	f012 fd15 	bl	8016cf0 <free>

	status = 1;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]

	return status;
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	24000bd8 	.word	0x24000bd8

080042d8 <in_range>:


uint8_t in_range(uint16_t raw, int min, int max) {
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	81fb      	strh	r3, [r7, #14]
	if (raw <= max && raw >= min) {
 80042e6:	89fb      	ldrh	r3, [r7, #14]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	db05      	blt.n	80042fa <in_range+0x22>
 80042ee:	89fb      	ldrh	r3, [r7, #14]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	dc01      	bgt.n	80042fa <in_range+0x22>
		return 1;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <in_range+0x24>
	}
	return 0;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004340 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800430c:	f7ff f82e 	bl	800336c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004310:	480c      	ldr	r0, [pc, #48]	; (8004344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004312:	490d      	ldr	r1, [pc, #52]	; (8004348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004314:	4a0d      	ldr	r2, [pc, #52]	; (800434c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004318:	e002      	b.n	8004320 <LoopCopyDataInit>

0800431a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800431a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800431c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800431e:	3304      	adds	r3, #4

08004320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004324:	d3f9      	bcc.n	800431a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004326:	4a0a      	ldr	r2, [pc, #40]	; (8004350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004328:	4c0a      	ldr	r4, [pc, #40]	; (8004354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800432a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800432c:	e001      	b.n	8004332 <LoopFillZerobss>

0800432e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800432e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004330:	3204      	adds	r2, #4

08004332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004334:	d3fb      	bcc.n	800432e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004336:	f012 fcaf 	bl	8016c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800433a:	f7fd fdb9 	bl	8001eb0 <main>
  bx  lr
 800433e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004340:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004344:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004348:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 800434c:	08017c1c 	.word	0x08017c1c
  ldr r2, =_sbss
 8004350:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8004354:	240055f0 	.word	0x240055f0

08004358 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004358:	e7fe      	b.n	8004358 <ADC3_IRQHandler>
	...

0800435c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004362:	2003      	movs	r0, #3
 8004364:	f001 fd39 	bl	8005dda <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004368:	f006 fe2c 	bl	800afc4 <HAL_RCC_GetSysClockFreq>
 800436c:	4602      	mov	r2, r0
 800436e:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <HAL_Init+0x68>)
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	0a1b      	lsrs	r3, r3, #8
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	4913      	ldr	r1, [pc, #76]	; (80043c8 <HAL_Init+0x6c>)
 800437a:	5ccb      	ldrb	r3, [r1, r3]
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
 8004384:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004386:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <HAL_Init+0x68>)
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	4a0e      	ldr	r2, [pc, #56]	; (80043c8 <HAL_Init+0x6c>)
 8004390:	5cd3      	ldrb	r3, [r2, r3]
 8004392:	f003 031f 	and.w	r3, r3, #31
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	fa22 f303 	lsr.w	r3, r2, r3
 800439c:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <HAL_Init+0x70>)
 800439e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80043a0:	4a0b      	ldr	r2, [pc, #44]	; (80043d0 <HAL_Init+0x74>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043a6:	2005      	movs	r0, #5
 80043a8:	f7fe fe10 	bl	8002fcc <HAL_InitTick>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e002      	b.n	80043bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80043b6:	f7fe fdeb 	bl	8002f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	58024400 	.word	0x58024400
 80043c8:	08017b68 	.word	0x08017b68
 80043cc:	2400008c 	.word	0x2400008c
 80043d0:	24000088 	.word	0x24000088

080043d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_IncTick+0x20>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <HAL_IncTick+0x24>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4413      	add	r3, r2
 80043e4:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <HAL_IncTick+0x24>)
 80043e6:	6013      	str	r3, [r2, #0]
}
 80043e8:	bf00      	nop
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	24000094 	.word	0x24000094
 80043f8:	24000c8c 	.word	0x24000c8c

080043fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004400:	4b03      	ldr	r3, [pc, #12]	; (8004410 <HAL_GetTick+0x14>)
 8004402:	681b      	ldr	r3, [r3, #0]
}
 8004404:	4618      	mov	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	24000c8c 	.word	0x24000c8c

08004414 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004418:	4b03      	ldr	r3, [pc, #12]	; (8004428 <HAL_GetREVID+0x14>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	0c1b      	lsrs	r3, r3, #16
}
 800441e:	4618      	mov	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	5c001000 	.word	0x5c001000

0800442c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004436:	4b07      	ldr	r3, [pc, #28]	; (8004454 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	43db      	mvns	r3, r3
 800443e:	401a      	ands	r2, r3
 8004440:	4904      	ldr	r1, [pc, #16]	; (8004454 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	58000400 	.word	0x58000400

08004458 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	609a      	str	r2, [r3, #8]
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	609a      	str	r2, [r3, #8]
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	3360      	adds	r3, #96	; 0x60
 80044d2:	461a      	mov	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	430b      	orrs	r3, r1
 80044ee:	431a      	orrs	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80044f4:	bf00      	nop
 80044f6:	371c      	adds	r7, #28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	fa01 f303 	lsl.w	r3, r1, r3
 8004520:	431a      	orrs	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	611a      	str	r2, [r3, #16]
}
 8004526:	bf00      	nop
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004532:	b480      	push	{r7}
 8004534:	b087      	sub	sp, #28
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3360      	adds	r3, #96	; 0x60
 8004542:	461a      	mov	r2, r3
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	431a      	orrs	r2, r3
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	601a      	str	r2, [r3, #0]
  }
}
 800455c:	bf00      	nop
 800455e:	371c      	adds	r7, #28
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800458e:	b480      	push	{r7}
 8004590:	b087      	sub	sp, #28
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3330      	adds	r3, #48	; 0x30
 800459e:	461a      	mov	r2, r3
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	4413      	add	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	211f      	movs	r1, #31
 80045ba:	fa01 f303 	lsl.w	r3, r1, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	401a      	ands	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	0e9b      	lsrs	r3, r3, #26
 80045c6:	f003 011f 	and.w	r1, r3, #31
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	fa01 f303 	lsl.w	r3, r1, r3
 80045d4:	431a      	orrs	r2, r3
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80045da:	bf00      	nop
 80045dc:	371c      	adds	r7, #28
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f023 0203 	bic.w	r2, r3, #3
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	60da      	str	r2, [r3, #12]
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3314      	adds	r3, #20
 800461c:	461a      	mov	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	0e5b      	lsrs	r3, r3, #25
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	4413      	add	r3, r2
 800462a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	0d1b      	lsrs	r3, r3, #20
 8004634:	f003 031f 	and.w	r3, r3, #31
 8004638:	2107      	movs	r1, #7
 800463a:	fa01 f303 	lsl.w	r3, r1, r3
 800463e:	43db      	mvns	r3, r3
 8004640:	401a      	ands	r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	0d1b      	lsrs	r3, r3, #20
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	fa01 f303 	lsl.w	r3, r1, r3
 8004650:	431a      	orrs	r2, r3
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
	...

08004664 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800467c:	43db      	mvns	r3, r3
 800467e:	401a      	ands	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f003 0318 	and.w	r3, r3, #24
 8004686:	4908      	ldr	r1, [pc, #32]	; (80046a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004688:	40d9      	lsrs	r1, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	400b      	ands	r3, r1
 800468e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004692:	431a      	orrs	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	000fffff 	.word	0x000fffff

080046ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 031f 	and.w	r3, r3, #31
}
 80046bc:	4618      	mov	r0, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6093      	str	r3, [r2, #8]
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	5fffffc0 	.word	0x5fffffc0

080046ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004700:	d101      	bne.n	8004706 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	4b05      	ldr	r3, [pc, #20]	; (8004738 <LL_ADC_EnableInternalRegulator+0x24>)
 8004722:	4013      	ands	r3, r2
 8004724:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	6fffffc0 	.word	0x6fffffc0

0800473c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004750:	d101      	bne.n	8004756 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <LL_ADC_Enable+0x24>)
 8004772:	4013      	ands	r3, r2
 8004774:	f043 0201 	orr.w	r2, r3, #1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	7fffffc0 	.word	0x7fffffc0

0800478c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <LL_ADC_Disable+0x24>)
 800479a:	4013      	ands	r3, r2
 800479c:	f043 0202 	orr.w	r2, r3, #2
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	7fffffc0 	.word	0x7fffffc0

080047b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <LL_ADC_IsEnabled+0x18>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <LL_ADC_IsEnabled+0x1a>
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d101      	bne.n	80047f2 <LL_ADC_IsDisableOngoing+0x18>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <LL_ADC_IsDisableOngoing+0x1a>
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <LL_ADC_REG_StartConversion+0x24>)
 800480e:	4013      	ands	r3, r2
 8004810:	f043 0204 	orr.w	r2, r3, #4
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	7fffffc0 	.word	0x7fffffc0

08004828 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b04      	cmp	r3, #4
 800483a:	d101      	bne.n	8004840 <LL_ADC_REG_IsConversionOngoing+0x18>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b08      	cmp	r3, #8
 8004860:	d101      	bne.n	8004866 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004874:	b590      	push	{r4, r7, lr}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004880:	2300      	movs	r3, #0
 8004882:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e18f      	b.n	8004bae <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004898:	2b00      	cmp	r3, #0
 800489a:	d109      	bne.n	80048b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7fc f855 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff ff19 	bl	80046ec <LL_ADC_IsDeepPowerDownEnabled>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d004      	beq.n	80048ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff feff 	bl	80046c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff ff34 	bl	800473c <LL_ADC_IsInternalRegulatorEnabled>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d114      	bne.n	8004904 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff ff18 	bl	8004714 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80048e4:	4b87      	ldr	r3, [pc, #540]	; (8004b04 <HAL_ADC_Init+0x290>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	099b      	lsrs	r3, r3, #6
 80048ea:	4a87      	ldr	r2, [pc, #540]	; (8004b08 <HAL_ADC_Init+0x294>)
 80048ec:	fba2 2303 	umull	r2, r3, r2, r3
 80048f0:	099b      	lsrs	r3, r3, #6
 80048f2:	3301      	adds	r3, #1
 80048f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80048f6:	e002      	b.n	80048fe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f9      	bne.n	80048f8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff ff17 	bl	800473c <LL_ADC_IsInternalRegulatorEnabled>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10d      	bne.n	8004930 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004918:	f043 0210 	orr.w	r2, r3, #16
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004924:	f043 0201 	orr.w	r2, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff ff77 	bl	8004828 <LL_ADC_REG_IsConversionOngoing>
 800493a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004940:	f003 0310 	and.w	r3, r3, #16
 8004944:	2b00      	cmp	r3, #0
 8004946:	f040 8129 	bne.w	8004b9c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f040 8125 	bne.w	8004b9c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800495a:	f043 0202 	orr.w	r2, r3, #2
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff ff24 	bl	80047b4 <LL_ADC_IsEnabled>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d136      	bne.n	80049e0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a65      	ldr	r2, [pc, #404]	; (8004b0c <HAL_ADC_Init+0x298>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_ADC_Init+0x112>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a63      	ldr	r2, [pc, #396]	; (8004b10 <HAL_ADC_Init+0x29c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d10e      	bne.n	80049a4 <HAL_ADC_Init+0x130>
 8004986:	4861      	ldr	r0, [pc, #388]	; (8004b0c <HAL_ADC_Init+0x298>)
 8004988:	f7ff ff14 	bl	80047b4 <LL_ADC_IsEnabled>
 800498c:	4604      	mov	r4, r0
 800498e:	4860      	ldr	r0, [pc, #384]	; (8004b10 <HAL_ADC_Init+0x29c>)
 8004990:	f7ff ff10 	bl	80047b4 <LL_ADC_IsEnabled>
 8004994:	4603      	mov	r3, r0
 8004996:	4323      	orrs	r3, r4
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e008      	b.n	80049b6 <HAL_ADC_Init+0x142>
 80049a4:	485b      	ldr	r0, [pc, #364]	; (8004b14 <HAL_ADC_Init+0x2a0>)
 80049a6:	f7ff ff05 	bl	80047b4 <LL_ADC_IsEnabled>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d012      	beq.n	80049e0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a53      	ldr	r2, [pc, #332]	; (8004b0c <HAL_ADC_Init+0x298>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d004      	beq.n	80049ce <HAL_ADC_Init+0x15a>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a51      	ldr	r2, [pc, #324]	; (8004b10 <HAL_ADC_Init+0x29c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d101      	bne.n	80049d2 <HAL_ADC_Init+0x15e>
 80049ce:	4a52      	ldr	r2, [pc, #328]	; (8004b18 <HAL_ADC_Init+0x2a4>)
 80049d0:	e000      	b.n	80049d4 <HAL_ADC_Init+0x160>
 80049d2:	4a52      	ldr	r2, [pc, #328]	; (8004b1c <HAL_ADC_Init+0x2a8>)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f7ff fd3c 	bl	8004458 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80049e0:	f7ff fd18 	bl	8004414 <HAL_GetREVID>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d914      	bls.n	8004a18 <HAL_ADC_Init+0x1a4>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d110      	bne.n	8004a18 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	7d5b      	ldrb	r3, [r3, #21]
 80049fa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a00:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004a06:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	7f1b      	ldrb	r3, [r3, #28]
 8004a0c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004a0e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a10:	f043 030c 	orr.w	r3, r3, #12
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	e00d      	b.n	8004a34 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	7d5b      	ldrb	r3, [r3, #21]
 8004a1c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a22:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004a28:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	7f1b      	ldrb	r3, [r3, #28]
 8004a2e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	7f1b      	ldrb	r3, [r3, #28]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d106      	bne.n	8004a4a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	045b      	lsls	r3, r3, #17
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	4b2c      	ldr	r3, [pc, #176]	; (8004b20 <HAL_ADC_Init+0x2ac>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6812      	ldr	r2, [r2, #0]
 8004a74:	69b9      	ldr	r1, [r7, #24]
 8004a76:	430b      	orrs	r3, r1
 8004a78:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fed2 	bl	8004828 <LL_ADC_REG_IsConversionOngoing>
 8004a84:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff fedf 	bl	800484e <LL_ADC_INJ_IsConversionOngoing>
 8004a90:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d15f      	bne.n	8004b58 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d15c      	bne.n	8004b58 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	7d1b      	ldrb	r3, [r3, #20]
 8004aa2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	4b1c      	ldr	r3, [pc, #112]	; (8004b24 <HAL_ADC_Init+0x2b0>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	69b9      	ldr	r1, [r7, #24]
 8004abc:	430b      	orrs	r3, r1
 8004abe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d130      	bne.n	8004b2c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	4b14      	ldr	r3, [pc, #80]	; (8004b28 <HAL_ADC_Init+0x2b4>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ade:	3a01      	subs	r2, #1
 8004ae0:	0411      	lsls	r1, r2, #16
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ae6:	4311      	orrs	r1, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004aec:	4311      	orrs	r1, r2
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004af2:	430a      	orrs	r2, r1
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	611a      	str	r2, [r3, #16]
 8004b00:	e01c      	b.n	8004b3c <HAL_ADC_Init+0x2c8>
 8004b02:	bf00      	nop
 8004b04:	24000088 	.word	0x24000088
 8004b08:	053e2d63 	.word	0x053e2d63
 8004b0c:	40022000 	.word	0x40022000
 8004b10:	40022100 	.word	0x40022100
 8004b14:	58026000 	.word	0x58026000
 8004b18:	40022300 	.word	0x40022300
 8004b1c:	58026300 	.word	0x58026300
 8004b20:	fff0c003 	.word	0xfff0c003
 8004b24:	ffffbffc 	.word	0xffffbffc
 8004b28:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0201 	bic.w	r2, r2, #1
 8004b3a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fdec 	bl	8005730 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d10c      	bne.n	8004b7a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	f023 010f 	bic.w	r1, r3, #15
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	1e5a      	subs	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
 8004b78:	e007      	b.n	8004b8a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 020f 	bic.w	r2, r2, #15
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8e:	f023 0303 	bic.w	r3, r3, #3
 8004b92:	f043 0201 	orr.w	r2, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	655a      	str	r2, [r3, #84]	; 0x54
 8004b9a:	e007      	b.n	8004bac <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba0:	f043 0210 	orr.w	r2, r3, #16
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bac:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3724      	adds	r7, #36	; 0x24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd90      	pop	{r4, r7, pc}
 8004bb6:	bf00      	nop

08004bb8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a55      	ldr	r2, [pc, #340]	; (8004d20 <HAL_ADC_Start_DMA+0x168>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_ADC_Start_DMA+0x20>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a54      	ldr	r2, [pc, #336]	; (8004d24 <HAL_ADC_Start_DMA+0x16c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d101      	bne.n	8004bdc <HAL_ADC_Start_DMA+0x24>
 8004bd8:	4b53      	ldr	r3, [pc, #332]	; (8004d28 <HAL_ADC_Start_DMA+0x170>)
 8004bda:	e000      	b.n	8004bde <HAL_ADC_Start_DMA+0x26>
 8004bdc:	4b53      	ldr	r3, [pc, #332]	; (8004d2c <HAL_ADC_Start_DMA+0x174>)
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fd64 	bl	80046ac <LL_ADC_GetMultimode>
 8004be4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fe1c 	bl	8004828 <LL_ADC_REG_IsConversionOngoing>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f040 808c 	bne.w	8004d10 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_ADC_Start_DMA+0x4e>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e087      	b.n	8004d16 <HAL_ADC_Start_DMA+0x15e>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2b05      	cmp	r3, #5
 8004c18:	d002      	beq.n	8004c20 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b09      	cmp	r3, #9
 8004c1e:	d170      	bne.n	8004d02 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 fc07 	bl	8005434 <ADC_Enable>
 8004c26:	4603      	mov	r3, r0
 8004c28:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d163      	bne.n	8004cf8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c34:	4b3e      	ldr	r3, [pc, #248]	; (8004d30 <HAL_ADC_Start_DMA+0x178>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a37      	ldr	r2, [pc, #220]	; (8004d24 <HAL_ADC_Start_DMA+0x16c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d002      	beq.n	8004c50 <HAL_ADC_Start_DMA+0x98>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	e000      	b.n	8004c52 <HAL_ADC_Start_DMA+0x9a>
 8004c50:	4b33      	ldr	r3, [pc, #204]	; (8004d20 <HAL_ADC_Start_DMA+0x168>)
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d002      	beq.n	8004c60 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d006      	beq.n	8004c86 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7c:	f023 0206 	bic.w	r2, r3, #6
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	659a      	str	r2, [r3, #88]	; 0x58
 8004c84:	e002      	b.n	8004c8c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c90:	4a28      	ldr	r2, [pc, #160]	; (8004d34 <HAL_ADC_Start_DMA+0x17c>)
 8004c92:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c98:	4a27      	ldr	r2, [pc, #156]	; (8004d38 <HAL_ADC_Start_DMA+0x180>)
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca0:	4a26      	ldr	r2, [pc, #152]	; (8004d3c <HAL_ADC_Start_DMA+0x184>)
 8004ca2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	221c      	movs	r2, #28
 8004caa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0210 	orr.w	r2, r2, #16
 8004cc2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f7ff fc89 	bl	80045e6 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3340      	adds	r3, #64	; 0x40
 8004cde:	4619      	mov	r1, r3
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f002 f80e 	bl	8006d04 <HAL_DMA_Start_IT>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fd85 	bl	8004800 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004cf6:	e00d      	b.n	8004d14 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004d00:	e008      	b.n	8004d14 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d0e:	e001      	b.n	8004d14 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
 8004d12:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40022000 	.word	0x40022000
 8004d24:	40022100 	.word	0x40022100
 8004d28:	40022300 	.word	0x40022300
 8004d2c:	58026300 	.word	0x58026300
 8004d30:	fffff0fe 	.word	0xfffff0fe
 8004d34:	08005607 	.word	0x08005607
 8004d38:	080056df 	.word	0x080056df
 8004d3c:	080056fb 	.word	0x080056fb

08004d40 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004d7c:	b590      	push	{r4, r7, lr}
 8004d7e:	b0a1      	sub	sp, #132	; 0x84
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4a65      	ldr	r2, [pc, #404]	; (8004f2c <HAL_ADC_ConfigChannel+0x1b0>)
 8004d96:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d101      	bne.n	8004da6 <HAL_ADC_ConfigChannel+0x2a>
 8004da2:	2302      	movs	r3, #2
 8004da4:	e32e      	b.n	8005404 <HAL_ADC_ConfigChannel+0x688>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fd38 	bl	8004828 <LL_ADC_REG_IsConversionOngoing>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f040 8313 	bne.w	80053e6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	db2c      	blt.n	8004e22 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d108      	bne.n	8004de6 <HAL_ADC_ConfigChannel+0x6a>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	0e9b      	lsrs	r3, r3, #26
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	2201      	movs	r2, #1
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	e016      	b.n	8004e14 <HAL_ADC_ConfigChannel+0x98>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dee:	fa93 f3a3 	rbit	r3, r3
 8004df2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004df6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004df8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004dfe:	2320      	movs	r3, #32
 8004e00:	e003      	b.n	8004e0a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004e02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e04:	fab3 f383 	clz	r3, r3
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	2201      	movs	r2, #1
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6812      	ldr	r2, [r2, #0]
 8004e18:	69d1      	ldr	r1, [r2, #28]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6812      	ldr	r2, [r2, #0]
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6859      	ldr	r1, [r3, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f7ff fbad 	bl	800458e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff fcf5 	bl	8004828 <LL_ADC_REG_IsConversionOngoing>
 8004e3e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff fd02 	bl	800484e <LL_ADC_INJ_IsConversionOngoing>
 8004e4a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f040 80b8 	bne.w	8004fc4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f040 80b4 	bne.w	8004fc4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	6819      	ldr	r1, [r3, #0]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f7ff fbcf 	bl	800460c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004e6e:	4b30      	ldr	r3, [pc, #192]	; (8004f30 <HAL_ADC_ConfigChannel+0x1b4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004e76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e7a:	d10b      	bne.n	8004e94 <HAL_ADC_ConfigChannel+0x118>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	695a      	ldr	r2, [r3, #20]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	089b      	lsrs	r3, r3, #2
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	e01d      	b.n	8004ed0 <HAL_ADC_ConfigChannel+0x154>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0310 	and.w	r3, r3, #16
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10b      	bne.n	8004eba <HAL_ADC_ConfigChannel+0x13e>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	089b      	lsrs	r3, r3, #2
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	e00a      	b.n	8004ed0 <HAL_ADC_ConfigChannel+0x154>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	695a      	ldr	r2, [r3, #20]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	089b      	lsrs	r3, r3, #2
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d02c      	beq.n	8004f34 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6919      	ldr	r1, [r3, #16]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ee8:	f7ff faea 	bl	80044c0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6818      	ldr	r0, [r3, #0]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	6919      	ldr	r1, [r3, #16]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	7e5b      	ldrb	r3, [r3, #25]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d102      	bne.n	8004f02 <HAL_ADC_ConfigChannel+0x186>
 8004efc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f00:	e000      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x188>
 8004f02:	2300      	movs	r3, #0
 8004f04:	461a      	mov	r2, r3
 8004f06:	f7ff fb14 	bl	8004532 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6818      	ldr	r0, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	6919      	ldr	r1, [r3, #16]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	7e1b      	ldrb	r3, [r3, #24]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d102      	bne.n	8004f20 <HAL_ADC_ConfigChannel+0x1a4>
 8004f1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f1e:	e000      	b.n	8004f22 <HAL_ADC_ConfigChannel+0x1a6>
 8004f20:	2300      	movs	r3, #0
 8004f22:	461a      	mov	r2, r3
 8004f24:	f7ff faec 	bl	8004500 <LL_ADC_SetDataRightShift>
 8004f28:	e04c      	b.n	8004fc4 <HAL_ADC_ConfigChannel+0x248>
 8004f2a:	bf00      	nop
 8004f2c:	47ff0000 	.word	0x47ff0000
 8004f30:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	069b      	lsls	r3, r3, #26
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d107      	bne.n	8004f58 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f56:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	069b      	lsls	r3, r3, #26
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d107      	bne.n	8004f7c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f7a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	069b      	lsls	r3, r3, #26
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d107      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f9e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	069b      	lsls	r3, r3, #26
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d107      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004fc2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff fbf3 	bl	80047b4 <LL_ADC_IsEnabled>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f040 8211 	bne.w	80053f8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	6819      	ldr	r1, [r3, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f7ff fb3e 	bl	8004664 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	4aa1      	ldr	r2, [pc, #644]	; (8005274 <HAL_ADC_ConfigChannel+0x4f8>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	f040 812e 	bne.w	8005250 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10b      	bne.n	800501c <HAL_ADC_ConfigChannel+0x2a0>
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	0e9b      	lsrs	r3, r3, #26
 800500a:	3301      	adds	r3, #1
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	2b09      	cmp	r3, #9
 8005012:	bf94      	ite	ls
 8005014:	2301      	movls	r3, #1
 8005016:	2300      	movhi	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	e019      	b.n	8005050 <HAL_ADC_ConfigChannel+0x2d4>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005024:	fa93 f3a3 	rbit	r3, r3
 8005028:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800502a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800502e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8005034:	2320      	movs	r3, #32
 8005036:	e003      	b.n	8005040 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8005038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800503a:	fab3 f383 	clz	r3, r3
 800503e:	b2db      	uxtb	r3, r3
 8005040:	3301      	adds	r3, #1
 8005042:	f003 031f 	and.w	r3, r3, #31
 8005046:	2b09      	cmp	r3, #9
 8005048:	bf94      	ite	ls
 800504a:	2301      	movls	r3, #1
 800504c:	2300      	movhi	r3, #0
 800504e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005050:	2b00      	cmp	r3, #0
 8005052:	d079      	beq.n	8005148 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800505c:	2b00      	cmp	r3, #0
 800505e:	d107      	bne.n	8005070 <HAL_ADC_ConfigChannel+0x2f4>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	0e9b      	lsrs	r3, r3, #26
 8005066:	3301      	adds	r3, #1
 8005068:	069b      	lsls	r3, r3, #26
 800506a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800506e:	e015      	b.n	800509c <HAL_ADC_ConfigChannel+0x320>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005078:	fa93 f3a3 	rbit	r3, r3
 800507c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800507e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005080:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8005088:	2320      	movs	r3, #32
 800508a:	e003      	b.n	8005094 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800508c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800508e:	fab3 f383 	clz	r3, r3
 8005092:	b2db      	uxtb	r3, r3
 8005094:	3301      	adds	r3, #1
 8005096:	069b      	lsls	r3, r3, #26
 8005098:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d109      	bne.n	80050bc <HAL_ADC_ConfigChannel+0x340>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	0e9b      	lsrs	r3, r3, #26
 80050ae:	3301      	adds	r3, #1
 80050b0:	f003 031f 	and.w	r3, r3, #31
 80050b4:	2101      	movs	r1, #1
 80050b6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ba:	e017      	b.n	80050ec <HAL_ADC_ConfigChannel+0x370>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c4:	fa93 f3a3 	rbit	r3, r3
 80050c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80050ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050cc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80050ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80050d4:	2320      	movs	r3, #32
 80050d6:	e003      	b.n	80050e0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80050d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050da:	fab3 f383 	clz	r3, r3
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	3301      	adds	r3, #1
 80050e2:	f003 031f 	and.w	r3, r3, #31
 80050e6:	2101      	movs	r1, #1
 80050e8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ec:	ea42 0103 	orr.w	r1, r2, r3
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <HAL_ADC_ConfigChannel+0x396>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	0e9b      	lsrs	r3, r3, #26
 8005102:	3301      	adds	r3, #1
 8005104:	f003 021f 	and.w	r2, r3, #31
 8005108:	4613      	mov	r3, r2
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	4413      	add	r3, r2
 800510e:	051b      	lsls	r3, r3, #20
 8005110:	e018      	b.n	8005144 <HAL_ADC_ConfigChannel+0x3c8>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511a:	fa93 f3a3 	rbit	r3, r3
 800511e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800512a:	2320      	movs	r3, #32
 800512c:	e003      	b.n	8005136 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	fab3 f383 	clz	r3, r3
 8005134:	b2db      	uxtb	r3, r3
 8005136:	3301      	adds	r3, #1
 8005138:	f003 021f 	and.w	r2, r3, #31
 800513c:	4613      	mov	r3, r2
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	4413      	add	r3, r2
 8005142:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005144:	430b      	orrs	r3, r1
 8005146:	e07e      	b.n	8005246 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005150:	2b00      	cmp	r3, #0
 8005152:	d107      	bne.n	8005164 <HAL_ADC_ConfigChannel+0x3e8>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	0e9b      	lsrs	r3, r3, #26
 800515a:	3301      	adds	r3, #1
 800515c:	069b      	lsls	r3, r3, #26
 800515e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005162:	e015      	b.n	8005190 <HAL_ADC_ConfigChannel+0x414>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	fa93 f3a3 	rbit	r3, r3
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800517c:	2320      	movs	r3, #32
 800517e:	e003      	b.n	8005188 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005182:	fab3 f383 	clz	r3, r3
 8005186:	b2db      	uxtb	r3, r3
 8005188:	3301      	adds	r3, #1
 800518a:	069b      	lsls	r3, r3, #26
 800518c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005198:	2b00      	cmp	r3, #0
 800519a:	d109      	bne.n	80051b0 <HAL_ADC_ConfigChannel+0x434>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	0e9b      	lsrs	r3, r3, #26
 80051a2:	3301      	adds	r3, #1
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	2101      	movs	r1, #1
 80051aa:	fa01 f303 	lsl.w	r3, r1, r3
 80051ae:	e017      	b.n	80051e0 <HAL_ADC_ConfigChannel+0x464>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	fa93 f3a3 	rbit	r3, r3
 80051bc:	61bb      	str	r3, [r7, #24]
  return result;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80051c8:	2320      	movs	r3, #32
 80051ca:	e003      	b.n	80051d4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	fab3 f383 	clz	r3, r3
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	3301      	adds	r3, #1
 80051d6:	f003 031f 	and.w	r3, r3, #31
 80051da:	2101      	movs	r1, #1
 80051dc:	fa01 f303 	lsl.w	r3, r1, r3
 80051e0:	ea42 0103 	orr.w	r1, r2, r3
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10d      	bne.n	800520c <HAL_ADC_ConfigChannel+0x490>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	0e9b      	lsrs	r3, r3, #26
 80051f6:	3301      	adds	r3, #1
 80051f8:	f003 021f 	and.w	r2, r3, #31
 80051fc:	4613      	mov	r3, r2
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	4413      	add	r3, r2
 8005202:	3b1e      	subs	r3, #30
 8005204:	051b      	lsls	r3, r3, #20
 8005206:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800520a:	e01b      	b.n	8005244 <HAL_ADC_ConfigChannel+0x4c8>
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	fa93 f3a3 	rbit	r3, r3
 8005218:	60fb      	str	r3, [r7, #12]
  return result;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8005224:	2320      	movs	r3, #32
 8005226:	e003      	b.n	8005230 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	fab3 f383 	clz	r3, r3
 800522e:	b2db      	uxtb	r3, r3
 8005230:	3301      	adds	r3, #1
 8005232:	f003 021f 	and.w	r2, r3, #31
 8005236:	4613      	mov	r3, r2
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	4413      	add	r3, r2
 800523c:	3b1e      	subs	r3, #30
 800523e:	051b      	lsls	r3, r3, #20
 8005240:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005244:	430b      	orrs	r3, r1
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	6892      	ldr	r2, [r2, #8]
 800524a:	4619      	mov	r1, r3
 800524c:	f7ff f9de 	bl	800460c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	f280 80cf 	bge.w	80053f8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a06      	ldr	r2, [pc, #24]	; (8005278 <HAL_ADC_ConfigChannel+0x4fc>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_ADC_ConfigChannel+0x4f2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a04      	ldr	r2, [pc, #16]	; (800527c <HAL_ADC_ConfigChannel+0x500>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d10a      	bne.n	8005284 <HAL_ADC_ConfigChannel+0x508>
 800526e:	4b04      	ldr	r3, [pc, #16]	; (8005280 <HAL_ADC_ConfigChannel+0x504>)
 8005270:	e009      	b.n	8005286 <HAL_ADC_ConfigChannel+0x50a>
 8005272:	bf00      	nop
 8005274:	47ff0000 	.word	0x47ff0000
 8005278:	40022000 	.word	0x40022000
 800527c:	40022100 	.word	0x40022100
 8005280:	40022300 	.word	0x40022300
 8005284:	4b61      	ldr	r3, [pc, #388]	; (800540c <HAL_ADC_ConfigChannel+0x690>)
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff f90c 	bl	80044a4 <LL_ADC_GetCommonPathInternalCh>
 800528c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a5f      	ldr	r2, [pc, #380]	; (8005410 <HAL_ADC_ConfigChannel+0x694>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_ADC_ConfigChannel+0x526>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a5d      	ldr	r2, [pc, #372]	; (8005414 <HAL_ADC_ConfigChannel+0x698>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d10e      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x544>
 80052a2:	485b      	ldr	r0, [pc, #364]	; (8005410 <HAL_ADC_ConfigChannel+0x694>)
 80052a4:	f7ff fa86 	bl	80047b4 <LL_ADC_IsEnabled>
 80052a8:	4604      	mov	r4, r0
 80052aa:	485a      	ldr	r0, [pc, #360]	; (8005414 <HAL_ADC_ConfigChannel+0x698>)
 80052ac:	f7ff fa82 	bl	80047b4 <LL_ADC_IsEnabled>
 80052b0:	4603      	mov	r3, r0
 80052b2:	4323      	orrs	r3, r4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bf0c      	ite	eq
 80052b8:	2301      	moveq	r3, #1
 80052ba:	2300      	movne	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	e008      	b.n	80052d2 <HAL_ADC_ConfigChannel+0x556>
 80052c0:	4855      	ldr	r0, [pc, #340]	; (8005418 <HAL_ADC_ConfigChannel+0x69c>)
 80052c2:	f7ff fa77 	bl	80047b4 <LL_ADC_IsEnabled>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bf0c      	ite	eq
 80052cc:	2301      	moveq	r3, #1
 80052ce:	2300      	movne	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d07d      	beq.n	80053d2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a50      	ldr	r2, [pc, #320]	; (800541c <HAL_ADC_ConfigChannel+0x6a0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d130      	bne.n	8005342 <HAL_ADC_ConfigChannel+0x5c6>
 80052e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d12b      	bne.n	8005342 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a4a      	ldr	r2, [pc, #296]	; (8005418 <HAL_ADC_ConfigChannel+0x69c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	f040 8081 	bne.w	80053f8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a45      	ldr	r2, [pc, #276]	; (8005410 <HAL_ADC_ConfigChannel+0x694>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_ADC_ConfigChannel+0x58e>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a43      	ldr	r2, [pc, #268]	; (8005414 <HAL_ADC_ConfigChannel+0x698>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d101      	bne.n	800530e <HAL_ADC_ConfigChannel+0x592>
 800530a:	4a45      	ldr	r2, [pc, #276]	; (8005420 <HAL_ADC_ConfigChannel+0x6a4>)
 800530c:	e000      	b.n	8005310 <HAL_ADC_ConfigChannel+0x594>
 800530e:	4a3f      	ldr	r2, [pc, #252]	; (800540c <HAL_ADC_ConfigChannel+0x690>)
 8005310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005312:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f7ff f8b0 	bl	800447e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800531e:	4b41      	ldr	r3, [pc, #260]	; (8005424 <HAL_ADC_ConfigChannel+0x6a8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	099b      	lsrs	r3, r3, #6
 8005324:	4a40      	ldr	r2, [pc, #256]	; (8005428 <HAL_ADC_ConfigChannel+0x6ac>)
 8005326:	fba2 2303 	umull	r2, r3, r2, r3
 800532a:	099b      	lsrs	r3, r3, #6
 800532c:	3301      	adds	r3, #1
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005332:	e002      	b.n	800533a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	3b01      	subs	r3, #1
 8005338:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1f9      	bne.n	8005334 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005340:	e05a      	b.n	80053f8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a39      	ldr	r2, [pc, #228]	; (800542c <HAL_ADC_ConfigChannel+0x6b0>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d11e      	bne.n	800538a <HAL_ADC_ConfigChannel+0x60e>
 800534c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d119      	bne.n	800538a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a2f      	ldr	r2, [pc, #188]	; (8005418 <HAL_ADC_ConfigChannel+0x69c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d14b      	bne.n	80053f8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a2a      	ldr	r2, [pc, #168]	; (8005410 <HAL_ADC_ConfigChannel+0x694>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d004      	beq.n	8005374 <HAL_ADC_ConfigChannel+0x5f8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a29      	ldr	r2, [pc, #164]	; (8005414 <HAL_ADC_ConfigChannel+0x698>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d101      	bne.n	8005378 <HAL_ADC_ConfigChannel+0x5fc>
 8005374:	4a2a      	ldr	r2, [pc, #168]	; (8005420 <HAL_ADC_ConfigChannel+0x6a4>)
 8005376:	e000      	b.n	800537a <HAL_ADC_ConfigChannel+0x5fe>
 8005378:	4a24      	ldr	r2, [pc, #144]	; (800540c <HAL_ADC_ConfigChannel+0x690>)
 800537a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005380:	4619      	mov	r1, r3
 8005382:	4610      	mov	r0, r2
 8005384:	f7ff f87b 	bl	800447e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005388:	e036      	b.n	80053f8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a28      	ldr	r2, [pc, #160]	; (8005430 <HAL_ADC_ConfigChannel+0x6b4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d131      	bne.n	80053f8 <HAL_ADC_ConfigChannel+0x67c>
 8005394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d12c      	bne.n	80053f8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1d      	ldr	r2, [pc, #116]	; (8005418 <HAL_ADC_ConfigChannel+0x69c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d127      	bne.n	80053f8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a18      	ldr	r2, [pc, #96]	; (8005410 <HAL_ADC_ConfigChannel+0x694>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d004      	beq.n	80053bc <HAL_ADC_ConfigChannel+0x640>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a17      	ldr	r2, [pc, #92]	; (8005414 <HAL_ADC_ConfigChannel+0x698>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d101      	bne.n	80053c0 <HAL_ADC_ConfigChannel+0x644>
 80053bc:	4a18      	ldr	r2, [pc, #96]	; (8005420 <HAL_ADC_ConfigChannel+0x6a4>)
 80053be:	e000      	b.n	80053c2 <HAL_ADC_ConfigChannel+0x646>
 80053c0:	4a12      	ldr	r2, [pc, #72]	; (800540c <HAL_ADC_ConfigChannel+0x690>)
 80053c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80053c8:	4619      	mov	r1, r3
 80053ca:	4610      	mov	r0, r2
 80053cc:	f7ff f857 	bl	800447e <LL_ADC_SetCommonPathInternalCh>
 80053d0:	e012      	b.n	80053f8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d6:	f043 0220 	orr.w	r2, r3, #32
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80053e4:	e008      	b.n	80053f8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ea:	f043 0220 	orr.w	r2, r3, #32
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005400:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005404:	4618      	mov	r0, r3
 8005406:	3784      	adds	r7, #132	; 0x84
 8005408:	46bd      	mov	sp, r7
 800540a:	bd90      	pop	{r4, r7, pc}
 800540c:	58026300 	.word	0x58026300
 8005410:	40022000 	.word	0x40022000
 8005414:	40022100 	.word	0x40022100
 8005418:	58026000 	.word	0x58026000
 800541c:	cb840000 	.word	0xcb840000
 8005420:	40022300 	.word	0x40022300
 8005424:	24000088 	.word	0x24000088
 8005428:	053e2d63 	.word	0x053e2d63
 800542c:	c7520000 	.word	0xc7520000
 8005430:	cfb80000 	.word	0xcfb80000

08005434 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff f9b7 	bl	80047b4 <LL_ADC_IsEnabled>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d16e      	bne.n	800552a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	4b38      	ldr	r3, [pc, #224]	; (8005534 <ADC_Enable+0x100>)
 8005454:	4013      	ands	r3, r2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00d      	beq.n	8005476 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545e:	f043 0210 	orr.w	r2, r3, #16
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546a:	f043 0201 	orr.w	r2, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e05a      	b.n	800552c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7ff f972 	bl	8004764 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005480:	f7fe ffbc 	bl	80043fc <HAL_GetTick>
 8005484:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a2b      	ldr	r2, [pc, #172]	; (8005538 <ADC_Enable+0x104>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <ADC_Enable+0x66>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a29      	ldr	r2, [pc, #164]	; (800553c <ADC_Enable+0x108>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d101      	bne.n	800549e <ADC_Enable+0x6a>
 800549a:	4b29      	ldr	r3, [pc, #164]	; (8005540 <ADC_Enable+0x10c>)
 800549c:	e000      	b.n	80054a0 <ADC_Enable+0x6c>
 800549e:	4b29      	ldr	r3, [pc, #164]	; (8005544 <ADC_Enable+0x110>)
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff f903 	bl	80046ac <LL_ADC_GetMultimode>
 80054a6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a23      	ldr	r2, [pc, #140]	; (800553c <ADC_Enable+0x108>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d002      	beq.n	80054b8 <ADC_Enable+0x84>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	e000      	b.n	80054ba <ADC_Enable+0x86>
 80054b8:	4b1f      	ldr	r3, [pc, #124]	; (8005538 <ADC_Enable+0x104>)
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6812      	ldr	r2, [r2, #0]
 80054be:	4293      	cmp	r3, r2
 80054c0:	d02c      	beq.n	800551c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d130      	bne.n	800552a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054c8:	e028      	b.n	800551c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff f970 	bl	80047b4 <LL_ADC_IsEnabled>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d104      	bne.n	80054e4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff f940 	bl	8004764 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80054e4:	f7fe ff8a 	bl	80043fc <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d914      	bls.n	800551c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d00d      	beq.n	800551c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005504:	f043 0210 	orr.w	r2, r3, #16
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005510:	f043 0201 	orr.w	r2, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e007      	b.n	800552c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b01      	cmp	r3, #1
 8005528:	d1cf      	bne.n	80054ca <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	8000003f 	.word	0x8000003f
 8005538:	40022000 	.word	0x40022000
 800553c:	40022100 	.word	0x40022100
 8005540:	40022300 	.word	0x40022300
 8005544:	58026300 	.word	0x58026300

08005548 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff f940 	bl	80047da <LL_ADC_IsDisableOngoing>
 800555a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff f927 	bl	80047b4 <LL_ADC_IsEnabled>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d047      	beq.n	80055fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d144      	bne.n	80055fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f003 030d 	and.w	r3, r3, #13
 800557c:	2b01      	cmp	r3, #1
 800557e:	d10c      	bne.n	800559a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff f901 	bl	800478c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2203      	movs	r2, #3
 8005590:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005592:	f7fe ff33 	bl	80043fc <HAL_GetTick>
 8005596:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005598:	e029      	b.n	80055ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	f043 0210 	orr.w	r2, r3, #16
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055aa:	f043 0201 	orr.w	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e023      	b.n	80055fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80055b6:	f7fe ff21 	bl	80043fc <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d914      	bls.n	80055ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00d      	beq.n	80055ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d6:	f043 0210 	orr.w	r2, r3, #16
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e2:	f043 0201 	orr.w	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e007      	b.n	80055fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1dc      	bne.n	80055b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005618:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800561c:	2b00      	cmp	r3, #0
 800561e:	d14b      	bne.n	80056b8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005624:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d021      	beq.n	800567e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe ff92 	bl	8004568 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d032      	beq.n	80056b0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d12b      	bne.n	80056b0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d11f      	bne.n	80056b0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005674:	f043 0201 	orr.w	r2, r3, #1
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	655a      	str	r2, [r3, #84]	; 0x54
 800567c:	e018      	b.n	80056b0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d111      	bne.n	80056b0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005690:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d105      	bne.n	80056b0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a8:	f043 0201 	orr.w	r2, r3, #1
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f7ff fb45 	bl	8004d40 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80056b6:	e00e      	b.n	80056d6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f7ff fb4f 	bl	8004d68 <HAL_ADC_ErrorCallback>
}
 80056ca:	e004      	b.n	80056d6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
}
 80056d6:	bf00      	nop
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b084      	sub	sp, #16
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f7ff fb31 	bl	8004d54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056f2:	bf00      	nop
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b084      	sub	sp, #16
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005718:	f043 0204 	orr.w	r2, r3, #4
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7ff fb21 	bl	8004d68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a7a      	ldr	r2, [pc, #488]	; (8005928 <ADC_ConfigureBoostMode+0x1f8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d004      	beq.n	800574c <ADC_ConfigureBoostMode+0x1c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a79      	ldr	r2, [pc, #484]	; (800592c <ADC_ConfigureBoostMode+0x1fc>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d109      	bne.n	8005760 <ADC_ConfigureBoostMode+0x30>
 800574c:	4b78      	ldr	r3, [pc, #480]	; (8005930 <ADC_ConfigureBoostMode+0x200>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005754:	2b00      	cmp	r3, #0
 8005756:	bf14      	ite	ne
 8005758:	2301      	movne	r3, #1
 800575a:	2300      	moveq	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	e008      	b.n	8005772 <ADC_ConfigureBoostMode+0x42>
 8005760:	4b74      	ldr	r3, [pc, #464]	; (8005934 <ADC_ConfigureBoostMode+0x204>)
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005768:	2b00      	cmp	r3, #0
 800576a:	bf14      	ite	ne
 800576c:	2301      	movne	r3, #1
 800576e:	2300      	moveq	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d01c      	beq.n	80057b0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005776:	f005 fd9f 	bl	800b2b8 <HAL_RCC_GetHCLKFreq>
 800577a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005784:	d010      	beq.n	80057a8 <ADC_ConfigureBoostMode+0x78>
 8005786:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800578a:	d873      	bhi.n	8005874 <ADC_ConfigureBoostMode+0x144>
 800578c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005790:	d002      	beq.n	8005798 <ADC_ConfigureBoostMode+0x68>
 8005792:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005796:	d16d      	bne.n	8005874 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	60fb      	str	r3, [r7, #12]
        break;
 80057a6:	e068      	b.n	800587a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	089b      	lsrs	r3, r3, #2
 80057ac:	60fb      	str	r3, [r7, #12]
        break;
 80057ae:	e064      	b.n	800587a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80057b0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80057b4:	f04f 0100 	mov.w	r1, #0
 80057b8:	f007 f826 	bl	800c808 <HAL_RCCEx_GetPeriphCLKFreq>
 80057bc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80057c6:	d051      	beq.n	800586c <ADC_ConfigureBoostMode+0x13c>
 80057c8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80057cc:	d854      	bhi.n	8005878 <ADC_ConfigureBoostMode+0x148>
 80057ce:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80057d2:	d047      	beq.n	8005864 <ADC_ConfigureBoostMode+0x134>
 80057d4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80057d8:	d84e      	bhi.n	8005878 <ADC_ConfigureBoostMode+0x148>
 80057da:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80057de:	d03d      	beq.n	800585c <ADC_ConfigureBoostMode+0x12c>
 80057e0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80057e4:	d848      	bhi.n	8005878 <ADC_ConfigureBoostMode+0x148>
 80057e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057ea:	d033      	beq.n	8005854 <ADC_ConfigureBoostMode+0x124>
 80057ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057f0:	d842      	bhi.n	8005878 <ADC_ConfigureBoostMode+0x148>
 80057f2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80057f6:	d029      	beq.n	800584c <ADC_ConfigureBoostMode+0x11c>
 80057f8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80057fc:	d83c      	bhi.n	8005878 <ADC_ConfigureBoostMode+0x148>
 80057fe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005802:	d01a      	beq.n	800583a <ADC_ConfigureBoostMode+0x10a>
 8005804:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005808:	d836      	bhi.n	8005878 <ADC_ConfigureBoostMode+0x148>
 800580a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800580e:	d014      	beq.n	800583a <ADC_ConfigureBoostMode+0x10a>
 8005810:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005814:	d830      	bhi.n	8005878 <ADC_ConfigureBoostMode+0x148>
 8005816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800581a:	d00e      	beq.n	800583a <ADC_ConfigureBoostMode+0x10a>
 800581c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005820:	d82a      	bhi.n	8005878 <ADC_ConfigureBoostMode+0x148>
 8005822:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005826:	d008      	beq.n	800583a <ADC_ConfigureBoostMode+0x10a>
 8005828:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800582c:	d824      	bhi.n	8005878 <ADC_ConfigureBoostMode+0x148>
 800582e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005832:	d002      	beq.n	800583a <ADC_ConfigureBoostMode+0x10a>
 8005834:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005838:	d11e      	bne.n	8005878 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	0c9b      	lsrs	r3, r3, #18
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	fbb2 f3f3 	udiv	r3, r2, r3
 8005848:	60fb      	str	r3, [r7, #12]
        break;
 800584a:	e016      	b.n	800587a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	091b      	lsrs	r3, r3, #4
 8005850:	60fb      	str	r3, [r7, #12]
        break;
 8005852:	e012      	b.n	800587a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	60fb      	str	r3, [r7, #12]
        break;
 800585a:	e00e      	b.n	800587a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	099b      	lsrs	r3, r3, #6
 8005860:	60fb      	str	r3, [r7, #12]
        break;
 8005862:	e00a      	b.n	800587a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	09db      	lsrs	r3, r3, #7
 8005868:	60fb      	str	r3, [r7, #12]
        break;
 800586a:	e006      	b.n	800587a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	0a1b      	lsrs	r3, r3, #8
 8005870:	60fb      	str	r3, [r7, #12]
        break;
 8005872:	e002      	b.n	800587a <ADC_ConfigureBoostMode+0x14a>
        break;
 8005874:	bf00      	nop
 8005876:	e000      	b.n	800587a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005878:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800587a:	f7fe fdcb 	bl	8004414 <HAL_GetREVID>
 800587e:	4603      	mov	r3, r0
 8005880:	f241 0203 	movw	r2, #4099	; 0x1003
 8005884:	4293      	cmp	r3, r2
 8005886:	d815      	bhi.n	80058b4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4a2b      	ldr	r2, [pc, #172]	; (8005938 <ADC_ConfigureBoostMode+0x208>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d908      	bls.n	80058a2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800589e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80058a0:	e03e      	b.n	8005920 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058b0:	609a      	str	r2, [r3, #8]
}
 80058b2:	e035      	b.n	8005920 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	085b      	lsrs	r3, r3, #1
 80058b8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4a1f      	ldr	r2, [pc, #124]	; (800593c <ADC_ConfigureBoostMode+0x20c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d808      	bhi.n	80058d4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80058d0:	609a      	str	r2, [r3, #8]
}
 80058d2:	e025      	b.n	8005920 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <ADC_ConfigureBoostMode+0x210>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d80a      	bhi.n	80058f2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058ee:	609a      	str	r2, [r3, #8]
}
 80058f0:	e016      	b.n	8005920 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4a13      	ldr	r2, [pc, #76]	; (8005944 <ADC_ConfigureBoostMode+0x214>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d80a      	bhi.n	8005910 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590c:	609a      	str	r2, [r3, #8]
}
 800590e:	e007      	b.n	8005920 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800591e:	609a      	str	r2, [r3, #8]
}
 8005920:	bf00      	nop
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40022000 	.word	0x40022000
 800592c:	40022100 	.word	0x40022100
 8005930:	40022300 	.word	0x40022300
 8005934:	58026300 	.word	0x58026300
 8005938:	01312d00 	.word	0x01312d00
 800593c:	005f5e10 	.word	0x005f5e10
 8005940:	00bebc20 	.word	0x00bebc20
 8005944:	017d7840 	.word	0x017d7840

08005948 <LL_ADC_IsEnabled>:
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <LL_ADC_IsEnabled+0x18>
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <LL_ADC_IsEnabled+0x1a>
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
	...

08005970 <LL_ADC_StartCalibration>:
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <LL_ADC_StartCalibration+0x38>)
 8005982:	4013      	ands	r3, r2
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005990:	430a      	orrs	r2, r1
 8005992:	4313      	orrs	r3, r2
 8005994:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	609a      	str	r2, [r3, #8]
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	3ffeffc0 	.word	0x3ffeffc0

080059ac <LL_ADC_IsCalibrationOnGoing>:
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c0:	d101      	bne.n	80059c6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <LL_ADC_REG_IsConversionOngoing>:
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d101      	bne.n	80059ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80059e8:	2301      	movs	r3, #1
 80059ea:	e000      	b.n	80059ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
	...

080059fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d101      	bne.n	8005a1a <HAL_ADCEx_Calibration_Start+0x1e>
 8005a16:	2302      	movs	r3, #2
 8005a18:	e04c      	b.n	8005ab4 <HAL_ADCEx_Calibration_Start+0xb8>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f7ff fd90 	bl	8005548 <ADC_Disable>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d135      	bne.n	8005a9e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a36:	4b21      	ldr	r3, [pc, #132]	; (8005abc <HAL_ADCEx_Calibration_Start+0xc0>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	f043 0202 	orr.w	r2, r3, #2
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff ff90 	bl	8005970 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005a50:	e014      	b.n	8005a7c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	3301      	adds	r3, #1
 8005a56:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	4a19      	ldr	r2, [pc, #100]	; (8005ac0 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d30d      	bcc.n	8005a7c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a64:	f023 0312 	bic.w	r3, r3, #18
 8005a68:	f043 0210 	orr.w	r2, r3, #16
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e01b      	b.n	8005ab4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff ff93 	bl	80059ac <LL_ADC_IsCalibrationOnGoing>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e2      	bne.n	8005a52 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a90:	f023 0303 	bic.w	r3, r3, #3
 8005a94:	f043 0201 	orr.w	r2, r3, #1
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	655a      	str	r2, [r3, #84]	; 0x54
 8005a9c:	e005      	b.n	8005aaa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa2:	f043 0210 	orr.w	r2, r3, #16
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	ffffeefd 	.word	0xffffeefd
 8005ac0:	25c3f800 	.word	0x25c3f800

08005ac4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005ac4:	b590      	push	{r4, r7, lr}
 8005ac6:	b09f      	sub	sp, #124	; 0x7c
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e0be      	b.n	8005c60 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005aea:	2300      	movs	r3, #0
 8005aec:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a5c      	ldr	r2, [pc, #368]	; (8005c68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d102      	bne.n	8005b02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005afc:	4b5b      	ldr	r3, [pc, #364]	; (8005c6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005afe:	60bb      	str	r3, [r7, #8]
 8005b00:	e001      	b.n	8005b06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005b02:	2300      	movs	r3, #0
 8005b04:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10b      	bne.n	8005b24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b10:	f043 0220 	orr.w	r2, r3, #32
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e09d      	b.n	8005c60 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff ff54 	bl	80059d4 <LL_ADC_REG_IsConversionOngoing>
 8005b2c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff ff4e 	bl	80059d4 <LL_ADC_REG_IsConversionOngoing>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d17f      	bne.n	8005c3e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d17c      	bne.n	8005c3e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a47      	ldr	r2, [pc, #284]	; (8005c68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d004      	beq.n	8005b58 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a46      	ldr	r2, [pc, #280]	; (8005c6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d101      	bne.n	8005b5c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005b58:	4b45      	ldr	r3, [pc, #276]	; (8005c70 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005b5a:	e000      	b.n	8005b5e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005b5c:	4b45      	ldr	r3, [pc, #276]	; (8005c74 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005b5e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d039      	beq.n	8005bdc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	431a      	orrs	r2, r3
 8005b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b78:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a3a      	ldr	r2, [pc, #232]	; (8005c68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d004      	beq.n	8005b8e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a38      	ldr	r2, [pc, #224]	; (8005c6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d10e      	bne.n	8005bac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005b8e:	4836      	ldr	r0, [pc, #216]	; (8005c68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005b90:	f7ff feda 	bl	8005948 <LL_ADC_IsEnabled>
 8005b94:	4604      	mov	r4, r0
 8005b96:	4835      	ldr	r0, [pc, #212]	; (8005c6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005b98:	f7ff fed6 	bl	8005948 <LL_ADC_IsEnabled>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	4323      	orrs	r3, r4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	bf0c      	ite	eq
 8005ba4:	2301      	moveq	r3, #1
 8005ba6:	2300      	movne	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	e008      	b.n	8005bbe <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005bac:	4832      	ldr	r0, [pc, #200]	; (8005c78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005bae:	f7ff fecb 	bl	8005948 <LL_ADC_IsEnabled>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	bf0c      	ite	eq
 8005bb8:	2301      	moveq	r3, #1
 8005bba:	2300      	movne	r3, #0
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d047      	beq.n	8005c52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	4b2d      	ldr	r3, [pc, #180]	; (8005c7c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	6811      	ldr	r1, [r2, #0]
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	6892      	ldr	r2, [r2, #8]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bda:	e03a      	b.n	8005c52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a1e      	ldr	r2, [pc, #120]	; (8005c68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d004      	beq.n	8005bfc <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a1d      	ldr	r2, [pc, #116]	; (8005c6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d10e      	bne.n	8005c1a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005bfc:	481a      	ldr	r0, [pc, #104]	; (8005c68 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005bfe:	f7ff fea3 	bl	8005948 <LL_ADC_IsEnabled>
 8005c02:	4604      	mov	r4, r0
 8005c04:	4819      	ldr	r0, [pc, #100]	; (8005c6c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005c06:	f7ff fe9f 	bl	8005948 <LL_ADC_IsEnabled>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4323      	orrs	r3, r4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bf0c      	ite	eq
 8005c12:	2301      	moveq	r3, #1
 8005c14:	2300      	movne	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	e008      	b.n	8005c2c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8005c1a:	4817      	ldr	r0, [pc, #92]	; (8005c78 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005c1c:	f7ff fe94 	bl	8005948 <LL_ADC_IsEnabled>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bf0c      	ite	eq
 8005c26:	2301      	moveq	r3, #1
 8005c28:	2300      	movne	r3, #0
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d010      	beq.n	8005c52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c3a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c3c:	e009      	b.n	8005c52 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	f043 0220 	orr.w	r2, r3, #32
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005c50:	e000      	b.n	8005c54 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c52:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005c5c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	377c      	adds	r7, #124	; 0x7c
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd90      	pop	{r4, r7, pc}
 8005c68:	40022000 	.word	0x40022000
 8005c6c:	40022100 	.word	0x40022100
 8005c70:	40022300 	.word	0x40022300
 8005c74:	58026300 	.word	0x58026300
 8005c78:	58026000 	.word	0x58026000
 8005c7c:	fffff0e0 	.word	0xfffff0e0

08005c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005ca8:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cae:	4a04      	ldr	r2, [pc, #16]	; (8005cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	60d3      	str	r3, [r2, #12]
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	e000ed00 	.word	0xe000ed00
 8005cc4:	05fa0000 	.word	0x05fa0000

08005cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ccc:	4b04      	ldr	r3, [pc, #16]	; (8005ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	f003 0307 	and.w	r3, r3, #7
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	e000ed00 	.word	0xe000ed00

08005ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	db0b      	blt.n	8005d0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cf6:	88fb      	ldrh	r3, [r7, #6]
 8005cf8:	f003 021f 	and.w	r2, r3, #31
 8005cfc:	4907      	ldr	r1, [pc, #28]	; (8005d1c <__NVIC_EnableIRQ+0x38>)
 8005cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	2001      	movs	r0, #1
 8005d06:	fa00 f202 	lsl.w	r2, r0, r2
 8005d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	e000e100 	.word	0xe000e100

08005d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	4603      	mov	r3, r0
 8005d28:	6039      	str	r1, [r7, #0]
 8005d2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005d2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	db0a      	blt.n	8005d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	490c      	ldr	r1, [pc, #48]	; (8005d6c <__NVIC_SetPriority+0x4c>)
 8005d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d3e:	0112      	lsls	r2, r2, #4
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	440b      	add	r3, r1
 8005d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d48:	e00a      	b.n	8005d60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	4908      	ldr	r1, [pc, #32]	; (8005d70 <__NVIC_SetPriority+0x50>)
 8005d50:	88fb      	ldrh	r3, [r7, #6]
 8005d52:	f003 030f 	and.w	r3, r3, #15
 8005d56:	3b04      	subs	r3, #4
 8005d58:	0112      	lsls	r2, r2, #4
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	761a      	strb	r2, [r3, #24]
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	e000e100 	.word	0xe000e100
 8005d70:	e000ed00 	.word	0xe000ed00

08005d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b089      	sub	sp, #36	; 0x24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	f1c3 0307 	rsb	r3, r3, #7
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	bf28      	it	cs
 8005d92:	2304      	movcs	r3, #4
 8005d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	3304      	adds	r3, #4
 8005d9a:	2b06      	cmp	r3, #6
 8005d9c:	d902      	bls.n	8005da4 <NVIC_EncodePriority+0x30>
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	3b03      	subs	r3, #3
 8005da2:	e000      	b.n	8005da6 <NVIC_EncodePriority+0x32>
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	fa02 f303 	lsl.w	r3, r2, r3
 8005db2:	43da      	mvns	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	401a      	ands	r2, r3
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc6:	43d9      	mvns	r1, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dcc:	4313      	orrs	r3, r2
         );
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3724      	adds	r7, #36	; 0x24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7ff ff4c 	bl	8005c80 <__NVIC_SetPriorityGrouping>
}
 8005de8:	bf00      	nop
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4603      	mov	r3, r0
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005dfe:	f7ff ff63 	bl	8005cc8 <__NVIC_GetPriorityGrouping>
 8005e02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	6978      	ldr	r0, [r7, #20]
 8005e0a:	f7ff ffb3 	bl	8005d74 <NVIC_EncodePriority>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff ff82 	bl	8005d20 <__NVIC_SetPriority>
}
 8005e1c:	bf00      	nop
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff ff56 	bl	8005ce4 <__NVIC_EnableIRQ>
}
 8005e38:	bf00      	nop
 8005e3a:	3708      	adds	r7, #8
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e014      	b.n	8005e7c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	791b      	ldrb	r3, [r3, #4]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d105      	bne.n	8005e68 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fa febe 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e046      	b.n	8005f26 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	795b      	ldrb	r3, [r3, #5]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_DAC_Start+0x20>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e040      	b.n	8005f26 <HAL_DAC_Start+0xa2>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2202      	movs	r2, #2
 8005eae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6819      	ldr	r1, [r3, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	f003 0310 	and.w	r3, r3, #16
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	409a      	lsls	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10f      	bne.n	8005eee <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d11d      	bne.n	8005f18 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	605a      	str	r2, [r3, #4]
 8005eec:	e014      	b.n	8005f18 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	2102      	movs	r1, #2
 8005f00:	fa01 f303 	lsl.w	r3, r1, r3
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d107      	bne.n	8005f18 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0202 	orr.w	r2, r2, #2
 8005f16:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
	...

08005f34 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0a2      	b.n	8006092 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	795b      	ldrb	r3, [r3, #5]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_DAC_Start_DMA+0x24>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e09c      	b.n	8006092 <HAL_DAC_Start_DMA+0x15e>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2202      	movs	r2, #2
 8005f62:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d129      	bne.n	8005fbe <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	4a4b      	ldr	r2, [pc, #300]	; (800609c <HAL_DAC_Start_DMA+0x168>)
 8005f70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	4a4a      	ldr	r2, [pc, #296]	; (80060a0 <HAL_DAC_Start_DMA+0x16c>)
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	4a49      	ldr	r2, [pc, #292]	; (80060a4 <HAL_DAC_Start_DMA+0x170>)
 8005f80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f90:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <HAL_DAC_Start_DMA+0x6c>
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d005      	beq.n	8005faa <HAL_DAC_Start_DMA+0x76>
 8005f9e:	e009      	b.n	8005fb4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	613b      	str	r3, [r7, #16]
        break;
 8005fa8:	e033      	b.n	8006012 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	330c      	adds	r3, #12
 8005fb0:	613b      	str	r3, [r7, #16]
        break;
 8005fb2:	e02e      	b.n	8006012 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3310      	adds	r3, #16
 8005fba:	613b      	str	r3, [r7, #16]
        break;
 8005fbc:	e029      	b.n	8006012 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	4a39      	ldr	r2, [pc, #228]	; (80060a8 <HAL_DAC_Start_DMA+0x174>)
 8005fc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	4a38      	ldr	r2, [pc, #224]	; (80060ac <HAL_DAC_Start_DMA+0x178>)
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	4a37      	ldr	r2, [pc, #220]	; (80060b0 <HAL_DAC_Start_DMA+0x17c>)
 8005fd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005fe4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <HAL_DAC_Start_DMA+0xc0>
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d005      	beq.n	8005ffe <HAL_DAC_Start_DMA+0xca>
 8005ff2:	e009      	b.n	8006008 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3314      	adds	r3, #20
 8005ffa:	613b      	str	r3, [r7, #16]
        break;
 8005ffc:	e009      	b.n	8006012 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3318      	adds	r3, #24
 8006004:	613b      	str	r3, [r7, #16]
        break;
 8006006:	e004      	b.n	8006012 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	331c      	adds	r3, #28
 800600e:	613b      	str	r3, [r7, #16]
        break;
 8006010:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d111      	bne.n	800603c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006026:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6898      	ldr	r0, [r3, #8]
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	f000 fe67 	bl	8006d04 <HAL_DMA_Start_IT>
 8006036:	4603      	mov	r3, r0
 8006038:	75fb      	strb	r3, [r7, #23]
 800603a:	e010      	b.n	800605e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800604a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68d8      	ldr	r0, [r3, #12]
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	f000 fe55 	bl	8006d04 <HAL_DMA_Start_IT>
 800605a:	4603      	mov	r3, r0
 800605c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10c      	bne.n	8006084 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6819      	ldr	r1, [r3, #0]
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 0310 	and.w	r3, r3, #16
 8006076:	2201      	movs	r2, #1
 8006078:	409a      	lsls	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	e005      	b.n	8006090 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f043 0204 	orr.w	r2, r3, #4
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006090:	7dfb      	ldrb	r3, [r7, #23]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	08006525 	.word	0x08006525
 80060a0:	08006547 	.word	0x08006547
 80060a4:	08006563 	.word	0x08006563
 80060a8:	080065e1 	.word	0x080065e1
 80060ac:	08006603 	.word	0x08006603
 80060b0:	0800661f 	.word	0x0800661f

080060b4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e03e      	b.n	8006146 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6819      	ldr	r1, [r3, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	43da      	mvns	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	400a      	ands	r2, r1
 80060e4:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6819      	ldr	r1, [r3, #0]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	f003 0310 	and.w	r3, r3, #16
 80060f2:	2201      	movs	r2, #1
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	43da      	mvns	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	400a      	ands	r2, r1
 8006100:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10d      	bne.n	8006124 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	4618      	mov	r0, r3
 800610e:	f001 f863 	bl	80071d8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	e00c      	b.n	800613e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	4618      	mov	r0, r3
 800612a:	f001 f855 	bl	80071d8 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800613c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006164:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01d      	beq.n	80061ac <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d018      	beq.n	80061ac <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2204      	movs	r2, #4
 800617e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	f043 0201 	orr.w	r2, r3, #1
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006194:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061a4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f86f 	bl	800628a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d01d      	beq.n	80061f2 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d018      	beq.n	80061f2 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2204      	movs	r2, #4
 80061c4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f043 0202 	orr.w	r2, r3, #2
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80061da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80061ea:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f9ed 	bl	80065cc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80061f2:	bf00      	nop
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b087      	sub	sp, #28
 80061fe:	af00      	add	r7, sp, #0
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	607a      	str	r2, [r7, #4]
 8006206:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e015      	b.n	8006242 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d105      	bne.n	800622e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4413      	add	r3, r2
 8006228:	3308      	adds	r3, #8
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	e004      	b.n	8006238 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4413      	add	r3, r2
 8006234:	3314      	adds	r3, #20
 8006236:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	461a      	mov	r2, r3
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
	...

080062a0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	; 0x28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <HAL_DAC_ConfigChannel+0x1e>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e12a      	b.n	8006518 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	795b      	ldrb	r3, [r3, #5]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <HAL_DAC_ConfigChannel+0x2e>
 80062ca:	2302      	movs	r3, #2
 80062cc:	e124      	b.n	8006518 <HAL_DAC_ConfigChannel+0x278>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2201      	movs	r2, #1
 80062d2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2202      	movs	r2, #2
 80062d8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d17a      	bne.n	80063d8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80062e2:	f7fe f88b 	bl	80043fc <HAL_GetTick>
 80062e6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d13d      	bne.n	800636a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80062ee:	e018      	b.n	8006322 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80062f0:	f7fe f884 	bl	80043fc <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d911      	bls.n	8006322 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006304:	4b86      	ldr	r3, [pc, #536]	; (8006520 <HAL_DAC_ConfigChannel+0x280>)
 8006306:	4013      	ands	r3, r2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f043 0208 	orr.w	r2, r3, #8
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2203      	movs	r2, #3
 800631c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e0fa      	b.n	8006518 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006328:	4b7d      	ldr	r3, [pc, #500]	; (8006520 <HAL_DAC_ConfigChannel+0x280>)
 800632a:	4013      	ands	r3, r2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1df      	bne.n	80062f0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	6992      	ldr	r2, [r2, #24]
 8006338:	641a      	str	r2, [r3, #64]	; 0x40
 800633a:	e020      	b.n	800637e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800633c:	f7fe f85e 	bl	80043fc <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b01      	cmp	r3, #1
 8006348:	d90f      	bls.n	800636a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006350:	2b00      	cmp	r3, #0
 8006352:	da0a      	bge.n	800636a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	f043 0208 	orr.w	r2, r3, #8
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2203      	movs	r2, #3
 8006364:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e0d6      	b.n	8006518 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006370:	2b00      	cmp	r3, #0
 8006372:	dbe3      	blt.n	800633c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	6992      	ldr	r2, [r2, #24]
 800637c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f003 0310 	and.w	r3, r3, #16
 800638a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800638e:	fa01 f303 	lsl.w	r3, r1, r3
 8006392:	43db      	mvns	r3, r3
 8006394:	ea02 0103 	and.w	r1, r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	69da      	ldr	r2, [r3, #28]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f003 0310 	and.w	r3, r3, #16
 80063a2:	409a      	lsls	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f003 0310 	and.w	r3, r3, #16
 80063b8:	21ff      	movs	r1, #255	; 0xff
 80063ba:	fa01 f303 	lsl.w	r3, r1, r3
 80063be:	43db      	mvns	r3, r3
 80063c0:	ea02 0103 	and.w	r1, r2, r3
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	6a1a      	ldr	r2, [r3, #32]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	409a      	lsls	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d11d      	bne.n	800641c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f003 0310 	and.w	r3, r3, #16
 80063ee:	221f      	movs	r2, #31
 80063f0:	fa02 f303 	lsl.w	r3, r2, r3
 80063f4:	43db      	mvns	r3, r3
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	4013      	ands	r3, r2
 80063fa:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	fa02 f303 	lsl.w	r3, r2, r3
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	4313      	orrs	r3, r2
 8006412:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006422:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	2207      	movs	r2, #7
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	43db      	mvns	r3, r3
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	4013      	ands	r3, r2
 8006436:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d102      	bne.n	8006446 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8006440:	2300      	movs	r3, #0
 8006442:	627b      	str	r3, [r7, #36]	; 0x24
 8006444:	e00f      	b.n	8006466 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	2b02      	cmp	r3, #2
 800644c:	d102      	bne.n	8006454 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800644e:	2301      	movs	r3, #1
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
 8006452:	e008      	b.n	8006466 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d102      	bne.n	8006462 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800645c:	2301      	movs	r3, #1
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
 8006460:	e001      	b.n	8006466 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006462:	2300      	movs	r3, #0
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	4313      	orrs	r3, r2
 8006470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f003 0310 	and.w	r3, r3, #16
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	4313      	orrs	r3, r2
 8006486:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6819      	ldr	r1, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	43da      	mvns	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	400a      	ands	r2, r1
 80064ac:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	43db      	mvns	r3, r3
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	4013      	ands	r3, r2
 80064ca:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f003 0310 	and.w	r3, r3, #16
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	fa02 f303 	lsl.w	r3, r2, r3
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6819      	ldr	r1, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	22c0      	movs	r2, #192	; 0xc0
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	43da      	mvns	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	400a      	ands	r2, r1
 8006506:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006514:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006518:	4618      	mov	r0, r3
 800651a:	3728      	adds	r7, #40	; 0x28
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20008000 	.word	0x20008000

08006524 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f7ff fe8b 	bl	800624e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	711a      	strb	r2, [r3, #4]
}
 800653e:	bf00      	nop
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006552:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f7ff fe84 	bl	8006262 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f043 0204 	orr.w	r2, r3, #4
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f7ff fe7a 	bl	8006276 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	711a      	strb	r2, [r3, #4]
}
 8006588:	bf00      	nop
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f7ff ffce 	bl	8006590 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	711a      	strb	r2, [r3, #4]
}
 80065fa:	bf00      	nop
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7ff ffc7 	bl	80065a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006616:	bf00      	nop
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	f043 0204 	orr.w	r2, r3, #4
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f7ff ffbd 	bl	80065b8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	711a      	strb	r2, [r3, #4]
}
 8006644:	bf00      	nop
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006654:	f7fd fed2 	bl	80043fc <HAL_GetTick>
 8006658:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e316      	b.n	8006c92 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a66      	ldr	r2, [pc, #408]	; (8006804 <HAL_DMA_Init+0x1b8>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d04a      	beq.n	8006704 <HAL_DMA_Init+0xb8>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a65      	ldr	r2, [pc, #404]	; (8006808 <HAL_DMA_Init+0x1bc>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d045      	beq.n	8006704 <HAL_DMA_Init+0xb8>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a63      	ldr	r2, [pc, #396]	; (800680c <HAL_DMA_Init+0x1c0>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d040      	beq.n	8006704 <HAL_DMA_Init+0xb8>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a62      	ldr	r2, [pc, #392]	; (8006810 <HAL_DMA_Init+0x1c4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d03b      	beq.n	8006704 <HAL_DMA_Init+0xb8>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a60      	ldr	r2, [pc, #384]	; (8006814 <HAL_DMA_Init+0x1c8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d036      	beq.n	8006704 <HAL_DMA_Init+0xb8>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a5f      	ldr	r2, [pc, #380]	; (8006818 <HAL_DMA_Init+0x1cc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d031      	beq.n	8006704 <HAL_DMA_Init+0xb8>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a5d      	ldr	r2, [pc, #372]	; (800681c <HAL_DMA_Init+0x1d0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d02c      	beq.n	8006704 <HAL_DMA_Init+0xb8>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a5c      	ldr	r2, [pc, #368]	; (8006820 <HAL_DMA_Init+0x1d4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d027      	beq.n	8006704 <HAL_DMA_Init+0xb8>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a5a      	ldr	r2, [pc, #360]	; (8006824 <HAL_DMA_Init+0x1d8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d022      	beq.n	8006704 <HAL_DMA_Init+0xb8>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a59      	ldr	r2, [pc, #356]	; (8006828 <HAL_DMA_Init+0x1dc>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d01d      	beq.n	8006704 <HAL_DMA_Init+0xb8>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a57      	ldr	r2, [pc, #348]	; (800682c <HAL_DMA_Init+0x1e0>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d018      	beq.n	8006704 <HAL_DMA_Init+0xb8>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a56      	ldr	r2, [pc, #344]	; (8006830 <HAL_DMA_Init+0x1e4>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d013      	beq.n	8006704 <HAL_DMA_Init+0xb8>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a54      	ldr	r2, [pc, #336]	; (8006834 <HAL_DMA_Init+0x1e8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00e      	beq.n	8006704 <HAL_DMA_Init+0xb8>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a53      	ldr	r2, [pc, #332]	; (8006838 <HAL_DMA_Init+0x1ec>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d009      	beq.n	8006704 <HAL_DMA_Init+0xb8>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a51      	ldr	r2, [pc, #324]	; (800683c <HAL_DMA_Init+0x1f0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d004      	beq.n	8006704 <HAL_DMA_Init+0xb8>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a50      	ldr	r2, [pc, #320]	; (8006840 <HAL_DMA_Init+0x1f4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d101      	bne.n	8006708 <HAL_DMA_Init+0xbc>
 8006704:	2301      	movs	r3, #1
 8006706:	e000      	b.n	800670a <HAL_DMA_Init+0xbe>
 8006708:	2300      	movs	r3, #0
 800670a:	2b00      	cmp	r3, #0
 800670c:	f000 813b 	beq.w	8006986 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a37      	ldr	r2, [pc, #220]	; (8006804 <HAL_DMA_Init+0x1b8>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d04a      	beq.n	80067c0 <HAL_DMA_Init+0x174>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a36      	ldr	r2, [pc, #216]	; (8006808 <HAL_DMA_Init+0x1bc>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d045      	beq.n	80067c0 <HAL_DMA_Init+0x174>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a34      	ldr	r2, [pc, #208]	; (800680c <HAL_DMA_Init+0x1c0>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d040      	beq.n	80067c0 <HAL_DMA_Init+0x174>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a33      	ldr	r2, [pc, #204]	; (8006810 <HAL_DMA_Init+0x1c4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d03b      	beq.n	80067c0 <HAL_DMA_Init+0x174>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a31      	ldr	r2, [pc, #196]	; (8006814 <HAL_DMA_Init+0x1c8>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d036      	beq.n	80067c0 <HAL_DMA_Init+0x174>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a30      	ldr	r2, [pc, #192]	; (8006818 <HAL_DMA_Init+0x1cc>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d031      	beq.n	80067c0 <HAL_DMA_Init+0x174>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a2e      	ldr	r2, [pc, #184]	; (800681c <HAL_DMA_Init+0x1d0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d02c      	beq.n	80067c0 <HAL_DMA_Init+0x174>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a2d      	ldr	r2, [pc, #180]	; (8006820 <HAL_DMA_Init+0x1d4>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d027      	beq.n	80067c0 <HAL_DMA_Init+0x174>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a2b      	ldr	r2, [pc, #172]	; (8006824 <HAL_DMA_Init+0x1d8>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d022      	beq.n	80067c0 <HAL_DMA_Init+0x174>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a2a      	ldr	r2, [pc, #168]	; (8006828 <HAL_DMA_Init+0x1dc>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d01d      	beq.n	80067c0 <HAL_DMA_Init+0x174>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a28      	ldr	r2, [pc, #160]	; (800682c <HAL_DMA_Init+0x1e0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d018      	beq.n	80067c0 <HAL_DMA_Init+0x174>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a27      	ldr	r2, [pc, #156]	; (8006830 <HAL_DMA_Init+0x1e4>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d013      	beq.n	80067c0 <HAL_DMA_Init+0x174>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a25      	ldr	r2, [pc, #148]	; (8006834 <HAL_DMA_Init+0x1e8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00e      	beq.n	80067c0 <HAL_DMA_Init+0x174>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a24      	ldr	r2, [pc, #144]	; (8006838 <HAL_DMA_Init+0x1ec>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d009      	beq.n	80067c0 <HAL_DMA_Init+0x174>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a22      	ldr	r2, [pc, #136]	; (800683c <HAL_DMA_Init+0x1f0>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d004      	beq.n	80067c0 <HAL_DMA_Init+0x174>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a21      	ldr	r2, [pc, #132]	; (8006840 <HAL_DMA_Init+0x1f4>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d108      	bne.n	80067d2 <HAL_DMA_Init+0x186>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f022 0201 	bic.w	r2, r2, #1
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	e007      	b.n	80067e2 <HAL_DMA_Init+0x196>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0201 	bic.w	r2, r2, #1
 80067e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80067e2:	e02f      	b.n	8006844 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067e4:	f7fd fe0a 	bl	80043fc <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b05      	cmp	r3, #5
 80067f0:	d928      	bls.n	8006844 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2220      	movs	r2, #32
 80067f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2203      	movs	r2, #3
 80067fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e246      	b.n	8006c92 <HAL_DMA_Init+0x646>
 8006804:	40020010 	.word	0x40020010
 8006808:	40020028 	.word	0x40020028
 800680c:	40020040 	.word	0x40020040
 8006810:	40020058 	.word	0x40020058
 8006814:	40020070 	.word	0x40020070
 8006818:	40020088 	.word	0x40020088
 800681c:	400200a0 	.word	0x400200a0
 8006820:	400200b8 	.word	0x400200b8
 8006824:	40020410 	.word	0x40020410
 8006828:	40020428 	.word	0x40020428
 800682c:	40020440 	.word	0x40020440
 8006830:	40020458 	.word	0x40020458
 8006834:	40020470 	.word	0x40020470
 8006838:	40020488 	.word	0x40020488
 800683c:	400204a0 	.word	0x400204a0
 8006840:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1c8      	bne.n	80067e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4b83      	ldr	r3, [pc, #524]	; (8006a6c <HAL_DMA_Init+0x420>)
 800685e:	4013      	ands	r3, r2
 8006860:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800686a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006876:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006882:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	2b04      	cmp	r3, #4
 8006896:	d107      	bne.n	80068a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a0:	4313      	orrs	r3, r2
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80068a8:	4b71      	ldr	r3, [pc, #452]	; (8006a70 <HAL_DMA_Init+0x424>)
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	4b71      	ldr	r3, [pc, #452]	; (8006a74 <HAL_DMA_Init+0x428>)
 80068ae:	4013      	ands	r3, r2
 80068b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068b4:	d328      	bcc.n	8006908 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	2b28      	cmp	r3, #40	; 0x28
 80068bc:	d903      	bls.n	80068c6 <HAL_DMA_Init+0x27a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b2e      	cmp	r3, #46	; 0x2e
 80068c4:	d917      	bls.n	80068f6 <HAL_DMA_Init+0x2aa>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b3e      	cmp	r3, #62	; 0x3e
 80068cc:	d903      	bls.n	80068d6 <HAL_DMA_Init+0x28a>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	2b42      	cmp	r3, #66	; 0x42
 80068d4:	d90f      	bls.n	80068f6 <HAL_DMA_Init+0x2aa>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b46      	cmp	r3, #70	; 0x46
 80068dc:	d903      	bls.n	80068e6 <HAL_DMA_Init+0x29a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b48      	cmp	r3, #72	; 0x48
 80068e4:	d907      	bls.n	80068f6 <HAL_DMA_Init+0x2aa>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	2b4e      	cmp	r3, #78	; 0x4e
 80068ec:	d905      	bls.n	80068fa <HAL_DMA_Init+0x2ae>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b52      	cmp	r3, #82	; 0x52
 80068f4:	d801      	bhi.n	80068fa <HAL_DMA_Init+0x2ae>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e000      	b.n	80068fc <HAL_DMA_Init+0x2b0>
 80068fa:	2300      	movs	r3, #0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006906:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f023 0307 	bic.w	r3, r3, #7
 800691e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	4313      	orrs	r3, r2
 8006928:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	2b04      	cmp	r3, #4
 8006930:	d117      	bne.n	8006962 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00e      	beq.n	8006962 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f002 fb3f 	bl	8008fc8 <DMA_CheckFifoParam>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d008      	beq.n	8006962 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2240      	movs	r2, #64	; 0x40
 8006954:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e197      	b.n	8006c92 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f002 fa7a 	bl	8008e64 <DMA_CalcBaseAndBitshift>
 8006970:	4603      	mov	r3, r0
 8006972:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006978:	f003 031f 	and.w	r3, r3, #31
 800697c:	223f      	movs	r2, #63	; 0x3f
 800697e:	409a      	lsls	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	609a      	str	r2, [r3, #8]
 8006984:	e0cd      	b.n	8006b22 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a3b      	ldr	r2, [pc, #236]	; (8006a78 <HAL_DMA_Init+0x42c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d022      	beq.n	80069d6 <HAL_DMA_Init+0x38a>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a39      	ldr	r2, [pc, #228]	; (8006a7c <HAL_DMA_Init+0x430>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d01d      	beq.n	80069d6 <HAL_DMA_Init+0x38a>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a38      	ldr	r2, [pc, #224]	; (8006a80 <HAL_DMA_Init+0x434>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d018      	beq.n	80069d6 <HAL_DMA_Init+0x38a>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a36      	ldr	r2, [pc, #216]	; (8006a84 <HAL_DMA_Init+0x438>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d013      	beq.n	80069d6 <HAL_DMA_Init+0x38a>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a35      	ldr	r2, [pc, #212]	; (8006a88 <HAL_DMA_Init+0x43c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00e      	beq.n	80069d6 <HAL_DMA_Init+0x38a>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a33      	ldr	r2, [pc, #204]	; (8006a8c <HAL_DMA_Init+0x440>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d009      	beq.n	80069d6 <HAL_DMA_Init+0x38a>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a32      	ldr	r2, [pc, #200]	; (8006a90 <HAL_DMA_Init+0x444>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d004      	beq.n	80069d6 <HAL_DMA_Init+0x38a>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a30      	ldr	r2, [pc, #192]	; (8006a94 <HAL_DMA_Init+0x448>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d101      	bne.n	80069da <HAL_DMA_Init+0x38e>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e000      	b.n	80069dc <HAL_DMA_Init+0x390>
 80069da:	2300      	movs	r3, #0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8097 	beq.w	8006b10 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a24      	ldr	r2, [pc, #144]	; (8006a78 <HAL_DMA_Init+0x42c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d021      	beq.n	8006a30 <HAL_DMA_Init+0x3e4>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a22      	ldr	r2, [pc, #136]	; (8006a7c <HAL_DMA_Init+0x430>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d01c      	beq.n	8006a30 <HAL_DMA_Init+0x3e4>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a21      	ldr	r2, [pc, #132]	; (8006a80 <HAL_DMA_Init+0x434>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d017      	beq.n	8006a30 <HAL_DMA_Init+0x3e4>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1f      	ldr	r2, [pc, #124]	; (8006a84 <HAL_DMA_Init+0x438>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d012      	beq.n	8006a30 <HAL_DMA_Init+0x3e4>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a1e      	ldr	r2, [pc, #120]	; (8006a88 <HAL_DMA_Init+0x43c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d00d      	beq.n	8006a30 <HAL_DMA_Init+0x3e4>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a1c      	ldr	r2, [pc, #112]	; (8006a8c <HAL_DMA_Init+0x440>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d008      	beq.n	8006a30 <HAL_DMA_Init+0x3e4>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a1b      	ldr	r2, [pc, #108]	; (8006a90 <HAL_DMA_Init+0x444>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <HAL_DMA_Init+0x3e4>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a19      	ldr	r2, [pc, #100]	; (8006a94 <HAL_DMA_Init+0x448>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2202      	movs	r2, #2
 8006a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4b12      	ldr	r3, [pc, #72]	; (8006a98 <HAL_DMA_Init+0x44c>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	2b40      	cmp	r3, #64	; 0x40
 8006a58:	d020      	beq.n	8006a9c <HAL_DMA_Init+0x450>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	2b80      	cmp	r3, #128	; 0x80
 8006a60:	d102      	bne.n	8006a68 <HAL_DMA_Init+0x41c>
 8006a62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a66:	e01a      	b.n	8006a9e <HAL_DMA_Init+0x452>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	e018      	b.n	8006a9e <HAL_DMA_Init+0x452>
 8006a6c:	fe10803f 	.word	0xfe10803f
 8006a70:	5c001000 	.word	0x5c001000
 8006a74:	ffff0000 	.word	0xffff0000
 8006a78:	58025408 	.word	0x58025408
 8006a7c:	5802541c 	.word	0x5802541c
 8006a80:	58025430 	.word	0x58025430
 8006a84:	58025444 	.word	0x58025444
 8006a88:	58025458 	.word	0x58025458
 8006a8c:	5802546c 	.word	0x5802546c
 8006a90:	58025480 	.word	0x58025480
 8006a94:	58025494 	.word	0x58025494
 8006a98:	fffe000f 	.word	0xfffe000f
 8006a9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	68d2      	ldr	r2, [r2, #12]
 8006aa2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006aa4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006aac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006ab4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006abc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006ac4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006acc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	4b6e      	ldr	r3, [pc, #440]	; (8006c9c <HAL_DMA_Init+0x650>)
 8006ae4:	4413      	add	r3, r2
 8006ae6:	4a6e      	ldr	r2, [pc, #440]	; (8006ca0 <HAL_DMA_Init+0x654>)
 8006ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8006aec:	091b      	lsrs	r3, r3, #4
 8006aee:	009a      	lsls	r2, r3, #2
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f002 f9b5 	bl	8008e64 <DMA_CalcBaseAndBitshift>
 8006afa:	4603      	mov	r3, r0
 8006afc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b02:	f003 031f 	and.w	r3, r3, #31
 8006b06:	2201      	movs	r2, #1
 8006b08:	409a      	lsls	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	605a      	str	r2, [r3, #4]
 8006b0e:	e008      	b.n	8006b22 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2240      	movs	r2, #64	; 0x40
 8006b14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2203      	movs	r2, #3
 8006b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e0b7      	b.n	8006c92 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a5f      	ldr	r2, [pc, #380]	; (8006ca4 <HAL_DMA_Init+0x658>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d072      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a5d      	ldr	r2, [pc, #372]	; (8006ca8 <HAL_DMA_Init+0x65c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d06d      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a5c      	ldr	r2, [pc, #368]	; (8006cac <HAL_DMA_Init+0x660>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d068      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a5a      	ldr	r2, [pc, #360]	; (8006cb0 <HAL_DMA_Init+0x664>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d063      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a59      	ldr	r2, [pc, #356]	; (8006cb4 <HAL_DMA_Init+0x668>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d05e      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a57      	ldr	r2, [pc, #348]	; (8006cb8 <HAL_DMA_Init+0x66c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d059      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a56      	ldr	r2, [pc, #344]	; (8006cbc <HAL_DMA_Init+0x670>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d054      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a54      	ldr	r2, [pc, #336]	; (8006cc0 <HAL_DMA_Init+0x674>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d04f      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a53      	ldr	r2, [pc, #332]	; (8006cc4 <HAL_DMA_Init+0x678>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d04a      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a51      	ldr	r2, [pc, #324]	; (8006cc8 <HAL_DMA_Init+0x67c>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d045      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a50      	ldr	r2, [pc, #320]	; (8006ccc <HAL_DMA_Init+0x680>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d040      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a4e      	ldr	r2, [pc, #312]	; (8006cd0 <HAL_DMA_Init+0x684>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d03b      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a4d      	ldr	r2, [pc, #308]	; (8006cd4 <HAL_DMA_Init+0x688>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d036      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a4b      	ldr	r2, [pc, #300]	; (8006cd8 <HAL_DMA_Init+0x68c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d031      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a4a      	ldr	r2, [pc, #296]	; (8006cdc <HAL_DMA_Init+0x690>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d02c      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a48      	ldr	r2, [pc, #288]	; (8006ce0 <HAL_DMA_Init+0x694>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d027      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a47      	ldr	r2, [pc, #284]	; (8006ce4 <HAL_DMA_Init+0x698>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d022      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a45      	ldr	r2, [pc, #276]	; (8006ce8 <HAL_DMA_Init+0x69c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d01d      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a44      	ldr	r2, [pc, #272]	; (8006cec <HAL_DMA_Init+0x6a0>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d018      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a42      	ldr	r2, [pc, #264]	; (8006cf0 <HAL_DMA_Init+0x6a4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d013      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a41      	ldr	r2, [pc, #260]	; (8006cf4 <HAL_DMA_Init+0x6a8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d00e      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a3f      	ldr	r2, [pc, #252]	; (8006cf8 <HAL_DMA_Init+0x6ac>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d009      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a3e      	ldr	r2, [pc, #248]	; (8006cfc <HAL_DMA_Init+0x6b0>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d004      	beq.n	8006c12 <HAL_DMA_Init+0x5c6>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a3c      	ldr	r2, [pc, #240]	; (8006d00 <HAL_DMA_Init+0x6b4>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d101      	bne.n	8006c16 <HAL_DMA_Init+0x5ca>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <HAL_DMA_Init+0x5cc>
 8006c16:	2300      	movs	r3, #0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d032      	beq.n	8006c82 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f002 fa4f 	bl	80090c0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	2b80      	cmp	r3, #128	; 0x80
 8006c28:	d102      	bne.n	8006c30 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006c44:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d010      	beq.n	8006c70 <HAL_DMA_Init+0x624>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	2b08      	cmp	r3, #8
 8006c54:	d80c      	bhi.n	8006c70 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f002 facc 	bl	80091f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c60:	2200      	movs	r2, #0
 8006c62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006c6c:	605a      	str	r2, [r3, #4]
 8006c6e:	e008      	b.n	8006c82 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	a7fdabf8 	.word	0xa7fdabf8
 8006ca0:	cccccccd 	.word	0xcccccccd
 8006ca4:	40020010 	.word	0x40020010
 8006ca8:	40020028 	.word	0x40020028
 8006cac:	40020040 	.word	0x40020040
 8006cb0:	40020058 	.word	0x40020058
 8006cb4:	40020070 	.word	0x40020070
 8006cb8:	40020088 	.word	0x40020088
 8006cbc:	400200a0 	.word	0x400200a0
 8006cc0:	400200b8 	.word	0x400200b8
 8006cc4:	40020410 	.word	0x40020410
 8006cc8:	40020428 	.word	0x40020428
 8006ccc:	40020440 	.word	0x40020440
 8006cd0:	40020458 	.word	0x40020458
 8006cd4:	40020470 	.word	0x40020470
 8006cd8:	40020488 	.word	0x40020488
 8006cdc:	400204a0 	.word	0x400204a0
 8006ce0:	400204b8 	.word	0x400204b8
 8006ce4:	58025408 	.word	0x58025408
 8006ce8:	5802541c 	.word	0x5802541c
 8006cec:	58025430 	.word	0x58025430
 8006cf0:	58025444 	.word	0x58025444
 8006cf4:	58025458 	.word	0x58025458
 8006cf8:	5802546c 	.word	0x5802546c
 8006cfc:	58025480 	.word	0x58025480
 8006d00:	58025494 	.word	0x58025494

08006d04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e226      	b.n	800716e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d101      	bne.n	8006d2e <HAL_DMA_Start_IT+0x2a>
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e21f      	b.n	800716e <HAL_DMA_Start_IT+0x46a>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	f040 820a 	bne.w	8007158 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a68      	ldr	r2, [pc, #416]	; (8006ef8 <HAL_DMA_Start_IT+0x1f4>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d04a      	beq.n	8006df2 <HAL_DMA_Start_IT+0xee>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a66      	ldr	r2, [pc, #408]	; (8006efc <HAL_DMA_Start_IT+0x1f8>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d045      	beq.n	8006df2 <HAL_DMA_Start_IT+0xee>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a65      	ldr	r2, [pc, #404]	; (8006f00 <HAL_DMA_Start_IT+0x1fc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d040      	beq.n	8006df2 <HAL_DMA_Start_IT+0xee>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a63      	ldr	r2, [pc, #396]	; (8006f04 <HAL_DMA_Start_IT+0x200>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d03b      	beq.n	8006df2 <HAL_DMA_Start_IT+0xee>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a62      	ldr	r2, [pc, #392]	; (8006f08 <HAL_DMA_Start_IT+0x204>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d036      	beq.n	8006df2 <HAL_DMA_Start_IT+0xee>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a60      	ldr	r2, [pc, #384]	; (8006f0c <HAL_DMA_Start_IT+0x208>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d031      	beq.n	8006df2 <HAL_DMA_Start_IT+0xee>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a5f      	ldr	r2, [pc, #380]	; (8006f10 <HAL_DMA_Start_IT+0x20c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d02c      	beq.n	8006df2 <HAL_DMA_Start_IT+0xee>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a5d      	ldr	r2, [pc, #372]	; (8006f14 <HAL_DMA_Start_IT+0x210>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d027      	beq.n	8006df2 <HAL_DMA_Start_IT+0xee>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a5c      	ldr	r2, [pc, #368]	; (8006f18 <HAL_DMA_Start_IT+0x214>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d022      	beq.n	8006df2 <HAL_DMA_Start_IT+0xee>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a5a      	ldr	r2, [pc, #360]	; (8006f1c <HAL_DMA_Start_IT+0x218>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d01d      	beq.n	8006df2 <HAL_DMA_Start_IT+0xee>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a59      	ldr	r2, [pc, #356]	; (8006f20 <HAL_DMA_Start_IT+0x21c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d018      	beq.n	8006df2 <HAL_DMA_Start_IT+0xee>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a57      	ldr	r2, [pc, #348]	; (8006f24 <HAL_DMA_Start_IT+0x220>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d013      	beq.n	8006df2 <HAL_DMA_Start_IT+0xee>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a56      	ldr	r2, [pc, #344]	; (8006f28 <HAL_DMA_Start_IT+0x224>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00e      	beq.n	8006df2 <HAL_DMA_Start_IT+0xee>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a54      	ldr	r2, [pc, #336]	; (8006f2c <HAL_DMA_Start_IT+0x228>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d009      	beq.n	8006df2 <HAL_DMA_Start_IT+0xee>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a53      	ldr	r2, [pc, #332]	; (8006f30 <HAL_DMA_Start_IT+0x22c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <HAL_DMA_Start_IT+0xee>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a51      	ldr	r2, [pc, #324]	; (8006f34 <HAL_DMA_Start_IT+0x230>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d108      	bne.n	8006e04 <HAL_DMA_Start_IT+0x100>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0201 	bic.w	r2, r2, #1
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	e007      	b.n	8006e14 <HAL_DMA_Start_IT+0x110>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0201 	bic.w	r2, r2, #1
 8006e12:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	68b9      	ldr	r1, [r7, #8]
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f001 fe76 	bl	8008b0c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a34      	ldr	r2, [pc, #208]	; (8006ef8 <HAL_DMA_Start_IT+0x1f4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d04a      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x1bc>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a33      	ldr	r2, [pc, #204]	; (8006efc <HAL_DMA_Start_IT+0x1f8>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d045      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x1bc>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a31      	ldr	r2, [pc, #196]	; (8006f00 <HAL_DMA_Start_IT+0x1fc>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d040      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x1bc>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a30      	ldr	r2, [pc, #192]	; (8006f04 <HAL_DMA_Start_IT+0x200>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d03b      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x1bc>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a2e      	ldr	r2, [pc, #184]	; (8006f08 <HAL_DMA_Start_IT+0x204>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d036      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x1bc>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a2d      	ldr	r2, [pc, #180]	; (8006f0c <HAL_DMA_Start_IT+0x208>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d031      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x1bc>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a2b      	ldr	r2, [pc, #172]	; (8006f10 <HAL_DMA_Start_IT+0x20c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d02c      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x1bc>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a2a      	ldr	r2, [pc, #168]	; (8006f14 <HAL_DMA_Start_IT+0x210>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d027      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x1bc>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a28      	ldr	r2, [pc, #160]	; (8006f18 <HAL_DMA_Start_IT+0x214>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d022      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x1bc>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a27      	ldr	r2, [pc, #156]	; (8006f1c <HAL_DMA_Start_IT+0x218>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d01d      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x1bc>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a25      	ldr	r2, [pc, #148]	; (8006f20 <HAL_DMA_Start_IT+0x21c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d018      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x1bc>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a24      	ldr	r2, [pc, #144]	; (8006f24 <HAL_DMA_Start_IT+0x220>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d013      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x1bc>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a22      	ldr	r2, [pc, #136]	; (8006f28 <HAL_DMA_Start_IT+0x224>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00e      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x1bc>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a21      	ldr	r2, [pc, #132]	; (8006f2c <HAL_DMA_Start_IT+0x228>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d009      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x1bc>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a1f      	ldr	r2, [pc, #124]	; (8006f30 <HAL_DMA_Start_IT+0x22c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <HAL_DMA_Start_IT+0x1bc>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a1e      	ldr	r2, [pc, #120]	; (8006f34 <HAL_DMA_Start_IT+0x230>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d101      	bne.n	8006ec4 <HAL_DMA_Start_IT+0x1c0>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e000      	b.n	8006ec6 <HAL_DMA_Start_IT+0x1c2>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d036      	beq.n	8006f38 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f023 021e 	bic.w	r2, r3, #30
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f042 0216 	orr.w	r2, r2, #22
 8006edc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d03e      	beq.n	8006f64 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f042 0208 	orr.w	r2, r2, #8
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	e035      	b.n	8006f64 <HAL_DMA_Start_IT+0x260>
 8006ef8:	40020010 	.word	0x40020010
 8006efc:	40020028 	.word	0x40020028
 8006f00:	40020040 	.word	0x40020040
 8006f04:	40020058 	.word	0x40020058
 8006f08:	40020070 	.word	0x40020070
 8006f0c:	40020088 	.word	0x40020088
 8006f10:	400200a0 	.word	0x400200a0
 8006f14:	400200b8 	.word	0x400200b8
 8006f18:	40020410 	.word	0x40020410
 8006f1c:	40020428 	.word	0x40020428
 8006f20:	40020440 	.word	0x40020440
 8006f24:	40020458 	.word	0x40020458
 8006f28:	40020470 	.word	0x40020470
 8006f2c:	40020488 	.word	0x40020488
 8006f30:	400204a0 	.word	0x400204a0
 8006f34:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f023 020e 	bic.w	r2, r3, #14
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 020a 	orr.w	r2, r2, #10
 8006f4a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0204 	orr.w	r2, r2, #4
 8006f62:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a83      	ldr	r2, [pc, #524]	; (8007178 <HAL_DMA_Start_IT+0x474>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d072      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a82      	ldr	r2, [pc, #520]	; (800717c <HAL_DMA_Start_IT+0x478>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d06d      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a80      	ldr	r2, [pc, #512]	; (8007180 <HAL_DMA_Start_IT+0x47c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d068      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a7f      	ldr	r2, [pc, #508]	; (8007184 <HAL_DMA_Start_IT+0x480>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d063      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a7d      	ldr	r2, [pc, #500]	; (8007188 <HAL_DMA_Start_IT+0x484>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d05e      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a7c      	ldr	r2, [pc, #496]	; (800718c <HAL_DMA_Start_IT+0x488>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d059      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a7a      	ldr	r2, [pc, #488]	; (8007190 <HAL_DMA_Start_IT+0x48c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d054      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a79      	ldr	r2, [pc, #484]	; (8007194 <HAL_DMA_Start_IT+0x490>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d04f      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a77      	ldr	r2, [pc, #476]	; (8007198 <HAL_DMA_Start_IT+0x494>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d04a      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a76      	ldr	r2, [pc, #472]	; (800719c <HAL_DMA_Start_IT+0x498>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d045      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a74      	ldr	r2, [pc, #464]	; (80071a0 <HAL_DMA_Start_IT+0x49c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d040      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a73      	ldr	r2, [pc, #460]	; (80071a4 <HAL_DMA_Start_IT+0x4a0>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d03b      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a71      	ldr	r2, [pc, #452]	; (80071a8 <HAL_DMA_Start_IT+0x4a4>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d036      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a70      	ldr	r2, [pc, #448]	; (80071ac <HAL_DMA_Start_IT+0x4a8>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d031      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a6e      	ldr	r2, [pc, #440]	; (80071b0 <HAL_DMA_Start_IT+0x4ac>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d02c      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a6d      	ldr	r2, [pc, #436]	; (80071b4 <HAL_DMA_Start_IT+0x4b0>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d027      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a6b      	ldr	r2, [pc, #428]	; (80071b8 <HAL_DMA_Start_IT+0x4b4>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d022      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a6a      	ldr	r2, [pc, #424]	; (80071bc <HAL_DMA_Start_IT+0x4b8>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d01d      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a68      	ldr	r2, [pc, #416]	; (80071c0 <HAL_DMA_Start_IT+0x4bc>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d018      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a67      	ldr	r2, [pc, #412]	; (80071c4 <HAL_DMA_Start_IT+0x4c0>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d013      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a65      	ldr	r2, [pc, #404]	; (80071c8 <HAL_DMA_Start_IT+0x4c4>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d00e      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a64      	ldr	r2, [pc, #400]	; (80071cc <HAL_DMA_Start_IT+0x4c8>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d009      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a62      	ldr	r2, [pc, #392]	; (80071d0 <HAL_DMA_Start_IT+0x4cc>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d004      	beq.n	8007054 <HAL_DMA_Start_IT+0x350>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a61      	ldr	r2, [pc, #388]	; (80071d4 <HAL_DMA_Start_IT+0x4d0>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d101      	bne.n	8007058 <HAL_DMA_Start_IT+0x354>
 8007054:	2301      	movs	r3, #1
 8007056:	e000      	b.n	800705a <HAL_DMA_Start_IT+0x356>
 8007058:	2300      	movs	r3, #0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d01a      	beq.n	8007094 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d007      	beq.n	800707c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800707a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800708e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007092:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a37      	ldr	r2, [pc, #220]	; (8007178 <HAL_DMA_Start_IT+0x474>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d04a      	beq.n	8007134 <HAL_DMA_Start_IT+0x430>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a36      	ldr	r2, [pc, #216]	; (800717c <HAL_DMA_Start_IT+0x478>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d045      	beq.n	8007134 <HAL_DMA_Start_IT+0x430>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a34      	ldr	r2, [pc, #208]	; (8007180 <HAL_DMA_Start_IT+0x47c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d040      	beq.n	8007134 <HAL_DMA_Start_IT+0x430>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a33      	ldr	r2, [pc, #204]	; (8007184 <HAL_DMA_Start_IT+0x480>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d03b      	beq.n	8007134 <HAL_DMA_Start_IT+0x430>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a31      	ldr	r2, [pc, #196]	; (8007188 <HAL_DMA_Start_IT+0x484>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d036      	beq.n	8007134 <HAL_DMA_Start_IT+0x430>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a30      	ldr	r2, [pc, #192]	; (800718c <HAL_DMA_Start_IT+0x488>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d031      	beq.n	8007134 <HAL_DMA_Start_IT+0x430>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a2e      	ldr	r2, [pc, #184]	; (8007190 <HAL_DMA_Start_IT+0x48c>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d02c      	beq.n	8007134 <HAL_DMA_Start_IT+0x430>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a2d      	ldr	r2, [pc, #180]	; (8007194 <HAL_DMA_Start_IT+0x490>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d027      	beq.n	8007134 <HAL_DMA_Start_IT+0x430>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a2b      	ldr	r2, [pc, #172]	; (8007198 <HAL_DMA_Start_IT+0x494>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d022      	beq.n	8007134 <HAL_DMA_Start_IT+0x430>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a2a      	ldr	r2, [pc, #168]	; (800719c <HAL_DMA_Start_IT+0x498>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d01d      	beq.n	8007134 <HAL_DMA_Start_IT+0x430>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a28      	ldr	r2, [pc, #160]	; (80071a0 <HAL_DMA_Start_IT+0x49c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d018      	beq.n	8007134 <HAL_DMA_Start_IT+0x430>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a27      	ldr	r2, [pc, #156]	; (80071a4 <HAL_DMA_Start_IT+0x4a0>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d013      	beq.n	8007134 <HAL_DMA_Start_IT+0x430>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a25      	ldr	r2, [pc, #148]	; (80071a8 <HAL_DMA_Start_IT+0x4a4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00e      	beq.n	8007134 <HAL_DMA_Start_IT+0x430>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a24      	ldr	r2, [pc, #144]	; (80071ac <HAL_DMA_Start_IT+0x4a8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d009      	beq.n	8007134 <HAL_DMA_Start_IT+0x430>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a22      	ldr	r2, [pc, #136]	; (80071b0 <HAL_DMA_Start_IT+0x4ac>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d004      	beq.n	8007134 <HAL_DMA_Start_IT+0x430>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a21      	ldr	r2, [pc, #132]	; (80071b4 <HAL_DMA_Start_IT+0x4b0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d108      	bne.n	8007146 <HAL_DMA_Start_IT+0x442>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f042 0201 	orr.w	r2, r2, #1
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	e012      	b.n	800716c <HAL_DMA_Start_IT+0x468>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0201 	orr.w	r2, r2, #1
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	e009      	b.n	800716c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800715e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800716c:	7dfb      	ldrb	r3, [r7, #23]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	40020010 	.word	0x40020010
 800717c:	40020028 	.word	0x40020028
 8007180:	40020040 	.word	0x40020040
 8007184:	40020058 	.word	0x40020058
 8007188:	40020070 	.word	0x40020070
 800718c:	40020088 	.word	0x40020088
 8007190:	400200a0 	.word	0x400200a0
 8007194:	400200b8 	.word	0x400200b8
 8007198:	40020410 	.word	0x40020410
 800719c:	40020428 	.word	0x40020428
 80071a0:	40020440 	.word	0x40020440
 80071a4:	40020458 	.word	0x40020458
 80071a8:	40020470 	.word	0x40020470
 80071ac:	40020488 	.word	0x40020488
 80071b0:	400204a0 	.word	0x400204a0
 80071b4:	400204b8 	.word	0x400204b8
 80071b8:	58025408 	.word	0x58025408
 80071bc:	5802541c 	.word	0x5802541c
 80071c0:	58025430 	.word	0x58025430
 80071c4:	58025444 	.word	0x58025444
 80071c8:	58025458 	.word	0x58025458
 80071cc:	5802546c 	.word	0x5802546c
 80071d0:	58025480 	.word	0x58025480
 80071d4:	58025494 	.word	0x58025494

080071d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80071e0:	f7fd f90c 	bl	80043fc <HAL_GetTick>
 80071e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e2dc      	b.n	80077aa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d008      	beq.n	800720e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2280      	movs	r2, #128	; 0x80
 8007200:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e2cd      	b.n	80077aa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a76      	ldr	r2, [pc, #472]	; (80073ec <HAL_DMA_Abort+0x214>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d04a      	beq.n	80072ae <HAL_DMA_Abort+0xd6>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a74      	ldr	r2, [pc, #464]	; (80073f0 <HAL_DMA_Abort+0x218>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d045      	beq.n	80072ae <HAL_DMA_Abort+0xd6>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a73      	ldr	r2, [pc, #460]	; (80073f4 <HAL_DMA_Abort+0x21c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d040      	beq.n	80072ae <HAL_DMA_Abort+0xd6>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a71      	ldr	r2, [pc, #452]	; (80073f8 <HAL_DMA_Abort+0x220>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d03b      	beq.n	80072ae <HAL_DMA_Abort+0xd6>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a70      	ldr	r2, [pc, #448]	; (80073fc <HAL_DMA_Abort+0x224>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d036      	beq.n	80072ae <HAL_DMA_Abort+0xd6>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a6e      	ldr	r2, [pc, #440]	; (8007400 <HAL_DMA_Abort+0x228>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d031      	beq.n	80072ae <HAL_DMA_Abort+0xd6>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a6d      	ldr	r2, [pc, #436]	; (8007404 <HAL_DMA_Abort+0x22c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d02c      	beq.n	80072ae <HAL_DMA_Abort+0xd6>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a6b      	ldr	r2, [pc, #428]	; (8007408 <HAL_DMA_Abort+0x230>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d027      	beq.n	80072ae <HAL_DMA_Abort+0xd6>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a6a      	ldr	r2, [pc, #424]	; (800740c <HAL_DMA_Abort+0x234>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d022      	beq.n	80072ae <HAL_DMA_Abort+0xd6>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a68      	ldr	r2, [pc, #416]	; (8007410 <HAL_DMA_Abort+0x238>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d01d      	beq.n	80072ae <HAL_DMA_Abort+0xd6>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a67      	ldr	r2, [pc, #412]	; (8007414 <HAL_DMA_Abort+0x23c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d018      	beq.n	80072ae <HAL_DMA_Abort+0xd6>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a65      	ldr	r2, [pc, #404]	; (8007418 <HAL_DMA_Abort+0x240>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d013      	beq.n	80072ae <HAL_DMA_Abort+0xd6>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a64      	ldr	r2, [pc, #400]	; (800741c <HAL_DMA_Abort+0x244>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00e      	beq.n	80072ae <HAL_DMA_Abort+0xd6>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a62      	ldr	r2, [pc, #392]	; (8007420 <HAL_DMA_Abort+0x248>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d009      	beq.n	80072ae <HAL_DMA_Abort+0xd6>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a61      	ldr	r2, [pc, #388]	; (8007424 <HAL_DMA_Abort+0x24c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d004      	beq.n	80072ae <HAL_DMA_Abort+0xd6>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a5f      	ldr	r2, [pc, #380]	; (8007428 <HAL_DMA_Abort+0x250>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d101      	bne.n	80072b2 <HAL_DMA_Abort+0xda>
 80072ae:	2301      	movs	r3, #1
 80072b0:	e000      	b.n	80072b4 <HAL_DMA_Abort+0xdc>
 80072b2:	2300      	movs	r3, #0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d013      	beq.n	80072e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 021e 	bic.w	r2, r2, #30
 80072c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	695a      	ldr	r2, [r3, #20]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	617b      	str	r3, [r7, #20]
 80072de:	e00a      	b.n	80072f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 020e 	bic.w	r2, r2, #14
 80072ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a3c      	ldr	r2, [pc, #240]	; (80073ec <HAL_DMA_Abort+0x214>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d072      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a3a      	ldr	r2, [pc, #232]	; (80073f0 <HAL_DMA_Abort+0x218>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d06d      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a39      	ldr	r2, [pc, #228]	; (80073f4 <HAL_DMA_Abort+0x21c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d068      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a37      	ldr	r2, [pc, #220]	; (80073f8 <HAL_DMA_Abort+0x220>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d063      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a36      	ldr	r2, [pc, #216]	; (80073fc <HAL_DMA_Abort+0x224>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d05e      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a34      	ldr	r2, [pc, #208]	; (8007400 <HAL_DMA_Abort+0x228>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d059      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a33      	ldr	r2, [pc, #204]	; (8007404 <HAL_DMA_Abort+0x22c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d054      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a31      	ldr	r2, [pc, #196]	; (8007408 <HAL_DMA_Abort+0x230>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d04f      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a30      	ldr	r2, [pc, #192]	; (800740c <HAL_DMA_Abort+0x234>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d04a      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a2e      	ldr	r2, [pc, #184]	; (8007410 <HAL_DMA_Abort+0x238>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d045      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a2d      	ldr	r2, [pc, #180]	; (8007414 <HAL_DMA_Abort+0x23c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d040      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a2b      	ldr	r2, [pc, #172]	; (8007418 <HAL_DMA_Abort+0x240>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d03b      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a2a      	ldr	r2, [pc, #168]	; (800741c <HAL_DMA_Abort+0x244>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d036      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a28      	ldr	r2, [pc, #160]	; (8007420 <HAL_DMA_Abort+0x248>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d031      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a27      	ldr	r2, [pc, #156]	; (8007424 <HAL_DMA_Abort+0x24c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d02c      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a25      	ldr	r2, [pc, #148]	; (8007428 <HAL_DMA_Abort+0x250>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d027      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a24      	ldr	r2, [pc, #144]	; (800742c <HAL_DMA_Abort+0x254>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d022      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a22      	ldr	r2, [pc, #136]	; (8007430 <HAL_DMA_Abort+0x258>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d01d      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a21      	ldr	r2, [pc, #132]	; (8007434 <HAL_DMA_Abort+0x25c>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d018      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a1f      	ldr	r2, [pc, #124]	; (8007438 <HAL_DMA_Abort+0x260>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d013      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a1e      	ldr	r2, [pc, #120]	; (800743c <HAL_DMA_Abort+0x264>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d00e      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a1c      	ldr	r2, [pc, #112]	; (8007440 <HAL_DMA_Abort+0x268>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d009      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a1b      	ldr	r2, [pc, #108]	; (8007444 <HAL_DMA_Abort+0x26c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d004      	beq.n	80073e6 <HAL_DMA_Abort+0x20e>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a19      	ldr	r2, [pc, #100]	; (8007448 <HAL_DMA_Abort+0x270>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d132      	bne.n	800744c <HAL_DMA_Abort+0x274>
 80073e6:	2301      	movs	r3, #1
 80073e8:	e031      	b.n	800744e <HAL_DMA_Abort+0x276>
 80073ea:	bf00      	nop
 80073ec:	40020010 	.word	0x40020010
 80073f0:	40020028 	.word	0x40020028
 80073f4:	40020040 	.word	0x40020040
 80073f8:	40020058 	.word	0x40020058
 80073fc:	40020070 	.word	0x40020070
 8007400:	40020088 	.word	0x40020088
 8007404:	400200a0 	.word	0x400200a0
 8007408:	400200b8 	.word	0x400200b8
 800740c:	40020410 	.word	0x40020410
 8007410:	40020428 	.word	0x40020428
 8007414:	40020440 	.word	0x40020440
 8007418:	40020458 	.word	0x40020458
 800741c:	40020470 	.word	0x40020470
 8007420:	40020488 	.word	0x40020488
 8007424:	400204a0 	.word	0x400204a0
 8007428:	400204b8 	.word	0x400204b8
 800742c:	58025408 	.word	0x58025408
 8007430:	5802541c 	.word	0x5802541c
 8007434:	58025430 	.word	0x58025430
 8007438:	58025444 	.word	0x58025444
 800743c:	58025458 	.word	0x58025458
 8007440:	5802546c 	.word	0x5802546c
 8007444:	58025480 	.word	0x58025480
 8007448:	58025494 	.word	0x58025494
 800744c:	2300      	movs	r3, #0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d007      	beq.n	8007462 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800745c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007460:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a6d      	ldr	r2, [pc, #436]	; (800761c <HAL_DMA_Abort+0x444>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d04a      	beq.n	8007502 <HAL_DMA_Abort+0x32a>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a6b      	ldr	r2, [pc, #428]	; (8007620 <HAL_DMA_Abort+0x448>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d045      	beq.n	8007502 <HAL_DMA_Abort+0x32a>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a6a      	ldr	r2, [pc, #424]	; (8007624 <HAL_DMA_Abort+0x44c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d040      	beq.n	8007502 <HAL_DMA_Abort+0x32a>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a68      	ldr	r2, [pc, #416]	; (8007628 <HAL_DMA_Abort+0x450>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d03b      	beq.n	8007502 <HAL_DMA_Abort+0x32a>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a67      	ldr	r2, [pc, #412]	; (800762c <HAL_DMA_Abort+0x454>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d036      	beq.n	8007502 <HAL_DMA_Abort+0x32a>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a65      	ldr	r2, [pc, #404]	; (8007630 <HAL_DMA_Abort+0x458>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d031      	beq.n	8007502 <HAL_DMA_Abort+0x32a>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a64      	ldr	r2, [pc, #400]	; (8007634 <HAL_DMA_Abort+0x45c>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d02c      	beq.n	8007502 <HAL_DMA_Abort+0x32a>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a62      	ldr	r2, [pc, #392]	; (8007638 <HAL_DMA_Abort+0x460>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d027      	beq.n	8007502 <HAL_DMA_Abort+0x32a>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a61      	ldr	r2, [pc, #388]	; (800763c <HAL_DMA_Abort+0x464>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d022      	beq.n	8007502 <HAL_DMA_Abort+0x32a>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a5f      	ldr	r2, [pc, #380]	; (8007640 <HAL_DMA_Abort+0x468>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d01d      	beq.n	8007502 <HAL_DMA_Abort+0x32a>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a5e      	ldr	r2, [pc, #376]	; (8007644 <HAL_DMA_Abort+0x46c>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d018      	beq.n	8007502 <HAL_DMA_Abort+0x32a>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a5c      	ldr	r2, [pc, #368]	; (8007648 <HAL_DMA_Abort+0x470>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d013      	beq.n	8007502 <HAL_DMA_Abort+0x32a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a5b      	ldr	r2, [pc, #364]	; (800764c <HAL_DMA_Abort+0x474>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d00e      	beq.n	8007502 <HAL_DMA_Abort+0x32a>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a59      	ldr	r2, [pc, #356]	; (8007650 <HAL_DMA_Abort+0x478>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d009      	beq.n	8007502 <HAL_DMA_Abort+0x32a>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a58      	ldr	r2, [pc, #352]	; (8007654 <HAL_DMA_Abort+0x47c>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d004      	beq.n	8007502 <HAL_DMA_Abort+0x32a>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a56      	ldr	r2, [pc, #344]	; (8007658 <HAL_DMA_Abort+0x480>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d108      	bne.n	8007514 <HAL_DMA_Abort+0x33c>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0201 	bic.w	r2, r2, #1
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	e007      	b.n	8007524 <HAL_DMA_Abort+0x34c>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0201 	bic.w	r2, r2, #1
 8007522:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007524:	e013      	b.n	800754e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007526:	f7fc ff69 	bl	80043fc <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	2b05      	cmp	r3, #5
 8007532:	d90c      	bls.n	800754e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2220      	movs	r2, #32
 8007538:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2203      	movs	r2, #3
 800753e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e12d      	b.n	80077aa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e5      	bne.n	8007526 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a2f      	ldr	r2, [pc, #188]	; (800761c <HAL_DMA_Abort+0x444>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d04a      	beq.n	80075fa <HAL_DMA_Abort+0x422>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a2d      	ldr	r2, [pc, #180]	; (8007620 <HAL_DMA_Abort+0x448>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d045      	beq.n	80075fa <HAL_DMA_Abort+0x422>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a2c      	ldr	r2, [pc, #176]	; (8007624 <HAL_DMA_Abort+0x44c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d040      	beq.n	80075fa <HAL_DMA_Abort+0x422>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a2a      	ldr	r2, [pc, #168]	; (8007628 <HAL_DMA_Abort+0x450>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d03b      	beq.n	80075fa <HAL_DMA_Abort+0x422>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a29      	ldr	r2, [pc, #164]	; (800762c <HAL_DMA_Abort+0x454>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d036      	beq.n	80075fa <HAL_DMA_Abort+0x422>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a27      	ldr	r2, [pc, #156]	; (8007630 <HAL_DMA_Abort+0x458>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d031      	beq.n	80075fa <HAL_DMA_Abort+0x422>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a26      	ldr	r2, [pc, #152]	; (8007634 <HAL_DMA_Abort+0x45c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d02c      	beq.n	80075fa <HAL_DMA_Abort+0x422>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a24      	ldr	r2, [pc, #144]	; (8007638 <HAL_DMA_Abort+0x460>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d027      	beq.n	80075fa <HAL_DMA_Abort+0x422>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a23      	ldr	r2, [pc, #140]	; (800763c <HAL_DMA_Abort+0x464>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d022      	beq.n	80075fa <HAL_DMA_Abort+0x422>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a21      	ldr	r2, [pc, #132]	; (8007640 <HAL_DMA_Abort+0x468>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d01d      	beq.n	80075fa <HAL_DMA_Abort+0x422>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a20      	ldr	r2, [pc, #128]	; (8007644 <HAL_DMA_Abort+0x46c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d018      	beq.n	80075fa <HAL_DMA_Abort+0x422>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a1e      	ldr	r2, [pc, #120]	; (8007648 <HAL_DMA_Abort+0x470>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d013      	beq.n	80075fa <HAL_DMA_Abort+0x422>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a1d      	ldr	r2, [pc, #116]	; (800764c <HAL_DMA_Abort+0x474>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d00e      	beq.n	80075fa <HAL_DMA_Abort+0x422>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a1b      	ldr	r2, [pc, #108]	; (8007650 <HAL_DMA_Abort+0x478>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d009      	beq.n	80075fa <HAL_DMA_Abort+0x422>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a1a      	ldr	r2, [pc, #104]	; (8007654 <HAL_DMA_Abort+0x47c>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d004      	beq.n	80075fa <HAL_DMA_Abort+0x422>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a18      	ldr	r2, [pc, #96]	; (8007658 <HAL_DMA_Abort+0x480>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d101      	bne.n	80075fe <HAL_DMA_Abort+0x426>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e000      	b.n	8007600 <HAL_DMA_Abort+0x428>
 80075fe:	2300      	movs	r3, #0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d02b      	beq.n	800765c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007608:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800760e:	f003 031f 	and.w	r3, r3, #31
 8007612:	223f      	movs	r2, #63	; 0x3f
 8007614:	409a      	lsls	r2, r3
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	609a      	str	r2, [r3, #8]
 800761a:	e02a      	b.n	8007672 <HAL_DMA_Abort+0x49a>
 800761c:	40020010 	.word	0x40020010
 8007620:	40020028 	.word	0x40020028
 8007624:	40020040 	.word	0x40020040
 8007628:	40020058 	.word	0x40020058
 800762c:	40020070 	.word	0x40020070
 8007630:	40020088 	.word	0x40020088
 8007634:	400200a0 	.word	0x400200a0
 8007638:	400200b8 	.word	0x400200b8
 800763c:	40020410 	.word	0x40020410
 8007640:	40020428 	.word	0x40020428
 8007644:	40020440 	.word	0x40020440
 8007648:	40020458 	.word	0x40020458
 800764c:	40020470 	.word	0x40020470
 8007650:	40020488 	.word	0x40020488
 8007654:	400204a0 	.word	0x400204a0
 8007658:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007660:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007666:	f003 031f 	and.w	r3, r3, #31
 800766a:	2201      	movs	r2, #1
 800766c:	409a      	lsls	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a4f      	ldr	r2, [pc, #316]	; (80077b4 <HAL_DMA_Abort+0x5dc>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d072      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a4d      	ldr	r2, [pc, #308]	; (80077b8 <HAL_DMA_Abort+0x5e0>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d06d      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a4c      	ldr	r2, [pc, #304]	; (80077bc <HAL_DMA_Abort+0x5e4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d068      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a4a      	ldr	r2, [pc, #296]	; (80077c0 <HAL_DMA_Abort+0x5e8>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d063      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a49      	ldr	r2, [pc, #292]	; (80077c4 <HAL_DMA_Abort+0x5ec>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d05e      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a47      	ldr	r2, [pc, #284]	; (80077c8 <HAL_DMA_Abort+0x5f0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d059      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a46      	ldr	r2, [pc, #280]	; (80077cc <HAL_DMA_Abort+0x5f4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d054      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a44      	ldr	r2, [pc, #272]	; (80077d0 <HAL_DMA_Abort+0x5f8>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d04f      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a43      	ldr	r2, [pc, #268]	; (80077d4 <HAL_DMA_Abort+0x5fc>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d04a      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a41      	ldr	r2, [pc, #260]	; (80077d8 <HAL_DMA_Abort+0x600>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d045      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a40      	ldr	r2, [pc, #256]	; (80077dc <HAL_DMA_Abort+0x604>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d040      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a3e      	ldr	r2, [pc, #248]	; (80077e0 <HAL_DMA_Abort+0x608>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d03b      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a3d      	ldr	r2, [pc, #244]	; (80077e4 <HAL_DMA_Abort+0x60c>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d036      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a3b      	ldr	r2, [pc, #236]	; (80077e8 <HAL_DMA_Abort+0x610>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d031      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a3a      	ldr	r2, [pc, #232]	; (80077ec <HAL_DMA_Abort+0x614>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d02c      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a38      	ldr	r2, [pc, #224]	; (80077f0 <HAL_DMA_Abort+0x618>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d027      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a37      	ldr	r2, [pc, #220]	; (80077f4 <HAL_DMA_Abort+0x61c>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d022      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a35      	ldr	r2, [pc, #212]	; (80077f8 <HAL_DMA_Abort+0x620>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d01d      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a34      	ldr	r2, [pc, #208]	; (80077fc <HAL_DMA_Abort+0x624>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d018      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a32      	ldr	r2, [pc, #200]	; (8007800 <HAL_DMA_Abort+0x628>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d013      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a31      	ldr	r2, [pc, #196]	; (8007804 <HAL_DMA_Abort+0x62c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d00e      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a2f      	ldr	r2, [pc, #188]	; (8007808 <HAL_DMA_Abort+0x630>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d009      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a2e      	ldr	r2, [pc, #184]	; (800780c <HAL_DMA_Abort+0x634>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d004      	beq.n	8007762 <HAL_DMA_Abort+0x58a>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a2c      	ldr	r2, [pc, #176]	; (8007810 <HAL_DMA_Abort+0x638>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d101      	bne.n	8007766 <HAL_DMA_Abort+0x58e>
 8007762:	2301      	movs	r3, #1
 8007764:	e000      	b.n	8007768 <HAL_DMA_Abort+0x590>
 8007766:	2300      	movs	r3, #0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d015      	beq.n	8007798 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007774:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00c      	beq.n	8007798 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800778c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007796:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	40020010 	.word	0x40020010
 80077b8:	40020028 	.word	0x40020028
 80077bc:	40020040 	.word	0x40020040
 80077c0:	40020058 	.word	0x40020058
 80077c4:	40020070 	.word	0x40020070
 80077c8:	40020088 	.word	0x40020088
 80077cc:	400200a0 	.word	0x400200a0
 80077d0:	400200b8 	.word	0x400200b8
 80077d4:	40020410 	.word	0x40020410
 80077d8:	40020428 	.word	0x40020428
 80077dc:	40020440 	.word	0x40020440
 80077e0:	40020458 	.word	0x40020458
 80077e4:	40020470 	.word	0x40020470
 80077e8:	40020488 	.word	0x40020488
 80077ec:	400204a0 	.word	0x400204a0
 80077f0:	400204b8 	.word	0x400204b8
 80077f4:	58025408 	.word	0x58025408
 80077f8:	5802541c 	.word	0x5802541c
 80077fc:	58025430 	.word	0x58025430
 8007800:	58025444 	.word	0x58025444
 8007804:	58025458 	.word	0x58025458
 8007808:	5802546c 	.word	0x5802546c
 800780c:	58025480 	.word	0x58025480
 8007810:	58025494 	.word	0x58025494

08007814 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e237      	b.n	8007c96 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b02      	cmp	r3, #2
 8007830:	d004      	beq.n	800783c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2280      	movs	r2, #128	; 0x80
 8007836:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e22c      	b.n	8007c96 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a5c      	ldr	r2, [pc, #368]	; (80079b4 <HAL_DMA_Abort_IT+0x1a0>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d04a      	beq.n	80078dc <HAL_DMA_Abort_IT+0xc8>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a5b      	ldr	r2, [pc, #364]	; (80079b8 <HAL_DMA_Abort_IT+0x1a4>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d045      	beq.n	80078dc <HAL_DMA_Abort_IT+0xc8>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a59      	ldr	r2, [pc, #356]	; (80079bc <HAL_DMA_Abort_IT+0x1a8>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d040      	beq.n	80078dc <HAL_DMA_Abort_IT+0xc8>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a58      	ldr	r2, [pc, #352]	; (80079c0 <HAL_DMA_Abort_IT+0x1ac>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d03b      	beq.n	80078dc <HAL_DMA_Abort_IT+0xc8>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a56      	ldr	r2, [pc, #344]	; (80079c4 <HAL_DMA_Abort_IT+0x1b0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d036      	beq.n	80078dc <HAL_DMA_Abort_IT+0xc8>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a55      	ldr	r2, [pc, #340]	; (80079c8 <HAL_DMA_Abort_IT+0x1b4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d031      	beq.n	80078dc <HAL_DMA_Abort_IT+0xc8>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a53      	ldr	r2, [pc, #332]	; (80079cc <HAL_DMA_Abort_IT+0x1b8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d02c      	beq.n	80078dc <HAL_DMA_Abort_IT+0xc8>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a52      	ldr	r2, [pc, #328]	; (80079d0 <HAL_DMA_Abort_IT+0x1bc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d027      	beq.n	80078dc <HAL_DMA_Abort_IT+0xc8>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a50      	ldr	r2, [pc, #320]	; (80079d4 <HAL_DMA_Abort_IT+0x1c0>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d022      	beq.n	80078dc <HAL_DMA_Abort_IT+0xc8>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a4f      	ldr	r2, [pc, #316]	; (80079d8 <HAL_DMA_Abort_IT+0x1c4>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d01d      	beq.n	80078dc <HAL_DMA_Abort_IT+0xc8>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a4d      	ldr	r2, [pc, #308]	; (80079dc <HAL_DMA_Abort_IT+0x1c8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d018      	beq.n	80078dc <HAL_DMA_Abort_IT+0xc8>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a4c      	ldr	r2, [pc, #304]	; (80079e0 <HAL_DMA_Abort_IT+0x1cc>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d013      	beq.n	80078dc <HAL_DMA_Abort_IT+0xc8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a4a      	ldr	r2, [pc, #296]	; (80079e4 <HAL_DMA_Abort_IT+0x1d0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00e      	beq.n	80078dc <HAL_DMA_Abort_IT+0xc8>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a49      	ldr	r2, [pc, #292]	; (80079e8 <HAL_DMA_Abort_IT+0x1d4>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d009      	beq.n	80078dc <HAL_DMA_Abort_IT+0xc8>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a47      	ldr	r2, [pc, #284]	; (80079ec <HAL_DMA_Abort_IT+0x1d8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d004      	beq.n	80078dc <HAL_DMA_Abort_IT+0xc8>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a46      	ldr	r2, [pc, #280]	; (80079f0 <HAL_DMA_Abort_IT+0x1dc>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d101      	bne.n	80078e0 <HAL_DMA_Abort_IT+0xcc>
 80078dc:	2301      	movs	r3, #1
 80078de:	e000      	b.n	80078e2 <HAL_DMA_Abort_IT+0xce>
 80078e0:	2300      	movs	r3, #0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 8086 	beq.w	80079f4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2204      	movs	r2, #4
 80078ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a2f      	ldr	r2, [pc, #188]	; (80079b4 <HAL_DMA_Abort_IT+0x1a0>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d04a      	beq.n	8007990 <HAL_DMA_Abort_IT+0x17c>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a2e      	ldr	r2, [pc, #184]	; (80079b8 <HAL_DMA_Abort_IT+0x1a4>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d045      	beq.n	8007990 <HAL_DMA_Abort_IT+0x17c>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a2c      	ldr	r2, [pc, #176]	; (80079bc <HAL_DMA_Abort_IT+0x1a8>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d040      	beq.n	8007990 <HAL_DMA_Abort_IT+0x17c>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a2b      	ldr	r2, [pc, #172]	; (80079c0 <HAL_DMA_Abort_IT+0x1ac>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d03b      	beq.n	8007990 <HAL_DMA_Abort_IT+0x17c>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a29      	ldr	r2, [pc, #164]	; (80079c4 <HAL_DMA_Abort_IT+0x1b0>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d036      	beq.n	8007990 <HAL_DMA_Abort_IT+0x17c>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a28      	ldr	r2, [pc, #160]	; (80079c8 <HAL_DMA_Abort_IT+0x1b4>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d031      	beq.n	8007990 <HAL_DMA_Abort_IT+0x17c>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a26      	ldr	r2, [pc, #152]	; (80079cc <HAL_DMA_Abort_IT+0x1b8>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d02c      	beq.n	8007990 <HAL_DMA_Abort_IT+0x17c>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a25      	ldr	r2, [pc, #148]	; (80079d0 <HAL_DMA_Abort_IT+0x1bc>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d027      	beq.n	8007990 <HAL_DMA_Abort_IT+0x17c>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a23      	ldr	r2, [pc, #140]	; (80079d4 <HAL_DMA_Abort_IT+0x1c0>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d022      	beq.n	8007990 <HAL_DMA_Abort_IT+0x17c>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a22      	ldr	r2, [pc, #136]	; (80079d8 <HAL_DMA_Abort_IT+0x1c4>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d01d      	beq.n	8007990 <HAL_DMA_Abort_IT+0x17c>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a20      	ldr	r2, [pc, #128]	; (80079dc <HAL_DMA_Abort_IT+0x1c8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d018      	beq.n	8007990 <HAL_DMA_Abort_IT+0x17c>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a1f      	ldr	r2, [pc, #124]	; (80079e0 <HAL_DMA_Abort_IT+0x1cc>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d013      	beq.n	8007990 <HAL_DMA_Abort_IT+0x17c>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a1d      	ldr	r2, [pc, #116]	; (80079e4 <HAL_DMA_Abort_IT+0x1d0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00e      	beq.n	8007990 <HAL_DMA_Abort_IT+0x17c>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a1c      	ldr	r2, [pc, #112]	; (80079e8 <HAL_DMA_Abort_IT+0x1d4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d009      	beq.n	8007990 <HAL_DMA_Abort_IT+0x17c>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a1a      	ldr	r2, [pc, #104]	; (80079ec <HAL_DMA_Abort_IT+0x1d8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d004      	beq.n	8007990 <HAL_DMA_Abort_IT+0x17c>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a19      	ldr	r2, [pc, #100]	; (80079f0 <HAL_DMA_Abort_IT+0x1dc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d108      	bne.n	80079a2 <HAL_DMA_Abort_IT+0x18e>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f022 0201 	bic.w	r2, r2, #1
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	e178      	b.n	8007c94 <HAL_DMA_Abort_IT+0x480>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0201 	bic.w	r2, r2, #1
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	e16f      	b.n	8007c94 <HAL_DMA_Abort_IT+0x480>
 80079b4:	40020010 	.word	0x40020010
 80079b8:	40020028 	.word	0x40020028
 80079bc:	40020040 	.word	0x40020040
 80079c0:	40020058 	.word	0x40020058
 80079c4:	40020070 	.word	0x40020070
 80079c8:	40020088 	.word	0x40020088
 80079cc:	400200a0 	.word	0x400200a0
 80079d0:	400200b8 	.word	0x400200b8
 80079d4:	40020410 	.word	0x40020410
 80079d8:	40020428 	.word	0x40020428
 80079dc:	40020440 	.word	0x40020440
 80079e0:	40020458 	.word	0x40020458
 80079e4:	40020470 	.word	0x40020470
 80079e8:	40020488 	.word	0x40020488
 80079ec:	400204a0 	.word	0x400204a0
 80079f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 020e 	bic.w	r2, r2, #14
 8007a02:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a6c      	ldr	r2, [pc, #432]	; (8007bbc <HAL_DMA_Abort_IT+0x3a8>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d04a      	beq.n	8007aa4 <HAL_DMA_Abort_IT+0x290>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a6b      	ldr	r2, [pc, #428]	; (8007bc0 <HAL_DMA_Abort_IT+0x3ac>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d045      	beq.n	8007aa4 <HAL_DMA_Abort_IT+0x290>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a69      	ldr	r2, [pc, #420]	; (8007bc4 <HAL_DMA_Abort_IT+0x3b0>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d040      	beq.n	8007aa4 <HAL_DMA_Abort_IT+0x290>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a68      	ldr	r2, [pc, #416]	; (8007bc8 <HAL_DMA_Abort_IT+0x3b4>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d03b      	beq.n	8007aa4 <HAL_DMA_Abort_IT+0x290>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a66      	ldr	r2, [pc, #408]	; (8007bcc <HAL_DMA_Abort_IT+0x3b8>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d036      	beq.n	8007aa4 <HAL_DMA_Abort_IT+0x290>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a65      	ldr	r2, [pc, #404]	; (8007bd0 <HAL_DMA_Abort_IT+0x3bc>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d031      	beq.n	8007aa4 <HAL_DMA_Abort_IT+0x290>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a63      	ldr	r2, [pc, #396]	; (8007bd4 <HAL_DMA_Abort_IT+0x3c0>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d02c      	beq.n	8007aa4 <HAL_DMA_Abort_IT+0x290>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a62      	ldr	r2, [pc, #392]	; (8007bd8 <HAL_DMA_Abort_IT+0x3c4>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d027      	beq.n	8007aa4 <HAL_DMA_Abort_IT+0x290>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a60      	ldr	r2, [pc, #384]	; (8007bdc <HAL_DMA_Abort_IT+0x3c8>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d022      	beq.n	8007aa4 <HAL_DMA_Abort_IT+0x290>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a5f      	ldr	r2, [pc, #380]	; (8007be0 <HAL_DMA_Abort_IT+0x3cc>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d01d      	beq.n	8007aa4 <HAL_DMA_Abort_IT+0x290>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a5d      	ldr	r2, [pc, #372]	; (8007be4 <HAL_DMA_Abort_IT+0x3d0>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d018      	beq.n	8007aa4 <HAL_DMA_Abort_IT+0x290>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a5c      	ldr	r2, [pc, #368]	; (8007be8 <HAL_DMA_Abort_IT+0x3d4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d013      	beq.n	8007aa4 <HAL_DMA_Abort_IT+0x290>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a5a      	ldr	r2, [pc, #360]	; (8007bec <HAL_DMA_Abort_IT+0x3d8>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00e      	beq.n	8007aa4 <HAL_DMA_Abort_IT+0x290>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a59      	ldr	r2, [pc, #356]	; (8007bf0 <HAL_DMA_Abort_IT+0x3dc>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d009      	beq.n	8007aa4 <HAL_DMA_Abort_IT+0x290>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a57      	ldr	r2, [pc, #348]	; (8007bf4 <HAL_DMA_Abort_IT+0x3e0>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d004      	beq.n	8007aa4 <HAL_DMA_Abort_IT+0x290>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a56      	ldr	r2, [pc, #344]	; (8007bf8 <HAL_DMA_Abort_IT+0x3e4>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d108      	bne.n	8007ab6 <HAL_DMA_Abort_IT+0x2a2>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0201 	bic.w	r2, r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	e007      	b.n	8007ac6 <HAL_DMA_Abort_IT+0x2b2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 0201 	bic.w	r2, r2, #1
 8007ac4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a3c      	ldr	r2, [pc, #240]	; (8007bbc <HAL_DMA_Abort_IT+0x3a8>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d072      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a3a      	ldr	r2, [pc, #232]	; (8007bc0 <HAL_DMA_Abort_IT+0x3ac>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d06d      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a39      	ldr	r2, [pc, #228]	; (8007bc4 <HAL_DMA_Abort_IT+0x3b0>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d068      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a37      	ldr	r2, [pc, #220]	; (8007bc8 <HAL_DMA_Abort_IT+0x3b4>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d063      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a36      	ldr	r2, [pc, #216]	; (8007bcc <HAL_DMA_Abort_IT+0x3b8>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d05e      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a34      	ldr	r2, [pc, #208]	; (8007bd0 <HAL_DMA_Abort_IT+0x3bc>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d059      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a33      	ldr	r2, [pc, #204]	; (8007bd4 <HAL_DMA_Abort_IT+0x3c0>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d054      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a31      	ldr	r2, [pc, #196]	; (8007bd8 <HAL_DMA_Abort_IT+0x3c4>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d04f      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a30      	ldr	r2, [pc, #192]	; (8007bdc <HAL_DMA_Abort_IT+0x3c8>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d04a      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a2e      	ldr	r2, [pc, #184]	; (8007be0 <HAL_DMA_Abort_IT+0x3cc>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d045      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a2d      	ldr	r2, [pc, #180]	; (8007be4 <HAL_DMA_Abort_IT+0x3d0>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d040      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a2b      	ldr	r2, [pc, #172]	; (8007be8 <HAL_DMA_Abort_IT+0x3d4>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d03b      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a2a      	ldr	r2, [pc, #168]	; (8007bec <HAL_DMA_Abort_IT+0x3d8>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d036      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a28      	ldr	r2, [pc, #160]	; (8007bf0 <HAL_DMA_Abort_IT+0x3dc>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d031      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a27      	ldr	r2, [pc, #156]	; (8007bf4 <HAL_DMA_Abort_IT+0x3e0>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d02c      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a25      	ldr	r2, [pc, #148]	; (8007bf8 <HAL_DMA_Abort_IT+0x3e4>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d027      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a24      	ldr	r2, [pc, #144]	; (8007bfc <HAL_DMA_Abort_IT+0x3e8>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d022      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a22      	ldr	r2, [pc, #136]	; (8007c00 <HAL_DMA_Abort_IT+0x3ec>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d01d      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a21      	ldr	r2, [pc, #132]	; (8007c04 <HAL_DMA_Abort_IT+0x3f0>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d018      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a1f      	ldr	r2, [pc, #124]	; (8007c08 <HAL_DMA_Abort_IT+0x3f4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d013      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a1e      	ldr	r2, [pc, #120]	; (8007c0c <HAL_DMA_Abort_IT+0x3f8>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d00e      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a1c      	ldr	r2, [pc, #112]	; (8007c10 <HAL_DMA_Abort_IT+0x3fc>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d009      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a1b      	ldr	r2, [pc, #108]	; (8007c14 <HAL_DMA_Abort_IT+0x400>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d004      	beq.n	8007bb6 <HAL_DMA_Abort_IT+0x3a2>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a19      	ldr	r2, [pc, #100]	; (8007c18 <HAL_DMA_Abort_IT+0x404>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d132      	bne.n	8007c1c <HAL_DMA_Abort_IT+0x408>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e031      	b.n	8007c1e <HAL_DMA_Abort_IT+0x40a>
 8007bba:	bf00      	nop
 8007bbc:	40020010 	.word	0x40020010
 8007bc0:	40020028 	.word	0x40020028
 8007bc4:	40020040 	.word	0x40020040
 8007bc8:	40020058 	.word	0x40020058
 8007bcc:	40020070 	.word	0x40020070
 8007bd0:	40020088 	.word	0x40020088
 8007bd4:	400200a0 	.word	0x400200a0
 8007bd8:	400200b8 	.word	0x400200b8
 8007bdc:	40020410 	.word	0x40020410
 8007be0:	40020428 	.word	0x40020428
 8007be4:	40020440 	.word	0x40020440
 8007be8:	40020458 	.word	0x40020458
 8007bec:	40020470 	.word	0x40020470
 8007bf0:	40020488 	.word	0x40020488
 8007bf4:	400204a0 	.word	0x400204a0
 8007bf8:	400204b8 	.word	0x400204b8
 8007bfc:	58025408 	.word	0x58025408
 8007c00:	5802541c 	.word	0x5802541c
 8007c04:	58025430 	.word	0x58025430
 8007c08:	58025444 	.word	0x58025444
 8007c0c:	58025458 	.word	0x58025458
 8007c10:	5802546c 	.word	0x5802546c
 8007c14:	58025480 	.word	0x58025480
 8007c18:	58025494 	.word	0x58025494
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d028      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c30:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c36:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c3c:	f003 031f 	and.w	r3, r3, #31
 8007c40:	2201      	movs	r2, #1
 8007c42:	409a      	lsls	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007c50:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00c      	beq.n	8007c74 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c68:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007c72:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop

08007ca0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b08a      	sub	sp, #40	; 0x28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007cac:	4b67      	ldr	r3, [pc, #412]	; (8007e4c <HAL_DMA_IRQHandler+0x1ac>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a67      	ldr	r2, [pc, #412]	; (8007e50 <HAL_DMA_IRQHandler+0x1b0>)
 8007cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb6:	0a9b      	lsrs	r3, r3, #10
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cbe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a5f      	ldr	r2, [pc, #380]	; (8007e54 <HAL_DMA_IRQHandler+0x1b4>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d04a      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xd2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a5d      	ldr	r2, [pc, #372]	; (8007e58 <HAL_DMA_IRQHandler+0x1b8>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d045      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xd2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a5c      	ldr	r2, [pc, #368]	; (8007e5c <HAL_DMA_IRQHandler+0x1bc>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d040      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xd2>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a5a      	ldr	r2, [pc, #360]	; (8007e60 <HAL_DMA_IRQHandler+0x1c0>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d03b      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xd2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a59      	ldr	r2, [pc, #356]	; (8007e64 <HAL_DMA_IRQHandler+0x1c4>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d036      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xd2>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a57      	ldr	r2, [pc, #348]	; (8007e68 <HAL_DMA_IRQHandler+0x1c8>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d031      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xd2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a56      	ldr	r2, [pc, #344]	; (8007e6c <HAL_DMA_IRQHandler+0x1cc>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d02c      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xd2>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a54      	ldr	r2, [pc, #336]	; (8007e70 <HAL_DMA_IRQHandler+0x1d0>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d027      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xd2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a53      	ldr	r2, [pc, #332]	; (8007e74 <HAL_DMA_IRQHandler+0x1d4>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d022      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xd2>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a51      	ldr	r2, [pc, #324]	; (8007e78 <HAL_DMA_IRQHandler+0x1d8>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d01d      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xd2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a50      	ldr	r2, [pc, #320]	; (8007e7c <HAL_DMA_IRQHandler+0x1dc>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d018      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xd2>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a4e      	ldr	r2, [pc, #312]	; (8007e80 <HAL_DMA_IRQHandler+0x1e0>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d013      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xd2>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a4d      	ldr	r2, [pc, #308]	; (8007e84 <HAL_DMA_IRQHandler+0x1e4>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00e      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xd2>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a4b      	ldr	r2, [pc, #300]	; (8007e88 <HAL_DMA_IRQHandler+0x1e8>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d009      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xd2>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a4a      	ldr	r2, [pc, #296]	; (8007e8c <HAL_DMA_IRQHandler+0x1ec>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d004      	beq.n	8007d72 <HAL_DMA_IRQHandler+0xd2>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a48      	ldr	r2, [pc, #288]	; (8007e90 <HAL_DMA_IRQHandler+0x1f0>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d101      	bne.n	8007d76 <HAL_DMA_IRQHandler+0xd6>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e000      	b.n	8007d78 <HAL_DMA_IRQHandler+0xd8>
 8007d76:	2300      	movs	r3, #0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 842b 	beq.w	80085d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d82:	f003 031f 	and.w	r3, r3, #31
 8007d86:	2208      	movs	r2, #8
 8007d88:	409a      	lsls	r2, r3
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f000 80a2 	beq.w	8007ed8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a2e      	ldr	r2, [pc, #184]	; (8007e54 <HAL_DMA_IRQHandler+0x1b4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d04a      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x194>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a2d      	ldr	r2, [pc, #180]	; (8007e58 <HAL_DMA_IRQHandler+0x1b8>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d045      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x194>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a2b      	ldr	r2, [pc, #172]	; (8007e5c <HAL_DMA_IRQHandler+0x1bc>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d040      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x194>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a2a      	ldr	r2, [pc, #168]	; (8007e60 <HAL_DMA_IRQHandler+0x1c0>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d03b      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x194>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a28      	ldr	r2, [pc, #160]	; (8007e64 <HAL_DMA_IRQHandler+0x1c4>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d036      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x194>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a27      	ldr	r2, [pc, #156]	; (8007e68 <HAL_DMA_IRQHandler+0x1c8>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d031      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x194>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a25      	ldr	r2, [pc, #148]	; (8007e6c <HAL_DMA_IRQHandler+0x1cc>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d02c      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x194>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a24      	ldr	r2, [pc, #144]	; (8007e70 <HAL_DMA_IRQHandler+0x1d0>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d027      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x194>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a22      	ldr	r2, [pc, #136]	; (8007e74 <HAL_DMA_IRQHandler+0x1d4>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d022      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x194>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a21      	ldr	r2, [pc, #132]	; (8007e78 <HAL_DMA_IRQHandler+0x1d8>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d01d      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x194>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a1f      	ldr	r2, [pc, #124]	; (8007e7c <HAL_DMA_IRQHandler+0x1dc>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d018      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x194>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a1e      	ldr	r2, [pc, #120]	; (8007e80 <HAL_DMA_IRQHandler+0x1e0>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d013      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x194>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a1c      	ldr	r2, [pc, #112]	; (8007e84 <HAL_DMA_IRQHandler+0x1e4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d00e      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x194>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a1b      	ldr	r2, [pc, #108]	; (8007e88 <HAL_DMA_IRQHandler+0x1e8>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d009      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x194>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a19      	ldr	r2, [pc, #100]	; (8007e8c <HAL_DMA_IRQHandler+0x1ec>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d004      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x194>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a18      	ldr	r2, [pc, #96]	; (8007e90 <HAL_DMA_IRQHandler+0x1f0>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d12f      	bne.n	8007e94 <HAL_DMA_IRQHandler+0x1f4>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0304 	and.w	r3, r3, #4
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	bf14      	ite	ne
 8007e42:	2301      	movne	r3, #1
 8007e44:	2300      	moveq	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	e02e      	b.n	8007ea8 <HAL_DMA_IRQHandler+0x208>
 8007e4a:	bf00      	nop
 8007e4c:	24000088 	.word	0x24000088
 8007e50:	1b4e81b5 	.word	0x1b4e81b5
 8007e54:	40020010 	.word	0x40020010
 8007e58:	40020028 	.word	0x40020028
 8007e5c:	40020040 	.word	0x40020040
 8007e60:	40020058 	.word	0x40020058
 8007e64:	40020070 	.word	0x40020070
 8007e68:	40020088 	.word	0x40020088
 8007e6c:	400200a0 	.word	0x400200a0
 8007e70:	400200b8 	.word	0x400200b8
 8007e74:	40020410 	.word	0x40020410
 8007e78:	40020428 	.word	0x40020428
 8007e7c:	40020440 	.word	0x40020440
 8007e80:	40020458 	.word	0x40020458
 8007e84:	40020470 	.word	0x40020470
 8007e88:	40020488 	.word	0x40020488
 8007e8c:	400204a0 	.word	0x400204a0
 8007e90:	400204b8 	.word	0x400204b8
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0308 	and.w	r3, r3, #8
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	bf14      	ite	ne
 8007ea2:	2301      	movne	r3, #1
 8007ea4:	2300      	moveq	r3, #0
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d015      	beq.n	8007ed8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 0204 	bic.w	r2, r2, #4
 8007eba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ec0:	f003 031f 	and.w	r3, r3, #31
 8007ec4:	2208      	movs	r2, #8
 8007ec6:	409a      	lsls	r2, r3
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed0:	f043 0201 	orr.w	r2, r3, #1
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007edc:	f003 031f 	and.w	r3, r3, #31
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d06e      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a69      	ldr	r2, [pc, #420]	; (8008098 <HAL_DMA_IRQHandler+0x3f8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d04a      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x2ee>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a67      	ldr	r2, [pc, #412]	; (800809c <HAL_DMA_IRQHandler+0x3fc>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d045      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x2ee>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a66      	ldr	r2, [pc, #408]	; (80080a0 <HAL_DMA_IRQHandler+0x400>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d040      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x2ee>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a64      	ldr	r2, [pc, #400]	; (80080a4 <HAL_DMA_IRQHandler+0x404>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d03b      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x2ee>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a63      	ldr	r2, [pc, #396]	; (80080a8 <HAL_DMA_IRQHandler+0x408>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d036      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x2ee>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a61      	ldr	r2, [pc, #388]	; (80080ac <HAL_DMA_IRQHandler+0x40c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d031      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x2ee>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a60      	ldr	r2, [pc, #384]	; (80080b0 <HAL_DMA_IRQHandler+0x410>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d02c      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x2ee>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a5e      	ldr	r2, [pc, #376]	; (80080b4 <HAL_DMA_IRQHandler+0x414>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d027      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x2ee>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a5d      	ldr	r2, [pc, #372]	; (80080b8 <HAL_DMA_IRQHandler+0x418>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d022      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x2ee>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a5b      	ldr	r2, [pc, #364]	; (80080bc <HAL_DMA_IRQHandler+0x41c>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d01d      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x2ee>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a5a      	ldr	r2, [pc, #360]	; (80080c0 <HAL_DMA_IRQHandler+0x420>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d018      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x2ee>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a58      	ldr	r2, [pc, #352]	; (80080c4 <HAL_DMA_IRQHandler+0x424>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d013      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x2ee>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a57      	ldr	r2, [pc, #348]	; (80080c8 <HAL_DMA_IRQHandler+0x428>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d00e      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x2ee>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a55      	ldr	r2, [pc, #340]	; (80080cc <HAL_DMA_IRQHandler+0x42c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d009      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x2ee>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a54      	ldr	r2, [pc, #336]	; (80080d0 <HAL_DMA_IRQHandler+0x430>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d004      	beq.n	8007f8e <HAL_DMA_IRQHandler+0x2ee>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a52      	ldr	r2, [pc, #328]	; (80080d4 <HAL_DMA_IRQHandler+0x434>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d10a      	bne.n	8007fa4 <HAL_DMA_IRQHandler+0x304>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	bf14      	ite	ne
 8007f9c:	2301      	movne	r3, #1
 8007f9e:	2300      	moveq	r3, #0
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	e003      	b.n	8007fac <HAL_DMA_IRQHandler+0x30c>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2300      	movs	r3, #0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00d      	beq.n	8007fcc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb4:	f003 031f 	and.w	r3, r3, #31
 8007fb8:	2201      	movs	r2, #1
 8007fba:	409a      	lsls	r2, r3
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc4:	f043 0202 	orr.w	r2, r3, #2
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fd0:	f003 031f 	and.w	r3, r3, #31
 8007fd4:	2204      	movs	r2, #4
 8007fd6:	409a      	lsls	r2, r3
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 808f 	beq.w	8008100 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a2c      	ldr	r2, [pc, #176]	; (8008098 <HAL_DMA_IRQHandler+0x3f8>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d04a      	beq.n	8008082 <HAL_DMA_IRQHandler+0x3e2>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a2a      	ldr	r2, [pc, #168]	; (800809c <HAL_DMA_IRQHandler+0x3fc>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d045      	beq.n	8008082 <HAL_DMA_IRQHandler+0x3e2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a29      	ldr	r2, [pc, #164]	; (80080a0 <HAL_DMA_IRQHandler+0x400>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d040      	beq.n	8008082 <HAL_DMA_IRQHandler+0x3e2>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a27      	ldr	r2, [pc, #156]	; (80080a4 <HAL_DMA_IRQHandler+0x404>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d03b      	beq.n	8008082 <HAL_DMA_IRQHandler+0x3e2>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a26      	ldr	r2, [pc, #152]	; (80080a8 <HAL_DMA_IRQHandler+0x408>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d036      	beq.n	8008082 <HAL_DMA_IRQHandler+0x3e2>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a24      	ldr	r2, [pc, #144]	; (80080ac <HAL_DMA_IRQHandler+0x40c>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d031      	beq.n	8008082 <HAL_DMA_IRQHandler+0x3e2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a23      	ldr	r2, [pc, #140]	; (80080b0 <HAL_DMA_IRQHandler+0x410>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d02c      	beq.n	8008082 <HAL_DMA_IRQHandler+0x3e2>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a21      	ldr	r2, [pc, #132]	; (80080b4 <HAL_DMA_IRQHandler+0x414>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d027      	beq.n	8008082 <HAL_DMA_IRQHandler+0x3e2>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a20      	ldr	r2, [pc, #128]	; (80080b8 <HAL_DMA_IRQHandler+0x418>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d022      	beq.n	8008082 <HAL_DMA_IRQHandler+0x3e2>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a1e      	ldr	r2, [pc, #120]	; (80080bc <HAL_DMA_IRQHandler+0x41c>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d01d      	beq.n	8008082 <HAL_DMA_IRQHandler+0x3e2>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a1d      	ldr	r2, [pc, #116]	; (80080c0 <HAL_DMA_IRQHandler+0x420>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d018      	beq.n	8008082 <HAL_DMA_IRQHandler+0x3e2>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a1b      	ldr	r2, [pc, #108]	; (80080c4 <HAL_DMA_IRQHandler+0x424>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d013      	beq.n	8008082 <HAL_DMA_IRQHandler+0x3e2>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a1a      	ldr	r2, [pc, #104]	; (80080c8 <HAL_DMA_IRQHandler+0x428>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d00e      	beq.n	8008082 <HAL_DMA_IRQHandler+0x3e2>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a18      	ldr	r2, [pc, #96]	; (80080cc <HAL_DMA_IRQHandler+0x42c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d009      	beq.n	8008082 <HAL_DMA_IRQHandler+0x3e2>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a17      	ldr	r2, [pc, #92]	; (80080d0 <HAL_DMA_IRQHandler+0x430>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d004      	beq.n	8008082 <HAL_DMA_IRQHandler+0x3e2>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a15      	ldr	r2, [pc, #84]	; (80080d4 <HAL_DMA_IRQHandler+0x434>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d12a      	bne.n	80080d8 <HAL_DMA_IRQHandler+0x438>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0302 	and.w	r3, r3, #2
 800808c:	2b00      	cmp	r3, #0
 800808e:	bf14      	ite	ne
 8008090:	2301      	movne	r3, #1
 8008092:	2300      	moveq	r3, #0
 8008094:	b2db      	uxtb	r3, r3
 8008096:	e023      	b.n	80080e0 <HAL_DMA_IRQHandler+0x440>
 8008098:	40020010 	.word	0x40020010
 800809c:	40020028 	.word	0x40020028
 80080a0:	40020040 	.word	0x40020040
 80080a4:	40020058 	.word	0x40020058
 80080a8:	40020070 	.word	0x40020070
 80080ac:	40020088 	.word	0x40020088
 80080b0:	400200a0 	.word	0x400200a0
 80080b4:	400200b8 	.word	0x400200b8
 80080b8:	40020410 	.word	0x40020410
 80080bc:	40020428 	.word	0x40020428
 80080c0:	40020440 	.word	0x40020440
 80080c4:	40020458 	.word	0x40020458
 80080c8:	40020470 	.word	0x40020470
 80080cc:	40020488 	.word	0x40020488
 80080d0:	400204a0 	.word	0x400204a0
 80080d4:	400204b8 	.word	0x400204b8
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2300      	movs	r3, #0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00d      	beq.n	8008100 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e8:	f003 031f 	and.w	r3, r3, #31
 80080ec:	2204      	movs	r2, #4
 80080ee:	409a      	lsls	r2, r3
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f8:	f043 0204 	orr.w	r2, r3, #4
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008104:	f003 031f 	and.w	r3, r3, #31
 8008108:	2210      	movs	r2, #16
 800810a:	409a      	lsls	r2, r3
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	4013      	ands	r3, r2
 8008110:	2b00      	cmp	r3, #0
 8008112:	f000 80a6 	beq.w	8008262 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a85      	ldr	r2, [pc, #532]	; (8008330 <HAL_DMA_IRQHandler+0x690>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d04a      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x516>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a83      	ldr	r2, [pc, #524]	; (8008334 <HAL_DMA_IRQHandler+0x694>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d045      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x516>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a82      	ldr	r2, [pc, #520]	; (8008338 <HAL_DMA_IRQHandler+0x698>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d040      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x516>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a80      	ldr	r2, [pc, #512]	; (800833c <HAL_DMA_IRQHandler+0x69c>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d03b      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x516>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a7f      	ldr	r2, [pc, #508]	; (8008340 <HAL_DMA_IRQHandler+0x6a0>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d036      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x516>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a7d      	ldr	r2, [pc, #500]	; (8008344 <HAL_DMA_IRQHandler+0x6a4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d031      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x516>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a7c      	ldr	r2, [pc, #496]	; (8008348 <HAL_DMA_IRQHandler+0x6a8>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d02c      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x516>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a7a      	ldr	r2, [pc, #488]	; (800834c <HAL_DMA_IRQHandler+0x6ac>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d027      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x516>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a79      	ldr	r2, [pc, #484]	; (8008350 <HAL_DMA_IRQHandler+0x6b0>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d022      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x516>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a77      	ldr	r2, [pc, #476]	; (8008354 <HAL_DMA_IRQHandler+0x6b4>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d01d      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x516>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a76      	ldr	r2, [pc, #472]	; (8008358 <HAL_DMA_IRQHandler+0x6b8>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d018      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x516>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a74      	ldr	r2, [pc, #464]	; (800835c <HAL_DMA_IRQHandler+0x6bc>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d013      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x516>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a73      	ldr	r2, [pc, #460]	; (8008360 <HAL_DMA_IRQHandler+0x6c0>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00e      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x516>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a71      	ldr	r2, [pc, #452]	; (8008364 <HAL_DMA_IRQHandler+0x6c4>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d009      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x516>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a70      	ldr	r2, [pc, #448]	; (8008368 <HAL_DMA_IRQHandler+0x6c8>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d004      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x516>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a6e      	ldr	r2, [pc, #440]	; (800836c <HAL_DMA_IRQHandler+0x6cc>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d10a      	bne.n	80081cc <HAL_DMA_IRQHandler+0x52c>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0308 	and.w	r3, r3, #8
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	bf14      	ite	ne
 80081c4:	2301      	movne	r3, #1
 80081c6:	2300      	moveq	r3, #0
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	e009      	b.n	80081e0 <HAL_DMA_IRQHandler+0x540>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0304 	and.w	r3, r3, #4
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bf14      	ite	ne
 80081da:	2301      	movne	r3, #1
 80081dc:	2300      	moveq	r3, #0
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d03e      	beq.n	8008262 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081e8:	f003 031f 	and.w	r3, r3, #31
 80081ec:	2210      	movs	r2, #16
 80081ee:	409a      	lsls	r2, r3
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d018      	beq.n	8008234 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d108      	bne.n	8008222 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008214:	2b00      	cmp	r3, #0
 8008216:	d024      	beq.n	8008262 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	4798      	blx	r3
 8008220:	e01f      	b.n	8008262 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008226:	2b00      	cmp	r3, #0
 8008228:	d01b      	beq.n	8008262 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
 8008232:	e016      	b.n	8008262 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823e:	2b00      	cmp	r3, #0
 8008240:	d107      	bne.n	8008252 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0208 	bic.w	r2, r2, #8
 8008250:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008266:	f003 031f 	and.w	r3, r3, #31
 800826a:	2220      	movs	r2, #32
 800826c:	409a      	lsls	r2, r3
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	4013      	ands	r3, r2
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 8110 	beq.w	8008498 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a2c      	ldr	r2, [pc, #176]	; (8008330 <HAL_DMA_IRQHandler+0x690>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d04a      	beq.n	8008318 <HAL_DMA_IRQHandler+0x678>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a2b      	ldr	r2, [pc, #172]	; (8008334 <HAL_DMA_IRQHandler+0x694>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d045      	beq.n	8008318 <HAL_DMA_IRQHandler+0x678>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a29      	ldr	r2, [pc, #164]	; (8008338 <HAL_DMA_IRQHandler+0x698>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d040      	beq.n	8008318 <HAL_DMA_IRQHandler+0x678>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a28      	ldr	r2, [pc, #160]	; (800833c <HAL_DMA_IRQHandler+0x69c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d03b      	beq.n	8008318 <HAL_DMA_IRQHandler+0x678>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a26      	ldr	r2, [pc, #152]	; (8008340 <HAL_DMA_IRQHandler+0x6a0>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d036      	beq.n	8008318 <HAL_DMA_IRQHandler+0x678>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a25      	ldr	r2, [pc, #148]	; (8008344 <HAL_DMA_IRQHandler+0x6a4>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d031      	beq.n	8008318 <HAL_DMA_IRQHandler+0x678>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a23      	ldr	r2, [pc, #140]	; (8008348 <HAL_DMA_IRQHandler+0x6a8>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d02c      	beq.n	8008318 <HAL_DMA_IRQHandler+0x678>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a22      	ldr	r2, [pc, #136]	; (800834c <HAL_DMA_IRQHandler+0x6ac>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d027      	beq.n	8008318 <HAL_DMA_IRQHandler+0x678>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a20      	ldr	r2, [pc, #128]	; (8008350 <HAL_DMA_IRQHandler+0x6b0>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d022      	beq.n	8008318 <HAL_DMA_IRQHandler+0x678>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a1f      	ldr	r2, [pc, #124]	; (8008354 <HAL_DMA_IRQHandler+0x6b4>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d01d      	beq.n	8008318 <HAL_DMA_IRQHandler+0x678>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a1d      	ldr	r2, [pc, #116]	; (8008358 <HAL_DMA_IRQHandler+0x6b8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d018      	beq.n	8008318 <HAL_DMA_IRQHandler+0x678>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a1c      	ldr	r2, [pc, #112]	; (800835c <HAL_DMA_IRQHandler+0x6bc>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d013      	beq.n	8008318 <HAL_DMA_IRQHandler+0x678>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a1a      	ldr	r2, [pc, #104]	; (8008360 <HAL_DMA_IRQHandler+0x6c0>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d00e      	beq.n	8008318 <HAL_DMA_IRQHandler+0x678>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a19      	ldr	r2, [pc, #100]	; (8008364 <HAL_DMA_IRQHandler+0x6c4>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d009      	beq.n	8008318 <HAL_DMA_IRQHandler+0x678>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a17      	ldr	r2, [pc, #92]	; (8008368 <HAL_DMA_IRQHandler+0x6c8>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d004      	beq.n	8008318 <HAL_DMA_IRQHandler+0x678>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a16      	ldr	r2, [pc, #88]	; (800836c <HAL_DMA_IRQHandler+0x6cc>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d12b      	bne.n	8008370 <HAL_DMA_IRQHandler+0x6d0>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0310 	and.w	r3, r3, #16
 8008322:	2b00      	cmp	r3, #0
 8008324:	bf14      	ite	ne
 8008326:	2301      	movne	r3, #1
 8008328:	2300      	moveq	r3, #0
 800832a:	b2db      	uxtb	r3, r3
 800832c:	e02a      	b.n	8008384 <HAL_DMA_IRQHandler+0x6e4>
 800832e:	bf00      	nop
 8008330:	40020010 	.word	0x40020010
 8008334:	40020028 	.word	0x40020028
 8008338:	40020040 	.word	0x40020040
 800833c:	40020058 	.word	0x40020058
 8008340:	40020070 	.word	0x40020070
 8008344:	40020088 	.word	0x40020088
 8008348:	400200a0 	.word	0x400200a0
 800834c:	400200b8 	.word	0x400200b8
 8008350:	40020410 	.word	0x40020410
 8008354:	40020428 	.word	0x40020428
 8008358:	40020440 	.word	0x40020440
 800835c:	40020458 	.word	0x40020458
 8008360:	40020470 	.word	0x40020470
 8008364:	40020488 	.word	0x40020488
 8008368:	400204a0 	.word	0x400204a0
 800836c:	400204b8 	.word	0x400204b8
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	2b00      	cmp	r3, #0
 800837c:	bf14      	ite	ne
 800837e:	2301      	movne	r3, #1
 8008380:	2300      	moveq	r3, #0
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 8087 	beq.w	8008498 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800838e:	f003 031f 	and.w	r3, r3, #31
 8008392:	2220      	movs	r2, #32
 8008394:	409a      	lsls	r2, r3
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d139      	bne.n	800841a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f022 0216 	bic.w	r2, r2, #22
 80083b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	695a      	ldr	r2, [r3, #20]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d103      	bne.n	80083d6 <HAL_DMA_IRQHandler+0x736>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d007      	beq.n	80083e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0208 	bic.w	r2, r2, #8
 80083e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ea:	f003 031f 	and.w	r3, r3, #31
 80083ee:	223f      	movs	r2, #63	; 0x3f
 80083f0:	409a      	lsls	r2, r3
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2201      	movs	r2, #1
 80083fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 834a 	beq.w	8008aa4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	4798      	blx	r3
          }
          return;
 8008418:	e344      	b.n	8008aa4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d018      	beq.n	800845a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d108      	bne.n	8008448 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800843a:	2b00      	cmp	r3, #0
 800843c:	d02c      	beq.n	8008498 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	4798      	blx	r3
 8008446:	e027      	b.n	8008498 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d023      	beq.n	8008498 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	4798      	blx	r3
 8008458:	e01e      	b.n	8008498 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10f      	bne.n	8008488 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 0210 	bic.w	r2, r2, #16
 8008476:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d003      	beq.n	8008498 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800849c:	2b00      	cmp	r3, #0
 800849e:	f000 8306 	beq.w	8008aae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 8088 	beq.w	80085c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2204      	movs	r2, #4
 80084b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a7a      	ldr	r2, [pc, #488]	; (80086a8 <HAL_DMA_IRQHandler+0xa08>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d04a      	beq.n	8008558 <HAL_DMA_IRQHandler+0x8b8>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a79      	ldr	r2, [pc, #484]	; (80086ac <HAL_DMA_IRQHandler+0xa0c>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d045      	beq.n	8008558 <HAL_DMA_IRQHandler+0x8b8>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a77      	ldr	r2, [pc, #476]	; (80086b0 <HAL_DMA_IRQHandler+0xa10>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d040      	beq.n	8008558 <HAL_DMA_IRQHandler+0x8b8>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a76      	ldr	r2, [pc, #472]	; (80086b4 <HAL_DMA_IRQHandler+0xa14>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d03b      	beq.n	8008558 <HAL_DMA_IRQHandler+0x8b8>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a74      	ldr	r2, [pc, #464]	; (80086b8 <HAL_DMA_IRQHandler+0xa18>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d036      	beq.n	8008558 <HAL_DMA_IRQHandler+0x8b8>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a73      	ldr	r2, [pc, #460]	; (80086bc <HAL_DMA_IRQHandler+0xa1c>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d031      	beq.n	8008558 <HAL_DMA_IRQHandler+0x8b8>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a71      	ldr	r2, [pc, #452]	; (80086c0 <HAL_DMA_IRQHandler+0xa20>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d02c      	beq.n	8008558 <HAL_DMA_IRQHandler+0x8b8>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a70      	ldr	r2, [pc, #448]	; (80086c4 <HAL_DMA_IRQHandler+0xa24>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d027      	beq.n	8008558 <HAL_DMA_IRQHandler+0x8b8>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a6e      	ldr	r2, [pc, #440]	; (80086c8 <HAL_DMA_IRQHandler+0xa28>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d022      	beq.n	8008558 <HAL_DMA_IRQHandler+0x8b8>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a6d      	ldr	r2, [pc, #436]	; (80086cc <HAL_DMA_IRQHandler+0xa2c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d01d      	beq.n	8008558 <HAL_DMA_IRQHandler+0x8b8>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a6b      	ldr	r2, [pc, #428]	; (80086d0 <HAL_DMA_IRQHandler+0xa30>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d018      	beq.n	8008558 <HAL_DMA_IRQHandler+0x8b8>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a6a      	ldr	r2, [pc, #424]	; (80086d4 <HAL_DMA_IRQHandler+0xa34>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d013      	beq.n	8008558 <HAL_DMA_IRQHandler+0x8b8>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a68      	ldr	r2, [pc, #416]	; (80086d8 <HAL_DMA_IRQHandler+0xa38>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d00e      	beq.n	8008558 <HAL_DMA_IRQHandler+0x8b8>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a67      	ldr	r2, [pc, #412]	; (80086dc <HAL_DMA_IRQHandler+0xa3c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d009      	beq.n	8008558 <HAL_DMA_IRQHandler+0x8b8>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a65      	ldr	r2, [pc, #404]	; (80086e0 <HAL_DMA_IRQHandler+0xa40>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d004      	beq.n	8008558 <HAL_DMA_IRQHandler+0x8b8>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a64      	ldr	r2, [pc, #400]	; (80086e4 <HAL_DMA_IRQHandler+0xa44>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d108      	bne.n	800856a <HAL_DMA_IRQHandler+0x8ca>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0201 	bic.w	r2, r2, #1
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	e007      	b.n	800857a <HAL_DMA_IRQHandler+0x8da>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 0201 	bic.w	r2, r2, #1
 8008578:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	3301      	adds	r3, #1
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008582:	429a      	cmp	r2, r3
 8008584:	d307      	bcc.n	8008596 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1f2      	bne.n	800857a <HAL_DMA_IRQHandler+0x8da>
 8008594:	e000      	b.n	8008598 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008596:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0301 	and.w	r3, r3, #1
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d004      	beq.n	80085b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2203      	movs	r2, #3
 80085aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80085ae:	e003      	b.n	80085b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f000 8272 	beq.w	8008aae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
 80085d2:	e26c      	b.n	8008aae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a43      	ldr	r2, [pc, #268]	; (80086e8 <HAL_DMA_IRQHandler+0xa48>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d022      	beq.n	8008624 <HAL_DMA_IRQHandler+0x984>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a42      	ldr	r2, [pc, #264]	; (80086ec <HAL_DMA_IRQHandler+0xa4c>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d01d      	beq.n	8008624 <HAL_DMA_IRQHandler+0x984>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a40      	ldr	r2, [pc, #256]	; (80086f0 <HAL_DMA_IRQHandler+0xa50>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d018      	beq.n	8008624 <HAL_DMA_IRQHandler+0x984>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a3f      	ldr	r2, [pc, #252]	; (80086f4 <HAL_DMA_IRQHandler+0xa54>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d013      	beq.n	8008624 <HAL_DMA_IRQHandler+0x984>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a3d      	ldr	r2, [pc, #244]	; (80086f8 <HAL_DMA_IRQHandler+0xa58>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d00e      	beq.n	8008624 <HAL_DMA_IRQHandler+0x984>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a3c      	ldr	r2, [pc, #240]	; (80086fc <HAL_DMA_IRQHandler+0xa5c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d009      	beq.n	8008624 <HAL_DMA_IRQHandler+0x984>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a3a      	ldr	r2, [pc, #232]	; (8008700 <HAL_DMA_IRQHandler+0xa60>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d004      	beq.n	8008624 <HAL_DMA_IRQHandler+0x984>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a39      	ldr	r2, [pc, #228]	; (8008704 <HAL_DMA_IRQHandler+0xa64>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d101      	bne.n	8008628 <HAL_DMA_IRQHandler+0x988>
 8008624:	2301      	movs	r3, #1
 8008626:	e000      	b.n	800862a <HAL_DMA_IRQHandler+0x98a>
 8008628:	2300      	movs	r3, #0
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 823f 	beq.w	8008aae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800863c:	f003 031f 	and.w	r3, r3, #31
 8008640:	2204      	movs	r2, #4
 8008642:	409a      	lsls	r2, r3
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	4013      	ands	r3, r2
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 80cd 	beq.w	80087e8 <HAL_DMA_IRQHandler+0xb48>
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f003 0304 	and.w	r3, r3, #4
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 80c7 	beq.w	80087e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800865e:	f003 031f 	and.w	r3, r3, #31
 8008662:	2204      	movs	r2, #4
 8008664:	409a      	lsls	r2, r3
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d049      	beq.n	8008708 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d109      	bne.n	8008692 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 8210 	beq.w	8008aa8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008690:	e20a      	b.n	8008aa8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	f000 8206 	beq.w	8008aa8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086a4:	e200      	b.n	8008aa8 <HAL_DMA_IRQHandler+0xe08>
 80086a6:	bf00      	nop
 80086a8:	40020010 	.word	0x40020010
 80086ac:	40020028 	.word	0x40020028
 80086b0:	40020040 	.word	0x40020040
 80086b4:	40020058 	.word	0x40020058
 80086b8:	40020070 	.word	0x40020070
 80086bc:	40020088 	.word	0x40020088
 80086c0:	400200a0 	.word	0x400200a0
 80086c4:	400200b8 	.word	0x400200b8
 80086c8:	40020410 	.word	0x40020410
 80086cc:	40020428 	.word	0x40020428
 80086d0:	40020440 	.word	0x40020440
 80086d4:	40020458 	.word	0x40020458
 80086d8:	40020470 	.word	0x40020470
 80086dc:	40020488 	.word	0x40020488
 80086e0:	400204a0 	.word	0x400204a0
 80086e4:	400204b8 	.word	0x400204b8
 80086e8:	58025408 	.word	0x58025408
 80086ec:	5802541c 	.word	0x5802541c
 80086f0:	58025430 	.word	0x58025430
 80086f4:	58025444 	.word	0x58025444
 80086f8:	58025458 	.word	0x58025458
 80086fc:	5802546c 	.word	0x5802546c
 8008700:	58025480 	.word	0x58025480
 8008704:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	f003 0320 	and.w	r3, r3, #32
 800870e:	2b00      	cmp	r3, #0
 8008710:	d160      	bne.n	80087d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a7f      	ldr	r2, [pc, #508]	; (8008914 <HAL_DMA_IRQHandler+0xc74>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d04a      	beq.n	80087b2 <HAL_DMA_IRQHandler+0xb12>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a7d      	ldr	r2, [pc, #500]	; (8008918 <HAL_DMA_IRQHandler+0xc78>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d045      	beq.n	80087b2 <HAL_DMA_IRQHandler+0xb12>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a7c      	ldr	r2, [pc, #496]	; (800891c <HAL_DMA_IRQHandler+0xc7c>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d040      	beq.n	80087b2 <HAL_DMA_IRQHandler+0xb12>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a7a      	ldr	r2, [pc, #488]	; (8008920 <HAL_DMA_IRQHandler+0xc80>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d03b      	beq.n	80087b2 <HAL_DMA_IRQHandler+0xb12>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a79      	ldr	r2, [pc, #484]	; (8008924 <HAL_DMA_IRQHandler+0xc84>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d036      	beq.n	80087b2 <HAL_DMA_IRQHandler+0xb12>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a77      	ldr	r2, [pc, #476]	; (8008928 <HAL_DMA_IRQHandler+0xc88>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d031      	beq.n	80087b2 <HAL_DMA_IRQHandler+0xb12>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a76      	ldr	r2, [pc, #472]	; (800892c <HAL_DMA_IRQHandler+0xc8c>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d02c      	beq.n	80087b2 <HAL_DMA_IRQHandler+0xb12>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a74      	ldr	r2, [pc, #464]	; (8008930 <HAL_DMA_IRQHandler+0xc90>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d027      	beq.n	80087b2 <HAL_DMA_IRQHandler+0xb12>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a73      	ldr	r2, [pc, #460]	; (8008934 <HAL_DMA_IRQHandler+0xc94>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d022      	beq.n	80087b2 <HAL_DMA_IRQHandler+0xb12>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a71      	ldr	r2, [pc, #452]	; (8008938 <HAL_DMA_IRQHandler+0xc98>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d01d      	beq.n	80087b2 <HAL_DMA_IRQHandler+0xb12>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a70      	ldr	r2, [pc, #448]	; (800893c <HAL_DMA_IRQHandler+0xc9c>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d018      	beq.n	80087b2 <HAL_DMA_IRQHandler+0xb12>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a6e      	ldr	r2, [pc, #440]	; (8008940 <HAL_DMA_IRQHandler+0xca0>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d013      	beq.n	80087b2 <HAL_DMA_IRQHandler+0xb12>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a6d      	ldr	r2, [pc, #436]	; (8008944 <HAL_DMA_IRQHandler+0xca4>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d00e      	beq.n	80087b2 <HAL_DMA_IRQHandler+0xb12>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a6b      	ldr	r2, [pc, #428]	; (8008948 <HAL_DMA_IRQHandler+0xca8>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d009      	beq.n	80087b2 <HAL_DMA_IRQHandler+0xb12>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a6a      	ldr	r2, [pc, #424]	; (800894c <HAL_DMA_IRQHandler+0xcac>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d004      	beq.n	80087b2 <HAL_DMA_IRQHandler+0xb12>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a68      	ldr	r2, [pc, #416]	; (8008950 <HAL_DMA_IRQHandler+0xcb0>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d108      	bne.n	80087c4 <HAL_DMA_IRQHandler+0xb24>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f022 0208 	bic.w	r2, r2, #8
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	e007      	b.n	80087d4 <HAL_DMA_IRQHandler+0xb34>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f022 0204 	bic.w	r2, r2, #4
 80087d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 8165 	beq.w	8008aa8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80087e6:	e15f      	b.n	8008aa8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ec:	f003 031f 	and.w	r3, r3, #31
 80087f0:	2202      	movs	r2, #2
 80087f2:	409a      	lsls	r2, r3
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	4013      	ands	r3, r2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 80c5 	beq.w	8008988 <HAL_DMA_IRQHandler+0xce8>
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	f003 0302 	and.w	r3, r3, #2
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 80bf 	beq.w	8008988 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800880e:	f003 031f 	and.w	r3, r3, #31
 8008812:	2202      	movs	r2, #2
 8008814:	409a      	lsls	r2, r3
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d018      	beq.n	8008856 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d109      	bne.n	8008842 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 813a 	beq.w	8008aac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008840:	e134      	b.n	8008aac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 8130 	beq.w	8008aac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008854:	e12a      	b.n	8008aac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	f003 0320 	and.w	r3, r3, #32
 800885c:	2b00      	cmp	r3, #0
 800885e:	f040 8089 	bne.w	8008974 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a2b      	ldr	r2, [pc, #172]	; (8008914 <HAL_DMA_IRQHandler+0xc74>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d04a      	beq.n	8008902 <HAL_DMA_IRQHandler+0xc62>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a29      	ldr	r2, [pc, #164]	; (8008918 <HAL_DMA_IRQHandler+0xc78>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d045      	beq.n	8008902 <HAL_DMA_IRQHandler+0xc62>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a28      	ldr	r2, [pc, #160]	; (800891c <HAL_DMA_IRQHandler+0xc7c>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d040      	beq.n	8008902 <HAL_DMA_IRQHandler+0xc62>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a26      	ldr	r2, [pc, #152]	; (8008920 <HAL_DMA_IRQHandler+0xc80>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d03b      	beq.n	8008902 <HAL_DMA_IRQHandler+0xc62>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a25      	ldr	r2, [pc, #148]	; (8008924 <HAL_DMA_IRQHandler+0xc84>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d036      	beq.n	8008902 <HAL_DMA_IRQHandler+0xc62>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a23      	ldr	r2, [pc, #140]	; (8008928 <HAL_DMA_IRQHandler+0xc88>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d031      	beq.n	8008902 <HAL_DMA_IRQHandler+0xc62>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a22      	ldr	r2, [pc, #136]	; (800892c <HAL_DMA_IRQHandler+0xc8c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d02c      	beq.n	8008902 <HAL_DMA_IRQHandler+0xc62>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a20      	ldr	r2, [pc, #128]	; (8008930 <HAL_DMA_IRQHandler+0xc90>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d027      	beq.n	8008902 <HAL_DMA_IRQHandler+0xc62>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a1f      	ldr	r2, [pc, #124]	; (8008934 <HAL_DMA_IRQHandler+0xc94>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d022      	beq.n	8008902 <HAL_DMA_IRQHandler+0xc62>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a1d      	ldr	r2, [pc, #116]	; (8008938 <HAL_DMA_IRQHandler+0xc98>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d01d      	beq.n	8008902 <HAL_DMA_IRQHandler+0xc62>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a1c      	ldr	r2, [pc, #112]	; (800893c <HAL_DMA_IRQHandler+0xc9c>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d018      	beq.n	8008902 <HAL_DMA_IRQHandler+0xc62>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a1a      	ldr	r2, [pc, #104]	; (8008940 <HAL_DMA_IRQHandler+0xca0>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d013      	beq.n	8008902 <HAL_DMA_IRQHandler+0xc62>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a19      	ldr	r2, [pc, #100]	; (8008944 <HAL_DMA_IRQHandler+0xca4>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d00e      	beq.n	8008902 <HAL_DMA_IRQHandler+0xc62>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a17      	ldr	r2, [pc, #92]	; (8008948 <HAL_DMA_IRQHandler+0xca8>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d009      	beq.n	8008902 <HAL_DMA_IRQHandler+0xc62>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a16      	ldr	r2, [pc, #88]	; (800894c <HAL_DMA_IRQHandler+0xcac>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d004      	beq.n	8008902 <HAL_DMA_IRQHandler+0xc62>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a14      	ldr	r2, [pc, #80]	; (8008950 <HAL_DMA_IRQHandler+0xcb0>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d128      	bne.n	8008954 <HAL_DMA_IRQHandler+0xcb4>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f022 0214 	bic.w	r2, r2, #20
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	e027      	b.n	8008964 <HAL_DMA_IRQHandler+0xcc4>
 8008914:	40020010 	.word	0x40020010
 8008918:	40020028 	.word	0x40020028
 800891c:	40020040 	.word	0x40020040
 8008920:	40020058 	.word	0x40020058
 8008924:	40020070 	.word	0x40020070
 8008928:	40020088 	.word	0x40020088
 800892c:	400200a0 	.word	0x400200a0
 8008930:	400200b8 	.word	0x400200b8
 8008934:	40020410 	.word	0x40020410
 8008938:	40020428 	.word	0x40020428
 800893c:	40020440 	.word	0x40020440
 8008940:	40020458 	.word	0x40020458
 8008944:	40020470 	.word	0x40020470
 8008948:	40020488 	.word	0x40020488
 800894c:	400204a0 	.word	0x400204a0
 8008950:	400204b8 	.word	0x400204b8
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f022 020a 	bic.w	r2, r2, #10
 8008962:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 8097 	beq.w	8008aac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008986:	e091      	b.n	8008aac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800898c:	f003 031f 	and.w	r3, r3, #31
 8008990:	2208      	movs	r2, #8
 8008992:	409a      	lsls	r2, r3
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	4013      	ands	r3, r2
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 8088 	beq.w	8008aae <HAL_DMA_IRQHandler+0xe0e>
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f003 0308 	and.w	r3, r3, #8
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 8082 	beq.w	8008aae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a41      	ldr	r2, [pc, #260]	; (8008ab4 <HAL_DMA_IRQHandler+0xe14>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d04a      	beq.n	8008a4a <HAL_DMA_IRQHandler+0xdaa>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a3f      	ldr	r2, [pc, #252]	; (8008ab8 <HAL_DMA_IRQHandler+0xe18>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d045      	beq.n	8008a4a <HAL_DMA_IRQHandler+0xdaa>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a3e      	ldr	r2, [pc, #248]	; (8008abc <HAL_DMA_IRQHandler+0xe1c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d040      	beq.n	8008a4a <HAL_DMA_IRQHandler+0xdaa>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a3c      	ldr	r2, [pc, #240]	; (8008ac0 <HAL_DMA_IRQHandler+0xe20>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d03b      	beq.n	8008a4a <HAL_DMA_IRQHandler+0xdaa>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a3b      	ldr	r2, [pc, #236]	; (8008ac4 <HAL_DMA_IRQHandler+0xe24>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d036      	beq.n	8008a4a <HAL_DMA_IRQHandler+0xdaa>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a39      	ldr	r2, [pc, #228]	; (8008ac8 <HAL_DMA_IRQHandler+0xe28>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d031      	beq.n	8008a4a <HAL_DMA_IRQHandler+0xdaa>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a38      	ldr	r2, [pc, #224]	; (8008acc <HAL_DMA_IRQHandler+0xe2c>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d02c      	beq.n	8008a4a <HAL_DMA_IRQHandler+0xdaa>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a36      	ldr	r2, [pc, #216]	; (8008ad0 <HAL_DMA_IRQHandler+0xe30>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d027      	beq.n	8008a4a <HAL_DMA_IRQHandler+0xdaa>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a35      	ldr	r2, [pc, #212]	; (8008ad4 <HAL_DMA_IRQHandler+0xe34>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d022      	beq.n	8008a4a <HAL_DMA_IRQHandler+0xdaa>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a33      	ldr	r2, [pc, #204]	; (8008ad8 <HAL_DMA_IRQHandler+0xe38>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d01d      	beq.n	8008a4a <HAL_DMA_IRQHandler+0xdaa>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a32      	ldr	r2, [pc, #200]	; (8008adc <HAL_DMA_IRQHandler+0xe3c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d018      	beq.n	8008a4a <HAL_DMA_IRQHandler+0xdaa>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a30      	ldr	r2, [pc, #192]	; (8008ae0 <HAL_DMA_IRQHandler+0xe40>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d013      	beq.n	8008a4a <HAL_DMA_IRQHandler+0xdaa>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a2f      	ldr	r2, [pc, #188]	; (8008ae4 <HAL_DMA_IRQHandler+0xe44>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d00e      	beq.n	8008a4a <HAL_DMA_IRQHandler+0xdaa>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a2d      	ldr	r2, [pc, #180]	; (8008ae8 <HAL_DMA_IRQHandler+0xe48>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d009      	beq.n	8008a4a <HAL_DMA_IRQHandler+0xdaa>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a2c      	ldr	r2, [pc, #176]	; (8008aec <HAL_DMA_IRQHandler+0xe4c>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d004      	beq.n	8008a4a <HAL_DMA_IRQHandler+0xdaa>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a2a      	ldr	r2, [pc, #168]	; (8008af0 <HAL_DMA_IRQHandler+0xe50>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d108      	bne.n	8008a5c <HAL_DMA_IRQHandler+0xdbc>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f022 021c 	bic.w	r2, r2, #28
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	e007      	b.n	8008a6c <HAL_DMA_IRQHandler+0xdcc>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f022 020e 	bic.w	r2, r2, #14
 8008a6a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a70:	f003 031f 	and.w	r3, r3, #31
 8008a74:	2201      	movs	r2, #1
 8008a76:	409a      	lsls	r2, r3
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d009      	beq.n	8008aae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	4798      	blx	r3
 8008aa2:	e004      	b.n	8008aae <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008aa4:	bf00      	nop
 8008aa6:	e002      	b.n	8008aae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008aa8:	bf00      	nop
 8008aaa:	e000      	b.n	8008aae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008aac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008aae:	3728      	adds	r7, #40	; 0x28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	40020010 	.word	0x40020010
 8008ab8:	40020028 	.word	0x40020028
 8008abc:	40020040 	.word	0x40020040
 8008ac0:	40020058 	.word	0x40020058
 8008ac4:	40020070 	.word	0x40020070
 8008ac8:	40020088 	.word	0x40020088
 8008acc:	400200a0 	.word	0x400200a0
 8008ad0:	400200b8 	.word	0x400200b8
 8008ad4:	40020410 	.word	0x40020410
 8008ad8:	40020428 	.word	0x40020428
 8008adc:	40020440 	.word	0x40020440
 8008ae0:	40020458 	.word	0x40020458
 8008ae4:	40020470 	.word	0x40020470
 8008ae8:	40020488 	.word	0x40020488
 8008aec:	400204a0 	.word	0x400204a0
 8008af0:	400204b8 	.word	0x400204b8

08008af4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
 8008b18:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b24:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a7f      	ldr	r2, [pc, #508]	; (8008d28 <DMA_SetConfig+0x21c>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d072      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a7d      	ldr	r2, [pc, #500]	; (8008d2c <DMA_SetConfig+0x220>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d06d      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a7c      	ldr	r2, [pc, #496]	; (8008d30 <DMA_SetConfig+0x224>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d068      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a7a      	ldr	r2, [pc, #488]	; (8008d34 <DMA_SetConfig+0x228>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d063      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a79      	ldr	r2, [pc, #484]	; (8008d38 <DMA_SetConfig+0x22c>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d05e      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a77      	ldr	r2, [pc, #476]	; (8008d3c <DMA_SetConfig+0x230>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d059      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a76      	ldr	r2, [pc, #472]	; (8008d40 <DMA_SetConfig+0x234>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d054      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a74      	ldr	r2, [pc, #464]	; (8008d44 <DMA_SetConfig+0x238>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d04f      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a73      	ldr	r2, [pc, #460]	; (8008d48 <DMA_SetConfig+0x23c>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d04a      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a71      	ldr	r2, [pc, #452]	; (8008d4c <DMA_SetConfig+0x240>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d045      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a70      	ldr	r2, [pc, #448]	; (8008d50 <DMA_SetConfig+0x244>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d040      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a6e      	ldr	r2, [pc, #440]	; (8008d54 <DMA_SetConfig+0x248>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d03b      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a6d      	ldr	r2, [pc, #436]	; (8008d58 <DMA_SetConfig+0x24c>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d036      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a6b      	ldr	r2, [pc, #428]	; (8008d5c <DMA_SetConfig+0x250>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d031      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a6a      	ldr	r2, [pc, #424]	; (8008d60 <DMA_SetConfig+0x254>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d02c      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a68      	ldr	r2, [pc, #416]	; (8008d64 <DMA_SetConfig+0x258>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d027      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a67      	ldr	r2, [pc, #412]	; (8008d68 <DMA_SetConfig+0x25c>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d022      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a65      	ldr	r2, [pc, #404]	; (8008d6c <DMA_SetConfig+0x260>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d01d      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a64      	ldr	r2, [pc, #400]	; (8008d70 <DMA_SetConfig+0x264>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d018      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a62      	ldr	r2, [pc, #392]	; (8008d74 <DMA_SetConfig+0x268>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d013      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a61      	ldr	r2, [pc, #388]	; (8008d78 <DMA_SetConfig+0x26c>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d00e      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a5f      	ldr	r2, [pc, #380]	; (8008d7c <DMA_SetConfig+0x270>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d009      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a5e      	ldr	r2, [pc, #376]	; (8008d80 <DMA_SetConfig+0x274>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d004      	beq.n	8008c16 <DMA_SetConfig+0x10a>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a5c      	ldr	r2, [pc, #368]	; (8008d84 <DMA_SetConfig+0x278>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d101      	bne.n	8008c1a <DMA_SetConfig+0x10e>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e000      	b.n	8008c1c <DMA_SetConfig+0x110>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00d      	beq.n	8008c3c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008c28:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d004      	beq.n	8008c3c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008c3a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a39      	ldr	r2, [pc, #228]	; (8008d28 <DMA_SetConfig+0x21c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d04a      	beq.n	8008cdc <DMA_SetConfig+0x1d0>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a38      	ldr	r2, [pc, #224]	; (8008d2c <DMA_SetConfig+0x220>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d045      	beq.n	8008cdc <DMA_SetConfig+0x1d0>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a36      	ldr	r2, [pc, #216]	; (8008d30 <DMA_SetConfig+0x224>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d040      	beq.n	8008cdc <DMA_SetConfig+0x1d0>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a35      	ldr	r2, [pc, #212]	; (8008d34 <DMA_SetConfig+0x228>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d03b      	beq.n	8008cdc <DMA_SetConfig+0x1d0>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a33      	ldr	r2, [pc, #204]	; (8008d38 <DMA_SetConfig+0x22c>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d036      	beq.n	8008cdc <DMA_SetConfig+0x1d0>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a32      	ldr	r2, [pc, #200]	; (8008d3c <DMA_SetConfig+0x230>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d031      	beq.n	8008cdc <DMA_SetConfig+0x1d0>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a30      	ldr	r2, [pc, #192]	; (8008d40 <DMA_SetConfig+0x234>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d02c      	beq.n	8008cdc <DMA_SetConfig+0x1d0>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a2f      	ldr	r2, [pc, #188]	; (8008d44 <DMA_SetConfig+0x238>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d027      	beq.n	8008cdc <DMA_SetConfig+0x1d0>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a2d      	ldr	r2, [pc, #180]	; (8008d48 <DMA_SetConfig+0x23c>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d022      	beq.n	8008cdc <DMA_SetConfig+0x1d0>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a2c      	ldr	r2, [pc, #176]	; (8008d4c <DMA_SetConfig+0x240>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d01d      	beq.n	8008cdc <DMA_SetConfig+0x1d0>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a2a      	ldr	r2, [pc, #168]	; (8008d50 <DMA_SetConfig+0x244>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d018      	beq.n	8008cdc <DMA_SetConfig+0x1d0>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a29      	ldr	r2, [pc, #164]	; (8008d54 <DMA_SetConfig+0x248>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d013      	beq.n	8008cdc <DMA_SetConfig+0x1d0>
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a27      	ldr	r2, [pc, #156]	; (8008d58 <DMA_SetConfig+0x24c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00e      	beq.n	8008cdc <DMA_SetConfig+0x1d0>
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a26      	ldr	r2, [pc, #152]	; (8008d5c <DMA_SetConfig+0x250>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d009      	beq.n	8008cdc <DMA_SetConfig+0x1d0>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a24      	ldr	r2, [pc, #144]	; (8008d60 <DMA_SetConfig+0x254>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d004      	beq.n	8008cdc <DMA_SetConfig+0x1d0>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a23      	ldr	r2, [pc, #140]	; (8008d64 <DMA_SetConfig+0x258>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d101      	bne.n	8008ce0 <DMA_SetConfig+0x1d4>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e000      	b.n	8008ce2 <DMA_SetConfig+0x1d6>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d059      	beq.n	8008d9a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cea:	f003 031f 	and.w	r3, r3, #31
 8008cee:	223f      	movs	r2, #63	; 0x3f
 8008cf0:	409a      	lsls	r2, r3
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d04:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	2b40      	cmp	r3, #64	; 0x40
 8008d14:	d138      	bne.n	8008d88 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008d26:	e086      	b.n	8008e36 <DMA_SetConfig+0x32a>
 8008d28:	40020010 	.word	0x40020010
 8008d2c:	40020028 	.word	0x40020028
 8008d30:	40020040 	.word	0x40020040
 8008d34:	40020058 	.word	0x40020058
 8008d38:	40020070 	.word	0x40020070
 8008d3c:	40020088 	.word	0x40020088
 8008d40:	400200a0 	.word	0x400200a0
 8008d44:	400200b8 	.word	0x400200b8
 8008d48:	40020410 	.word	0x40020410
 8008d4c:	40020428 	.word	0x40020428
 8008d50:	40020440 	.word	0x40020440
 8008d54:	40020458 	.word	0x40020458
 8008d58:	40020470 	.word	0x40020470
 8008d5c:	40020488 	.word	0x40020488
 8008d60:	400204a0 	.word	0x400204a0
 8008d64:	400204b8 	.word	0x400204b8
 8008d68:	58025408 	.word	0x58025408
 8008d6c:	5802541c 	.word	0x5802541c
 8008d70:	58025430 	.word	0x58025430
 8008d74:	58025444 	.word	0x58025444
 8008d78:	58025458 	.word	0x58025458
 8008d7c:	5802546c 	.word	0x5802546c
 8008d80:	58025480 	.word	0x58025480
 8008d84:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	60da      	str	r2, [r3, #12]
}
 8008d98:	e04d      	b.n	8008e36 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a29      	ldr	r2, [pc, #164]	; (8008e44 <DMA_SetConfig+0x338>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d022      	beq.n	8008dea <DMA_SetConfig+0x2de>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a27      	ldr	r2, [pc, #156]	; (8008e48 <DMA_SetConfig+0x33c>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d01d      	beq.n	8008dea <DMA_SetConfig+0x2de>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a26      	ldr	r2, [pc, #152]	; (8008e4c <DMA_SetConfig+0x340>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d018      	beq.n	8008dea <DMA_SetConfig+0x2de>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a24      	ldr	r2, [pc, #144]	; (8008e50 <DMA_SetConfig+0x344>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d013      	beq.n	8008dea <DMA_SetConfig+0x2de>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a23      	ldr	r2, [pc, #140]	; (8008e54 <DMA_SetConfig+0x348>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d00e      	beq.n	8008dea <DMA_SetConfig+0x2de>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a21      	ldr	r2, [pc, #132]	; (8008e58 <DMA_SetConfig+0x34c>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d009      	beq.n	8008dea <DMA_SetConfig+0x2de>
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a20      	ldr	r2, [pc, #128]	; (8008e5c <DMA_SetConfig+0x350>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d004      	beq.n	8008dea <DMA_SetConfig+0x2de>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a1e      	ldr	r2, [pc, #120]	; (8008e60 <DMA_SetConfig+0x354>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d101      	bne.n	8008dee <DMA_SetConfig+0x2e2>
 8008dea:	2301      	movs	r3, #1
 8008dec:	e000      	b.n	8008df0 <DMA_SetConfig+0x2e4>
 8008dee:	2300      	movs	r3, #0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d020      	beq.n	8008e36 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008df8:	f003 031f 	and.w	r3, r3, #31
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	409a      	lsls	r2, r3
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	2b40      	cmp	r3, #64	; 0x40
 8008e12:	d108      	bne.n	8008e26 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	60da      	str	r2, [r3, #12]
}
 8008e24:	e007      	b.n	8008e36 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	60da      	str	r2, [r3, #12]
}
 8008e36:	bf00      	nop
 8008e38:	371c      	adds	r7, #28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	58025408 	.word	0x58025408
 8008e48:	5802541c 	.word	0x5802541c
 8008e4c:	58025430 	.word	0x58025430
 8008e50:	58025444 	.word	0x58025444
 8008e54:	58025458 	.word	0x58025458
 8008e58:	5802546c 	.word	0x5802546c
 8008e5c:	58025480 	.word	0x58025480
 8008e60:	58025494 	.word	0x58025494

08008e64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a42      	ldr	r2, [pc, #264]	; (8008f7c <DMA_CalcBaseAndBitshift+0x118>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d04a      	beq.n	8008f0c <DMA_CalcBaseAndBitshift+0xa8>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a41      	ldr	r2, [pc, #260]	; (8008f80 <DMA_CalcBaseAndBitshift+0x11c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d045      	beq.n	8008f0c <DMA_CalcBaseAndBitshift+0xa8>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a3f      	ldr	r2, [pc, #252]	; (8008f84 <DMA_CalcBaseAndBitshift+0x120>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d040      	beq.n	8008f0c <DMA_CalcBaseAndBitshift+0xa8>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a3e      	ldr	r2, [pc, #248]	; (8008f88 <DMA_CalcBaseAndBitshift+0x124>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d03b      	beq.n	8008f0c <DMA_CalcBaseAndBitshift+0xa8>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a3c      	ldr	r2, [pc, #240]	; (8008f8c <DMA_CalcBaseAndBitshift+0x128>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d036      	beq.n	8008f0c <DMA_CalcBaseAndBitshift+0xa8>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a3b      	ldr	r2, [pc, #236]	; (8008f90 <DMA_CalcBaseAndBitshift+0x12c>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d031      	beq.n	8008f0c <DMA_CalcBaseAndBitshift+0xa8>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a39      	ldr	r2, [pc, #228]	; (8008f94 <DMA_CalcBaseAndBitshift+0x130>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d02c      	beq.n	8008f0c <DMA_CalcBaseAndBitshift+0xa8>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a38      	ldr	r2, [pc, #224]	; (8008f98 <DMA_CalcBaseAndBitshift+0x134>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d027      	beq.n	8008f0c <DMA_CalcBaseAndBitshift+0xa8>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a36      	ldr	r2, [pc, #216]	; (8008f9c <DMA_CalcBaseAndBitshift+0x138>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d022      	beq.n	8008f0c <DMA_CalcBaseAndBitshift+0xa8>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a35      	ldr	r2, [pc, #212]	; (8008fa0 <DMA_CalcBaseAndBitshift+0x13c>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d01d      	beq.n	8008f0c <DMA_CalcBaseAndBitshift+0xa8>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a33      	ldr	r2, [pc, #204]	; (8008fa4 <DMA_CalcBaseAndBitshift+0x140>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d018      	beq.n	8008f0c <DMA_CalcBaseAndBitshift+0xa8>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a32      	ldr	r2, [pc, #200]	; (8008fa8 <DMA_CalcBaseAndBitshift+0x144>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d013      	beq.n	8008f0c <DMA_CalcBaseAndBitshift+0xa8>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a30      	ldr	r2, [pc, #192]	; (8008fac <DMA_CalcBaseAndBitshift+0x148>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d00e      	beq.n	8008f0c <DMA_CalcBaseAndBitshift+0xa8>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a2f      	ldr	r2, [pc, #188]	; (8008fb0 <DMA_CalcBaseAndBitshift+0x14c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d009      	beq.n	8008f0c <DMA_CalcBaseAndBitshift+0xa8>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a2d      	ldr	r2, [pc, #180]	; (8008fb4 <DMA_CalcBaseAndBitshift+0x150>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d004      	beq.n	8008f0c <DMA_CalcBaseAndBitshift+0xa8>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a2c      	ldr	r2, [pc, #176]	; (8008fb8 <DMA_CalcBaseAndBitshift+0x154>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d101      	bne.n	8008f10 <DMA_CalcBaseAndBitshift+0xac>
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e000      	b.n	8008f12 <DMA_CalcBaseAndBitshift+0xae>
 8008f10:	2300      	movs	r3, #0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d024      	beq.n	8008f60 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	3b10      	subs	r3, #16
 8008f1e:	4a27      	ldr	r2, [pc, #156]	; (8008fbc <DMA_CalcBaseAndBitshift+0x158>)
 8008f20:	fba2 2303 	umull	r2, r3, r2, r3
 8008f24:	091b      	lsrs	r3, r3, #4
 8008f26:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f003 0307 	and.w	r3, r3, #7
 8008f2e:	4a24      	ldr	r2, [pc, #144]	; (8008fc0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008f30:	5cd3      	ldrb	r3, [r2, r3]
 8008f32:	461a      	mov	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d908      	bls.n	8008f50 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	4b1f      	ldr	r3, [pc, #124]	; (8008fc4 <DMA_CalcBaseAndBitshift+0x160>)
 8008f46:	4013      	ands	r3, r2
 8008f48:	1d1a      	adds	r2, r3, #4
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	659a      	str	r2, [r3, #88]	; 0x58
 8008f4e:	e00d      	b.n	8008f6c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	461a      	mov	r2, r3
 8008f56:	4b1b      	ldr	r3, [pc, #108]	; (8008fc4 <DMA_CalcBaseAndBitshift+0x160>)
 8008f58:	4013      	ands	r3, r2
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8008f5e:	e005      	b.n	8008f6c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	40020010 	.word	0x40020010
 8008f80:	40020028 	.word	0x40020028
 8008f84:	40020040 	.word	0x40020040
 8008f88:	40020058 	.word	0x40020058
 8008f8c:	40020070 	.word	0x40020070
 8008f90:	40020088 	.word	0x40020088
 8008f94:	400200a0 	.word	0x400200a0
 8008f98:	400200b8 	.word	0x400200b8
 8008f9c:	40020410 	.word	0x40020410
 8008fa0:	40020428 	.word	0x40020428
 8008fa4:	40020440 	.word	0x40020440
 8008fa8:	40020458 	.word	0x40020458
 8008fac:	40020470 	.word	0x40020470
 8008fb0:	40020488 	.word	0x40020488
 8008fb4:	400204a0 	.word	0x400204a0
 8008fb8:	400204b8 	.word	0x400204b8
 8008fbc:	aaaaaaab 	.word	0xaaaaaaab
 8008fc0:	08017b78 	.word	0x08017b78
 8008fc4:	fffffc00 	.word	0xfffffc00

08008fc8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d120      	bne.n	800901e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe0:	2b03      	cmp	r3, #3
 8008fe2:	d858      	bhi.n	8009096 <DMA_CheckFifoParam+0xce>
 8008fe4:	a201      	add	r2, pc, #4	; (adr r2, 8008fec <DMA_CheckFifoParam+0x24>)
 8008fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fea:	bf00      	nop
 8008fec:	08008ffd 	.word	0x08008ffd
 8008ff0:	0800900f 	.word	0x0800900f
 8008ff4:	08008ffd 	.word	0x08008ffd
 8008ff8:	08009097 	.word	0x08009097
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d048      	beq.n	800909a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800900c:	e045      	b.n	800909a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009012:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009016:	d142      	bne.n	800909e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800901c:	e03f      	b.n	800909e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009026:	d123      	bne.n	8009070 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902c:	2b03      	cmp	r3, #3
 800902e:	d838      	bhi.n	80090a2 <DMA_CheckFifoParam+0xda>
 8009030:	a201      	add	r2, pc, #4	; (adr r2, 8009038 <DMA_CheckFifoParam+0x70>)
 8009032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009036:	bf00      	nop
 8009038:	08009049 	.word	0x08009049
 800903c:	0800904f 	.word	0x0800904f
 8009040:	08009049 	.word	0x08009049
 8009044:	08009061 	.word	0x08009061
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	73fb      	strb	r3, [r7, #15]
        break;
 800904c:	e030      	b.n	80090b0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009052:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d025      	beq.n	80090a6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800905e:	e022      	b.n	80090a6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009064:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009068:	d11f      	bne.n	80090aa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800906e:	e01c      	b.n	80090aa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009074:	2b02      	cmp	r3, #2
 8009076:	d902      	bls.n	800907e <DMA_CheckFifoParam+0xb6>
 8009078:	2b03      	cmp	r3, #3
 800907a:	d003      	beq.n	8009084 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800907c:	e018      	b.n	80090b0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	73fb      	strb	r3, [r7, #15]
        break;
 8009082:	e015      	b.n	80090b0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00e      	beq.n	80090ae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	73fb      	strb	r3, [r7, #15]
    break;
 8009094:	e00b      	b.n	80090ae <DMA_CheckFifoParam+0xe6>
        break;
 8009096:	bf00      	nop
 8009098:	e00a      	b.n	80090b0 <DMA_CheckFifoParam+0xe8>
        break;
 800909a:	bf00      	nop
 800909c:	e008      	b.n	80090b0 <DMA_CheckFifoParam+0xe8>
        break;
 800909e:	bf00      	nop
 80090a0:	e006      	b.n	80090b0 <DMA_CheckFifoParam+0xe8>
        break;
 80090a2:	bf00      	nop
 80090a4:	e004      	b.n	80090b0 <DMA_CheckFifoParam+0xe8>
        break;
 80090a6:	bf00      	nop
 80090a8:	e002      	b.n	80090b0 <DMA_CheckFifoParam+0xe8>
        break;
 80090aa:	bf00      	nop
 80090ac:	e000      	b.n	80090b0 <DMA_CheckFifoParam+0xe8>
    break;
 80090ae:	bf00      	nop
    }
  }

  return status;
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop

080090c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a38      	ldr	r2, [pc, #224]	; (80091b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d022      	beq.n	800911e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a36      	ldr	r2, [pc, #216]	; (80091b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d01d      	beq.n	800911e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a35      	ldr	r2, [pc, #212]	; (80091bc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d018      	beq.n	800911e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a33      	ldr	r2, [pc, #204]	; (80091c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d013      	beq.n	800911e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a32      	ldr	r2, [pc, #200]	; (80091c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d00e      	beq.n	800911e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a30      	ldr	r2, [pc, #192]	; (80091c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d009      	beq.n	800911e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a2f      	ldr	r2, [pc, #188]	; (80091cc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d004      	beq.n	800911e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a2d      	ldr	r2, [pc, #180]	; (80091d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d101      	bne.n	8009122 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800911e:	2301      	movs	r3, #1
 8009120:	e000      	b.n	8009124 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009122:	2300      	movs	r3, #0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d01a      	beq.n	800915e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	b2db      	uxtb	r3, r3
 800912e:	3b08      	subs	r3, #8
 8009130:	4a28      	ldr	r2, [pc, #160]	; (80091d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009132:	fba2 2303 	umull	r2, r3, r2, r3
 8009136:	091b      	lsrs	r3, r3, #4
 8009138:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	4b26      	ldr	r3, [pc, #152]	; (80091d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	461a      	mov	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a24      	ldr	r2, [pc, #144]	; (80091dc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800914c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f003 031f 	and.w	r3, r3, #31
 8009154:	2201      	movs	r2, #1
 8009156:	409a      	lsls	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800915c:	e024      	b.n	80091a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	b2db      	uxtb	r3, r3
 8009164:	3b10      	subs	r3, #16
 8009166:	4a1e      	ldr	r2, [pc, #120]	; (80091e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009168:	fba2 2303 	umull	r2, r3, r2, r3
 800916c:	091b      	lsrs	r3, r3, #4
 800916e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	4a1c      	ldr	r2, [pc, #112]	; (80091e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d806      	bhi.n	8009186 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	4a1b      	ldr	r2, [pc, #108]	; (80091e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d902      	bls.n	8009186 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3308      	adds	r3, #8
 8009184:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	4b18      	ldr	r3, [pc, #96]	; (80091ec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	461a      	mov	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a16      	ldr	r2, [pc, #88]	; (80091f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009198:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f003 031f 	and.w	r3, r3, #31
 80091a0:	2201      	movs	r2, #1
 80091a2:	409a      	lsls	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80091a8:	bf00      	nop
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	58025408 	.word	0x58025408
 80091b8:	5802541c 	.word	0x5802541c
 80091bc:	58025430 	.word	0x58025430
 80091c0:	58025444 	.word	0x58025444
 80091c4:	58025458 	.word	0x58025458
 80091c8:	5802546c 	.word	0x5802546c
 80091cc:	58025480 	.word	0x58025480
 80091d0:	58025494 	.word	0x58025494
 80091d4:	cccccccd 	.word	0xcccccccd
 80091d8:	16009600 	.word	0x16009600
 80091dc:	58025880 	.word	0x58025880
 80091e0:	aaaaaaab 	.word	0xaaaaaaab
 80091e4:	400204b8 	.word	0x400204b8
 80091e8:	4002040f 	.word	0x4002040f
 80091ec:	10008200 	.word	0x10008200
 80091f0:	40020880 	.word	0x40020880

080091f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	b2db      	uxtb	r3, r3
 8009202:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d04a      	beq.n	80092a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b08      	cmp	r3, #8
 800920e:	d847      	bhi.n	80092a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a25      	ldr	r2, [pc, #148]	; (80092ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d022      	beq.n	8009260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a24      	ldr	r2, [pc, #144]	; (80092b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d01d      	beq.n	8009260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a22      	ldr	r2, [pc, #136]	; (80092b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d018      	beq.n	8009260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a21      	ldr	r2, [pc, #132]	; (80092b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d013      	beq.n	8009260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a1f      	ldr	r2, [pc, #124]	; (80092bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d00e      	beq.n	8009260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a1e      	ldr	r2, [pc, #120]	; (80092c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d009      	beq.n	8009260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a1c      	ldr	r2, [pc, #112]	; (80092c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d004      	beq.n	8009260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a1b      	ldr	r2, [pc, #108]	; (80092c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d101      	bne.n	8009264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009260:	2301      	movs	r3, #1
 8009262:	e000      	b.n	8009266 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009264:	2300      	movs	r3, #0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800926a:	68fa      	ldr	r2, [r7, #12]
 800926c:	4b17      	ldr	r3, [pc, #92]	; (80092cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800926e:	4413      	add	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	461a      	mov	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a15      	ldr	r2, [pc, #84]	; (80092d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800927c:	671a      	str	r2, [r3, #112]	; 0x70
 800927e:	e009      	b.n	8009294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	4b14      	ldr	r3, [pc, #80]	; (80092d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009284:	4413      	add	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	461a      	mov	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4a11      	ldr	r2, [pc, #68]	; (80092d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009292:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	3b01      	subs	r3, #1
 8009298:	2201      	movs	r2, #1
 800929a:	409a      	lsls	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80092a0:	bf00      	nop
 80092a2:	3714      	adds	r7, #20
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	58025408 	.word	0x58025408
 80092b0:	5802541c 	.word	0x5802541c
 80092b4:	58025430 	.word	0x58025430
 80092b8:	58025444 	.word	0x58025444
 80092bc:	58025458 	.word	0x58025458
 80092c0:	5802546c 	.word	0x5802546c
 80092c4:	58025480 	.word	0x58025480
 80092c8:	58025494 	.word	0x58025494
 80092cc:	1600963f 	.word	0x1600963f
 80092d0:	58025940 	.word	0x58025940
 80092d4:	1000823f 	.word	0x1000823f
 80092d8:	40020940 	.word	0x40020940

080092dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80092dc:	b480      	push	{r7}
 80092de:	b089      	sub	sp, #36	; 0x24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80092ea:	4b89      	ldr	r3, [pc, #548]	; (8009510 <HAL_GPIO_Init+0x234>)
 80092ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80092ee:	e194      	b.n	800961a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	2101      	movs	r1, #1
 80092f6:	69fb      	ldr	r3, [r7, #28]
 80092f8:	fa01 f303 	lsl.w	r3, r1, r3
 80092fc:	4013      	ands	r3, r2
 80092fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 8186 	beq.w	8009614 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	f003 0303 	and.w	r3, r3, #3
 8009310:	2b01      	cmp	r3, #1
 8009312:	d005      	beq.n	8009320 <HAL_GPIO_Init+0x44>
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f003 0303 	and.w	r3, r3, #3
 800931c:	2b02      	cmp	r3, #2
 800931e:	d130      	bne.n	8009382 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009326:	69fb      	ldr	r3, [r7, #28]
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	2203      	movs	r2, #3
 800932c:	fa02 f303 	lsl.w	r3, r2, r3
 8009330:	43db      	mvns	r3, r3
 8009332:	69ba      	ldr	r2, [r7, #24]
 8009334:	4013      	ands	r3, r2
 8009336:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	68da      	ldr	r2, [r3, #12]
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	fa02 f303 	lsl.w	r3, r2, r3
 8009344:	69ba      	ldr	r2, [r7, #24]
 8009346:	4313      	orrs	r3, r2
 8009348:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	69ba      	ldr	r2, [r7, #24]
 800934e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009356:	2201      	movs	r2, #1
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	fa02 f303 	lsl.w	r3, r2, r3
 800935e:	43db      	mvns	r3, r3
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	4013      	ands	r3, r2
 8009364:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	091b      	lsrs	r3, r3, #4
 800936c:	f003 0201 	and.w	r2, r3, #1
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	fa02 f303 	lsl.w	r3, r2, r3
 8009376:	69ba      	ldr	r2, [r7, #24]
 8009378:	4313      	orrs	r3, r2
 800937a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	69ba      	ldr	r2, [r7, #24]
 8009380:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f003 0303 	and.w	r3, r3, #3
 800938a:	2b03      	cmp	r3, #3
 800938c:	d017      	beq.n	80093be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	005b      	lsls	r3, r3, #1
 8009398:	2203      	movs	r2, #3
 800939a:	fa02 f303 	lsl.w	r3, r2, r3
 800939e:	43db      	mvns	r3, r3
 80093a0:	69ba      	ldr	r2, [r7, #24]
 80093a2:	4013      	ands	r3, r2
 80093a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	689a      	ldr	r2, [r3, #8]
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	005b      	lsls	r3, r3, #1
 80093ae:	fa02 f303 	lsl.w	r3, r2, r3
 80093b2:	69ba      	ldr	r2, [r7, #24]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	f003 0303 	and.w	r3, r3, #3
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d123      	bne.n	8009412 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	08da      	lsrs	r2, r3, #3
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3208      	adds	r2, #8
 80093d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	f003 0307 	and.w	r3, r3, #7
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	220f      	movs	r2, #15
 80093e2:	fa02 f303 	lsl.w	r3, r2, r3
 80093e6:	43db      	mvns	r3, r3
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	4013      	ands	r3, r2
 80093ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	691a      	ldr	r2, [r3, #16]
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	f003 0307 	and.w	r3, r3, #7
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	fa02 f303 	lsl.w	r3, r2, r3
 80093fe:	69ba      	ldr	r2, [r7, #24]
 8009400:	4313      	orrs	r3, r2
 8009402:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	08da      	lsrs	r2, r3, #3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3208      	adds	r2, #8
 800940c:	69b9      	ldr	r1, [r7, #24]
 800940e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	005b      	lsls	r3, r3, #1
 800941c:	2203      	movs	r2, #3
 800941e:	fa02 f303 	lsl.w	r3, r2, r3
 8009422:	43db      	mvns	r3, r3
 8009424:	69ba      	ldr	r2, [r7, #24]
 8009426:	4013      	ands	r3, r2
 8009428:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f003 0203 	and.w	r2, r3, #3
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	fa02 f303 	lsl.w	r3, r2, r3
 800943a:	69ba      	ldr	r2, [r7, #24]
 800943c:	4313      	orrs	r3, r2
 800943e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	69ba      	ldr	r2, [r7, #24]
 8009444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800944e:	2b00      	cmp	r3, #0
 8009450:	f000 80e0 	beq.w	8009614 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009454:	4b2f      	ldr	r3, [pc, #188]	; (8009514 <HAL_GPIO_Init+0x238>)
 8009456:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800945a:	4a2e      	ldr	r2, [pc, #184]	; (8009514 <HAL_GPIO_Init+0x238>)
 800945c:	f043 0302 	orr.w	r3, r3, #2
 8009460:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009464:	4b2b      	ldr	r3, [pc, #172]	; (8009514 <HAL_GPIO_Init+0x238>)
 8009466:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800946a:	f003 0302 	and.w	r3, r3, #2
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009472:	4a29      	ldr	r2, [pc, #164]	; (8009518 <HAL_GPIO_Init+0x23c>)
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	089b      	lsrs	r3, r3, #2
 8009478:	3302      	adds	r3, #2
 800947a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800947e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	f003 0303 	and.w	r3, r3, #3
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	220f      	movs	r2, #15
 800948a:	fa02 f303 	lsl.w	r3, r2, r3
 800948e:	43db      	mvns	r3, r3
 8009490:	69ba      	ldr	r2, [r7, #24]
 8009492:	4013      	ands	r3, r2
 8009494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a20      	ldr	r2, [pc, #128]	; (800951c <HAL_GPIO_Init+0x240>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d052      	beq.n	8009544 <HAL_GPIO_Init+0x268>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a1f      	ldr	r2, [pc, #124]	; (8009520 <HAL_GPIO_Init+0x244>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d031      	beq.n	800950a <HAL_GPIO_Init+0x22e>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a1e      	ldr	r2, [pc, #120]	; (8009524 <HAL_GPIO_Init+0x248>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d02b      	beq.n	8009506 <HAL_GPIO_Init+0x22a>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a1d      	ldr	r2, [pc, #116]	; (8009528 <HAL_GPIO_Init+0x24c>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d025      	beq.n	8009502 <HAL_GPIO_Init+0x226>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a1c      	ldr	r2, [pc, #112]	; (800952c <HAL_GPIO_Init+0x250>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d01f      	beq.n	80094fe <HAL_GPIO_Init+0x222>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a1b      	ldr	r2, [pc, #108]	; (8009530 <HAL_GPIO_Init+0x254>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d019      	beq.n	80094fa <HAL_GPIO_Init+0x21e>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a1a      	ldr	r2, [pc, #104]	; (8009534 <HAL_GPIO_Init+0x258>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d013      	beq.n	80094f6 <HAL_GPIO_Init+0x21a>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a19      	ldr	r2, [pc, #100]	; (8009538 <HAL_GPIO_Init+0x25c>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d00d      	beq.n	80094f2 <HAL_GPIO_Init+0x216>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a18      	ldr	r2, [pc, #96]	; (800953c <HAL_GPIO_Init+0x260>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d007      	beq.n	80094ee <HAL_GPIO_Init+0x212>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a17      	ldr	r2, [pc, #92]	; (8009540 <HAL_GPIO_Init+0x264>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d101      	bne.n	80094ea <HAL_GPIO_Init+0x20e>
 80094e6:	2309      	movs	r3, #9
 80094e8:	e02d      	b.n	8009546 <HAL_GPIO_Init+0x26a>
 80094ea:	230a      	movs	r3, #10
 80094ec:	e02b      	b.n	8009546 <HAL_GPIO_Init+0x26a>
 80094ee:	2308      	movs	r3, #8
 80094f0:	e029      	b.n	8009546 <HAL_GPIO_Init+0x26a>
 80094f2:	2307      	movs	r3, #7
 80094f4:	e027      	b.n	8009546 <HAL_GPIO_Init+0x26a>
 80094f6:	2306      	movs	r3, #6
 80094f8:	e025      	b.n	8009546 <HAL_GPIO_Init+0x26a>
 80094fa:	2305      	movs	r3, #5
 80094fc:	e023      	b.n	8009546 <HAL_GPIO_Init+0x26a>
 80094fe:	2304      	movs	r3, #4
 8009500:	e021      	b.n	8009546 <HAL_GPIO_Init+0x26a>
 8009502:	2303      	movs	r3, #3
 8009504:	e01f      	b.n	8009546 <HAL_GPIO_Init+0x26a>
 8009506:	2302      	movs	r3, #2
 8009508:	e01d      	b.n	8009546 <HAL_GPIO_Init+0x26a>
 800950a:	2301      	movs	r3, #1
 800950c:	e01b      	b.n	8009546 <HAL_GPIO_Init+0x26a>
 800950e:	bf00      	nop
 8009510:	58000080 	.word	0x58000080
 8009514:	58024400 	.word	0x58024400
 8009518:	58000400 	.word	0x58000400
 800951c:	58020000 	.word	0x58020000
 8009520:	58020400 	.word	0x58020400
 8009524:	58020800 	.word	0x58020800
 8009528:	58020c00 	.word	0x58020c00
 800952c:	58021000 	.word	0x58021000
 8009530:	58021400 	.word	0x58021400
 8009534:	58021800 	.word	0x58021800
 8009538:	58021c00 	.word	0x58021c00
 800953c:	58022000 	.word	0x58022000
 8009540:	58022400 	.word	0x58022400
 8009544:	2300      	movs	r3, #0
 8009546:	69fa      	ldr	r2, [r7, #28]
 8009548:	f002 0203 	and.w	r2, r2, #3
 800954c:	0092      	lsls	r2, r2, #2
 800954e:	4093      	lsls	r3, r2
 8009550:	69ba      	ldr	r2, [r7, #24]
 8009552:	4313      	orrs	r3, r2
 8009554:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009556:	4938      	ldr	r1, [pc, #224]	; (8009638 <HAL_GPIO_Init+0x35c>)
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	089b      	lsrs	r3, r3, #2
 800955c:	3302      	adds	r3, #2
 800955e:	69ba      	ldr	r2, [r7, #24]
 8009560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	43db      	mvns	r3, r3
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	4013      	ands	r3, r2
 8009574:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8009582:	69ba      	ldr	r2, [r7, #24]
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	4313      	orrs	r3, r2
 8009588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800958a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	43db      	mvns	r3, r3
 800959e:	69ba      	ldr	r2, [r7, #24]
 80095a0:	4013      	ands	r3, r2
 80095a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d003      	beq.n	80095b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80095b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	43db      	mvns	r3, r3
 80095ca:	69ba      	ldr	r2, [r7, #24]
 80095cc:	4013      	ands	r3, r2
 80095ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d003      	beq.n	80095e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80095dc:	69ba      	ldr	r2, [r7, #24]
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	69ba      	ldr	r2, [r7, #24]
 80095e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	43db      	mvns	r3, r3
 80095f4:	69ba      	ldr	r2, [r7, #24]
 80095f6:	4013      	ands	r3, r2
 80095f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d003      	beq.n	800960e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009606:	69ba      	ldr	r2, [r7, #24]
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	4313      	orrs	r3, r2
 800960c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	69ba      	ldr	r2, [r7, #24]
 8009612:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	3301      	adds	r3, #1
 8009618:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	fa22 f303 	lsr.w	r3, r2, r3
 8009624:	2b00      	cmp	r3, #0
 8009626:	f47f ae63 	bne.w	80092f0 <HAL_GPIO_Init+0x14>
  }
}
 800962a:	bf00      	nop
 800962c:	bf00      	nop
 800962e:	3724      	adds	r7, #36	; 0x24
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	58000400 	.word	0x58000400

0800963c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	460b      	mov	r3, r1
 8009646:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	691a      	ldr	r2, [r3, #16]
 800964c:	887b      	ldrh	r3, [r7, #2]
 800964e:	4013      	ands	r3, r2
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009654:	2301      	movs	r3, #1
 8009656:	73fb      	strb	r3, [r7, #15]
 8009658:	e001      	b.n	800965e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800965a:	2300      	movs	r3, #0
 800965c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800965e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	460b      	mov	r3, r1
 8009676:	807b      	strh	r3, [r7, #2]
 8009678:	4613      	mov	r3, r2
 800967a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800967c:	787b      	ldrb	r3, [r7, #1]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009682:	887a      	ldrh	r2, [r7, #2]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009688:	e003      	b.n	8009692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800968a:	887b      	ldrh	r3, [r7, #2]
 800968c:	041a      	lsls	r2, r3, #16
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	619a      	str	r2, [r3, #24]
}
 8009692:	bf00      	nop
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
	...

080096a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	e08b      	b.n	80097ca <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d106      	bne.n	80096cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7f7 fee0 	bl	800148c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2224      	movs	r2, #36	; 0x24
 80096d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f022 0201 	bic.w	r2, r2, #1
 80096e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80096f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	689a      	ldr	r2, [r3, #8]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009700:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d107      	bne.n	800971a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	689a      	ldr	r2, [r3, #8]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009716:	609a      	str	r2, [r3, #8]
 8009718:	e006      	b.n	8009728 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	689a      	ldr	r2, [r3, #8]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009726:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	2b02      	cmp	r3, #2
 800972e:	d108      	bne.n	8009742 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800973e:	605a      	str	r2, [r3, #4]
 8009740:	e007      	b.n	8009752 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009750:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	6859      	ldr	r1, [r3, #4]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	4b1d      	ldr	r3, [pc, #116]	; (80097d4 <HAL_I2C_Init+0x134>)
 800975e:	430b      	orrs	r3, r1
 8009760:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68da      	ldr	r2, [r3, #12]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009770:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	691a      	ldr	r2, [r3, #16]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	430a      	orrs	r2, r1
 800978a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	69d9      	ldr	r1, [r3, #28]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a1a      	ldr	r2, [r3, #32]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	430a      	orrs	r2, r1
 800979a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f042 0201 	orr.w	r2, r2, #1
 80097aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2220      	movs	r2, #32
 80097b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	02008000 	.word	0x02008000

080097d8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b088      	sub	sp, #32
 80097dc:	af02      	add	r7, sp, #8
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	607a      	str	r2, [r7, #4]
 80097e2:	461a      	mov	r2, r3
 80097e4:	460b      	mov	r3, r1
 80097e6:	817b      	strh	r3, [r7, #10]
 80097e8:	4613      	mov	r3, r2
 80097ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b20      	cmp	r3, #32
 80097f6:	f040 80fd 	bne.w	80099f4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009800:	2b01      	cmp	r3, #1
 8009802:	d101      	bne.n	8009808 <HAL_I2C_Master_Transmit+0x30>
 8009804:	2302      	movs	r3, #2
 8009806:	e0f6      	b.n	80099f6 <HAL_I2C_Master_Transmit+0x21e>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009810:	f7fa fdf4 	bl	80043fc <HAL_GetTick>
 8009814:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	2319      	movs	r3, #25
 800981c:	2201      	movs	r2, #1
 800981e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f000 fa0a 	bl	8009c3c <I2C_WaitOnFlagUntilTimeout>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d001      	beq.n	8009832 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e0e1      	b.n	80099f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2221      	movs	r2, #33	; 0x21
 8009836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2210      	movs	r2, #16
 800983e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	893a      	ldrh	r2, [r7, #8]
 8009852:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2200      	movs	r2, #0
 8009858:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800985e:	b29b      	uxth	r3, r3
 8009860:	2bff      	cmp	r3, #255	; 0xff
 8009862:	d906      	bls.n	8009872 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	22ff      	movs	r2, #255	; 0xff
 8009868:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800986a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800986e:	617b      	str	r3, [r7, #20]
 8009870:	e007      	b.n	8009882 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009876:	b29a      	uxth	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800987c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009880:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009886:	2b00      	cmp	r3, #0
 8009888:	d024      	beq.n	80098d4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988e:	781a      	ldrb	r2, [r3, #0]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989a:	1c5a      	adds	r2, r3, #1
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	3b01      	subs	r3, #1
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098b2:	3b01      	subs	r3, #1
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	3301      	adds	r3, #1
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	8979      	ldrh	r1, [r7, #10]
 80098c6:	4b4e      	ldr	r3, [pc, #312]	; (8009a00 <HAL_I2C_Master_Transmit+0x228>)
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	68f8      	ldr	r0, [r7, #12]
 80098ce:	f000 fc05 	bl	800a0dc <I2C_TransferConfig>
 80098d2:	e066      	b.n	80099a2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	8979      	ldrh	r1, [r7, #10]
 80098dc:	4b48      	ldr	r3, [pc, #288]	; (8009a00 <HAL_I2C_Master_Transmit+0x228>)
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f000 fbfa 	bl	800a0dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80098e8:	e05b      	b.n	80099a2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	6a39      	ldr	r1, [r7, #32]
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 f9fd 	bl	8009cee <I2C_WaitOnTXISFlagUntilTimeout>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e07b      	b.n	80099f6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009902:	781a      	ldrb	r2, [r3, #0]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990e:	1c5a      	adds	r2, r3, #1
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009918:	b29b      	uxth	r3, r3
 800991a:	3b01      	subs	r3, #1
 800991c:	b29a      	uxth	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009926:	3b01      	subs	r3, #1
 8009928:	b29a      	uxth	r2, r3
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009932:	b29b      	uxth	r3, r3
 8009934:	2b00      	cmp	r3, #0
 8009936:	d034      	beq.n	80099a2 <HAL_I2C_Master_Transmit+0x1ca>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800993c:	2b00      	cmp	r3, #0
 800993e:	d130      	bne.n	80099a2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	2200      	movs	r2, #0
 8009948:	2180      	movs	r1, #128	; 0x80
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 f976 	bl	8009c3c <I2C_WaitOnFlagUntilTimeout>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e04d      	b.n	80099f6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800995e:	b29b      	uxth	r3, r3
 8009960:	2bff      	cmp	r3, #255	; 0xff
 8009962:	d90e      	bls.n	8009982 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	22ff      	movs	r2, #255	; 0xff
 8009968:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800996e:	b2da      	uxtb	r2, r3
 8009970:	8979      	ldrh	r1, [r7, #10]
 8009972:	2300      	movs	r3, #0
 8009974:	9300      	str	r3, [sp, #0]
 8009976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 fbae 	bl	800a0dc <I2C_TransferConfig>
 8009980:	e00f      	b.n	80099a2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009986:	b29a      	uxth	r2, r3
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009990:	b2da      	uxtb	r2, r3
 8009992:	8979      	ldrh	r1, [r7, #10]
 8009994:	2300      	movs	r3, #0
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 fb9d 	bl	800a0dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d19e      	bne.n	80098ea <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	6a39      	ldr	r1, [r7, #32]
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 f9e3 	bl	8009d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e01a      	b.n	80099f6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2220      	movs	r2, #32
 80099c6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6859      	ldr	r1, [r3, #4]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	4b0c      	ldr	r3, [pc, #48]	; (8009a04 <HAL_I2C_Master_Transmit+0x22c>)
 80099d4:	400b      	ands	r3, r1
 80099d6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2220      	movs	r2, #32
 80099dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	e000      	b.n	80099f6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80099f4:	2302      	movs	r3, #2
  }
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3718      	adds	r7, #24
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	80002000 	.word	0x80002000
 8009a04:	fe00e800 	.word	0xfe00e800

08009a08 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b088      	sub	sp, #32
 8009a0c:	af02      	add	r7, sp, #8
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	607a      	str	r2, [r7, #4]
 8009a12:	461a      	mov	r2, r3
 8009a14:	460b      	mov	r3, r1
 8009a16:	817b      	strh	r3, [r7, #10]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b20      	cmp	r3, #32
 8009a26:	f040 80db 	bne.w	8009be0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d101      	bne.n	8009a38 <HAL_I2C_Master_Receive+0x30>
 8009a34:	2302      	movs	r3, #2
 8009a36:	e0d4      	b.n	8009be2 <HAL_I2C_Master_Receive+0x1da>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009a40:	f7fa fcdc 	bl	80043fc <HAL_GetTick>
 8009a44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	2319      	movs	r3, #25
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 f8f2 	bl	8009c3c <I2C_WaitOnFlagUntilTimeout>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e0bf      	b.n	8009be2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2222      	movs	r2, #34	; 0x22
 8009a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2210      	movs	r2, #16
 8009a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	893a      	ldrh	r2, [r7, #8]
 8009a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	2bff      	cmp	r3, #255	; 0xff
 8009a92:	d90e      	bls.n	8009ab2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	22ff      	movs	r2, #255	; 0xff
 8009a98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	8979      	ldrh	r1, [r7, #10]
 8009aa2:	4b52      	ldr	r3, [pc, #328]	; (8009bec <HAL_I2C_Master_Receive+0x1e4>)
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f000 fb16 	bl	800a0dc <I2C_TransferConfig>
 8009ab0:	e06d      	b.n	8009b8e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	8979      	ldrh	r1, [r7, #10]
 8009ac4:	4b49      	ldr	r3, [pc, #292]	; (8009bec <HAL_I2C_Master_Receive+0x1e4>)
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009acc:	68f8      	ldr	r0, [r7, #12]
 8009ace:	f000 fb05 	bl	800a0dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009ad2:	e05c      	b.n	8009b8e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	6a39      	ldr	r1, [r7, #32]
 8009ad8:	68f8      	ldr	r0, [r7, #12]
 8009ada:	f000 f993 	bl	8009e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e07c      	b.n	8009be2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af2:	b2d2      	uxtb	r2, r2
 8009af4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009afa:	1c5a      	adds	r2, r3, #1
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b04:	3b01      	subs	r3, #1
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	3b01      	subs	r3, #1
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b1e:	b29b      	uxth	r3, r3
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d034      	beq.n	8009b8e <HAL_I2C_Master_Receive+0x186>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d130      	bne.n	8009b8e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	2200      	movs	r2, #0
 8009b34:	2180      	movs	r1, #128	; 0x80
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f000 f880 	bl	8009c3c <I2C_WaitOnFlagUntilTimeout>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e04d      	b.n	8009be2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	2bff      	cmp	r3, #255	; 0xff
 8009b4e:	d90e      	bls.n	8009b6e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	22ff      	movs	r2, #255	; 0xff
 8009b54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	8979      	ldrh	r1, [r7, #10]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f000 fab8 	bl	800a0dc <I2C_TransferConfig>
 8009b6c:	e00f      	b.n	8009b8e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	8979      	ldrh	r1, [r7, #10]
 8009b80:	2300      	movs	r3, #0
 8009b82:	9300      	str	r3, [sp, #0]
 8009b84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	f000 faa7 	bl	800a0dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d19d      	bne.n	8009ad4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	6a39      	ldr	r1, [r7, #32]
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f000 f8ed 	bl	8009d7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e01a      	b.n	8009be2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2220      	movs	r2, #32
 8009bb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	6859      	ldr	r1, [r3, #4]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	4b0c      	ldr	r3, [pc, #48]	; (8009bf0 <HAL_I2C_Master_Receive+0x1e8>)
 8009bc0:	400b      	ands	r3, r1
 8009bc2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2220      	movs	r2, #32
 8009bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	e000      	b.n	8009be2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009be0:	2302      	movs	r3, #2
  }
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	80002400 	.word	0x80002400
 8009bf0:	fe00e800 	.word	0xfe00e800

08009bf4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	f003 0302 	and.w	r3, r3, #2
 8009c06:	2b02      	cmp	r3, #2
 8009c08:	d103      	bne.n	8009c12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	699b      	ldr	r3, [r3, #24]
 8009c18:	f003 0301 	and.w	r3, r3, #1
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d007      	beq.n	8009c30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	699a      	ldr	r2, [r3, #24]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f042 0201 	orr.w	r2, r2, #1
 8009c2e:	619a      	str	r2, [r3, #24]
  }
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	603b      	str	r3, [r7, #0]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c4c:	e03b      	b.n	8009cc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c4e:	69ba      	ldr	r2, [r7, #24]
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f000 f962 	bl	8009f1c <I2C_IsErrorOccurred>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e041      	b.n	8009ce6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c68:	d02d      	beq.n	8009cc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c6a:	f7fa fbc7 	bl	80043fc <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d302      	bcc.n	8009c80 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d122      	bne.n	8009cc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	699a      	ldr	r2, [r3, #24]
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	4013      	ands	r3, r2
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	bf0c      	ite	eq
 8009c90:	2301      	moveq	r3, #1
 8009c92:	2300      	movne	r3, #0
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	461a      	mov	r2, r3
 8009c98:	79fb      	ldrb	r3, [r7, #7]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d113      	bne.n	8009cc6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca2:	f043 0220 	orr.w	r2, r3, #32
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2220      	movs	r2, #32
 8009cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e00f      	b.n	8009ce6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	699a      	ldr	r2, [r3, #24]
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	4013      	ands	r3, r2
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	bf0c      	ite	eq
 8009cd6:	2301      	moveq	r3, #1
 8009cd8:	2300      	movne	r3, #0
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	461a      	mov	r2, r3
 8009cde:	79fb      	ldrb	r3, [r7, #7]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d0b4      	beq.n	8009c4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	60f8      	str	r0, [r7, #12]
 8009cf6:	60b9      	str	r1, [r7, #8]
 8009cf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009cfa:	e033      	b.n	8009d64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	68b9      	ldr	r1, [r7, #8]
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f000 f90b 	bl	8009f1c <I2C_IsErrorOccurred>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d001      	beq.n	8009d10 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e031      	b.n	8009d74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d16:	d025      	beq.n	8009d64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d18:	f7fa fb70 	bl	80043fc <HAL_GetTick>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d302      	bcc.n	8009d2e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d11a      	bne.n	8009d64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	699b      	ldr	r3, [r3, #24]
 8009d34:	f003 0302 	and.w	r3, r3, #2
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d013      	beq.n	8009d64 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d40:	f043 0220 	orr.w	r2, r3, #32
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2220      	movs	r2, #32
 8009d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e007      	b.n	8009d74 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	f003 0302 	and.w	r3, r3, #2
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d1c4      	bne.n	8009cfc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009d88:	e02f      	b.n	8009dea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	68b9      	ldr	r1, [r7, #8]
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 f8c4 	bl	8009f1c <I2C_IsErrorOccurred>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e02d      	b.n	8009dfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d9e:	f7fa fb2d 	bl	80043fc <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d302      	bcc.n	8009db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d11a      	bne.n	8009dea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	f003 0320 	and.w	r3, r3, #32
 8009dbe:	2b20      	cmp	r3, #32
 8009dc0:	d013      	beq.n	8009dea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dc6:	f043 0220 	orr.w	r2, r3, #32
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2220      	movs	r2, #32
 8009dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	e007      	b.n	8009dfa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	f003 0320 	and.w	r3, r3, #32
 8009df4:	2b20      	cmp	r3, #32
 8009df6:	d1c8      	bne.n	8009d8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
	...

08009e04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009e14:	e071      	b.n	8009efa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	68b9      	ldr	r1, [r7, #8]
 8009e1a:	68f8      	ldr	r0, [r7, #12]
 8009e1c:	f000 f87e 	bl	8009f1c <I2C_IsErrorOccurred>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d001      	beq.n	8009e2a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	f003 0320 	and.w	r3, r3, #32
 8009e34:	2b20      	cmp	r3, #32
 8009e36:	d13b      	bne.n	8009eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009e38:	7dfb      	ldrb	r3, [r7, #23]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d138      	bne.n	8009eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	f003 0304 	and.w	r3, r3, #4
 8009e48:	2b04      	cmp	r3, #4
 8009e4a:	d105      	bne.n	8009e58 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d001      	beq.n	8009e58 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	699b      	ldr	r3, [r3, #24]
 8009e5e:	f003 0310 	and.w	r3, r3, #16
 8009e62:	2b10      	cmp	r3, #16
 8009e64:	d121      	bne.n	8009eaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2210      	movs	r2, #16
 8009e6c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2204      	movs	r2, #4
 8009e72:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2220      	movs	r2, #32
 8009e7a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	6859      	ldr	r1, [r3, #4]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	4b24      	ldr	r3, [pc, #144]	; (8009f18 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009e88:	400b      	ands	r3, r1
 8009e8a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	75fb      	strb	r3, [r7, #23]
 8009ea8:	e002      	b.n	8009eb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8009eb0:	f7fa faa4 	bl	80043fc <HAL_GetTick>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d302      	bcc.n	8009ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d119      	bne.n	8009efa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009ec6:	7dfb      	ldrb	r3, [r7, #23]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d116      	bne.n	8009efa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	699b      	ldr	r3, [r3, #24]
 8009ed2:	f003 0304 	and.w	r3, r3, #4
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	d00f      	beq.n	8009efa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ede:	f043 0220 	orr.w	r2, r3, #32
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2220      	movs	r2, #32
 8009eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	d002      	beq.n	8009f0e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009f08:	7dfb      	ldrb	r3, [r7, #23]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d083      	beq.n	8009e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3718      	adds	r7, #24
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	fe00e800 	.word	0xfe00e800

08009f1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08a      	sub	sp, #40	; 0x28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	f003 0310 	and.w	r3, r3, #16
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d068      	beq.n	800a01a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2210      	movs	r2, #16
 8009f4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009f50:	e049      	b.n	8009fe6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f58:	d045      	beq.n	8009fe6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009f5a:	f7fa fa4f 	bl	80043fc <HAL_GetTick>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d302      	bcc.n	8009f70 <I2C_IsErrorOccurred+0x54>
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d13a      	bne.n	8009fe6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	699b      	ldr	r3, [r3, #24]
 8009f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f92:	d121      	bne.n	8009fd8 <I2C_IsErrorOccurred+0xbc>
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f9a:	d01d      	beq.n	8009fd8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009f9c:	7cfb      	ldrb	r3, [r7, #19]
 8009f9e:	2b20      	cmp	r3, #32
 8009fa0:	d01a      	beq.n	8009fd8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fb0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009fb2:	f7fa fa23 	bl	80043fc <HAL_GetTick>
 8009fb6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009fb8:	e00e      	b.n	8009fd8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009fba:	f7fa fa1f 	bl	80043fc <HAL_GetTick>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	2b19      	cmp	r3, #25
 8009fc6:	d907      	bls.n	8009fd8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009fc8:	6a3b      	ldr	r3, [r7, #32]
 8009fca:	f043 0320 	orr.w	r3, r3, #32
 8009fce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009fd6:	e006      	b.n	8009fe6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	f003 0320 	and.w	r3, r3, #32
 8009fe2:	2b20      	cmp	r3, #32
 8009fe4:	d1e9      	bne.n	8009fba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	f003 0320 	and.w	r3, r3, #32
 8009ff0:	2b20      	cmp	r3, #32
 8009ff2:	d003      	beq.n	8009ffc <I2C_IsErrorOccurred+0xe0>
 8009ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d0aa      	beq.n	8009f52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a000:	2b00      	cmp	r3, #0
 800a002:	d103      	bne.n	800a00c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2220      	movs	r2, #32
 800a00a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	f043 0304 	orr.w	r3, r3, #4
 800a012:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00b      	beq.n	800a044 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a02c:	6a3b      	ldr	r3, [r7, #32]
 800a02e:	f043 0301 	orr.w	r3, r3, #1
 800a032:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a03c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00b      	beq.n	800a066 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	f043 0308 	orr.w	r3, r3, #8
 800a054:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a05e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00b      	beq.n	800a088 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a070:	6a3b      	ldr	r3, [r7, #32]
 800a072:	f043 0302 	orr.w	r3, r3, #2
 800a076:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a080:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d01c      	beq.n	800a0ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f7ff fdaf 	bl	8009bf4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	6859      	ldr	r1, [r3, #4]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	4b0d      	ldr	r3, [pc, #52]	; (800a0d8 <I2C_IsErrorOccurred+0x1bc>)
 800a0a2:	400b      	ands	r3, r1
 800a0a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	431a      	orrs	r2, r3
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2220      	movs	r2, #32
 800a0b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a0ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3728      	adds	r7, #40	; 0x28
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	fe00e800 	.word	0xfe00e800

0800a0dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b087      	sub	sp, #28
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	607b      	str	r3, [r7, #4]
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	817b      	strh	r3, [r7, #10]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a0ee:	897b      	ldrh	r3, [r7, #10]
 800a0f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a0f4:	7a7b      	ldrb	r3, [r7, #9]
 800a0f6:	041b      	lsls	r3, r3, #16
 800a0f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a0fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	4313      	orrs	r3, r2
 800a106:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a10a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	6a3b      	ldr	r3, [r7, #32]
 800a114:	0d5b      	lsrs	r3, r3, #21
 800a116:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a11a:	4b08      	ldr	r3, [pc, #32]	; (800a13c <I2C_TransferConfig+0x60>)
 800a11c:	430b      	orrs	r3, r1
 800a11e:	43db      	mvns	r3, r3
 800a120:	ea02 0103 	and.w	r1, r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	430a      	orrs	r2, r1
 800a12c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a12e:	bf00      	nop
 800a130:	371c      	adds	r7, #28
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	03ff63ff 	.word	0x03ff63ff

0800a140 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b20      	cmp	r3, #32
 800a154:	d138      	bne.n	800a1c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d101      	bne.n	800a164 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a160:	2302      	movs	r3, #2
 800a162:	e032      	b.n	800a1ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2224      	movs	r2, #36	; 0x24
 800a170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f022 0201 	bic.w	r2, r2, #1
 800a182:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a192:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6819      	ldr	r1, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	683a      	ldr	r2, [r7, #0]
 800a1a0:	430a      	orrs	r2, r1
 800a1a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f042 0201 	orr.w	r2, r2, #1
 800a1b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2220      	movs	r2, #32
 800a1b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	e000      	b.n	800a1ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a1c8:	2302      	movs	r3, #2
  }
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	370c      	adds	r7, #12
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr

0800a1d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a1d6:	b480      	push	{r7}
 800a1d8:	b085      	sub	sp, #20
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
 800a1de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	2b20      	cmp	r3, #32
 800a1ea:	d139      	bne.n	800a260 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d101      	bne.n	800a1fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	e033      	b.n	800a262 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2224      	movs	r2, #36	; 0x24
 800a206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f022 0201 	bic.w	r2, r2, #1
 800a218:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a228:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	021b      	lsls	r3, r3, #8
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	4313      	orrs	r3, r2
 800a232:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f042 0201 	orr.w	r2, r2, #1
 800a24a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2220      	movs	r2, #32
 800a250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a25c:	2300      	movs	r3, #0
 800a25e:	e000      	b.n	800a262 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a260:	2302      	movs	r3, #2
  }
}
 800a262:	4618      	mov	r0, r3
 800a264:	3714      	adds	r7, #20
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
	...

0800a270 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a278:	4b0d      	ldr	r3, [pc, #52]	; (800a2b0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a27a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a27e:	4a0c      	ldr	r2, [pc, #48]	; (800a2b0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a280:	f043 0302 	orr.w	r3, r3, #2
 800a284:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a288:	4b09      	ldr	r3, [pc, #36]	; (800a2b0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800a28a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a28e:	f003 0302 	and.w	r3, r3, #2
 800a292:	60fb      	str	r3, [r7, #12]
 800a294:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800a296:	4b07      	ldr	r3, [pc, #28]	; (800a2b4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a298:	685a      	ldr	r2, [r3, #4]
 800a29a:	4906      	ldr	r1, [pc, #24]	; (800a2b4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	604b      	str	r3, [r1, #4]
}
 800a2a2:	bf00      	nop
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	58024400 	.word	0x58024400
 800a2b4:	58000400 	.word	0x58000400

0800a2b8 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800a2c4:	4b18      	ldr	r3, [pc, #96]	; (800a328 <HAL_PWR_EnterSTOPMode+0x70>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f023 0201 	bic.w	r2, r3, #1
 800a2cc:	4916      	ldr	r1, [pc, #88]	; (800a328 <HAL_PWR_EnterSTOPMode+0x70>)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800a2d4:	4b14      	ldr	r3, [pc, #80]	; (800a328 <HAL_PWR_EnterSTOPMode+0x70>)
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	4a13      	ldr	r2, [pc, #76]	; (800a328 <HAL_PWR_EnterSTOPMode+0x70>)
 800a2da:	f023 0305 	bic.w	r3, r3, #5
 800a2de:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800a2e0:	4b11      	ldr	r3, [pc, #68]	; (800a328 <HAL_PWR_EnterSTOPMode+0x70>)
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	4a10      	ldr	r2, [pc, #64]	; (800a328 <HAL_PWR_EnterSTOPMode+0x70>)
 800a2e6:	f023 0302 	bic.w	r3, r3, #2
 800a2ea:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800a2ec:	4b0f      	ldr	r3, [pc, #60]	; (800a32c <HAL_PWR_EnterSTOPMode+0x74>)
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	4a0e      	ldr	r2, [pc, #56]	; (800a32c <HAL_PWR_EnterSTOPMode+0x74>)
 800a2f2:	f043 0304 	orr.w	r3, r3, #4
 800a2f6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800a2f8:	f3bf 8f4f 	dsb	sy
}
 800a2fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a2fe:	f3bf 8f6f 	isb	sy
}
 800a302:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800a304:	78fb      	ldrb	r3, [r7, #3]
 800a306:	2b01      	cmp	r3, #1
 800a308:	d101      	bne.n	800a30e <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800a30a:	bf30      	wfi
 800a30c:	e000      	b.n	800a310 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800a30e:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800a310:	4b06      	ldr	r3, [pc, #24]	; (800a32c <HAL_PWR_EnterSTOPMode+0x74>)
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	4a05      	ldr	r2, [pc, #20]	; (800a32c <HAL_PWR_EnterSTOPMode+0x74>)
 800a316:	f023 0304 	bic.w	r3, r3, #4
 800a31a:	6113      	str	r3, [r2, #16]
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	58024800 	.word	0x58024800
 800a32c:	e000ed00 	.word	0xe000ed00

0800a330 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a338:	4b19      	ldr	r3, [pc, #100]	; (800a3a0 <HAL_PWREx_ConfigSupply+0x70>)
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	2b04      	cmp	r3, #4
 800a342:	d00a      	beq.n	800a35a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a344:	4b16      	ldr	r3, [pc, #88]	; (800a3a0 <HAL_PWREx_ConfigSupply+0x70>)
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	f003 0307 	and.w	r3, r3, #7
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d001      	beq.n	800a356 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e01f      	b.n	800a396 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	e01d      	b.n	800a396 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a35a:	4b11      	ldr	r3, [pc, #68]	; (800a3a0 <HAL_PWREx_ConfigSupply+0x70>)
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	f023 0207 	bic.w	r2, r3, #7
 800a362:	490f      	ldr	r1, [pc, #60]	; (800a3a0 <HAL_PWREx_ConfigSupply+0x70>)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4313      	orrs	r3, r2
 800a368:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a36a:	f7fa f847 	bl	80043fc <HAL_GetTick>
 800a36e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a370:	e009      	b.n	800a386 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a372:	f7fa f843 	bl	80043fc <HAL_GetTick>
 800a376:	4602      	mov	r2, r0
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a380:	d901      	bls.n	800a386 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	e007      	b.n	800a396 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a386:	4b06      	ldr	r3, [pc, #24]	; (800a3a0 <HAL_PWREx_ConfigSupply+0x70>)
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a38e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a392:	d1ee      	bne.n	800a372 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	58024800 	.word	0x58024800

0800a3a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b08c      	sub	sp, #48	; 0x30
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d102      	bne.n	800a3b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	f000 bc48 	b.w	800ac48 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0301 	and.w	r3, r3, #1
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f000 8088 	beq.w	800a4d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3c6:	4b99      	ldr	r3, [pc, #612]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a3d0:	4b96      	ldr	r3, [pc, #600]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d8:	2b10      	cmp	r3, #16
 800a3da:	d007      	beq.n	800a3ec <HAL_RCC_OscConfig+0x48>
 800a3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3de:	2b18      	cmp	r3, #24
 800a3e0:	d111      	bne.n	800a406 <HAL_RCC_OscConfig+0x62>
 800a3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e4:	f003 0303 	and.w	r3, r3, #3
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d10c      	bne.n	800a406 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3ec:	4b8f      	ldr	r3, [pc, #572]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d06d      	beq.n	800a4d4 <HAL_RCC_OscConfig+0x130>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d169      	bne.n	800a4d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	f000 bc21 	b.w	800ac48 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a40e:	d106      	bne.n	800a41e <HAL_RCC_OscConfig+0x7a>
 800a410:	4b86      	ldr	r3, [pc, #536]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a85      	ldr	r2, [pc, #532]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a41a:	6013      	str	r3, [r2, #0]
 800a41c:	e02e      	b.n	800a47c <HAL_RCC_OscConfig+0xd8>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10c      	bne.n	800a440 <HAL_RCC_OscConfig+0x9c>
 800a426:	4b81      	ldr	r3, [pc, #516]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a80      	ldr	r2, [pc, #512]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a42c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a430:	6013      	str	r3, [r2, #0]
 800a432:	4b7e      	ldr	r3, [pc, #504]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a7d      	ldr	r2, [pc, #500]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a43c:	6013      	str	r3, [r2, #0]
 800a43e:	e01d      	b.n	800a47c <HAL_RCC_OscConfig+0xd8>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a448:	d10c      	bne.n	800a464 <HAL_RCC_OscConfig+0xc0>
 800a44a:	4b78      	ldr	r3, [pc, #480]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a77      	ldr	r2, [pc, #476]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a454:	6013      	str	r3, [r2, #0]
 800a456:	4b75      	ldr	r3, [pc, #468]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a74      	ldr	r2, [pc, #464]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a45c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a460:	6013      	str	r3, [r2, #0]
 800a462:	e00b      	b.n	800a47c <HAL_RCC_OscConfig+0xd8>
 800a464:	4b71      	ldr	r3, [pc, #452]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a70      	ldr	r2, [pc, #448]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a46a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a46e:	6013      	str	r3, [r2, #0]
 800a470:	4b6e      	ldr	r3, [pc, #440]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a6d      	ldr	r2, [pc, #436]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a47a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d013      	beq.n	800a4ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a484:	f7f9 ffba 	bl	80043fc <HAL_GetTick>
 800a488:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a48a:	e008      	b.n	800a49e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a48c:	f7f9 ffb6 	bl	80043fc <HAL_GetTick>
 800a490:	4602      	mov	r2, r0
 800a492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a494:	1ad3      	subs	r3, r2, r3
 800a496:	2b64      	cmp	r3, #100	; 0x64
 800a498:	d901      	bls.n	800a49e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e3d4      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a49e:	4b63      	ldr	r3, [pc, #396]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d0f0      	beq.n	800a48c <HAL_RCC_OscConfig+0xe8>
 800a4aa:	e014      	b.n	800a4d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4ac:	f7f9 ffa6 	bl	80043fc <HAL_GetTick>
 800a4b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a4b2:	e008      	b.n	800a4c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4b4:	f7f9 ffa2 	bl	80043fc <HAL_GetTick>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	2b64      	cmp	r3, #100	; 0x64
 800a4c0:	d901      	bls.n	800a4c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	e3c0      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a4c6:	4b59      	ldr	r3, [pc, #356]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1f0      	bne.n	800a4b4 <HAL_RCC_OscConfig+0x110>
 800a4d2:	e000      	b.n	800a4d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0302 	and.w	r3, r3, #2
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 80ca 	beq.w	800a678 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a4e4:	4b51      	ldr	r3, [pc, #324]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a4ee:	4b4f      	ldr	r3, [pc, #316]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a4f4:	6a3b      	ldr	r3, [r7, #32]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d007      	beq.n	800a50a <HAL_RCC_OscConfig+0x166>
 800a4fa:	6a3b      	ldr	r3, [r7, #32]
 800a4fc:	2b18      	cmp	r3, #24
 800a4fe:	d156      	bne.n	800a5ae <HAL_RCC_OscConfig+0x20a>
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	f003 0303 	and.w	r3, r3, #3
 800a506:	2b00      	cmp	r3, #0
 800a508:	d151      	bne.n	800a5ae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a50a:	4b48      	ldr	r3, [pc, #288]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f003 0304 	and.w	r3, r3, #4
 800a512:	2b00      	cmp	r3, #0
 800a514:	d005      	beq.n	800a522 <HAL_RCC_OscConfig+0x17e>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d101      	bne.n	800a522 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e392      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a522:	4b42      	ldr	r3, [pc, #264]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f023 0219 	bic.w	r2, r3, #25
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	493f      	ldr	r1, [pc, #252]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a530:	4313      	orrs	r3, r2
 800a532:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a534:	f7f9 ff62 	bl	80043fc <HAL_GetTick>
 800a538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a53a:	e008      	b.n	800a54e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a53c:	f7f9 ff5e 	bl	80043fc <HAL_GetTick>
 800a540:	4602      	mov	r2, r0
 800a542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	2b02      	cmp	r3, #2
 800a548:	d901      	bls.n	800a54e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e37c      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a54e:	4b37      	ldr	r3, [pc, #220]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0304 	and.w	r3, r3, #4
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0f0      	beq.n	800a53c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a55a:	f7f9 ff5b 	bl	8004414 <HAL_GetREVID>
 800a55e:	4603      	mov	r3, r0
 800a560:	f241 0203 	movw	r2, #4099	; 0x1003
 800a564:	4293      	cmp	r3, r2
 800a566:	d817      	bhi.n	800a598 <HAL_RCC_OscConfig+0x1f4>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	2b40      	cmp	r3, #64	; 0x40
 800a56e:	d108      	bne.n	800a582 <HAL_RCC_OscConfig+0x1de>
 800a570:	4b2e      	ldr	r3, [pc, #184]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a578:	4a2c      	ldr	r2, [pc, #176]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a57a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a57e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a580:	e07a      	b.n	800a678 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a582:	4b2a      	ldr	r3, [pc, #168]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	031b      	lsls	r3, r3, #12
 800a590:	4926      	ldr	r1, [pc, #152]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a592:	4313      	orrs	r3, r2
 800a594:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a596:	e06f      	b.n	800a678 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a598:	4b24      	ldr	r3, [pc, #144]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	061b      	lsls	r3, r3, #24
 800a5a6:	4921      	ldr	r1, [pc, #132]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5ac:	e064      	b.n	800a678 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d047      	beq.n	800a646 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a5b6:	4b1d      	ldr	r3, [pc, #116]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f023 0219 	bic.w	r2, r3, #25
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	491a      	ldr	r1, [pc, #104]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5c8:	f7f9 ff18 	bl	80043fc <HAL_GetTick>
 800a5cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5ce:	e008      	b.n	800a5e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5d0:	f7f9 ff14 	bl	80043fc <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d901      	bls.n	800a5e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e332      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5e2:	4b12      	ldr	r3, [pc, #72]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 0304 	and.w	r3, r3, #4
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d0f0      	beq.n	800a5d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5ee:	f7f9 ff11 	bl	8004414 <HAL_GetREVID>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	f241 0203 	movw	r2, #4099	; 0x1003
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d819      	bhi.n	800a630 <HAL_RCC_OscConfig+0x28c>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	2b40      	cmp	r3, #64	; 0x40
 800a602:	d108      	bne.n	800a616 <HAL_RCC_OscConfig+0x272>
 800a604:	4b09      	ldr	r3, [pc, #36]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a60c:	4a07      	ldr	r2, [pc, #28]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a60e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a612:	6053      	str	r3, [r2, #4]
 800a614:	e030      	b.n	800a678 <HAL_RCC_OscConfig+0x2d4>
 800a616:	4b05      	ldr	r3, [pc, #20]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	031b      	lsls	r3, r3, #12
 800a624:	4901      	ldr	r1, [pc, #4]	; (800a62c <HAL_RCC_OscConfig+0x288>)
 800a626:	4313      	orrs	r3, r2
 800a628:	604b      	str	r3, [r1, #4]
 800a62a:	e025      	b.n	800a678 <HAL_RCC_OscConfig+0x2d4>
 800a62c:	58024400 	.word	0x58024400
 800a630:	4b9a      	ldr	r3, [pc, #616]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	061b      	lsls	r3, r3, #24
 800a63e:	4997      	ldr	r1, [pc, #604]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a640:	4313      	orrs	r3, r2
 800a642:	604b      	str	r3, [r1, #4]
 800a644:	e018      	b.n	800a678 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a646:	4b95      	ldr	r3, [pc, #596]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a94      	ldr	r2, [pc, #592]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a64c:	f023 0301 	bic.w	r3, r3, #1
 800a650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a652:	f7f9 fed3 	bl	80043fc <HAL_GetTick>
 800a656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a658:	e008      	b.n	800a66c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a65a:	f7f9 fecf 	bl	80043fc <HAL_GetTick>
 800a65e:	4602      	mov	r2, r0
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	2b02      	cmp	r3, #2
 800a666:	d901      	bls.n	800a66c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a668:	2303      	movs	r3, #3
 800a66a:	e2ed      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a66c:	4b8b      	ldr	r3, [pc, #556]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0304 	and.w	r3, r3, #4
 800a674:	2b00      	cmp	r3, #0
 800a676:	d1f0      	bne.n	800a65a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0310 	and.w	r3, r3, #16
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 80a9 	beq.w	800a7d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a686:	4b85      	ldr	r3, [pc, #532]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a688:	691b      	ldr	r3, [r3, #16]
 800a68a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a68e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a690:	4b82      	ldr	r3, [pc, #520]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a694:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	2b08      	cmp	r3, #8
 800a69a:	d007      	beq.n	800a6ac <HAL_RCC_OscConfig+0x308>
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	2b18      	cmp	r3, #24
 800a6a0:	d13a      	bne.n	800a718 <HAL_RCC_OscConfig+0x374>
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f003 0303 	and.w	r3, r3, #3
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d135      	bne.n	800a718 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a6ac:	4b7b      	ldr	r3, [pc, #492]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d005      	beq.n	800a6c4 <HAL_RCC_OscConfig+0x320>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	69db      	ldr	r3, [r3, #28]
 800a6bc:	2b80      	cmp	r3, #128	; 0x80
 800a6be:	d001      	beq.n	800a6c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e2c1      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a6c4:	f7f9 fea6 	bl	8004414 <HAL_GetREVID>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	f241 0203 	movw	r2, #4099	; 0x1003
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d817      	bhi.n	800a702 <HAL_RCC_OscConfig+0x35e>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a1b      	ldr	r3, [r3, #32]
 800a6d6:	2b20      	cmp	r3, #32
 800a6d8:	d108      	bne.n	800a6ec <HAL_RCC_OscConfig+0x348>
 800a6da:	4b70      	ldr	r3, [pc, #448]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a6e2:	4a6e      	ldr	r2, [pc, #440]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a6e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6e8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a6ea:	e075      	b.n	800a7d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a6ec:	4b6b      	ldr	r3, [pc, #428]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a1b      	ldr	r3, [r3, #32]
 800a6f8:	069b      	lsls	r3, r3, #26
 800a6fa:	4968      	ldr	r1, [pc, #416]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a700:	e06a      	b.n	800a7d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a702:	4b66      	ldr	r3, [pc, #408]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	061b      	lsls	r3, r3, #24
 800a710:	4962      	ldr	r1, [pc, #392]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a712:	4313      	orrs	r3, r2
 800a714:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a716:	e05f      	b.n	800a7d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	69db      	ldr	r3, [r3, #28]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d042      	beq.n	800a7a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a720:	4b5e      	ldr	r3, [pc, #376]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a5d      	ldr	r2, [pc, #372]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a72a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a72c:	f7f9 fe66 	bl	80043fc <HAL_GetTick>
 800a730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a732:	e008      	b.n	800a746 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a734:	f7f9 fe62 	bl	80043fc <HAL_GetTick>
 800a738:	4602      	mov	r2, r0
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	1ad3      	subs	r3, r2, r3
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d901      	bls.n	800a746 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a742:	2303      	movs	r3, #3
 800a744:	e280      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a746:	4b55      	ldr	r3, [pc, #340]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d0f0      	beq.n	800a734 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a752:	f7f9 fe5f 	bl	8004414 <HAL_GetREVID>
 800a756:	4603      	mov	r3, r0
 800a758:	f241 0203 	movw	r2, #4099	; 0x1003
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d817      	bhi.n	800a790 <HAL_RCC_OscConfig+0x3ec>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a1b      	ldr	r3, [r3, #32]
 800a764:	2b20      	cmp	r3, #32
 800a766:	d108      	bne.n	800a77a <HAL_RCC_OscConfig+0x3d6>
 800a768:	4b4c      	ldr	r3, [pc, #304]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a770:	4a4a      	ldr	r2, [pc, #296]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a772:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a776:	6053      	str	r3, [r2, #4]
 800a778:	e02e      	b.n	800a7d8 <HAL_RCC_OscConfig+0x434>
 800a77a:	4b48      	ldr	r3, [pc, #288]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	069b      	lsls	r3, r3, #26
 800a788:	4944      	ldr	r1, [pc, #272]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a78a:	4313      	orrs	r3, r2
 800a78c:	604b      	str	r3, [r1, #4]
 800a78e:	e023      	b.n	800a7d8 <HAL_RCC_OscConfig+0x434>
 800a790:	4b42      	ldr	r3, [pc, #264]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a1b      	ldr	r3, [r3, #32]
 800a79c:	061b      	lsls	r3, r3, #24
 800a79e:	493f      	ldr	r1, [pc, #252]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	60cb      	str	r3, [r1, #12]
 800a7a4:	e018      	b.n	800a7d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a7a6:	4b3d      	ldr	r3, [pc, #244]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a3c      	ldr	r2, [pc, #240]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a7ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7b2:	f7f9 fe23 	bl	80043fc <HAL_GetTick>
 800a7b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a7b8:	e008      	b.n	800a7cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a7ba:	f7f9 fe1f 	bl	80043fc <HAL_GetTick>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	d901      	bls.n	800a7cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e23d      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a7cc:	4b33      	ldr	r3, [pc, #204]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1f0      	bne.n	800a7ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 0308 	and.w	r3, r3, #8
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d036      	beq.n	800a852 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	695b      	ldr	r3, [r3, #20]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d019      	beq.n	800a820 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a7ec:	4b2b      	ldr	r3, [pc, #172]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a7ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7f0:	4a2a      	ldr	r2, [pc, #168]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a7f2:	f043 0301 	orr.w	r3, r3, #1
 800a7f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7f8:	f7f9 fe00 	bl	80043fc <HAL_GetTick>
 800a7fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a7fe:	e008      	b.n	800a812 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a800:	f7f9 fdfc 	bl	80043fc <HAL_GetTick>
 800a804:	4602      	mov	r2, r0
 800a806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d901      	bls.n	800a812 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a80e:	2303      	movs	r3, #3
 800a810:	e21a      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a812:	4b22      	ldr	r3, [pc, #136]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a816:	f003 0302 	and.w	r3, r3, #2
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d0f0      	beq.n	800a800 <HAL_RCC_OscConfig+0x45c>
 800a81e:	e018      	b.n	800a852 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a820:	4b1e      	ldr	r3, [pc, #120]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a824:	4a1d      	ldr	r2, [pc, #116]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a826:	f023 0301 	bic.w	r3, r3, #1
 800a82a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a82c:	f7f9 fde6 	bl	80043fc <HAL_GetTick>
 800a830:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a832:	e008      	b.n	800a846 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a834:	f7f9 fde2 	bl	80043fc <HAL_GetTick>
 800a838:	4602      	mov	r2, r0
 800a83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d901      	bls.n	800a846 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a842:	2303      	movs	r3, #3
 800a844:	e200      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a846:	4b15      	ldr	r3, [pc, #84]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a84a:	f003 0302 	and.w	r3, r3, #2
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1f0      	bne.n	800a834 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f003 0320 	and.w	r3, r3, #32
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d039      	beq.n	800a8d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d01c      	beq.n	800a8a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a866:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a0c      	ldr	r2, [pc, #48]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a86c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a870:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a872:	f7f9 fdc3 	bl	80043fc <HAL_GetTick>
 800a876:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a878:	e008      	b.n	800a88c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a87a:	f7f9 fdbf 	bl	80043fc <HAL_GetTick>
 800a87e:	4602      	mov	r2, r0
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	2b02      	cmp	r3, #2
 800a886:	d901      	bls.n	800a88c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a888:	2303      	movs	r3, #3
 800a88a:	e1dd      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a88c:	4b03      	ldr	r3, [pc, #12]	; (800a89c <HAL_RCC_OscConfig+0x4f8>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a894:	2b00      	cmp	r3, #0
 800a896:	d0f0      	beq.n	800a87a <HAL_RCC_OscConfig+0x4d6>
 800a898:	e01b      	b.n	800a8d2 <HAL_RCC_OscConfig+0x52e>
 800a89a:	bf00      	nop
 800a89c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a8a0:	4b9b      	ldr	r3, [pc, #620]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a9a      	ldr	r2, [pc, #616]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a8a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a8ac:	f7f9 fda6 	bl	80043fc <HAL_GetTick>
 800a8b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a8b2:	e008      	b.n	800a8c6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a8b4:	f7f9 fda2 	bl	80043fc <HAL_GetTick>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d901      	bls.n	800a8c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	e1c0      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a8c6:	4b92      	ldr	r3, [pc, #584]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1f0      	bne.n	800a8b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 0304 	and.w	r3, r3, #4
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f000 8081 	beq.w	800a9e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a8e0:	4b8c      	ldr	r3, [pc, #560]	; (800ab14 <HAL_RCC_OscConfig+0x770>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a8b      	ldr	r2, [pc, #556]	; (800ab14 <HAL_RCC_OscConfig+0x770>)
 800a8e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a8ec:	f7f9 fd86 	bl	80043fc <HAL_GetTick>
 800a8f0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8f2:	e008      	b.n	800a906 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8f4:	f7f9 fd82 	bl	80043fc <HAL_GetTick>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	2b64      	cmp	r3, #100	; 0x64
 800a900:	d901      	bls.n	800a906 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	e1a0      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a906:	4b83      	ldr	r3, [pc, #524]	; (800ab14 <HAL_RCC_OscConfig+0x770>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0f0      	beq.n	800a8f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d106      	bne.n	800a928 <HAL_RCC_OscConfig+0x584>
 800a91a:	4b7d      	ldr	r3, [pc, #500]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a91c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a91e:	4a7c      	ldr	r2, [pc, #496]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a920:	f043 0301 	orr.w	r3, r3, #1
 800a924:	6713      	str	r3, [r2, #112]	; 0x70
 800a926:	e02d      	b.n	800a984 <HAL_RCC_OscConfig+0x5e0>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10c      	bne.n	800a94a <HAL_RCC_OscConfig+0x5a6>
 800a930:	4b77      	ldr	r3, [pc, #476]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a934:	4a76      	ldr	r2, [pc, #472]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a936:	f023 0301 	bic.w	r3, r3, #1
 800a93a:	6713      	str	r3, [r2, #112]	; 0x70
 800a93c:	4b74      	ldr	r3, [pc, #464]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a93e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a940:	4a73      	ldr	r2, [pc, #460]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a942:	f023 0304 	bic.w	r3, r3, #4
 800a946:	6713      	str	r3, [r2, #112]	; 0x70
 800a948:	e01c      	b.n	800a984 <HAL_RCC_OscConfig+0x5e0>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	2b05      	cmp	r3, #5
 800a950:	d10c      	bne.n	800a96c <HAL_RCC_OscConfig+0x5c8>
 800a952:	4b6f      	ldr	r3, [pc, #444]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a956:	4a6e      	ldr	r2, [pc, #440]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a958:	f043 0304 	orr.w	r3, r3, #4
 800a95c:	6713      	str	r3, [r2, #112]	; 0x70
 800a95e:	4b6c      	ldr	r3, [pc, #432]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a962:	4a6b      	ldr	r2, [pc, #428]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a964:	f043 0301 	orr.w	r3, r3, #1
 800a968:	6713      	str	r3, [r2, #112]	; 0x70
 800a96a:	e00b      	b.n	800a984 <HAL_RCC_OscConfig+0x5e0>
 800a96c:	4b68      	ldr	r3, [pc, #416]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a96e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a970:	4a67      	ldr	r2, [pc, #412]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a972:	f023 0301 	bic.w	r3, r3, #1
 800a976:	6713      	str	r3, [r2, #112]	; 0x70
 800a978:	4b65      	ldr	r3, [pc, #404]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a97a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a97c:	4a64      	ldr	r2, [pc, #400]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a97e:	f023 0304 	bic.w	r3, r3, #4
 800a982:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d015      	beq.n	800a9b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a98c:	f7f9 fd36 	bl	80043fc <HAL_GetTick>
 800a990:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a992:	e00a      	b.n	800a9aa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a994:	f7f9 fd32 	bl	80043fc <HAL_GetTick>
 800a998:	4602      	mov	r2, r0
 800a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99c:	1ad3      	subs	r3, r2, r3
 800a99e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d901      	bls.n	800a9aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	e14e      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a9aa:	4b59      	ldr	r3, [pc, #356]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ae:	f003 0302 	and.w	r3, r3, #2
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d0ee      	beq.n	800a994 <HAL_RCC_OscConfig+0x5f0>
 800a9b6:	e014      	b.n	800a9e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9b8:	f7f9 fd20 	bl	80043fc <HAL_GetTick>
 800a9bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a9be:	e00a      	b.n	800a9d6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9c0:	f7f9 fd1c 	bl	80043fc <HAL_GetTick>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d901      	bls.n	800a9d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	e138      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a9d6:	4b4e      	ldr	r3, [pc, #312]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9da:	f003 0302 	and.w	r3, r3, #2
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1ee      	bne.n	800a9c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f000 812d 	beq.w	800ac46 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a9ec:	4b48      	ldr	r3, [pc, #288]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800a9ee:	691b      	ldr	r3, [r3, #16]
 800a9f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9f4:	2b18      	cmp	r3, #24
 800a9f6:	f000 80bd 	beq.w	800ab74 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	2b02      	cmp	r3, #2
 800aa00:	f040 809e 	bne.w	800ab40 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa04:	4b42      	ldr	r3, [pc, #264]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a41      	ldr	r2, [pc, #260]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aa0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa10:	f7f9 fcf4 	bl	80043fc <HAL_GetTick>
 800aa14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa16:	e008      	b.n	800aa2a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa18:	f7f9 fcf0 	bl	80043fc <HAL_GetTick>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	d901      	bls.n	800aa2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800aa26:	2303      	movs	r3, #3
 800aa28:	e10e      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa2a:	4b39      	ldr	r3, [pc, #228]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1f0      	bne.n	800aa18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa36:	4b36      	ldr	r3, [pc, #216]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aa38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa3a:	4b37      	ldr	r3, [pc, #220]	; (800ab18 <HAL_RCC_OscConfig+0x774>)
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aa46:	0112      	lsls	r2, r2, #4
 800aa48:	430a      	orrs	r2, r1
 800aa4a:	4931      	ldr	r1, [pc, #196]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	628b      	str	r3, [r1, #40]	; 0x28
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa54:	3b01      	subs	r3, #1
 800aa56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	025b      	lsls	r3, r3, #9
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	431a      	orrs	r2, r3
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	041b      	lsls	r3, r3, #16
 800aa6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aa72:	431a      	orrs	r2, r3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	061b      	lsls	r3, r3, #24
 800aa7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aa80:	4923      	ldr	r1, [pc, #140]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aa82:	4313      	orrs	r3, r2
 800aa84:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800aa86:	4b22      	ldr	r3, [pc, #136]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aa88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8a:	4a21      	ldr	r2, [pc, #132]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aa8c:	f023 0301 	bic.w	r3, r3, #1
 800aa90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aa92:	4b1f      	ldr	r3, [pc, #124]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aa94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa96:	4b21      	ldr	r3, [pc, #132]	; (800ab1c <HAL_RCC_OscConfig+0x778>)
 800aa98:	4013      	ands	r3, r2
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aa9e:	00d2      	lsls	r2, r2, #3
 800aaa0:	491b      	ldr	r1, [pc, #108]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aaa6:	4b1a      	ldr	r3, [pc, #104]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aaa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaaa:	f023 020c 	bic.w	r2, r3, #12
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab2:	4917      	ldr	r1, [pc, #92]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aab4:	4313      	orrs	r3, r2
 800aab6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aab8:	4b15      	ldr	r3, [pc, #84]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aaba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aabc:	f023 0202 	bic.w	r2, r3, #2
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aac4:	4912      	ldr	r1, [pc, #72]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aac6:	4313      	orrs	r3, r2
 800aac8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aaca:	4b11      	ldr	r3, [pc, #68]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aace:	4a10      	ldr	r2, [pc, #64]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aad4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aad6:	4b0e      	ldr	r3, [pc, #56]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aada:	4a0d      	ldr	r2, [pc, #52]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aadc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aae0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800aae2:	4b0b      	ldr	r3, [pc, #44]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae6:	4a0a      	ldr	r2, [pc, #40]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aaec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800aaee:	4b08      	ldr	r3, [pc, #32]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aaf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf2:	4a07      	ldr	r2, [pc, #28]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aaf4:	f043 0301 	orr.w	r3, r3, #1
 800aaf8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aafa:	4b05      	ldr	r3, [pc, #20]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a04      	ldr	r2, [pc, #16]	; (800ab10 <HAL_RCC_OscConfig+0x76c>)
 800ab00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab06:	f7f9 fc79 	bl	80043fc <HAL_GetTick>
 800ab0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab0c:	e011      	b.n	800ab32 <HAL_RCC_OscConfig+0x78e>
 800ab0e:	bf00      	nop
 800ab10:	58024400 	.word	0x58024400
 800ab14:	58024800 	.word	0x58024800
 800ab18:	fffffc0c 	.word	0xfffffc0c
 800ab1c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab20:	f7f9 fc6c 	bl	80043fc <HAL_GetTick>
 800ab24:	4602      	mov	r2, r0
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	d901      	bls.n	800ab32 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e08a      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ab32:	4b47      	ldr	r3, [pc, #284]	; (800ac50 <HAL_RCC_OscConfig+0x8ac>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d0f0      	beq.n	800ab20 <HAL_RCC_OscConfig+0x77c>
 800ab3e:	e082      	b.n	800ac46 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab40:	4b43      	ldr	r3, [pc, #268]	; (800ac50 <HAL_RCC_OscConfig+0x8ac>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	4a42      	ldr	r2, [pc, #264]	; (800ac50 <HAL_RCC_OscConfig+0x8ac>)
 800ab46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab4c:	f7f9 fc56 	bl	80043fc <HAL_GetTick>
 800ab50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab52:	e008      	b.n	800ab66 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab54:	f7f9 fc52 	bl	80043fc <HAL_GetTick>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d901      	bls.n	800ab66 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800ab62:	2303      	movs	r3, #3
 800ab64:	e070      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab66:	4b3a      	ldr	r3, [pc, #232]	; (800ac50 <HAL_RCC_OscConfig+0x8ac>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1f0      	bne.n	800ab54 <HAL_RCC_OscConfig+0x7b0>
 800ab72:	e068      	b.n	800ac46 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ab74:	4b36      	ldr	r3, [pc, #216]	; (800ac50 <HAL_RCC_OscConfig+0x8ac>)
 800ab76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ab7a:	4b35      	ldr	r3, [pc, #212]	; (800ac50 <HAL_RCC_OscConfig+0x8ac>)
 800ab7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d031      	beq.n	800abec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	f003 0203 	and.w	r2, r3, #3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d12a      	bne.n	800abec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	091b      	lsrs	r3, r3, #4
 800ab9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d122      	bne.n	800abec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d11a      	bne.n	800abec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	0a5b      	lsrs	r3, r3, #9
 800abba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d111      	bne.n	800abec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	0c1b      	lsrs	r3, r3, #16
 800abcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d108      	bne.n	800abec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	0e1b      	lsrs	r3, r3, #24
 800abde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800abe8:	429a      	cmp	r2, r3
 800abea:	d001      	beq.n	800abf0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e02b      	b.n	800ac48 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800abf0:	4b17      	ldr	r3, [pc, #92]	; (800ac50 <HAL_RCC_OscConfig+0x8ac>)
 800abf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf4:	08db      	lsrs	r3, r3, #3
 800abf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abfa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d01f      	beq.n	800ac46 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ac06:	4b12      	ldr	r3, [pc, #72]	; (800ac50 <HAL_RCC_OscConfig+0x8ac>)
 800ac08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0a:	4a11      	ldr	r2, [pc, #68]	; (800ac50 <HAL_RCC_OscConfig+0x8ac>)
 800ac0c:	f023 0301 	bic.w	r3, r3, #1
 800ac10:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ac12:	f7f9 fbf3 	bl	80043fc <HAL_GetTick>
 800ac16:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ac18:	bf00      	nop
 800ac1a:	f7f9 fbef 	bl	80043fc <HAL_GetTick>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d0f9      	beq.n	800ac1a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac26:	4b0a      	ldr	r3, [pc, #40]	; (800ac50 <HAL_RCC_OscConfig+0x8ac>)
 800ac28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac2a:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <HAL_RCC_OscConfig+0x8b0>)
 800ac2c:	4013      	ands	r3, r2
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac32:	00d2      	lsls	r2, r2, #3
 800ac34:	4906      	ldr	r1, [pc, #24]	; (800ac50 <HAL_RCC_OscConfig+0x8ac>)
 800ac36:	4313      	orrs	r3, r2
 800ac38:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ac3a:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <HAL_RCC_OscConfig+0x8ac>)
 800ac3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3e:	4a04      	ldr	r2, [pc, #16]	; (800ac50 <HAL_RCC_OscConfig+0x8ac>)
 800ac40:	f043 0301 	orr.w	r3, r3, #1
 800ac44:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3730      	adds	r7, #48	; 0x30
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	58024400 	.word	0x58024400
 800ac54:	ffff0007 	.word	0xffff0007

0800ac58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d101      	bne.n	800ac6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e19c      	b.n	800afa6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ac6c:	4b8a      	ldr	r3, [pc, #552]	; (800ae98 <HAL_RCC_ClockConfig+0x240>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 030f 	and.w	r3, r3, #15
 800ac74:	683a      	ldr	r2, [r7, #0]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d910      	bls.n	800ac9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac7a:	4b87      	ldr	r3, [pc, #540]	; (800ae98 <HAL_RCC_ClockConfig+0x240>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f023 020f 	bic.w	r2, r3, #15
 800ac82:	4985      	ldr	r1, [pc, #532]	; (800ae98 <HAL_RCC_ClockConfig+0x240>)
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac8a:	4b83      	ldr	r3, [pc, #524]	; (800ae98 <HAL_RCC_ClockConfig+0x240>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 030f 	and.w	r3, r3, #15
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d001      	beq.n	800ac9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	e184      	b.n	800afa6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 0304 	and.w	r3, r3, #4
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d010      	beq.n	800acca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	691a      	ldr	r2, [r3, #16]
 800acac:	4b7b      	ldr	r3, [pc, #492]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800acae:	699b      	ldr	r3, [r3, #24]
 800acb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d908      	bls.n	800acca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800acb8:	4b78      	ldr	r3, [pc, #480]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800acba:	699b      	ldr	r3, [r3, #24]
 800acbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	4975      	ldr	r1, [pc, #468]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800acc6:	4313      	orrs	r3, r2
 800acc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f003 0308 	and.w	r3, r3, #8
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d010      	beq.n	800acf8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	695a      	ldr	r2, [r3, #20]
 800acda:	4b70      	ldr	r3, [pc, #448]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800acdc:	69db      	ldr	r3, [r3, #28]
 800acde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d908      	bls.n	800acf8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ace6:	4b6d      	ldr	r3, [pc, #436]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ace8:	69db      	ldr	r3, [r3, #28]
 800acea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	695b      	ldr	r3, [r3, #20]
 800acf2:	496a      	ldr	r1, [pc, #424]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800acf4:	4313      	orrs	r3, r2
 800acf6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0310 	and.w	r3, r3, #16
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d010      	beq.n	800ad26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	699a      	ldr	r2, [r3, #24]
 800ad08:	4b64      	ldr	r3, [pc, #400]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ad0a:	69db      	ldr	r3, [r3, #28]
 800ad0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d908      	bls.n	800ad26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ad14:	4b61      	ldr	r3, [pc, #388]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ad16:	69db      	ldr	r3, [r3, #28]
 800ad18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	495e      	ldr	r1, [pc, #376]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ad22:	4313      	orrs	r3, r2
 800ad24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f003 0320 	and.w	r3, r3, #32
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d010      	beq.n	800ad54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	69da      	ldr	r2, [r3, #28]
 800ad36:	4b59      	ldr	r3, [pc, #356]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d908      	bls.n	800ad54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ad42:	4b56      	ldr	r3, [pc, #344]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ad44:	6a1b      	ldr	r3, [r3, #32]
 800ad46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	69db      	ldr	r3, [r3, #28]
 800ad4e:	4953      	ldr	r1, [pc, #332]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ad50:	4313      	orrs	r3, r2
 800ad52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 0302 	and.w	r3, r3, #2
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d010      	beq.n	800ad82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	68da      	ldr	r2, [r3, #12]
 800ad64:	4b4d      	ldr	r3, [pc, #308]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ad66:	699b      	ldr	r3, [r3, #24]
 800ad68:	f003 030f 	and.w	r3, r3, #15
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d908      	bls.n	800ad82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad70:	4b4a      	ldr	r3, [pc, #296]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	f023 020f 	bic.w	r2, r3, #15
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	4947      	ldr	r1, [pc, #284]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d055      	beq.n	800ae3a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ad8e:	4b43      	ldr	r3, [pc, #268]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	4940      	ldr	r1, [pc, #256]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	2b02      	cmp	r3, #2
 800ada6:	d107      	bne.n	800adb8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ada8:	4b3c      	ldr	r3, [pc, #240]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d121      	bne.n	800adf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	e0f6      	b.n	800afa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	2b03      	cmp	r3, #3
 800adbe:	d107      	bne.n	800add0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800adc0:	4b36      	ldr	r3, [pc, #216]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d115      	bne.n	800adf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800adcc:	2301      	movs	r3, #1
 800adce:	e0ea      	b.n	800afa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	2b01      	cmp	r3, #1
 800add6:	d107      	bne.n	800ade8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800add8:	4b30      	ldr	r3, [pc, #192]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d109      	bne.n	800adf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e0de      	b.n	800afa6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ade8:	4b2c      	ldr	r3, [pc, #176]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 0304 	and.w	r3, r3, #4
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d101      	bne.n	800adf8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800adf4:	2301      	movs	r3, #1
 800adf6:	e0d6      	b.n	800afa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800adf8:	4b28      	ldr	r3, [pc, #160]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	f023 0207 	bic.w	r2, r3, #7
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	4925      	ldr	r1, [pc, #148]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ae06:	4313      	orrs	r3, r2
 800ae08:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae0a:	f7f9 faf7 	bl	80043fc <HAL_GetTick>
 800ae0e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae10:	e00a      	b.n	800ae28 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae12:	f7f9 faf3 	bl	80043fc <HAL_GetTick>
 800ae16:	4602      	mov	r2, r0
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d901      	bls.n	800ae28 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ae24:	2303      	movs	r3, #3
 800ae26:	e0be      	b.n	800afa6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae28:	4b1c      	ldr	r3, [pc, #112]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	00db      	lsls	r3, r3, #3
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d1eb      	bne.n	800ae12 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0302 	and.w	r3, r3, #2
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d010      	beq.n	800ae68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	68da      	ldr	r2, [r3, #12]
 800ae4a:	4b14      	ldr	r3, [pc, #80]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ae4c:	699b      	ldr	r3, [r3, #24]
 800ae4e:	f003 030f 	and.w	r3, r3, #15
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d208      	bcs.n	800ae68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae56:	4b11      	ldr	r3, [pc, #68]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ae58:	699b      	ldr	r3, [r3, #24]
 800ae5a:	f023 020f 	bic.w	r2, r3, #15
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	490e      	ldr	r1, [pc, #56]	; (800ae9c <HAL_RCC_ClockConfig+0x244>)
 800ae64:	4313      	orrs	r3, r2
 800ae66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae68:	4b0b      	ldr	r3, [pc, #44]	; (800ae98 <HAL_RCC_ClockConfig+0x240>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 030f 	and.w	r3, r3, #15
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d214      	bcs.n	800aea0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae76:	4b08      	ldr	r3, [pc, #32]	; (800ae98 <HAL_RCC_ClockConfig+0x240>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f023 020f 	bic.w	r2, r3, #15
 800ae7e:	4906      	ldr	r1, [pc, #24]	; (800ae98 <HAL_RCC_ClockConfig+0x240>)
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae86:	4b04      	ldr	r3, [pc, #16]	; (800ae98 <HAL_RCC_ClockConfig+0x240>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f003 030f 	and.w	r3, r3, #15
 800ae8e:	683a      	ldr	r2, [r7, #0]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d005      	beq.n	800aea0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	e086      	b.n	800afa6 <HAL_RCC_ClockConfig+0x34e>
 800ae98:	52002000 	.word	0x52002000
 800ae9c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 0304 	and.w	r3, r3, #4
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d010      	beq.n	800aece <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	691a      	ldr	r2, [r3, #16]
 800aeb0:	4b3f      	ldr	r3, [pc, #252]	; (800afb0 <HAL_RCC_ClockConfig+0x358>)
 800aeb2:	699b      	ldr	r3, [r3, #24]
 800aeb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d208      	bcs.n	800aece <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aebc:	4b3c      	ldr	r3, [pc, #240]	; (800afb0 <HAL_RCC_ClockConfig+0x358>)
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	4939      	ldr	r1, [pc, #228]	; (800afb0 <HAL_RCC_ClockConfig+0x358>)
 800aeca:	4313      	orrs	r3, r2
 800aecc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 0308 	and.w	r3, r3, #8
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d010      	beq.n	800aefc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	695a      	ldr	r2, [r3, #20]
 800aede:	4b34      	ldr	r3, [pc, #208]	; (800afb0 <HAL_RCC_ClockConfig+0x358>)
 800aee0:	69db      	ldr	r3, [r3, #28]
 800aee2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d208      	bcs.n	800aefc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aeea:	4b31      	ldr	r3, [pc, #196]	; (800afb0 <HAL_RCC_ClockConfig+0x358>)
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	492e      	ldr	r1, [pc, #184]	; (800afb0 <HAL_RCC_ClockConfig+0x358>)
 800aef8:	4313      	orrs	r3, r2
 800aefa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0310 	and.w	r3, r3, #16
 800af04:	2b00      	cmp	r3, #0
 800af06:	d010      	beq.n	800af2a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	699a      	ldr	r2, [r3, #24]
 800af0c:	4b28      	ldr	r3, [pc, #160]	; (800afb0 <HAL_RCC_ClockConfig+0x358>)
 800af0e:	69db      	ldr	r3, [r3, #28]
 800af10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af14:	429a      	cmp	r2, r3
 800af16:	d208      	bcs.n	800af2a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af18:	4b25      	ldr	r3, [pc, #148]	; (800afb0 <HAL_RCC_ClockConfig+0x358>)
 800af1a:	69db      	ldr	r3, [r3, #28]
 800af1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	4922      	ldr	r1, [pc, #136]	; (800afb0 <HAL_RCC_ClockConfig+0x358>)
 800af26:	4313      	orrs	r3, r2
 800af28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0320 	and.w	r3, r3, #32
 800af32:	2b00      	cmp	r3, #0
 800af34:	d010      	beq.n	800af58 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	69da      	ldr	r2, [r3, #28]
 800af3a:	4b1d      	ldr	r3, [pc, #116]	; (800afb0 <HAL_RCC_ClockConfig+0x358>)
 800af3c:	6a1b      	ldr	r3, [r3, #32]
 800af3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af42:	429a      	cmp	r2, r3
 800af44:	d208      	bcs.n	800af58 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800af46:	4b1a      	ldr	r3, [pc, #104]	; (800afb0 <HAL_RCC_ClockConfig+0x358>)
 800af48:	6a1b      	ldr	r3, [r3, #32]
 800af4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	69db      	ldr	r3, [r3, #28]
 800af52:	4917      	ldr	r1, [pc, #92]	; (800afb0 <HAL_RCC_ClockConfig+0x358>)
 800af54:	4313      	orrs	r3, r2
 800af56:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800af58:	f000 f834 	bl	800afc4 <HAL_RCC_GetSysClockFreq>
 800af5c:	4602      	mov	r2, r0
 800af5e:	4b14      	ldr	r3, [pc, #80]	; (800afb0 <HAL_RCC_ClockConfig+0x358>)
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	0a1b      	lsrs	r3, r3, #8
 800af64:	f003 030f 	and.w	r3, r3, #15
 800af68:	4912      	ldr	r1, [pc, #72]	; (800afb4 <HAL_RCC_ClockConfig+0x35c>)
 800af6a:	5ccb      	ldrb	r3, [r1, r3]
 800af6c:	f003 031f 	and.w	r3, r3, #31
 800af70:	fa22 f303 	lsr.w	r3, r2, r3
 800af74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af76:	4b0e      	ldr	r3, [pc, #56]	; (800afb0 <HAL_RCC_ClockConfig+0x358>)
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	f003 030f 	and.w	r3, r3, #15
 800af7e:	4a0d      	ldr	r2, [pc, #52]	; (800afb4 <HAL_RCC_ClockConfig+0x35c>)
 800af80:	5cd3      	ldrb	r3, [r2, r3]
 800af82:	f003 031f 	and.w	r3, r3, #31
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	fa22 f303 	lsr.w	r3, r2, r3
 800af8c:	4a0a      	ldr	r2, [pc, #40]	; (800afb8 <HAL_RCC_ClockConfig+0x360>)
 800af8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800af90:	4a0a      	ldr	r2, [pc, #40]	; (800afbc <HAL_RCC_ClockConfig+0x364>)
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800af96:	4b0a      	ldr	r3, [pc, #40]	; (800afc0 <HAL_RCC_ClockConfig+0x368>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7f8 f816 	bl	8002fcc <HAL_InitTick>
 800afa0:	4603      	mov	r3, r0
 800afa2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800afa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3718      	adds	r7, #24
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	58024400 	.word	0x58024400
 800afb4:	08017b68 	.word	0x08017b68
 800afb8:	2400008c 	.word	0x2400008c
 800afbc:	24000088 	.word	0x24000088
 800afc0:	24000090 	.word	0x24000090

0800afc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b089      	sub	sp, #36	; 0x24
 800afc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800afca:	4bb3      	ldr	r3, [pc, #716]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afd2:	2b18      	cmp	r3, #24
 800afd4:	f200 8155 	bhi.w	800b282 <HAL_RCC_GetSysClockFreq+0x2be>
 800afd8:	a201      	add	r2, pc, #4	; (adr r2, 800afe0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800afda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afde:	bf00      	nop
 800afe0:	0800b045 	.word	0x0800b045
 800afe4:	0800b283 	.word	0x0800b283
 800afe8:	0800b283 	.word	0x0800b283
 800afec:	0800b283 	.word	0x0800b283
 800aff0:	0800b283 	.word	0x0800b283
 800aff4:	0800b283 	.word	0x0800b283
 800aff8:	0800b283 	.word	0x0800b283
 800affc:	0800b283 	.word	0x0800b283
 800b000:	0800b06b 	.word	0x0800b06b
 800b004:	0800b283 	.word	0x0800b283
 800b008:	0800b283 	.word	0x0800b283
 800b00c:	0800b283 	.word	0x0800b283
 800b010:	0800b283 	.word	0x0800b283
 800b014:	0800b283 	.word	0x0800b283
 800b018:	0800b283 	.word	0x0800b283
 800b01c:	0800b283 	.word	0x0800b283
 800b020:	0800b071 	.word	0x0800b071
 800b024:	0800b283 	.word	0x0800b283
 800b028:	0800b283 	.word	0x0800b283
 800b02c:	0800b283 	.word	0x0800b283
 800b030:	0800b283 	.word	0x0800b283
 800b034:	0800b283 	.word	0x0800b283
 800b038:	0800b283 	.word	0x0800b283
 800b03c:	0800b283 	.word	0x0800b283
 800b040:	0800b077 	.word	0x0800b077
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b044:	4b94      	ldr	r3, [pc, #592]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f003 0320 	and.w	r3, r3, #32
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d009      	beq.n	800b064 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b050:	4b91      	ldr	r3, [pc, #580]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	08db      	lsrs	r3, r3, #3
 800b056:	f003 0303 	and.w	r3, r3, #3
 800b05a:	4a90      	ldr	r2, [pc, #576]	; (800b29c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b05c:	fa22 f303 	lsr.w	r3, r2, r3
 800b060:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b062:	e111      	b.n	800b288 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b064:	4b8d      	ldr	r3, [pc, #564]	; (800b29c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b066:	61bb      	str	r3, [r7, #24]
      break;
 800b068:	e10e      	b.n	800b288 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b06a:	4b8d      	ldr	r3, [pc, #564]	; (800b2a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b06c:	61bb      	str	r3, [r7, #24]
      break;
 800b06e:	e10b      	b.n	800b288 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b070:	4b8c      	ldr	r3, [pc, #560]	; (800b2a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b072:	61bb      	str	r3, [r7, #24]
      break;
 800b074:	e108      	b.n	800b288 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b076:	4b88      	ldr	r3, [pc, #544]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07a:	f003 0303 	and.w	r3, r3, #3
 800b07e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b080:	4b85      	ldr	r3, [pc, #532]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b084:	091b      	lsrs	r3, r3, #4
 800b086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b08a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b08c:	4b82      	ldr	r3, [pc, #520]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b090:	f003 0301 	and.w	r3, r3, #1
 800b094:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b096:	4b80      	ldr	r3, [pc, #512]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b09a:	08db      	lsrs	r3, r3, #3
 800b09c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	fb02 f303 	mul.w	r3, r2, r3
 800b0a6:	ee07 3a90 	vmov	s15, r3
 800b0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f000 80e1 	beq.w	800b27c <HAL_RCC_GetSysClockFreq+0x2b8>
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	f000 8083 	beq.w	800b1c8 <HAL_RCC_GetSysClockFreq+0x204>
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	2b02      	cmp	r3, #2
 800b0c6:	f200 80a1 	bhi.w	800b20c <HAL_RCC_GetSysClockFreq+0x248>
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d003      	beq.n	800b0d8 <HAL_RCC_GetSysClockFreq+0x114>
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d056      	beq.n	800b184 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b0d6:	e099      	b.n	800b20c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0d8:	4b6f      	ldr	r3, [pc, #444]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f003 0320 	and.w	r3, r3, #32
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d02d      	beq.n	800b140 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0e4:	4b6c      	ldr	r3, [pc, #432]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	08db      	lsrs	r3, r3, #3
 800b0ea:	f003 0303 	and.w	r3, r3, #3
 800b0ee:	4a6b      	ldr	r2, [pc, #428]	; (800b29c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b0f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b0f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	ee07 3a90 	vmov	s15, r3
 800b0fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	ee07 3a90 	vmov	s15, r3
 800b106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b10e:	4b62      	ldr	r3, [pc, #392]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b116:	ee07 3a90 	vmov	s15, r3
 800b11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b11e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b122:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b2a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b12e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b13e:	e087      	b.n	800b250 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	ee07 3a90 	vmov	s15, r3
 800b146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b14a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b2ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800b14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b152:	4b51      	ldr	r3, [pc, #324]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b15a:	ee07 3a90 	vmov	s15, r3
 800b15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b162:	ed97 6a02 	vldr	s12, [r7, #8]
 800b166:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b2a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b17e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b182:	e065      	b.n	800b250 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	ee07 3a90 	vmov	s15, r3
 800b18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b18e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b2b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b196:	4b40      	ldr	r3, [pc, #256]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b19e:	ee07 3a90 	vmov	s15, r3
 800b1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b2a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b1c6:	e043      	b.n	800b250 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	ee07 3a90 	vmov	s15, r3
 800b1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b2b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b1d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1da:	4b2f      	ldr	r3, [pc, #188]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1e2:	ee07 3a90 	vmov	s15, r3
 800b1e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b2a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b1f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b202:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b206:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b20a:	e021      	b.n	800b250 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	ee07 3a90 	vmov	s15, r3
 800b212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b216:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b2b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b21a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b21e:	4b1e      	ldr	r3, [pc, #120]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b226:	ee07 3a90 	vmov	s15, r3
 800b22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b22e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b232:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b2a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b23a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b23e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b24e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b250:	4b11      	ldr	r3, [pc, #68]	; (800b298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b254:	0a5b      	lsrs	r3, r3, #9
 800b256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b25a:	3301      	adds	r3, #1
 800b25c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	ee07 3a90 	vmov	s15, r3
 800b264:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b268:	edd7 6a07 	vldr	s13, [r7, #28]
 800b26c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b274:	ee17 3a90 	vmov	r3, s15
 800b278:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b27a:	e005      	b.n	800b288 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b27c:	2300      	movs	r3, #0
 800b27e:	61bb      	str	r3, [r7, #24]
      break;
 800b280:	e002      	b.n	800b288 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b282:	4b07      	ldr	r3, [pc, #28]	; (800b2a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b284:	61bb      	str	r3, [r7, #24]
      break;
 800b286:	bf00      	nop
  }

  return sysclockfreq;
 800b288:	69bb      	ldr	r3, [r7, #24]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3724      	adds	r7, #36	; 0x24
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop
 800b298:	58024400 	.word	0x58024400
 800b29c:	03d09000 	.word	0x03d09000
 800b2a0:	003d0900 	.word	0x003d0900
 800b2a4:	017d7840 	.word	0x017d7840
 800b2a8:	46000000 	.word	0x46000000
 800b2ac:	4c742400 	.word	0x4c742400
 800b2b0:	4a742400 	.word	0x4a742400
 800b2b4:	4bbebc20 	.word	0x4bbebc20

0800b2b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b2be:	f7ff fe81 	bl	800afc4 <HAL_RCC_GetSysClockFreq>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	4b10      	ldr	r3, [pc, #64]	; (800b308 <HAL_RCC_GetHCLKFreq+0x50>)
 800b2c6:	699b      	ldr	r3, [r3, #24]
 800b2c8:	0a1b      	lsrs	r3, r3, #8
 800b2ca:	f003 030f 	and.w	r3, r3, #15
 800b2ce:	490f      	ldr	r1, [pc, #60]	; (800b30c <HAL_RCC_GetHCLKFreq+0x54>)
 800b2d0:	5ccb      	ldrb	r3, [r1, r3]
 800b2d2:	f003 031f 	and.w	r3, r3, #31
 800b2d6:	fa22 f303 	lsr.w	r3, r2, r3
 800b2da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b2dc:	4b0a      	ldr	r3, [pc, #40]	; (800b308 <HAL_RCC_GetHCLKFreq+0x50>)
 800b2de:	699b      	ldr	r3, [r3, #24]
 800b2e0:	f003 030f 	and.w	r3, r3, #15
 800b2e4:	4a09      	ldr	r2, [pc, #36]	; (800b30c <HAL_RCC_GetHCLKFreq+0x54>)
 800b2e6:	5cd3      	ldrb	r3, [r2, r3]
 800b2e8:	f003 031f 	and.w	r3, r3, #31
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b2f2:	4a07      	ldr	r2, [pc, #28]	; (800b310 <HAL_RCC_GetHCLKFreq+0x58>)
 800b2f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b2f6:	4a07      	ldr	r2, [pc, #28]	; (800b314 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b2fc:	4b04      	ldr	r3, [pc, #16]	; (800b310 <HAL_RCC_GetHCLKFreq+0x58>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	58024400 	.word	0x58024400
 800b30c:	08017b68 	.word	0x08017b68
 800b310:	2400008c 	.word	0x2400008c
 800b314:	24000088 	.word	0x24000088

0800b318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b31c:	f7ff ffcc 	bl	800b2b8 <HAL_RCC_GetHCLKFreq>
 800b320:	4602      	mov	r2, r0
 800b322:	4b06      	ldr	r3, [pc, #24]	; (800b33c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b324:	69db      	ldr	r3, [r3, #28]
 800b326:	091b      	lsrs	r3, r3, #4
 800b328:	f003 0307 	and.w	r3, r3, #7
 800b32c:	4904      	ldr	r1, [pc, #16]	; (800b340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b32e:	5ccb      	ldrb	r3, [r1, r3]
 800b330:	f003 031f 	and.w	r3, r3, #31
 800b334:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b338:	4618      	mov	r0, r3
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	58024400 	.word	0x58024400
 800b340:	08017b68 	.word	0x08017b68

0800b344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b348:	f7ff ffb6 	bl	800b2b8 <HAL_RCC_GetHCLKFreq>
 800b34c:	4602      	mov	r2, r0
 800b34e:	4b06      	ldr	r3, [pc, #24]	; (800b368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b350:	69db      	ldr	r3, [r3, #28]
 800b352:	0a1b      	lsrs	r3, r3, #8
 800b354:	f003 0307 	and.w	r3, r3, #7
 800b358:	4904      	ldr	r1, [pc, #16]	; (800b36c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b35a:	5ccb      	ldrb	r3, [r1, r3]
 800b35c:	f003 031f 	and.w	r3, r3, #31
 800b360:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b364:	4618      	mov	r0, r3
 800b366:	bd80      	pop	{r7, pc}
 800b368:	58024400 	.word	0x58024400
 800b36c:	08017b68 	.word	0x08017b68

0800b370 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	223f      	movs	r2, #63	; 0x3f
 800b37e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b380:	4b1a      	ldr	r3, [pc, #104]	; (800b3ec <HAL_RCC_GetClockConfig+0x7c>)
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	f003 0207 	and.w	r2, r3, #7
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b38c:	4b17      	ldr	r3, [pc, #92]	; (800b3ec <HAL_RCC_GetClockConfig+0x7c>)
 800b38e:	699b      	ldr	r3, [r3, #24]
 800b390:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b398:	4b14      	ldr	r3, [pc, #80]	; (800b3ec <HAL_RCC_GetClockConfig+0x7c>)
 800b39a:	699b      	ldr	r3, [r3, #24]
 800b39c:	f003 020f 	and.w	r2, r3, #15
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b3a4:	4b11      	ldr	r3, [pc, #68]	; (800b3ec <HAL_RCC_GetClockConfig+0x7c>)
 800b3a6:	699b      	ldr	r3, [r3, #24]
 800b3a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b3b0:	4b0e      	ldr	r3, [pc, #56]	; (800b3ec <HAL_RCC_GetClockConfig+0x7c>)
 800b3b2:	69db      	ldr	r3, [r3, #28]
 800b3b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b3bc:	4b0b      	ldr	r3, [pc, #44]	; (800b3ec <HAL_RCC_GetClockConfig+0x7c>)
 800b3be:	69db      	ldr	r3, [r3, #28]
 800b3c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b3c8:	4b08      	ldr	r3, [pc, #32]	; (800b3ec <HAL_RCC_GetClockConfig+0x7c>)
 800b3ca:	6a1b      	ldr	r3, [r3, #32]
 800b3cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b3d4:	4b06      	ldr	r3, [pc, #24]	; (800b3f0 <HAL_RCC_GetClockConfig+0x80>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f003 020f 	and.w	r2, r3, #15
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	601a      	str	r2, [r3, #0]
}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	58024400 	.word	0x58024400
 800b3f0:	52002000 	.word	0x52002000

0800b3f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b3f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3f8:	b0ca      	sub	sp, #296	; 0x128
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b400:	2300      	movs	r3, #0
 800b402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b406:	2300      	movs	r3, #0
 800b408:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b414:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b418:	2500      	movs	r5, #0
 800b41a:	ea54 0305 	orrs.w	r3, r4, r5
 800b41e:	d049      	beq.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b426:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b42a:	d02f      	beq.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b42c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b430:	d828      	bhi.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b432:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b436:	d01a      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b438:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b43c:	d822      	bhi.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d003      	beq.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b446:	d007      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b448:	e01c      	b.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b44a:	4bb8      	ldr	r3, [pc, #736]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44e:	4ab7      	ldr	r2, [pc, #732]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b454:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b456:	e01a      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b45c:	3308      	adds	r3, #8
 800b45e:	2102      	movs	r1, #2
 800b460:	4618      	mov	r0, r3
 800b462:	f002 fb61 	bl	800db28 <RCCEx_PLL2_Config>
 800b466:	4603      	mov	r3, r0
 800b468:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b46c:	e00f      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b472:	3328      	adds	r3, #40	; 0x28
 800b474:	2102      	movs	r1, #2
 800b476:	4618      	mov	r0, r3
 800b478:	f002 fc08 	bl	800dc8c <RCCEx_PLL3_Config>
 800b47c:	4603      	mov	r3, r0
 800b47e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b482:	e004      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b48a:	e000      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b48c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b48e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b492:	2b00      	cmp	r3, #0
 800b494:	d10a      	bne.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b496:	4ba5      	ldr	r3, [pc, #660]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b49a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b49e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4a4:	4aa1      	ldr	r2, [pc, #644]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4a6:	430b      	orrs	r3, r1
 800b4a8:	6513      	str	r3, [r2, #80]	; 0x50
 800b4aa:	e003      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b4b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4bc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b4c0:	f04f 0900 	mov.w	r9, #0
 800b4c4:	ea58 0309 	orrs.w	r3, r8, r9
 800b4c8:	d047      	beq.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4d0:	2b04      	cmp	r3, #4
 800b4d2:	d82a      	bhi.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b4d4:	a201      	add	r2, pc, #4	; (adr r2, 800b4dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4da:	bf00      	nop
 800b4dc:	0800b4f1 	.word	0x0800b4f1
 800b4e0:	0800b4ff 	.word	0x0800b4ff
 800b4e4:	0800b515 	.word	0x0800b515
 800b4e8:	0800b533 	.word	0x0800b533
 800b4ec:	0800b533 	.word	0x0800b533
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4f0:	4b8e      	ldr	r3, [pc, #568]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f4:	4a8d      	ldr	r2, [pc, #564]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b4f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b4fc:	e01a      	b.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b502:	3308      	adds	r3, #8
 800b504:	2100      	movs	r1, #0
 800b506:	4618      	mov	r0, r3
 800b508:	f002 fb0e 	bl	800db28 <RCCEx_PLL2_Config>
 800b50c:	4603      	mov	r3, r0
 800b50e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b512:	e00f      	b.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b514:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b518:	3328      	adds	r3, #40	; 0x28
 800b51a:	2100      	movs	r1, #0
 800b51c:	4618      	mov	r0, r3
 800b51e:	f002 fbb5 	bl	800dc8c <RCCEx_PLL3_Config>
 800b522:	4603      	mov	r3, r0
 800b524:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b528:	e004      	b.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b52a:	2301      	movs	r3, #1
 800b52c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b530:	e000      	b.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b532:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b534:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d10a      	bne.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b53c:	4b7b      	ldr	r3, [pc, #492]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b53e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b540:	f023 0107 	bic.w	r1, r3, #7
 800b544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b54a:	4a78      	ldr	r2, [pc, #480]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b54c:	430b      	orrs	r3, r1
 800b54e:	6513      	str	r3, [r2, #80]	; 0x50
 800b550:	e003      	b.n	800b55a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b552:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b556:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b55a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b566:	f04f 0b00 	mov.w	fp, #0
 800b56a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b56e:	d04c      	beq.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b57a:	d030      	beq.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b57c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b580:	d829      	bhi.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b582:	2bc0      	cmp	r3, #192	; 0xc0
 800b584:	d02d      	beq.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b586:	2bc0      	cmp	r3, #192	; 0xc0
 800b588:	d825      	bhi.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b58a:	2b80      	cmp	r3, #128	; 0x80
 800b58c:	d018      	beq.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b58e:	2b80      	cmp	r3, #128	; 0x80
 800b590:	d821      	bhi.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b592:	2b00      	cmp	r3, #0
 800b594:	d002      	beq.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b596:	2b40      	cmp	r3, #64	; 0x40
 800b598:	d007      	beq.n	800b5aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b59a:	e01c      	b.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b59c:	4b63      	ldr	r3, [pc, #396]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a0:	4a62      	ldr	r2, [pc, #392]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b5a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b5a8:	e01c      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ae:	3308      	adds	r3, #8
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f002 fab8 	bl	800db28 <RCCEx_PLL2_Config>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b5be:	e011      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b5c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5c4:	3328      	adds	r3, #40	; 0x28
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f002 fb5f 	bl	800dc8c <RCCEx_PLL3_Config>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b5d4:	e006      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5dc:	e002      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b5de:	bf00      	nop
 800b5e0:	e000      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b5e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d10a      	bne.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b5ec:	4b4f      	ldr	r3, [pc, #316]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b5ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5f0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b5f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5fa:	4a4c      	ldr	r2, [pc, #304]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b5fc:	430b      	orrs	r3, r1
 800b5fe:	6513      	str	r3, [r2, #80]	; 0x50
 800b600:	e003      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b606:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b60a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b612:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b616:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b61a:	2300      	movs	r3, #0
 800b61c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b620:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b624:	460b      	mov	r3, r1
 800b626:	4313      	orrs	r3, r2
 800b628:	d053      	beq.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b62a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b62e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b632:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b636:	d035      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b638:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b63c:	d82e      	bhi.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b63e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b642:	d031      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b644:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b648:	d828      	bhi.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b64a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b64e:	d01a      	beq.n	800b686 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b654:	d822      	bhi.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b656:	2b00      	cmp	r3, #0
 800b658:	d003      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b65a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b65e:	d007      	beq.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b660:	e01c      	b.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b662:	4b32      	ldr	r3, [pc, #200]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b666:	4a31      	ldr	r2, [pc, #196]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b66c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b66e:	e01c      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b674:	3308      	adds	r3, #8
 800b676:	2100      	movs	r1, #0
 800b678:	4618      	mov	r0, r3
 800b67a:	f002 fa55 	bl	800db28 <RCCEx_PLL2_Config>
 800b67e:	4603      	mov	r3, r0
 800b680:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b684:	e011      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b68a:	3328      	adds	r3, #40	; 0x28
 800b68c:	2100      	movs	r1, #0
 800b68e:	4618      	mov	r0, r3
 800b690:	f002 fafc 	bl	800dc8c <RCCEx_PLL3_Config>
 800b694:	4603      	mov	r3, r0
 800b696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b69a:	e006      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6a2:	e002      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b6a4:	bf00      	nop
 800b6a6:	e000      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b6a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10b      	bne.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b6b2:	4b1e      	ldr	r3, [pc, #120]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6b6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b6c2:	4a1a      	ldr	r2, [pc, #104]	; (800b72c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b6c4:	430b      	orrs	r3, r1
 800b6c6:	6593      	str	r3, [r2, #88]	; 0x58
 800b6c8:	e003      	b.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b6de:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b6e8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	d056      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b6fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b6fe:	d038      	beq.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b700:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b704:	d831      	bhi.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b706:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b70a:	d034      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b70c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b710:	d82b      	bhi.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b712:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b716:	d01d      	beq.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b718:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b71c:	d825      	bhi.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d006      	beq.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b722:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b726:	d00a      	beq.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b728:	e01f      	b.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b72a:	bf00      	nop
 800b72c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b730:	4ba2      	ldr	r3, [pc, #648]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b734:	4aa1      	ldr	r2, [pc, #644]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b73a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b73c:	e01c      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b73e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b742:	3308      	adds	r3, #8
 800b744:	2100      	movs	r1, #0
 800b746:	4618      	mov	r0, r3
 800b748:	f002 f9ee 	bl	800db28 <RCCEx_PLL2_Config>
 800b74c:	4603      	mov	r3, r0
 800b74e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b752:	e011      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b758:	3328      	adds	r3, #40	; 0x28
 800b75a:	2100      	movs	r1, #0
 800b75c:	4618      	mov	r0, r3
 800b75e:	f002 fa95 	bl	800dc8c <RCCEx_PLL3_Config>
 800b762:	4603      	mov	r3, r0
 800b764:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b768:	e006      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b76a:	2301      	movs	r3, #1
 800b76c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b770:	e002      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b772:	bf00      	nop
 800b774:	e000      	b.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b776:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10b      	bne.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b780:	4b8e      	ldr	r3, [pc, #568]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b784:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b78c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b790:	4a8a      	ldr	r2, [pc, #552]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b792:	430b      	orrs	r3, r1
 800b794:	6593      	str	r3, [r2, #88]	; 0x58
 800b796:	e003      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b798:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b79c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b7a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b7ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b7b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	d03a      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7c6:	2b30      	cmp	r3, #48	; 0x30
 800b7c8:	d01f      	beq.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b7ca:	2b30      	cmp	r3, #48	; 0x30
 800b7cc:	d819      	bhi.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b7ce:	2b20      	cmp	r3, #32
 800b7d0:	d00c      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b7d2:	2b20      	cmp	r3, #32
 800b7d4:	d815      	bhi.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d019      	beq.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b7da:	2b10      	cmp	r3, #16
 800b7dc:	d111      	bne.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7de:	4b77      	ldr	r3, [pc, #476]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e2:	4a76      	ldr	r2, [pc, #472]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b7e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b7ea:	e011      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f0:	3308      	adds	r3, #8
 800b7f2:	2102      	movs	r1, #2
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f002 f997 	bl	800db28 <RCCEx_PLL2_Config>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b800:	e006      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b808:	e002      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b80a:	bf00      	nop
 800b80c:	e000      	b.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b80e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b810:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10a      	bne.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b818:	4b68      	ldr	r3, [pc, #416]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b81a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b81c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b826:	4a65      	ldr	r2, [pc, #404]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b828:	430b      	orrs	r3, r1
 800b82a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b82c:	e003      	b.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b82e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b832:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b842:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b846:	2300      	movs	r3, #0
 800b848:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b84c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b850:	460b      	mov	r3, r1
 800b852:	4313      	orrs	r3, r2
 800b854:	d051      	beq.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b85a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b85c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b860:	d035      	beq.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b862:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b866:	d82e      	bhi.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b868:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b86c:	d031      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b86e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b872:	d828      	bhi.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b878:	d01a      	beq.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b87a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b87e:	d822      	bhi.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b880:	2b00      	cmp	r3, #0
 800b882:	d003      	beq.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b888:	d007      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b88a:	e01c      	b.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b88c:	4b4b      	ldr	r3, [pc, #300]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b890:	4a4a      	ldr	r2, [pc, #296]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b896:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b898:	e01c      	b.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b89a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b89e:	3308      	adds	r3, #8
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f002 f940 	bl	800db28 <RCCEx_PLL2_Config>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b8ae:	e011      	b.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8b4:	3328      	adds	r3, #40	; 0x28
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f002 f9e7 	bl	800dc8c <RCCEx_PLL3_Config>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b8c4:	e006      	b.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8cc:	e002      	b.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b8ce:	bf00      	nop
 800b8d0:	e000      	b.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b8d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d10a      	bne.n	800b8f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b8dc:	4b37      	ldr	r3, [pc, #220]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b8de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8e0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b8e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8ea:	4a34      	ldr	r2, [pc, #208]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b8ec:	430b      	orrs	r3, r1
 800b8ee:	6513      	str	r3, [r2, #80]	; 0x50
 800b8f0:	e003      	b.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b902:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b906:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b90a:	2300      	movs	r3, #0
 800b90c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b910:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b914:	460b      	mov	r3, r1
 800b916:	4313      	orrs	r3, r2
 800b918:	d056      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b91e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b924:	d033      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b926:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b92a:	d82c      	bhi.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b92c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b930:	d02f      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b932:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b936:	d826      	bhi.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b938:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b93c:	d02b      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b93e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b942:	d820      	bhi.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b948:	d012      	beq.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b94a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b94e:	d81a      	bhi.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b950:	2b00      	cmp	r3, #0
 800b952:	d022      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b958:	d115      	bne.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b95a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b95e:	3308      	adds	r3, #8
 800b960:	2101      	movs	r1, #1
 800b962:	4618      	mov	r0, r3
 800b964:	f002 f8e0 	bl	800db28 <RCCEx_PLL2_Config>
 800b968:	4603      	mov	r3, r0
 800b96a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b96e:	e015      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b974:	3328      	adds	r3, #40	; 0x28
 800b976:	2101      	movs	r1, #1
 800b978:	4618      	mov	r0, r3
 800b97a:	f002 f987 	bl	800dc8c <RCCEx_PLL3_Config>
 800b97e:	4603      	mov	r3, r0
 800b980:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b984:	e00a      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b98c:	e006      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b98e:	bf00      	nop
 800b990:	e004      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b992:	bf00      	nop
 800b994:	e002      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b996:	bf00      	nop
 800b998:	e000      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b99a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b99c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10d      	bne.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b9a4:	4b05      	ldr	r3, [pc, #20]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9a8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b9ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9b2:	4a02      	ldr	r2, [pc, #8]	; (800b9bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b9b4:	430b      	orrs	r3, r1
 800b9b6:	6513      	str	r3, [r2, #80]	; 0x50
 800b9b8:	e006      	b.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b9ba:	bf00      	nop
 800b9bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b9d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b9d8:	2300      	movs	r3, #0
 800b9da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b9de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	d055      	beq.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b9e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b9f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9f4:	d033      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b9f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b9fa:	d82c      	bhi.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b9fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba00:	d02f      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ba02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba06:	d826      	bhi.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ba08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba0c:	d02b      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ba0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba12:	d820      	bhi.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ba14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba18:	d012      	beq.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ba1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba1e:	d81a      	bhi.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d022      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ba24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba28:	d115      	bne.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba2e:	3308      	adds	r3, #8
 800ba30:	2101      	movs	r1, #1
 800ba32:	4618      	mov	r0, r3
 800ba34:	f002 f878 	bl	800db28 <RCCEx_PLL2_Config>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ba3e:	e015      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba44:	3328      	adds	r3, #40	; 0x28
 800ba46:	2101      	movs	r1, #1
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f002 f91f 	bl	800dc8c <RCCEx_PLL3_Config>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ba54:	e00a      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba5c:	e006      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ba5e:	bf00      	nop
 800ba60:	e004      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ba62:	bf00      	nop
 800ba64:	e002      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ba66:	bf00      	nop
 800ba68:	e000      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ba6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d10b      	bne.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ba74:	4ba3      	ldr	r3, [pc, #652]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba78:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ba7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba84:	4a9f      	ldr	r2, [pc, #636]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ba86:	430b      	orrs	r3, r1
 800ba88:	6593      	str	r3, [r2, #88]	; 0x58
 800ba8a:	e003      	b.n	800ba94 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ba94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800baa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800baa4:	2300      	movs	r3, #0
 800baa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800baaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800baae:	460b      	mov	r3, r1
 800bab0:	4313      	orrs	r3, r2
 800bab2:	d037      	beq.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800babe:	d00e      	beq.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800bac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bac4:	d816      	bhi.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d018      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800baca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bace:	d111      	bne.n	800baf4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bad0:	4b8c      	ldr	r3, [pc, #560]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad4:	4a8b      	ldr	r2, [pc, #556]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800badc:	e00f      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae2:	3308      	adds	r3, #8
 800bae4:	2101      	movs	r1, #1
 800bae6:	4618      	mov	r0, r3
 800bae8:	f002 f81e 	bl	800db28 <RCCEx_PLL2_Config>
 800baec:	4603      	mov	r3, r0
 800baee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800baf2:	e004      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bafa:	e000      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800bafc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bafe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d10a      	bne.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bb06:	4b7f      	ldr	r3, [pc, #508]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb0a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bb0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb14:	4a7b      	ldr	r2, [pc, #492]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb16:	430b      	orrs	r3, r1
 800bb18:	6513      	str	r3, [r2, #80]	; 0x50
 800bb1a:	e003      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bb24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bb30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb34:	2300      	movs	r3, #0
 800bb36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bb3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4313      	orrs	r3, r2
 800bb42:	d039      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bb44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb4a:	2b03      	cmp	r3, #3
 800bb4c:	d81c      	bhi.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800bb4e:	a201      	add	r2, pc, #4	; (adr r2, 800bb54 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800bb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb54:	0800bb91 	.word	0x0800bb91
 800bb58:	0800bb65 	.word	0x0800bb65
 800bb5c:	0800bb73 	.word	0x0800bb73
 800bb60:	0800bb91 	.word	0x0800bb91
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb64:	4b67      	ldr	r3, [pc, #412]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb68:	4a66      	ldr	r2, [pc, #408]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bb70:	e00f      	b.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb76:	3308      	adds	r3, #8
 800bb78:	2102      	movs	r1, #2
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f001 ffd4 	bl	800db28 <RCCEx_PLL2_Config>
 800bb80:	4603      	mov	r3, r0
 800bb82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bb86:	e004      	b.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb8e:	e000      	b.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800bb90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d10a      	bne.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bb9a:	4b5a      	ldr	r3, [pc, #360]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bb9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb9e:	f023 0103 	bic.w	r1, r3, #3
 800bba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bba8:	4a56      	ldr	r2, [pc, #344]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bbaa:	430b      	orrs	r3, r1
 800bbac:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bbae:	e003      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bbb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bbc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bbce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	f000 809f 	beq.w	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bbda:	4b4b      	ldr	r3, [pc, #300]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a4a      	ldr	r2, [pc, #296]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bbe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbe4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bbe6:	f7f8 fc09 	bl	80043fc <HAL_GetTick>
 800bbea:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bbee:	e00b      	b.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bbf0:	f7f8 fc04 	bl	80043fc <HAL_GetTick>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	2b64      	cmp	r3, #100	; 0x64
 800bbfe:	d903      	bls.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800bc00:	2303      	movs	r3, #3
 800bc02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc06:	e005      	b.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bc08:	4b3f      	ldr	r3, [pc, #252]	; (800bd08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d0ed      	beq.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800bc14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d179      	bne.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bc1c:	4b39      	ldr	r3, [pc, #228]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc28:	4053      	eors	r3, r2
 800bc2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d015      	beq.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bc32:	4b34      	ldr	r3, [pc, #208]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bc3e:	4b31      	ldr	r3, [pc, #196]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc42:	4a30      	ldr	r2, [pc, #192]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc48:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc4a:	4b2e      	ldr	r3, [pc, #184]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc4e:	4a2d      	ldr	r2, [pc, #180]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc54:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bc56:	4a2b      	ldr	r2, [pc, #172]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bc5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bc5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc6a:	d118      	bne.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc6c:	f7f8 fbc6 	bl	80043fc <HAL_GetTick>
 800bc70:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc74:	e00d      	b.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc76:	f7f8 fbc1 	bl	80043fc <HAL_GetTick>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bc80:	1ad2      	subs	r2, r2, r3
 800bc82:	f241 3388 	movw	r3, #5000	; 0x1388
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d903      	bls.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800bc8a:	2303      	movs	r3, #3
 800bc8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800bc90:	e005      	b.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc92:	4b1c      	ldr	r3, [pc, #112]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bc94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc96:	f003 0302 	and.w	r3, r3, #2
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d0eb      	beq.n	800bc76 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800bc9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d129      	bne.n	800bcfa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bcae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcb6:	d10e      	bne.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800bcb8:	4b12      	ldr	r3, [pc, #72]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bcc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bcc8:	091a      	lsrs	r2, r3, #4
 800bcca:	4b10      	ldr	r3, [pc, #64]	; (800bd0c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800bccc:	4013      	ands	r3, r2
 800bcce:	4a0d      	ldr	r2, [pc, #52]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcd0:	430b      	orrs	r3, r1
 800bcd2:	6113      	str	r3, [r2, #16]
 800bcd4:	e005      	b.n	800bce2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800bcd6:	4b0b      	ldr	r3, [pc, #44]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcd8:	691b      	ldr	r3, [r3, #16]
 800bcda:	4a0a      	ldr	r2, [pc, #40]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bce0:	6113      	str	r3, [r2, #16]
 800bce2:	4b08      	ldr	r3, [pc, #32]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bce4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bcee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcf2:	4a04      	ldr	r2, [pc, #16]	; (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800bcf4:	430b      	orrs	r3, r1
 800bcf6:	6713      	str	r3, [r2, #112]	; 0x70
 800bcf8:	e00e      	b.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bcfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800bd02:	e009      	b.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800bd04:	58024400 	.word	0x58024400
 800bd08:	58024800 	.word	0x58024800
 800bd0c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bd18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd20:	f002 0301 	and.w	r3, r2, #1
 800bd24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd2e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bd32:	460b      	mov	r3, r1
 800bd34:	4313      	orrs	r3, r2
 800bd36:	f000 8089 	beq.w	800be4c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bd3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd40:	2b28      	cmp	r3, #40	; 0x28
 800bd42:	d86b      	bhi.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800bd44:	a201      	add	r2, pc, #4	; (adr r2, 800bd4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd4a:	bf00      	nop
 800bd4c:	0800be25 	.word	0x0800be25
 800bd50:	0800be1d 	.word	0x0800be1d
 800bd54:	0800be1d 	.word	0x0800be1d
 800bd58:	0800be1d 	.word	0x0800be1d
 800bd5c:	0800be1d 	.word	0x0800be1d
 800bd60:	0800be1d 	.word	0x0800be1d
 800bd64:	0800be1d 	.word	0x0800be1d
 800bd68:	0800be1d 	.word	0x0800be1d
 800bd6c:	0800bdf1 	.word	0x0800bdf1
 800bd70:	0800be1d 	.word	0x0800be1d
 800bd74:	0800be1d 	.word	0x0800be1d
 800bd78:	0800be1d 	.word	0x0800be1d
 800bd7c:	0800be1d 	.word	0x0800be1d
 800bd80:	0800be1d 	.word	0x0800be1d
 800bd84:	0800be1d 	.word	0x0800be1d
 800bd88:	0800be1d 	.word	0x0800be1d
 800bd8c:	0800be07 	.word	0x0800be07
 800bd90:	0800be1d 	.word	0x0800be1d
 800bd94:	0800be1d 	.word	0x0800be1d
 800bd98:	0800be1d 	.word	0x0800be1d
 800bd9c:	0800be1d 	.word	0x0800be1d
 800bda0:	0800be1d 	.word	0x0800be1d
 800bda4:	0800be1d 	.word	0x0800be1d
 800bda8:	0800be1d 	.word	0x0800be1d
 800bdac:	0800be25 	.word	0x0800be25
 800bdb0:	0800be1d 	.word	0x0800be1d
 800bdb4:	0800be1d 	.word	0x0800be1d
 800bdb8:	0800be1d 	.word	0x0800be1d
 800bdbc:	0800be1d 	.word	0x0800be1d
 800bdc0:	0800be1d 	.word	0x0800be1d
 800bdc4:	0800be1d 	.word	0x0800be1d
 800bdc8:	0800be1d 	.word	0x0800be1d
 800bdcc:	0800be25 	.word	0x0800be25
 800bdd0:	0800be1d 	.word	0x0800be1d
 800bdd4:	0800be1d 	.word	0x0800be1d
 800bdd8:	0800be1d 	.word	0x0800be1d
 800bddc:	0800be1d 	.word	0x0800be1d
 800bde0:	0800be1d 	.word	0x0800be1d
 800bde4:	0800be1d 	.word	0x0800be1d
 800bde8:	0800be1d 	.word	0x0800be1d
 800bdec:	0800be25 	.word	0x0800be25
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bdf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf4:	3308      	adds	r3, #8
 800bdf6:	2101      	movs	r1, #1
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f001 fe95 	bl	800db28 <RCCEx_PLL2_Config>
 800bdfe:	4603      	mov	r3, r0
 800be00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800be04:	e00f      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be0a:	3328      	adds	r3, #40	; 0x28
 800be0c:	2101      	movs	r1, #1
 800be0e:	4618      	mov	r0, r3
 800be10:	f001 ff3c 	bl	800dc8c <RCCEx_PLL3_Config>
 800be14:	4603      	mov	r3, r0
 800be16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800be1a:	e004      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be22:	e000      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800be24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d10a      	bne.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800be2e:	4bbf      	ldr	r3, [pc, #764]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be32:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800be36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be3c:	4abb      	ldr	r2, [pc, #748]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800be3e:	430b      	orrs	r3, r1
 800be40:	6553      	str	r3, [r2, #84]	; 0x54
 800be42:	e003      	b.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800be4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be54:	f002 0302 	and.w	r3, r2, #2
 800be58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be5c:	2300      	movs	r3, #0
 800be5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800be62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800be66:	460b      	mov	r3, r1
 800be68:	4313      	orrs	r3, r2
 800be6a:	d041      	beq.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800be6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be72:	2b05      	cmp	r3, #5
 800be74:	d824      	bhi.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800be76:	a201      	add	r2, pc, #4	; (adr r2, 800be7c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800be78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7c:	0800bec9 	.word	0x0800bec9
 800be80:	0800be95 	.word	0x0800be95
 800be84:	0800beab 	.word	0x0800beab
 800be88:	0800bec9 	.word	0x0800bec9
 800be8c:	0800bec9 	.word	0x0800bec9
 800be90:	0800bec9 	.word	0x0800bec9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be98:	3308      	adds	r3, #8
 800be9a:	2101      	movs	r1, #1
 800be9c:	4618      	mov	r0, r3
 800be9e:	f001 fe43 	bl	800db28 <RCCEx_PLL2_Config>
 800bea2:	4603      	mov	r3, r0
 800bea4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bea8:	e00f      	b.n	800beca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800beaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beae:	3328      	adds	r3, #40	; 0x28
 800beb0:	2101      	movs	r1, #1
 800beb2:	4618      	mov	r0, r3
 800beb4:	f001 feea 	bl	800dc8c <RCCEx_PLL3_Config>
 800beb8:	4603      	mov	r3, r0
 800beba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bebe:	e004      	b.n	800beca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bec6:	e000      	b.n	800beca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800bec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800beca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d10a      	bne.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bed2:	4b96      	ldr	r3, [pc, #600]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed6:	f023 0107 	bic.w	r1, r3, #7
 800beda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bede:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bee0:	4a92      	ldr	r2, [pc, #584]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bee2:	430b      	orrs	r3, r1
 800bee4:	6553      	str	r3, [r2, #84]	; 0x54
 800bee6:	e003      	b.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bee8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800beec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef8:	f002 0304 	and.w	r3, r2, #4
 800befc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf00:	2300      	movs	r3, #0
 800bf02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf06:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	d044      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bf10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf18:	2b05      	cmp	r3, #5
 800bf1a:	d825      	bhi.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800bf1c:	a201      	add	r2, pc, #4	; (adr r2, 800bf24 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800bf1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf22:	bf00      	nop
 800bf24:	0800bf71 	.word	0x0800bf71
 800bf28:	0800bf3d 	.word	0x0800bf3d
 800bf2c:	0800bf53 	.word	0x0800bf53
 800bf30:	0800bf71 	.word	0x0800bf71
 800bf34:	0800bf71 	.word	0x0800bf71
 800bf38:	0800bf71 	.word	0x0800bf71
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf40:	3308      	adds	r3, #8
 800bf42:	2101      	movs	r1, #1
 800bf44:	4618      	mov	r0, r3
 800bf46:	f001 fdef 	bl	800db28 <RCCEx_PLL2_Config>
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bf50:	e00f      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf56:	3328      	adds	r3, #40	; 0x28
 800bf58:	2101      	movs	r1, #1
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f001 fe96 	bl	800dc8c <RCCEx_PLL3_Config>
 800bf60:	4603      	mov	r3, r0
 800bf62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bf66:	e004      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf6e:	e000      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bf70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10b      	bne.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf7a:	4b6c      	ldr	r3, [pc, #432]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bf7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf7e:	f023 0107 	bic.w	r1, r3, #7
 800bf82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf8a:	4a68      	ldr	r2, [pc, #416]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bf8c:	430b      	orrs	r3, r1
 800bf8e:	6593      	str	r3, [r2, #88]	; 0x58
 800bf90:	e003      	b.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bf9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa2:	f002 0320 	and.w	r3, r2, #32
 800bfa6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bfaa:	2300      	movs	r3, #0
 800bfac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bfb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	d055      	beq.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bfba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfc6:	d033      	beq.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bfc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bfcc:	d82c      	bhi.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bfce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfd2:	d02f      	beq.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bfd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfd8:	d826      	bhi.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bfda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bfde:	d02b      	beq.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bfe0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bfe4:	d820      	bhi.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bfe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfea:	d012      	beq.n	800c012 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bfec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bff0:	d81a      	bhi.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d022      	beq.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bffa:	d115      	bne.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c000:	3308      	adds	r3, #8
 800c002:	2100      	movs	r1, #0
 800c004:	4618      	mov	r0, r3
 800c006:	f001 fd8f 	bl	800db28 <RCCEx_PLL2_Config>
 800c00a:	4603      	mov	r3, r0
 800c00c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c010:	e015      	b.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c016:	3328      	adds	r3, #40	; 0x28
 800c018:	2102      	movs	r1, #2
 800c01a:	4618      	mov	r0, r3
 800c01c:	f001 fe36 	bl	800dc8c <RCCEx_PLL3_Config>
 800c020:	4603      	mov	r3, r0
 800c022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c026:	e00a      	b.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c028:	2301      	movs	r3, #1
 800c02a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c02e:	e006      	b.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c030:	bf00      	nop
 800c032:	e004      	b.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c034:	bf00      	nop
 800c036:	e002      	b.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c038:	bf00      	nop
 800c03a:	e000      	b.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800c03c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c03e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c042:	2b00      	cmp	r3, #0
 800c044:	d10b      	bne.n	800c05e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c046:	4b39      	ldr	r3, [pc, #228]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c04a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c056:	4a35      	ldr	r2, [pc, #212]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c058:	430b      	orrs	r3, r1
 800c05a:	6553      	str	r3, [r2, #84]	; 0x54
 800c05c:	e003      	b.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c05e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c062:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c076:	2300      	movs	r3, #0
 800c078:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c07c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c080:	460b      	mov	r3, r1
 800c082:	4313      	orrs	r3, r2
 800c084:	d058      	beq.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c08a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c08e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c092:	d033      	beq.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800c094:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c098:	d82c      	bhi.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c09a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c09e:	d02f      	beq.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800c0a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a4:	d826      	bhi.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c0a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0aa:	d02b      	beq.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800c0ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0b0:	d820      	bhi.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c0b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0b6:	d012      	beq.n	800c0de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800c0b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0bc:	d81a      	bhi.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d022      	beq.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800c0c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0c6:	d115      	bne.n	800c0f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0cc:	3308      	adds	r3, #8
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f001 fd29 	bl	800db28 <RCCEx_PLL2_Config>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c0dc:	e015      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0e2:	3328      	adds	r3, #40	; 0x28
 800c0e4:	2102      	movs	r1, #2
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f001 fdd0 	bl	800dc8c <RCCEx_PLL3_Config>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c0f2:	e00a      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c0fa:	e006      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c0fc:	bf00      	nop
 800c0fe:	e004      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c100:	bf00      	nop
 800c102:	e002      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c104:	bf00      	nop
 800c106:	e000      	b.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800c108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c10a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10e      	bne.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c112:	4b06      	ldr	r3, [pc, #24]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c116:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c11e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c122:	4a02      	ldr	r2, [pc, #8]	; (800c12c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800c124:	430b      	orrs	r3, r1
 800c126:	6593      	str	r3, [r2, #88]	; 0x58
 800c128:	e006      	b.n	800c138 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800c12a:	bf00      	nop
 800c12c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c130:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c134:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c140:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c148:	2300      	movs	r3, #0
 800c14a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c14e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c152:	460b      	mov	r3, r1
 800c154:	4313      	orrs	r3, r2
 800c156:	d055      	beq.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c15c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c160:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c164:	d033      	beq.n	800c1ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800c166:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c16a:	d82c      	bhi.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c16c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c170:	d02f      	beq.n	800c1d2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800c172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c176:	d826      	bhi.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c178:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c17c:	d02b      	beq.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800c17e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c182:	d820      	bhi.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c188:	d012      	beq.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800c18a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c18e:	d81a      	bhi.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800c190:	2b00      	cmp	r3, #0
 800c192:	d022      	beq.n	800c1da <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800c194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c198:	d115      	bne.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c19e:	3308      	adds	r3, #8
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f001 fcc0 	bl	800db28 <RCCEx_PLL2_Config>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c1ae:	e015      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1b4:	3328      	adds	r3, #40	; 0x28
 800c1b6:	2102      	movs	r1, #2
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f001 fd67 	bl	800dc8c <RCCEx_PLL3_Config>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c1c4:	e00a      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c1cc:	e006      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c1ce:	bf00      	nop
 800c1d0:	e004      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c1d2:	bf00      	nop
 800c1d4:	e002      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c1d6:	bf00      	nop
 800c1d8:	e000      	b.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800c1da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d10b      	bne.n	800c1fc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c1e4:	4ba1      	ldr	r3, [pc, #644]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1e8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c1ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c1f4:	4a9d      	ldr	r2, [pc, #628]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c1f6:	430b      	orrs	r3, r1
 800c1f8:	6593      	str	r3, [r2, #88]	; 0x58
 800c1fa:	e003      	b.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c200:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20c:	f002 0308 	and.w	r3, r2, #8
 800c210:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c214:	2300      	movs	r3, #0
 800c216:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c21a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c21e:	460b      	mov	r3, r1
 800c220:	4313      	orrs	r3, r2
 800c222:	d01e      	beq.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c22c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c230:	d10c      	bne.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c236:	3328      	adds	r3, #40	; 0x28
 800c238:	2102      	movs	r1, #2
 800c23a:	4618      	mov	r0, r3
 800c23c:	f001 fd26 	bl	800dc8c <RCCEx_PLL3_Config>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d002      	beq.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800c246:	2301      	movs	r3, #1
 800c248:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c24c:	4b87      	ldr	r3, [pc, #540]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c24e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c250:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c25c:	4a83      	ldr	r2, [pc, #524]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c25e:	430b      	orrs	r3, r1
 800c260:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26a:	f002 0310 	and.w	r3, r2, #16
 800c26e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c272:	2300      	movs	r3, #0
 800c274:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c278:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c27c:	460b      	mov	r3, r1
 800c27e:	4313      	orrs	r3, r2
 800c280:	d01e      	beq.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c286:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c28a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c28e:	d10c      	bne.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c294:	3328      	adds	r3, #40	; 0x28
 800c296:	2102      	movs	r1, #2
 800c298:	4618      	mov	r0, r3
 800c29a:	f001 fcf7 	bl	800dc8c <RCCEx_PLL3_Config>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d002      	beq.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c2aa:	4b70      	ldr	r3, [pc, #448]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c2b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c2ba:	4a6c      	ldr	r2, [pc, #432]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c2bc:	430b      	orrs	r3, r1
 800c2be:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c2c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c2cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c2d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c2da:	460b      	mov	r3, r1
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	d03e      	beq.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c2e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c2e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2ec:	d022      	beq.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800c2ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2f2:	d81b      	bhi.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d003      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800c2f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2fc:	d00b      	beq.n	800c316 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800c2fe:	e015      	b.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c304:	3308      	adds	r3, #8
 800c306:	2100      	movs	r1, #0
 800c308:	4618      	mov	r0, r3
 800c30a:	f001 fc0d 	bl	800db28 <RCCEx_PLL2_Config>
 800c30e:	4603      	mov	r3, r0
 800c310:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c314:	e00f      	b.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c31a:	3328      	adds	r3, #40	; 0x28
 800c31c:	2102      	movs	r1, #2
 800c31e:	4618      	mov	r0, r3
 800c320:	f001 fcb4 	bl	800dc8c <RCCEx_PLL3_Config>
 800c324:	4603      	mov	r3, r0
 800c326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c32a:	e004      	b.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c332:	e000      	b.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800c334:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d10b      	bne.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c33e:	4b4b      	ldr	r3, [pc, #300]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c342:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c34a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c34e:	4a47      	ldr	r2, [pc, #284]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c350:	430b      	orrs	r3, r1
 800c352:	6593      	str	r3, [r2, #88]	; 0x58
 800c354:	e003      	b.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c35a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c35e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c366:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c36a:	67bb      	str	r3, [r7, #120]	; 0x78
 800c36c:	2300      	movs	r3, #0
 800c36e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c370:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c374:	460b      	mov	r3, r1
 800c376:	4313      	orrs	r3, r2
 800c378:	d03b      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c37e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c382:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c386:	d01f      	beq.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800c388:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c38c:	d818      	bhi.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800c38e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c392:	d003      	beq.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800c394:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c398:	d007      	beq.n	800c3aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800c39a:	e011      	b.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c39c:	4b33      	ldr	r3, [pc, #204]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a0:	4a32      	ldr	r2, [pc, #200]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c3a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c3a8:	e00f      	b.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3ae:	3328      	adds	r3, #40	; 0x28
 800c3b0:	2101      	movs	r1, #1
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f001 fc6a 	bl	800dc8c <RCCEx_PLL3_Config>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800c3be:	e004      	b.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c3c6:	e000      	b.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800c3c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d10b      	bne.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c3d2:	4b26      	ldr	r3, [pc, #152]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c3da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3e2:	4a22      	ldr	r2, [pc, #136]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c3e4:	430b      	orrs	r3, r1
 800c3e6:	6553      	str	r3, [r2, #84]	; 0x54
 800c3e8:	e003      	b.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c3ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c3fe:	673b      	str	r3, [r7, #112]	; 0x70
 800c400:	2300      	movs	r3, #0
 800c402:	677b      	str	r3, [r7, #116]	; 0x74
 800c404:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c408:	460b      	mov	r3, r1
 800c40a:	4313      	orrs	r3, r2
 800c40c:	d034      	beq.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c414:	2b00      	cmp	r3, #0
 800c416:	d003      	beq.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800c418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c41c:	d007      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800c41e:	e011      	b.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c420:	4b12      	ldr	r3, [pc, #72]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c424:	4a11      	ldr	r2, [pc, #68]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c42a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c42c:	e00e      	b.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c42e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c432:	3308      	adds	r3, #8
 800c434:	2102      	movs	r1, #2
 800c436:	4618      	mov	r0, r3
 800c438:	f001 fb76 	bl	800db28 <RCCEx_PLL2_Config>
 800c43c:	4603      	mov	r3, r0
 800c43e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c442:	e003      	b.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800c444:	2301      	movs	r3, #1
 800c446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c44a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c44c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10d      	bne.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c454:	4b05      	ldr	r3, [pc, #20]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c458:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c45c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c462:	4a02      	ldr	r2, [pc, #8]	; (800c46c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c464:	430b      	orrs	r3, r1
 800c466:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c468:	e006      	b.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c46a:	bf00      	nop
 800c46c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c470:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c474:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c480:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c484:	66bb      	str	r3, [r7, #104]	; 0x68
 800c486:	2300      	movs	r3, #0
 800c488:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c48a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c48e:	460b      	mov	r3, r1
 800c490:	4313      	orrs	r3, r2
 800c492:	d00c      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c498:	3328      	adds	r3, #40	; 0x28
 800c49a:	2102      	movs	r1, #2
 800c49c:	4618      	mov	r0, r3
 800c49e:	f001 fbf5 	bl	800dc8c <RCCEx_PLL3_Config>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c4ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c4ba:	663b      	str	r3, [r7, #96]	; 0x60
 800c4bc:	2300      	movs	r3, #0
 800c4be:	667b      	str	r3, [r7, #100]	; 0x64
 800c4c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	d038      	beq.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c4ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c4ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4d6:	d018      	beq.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c4d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4dc:	d811      	bhi.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c4de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4e2:	d014      	beq.n	800c50e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c4e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4e8:	d80b      	bhi.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d011      	beq.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c4ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4f2:	d106      	bne.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4f4:	4bc3      	ldr	r3, [pc, #780]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f8:	4ac2      	ldr	r2, [pc, #776]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c4fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c500:	e008      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c502:	2301      	movs	r3, #1
 800c504:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c508:	e004      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c50a:	bf00      	nop
 800c50c:	e002      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c50e:	bf00      	nop
 800c510:	e000      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c512:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c514:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d10b      	bne.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c51c:	4bb9      	ldr	r3, [pc, #740]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c51e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c520:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c52c:	4ab5      	ldr	r2, [pc, #724]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c52e:	430b      	orrs	r3, r1
 800c530:	6553      	str	r3, [r2, #84]	; 0x54
 800c532:	e003      	b.n	800c53c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c534:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c538:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c544:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c548:	65bb      	str	r3, [r7, #88]	; 0x58
 800c54a:	2300      	movs	r3, #0
 800c54c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c54e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c552:	460b      	mov	r3, r1
 800c554:	4313      	orrs	r3, r2
 800c556:	d009      	beq.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c558:	4baa      	ldr	r3, [pc, #680]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c55c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c566:	4aa7      	ldr	r2, [pc, #668]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c568:	430b      	orrs	r3, r1
 800c56a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c56c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c574:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c578:	653b      	str	r3, [r7, #80]	; 0x50
 800c57a:	2300      	movs	r3, #0
 800c57c:	657b      	str	r3, [r7, #84]	; 0x54
 800c57e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c582:	460b      	mov	r3, r1
 800c584:	4313      	orrs	r3, r2
 800c586:	d00a      	beq.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c588:	4b9e      	ldr	r3, [pc, #632]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c594:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c598:	4a9a      	ldr	r2, [pc, #616]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c59a:	430b      	orrs	r3, r1
 800c59c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c5aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c5b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	d009      	beq.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c5ba:	4b92      	ldr	r3, [pc, #584]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5be:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c5c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5c8:	4a8e      	ldr	r2, [pc, #568]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5ca:	430b      	orrs	r3, r1
 800c5cc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c5ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c5da:	643b      	str	r3, [r7, #64]	; 0x40
 800c5dc:	2300      	movs	r3, #0
 800c5de:	647b      	str	r3, [r7, #68]	; 0x44
 800c5e0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	d00e      	beq.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c5ea:	4b86      	ldr	r3, [pc, #536]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	4a85      	ldr	r2, [pc, #532]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c5f4:	6113      	str	r3, [r2, #16]
 800c5f6:	4b83      	ldr	r3, [pc, #524]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c5f8:	6919      	ldr	r1, [r3, #16]
 800c5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c5fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c602:	4a80      	ldr	r2, [pc, #512]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c604:	430b      	orrs	r3, r1
 800c606:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c610:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c614:	63bb      	str	r3, [r7, #56]	; 0x38
 800c616:	2300      	movs	r3, #0
 800c618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c61a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c61e:	460b      	mov	r3, r1
 800c620:	4313      	orrs	r3, r2
 800c622:	d009      	beq.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c624:	4b77      	ldr	r3, [pc, #476]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c628:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c632:	4a74      	ldr	r2, [pc, #464]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c634:	430b      	orrs	r3, r1
 800c636:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c640:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c644:	633b      	str	r3, [r7, #48]	; 0x30
 800c646:	2300      	movs	r3, #0
 800c648:	637b      	str	r3, [r7, #52]	; 0x34
 800c64a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c64e:	460b      	mov	r3, r1
 800c650:	4313      	orrs	r3, r2
 800c652:	d00a      	beq.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c654:	4b6b      	ldr	r3, [pc, #428]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c658:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c664:	4a67      	ldr	r2, [pc, #412]	; (800c804 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c666:	430b      	orrs	r3, r1
 800c668:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c66a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c672:	2100      	movs	r1, #0
 800c674:	62b9      	str	r1, [r7, #40]	; 0x28
 800c676:	f003 0301 	and.w	r3, r3, #1
 800c67a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c67c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c680:	460b      	mov	r3, r1
 800c682:	4313      	orrs	r3, r2
 800c684:	d011      	beq.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c68a:	3308      	adds	r3, #8
 800c68c:	2100      	movs	r1, #0
 800c68e:	4618      	mov	r0, r3
 800c690:	f001 fa4a 	bl	800db28 <RCCEx_PLL2_Config>
 800c694:	4603      	mov	r3, r0
 800c696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c69a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d003      	beq.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c6aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b2:	2100      	movs	r1, #0
 800c6b4:	6239      	str	r1, [r7, #32]
 800c6b6:	f003 0302 	and.w	r3, r3, #2
 800c6ba:	627b      	str	r3, [r7, #36]	; 0x24
 800c6bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	d011      	beq.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c6c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6ca:	3308      	adds	r3, #8
 800c6cc:	2101      	movs	r1, #1
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f001 fa2a 	bl	800db28 <RCCEx_PLL2_Config>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c6da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d003      	beq.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c6e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c6ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f2:	2100      	movs	r1, #0
 800c6f4:	61b9      	str	r1, [r7, #24]
 800c6f6:	f003 0304 	and.w	r3, r3, #4
 800c6fa:	61fb      	str	r3, [r7, #28]
 800c6fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c700:	460b      	mov	r3, r1
 800c702:	4313      	orrs	r3, r2
 800c704:	d011      	beq.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c70a:	3308      	adds	r3, #8
 800c70c:	2102      	movs	r1, #2
 800c70e:	4618      	mov	r0, r3
 800c710:	f001 fa0a 	bl	800db28 <RCCEx_PLL2_Config>
 800c714:	4603      	mov	r3, r0
 800c716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c71a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d003      	beq.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c726:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c72a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c732:	2100      	movs	r1, #0
 800c734:	6139      	str	r1, [r7, #16]
 800c736:	f003 0308 	and.w	r3, r3, #8
 800c73a:	617b      	str	r3, [r7, #20]
 800c73c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c740:	460b      	mov	r3, r1
 800c742:	4313      	orrs	r3, r2
 800c744:	d011      	beq.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c74a:	3328      	adds	r3, #40	; 0x28
 800c74c:	2100      	movs	r1, #0
 800c74e:	4618      	mov	r0, r3
 800c750:	f001 fa9c 	bl	800dc8c <RCCEx_PLL3_Config>
 800c754:	4603      	mov	r3, r0
 800c756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c75a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d003      	beq.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c766:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c76a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c772:	2100      	movs	r1, #0
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	f003 0310 	and.w	r3, r3, #16
 800c77a:	60fb      	str	r3, [r7, #12]
 800c77c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c780:	460b      	mov	r3, r1
 800c782:	4313      	orrs	r3, r2
 800c784:	d011      	beq.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c78a:	3328      	adds	r3, #40	; 0x28
 800c78c:	2101      	movs	r1, #1
 800c78e:	4618      	mov	r0, r3
 800c790:	f001 fa7c 	bl	800dc8c <RCCEx_PLL3_Config>
 800c794:	4603      	mov	r3, r0
 800c796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c79a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d003      	beq.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	6039      	str	r1, [r7, #0]
 800c7b6:	f003 0320 	and.w	r3, r3, #32
 800c7ba:	607b      	str	r3, [r7, #4]
 800c7bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	d011      	beq.n	800c7ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c7c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c7ca:	3328      	adds	r3, #40	; 0x28
 800c7cc:	2102      	movs	r1, #2
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f001 fa5c 	bl	800dc8c <RCCEx_PLL3_Config>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c7da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d003      	beq.n	800c7ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c7e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c7ea:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d101      	bne.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	e000      	b.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c7f6:	2301      	movs	r3, #1
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c7fe:	46bd      	mov	sp, r7
 800c800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c804:	58024400 	.word	0x58024400

0800c808 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b090      	sub	sp, #64	; 0x40
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c812:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c816:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c81a:	430b      	orrs	r3, r1
 800c81c:	f040 8094 	bne.w	800c948 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c820:	4b9e      	ldr	r3, [pc, #632]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c824:	f003 0307 	and.w	r3, r3, #7
 800c828:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82c:	2b04      	cmp	r3, #4
 800c82e:	f200 8087 	bhi.w	800c940 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c832:	a201      	add	r2, pc, #4	; (adr r2, 800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c838:	0800c84d 	.word	0x0800c84d
 800c83c:	0800c875 	.word	0x0800c875
 800c840:	0800c89d 	.word	0x0800c89d
 800c844:	0800c939 	.word	0x0800c939
 800c848:	0800c8c5 	.word	0x0800c8c5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c84c:	4b93      	ldr	r3, [pc, #588]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c854:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c858:	d108      	bne.n	800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c85a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c85e:	4618      	mov	r0, r3
 800c860:	f001 f810 	bl	800d884 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c866:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c868:	f000 bd45 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c86c:	2300      	movs	r3, #0
 800c86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c870:	f000 bd41 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c874:	4b89      	ldr	r3, [pc, #548]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c87c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c880:	d108      	bne.n	800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c882:	f107 0318 	add.w	r3, r7, #24
 800c886:	4618      	mov	r0, r3
 800c888:	f000 fd54 	bl	800d334 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c88c:	69bb      	ldr	r3, [r7, #24]
 800c88e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c890:	f000 bd31 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c894:	2300      	movs	r3, #0
 800c896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c898:	f000 bd2d 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c89c:	4b7f      	ldr	r3, [pc, #508]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8a8:	d108      	bne.n	800c8bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8aa:	f107 030c 	add.w	r3, r7, #12
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f000 fe94 	bl	800d5dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8b8:	f000 bd1d 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8c0:	f000 bd19 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c8c4:	4b75      	ldr	r3, [pc, #468]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8cc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c8ce:	4b73      	ldr	r3, [pc, #460]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	f003 0304 	and.w	r3, r3, #4
 800c8d6:	2b04      	cmp	r3, #4
 800c8d8:	d10c      	bne.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d109      	bne.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8e0:	4b6e      	ldr	r3, [pc, #440]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	08db      	lsrs	r3, r3, #3
 800c8e6:	f003 0303 	and.w	r3, r3, #3
 800c8ea:	4a6d      	ldr	r2, [pc, #436]	; (800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c8ec:	fa22 f303 	lsr.w	r3, r2, r3
 800c8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8f2:	e01f      	b.n	800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c8f4:	4b69      	ldr	r3, [pc, #420]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c900:	d106      	bne.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c904:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c908:	d102      	bne.n	800c910 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c90a:	4b66      	ldr	r3, [pc, #408]	; (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c90c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c90e:	e011      	b.n	800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c910:	4b62      	ldr	r3, [pc, #392]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c91c:	d106      	bne.n	800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c924:	d102      	bne.n	800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c926:	4b60      	ldr	r3, [pc, #384]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c92a:	e003      	b.n	800c934 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c92c:	2300      	movs	r3, #0
 800c92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c930:	f000 bce1 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c934:	f000 bcdf 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c938:	4b5c      	ldr	r3, [pc, #368]	; (800caac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c93c:	f000 bcdb 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c940:	2300      	movs	r3, #0
 800c942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c944:	f000 bcd7 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c94c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c950:	430b      	orrs	r3, r1
 800c952:	f040 80ad 	bne.w	800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c956:	4b51      	ldr	r3, [pc, #324]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c95a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c95e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c966:	d056      	beq.n	800ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c96e:	f200 8090 	bhi.w	800ca92 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	2bc0      	cmp	r3, #192	; 0xc0
 800c976:	f000 8088 	beq.w	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97c:	2bc0      	cmp	r3, #192	; 0xc0
 800c97e:	f200 8088 	bhi.w	800ca92 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c984:	2b80      	cmp	r3, #128	; 0x80
 800c986:	d032      	beq.n	800c9ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98a:	2b80      	cmp	r3, #128	; 0x80
 800c98c:	f200 8081 	bhi.w	800ca92 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c992:	2b00      	cmp	r3, #0
 800c994:	d003      	beq.n	800c99e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c998:	2b40      	cmp	r3, #64	; 0x40
 800c99a:	d014      	beq.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c99c:	e079      	b.n	800ca92 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c99e:	4b3f      	ldr	r3, [pc, #252]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9aa:	d108      	bne.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f000 ff67 	bl	800d884 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9ba:	f000 bc9c 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9c2:	f000 bc98 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9c6:	4b35      	ldr	r3, [pc, #212]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9d2:	d108      	bne.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9d4:	f107 0318 	add.w	r3, r7, #24
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f000 fcab 	bl	800d334 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9e2:	f000 bc88 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ea:	f000 bc84 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9ee:	4b2b      	ldr	r3, [pc, #172]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9fa:	d108      	bne.n	800ca0e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9fc:	f107 030c 	add.w	r3, r7, #12
 800ca00:	4618      	mov	r0, r3
 800ca02:	f000 fdeb 	bl	800d5dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca0a:	f000 bc74 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca12:	f000 bc70 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca16:	4b21      	ldr	r3, [pc, #132]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca1e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca20:	4b1e      	ldr	r3, [pc, #120]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f003 0304 	and.w	r3, r3, #4
 800ca28:	2b04      	cmp	r3, #4
 800ca2a:	d10c      	bne.n	800ca46 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ca2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d109      	bne.n	800ca46 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca32:	4b1a      	ldr	r3, [pc, #104]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	08db      	lsrs	r3, r3, #3
 800ca38:	f003 0303 	and.w	r3, r3, #3
 800ca3c:	4a18      	ldr	r2, [pc, #96]	; (800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ca3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ca42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca44:	e01f      	b.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca46:	4b15      	ldr	r3, [pc, #84]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca52:	d106      	bne.n	800ca62 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ca54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca5a:	d102      	bne.n	800ca62 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca5c:	4b11      	ldr	r3, [pc, #68]	; (800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ca5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca60:	e011      	b.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca62:	4b0e      	ldr	r3, [pc, #56]	; (800ca9c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca6e:	d106      	bne.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ca70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca76:	d102      	bne.n	800ca7e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca78:	4b0b      	ldr	r3, [pc, #44]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ca7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca7c:	e003      	b.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca82:	f000 bc38 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca86:	f000 bc36 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca8a:	4b08      	ldr	r3, [pc, #32]	; (800caac <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ca8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca8e:	f000 bc32 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca96:	f000 bc2e 	b.w	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca9a:	bf00      	nop
 800ca9c:	58024400 	.word	0x58024400
 800caa0:	03d09000 	.word	0x03d09000
 800caa4:	003d0900 	.word	0x003d0900
 800caa8:	017d7840 	.word	0x017d7840
 800caac:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cab4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800cab8:	430b      	orrs	r3, r1
 800caba:	f040 809c 	bne.w	800cbf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cabe:	4b9e      	ldr	r3, [pc, #632]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cac2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800cac6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cace:	d054      	beq.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800cad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cad6:	f200 808b 	bhi.w	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800cada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cadc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cae0:	f000 8083 	beq.w	800cbea <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800cae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800caea:	f200 8081 	bhi.w	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800caee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800caf4:	d02f      	beq.n	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800caf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cafc:	d878      	bhi.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800cafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d004      	beq.n	800cb0e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800cb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb0a:	d012      	beq.n	800cb32 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800cb0c:	e070      	b.n	800cbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb0e:	4b8a      	ldr	r3, [pc, #552]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb1a:	d107      	bne.n	800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb20:	4618      	mov	r0, r3
 800cb22:	f000 feaf 	bl	800d884 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb2a:	e3e4      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb30:	e3e1      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb32:	4b81      	ldr	r3, [pc, #516]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb3e:	d107      	bne.n	800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb40:	f107 0318 	add.w	r3, r7, #24
 800cb44:	4618      	mov	r0, r3
 800cb46:	f000 fbf5 	bl	800d334 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb4e:	e3d2      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb50:	2300      	movs	r3, #0
 800cb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb54:	e3cf      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb56:	4b78      	ldr	r3, [pc, #480]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb62:	d107      	bne.n	800cb74 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb64:	f107 030c 	add.w	r3, r7, #12
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f000 fd37 	bl	800d5dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb72:	e3c0      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb74:	2300      	movs	r3, #0
 800cb76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb78:	e3bd      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb7a:	4b6f      	ldr	r3, [pc, #444]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb82:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb84:	4b6c      	ldr	r3, [pc, #432]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f003 0304 	and.w	r3, r3, #4
 800cb8c:	2b04      	cmp	r3, #4
 800cb8e:	d10c      	bne.n	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800cb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d109      	bne.n	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb96:	4b68      	ldr	r3, [pc, #416]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	08db      	lsrs	r3, r3, #3
 800cb9c:	f003 0303 	and.w	r3, r3, #3
 800cba0:	4a66      	ldr	r2, [pc, #408]	; (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cba2:	fa22 f303 	lsr.w	r3, r2, r3
 800cba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cba8:	e01e      	b.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cbaa:	4b63      	ldr	r3, [pc, #396]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbb6:	d106      	bne.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800cbb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbbe:	d102      	bne.n	800cbc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cbc0:	4b5f      	ldr	r3, [pc, #380]	; (800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cbc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbc4:	e010      	b.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cbc6:	4b5c      	ldr	r3, [pc, #368]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbd2:	d106      	bne.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800cbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbda:	d102      	bne.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cbdc:	4b59      	ldr	r3, [pc, #356]	; (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800cbde:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbe0:	e002      	b.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cbe6:	e386      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cbe8:	e385      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cbea:	4b57      	ldr	r3, [pc, #348]	; (800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800cbec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbee:	e382      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf4:	e37f      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cbf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbfa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800cbfe:	430b      	orrs	r3, r1
 800cc00:	f040 80a7 	bne.w	800cd52 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cc04:	4b4c      	ldr	r3, [pc, #304]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc08:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800cc0c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc14:	d055      	beq.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800cc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc1c:	f200 8096 	bhi.w	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800cc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc26:	f000 8084 	beq.w	800cd32 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc30:	f200 808c 	bhi.w	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800cc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc3a:	d030      	beq.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800cc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc42:	f200 8083 	bhi.w	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800cc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d004      	beq.n	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800cc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cc52:	d012      	beq.n	800cc7a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800cc54:	e07a      	b.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc56:	4b38      	ldr	r3, [pc, #224]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc62:	d107      	bne.n	800cc74 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f000 fe0b 	bl	800d884 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc72:	e340      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc74:	2300      	movs	r3, #0
 800cc76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc78:	e33d      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc7a:	4b2f      	ldr	r3, [pc, #188]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc86:	d107      	bne.n	800cc98 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc88:	f107 0318 	add.w	r3, r7, #24
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f000 fb51 	bl	800d334 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc92:	69bb      	ldr	r3, [r7, #24]
 800cc94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc96:	e32e      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc9c:	e32b      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc9e:	4b26      	ldr	r3, [pc, #152]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccaa:	d107      	bne.n	800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccac:	f107 030c 	add.w	r3, r7, #12
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f000 fc93 	bl	800d5dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccba:	e31c      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccc0:	e319      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccc2:	4b1d      	ldr	r3, [pc, #116]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ccc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ccca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cccc:	4b1a      	ldr	r3, [pc, #104]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f003 0304 	and.w	r3, r3, #4
 800ccd4:	2b04      	cmp	r3, #4
 800ccd6:	d10c      	bne.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ccd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d109      	bne.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccde:	4b16      	ldr	r3, [pc, #88]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	08db      	lsrs	r3, r3, #3
 800cce4:	f003 0303 	and.w	r3, r3, #3
 800cce8:	4a14      	ldr	r2, [pc, #80]	; (800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ccea:	fa22 f303 	lsr.w	r3, r2, r3
 800ccee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccf0:	e01e      	b.n	800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ccf2:	4b11      	ldr	r3, [pc, #68]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccfe:	d106      	bne.n	800cd0e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800cd00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd06:	d102      	bne.n	800cd0e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd08:	4b0d      	ldr	r3, [pc, #52]	; (800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800cd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd0c:	e010      	b.n	800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd0e:	4b0a      	ldr	r3, [pc, #40]	; (800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd1a:	d106      	bne.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800cd1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd22:	d102      	bne.n	800cd2a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd24:	4b07      	ldr	r3, [pc, #28]	; (800cd44 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800cd26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd28:	e002      	b.n	800cd30 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd2e:	e2e2      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd30:	e2e1      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd32:	4b05      	ldr	r3, [pc, #20]	; (800cd48 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800cd34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd36:	e2de      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cd38:	58024400 	.word	0x58024400
 800cd3c:	03d09000 	.word	0x03d09000
 800cd40:	003d0900 	.word	0x003d0900
 800cd44:	017d7840 	.word	0x017d7840
 800cd48:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd50:	e2d1      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cd52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd56:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cd5a:	430b      	orrs	r3, r1
 800cd5c:	f040 809c 	bne.w	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cd60:	4b93      	ldr	r3, [pc, #588]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cd62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd64:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cd68:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd70:	d054      	beq.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800cd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd78:	f200 808b 	bhi.w	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cd82:	f000 8083 	beq.w	800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800cd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cd8c:	f200 8081 	bhi.w	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd96:	d02f      	beq.n	800cdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800cd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd9e:	d878      	bhi.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800cda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d004      	beq.n	800cdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800cda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdac:	d012      	beq.n	800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800cdae:	e070      	b.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cdb0:	4b7f      	ldr	r3, [pc, #508]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cdbc:	d107      	bne.n	800cdce <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cdbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f000 fd5e 	bl	800d884 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdcc:	e293      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdd2:	e290      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cdd4:	4b76      	ldr	r3, [pc, #472]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cde0:	d107      	bne.n	800cdf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cde2:	f107 0318 	add.w	r3, r7, #24
 800cde6:	4618      	mov	r0, r3
 800cde8:	f000 faa4 	bl	800d334 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdf0:	e281      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdf6:	e27e      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cdf8:	4b6d      	ldr	r3, [pc, #436]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce04:	d107      	bne.n	800ce16 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce06:	f107 030c 	add.w	r3, r7, #12
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f000 fbe6 	bl	800d5dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce14:	e26f      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce16:	2300      	movs	r3, #0
 800ce18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce1a:	e26c      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce1c:	4b64      	ldr	r3, [pc, #400]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce24:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce26:	4b62      	ldr	r3, [pc, #392]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f003 0304 	and.w	r3, r3, #4
 800ce2e:	2b04      	cmp	r3, #4
 800ce30:	d10c      	bne.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ce32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d109      	bne.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce38:	4b5d      	ldr	r3, [pc, #372]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	08db      	lsrs	r3, r3, #3
 800ce3e:	f003 0303 	and.w	r3, r3, #3
 800ce42:	4a5c      	ldr	r2, [pc, #368]	; (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ce44:	fa22 f303 	lsr.w	r3, r2, r3
 800ce48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce4a:	e01e      	b.n	800ce8a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce4c:	4b58      	ldr	r3, [pc, #352]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce58:	d106      	bne.n	800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ce5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce60:	d102      	bne.n	800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce62:	4b55      	ldr	r3, [pc, #340]	; (800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ce64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce66:	e010      	b.n	800ce8a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce68:	4b51      	ldr	r3, [pc, #324]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce74:	d106      	bne.n	800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ce76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce7c:	d102      	bne.n	800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce7e:	4b4f      	ldr	r3, [pc, #316]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ce80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce82:	e002      	b.n	800ce8a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce84:	2300      	movs	r3, #0
 800ce86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ce88:	e235      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ce8a:	e234      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce8c:	4b4c      	ldr	r3, [pc, #304]	; (800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ce8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce90:	e231      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ce92:	2300      	movs	r3, #0
 800ce94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce96:	e22e      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ce98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce9c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cea0:	430b      	orrs	r3, r1
 800cea2:	f040 808f 	bne.w	800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cea6:	4b42      	ldr	r3, [pc, #264]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceaa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ceae:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ceb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ceb6:	d06b      	beq.n	800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ceb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cebe:	d874      	bhi.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cec6:	d056      	beq.n	800cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800cec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cece:	d86c      	bhi.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ced0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ced6:	d03b      	beq.n	800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ced8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cede:	d864      	bhi.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cee6:	d021      	beq.n	800cf2c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800cee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ceee:	d85c      	bhi.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800cef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d004      	beq.n	800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800cef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cefc:	d004      	beq.n	800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800cefe:	e054      	b.n	800cfaa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cf00:	f7fe fa0a 	bl	800b318 <HAL_RCC_GetPCLK1Freq>
 800cf04:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf06:	e1f6      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf08:	4b29      	ldr	r3, [pc, #164]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf14:	d107      	bne.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf16:	f107 0318 	add.w	r3, r7, #24
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f000 fa0a 	bl	800d334 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf24:	e1e7      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf26:	2300      	movs	r3, #0
 800cf28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf2a:	e1e4      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf2c:	4b20      	ldr	r3, [pc, #128]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf38:	d107      	bne.n	800cf4a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf3a:	f107 030c 	add.w	r3, r7, #12
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f000 fb4c 	bl	800d5dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf48:	e1d5      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf4e:	e1d2      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf50:	4b17      	ldr	r3, [pc, #92]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	f003 0304 	and.w	r3, r3, #4
 800cf58:	2b04      	cmp	r3, #4
 800cf5a:	d109      	bne.n	800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf5c:	4b14      	ldr	r3, [pc, #80]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	08db      	lsrs	r3, r3, #3
 800cf62:	f003 0303 	and.w	r3, r3, #3
 800cf66:	4a13      	ldr	r2, [pc, #76]	; (800cfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cf68:	fa22 f303 	lsr.w	r3, r2, r3
 800cf6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf6e:	e1c2      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf70:	2300      	movs	r3, #0
 800cf72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf74:	e1bf      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cf76:	4b0e      	ldr	r3, [pc, #56]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf82:	d102      	bne.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cf84:	4b0c      	ldr	r3, [pc, #48]	; (800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cf86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf88:	e1b5      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf8e:	e1b2      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf90:	4b07      	ldr	r3, [pc, #28]	; (800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf9c:	d102      	bne.n	800cfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cf9e:	4b07      	ldr	r3, [pc, #28]	; (800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfa2:	e1a8      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfa8:	e1a5      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfae:	e1a2      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cfb0:	58024400 	.word	0x58024400
 800cfb4:	03d09000 	.word	0x03d09000
 800cfb8:	003d0900 	.word	0x003d0900
 800cfbc:	017d7840 	.word	0x017d7840
 800cfc0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cfc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfc8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cfcc:	430b      	orrs	r3, r1
 800cfce:	d173      	bne.n	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cfd0:	4b9c      	ldr	r3, [pc, #624]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cfd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cfd8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfe0:	d02f      	beq.n	800d042 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cfe8:	d863      	bhi.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d004      	beq.n	800cffa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cff6:	d012      	beq.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cff8:	e05b      	b.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cffa:	4b92      	ldr	r3, [pc, #584]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d006:	d107      	bne.n	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d008:	f107 0318 	add.w	r3, r7, #24
 800d00c:	4618      	mov	r0, r3
 800d00e:	f000 f991 	bl	800d334 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d016:	e16e      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d018:	2300      	movs	r3, #0
 800d01a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d01c:	e16b      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d01e:	4b89      	ldr	r3, [pc, #548]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d02a:	d107      	bne.n	800d03c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d02c:	f107 030c 	add.w	r3, r7, #12
 800d030:	4618      	mov	r0, r3
 800d032:	f000 fad3 	bl	800d5dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d03a:	e15c      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d03c:	2300      	movs	r3, #0
 800d03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d040:	e159      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d042:	4b80      	ldr	r3, [pc, #512]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d046:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d04a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d04c:	4b7d      	ldr	r3, [pc, #500]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f003 0304 	and.w	r3, r3, #4
 800d054:	2b04      	cmp	r3, #4
 800d056:	d10c      	bne.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800d058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d109      	bne.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d05e:	4b79      	ldr	r3, [pc, #484]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	08db      	lsrs	r3, r3, #3
 800d064:	f003 0303 	and.w	r3, r3, #3
 800d068:	4a77      	ldr	r2, [pc, #476]	; (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800d06a:	fa22 f303 	lsr.w	r3, r2, r3
 800d06e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d070:	e01e      	b.n	800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d072:	4b74      	ldr	r3, [pc, #464]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d07a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d07e:	d106      	bne.n	800d08e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800d080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d086:	d102      	bne.n	800d08e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d088:	4b70      	ldr	r3, [pc, #448]	; (800d24c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800d08a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d08c:	e010      	b.n	800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d08e:	4b6d      	ldr	r3, [pc, #436]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d09a:	d106      	bne.n	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800d09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d09e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0a2:	d102      	bne.n	800d0aa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d0a4:	4b6a      	ldr	r3, [pc, #424]	; (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800d0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0a8:	e002      	b.n	800d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d0ae:	e122      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d0b0:	e121      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0b6:	e11e      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d0b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0bc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d0c0:	430b      	orrs	r3, r1
 800d0c2:	d133      	bne.n	800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d0c4:	4b5f      	ldr	r3, [pc, #380]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d0cc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d004      	beq.n	800d0de <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800d0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0da:	d012      	beq.n	800d102 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800d0dc:	e023      	b.n	800d126 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d0de:	4b59      	ldr	r3, [pc, #356]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d0ea:	d107      	bne.n	800d0fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d0ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f000 fbc7 	bl	800d884 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0fa:	e0fc      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d100:	e0f9      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d102:	4b50      	ldr	r3, [pc, #320]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d10a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d10e:	d107      	bne.n	800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d110:	f107 0318 	add.w	r3, r7, #24
 800d114:	4618      	mov	r0, r3
 800d116:	f000 f90d 	bl	800d334 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d11a:	6a3b      	ldr	r3, [r7, #32]
 800d11c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d11e:	e0ea      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d120:	2300      	movs	r3, #0
 800d122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d124:	e0e7      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800d126:	2300      	movs	r3, #0
 800d128:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d12a:	e0e4      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d12c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d130:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d134:	430b      	orrs	r3, r1
 800d136:	f040 808d 	bne.w	800d254 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d13a:	4b42      	ldr	r3, [pc, #264]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d13e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d142:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d14a:	d06b      	beq.n	800d224 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800d14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d152:	d874      	bhi.n	800d23e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d15a:	d056      	beq.n	800d20a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800d15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d162:	d86c      	bhi.n	800d23e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d166:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d16a:	d03b      	beq.n	800d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d172:	d864      	bhi.n	800d23e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d17a:	d021      	beq.n	800d1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800d17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d182:	d85c      	bhi.n	800d23e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800d184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d186:	2b00      	cmp	r3, #0
 800d188:	d004      	beq.n	800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800d18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d190:	d004      	beq.n	800d19c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800d192:	e054      	b.n	800d23e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d194:	f000 f8b8 	bl	800d308 <HAL_RCCEx_GetD3PCLK1Freq>
 800d198:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d19a:	e0ac      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d19c:	4b29      	ldr	r3, [pc, #164]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d1a8:	d107      	bne.n	800d1ba <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1aa:	f107 0318 	add.w	r3, r7, #24
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f000 f8c0 	bl	800d334 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1b8:	e09d      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1be:	e09a      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d1c0:	4b20      	ldr	r3, [pc, #128]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1cc:	d107      	bne.n	800d1de <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1ce:	f107 030c 	add.w	r3, r7, #12
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f000 fa02 	bl	800d5dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1dc:	e08b      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d1e2:	e088      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d1e4:	4b17      	ldr	r3, [pc, #92]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f003 0304 	and.w	r3, r3, #4
 800d1ec:	2b04      	cmp	r3, #4
 800d1ee:	d109      	bne.n	800d204 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1f0:	4b14      	ldr	r3, [pc, #80]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	08db      	lsrs	r3, r3, #3
 800d1f6:	f003 0303 	and.w	r3, r3, #3
 800d1fa:	4a13      	ldr	r2, [pc, #76]	; (800d248 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800d1fc:	fa22 f303 	lsr.w	r3, r2, r3
 800d200:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d202:	e078      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d204:	2300      	movs	r3, #0
 800d206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d208:	e075      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d20a:	4b0e      	ldr	r3, [pc, #56]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d216:	d102      	bne.n	800d21e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800d218:	4b0c      	ldr	r3, [pc, #48]	; (800d24c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800d21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d21c:	e06b      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d21e:	2300      	movs	r3, #0
 800d220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d222:	e068      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d224:	4b07      	ldr	r3, [pc, #28]	; (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d22c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d230:	d102      	bne.n	800d238 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800d232:	4b07      	ldr	r3, [pc, #28]	; (800d250 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800d234:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d236:	e05e      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d238:	2300      	movs	r3, #0
 800d23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d23c:	e05b      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d23e:	2300      	movs	r3, #0
 800d240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d242:	e058      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800d244:	58024400 	.word	0x58024400
 800d248:	03d09000 	.word	0x03d09000
 800d24c:	003d0900 	.word	0x003d0900
 800d250:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d254:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d258:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d25c:	430b      	orrs	r3, r1
 800d25e:	d148      	bne.n	800d2f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d260:	4b27      	ldr	r3, [pc, #156]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d264:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d268:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d270:	d02a      	beq.n	800d2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800d272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d274:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d278:	d838      	bhi.n	800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800d27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d004      	beq.n	800d28a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800d280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d282:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d286:	d00d      	beq.n	800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800d288:	e030      	b.n	800d2ec <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d28a:	4b1d      	ldr	r3, [pc, #116]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d296:	d102      	bne.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800d298:	4b1a      	ldr	r3, [pc, #104]	; (800d304 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800d29a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d29c:	e02b      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2a2:	e028      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d2a4:	4b16      	ldr	r3, [pc, #88]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2b0:	d107      	bne.n	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d2b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 fae4 	bl	800d884 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2c0:	e019      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2c6:	e016      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2c8:	4b0d      	ldr	r3, [pc, #52]	; (800d300 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d2d4:	d107      	bne.n	800d2e6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2d6:	f107 0318 	add.w	r3, r7, #24
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f000 f82a 	bl	800d334 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2e4:	e007      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2ea:	e004      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2f0:	e001      	b.n	800d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3740      	adds	r7, #64	; 0x40
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	58024400 	.word	0x58024400
 800d304:	017d7840 	.word	0x017d7840

0800d308 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d30c:	f7fd ffd4 	bl	800b2b8 <HAL_RCC_GetHCLKFreq>
 800d310:	4602      	mov	r2, r0
 800d312:	4b06      	ldr	r3, [pc, #24]	; (800d32c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d314:	6a1b      	ldr	r3, [r3, #32]
 800d316:	091b      	lsrs	r3, r3, #4
 800d318:	f003 0307 	and.w	r3, r3, #7
 800d31c:	4904      	ldr	r1, [pc, #16]	; (800d330 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d31e:	5ccb      	ldrb	r3, [r1, r3]
 800d320:	f003 031f 	and.w	r3, r3, #31
 800d324:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d328:	4618      	mov	r0, r3
 800d32a:	bd80      	pop	{r7, pc}
 800d32c:	58024400 	.word	0x58024400
 800d330:	08017b68 	.word	0x08017b68

0800d334 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d334:	b480      	push	{r7}
 800d336:	b089      	sub	sp, #36	; 0x24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d33c:	4ba1      	ldr	r3, [pc, #644]	; (800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d340:	f003 0303 	and.w	r3, r3, #3
 800d344:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d346:	4b9f      	ldr	r3, [pc, #636]	; (800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d34a:	0b1b      	lsrs	r3, r3, #12
 800d34c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d350:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d352:	4b9c      	ldr	r3, [pc, #624]	; (800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d356:	091b      	lsrs	r3, r3, #4
 800d358:	f003 0301 	and.w	r3, r3, #1
 800d35c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d35e:	4b99      	ldr	r3, [pc, #612]	; (800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d362:	08db      	lsrs	r3, r3, #3
 800d364:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d368:	693a      	ldr	r2, [r7, #16]
 800d36a:	fb02 f303 	mul.w	r3, r2, r3
 800d36e:	ee07 3a90 	vmov	s15, r3
 800d372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d376:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f000 8111 	beq.w	800d5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d382:	69bb      	ldr	r3, [r7, #24]
 800d384:	2b02      	cmp	r3, #2
 800d386:	f000 8083 	beq.w	800d490 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	2b02      	cmp	r3, #2
 800d38e:	f200 80a1 	bhi.w	800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d003      	beq.n	800d3a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d056      	beq.n	800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d39e:	e099      	b.n	800d4d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3a0:	4b88      	ldr	r3, [pc, #544]	; (800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f003 0320 	and.w	r3, r3, #32
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d02d      	beq.n	800d408 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3ac:	4b85      	ldr	r3, [pc, #532]	; (800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	08db      	lsrs	r3, r3, #3
 800d3b2:	f003 0303 	and.w	r3, r3, #3
 800d3b6:	4a84      	ldr	r2, [pc, #528]	; (800d5c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d3b8:	fa22 f303 	lsr.w	r3, r2, r3
 800d3bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	ee07 3a90 	vmov	s15, r3
 800d3c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	ee07 3a90 	vmov	s15, r3
 800d3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3d6:	4b7b      	ldr	r3, [pc, #492]	; (800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3de:	ee07 3a90 	vmov	s15, r3
 800d3e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d402:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d406:	e087      	b.n	800d518 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	ee07 3a90 	vmov	s15, r3
 800d40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d412:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d41a:	4b6a      	ldr	r3, [pc, #424]	; (800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d422:	ee07 3a90 	vmov	s15, r3
 800d426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d42a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d42e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d43a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d43e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d442:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d446:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d44a:	e065      	b.n	800d518 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	ee07 3a90 	vmov	s15, r3
 800d452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d456:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d5d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d45a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d45e:	4b59      	ldr	r3, [pc, #356]	; (800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d466:	ee07 3a90 	vmov	s15, r3
 800d46a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d46e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d472:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d47a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d47e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d48a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d48e:	e043      	b.n	800d518 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	ee07 3a90 	vmov	s15, r3
 800d496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d49a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d49e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4a2:	4b48      	ldr	r3, [pc, #288]	; (800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4aa:	ee07 3a90 	vmov	s15, r3
 800d4ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d4ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4d2:	e021      	b.n	800d518 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	ee07 3a90 	vmov	s15, r3
 800d4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d5d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d4e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4e6:	4b37      	ldr	r3, [pc, #220]	; (800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ee:	ee07 3a90 	vmov	s15, r3
 800d4f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d5cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d4fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d50a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d516:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d518:	4b2a      	ldr	r3, [pc, #168]	; (800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d51c:	0a5b      	lsrs	r3, r3, #9
 800d51e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d522:	ee07 3a90 	vmov	s15, r3
 800d526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d52a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d52e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d532:	edd7 6a07 	vldr	s13, [r7, #28]
 800d536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d53a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d53e:	ee17 2a90 	vmov	r2, s15
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d546:	4b1f      	ldr	r3, [pc, #124]	; (800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d54a:	0c1b      	lsrs	r3, r3, #16
 800d54c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d550:	ee07 3a90 	vmov	s15, r3
 800d554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d558:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d55c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d560:	edd7 6a07 	vldr	s13, [r7, #28]
 800d564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d56c:	ee17 2a90 	vmov	r2, s15
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d574:	4b13      	ldr	r3, [pc, #76]	; (800d5c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d578:	0e1b      	lsrs	r3, r3, #24
 800d57a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d57e:	ee07 3a90 	vmov	s15, r3
 800d582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d58a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d58e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d59a:	ee17 2a90 	vmov	r2, s15
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d5a2:	e008      	b.n	800d5b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	609a      	str	r2, [r3, #8]
}
 800d5b6:	bf00      	nop
 800d5b8:	3724      	adds	r7, #36	; 0x24
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr
 800d5c2:	bf00      	nop
 800d5c4:	58024400 	.word	0x58024400
 800d5c8:	03d09000 	.word	0x03d09000
 800d5cc:	46000000 	.word	0x46000000
 800d5d0:	4c742400 	.word	0x4c742400
 800d5d4:	4a742400 	.word	0x4a742400
 800d5d8:	4bbebc20 	.word	0x4bbebc20

0800d5dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b089      	sub	sp, #36	; 0x24
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5e4:	4ba1      	ldr	r3, [pc, #644]	; (800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5e8:	f003 0303 	and.w	r3, r3, #3
 800d5ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d5ee:	4b9f      	ldr	r3, [pc, #636]	; (800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f2:	0d1b      	lsrs	r3, r3, #20
 800d5f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d5fa:	4b9c      	ldr	r3, [pc, #624]	; (800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5fe:	0a1b      	lsrs	r3, r3, #8
 800d600:	f003 0301 	and.w	r3, r3, #1
 800d604:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d606:	4b99      	ldr	r3, [pc, #612]	; (800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d60a:	08db      	lsrs	r3, r3, #3
 800d60c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d610:	693a      	ldr	r2, [r7, #16]
 800d612:	fb02 f303 	mul.w	r3, r2, r3
 800d616:	ee07 3a90 	vmov	s15, r3
 800d61a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d61e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	2b00      	cmp	r3, #0
 800d626:	f000 8111 	beq.w	800d84c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	2b02      	cmp	r3, #2
 800d62e:	f000 8083 	beq.w	800d738 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	2b02      	cmp	r3, #2
 800d636:	f200 80a1 	bhi.w	800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d003      	beq.n	800d648 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d640:	69bb      	ldr	r3, [r7, #24]
 800d642:	2b01      	cmp	r3, #1
 800d644:	d056      	beq.n	800d6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d646:	e099      	b.n	800d77c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d648:	4b88      	ldr	r3, [pc, #544]	; (800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	f003 0320 	and.w	r3, r3, #32
 800d650:	2b00      	cmp	r3, #0
 800d652:	d02d      	beq.n	800d6b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d654:	4b85      	ldr	r3, [pc, #532]	; (800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	08db      	lsrs	r3, r3, #3
 800d65a:	f003 0303 	and.w	r3, r3, #3
 800d65e:	4a84      	ldr	r2, [pc, #528]	; (800d870 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d660:	fa22 f303 	lsr.w	r3, r2, r3
 800d664:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	ee07 3a90 	vmov	s15, r3
 800d66c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	ee07 3a90 	vmov	s15, r3
 800d676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d67a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d67e:	4b7b      	ldr	r3, [pc, #492]	; (800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d686:	ee07 3a90 	vmov	s15, r3
 800d68a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d68e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d692:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d69a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d69e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d6ae:	e087      	b.n	800d7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	ee07 3a90 	vmov	s15, r3
 800d6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d878 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d6be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6c2:	4b6a      	ldr	r3, [pc, #424]	; (800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ca:	ee07 3a90 	vmov	s15, r3
 800d6ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6f2:	e065      	b.n	800d7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	ee07 3a90 	vmov	s15, r3
 800d6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d87c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d706:	4b59      	ldr	r3, [pc, #356]	; (800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d70a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d70e:	ee07 3a90 	vmov	s15, r3
 800d712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d716:	ed97 6a03 	vldr	s12, [r7, #12]
 800d71a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d71e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d72a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d72e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d736:	e043      	b.n	800d7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	ee07 3a90 	vmov	s15, r3
 800d73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d742:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d880 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d74a:	4b48      	ldr	r3, [pc, #288]	; (800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d752:	ee07 3a90 	vmov	s15, r3
 800d756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d75a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d75e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d76a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d76e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d772:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d77a:	e021      	b.n	800d7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	ee07 3a90 	vmov	s15, r3
 800d782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d786:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d87c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d78a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d78e:	4b37      	ldr	r3, [pc, #220]	; (800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d796:	ee07 3a90 	vmov	s15, r3
 800d79a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d79e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d874 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d7a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d7c0:	4b2a      	ldr	r3, [pc, #168]	; (800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7c4:	0a5b      	lsrs	r3, r3, #9
 800d7c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7ca:	ee07 3a90 	vmov	s15, r3
 800d7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d7d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7da:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7e6:	ee17 2a90 	vmov	r2, s15
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d7ee:	4b1f      	ldr	r3, [pc, #124]	; (800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f2:	0c1b      	lsrs	r3, r3, #16
 800d7f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7f8:	ee07 3a90 	vmov	s15, r3
 800d7fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d800:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d804:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d808:	edd7 6a07 	vldr	s13, [r7, #28]
 800d80c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d814:	ee17 2a90 	vmov	r2, s15
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d81c:	4b13      	ldr	r3, [pc, #76]	; (800d86c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d820:	0e1b      	lsrs	r3, r3, #24
 800d822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d826:	ee07 3a90 	vmov	s15, r3
 800d82a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d82e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d832:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d836:	edd7 6a07 	vldr	s13, [r7, #28]
 800d83a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d83e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d842:	ee17 2a90 	vmov	r2, s15
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d84a:	e008      	b.n	800d85e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2200      	movs	r2, #0
 800d850:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2200      	movs	r2, #0
 800d85c:	609a      	str	r2, [r3, #8]
}
 800d85e:	bf00      	nop
 800d860:	3724      	adds	r7, #36	; 0x24
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr
 800d86a:	bf00      	nop
 800d86c:	58024400 	.word	0x58024400
 800d870:	03d09000 	.word	0x03d09000
 800d874:	46000000 	.word	0x46000000
 800d878:	4c742400 	.word	0x4c742400
 800d87c:	4a742400 	.word	0x4a742400
 800d880:	4bbebc20 	.word	0x4bbebc20

0800d884 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d884:	b480      	push	{r7}
 800d886:	b089      	sub	sp, #36	; 0x24
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d88c:	4ba0      	ldr	r3, [pc, #640]	; (800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d890:	f003 0303 	and.w	r3, r3, #3
 800d894:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d896:	4b9e      	ldr	r3, [pc, #632]	; (800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d89a:	091b      	lsrs	r3, r3, #4
 800d89c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d8a2:	4b9b      	ldr	r3, [pc, #620]	; (800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a6:	f003 0301 	and.w	r3, r3, #1
 800d8aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d8ac:	4b98      	ldr	r3, [pc, #608]	; (800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8b0:	08db      	lsrs	r3, r3, #3
 800d8b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d8b6:	693a      	ldr	r2, [r7, #16]
 800d8b8:	fb02 f303 	mul.w	r3, r2, r3
 800d8bc:	ee07 3a90 	vmov	s15, r3
 800d8c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	f000 8111 	beq.w	800daf2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	f000 8083 	beq.w	800d9de <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d8d8:	69bb      	ldr	r3, [r7, #24]
 800d8da:	2b02      	cmp	r3, #2
 800d8dc:	f200 80a1 	bhi.w	800da22 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d003      	beq.n	800d8ee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d056      	beq.n	800d99a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d8ec:	e099      	b.n	800da22 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8ee:	4b88      	ldr	r3, [pc, #544]	; (800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f003 0320 	and.w	r3, r3, #32
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d02d      	beq.n	800d956 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d8fa:	4b85      	ldr	r3, [pc, #532]	; (800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	08db      	lsrs	r3, r3, #3
 800d900:	f003 0303 	and.w	r3, r3, #3
 800d904:	4a83      	ldr	r2, [pc, #524]	; (800db14 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d906:	fa22 f303 	lsr.w	r3, r2, r3
 800d90a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	ee07 3a90 	vmov	s15, r3
 800d912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	ee07 3a90 	vmov	s15, r3
 800d91c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d920:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d924:	4b7a      	ldr	r3, [pc, #488]	; (800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d92c:	ee07 3a90 	vmov	s15, r3
 800d930:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d934:	ed97 6a03 	vldr	s12, [r7, #12]
 800d938:	eddf 5a77 	vldr	s11, [pc, #476]	; 800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d93c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d940:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d944:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d948:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d94c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d950:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d954:	e087      	b.n	800da66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	ee07 3a90 	vmov	s15, r3
 800d95c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d960:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800db1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d964:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d968:	4b69      	ldr	r3, [pc, #420]	; (800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d96c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d970:	ee07 3a90 	vmov	s15, r3
 800d974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d978:	ed97 6a03 	vldr	s12, [r7, #12]
 800d97c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d980:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d984:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d988:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d98c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d990:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d994:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d998:	e065      	b.n	800da66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	ee07 3a90 	vmov	s15, r3
 800d9a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9a4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800db20 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d9a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9ac:	4b58      	ldr	r3, [pc, #352]	; (800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9b4:	ee07 3a90 	vmov	s15, r3
 800d9b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9c0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9dc:	e043      	b.n	800da66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	ee07 3a90 	vmov	s15, r3
 800d9e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9e8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800db24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d9ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9f0:	4b47      	ldr	r3, [pc, #284]	; (800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9f8:	ee07 3a90 	vmov	s15, r3
 800d9fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da00:	ed97 6a03 	vldr	s12, [r7, #12]
 800da04:	eddf 5a44 	vldr	s11, [pc, #272]	; 800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da20:	e021      	b.n	800da66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	ee07 3a90 	vmov	s15, r3
 800da28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da2c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800db1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800da30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da34:	4b36      	ldr	r3, [pc, #216]	; (800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da3c:	ee07 3a90 	vmov	s15, r3
 800da40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da44:	ed97 6a03 	vldr	s12, [r7, #12]
 800da48:	eddf 5a33 	vldr	s11, [pc, #204]	; 800db18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da64:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800da66:	4b2a      	ldr	r3, [pc, #168]	; (800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da6a:	0a5b      	lsrs	r3, r3, #9
 800da6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da70:	ee07 3a90 	vmov	s15, r3
 800da74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800da7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da80:	edd7 6a07 	vldr	s13, [r7, #28]
 800da84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da8c:	ee17 2a90 	vmov	r2, s15
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800da94:	4b1e      	ldr	r3, [pc, #120]	; (800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da98:	0c1b      	lsrs	r3, r3, #16
 800da9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da9e:	ee07 3a90 	vmov	s15, r3
 800daa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800daaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800daae:	edd7 6a07 	vldr	s13, [r7, #28]
 800dab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daba:	ee17 2a90 	vmov	r2, s15
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dac2:	4b13      	ldr	r3, [pc, #76]	; (800db10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dac6:	0e1b      	lsrs	r3, r3, #24
 800dac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dacc:	ee07 3a90 	vmov	s15, r3
 800dad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dad8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dadc:	edd7 6a07 	vldr	s13, [r7, #28]
 800dae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dae8:	ee17 2a90 	vmov	r2, s15
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800daf0:	e008      	b.n	800db04 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	609a      	str	r2, [r3, #8]
}
 800db04:	bf00      	nop
 800db06:	3724      	adds	r7, #36	; 0x24
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr
 800db10:	58024400 	.word	0x58024400
 800db14:	03d09000 	.word	0x03d09000
 800db18:	46000000 	.word	0x46000000
 800db1c:	4c742400 	.word	0x4c742400
 800db20:	4a742400 	.word	0x4a742400
 800db24:	4bbebc20 	.word	0x4bbebc20

0800db28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db32:	2300      	movs	r3, #0
 800db34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800db36:	4b53      	ldr	r3, [pc, #332]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800db38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db3a:	f003 0303 	and.w	r3, r3, #3
 800db3e:	2b03      	cmp	r3, #3
 800db40:	d101      	bne.n	800db46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800db42:	2301      	movs	r3, #1
 800db44:	e099      	b.n	800dc7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800db46:	4b4f      	ldr	r3, [pc, #316]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4a4e      	ldr	r2, [pc, #312]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800db4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800db50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db52:	f7f6 fc53 	bl	80043fc <HAL_GetTick>
 800db56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db58:	e008      	b.n	800db6c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800db5a:	f7f6 fc4f 	bl	80043fc <HAL_GetTick>
 800db5e:	4602      	mov	r2, r0
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	1ad3      	subs	r3, r2, r3
 800db64:	2b02      	cmp	r3, #2
 800db66:	d901      	bls.n	800db6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800db68:	2303      	movs	r3, #3
 800db6a:	e086      	b.n	800dc7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db6c:	4b45      	ldr	r3, [pc, #276]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db74:	2b00      	cmp	r3, #0
 800db76:	d1f0      	bne.n	800db5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800db78:	4b42      	ldr	r3, [pc, #264]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800db7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	031b      	lsls	r3, r3, #12
 800db86:	493f      	ldr	r1, [pc, #252]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800db88:	4313      	orrs	r3, r2
 800db8a:	628b      	str	r3, [r1, #40]	; 0x28
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	3b01      	subs	r3, #1
 800db92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	689b      	ldr	r3, [r3, #8]
 800db9a:	3b01      	subs	r3, #1
 800db9c:	025b      	lsls	r3, r3, #9
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	431a      	orrs	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	68db      	ldr	r3, [r3, #12]
 800dba6:	3b01      	subs	r3, #1
 800dba8:	041b      	lsls	r3, r3, #16
 800dbaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dbae:	431a      	orrs	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	691b      	ldr	r3, [r3, #16]
 800dbb4:	3b01      	subs	r3, #1
 800dbb6:	061b      	lsls	r3, r3, #24
 800dbb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dbbc:	4931      	ldr	r1, [pc, #196]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dbc2:	4b30      	ldr	r3, [pc, #192]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dbc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	695b      	ldr	r3, [r3, #20]
 800dbce:	492d      	ldr	r1, [pc, #180]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dbd4:	4b2b      	ldr	r3, [pc, #172]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd8:	f023 0220 	bic.w	r2, r3, #32
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	699b      	ldr	r3, [r3, #24]
 800dbe0:	4928      	ldr	r1, [pc, #160]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dbe6:	4b27      	ldr	r3, [pc, #156]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dbe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbea:	4a26      	ldr	r2, [pc, #152]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dbec:	f023 0310 	bic.w	r3, r3, #16
 800dbf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dbf2:	4b24      	ldr	r3, [pc, #144]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dbf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbf6:	4b24      	ldr	r3, [pc, #144]	; (800dc88 <RCCEx_PLL2_Config+0x160>)
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	69d2      	ldr	r2, [r2, #28]
 800dbfe:	00d2      	lsls	r2, r2, #3
 800dc00:	4920      	ldr	r1, [pc, #128]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dc02:	4313      	orrs	r3, r2
 800dc04:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dc06:	4b1f      	ldr	r3, [pc, #124]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc0a:	4a1e      	ldr	r2, [pc, #120]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dc0c:	f043 0310 	orr.w	r3, r3, #16
 800dc10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d106      	bne.n	800dc26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dc18:	4b1a      	ldr	r3, [pc, #104]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc1c:	4a19      	ldr	r2, [pc, #100]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dc1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc22:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dc24:	e00f      	b.n	800dc46 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d106      	bne.n	800dc3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dc2c:	4b15      	ldr	r3, [pc, #84]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc30:	4a14      	ldr	r2, [pc, #80]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dc32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc36:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dc38:	e005      	b.n	800dc46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dc3a:	4b12      	ldr	r3, [pc, #72]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc3e:	4a11      	ldr	r2, [pc, #68]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dc40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dc44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dc46:	4b0f      	ldr	r3, [pc, #60]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a0e      	ldr	r2, [pc, #56]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dc4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dc50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc52:	f7f6 fbd3 	bl	80043fc <HAL_GetTick>
 800dc56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc58:	e008      	b.n	800dc6c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc5a:	f7f6 fbcf 	bl	80043fc <HAL_GetTick>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	1ad3      	subs	r3, r2, r3
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	d901      	bls.n	800dc6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dc68:	2303      	movs	r3, #3
 800dc6a:	e006      	b.n	800dc7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc6c:	4b05      	ldr	r3, [pc, #20]	; (800dc84 <RCCEx_PLL2_Config+0x15c>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d0f0      	beq.n	800dc5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dc78:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3710      	adds	r7, #16
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	58024400 	.word	0x58024400
 800dc88:	ffff0007 	.word	0xffff0007

0800dc8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc96:	2300      	movs	r3, #0
 800dc98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc9a:	4b53      	ldr	r3, [pc, #332]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dc9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc9e:	f003 0303 	and.w	r3, r3, #3
 800dca2:	2b03      	cmp	r3, #3
 800dca4:	d101      	bne.n	800dcaa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e099      	b.n	800ddde <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dcaa:	4b4f      	ldr	r3, [pc, #316]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4a4e      	ldr	r2, [pc, #312]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dcb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dcb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcb6:	f7f6 fba1 	bl	80043fc <HAL_GetTick>
 800dcba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dcbc:	e008      	b.n	800dcd0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dcbe:	f7f6 fb9d 	bl	80043fc <HAL_GetTick>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d901      	bls.n	800dcd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dccc:	2303      	movs	r3, #3
 800dcce:	e086      	b.n	800ddde <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dcd0:	4b45      	ldr	r3, [pc, #276]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1f0      	bne.n	800dcbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dcdc:	4b42      	ldr	r3, [pc, #264]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dcde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dce0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	051b      	lsls	r3, r3, #20
 800dcea:	493f      	ldr	r1, [pc, #252]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dcec:	4313      	orrs	r3, r2
 800dcee:	628b      	str	r3, [r1, #40]	; 0x28
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	3b01      	subs	r3, #1
 800dcf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	689b      	ldr	r3, [r3, #8]
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	025b      	lsls	r3, r3, #9
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	431a      	orrs	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	68db      	ldr	r3, [r3, #12]
 800dd0a:	3b01      	subs	r3, #1
 800dd0c:	041b      	lsls	r3, r3, #16
 800dd0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dd12:	431a      	orrs	r2, r3
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	691b      	ldr	r3, [r3, #16]
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	061b      	lsls	r3, r3, #24
 800dd1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dd20:	4931      	ldr	r1, [pc, #196]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dd22:	4313      	orrs	r3, r2
 800dd24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dd26:	4b30      	ldr	r3, [pc, #192]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	695b      	ldr	r3, [r3, #20]
 800dd32:	492d      	ldr	r1, [pc, #180]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dd34:	4313      	orrs	r3, r2
 800dd36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dd38:	4b2b      	ldr	r3, [pc, #172]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	699b      	ldr	r3, [r3, #24]
 800dd44:	4928      	ldr	r1, [pc, #160]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dd46:	4313      	orrs	r3, r2
 800dd48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dd4a:	4b27      	ldr	r3, [pc, #156]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd4e:	4a26      	ldr	r2, [pc, #152]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dd50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dd56:	4b24      	ldr	r3, [pc, #144]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dd58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd5a:	4b24      	ldr	r3, [pc, #144]	; (800ddec <RCCEx_PLL3_Config+0x160>)
 800dd5c:	4013      	ands	r3, r2
 800dd5e:	687a      	ldr	r2, [r7, #4]
 800dd60:	69d2      	ldr	r2, [r2, #28]
 800dd62:	00d2      	lsls	r2, r2, #3
 800dd64:	4920      	ldr	r1, [pc, #128]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dd66:	4313      	orrs	r3, r2
 800dd68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dd6a:	4b1f      	ldr	r3, [pc, #124]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd6e:	4a1e      	ldr	r2, [pc, #120]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dd70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d106      	bne.n	800dd8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dd7c:	4b1a      	ldr	r3, [pc, #104]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd80:	4a19      	ldr	r2, [pc, #100]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dd82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800dd86:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dd88:	e00f      	b.n	800ddaa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	2b01      	cmp	r3, #1
 800dd8e:	d106      	bne.n	800dd9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dd90:	4b15      	ldr	r3, [pc, #84]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd94:	4a14      	ldr	r2, [pc, #80]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dd96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dd9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dd9c:	e005      	b.n	800ddaa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dd9e:	4b12      	ldr	r3, [pc, #72]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dda0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda2:	4a11      	ldr	r2, [pc, #68]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800dda4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dda8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ddaa:	4b0f      	ldr	r3, [pc, #60]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4a0e      	ldr	r2, [pc, #56]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800ddb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddb6:	f7f6 fb21 	bl	80043fc <HAL_GetTick>
 800ddba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ddbc:	e008      	b.n	800ddd0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ddbe:	f7f6 fb1d 	bl	80043fc <HAL_GetTick>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	1ad3      	subs	r3, r2, r3
 800ddc8:	2b02      	cmp	r3, #2
 800ddca:	d901      	bls.n	800ddd0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ddcc:	2303      	movs	r3, #3
 800ddce:	e006      	b.n	800ddde <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ddd0:	4b05      	ldr	r3, [pc, #20]	; (800dde8 <RCCEx_PLL3_Config+0x15c>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d0f0      	beq.n	800ddbe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3710      	adds	r7, #16
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
 800dde6:	bf00      	nop
 800dde8:	58024400 	.word	0x58024400
 800ddec:	ffff0007 	.word	0xffff0007

0800ddf0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d071      	beq.n	800dee6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800de08:	b2db      	uxtb	r3, r3
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d106      	bne.n	800de1c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f7f4 fd98 	bl	800294c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2202      	movs	r2, #2
 800de20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	68db      	ldr	r3, [r3, #12]
 800de2a:	f003 0310 	and.w	r3, r3, #16
 800de2e:	2b10      	cmp	r3, #16
 800de30:	d050      	beq.n	800ded4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	22ca      	movs	r2, #202	; 0xca
 800de38:	625a      	str	r2, [r3, #36]	; 0x24
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2253      	movs	r2, #83	; 0x53
 800de40:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f000 fa4a 	bl	800e2dc <RTC_EnterInitMode>
 800de48:	4603      	mov	r3, r0
 800de4a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800de4c:	7bfb      	ldrb	r3, [r7, #15]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d124      	bne.n	800de9c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	6899      	ldr	r1, [r3, #8]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	4b24      	ldr	r3, [pc, #144]	; (800def0 <HAL_RTC_Init+0x100>)
 800de5e:	400b      	ands	r3, r1
 800de60:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	6899      	ldr	r1, [r3, #8]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	685a      	ldr	r2, [r3, #4]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	691b      	ldr	r3, [r3, #16]
 800de70:	431a      	orrs	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	699b      	ldr	r3, [r3, #24]
 800de76:	431a      	orrs	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	430a      	orrs	r2, r1
 800de7e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	689b      	ldr	r3, [r3, #8]
 800de84:	0419      	lsls	r1, r3, #16
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	68da      	ldr	r2, [r3, #12]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	430a      	orrs	r2, r1
 800de90:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 fa56 	bl	800e344 <RTC_ExitInitMode>
 800de98:	4603      	mov	r3, r0
 800de9a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800de9c:	7bfb      	ldrb	r3, [r7, #15]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d113      	bne.n	800deca <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f022 0203 	bic.w	r2, r2, #3
 800deb0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	69da      	ldr	r2, [r3, #28]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	695b      	ldr	r3, [r3, #20]
 800dec0:	431a      	orrs	r2, r3
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	430a      	orrs	r2, r1
 800dec8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	22ff      	movs	r2, #255	; 0xff
 800ded0:	625a      	str	r2, [r3, #36]	; 0x24
 800ded2:	e001      	b.n	800ded8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800ded4:	2300      	movs	r3, #0
 800ded6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ded8:	7bfb      	ldrb	r3, [r7, #15]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d103      	bne.n	800dee6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2201      	movs	r2, #1
 800dee2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800dee6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	ff8fffbf 	.word	0xff8fffbf

0800def4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800def4:	b590      	push	{r4, r7, lr}
 800def6:	b087      	sub	sp, #28
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f893 3020 	ldrb.w	r3, [r3, #32]
 800df06:	2b01      	cmp	r3, #1
 800df08:	d101      	bne.n	800df0e <HAL_RTC_SetTime+0x1a>
 800df0a:	2302      	movs	r3, #2
 800df0c:	e089      	b.n	800e022 <HAL_RTC_SetTime+0x12e>
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2201      	movs	r2, #1
 800df12:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2202      	movs	r2, #2
 800df1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	22ca      	movs	r2, #202	; 0xca
 800df24:	625a      	str	r2, [r3, #36]	; 0x24
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2253      	movs	r2, #83	; 0x53
 800df2c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800df2e:	68f8      	ldr	r0, [r7, #12]
 800df30:	f000 f9d4 	bl	800e2dc <RTC_EnterInitMode>
 800df34:	4603      	mov	r3, r0
 800df36:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800df38:	7cfb      	ldrb	r3, [r7, #19]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d161      	bne.n	800e002 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d126      	bne.n	800df92 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	689b      	ldr	r3, [r3, #8]
 800df4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d102      	bne.n	800df58 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	2200      	movs	r2, #0
 800df56:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	4618      	mov	r0, r3
 800df5e:	f000 fa2f 	bl	800e3c0 <RTC_ByteToBcd2>
 800df62:	4603      	mov	r3, r0
 800df64:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	785b      	ldrb	r3, [r3, #1]
 800df6a:	4618      	mov	r0, r3
 800df6c:	f000 fa28 	bl	800e3c0 <RTC_ByteToBcd2>
 800df70:	4603      	mov	r3, r0
 800df72:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800df74:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	789b      	ldrb	r3, [r3, #2]
 800df7a:	4618      	mov	r0, r3
 800df7c:	f000 fa20 	bl	800e3c0 <RTC_ByteToBcd2>
 800df80:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800df82:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	78db      	ldrb	r3, [r3, #3]
 800df8a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800df8c:	4313      	orrs	r3, r2
 800df8e:	617b      	str	r3, [r7, #20]
 800df90:	e018      	b.n	800dfc4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d102      	bne.n	800dfa6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	785b      	ldrb	r3, [r3, #1]
 800dfb0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dfb2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800dfb4:	68ba      	ldr	r2, [r7, #8]
 800dfb6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800dfb8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	78db      	ldrb	r3, [r3, #3]
 800dfbe:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681a      	ldr	r2, [r3, #0]
 800dfc8:	6979      	ldr	r1, [r7, #20]
 800dfca:	4b18      	ldr	r3, [pc, #96]	; (800e02c <HAL_RTC_SetTime+0x138>)
 800dfcc:	400b      	ands	r3, r1
 800dfce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	689a      	ldr	r2, [r3, #8]
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dfde:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	6899      	ldr	r1, [r3, #8]
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	68da      	ldr	r2, [r3, #12]
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	691b      	ldr	r3, [r3, #16]
 800dfee:	431a      	orrs	r2, r3
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	430a      	orrs	r2, r1
 800dff6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800dff8:	68f8      	ldr	r0, [r7, #12]
 800dffa:	f000 f9a3 	bl	800e344 <RTC_ExitInitMode>
 800dffe:	4603      	mov	r3, r0
 800e000:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	22ff      	movs	r2, #255	; 0xff
 800e008:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800e00a:	7cfb      	ldrb	r3, [r7, #19]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d103      	bne.n	800e018 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2201      	movs	r2, #1
 800e014:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2200      	movs	r2, #0
 800e01c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800e020:	7cfb      	ldrb	r3, [r7, #19]
}
 800e022:	4618      	mov	r0, r3
 800e024:	371c      	adds	r7, #28
 800e026:	46bd      	mov	sp, r7
 800e028:	bd90      	pop	{r4, r7, pc}
 800e02a:	bf00      	nop
 800e02c:	007f7f7f 	.word	0x007f7f7f

0800e030 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b086      	sub	sp, #24
 800e034:	af00      	add	r7, sp, #0
 800e036:	60f8      	str	r0, [r7, #12]
 800e038:	60b9      	str	r1, [r7, #8]
 800e03a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	691b      	ldr	r3, [r3, #16]
 800e04c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	4b22      	ldr	r3, [pc, #136]	; (800e0e4 <HAL_RTC_GetTime+0xb4>)
 800e05c:	4013      	ands	r3, r2
 800e05e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	0c1b      	lsrs	r3, r3, #16
 800e064:	b2db      	uxtb	r3, r3
 800e066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e06a:	b2da      	uxtb	r2, r3
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	0a1b      	lsrs	r3, r3, #8
 800e074:	b2db      	uxtb	r3, r3
 800e076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e07a:	b2da      	uxtb	r2, r3
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	b2db      	uxtb	r3, r3
 800e084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e088:	b2da      	uxtb	r2, r3
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	0d9b      	lsrs	r3, r3, #22
 800e092:	b2db      	uxtb	r3, r3
 800e094:	f003 0301 	and.w	r3, r3, #1
 800e098:	b2da      	uxtb	r2, r3
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d11a      	bne.n	800e0da <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f000 f9a9 	bl	800e400 <RTC_Bcd2ToByte>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	785b      	ldrb	r3, [r3, #1]
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f000 f9a0 	bl	800e400 <RTC_Bcd2ToByte>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	789b      	ldrb	r3, [r3, #2]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f000 f997 	bl	800e400 <RTC_Bcd2ToByte>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800e0da:	2300      	movs	r3, #0
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3718      	adds	r7, #24
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	007f7f7f 	.word	0x007f7f7f

0800e0e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e0e8:	b590      	push	{r4, r7, lr}
 800e0ea:	b087      	sub	sp, #28
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d101      	bne.n	800e102 <HAL_RTC_SetDate+0x1a>
 800e0fe:	2302      	movs	r3, #2
 800e100:	e073      	b.n	800e1ea <HAL_RTC_SetDate+0x102>
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2201      	movs	r2, #1
 800e106:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2202      	movs	r2, #2
 800e10e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d10e      	bne.n	800e136 <HAL_RTC_SetDate+0x4e>
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	785b      	ldrb	r3, [r3, #1]
 800e11c:	f003 0310 	and.w	r3, r3, #16
 800e120:	2b00      	cmp	r3, #0
 800e122:	d008      	beq.n	800e136 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	785b      	ldrb	r3, [r3, #1]
 800e128:	f023 0310 	bic.w	r3, r3, #16
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	330a      	adds	r3, #10
 800e130:	b2da      	uxtb	r2, r3
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d11c      	bne.n	800e176 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	78db      	ldrb	r3, [r3, #3]
 800e140:	4618      	mov	r0, r3
 800e142:	f000 f93d 	bl	800e3c0 <RTC_ByteToBcd2>
 800e146:	4603      	mov	r3, r0
 800e148:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	785b      	ldrb	r3, [r3, #1]
 800e14e:	4618      	mov	r0, r3
 800e150:	f000 f936 	bl	800e3c0 <RTC_ByteToBcd2>
 800e154:	4603      	mov	r3, r0
 800e156:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e158:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	789b      	ldrb	r3, [r3, #2]
 800e15e:	4618      	mov	r0, r3
 800e160:	f000 f92e 	bl	800e3c0 <RTC_ByteToBcd2>
 800e164:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800e166:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800e170:	4313      	orrs	r3, r2
 800e172:	617b      	str	r3, [r7, #20]
 800e174:	e00e      	b.n	800e194 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	78db      	ldrb	r3, [r3, #3]
 800e17a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	785b      	ldrb	r3, [r3, #1]
 800e180:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800e182:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800e184:	68ba      	ldr	r2, [r7, #8]
 800e186:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800e188:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800e190:	4313      	orrs	r3, r2
 800e192:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	22ca      	movs	r2, #202	; 0xca
 800e19a:	625a      	str	r2, [r3, #36]	; 0x24
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2253      	movs	r2, #83	; 0x53
 800e1a2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800e1a4:	68f8      	ldr	r0, [r7, #12]
 800e1a6:	f000 f899 	bl	800e2dc <RTC_EnterInitMode>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800e1ae:	7cfb      	ldrb	r3, [r7, #19]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d10a      	bne.n	800e1ca <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681a      	ldr	r2, [r3, #0]
 800e1b8:	6979      	ldr	r1, [r7, #20]
 800e1ba:	4b0e      	ldr	r3, [pc, #56]	; (800e1f4 <HAL_RTC_SetDate+0x10c>)
 800e1bc:	400b      	ands	r3, r1
 800e1be:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800e1c0:	68f8      	ldr	r0, [r7, #12]
 800e1c2:	f000 f8bf 	bl	800e344 <RTC_ExitInitMode>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	22ff      	movs	r2, #255	; 0xff
 800e1d0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800e1d2:	7cfb      	ldrb	r3, [r7, #19]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d103      	bne.n	800e1e0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800e1e8:	7cfb      	ldrb	r3, [r7, #19]


}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	371c      	adds	r7, #28
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd90      	pop	{r4, r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	00ffff3f 	.word	0x00ffff3f

0800e1f8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b086      	sub	sp, #24
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	60f8      	str	r0, [r7, #12]
 800e200:	60b9      	str	r1, [r7, #8]
 800e202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	685a      	ldr	r2, [r3, #4]
 800e20a:	4b21      	ldr	r3, [pc, #132]	; (800e290 <HAL_RTC_GetDate+0x98>)
 800e20c:	4013      	ands	r3, r2
 800e20e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	0c1b      	lsrs	r3, r3, #16
 800e214:	b2da      	uxtb	r2, r3
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	0a1b      	lsrs	r3, r3, #8
 800e21e:	b2db      	uxtb	r3, r3
 800e220:	f003 031f 	and.w	r3, r3, #31
 800e224:	b2da      	uxtb	r2, r3
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e232:	b2da      	uxtb	r2, r3
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	0b5b      	lsrs	r3, r3, #13
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	f003 0307 	and.w	r3, r3, #7
 800e242:	b2da      	uxtb	r2, r3
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d11a      	bne.n	800e284 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	78db      	ldrb	r3, [r3, #3]
 800e252:	4618      	mov	r0, r3
 800e254:	f000 f8d4 	bl	800e400 <RTC_Bcd2ToByte>
 800e258:	4603      	mov	r3, r0
 800e25a:	461a      	mov	r2, r3
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	785b      	ldrb	r3, [r3, #1]
 800e264:	4618      	mov	r0, r3
 800e266:	f000 f8cb 	bl	800e400 <RTC_Bcd2ToByte>
 800e26a:	4603      	mov	r3, r0
 800e26c:	461a      	mov	r2, r3
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	789b      	ldrb	r3, [r3, #2]
 800e276:	4618      	mov	r0, r3
 800e278:	f000 f8c2 	bl	800e400 <RTC_Bcd2ToByte>
 800e27c:	4603      	mov	r3, r0
 800e27e:	461a      	mov	r2, r3
 800e280:	68bb      	ldr	r3, [r7, #8]
 800e282:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800e284:	2300      	movs	r3, #0
}
 800e286:	4618      	mov	r0, r3
 800e288:	3718      	adds	r7, #24
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	00ffff3f 	.word	0x00ffff3f

0800e294 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4a0d      	ldr	r2, [pc, #52]	; (800e2d8 <HAL_RTC_WaitForSynchro+0x44>)
 800e2a2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800e2a4:	f7f6 f8aa 	bl	80043fc <HAL_GetTick>
 800e2a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e2aa:	e009      	b.n	800e2c0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800e2ac:	f7f6 f8a6 	bl	80043fc <HAL_GetTick>
 800e2b0:	4602      	mov	r2, r0
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	1ad3      	subs	r3, r2, r3
 800e2b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e2ba:	d901      	bls.n	800e2c0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800e2bc:	2303      	movs	r3, #3
 800e2be:	e007      	b.n	800e2d0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	f003 0320 	and.w	r3, r3, #32
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d0ee      	beq.n	800e2ac <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800e2ce:	2300      	movs	r3, #0
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3710      	adds	r7, #16
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	0003ff5f 	.word	0x0003ff5f

0800e2dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	68db      	ldr	r3, [r3, #12]
 800e2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d120      	bne.n	800e338 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2fe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e300:	f7f6 f87c 	bl	80043fc <HAL_GetTick>
 800e304:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e306:	e00d      	b.n	800e324 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e308:	f7f6 f878 	bl	80043fc <HAL_GetTick>
 800e30c:	4602      	mov	r2, r0
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	1ad3      	subs	r3, r2, r3
 800e312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e316:	d905      	bls.n	800e324 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800e318:	2303      	movs	r3, #3
 800e31a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2203      	movs	r2, #3
 800e320:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d102      	bne.n	800e338 <RTC_EnterInitMode+0x5c>
 800e332:	7bfb      	ldrb	r3, [r7, #15]
 800e334:	2b03      	cmp	r3, #3
 800e336:	d1e7      	bne.n	800e308 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800e338:	7bfb      	ldrb	r3, [r7, #15]
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3710      	adds	r7, #16
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
	...

0800e344 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e34c:	2300      	movs	r3, #0
 800e34e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800e350:	4b1a      	ldr	r3, [pc, #104]	; (800e3bc <RTC_ExitInitMode+0x78>)
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	4a19      	ldr	r2, [pc, #100]	; (800e3bc <RTC_ExitInitMode+0x78>)
 800e356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e35a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800e35c:	4b17      	ldr	r3, [pc, #92]	; (800e3bc <RTC_ExitInitMode+0x78>)
 800e35e:	689b      	ldr	r3, [r3, #8]
 800e360:	f003 0320 	and.w	r3, r3, #32
 800e364:	2b00      	cmp	r3, #0
 800e366:	d10c      	bne.n	800e382 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7ff ff93 	bl	800e294 <HAL_RTC_WaitForSynchro>
 800e36e:	4603      	mov	r3, r0
 800e370:	2b00      	cmp	r3, #0
 800e372:	d01e      	beq.n	800e3b2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2203      	movs	r2, #3
 800e378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e37c:	2303      	movs	r3, #3
 800e37e:	73fb      	strb	r3, [r7, #15]
 800e380:	e017      	b.n	800e3b2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e382:	4b0e      	ldr	r3, [pc, #56]	; (800e3bc <RTC_ExitInitMode+0x78>)
 800e384:	689b      	ldr	r3, [r3, #8]
 800e386:	4a0d      	ldr	r2, [pc, #52]	; (800e3bc <RTC_ExitInitMode+0x78>)
 800e388:	f023 0320 	bic.w	r3, r3, #32
 800e38c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f7ff ff80 	bl	800e294 <HAL_RTC_WaitForSynchro>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d005      	beq.n	800e3a6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2203      	movs	r2, #3
 800e39e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800e3a2:	2303      	movs	r3, #3
 800e3a4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800e3a6:	4b05      	ldr	r3, [pc, #20]	; (800e3bc <RTC_ExitInitMode+0x78>)
 800e3a8:	689b      	ldr	r3, [r3, #8]
 800e3aa:	4a04      	ldr	r2, [pc, #16]	; (800e3bc <RTC_ExitInitMode+0x78>)
 800e3ac:	f043 0320 	orr.w	r3, r3, #32
 800e3b0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800e3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3710      	adds	r7, #16
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}
 800e3bc:	58004000 	.word	0x58004000

0800e3c0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800e3ce:	79fb      	ldrb	r3, [r7, #7]
 800e3d0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800e3d2:	e005      	b.n	800e3e0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800e3da:	7afb      	ldrb	r3, [r7, #11]
 800e3dc:	3b0a      	subs	r3, #10
 800e3de:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800e3e0:	7afb      	ldrb	r3, [r7, #11]
 800e3e2:	2b09      	cmp	r3, #9
 800e3e4:	d8f6      	bhi.n	800e3d4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	b2db      	uxtb	r3, r3
 800e3ea:	011b      	lsls	r3, r3, #4
 800e3ec:	b2da      	uxtb	r2, r3
 800e3ee:	7afb      	ldrb	r3, [r7, #11]
 800e3f0:	4313      	orrs	r3, r2
 800e3f2:	b2db      	uxtb	r3, r3
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3714      	adds	r7, #20
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr

0800e400 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e400:	b480      	push	{r7}
 800e402:	b085      	sub	sp, #20
 800e404:	af00      	add	r7, sp, #0
 800e406:	4603      	mov	r3, r0
 800e408:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800e40a:	79fb      	ldrb	r3, [r7, #7]
 800e40c:	091b      	lsrs	r3, r3, #4
 800e40e:	b2db      	uxtb	r3, r3
 800e410:	461a      	mov	r2, r3
 800e412:	0092      	lsls	r2, r2, #2
 800e414:	4413      	add	r3, r2
 800e416:	005b      	lsls	r3, r3, #1
 800e418:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800e41a:	79fb      	ldrb	r3, [r7, #7]
 800e41c:	f003 030f 	and.w	r3, r3, #15
 800e420:	b2da      	uxtb	r2, r3
 800e422:	7bfb      	ldrb	r3, [r7, #15]
 800e424:	4413      	add	r3, r2
 800e426:	b2db      	uxtb	r3, r3
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3714      	adds	r7, #20
 800e42c:	46bd      	mov	sp, r7
 800e42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e432:	4770      	bx	lr

0800e434 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d101      	bne.n	800e446 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e442:	2301      	movs	r3, #1
 800e444:	e10f      	b.n	800e666 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2200      	movs	r2, #0
 800e44a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a87      	ldr	r2, [pc, #540]	; (800e670 <HAL_SPI_Init+0x23c>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d00f      	beq.n	800e476 <HAL_SPI_Init+0x42>
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a86      	ldr	r2, [pc, #536]	; (800e674 <HAL_SPI_Init+0x240>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d00a      	beq.n	800e476 <HAL_SPI_Init+0x42>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a84      	ldr	r2, [pc, #528]	; (800e678 <HAL_SPI_Init+0x244>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d005      	beq.n	800e476 <HAL_SPI_Init+0x42>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	68db      	ldr	r3, [r3, #12]
 800e46e:	2b0f      	cmp	r3, #15
 800e470:	d901      	bls.n	800e476 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e472:	2301      	movs	r3, #1
 800e474:	e0f7      	b.n	800e666 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 fc12 	bl	800eca0 <SPI_GetPacketSize>
 800e47c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a7b      	ldr	r2, [pc, #492]	; (800e670 <HAL_SPI_Init+0x23c>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d00c      	beq.n	800e4a2 <HAL_SPI_Init+0x6e>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a79      	ldr	r2, [pc, #484]	; (800e674 <HAL_SPI_Init+0x240>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d007      	beq.n	800e4a2 <HAL_SPI_Init+0x6e>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4a78      	ldr	r2, [pc, #480]	; (800e678 <HAL_SPI_Init+0x244>)
 800e498:	4293      	cmp	r3, r2
 800e49a:	d002      	beq.n	800e4a2 <HAL_SPI_Init+0x6e>
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2b08      	cmp	r3, #8
 800e4a0:	d811      	bhi.n	800e4c6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e4a6:	4a72      	ldr	r2, [pc, #456]	; (800e670 <HAL_SPI_Init+0x23c>)
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d009      	beq.n	800e4c0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a70      	ldr	r2, [pc, #448]	; (800e674 <HAL_SPI_Init+0x240>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d004      	beq.n	800e4c0 <HAL_SPI_Init+0x8c>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a6f      	ldr	r2, [pc, #444]	; (800e678 <HAL_SPI_Init+0x244>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d104      	bne.n	800e4ca <HAL_SPI_Init+0x96>
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2b10      	cmp	r3, #16
 800e4c4:	d901      	bls.n	800e4ca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	e0cd      	b.n	800e666 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d106      	bne.n	800e4e4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f7f4 fca0 	bl	8002e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2202      	movs	r2, #2
 800e4e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	f022 0201 	bic.w	r2, r2, #1
 800e4fa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	689b      	ldr	r3, [r3, #8]
 800e502:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e506:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	699b      	ldr	r3, [r3, #24]
 800e50c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e510:	d119      	bne.n	800e546 <HAL_SPI_Init+0x112>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e51a:	d103      	bne.n	800e524 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e520:	2b00      	cmp	r3, #0
 800e522:	d008      	beq.n	800e536 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d10c      	bne.n	800e546 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e534:	d107      	bne.n	800e546 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e544:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d00f      	beq.n	800e572 <HAL_SPI_Init+0x13e>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	68db      	ldr	r3, [r3, #12]
 800e556:	2b06      	cmp	r3, #6
 800e558:	d90b      	bls.n	800e572 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	430a      	orrs	r2, r1
 800e56e:	601a      	str	r2, [r3, #0]
 800e570:	e007      	b.n	800e582 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e580:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	69da      	ldr	r2, [r3, #28]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e58a:	431a      	orrs	r2, r3
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	431a      	orrs	r2, r3
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e594:	ea42 0103 	orr.w	r1, r2, r3
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	68da      	ldr	r2, [r3, #12]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	430a      	orrs	r2, r1
 800e5a2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ac:	431a      	orrs	r2, r3
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5b2:	431a      	orrs	r2, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	699b      	ldr	r3, [r3, #24]
 800e5b8:	431a      	orrs	r2, r3
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	691b      	ldr	r3, [r3, #16]
 800e5be:	431a      	orrs	r2, r3
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	695b      	ldr	r3, [r3, #20]
 800e5c4:	431a      	orrs	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6a1b      	ldr	r3, [r3, #32]
 800e5ca:	431a      	orrs	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	431a      	orrs	r2, r3
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5d6:	431a      	orrs	r2, r3
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	689b      	ldr	r3, [r3, #8]
 800e5dc:	431a      	orrs	r2, r3
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5e2:	ea42 0103 	orr.w	r1, r2, r3
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	430a      	orrs	r2, r1
 800e5f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d113      	bne.n	800e622 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	689b      	ldr	r3, [r3, #8]
 800e600:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e60c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e620:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f022 0201 	bic.w	r2, r2, #1
 800e630:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00a      	beq.n	800e654 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	68db      	ldr	r3, [r3, #12]
 800e644:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	430a      	orrs	r2, r1
 800e652:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2200      	movs	r2, #0
 800e658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2201      	movs	r2, #1
 800e660:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e664:	2300      	movs	r3, #0
}
 800e666:	4618      	mov	r0, r3
 800e668:	3710      	adds	r7, #16
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	40013000 	.word	0x40013000
 800e674:	40003800 	.word	0x40003800
 800e678:	40003c00 	.word	0x40003c00

0800e67c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b088      	sub	sp, #32
 800e680:	af00      	add	r7, sp, #0
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	603b      	str	r3, [r7, #0]
 800e688:	4613      	mov	r3, r2
 800e68a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e690:	095b      	lsrs	r3, r3, #5
 800e692:	b29b      	uxth	r3, r3
 800e694:	3301      	adds	r3, #1
 800e696:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	3330      	adds	r3, #48	; 0x30
 800e69e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e6a0:	f7f5 feac 	bl	80043fc <HAL_GetTick>
 800e6a4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e6ac:	b2db      	uxtb	r3, r3
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	d001      	beq.n	800e6b6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800e6b2:	2302      	movs	r3, #2
 800e6b4:	e250      	b.n	800eb58 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d002      	beq.n	800e6c2 <HAL_SPI_Receive+0x46>
 800e6bc:	88fb      	ldrh	r3, [r7, #6]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d101      	bne.n	800e6c6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	e248      	b.n	800eb58 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d101      	bne.n	800e6d4 <HAL_SPI_Receive+0x58>
 800e6d0:	2302      	movs	r3, #2
 800e6d2:	e241      	b.n	800eb58 <HAL_SPI_Receive+0x4dc>
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2204      	movs	r2, #4
 800e6e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	68ba      	ldr	r2, [r7, #8]
 800e6f0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	88fa      	ldrh	r2, [r7, #6]
 800e6f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	88fa      	ldrh	r2, [r7, #6]
 800e6fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2200      	movs	r2, #0
 800e706:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2200      	movs	r2, #0
 800e70c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2200      	movs	r2, #0
 800e714:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2200      	movs	r2, #0
 800e71c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2200      	movs	r2, #0
 800e722:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	689b      	ldr	r3, [r3, #8]
 800e728:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e72c:	d108      	bne.n	800e740 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	681a      	ldr	r2, [r3, #0]
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e73c:	601a      	str	r2, [r3, #0]
 800e73e:	e009      	b.n	800e754 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	68db      	ldr	r3, [r3, #12]
 800e746:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e752:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	685a      	ldr	r2, [r3, #4]
 800e75a:	4b95      	ldr	r3, [pc, #596]	; (800e9b0 <HAL_SPI_Receive+0x334>)
 800e75c:	4013      	ands	r3, r2
 800e75e:	88f9      	ldrh	r1, [r7, #6]
 800e760:	68fa      	ldr	r2, [r7, #12]
 800e762:	6812      	ldr	r2, [r2, #0]
 800e764:	430b      	orrs	r3, r1
 800e766:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	681a      	ldr	r2, [r3, #0]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f042 0201 	orr.w	r2, r2, #1
 800e776:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e780:	d107      	bne.n	800e792 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e790:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	68db      	ldr	r3, [r3, #12]
 800e796:	2b0f      	cmp	r3, #15
 800e798:	d96c      	bls.n	800e874 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e79a:	e064      	b.n	800e866 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	695b      	ldr	r3, [r3, #20]
 800e7a2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	695b      	ldr	r3, [r3, #20]
 800e7aa:	f003 0301 	and.w	r3, r3, #1
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d114      	bne.n	800e7dc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e7bc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7c2:	1d1a      	adds	r2, r3, #4
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7ce:	b29b      	uxth	r3, r3
 800e7d0:	3b01      	subs	r3, #1
 800e7d2:	b29a      	uxth	r2, r3
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e7da:	e044      	b.n	800e866 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	8bfa      	ldrh	r2, [r7, #30]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d919      	bls.n	800e81e <HAL_SPI_Receive+0x1a2>
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d014      	beq.n	800e81e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e7fe:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e804:	1d1a      	adds	r2, r3, #4
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e810:	b29b      	uxth	r3, r3
 800e812:	3b01      	subs	r3, #1
 800e814:	b29a      	uxth	r2, r3
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e81c:	e023      	b.n	800e866 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e81e:	f7f5 fded 	bl	80043fc <HAL_GetTick>
 800e822:	4602      	mov	r2, r0
 800e824:	697b      	ldr	r3, [r7, #20]
 800e826:	1ad3      	subs	r3, r2, r3
 800e828:	683a      	ldr	r2, [r7, #0]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d803      	bhi.n	800e836 <HAL_SPI_Receive+0x1ba>
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e834:	d102      	bne.n	800e83c <HAL_SPI_Receive+0x1c0>
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d114      	bne.n	800e866 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e83c:	68f8      	ldr	r0, [r7, #12]
 800e83e:	f000 f98f 	bl	800eb60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e848:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2201      	movs	r2, #1
 800e856:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2200      	movs	r2, #0
 800e85e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e862:	2303      	movs	r3, #3
 800e864:	e178      	b.n	800eb58 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e86c:	b29b      	uxth	r3, r3
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d194      	bne.n	800e79c <HAL_SPI_Receive+0x120>
 800e872:	e15e      	b.n	800eb32 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	2b07      	cmp	r3, #7
 800e87a:	f240 8153 	bls.w	800eb24 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e87e:	e08f      	b.n	800e9a0 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	695b      	ldr	r3, [r3, #20]
 800e886:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	695b      	ldr	r3, [r3, #20]
 800e88e:	f003 0301 	and.w	r3, r3, #1
 800e892:	2b01      	cmp	r3, #1
 800e894:	d114      	bne.n	800e8c0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e89a:	69ba      	ldr	r2, [r7, #24]
 800e89c:	8812      	ldrh	r2, [r2, #0]
 800e89e:	b292      	uxth	r2, r2
 800e8a0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8a6:	1c9a      	adds	r2, r3, #2
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8b2:	b29b      	uxth	r3, r3
 800e8b4:	3b01      	subs	r3, #1
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e8be:	e06f      	b.n	800e9a0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	8bfa      	ldrh	r2, [r7, #30]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d924      	bls.n	800e918 <HAL_SPI_Receive+0x29c>
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d01f      	beq.n	800e918 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8dc:	69ba      	ldr	r2, [r7, #24]
 800e8de:	8812      	ldrh	r2, [r2, #0]
 800e8e0:	b292      	uxth	r2, r2
 800e8e2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8e8:	1c9a      	adds	r2, r3, #2
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8f2:	69ba      	ldr	r2, [r7, #24]
 800e8f4:	8812      	ldrh	r2, [r2, #0]
 800e8f6:	b292      	uxth	r2, r2
 800e8f8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8fe:	1c9a      	adds	r2, r3, #2
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	3b02      	subs	r3, #2
 800e90e:	b29a      	uxth	r2, r3
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e916:	e043      	b.n	800e9a0 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e91e:	b29b      	uxth	r3, r3
 800e920:	2b01      	cmp	r3, #1
 800e922:	d119      	bne.n	800e958 <HAL_SPI_Receive+0x2dc>
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d014      	beq.n	800e958 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e932:	69ba      	ldr	r2, [r7, #24]
 800e934:	8812      	ldrh	r2, [r2, #0]
 800e936:	b292      	uxth	r2, r2
 800e938:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e93e:	1c9a      	adds	r2, r3, #2
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	3b01      	subs	r3, #1
 800e94e:	b29a      	uxth	r2, r3
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e956:	e023      	b.n	800e9a0 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e958:	f7f5 fd50 	bl	80043fc <HAL_GetTick>
 800e95c:	4602      	mov	r2, r0
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	1ad3      	subs	r3, r2, r3
 800e962:	683a      	ldr	r2, [r7, #0]
 800e964:	429a      	cmp	r2, r3
 800e966:	d803      	bhi.n	800e970 <HAL_SPI_Receive+0x2f4>
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e96e:	d102      	bne.n	800e976 <HAL_SPI_Receive+0x2fa>
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d114      	bne.n	800e9a0 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e976:	68f8      	ldr	r0, [r7, #12]
 800e978:	f000 f8f2 	bl	800eb60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e982:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2201      	movs	r2, #1
 800e990:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2200      	movs	r2, #0
 800e998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e99c:	2303      	movs	r3, #3
 800e99e:	e0db      	b.n	800eb58 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f47f af69 	bne.w	800e880 <HAL_SPI_Receive+0x204>
 800e9ae:	e0c0      	b.n	800eb32 <HAL_SPI_Receive+0x4b6>
 800e9b0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	695b      	ldr	r3, [r3, #20]
 800e9ba:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	695b      	ldr	r3, [r3, #20]
 800e9c2:	f003 0301 	and.w	r3, r3, #1
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d117      	bne.n	800e9fa <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9d6:	7812      	ldrb	r2, [r2, #0]
 800e9d8:	b2d2      	uxtb	r2, r2
 800e9da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9e0:	1c5a      	adds	r2, r3, #1
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e9ec:	b29b      	uxth	r3, r3
 800e9ee:	3b01      	subs	r3, #1
 800e9f0:	b29a      	uxth	r2, r3
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e9f8:	e094      	b.n	800eb24 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea00:	b29b      	uxth	r3, r3
 800ea02:	8bfa      	ldrh	r2, [r7, #30]
 800ea04:	429a      	cmp	r2, r3
 800ea06:	d946      	bls.n	800ea96 <HAL_SPI_Receive+0x41a>
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d041      	beq.n	800ea96 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea1e:	7812      	ldrb	r2, [r2, #0]
 800ea20:	b2d2      	uxtb	r2, r2
 800ea22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea28:	1c5a      	adds	r2, r3, #1
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea3a:	7812      	ldrb	r2, [r2, #0]
 800ea3c:	b2d2      	uxtb	r2, r2
 800ea3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea44:	1c5a      	adds	r2, r3, #1
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea56:	7812      	ldrb	r2, [r2, #0]
 800ea58:	b2d2      	uxtb	r2, r2
 800ea5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea60:	1c5a      	adds	r2, r3, #1
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea72:	7812      	ldrb	r2, [r2, #0]
 800ea74:	b2d2      	uxtb	r2, r2
 800ea76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea7c:	1c5a      	adds	r2, r3, #1
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	3b04      	subs	r3, #4
 800ea8c:	b29a      	uxth	r2, r3
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ea94:	e046      	b.n	800eb24 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea9c:	b29b      	uxth	r3, r3
 800ea9e:	2b03      	cmp	r3, #3
 800eaa0:	d81c      	bhi.n	800eadc <HAL_SPI_Receive+0x460>
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d017      	beq.n	800eadc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eab8:	7812      	ldrb	r2, [r2, #0]
 800eaba:	b2d2      	uxtb	r2, r2
 800eabc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eac2:	1c5a      	adds	r2, r3, #1
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eace:	b29b      	uxth	r3, r3
 800ead0:	3b01      	subs	r3, #1
 800ead2:	b29a      	uxth	r2, r3
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eada:	e023      	b.n	800eb24 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eadc:	f7f5 fc8e 	bl	80043fc <HAL_GetTick>
 800eae0:	4602      	mov	r2, r0
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	1ad3      	subs	r3, r2, r3
 800eae6:	683a      	ldr	r2, [r7, #0]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d803      	bhi.n	800eaf4 <HAL_SPI_Receive+0x478>
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaf2:	d102      	bne.n	800eafa <HAL_SPI_Receive+0x47e>
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d114      	bne.n	800eb24 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eafa:	68f8      	ldr	r0, [r7, #12]
 800eafc:	f000 f830 	bl	800eb60 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2201      	movs	r2, #1
 800eb14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800eb20:	2303      	movs	r3, #3
 800eb22:	e019      	b.n	800eb58 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eb2a:	b29b      	uxth	r3, r3
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f47f af41 	bne.w	800e9b4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800eb32:	68f8      	ldr	r0, [r7, #12]
 800eb34:	f000 f814 	bl	800eb60 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2200      	movs	r2, #0
 800eb44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d001      	beq.n	800eb56 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800eb52:	2301      	movs	r3, #1
 800eb54:	e000      	b.n	800eb58 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800eb56:	2300      	movs	r3, #0
  }
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3720      	adds	r7, #32
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b085      	sub	sp, #20
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	695b      	ldr	r3, [r3, #20]
 800eb6e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	699a      	ldr	r2, [r3, #24]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f042 0208 	orr.w	r2, r2, #8
 800eb7e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	699a      	ldr	r2, [r3, #24]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f042 0210 	orr.w	r2, r2, #16
 800eb8e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	f022 0201 	bic.w	r2, r2, #1
 800eb9e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	6919      	ldr	r1, [r3, #16]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	4b3c      	ldr	r3, [pc, #240]	; (800ec9c <SPI_CloseTransfer+0x13c>)
 800ebac:	400b      	ands	r3, r1
 800ebae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	689a      	ldr	r2, [r3, #8]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ebbe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	2b04      	cmp	r3, #4
 800ebca:	d014      	beq.n	800ebf6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f003 0320 	and.w	r3, r3, #32
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d00f      	beq.n	800ebf6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	699a      	ldr	r2, [r3, #24]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f042 0220 	orr.w	r2, r2, #32
 800ebf4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	2b03      	cmp	r3, #3
 800ec00:	d014      	beq.n	800ec2c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d00f      	beq.n	800ec2c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec12:	f043 0204 	orr.w	r2, r3, #4
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	699a      	ldr	r2, [r3, #24]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec2a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d00f      	beq.n	800ec56 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec3c:	f043 0201 	orr.w	r2, r3, #1
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	699a      	ldr	r2, [r3, #24]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec54:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d00f      	beq.n	800ec80 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec66:	f043 0208 	orr.w	r2, r3, #8
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	699a      	ldr	r2, [r3, #24]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ec7e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2200      	movs	r2, #0
 800ec84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ec90:	bf00      	nop
 800ec92:	3714      	adds	r7, #20
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr
 800ec9c:	fffffc90 	.word	0xfffffc90

0800eca0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b085      	sub	sp, #20
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecac:	095b      	lsrs	r3, r3, #5
 800ecae:	3301      	adds	r3, #1
 800ecb0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	68db      	ldr	r3, [r3, #12]
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	3307      	adds	r3, #7
 800ecbe:	08db      	lsrs	r3, r3, #3
 800ecc0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	68fa      	ldr	r2, [r7, #12]
 800ecc6:	fb02 f303 	mul.w	r3, r2, r3
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3714      	adds	r7, #20
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr

0800ecd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ecd6:	b580      	push	{r7, lr}
 800ecd8:	b082      	sub	sp, #8
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d101      	bne.n	800ece8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ece4:	2301      	movs	r3, #1
 800ece6:	e049      	b.n	800ed7c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d106      	bne.n	800ed02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f7f4 fd2f 	bl	8003760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2202      	movs	r2, #2
 800ed06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	3304      	adds	r3, #4
 800ed12:	4619      	mov	r1, r3
 800ed14:	4610      	mov	r0, r2
 800ed16:	f000 fe7d 	bl	800fa14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2201      	movs	r2, #1
 800ed1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2201      	movs	r2, #1
 800ed26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2201      	movs	r2, #1
 800ed36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2201      	movs	r2, #1
 800ed3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2201      	movs	r2, #1
 800ed46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2201      	movs	r2, #1
 800ed56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2201      	movs	r2, #1
 800ed66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2201      	movs	r2, #1
 800ed76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed7a:	2300      	movs	r3, #0
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3708      	adds	r7, #8
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ed84:	b480      	push	{r7}
 800ed86:	b085      	sub	sp, #20
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	d001      	beq.n	800ed9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	e054      	b.n	800ee46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2202      	movs	r2, #2
 800eda0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	68da      	ldr	r2, [r3, #12]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f042 0201 	orr.w	r2, r2, #1
 800edb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4a26      	ldr	r2, [pc, #152]	; (800ee54 <HAL_TIM_Base_Start_IT+0xd0>)
 800edba:	4293      	cmp	r3, r2
 800edbc:	d022      	beq.n	800ee04 <HAL_TIM_Base_Start_IT+0x80>
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edc6:	d01d      	beq.n	800ee04 <HAL_TIM_Base_Start_IT+0x80>
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4a22      	ldr	r2, [pc, #136]	; (800ee58 <HAL_TIM_Base_Start_IT+0xd4>)
 800edce:	4293      	cmp	r3, r2
 800edd0:	d018      	beq.n	800ee04 <HAL_TIM_Base_Start_IT+0x80>
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	4a21      	ldr	r2, [pc, #132]	; (800ee5c <HAL_TIM_Base_Start_IT+0xd8>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d013      	beq.n	800ee04 <HAL_TIM_Base_Start_IT+0x80>
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	4a1f      	ldr	r2, [pc, #124]	; (800ee60 <HAL_TIM_Base_Start_IT+0xdc>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d00e      	beq.n	800ee04 <HAL_TIM_Base_Start_IT+0x80>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	4a1e      	ldr	r2, [pc, #120]	; (800ee64 <HAL_TIM_Base_Start_IT+0xe0>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d009      	beq.n	800ee04 <HAL_TIM_Base_Start_IT+0x80>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	4a1c      	ldr	r2, [pc, #112]	; (800ee68 <HAL_TIM_Base_Start_IT+0xe4>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d004      	beq.n	800ee04 <HAL_TIM_Base_Start_IT+0x80>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	4a1b      	ldr	r2, [pc, #108]	; (800ee6c <HAL_TIM_Base_Start_IT+0xe8>)
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d115      	bne.n	800ee30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	689a      	ldr	r2, [r3, #8]
 800ee0a:	4b19      	ldr	r3, [pc, #100]	; (800ee70 <HAL_TIM_Base_Start_IT+0xec>)
 800ee0c:	4013      	ands	r3, r2
 800ee0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	2b06      	cmp	r3, #6
 800ee14:	d015      	beq.n	800ee42 <HAL_TIM_Base_Start_IT+0xbe>
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee1c:	d011      	beq.n	800ee42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f042 0201 	orr.w	r2, r2, #1
 800ee2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee2e:	e008      	b.n	800ee42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	f042 0201 	orr.w	r2, r2, #1
 800ee3e:	601a      	str	r2, [r3, #0]
 800ee40:	e000      	b.n	800ee44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ee44:	2300      	movs	r3, #0
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3714      	adds	r7, #20
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr
 800ee52:	bf00      	nop
 800ee54:	40010000 	.word	0x40010000
 800ee58:	40000400 	.word	0x40000400
 800ee5c:	40000800 	.word	0x40000800
 800ee60:	40000c00 	.word	0x40000c00
 800ee64:	40010400 	.word	0x40010400
 800ee68:	40001800 	.word	0x40001800
 800ee6c:	40014000 	.word	0x40014000
 800ee70:	00010007 	.word	0x00010007

0800ee74 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d109      	bne.n	800ee9c <HAL_TIM_OC_Start_IT+0x28>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	bf14      	ite	ne
 800ee94:	2301      	movne	r3, #1
 800ee96:	2300      	moveq	r3, #0
 800ee98:	b2db      	uxtb	r3, r3
 800ee9a:	e03c      	b.n	800ef16 <HAL_TIM_OC_Start_IT+0xa2>
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	2b04      	cmp	r3, #4
 800eea0:	d109      	bne.n	800eeb6 <HAL_TIM_OC_Start_IT+0x42>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800eea8:	b2db      	uxtb	r3, r3
 800eeaa:	2b01      	cmp	r3, #1
 800eeac:	bf14      	ite	ne
 800eeae:	2301      	movne	r3, #1
 800eeb0:	2300      	moveq	r3, #0
 800eeb2:	b2db      	uxtb	r3, r3
 800eeb4:	e02f      	b.n	800ef16 <HAL_TIM_OC_Start_IT+0xa2>
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	2b08      	cmp	r3, #8
 800eeba:	d109      	bne.n	800eed0 <HAL_TIM_OC_Start_IT+0x5c>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eec2:	b2db      	uxtb	r3, r3
 800eec4:	2b01      	cmp	r3, #1
 800eec6:	bf14      	ite	ne
 800eec8:	2301      	movne	r3, #1
 800eeca:	2300      	moveq	r3, #0
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	e022      	b.n	800ef16 <HAL_TIM_OC_Start_IT+0xa2>
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	2b0c      	cmp	r3, #12
 800eed4:	d109      	bne.n	800eeea <HAL_TIM_OC_Start_IT+0x76>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	2b01      	cmp	r3, #1
 800eee0:	bf14      	ite	ne
 800eee2:	2301      	movne	r3, #1
 800eee4:	2300      	moveq	r3, #0
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	e015      	b.n	800ef16 <HAL_TIM_OC_Start_IT+0xa2>
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	2b10      	cmp	r3, #16
 800eeee:	d109      	bne.n	800ef04 <HAL_TIM_OC_Start_IT+0x90>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eef6:	b2db      	uxtb	r3, r3
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	bf14      	ite	ne
 800eefc:	2301      	movne	r3, #1
 800eefe:	2300      	moveq	r3, #0
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	e008      	b.n	800ef16 <HAL_TIM_OC_Start_IT+0xa2>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	bf14      	ite	ne
 800ef10:	2301      	movne	r3, #1
 800ef12:	2300      	moveq	r3, #0
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d001      	beq.n	800ef1e <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	e0ec      	b.n	800f0f8 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d104      	bne.n	800ef2e <HAL_TIM_OC_Start_IT+0xba>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2202      	movs	r2, #2
 800ef28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ef2c:	e023      	b.n	800ef76 <HAL_TIM_OC_Start_IT+0x102>
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	2b04      	cmp	r3, #4
 800ef32:	d104      	bne.n	800ef3e <HAL_TIM_OC_Start_IT+0xca>
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2202      	movs	r2, #2
 800ef38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ef3c:	e01b      	b.n	800ef76 <HAL_TIM_OC_Start_IT+0x102>
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	2b08      	cmp	r3, #8
 800ef42:	d104      	bne.n	800ef4e <HAL_TIM_OC_Start_IT+0xda>
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2202      	movs	r2, #2
 800ef48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ef4c:	e013      	b.n	800ef76 <HAL_TIM_OC_Start_IT+0x102>
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	2b0c      	cmp	r3, #12
 800ef52:	d104      	bne.n	800ef5e <HAL_TIM_OC_Start_IT+0xea>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2202      	movs	r2, #2
 800ef58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ef5c:	e00b      	b.n	800ef76 <HAL_TIM_OC_Start_IT+0x102>
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	2b10      	cmp	r3, #16
 800ef62:	d104      	bne.n	800ef6e <HAL_TIM_OC_Start_IT+0xfa>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2202      	movs	r2, #2
 800ef68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ef6c:	e003      	b.n	800ef76 <HAL_TIM_OC_Start_IT+0x102>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2202      	movs	r2, #2
 800ef72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	2b0c      	cmp	r3, #12
 800ef7a:	d841      	bhi.n	800f000 <HAL_TIM_OC_Start_IT+0x18c>
 800ef7c:	a201      	add	r2, pc, #4	; (adr r2, 800ef84 <HAL_TIM_OC_Start_IT+0x110>)
 800ef7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef82:	bf00      	nop
 800ef84:	0800efb9 	.word	0x0800efb9
 800ef88:	0800f001 	.word	0x0800f001
 800ef8c:	0800f001 	.word	0x0800f001
 800ef90:	0800f001 	.word	0x0800f001
 800ef94:	0800efcb 	.word	0x0800efcb
 800ef98:	0800f001 	.word	0x0800f001
 800ef9c:	0800f001 	.word	0x0800f001
 800efa0:	0800f001 	.word	0x0800f001
 800efa4:	0800efdd 	.word	0x0800efdd
 800efa8:	0800f001 	.word	0x0800f001
 800efac:	0800f001 	.word	0x0800f001
 800efb0:	0800f001 	.word	0x0800f001
 800efb4:	0800efef 	.word	0x0800efef
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	68da      	ldr	r2, [r3, #12]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f042 0202 	orr.w	r2, r2, #2
 800efc6:	60da      	str	r2, [r3, #12]
      break;
 800efc8:	e01d      	b.n	800f006 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	68da      	ldr	r2, [r3, #12]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f042 0204 	orr.w	r2, r2, #4
 800efd8:	60da      	str	r2, [r3, #12]
      break;
 800efda:	e014      	b.n	800f006 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	68da      	ldr	r2, [r3, #12]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f042 0208 	orr.w	r2, r2, #8
 800efea:	60da      	str	r2, [r3, #12]
      break;
 800efec:	e00b      	b.n	800f006 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	68da      	ldr	r2, [r3, #12]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f042 0210 	orr.w	r2, r2, #16
 800effc:	60da      	str	r2, [r3, #12]
      break;
 800effe:	e002      	b.n	800f006 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800f000:	2301      	movs	r3, #1
 800f002:	73fb      	strb	r3, [r7, #15]
      break;
 800f004:	bf00      	nop
  }

  if (status == HAL_OK)
 800f006:	7bfb      	ldrb	r3, [r7, #15]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d174      	bne.n	800f0f6 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2201      	movs	r2, #1
 800f012:	6839      	ldr	r1, [r7, #0]
 800f014:	4618      	mov	r0, r3
 800f016:	f001 f917 	bl	8010248 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	4a38      	ldr	r2, [pc, #224]	; (800f100 <HAL_TIM_OC_Start_IT+0x28c>)
 800f020:	4293      	cmp	r3, r2
 800f022:	d013      	beq.n	800f04c <HAL_TIM_OC_Start_IT+0x1d8>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4a36      	ldr	r2, [pc, #216]	; (800f104 <HAL_TIM_OC_Start_IT+0x290>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d00e      	beq.n	800f04c <HAL_TIM_OC_Start_IT+0x1d8>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4a35      	ldr	r2, [pc, #212]	; (800f108 <HAL_TIM_OC_Start_IT+0x294>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d009      	beq.n	800f04c <HAL_TIM_OC_Start_IT+0x1d8>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4a33      	ldr	r2, [pc, #204]	; (800f10c <HAL_TIM_OC_Start_IT+0x298>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d004      	beq.n	800f04c <HAL_TIM_OC_Start_IT+0x1d8>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a32      	ldr	r2, [pc, #200]	; (800f110 <HAL_TIM_OC_Start_IT+0x29c>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d101      	bne.n	800f050 <HAL_TIM_OC_Start_IT+0x1dc>
 800f04c:	2301      	movs	r3, #1
 800f04e:	e000      	b.n	800f052 <HAL_TIM_OC_Start_IT+0x1de>
 800f050:	2300      	movs	r3, #0
 800f052:	2b00      	cmp	r3, #0
 800f054:	d007      	beq.n	800f066 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f064:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	4a25      	ldr	r2, [pc, #148]	; (800f100 <HAL_TIM_OC_Start_IT+0x28c>)
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d022      	beq.n	800f0b6 <HAL_TIM_OC_Start_IT+0x242>
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f078:	d01d      	beq.n	800f0b6 <HAL_TIM_OC_Start_IT+0x242>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	4a25      	ldr	r2, [pc, #148]	; (800f114 <HAL_TIM_OC_Start_IT+0x2a0>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d018      	beq.n	800f0b6 <HAL_TIM_OC_Start_IT+0x242>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4a23      	ldr	r2, [pc, #140]	; (800f118 <HAL_TIM_OC_Start_IT+0x2a4>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d013      	beq.n	800f0b6 <HAL_TIM_OC_Start_IT+0x242>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	4a22      	ldr	r2, [pc, #136]	; (800f11c <HAL_TIM_OC_Start_IT+0x2a8>)
 800f094:	4293      	cmp	r3, r2
 800f096:	d00e      	beq.n	800f0b6 <HAL_TIM_OC_Start_IT+0x242>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a19      	ldr	r2, [pc, #100]	; (800f104 <HAL_TIM_OC_Start_IT+0x290>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d009      	beq.n	800f0b6 <HAL_TIM_OC_Start_IT+0x242>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	4a1e      	ldr	r2, [pc, #120]	; (800f120 <HAL_TIM_OC_Start_IT+0x2ac>)
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	d004      	beq.n	800f0b6 <HAL_TIM_OC_Start_IT+0x242>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4a15      	ldr	r2, [pc, #84]	; (800f108 <HAL_TIM_OC_Start_IT+0x294>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d115      	bne.n	800f0e2 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	689a      	ldr	r2, [r3, #8]
 800f0bc:	4b19      	ldr	r3, [pc, #100]	; (800f124 <HAL_TIM_OC_Start_IT+0x2b0>)
 800f0be:	4013      	ands	r3, r2
 800f0c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	2b06      	cmp	r3, #6
 800f0c6:	d015      	beq.n	800f0f4 <HAL_TIM_OC_Start_IT+0x280>
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0ce:	d011      	beq.n	800f0f4 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	681a      	ldr	r2, [r3, #0]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f042 0201 	orr.w	r2, r2, #1
 800f0de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0e0:	e008      	b.n	800f0f4 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f042 0201 	orr.w	r2, r2, #1
 800f0f0:	601a      	str	r2, [r3, #0]
 800f0f2:	e000      	b.n	800f0f6 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0f4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3710      	adds	r7, #16
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}
 800f100:	40010000 	.word	0x40010000
 800f104:	40010400 	.word	0x40010400
 800f108:	40014000 	.word	0x40014000
 800f10c:	40014400 	.word	0x40014400
 800f110:	40014800 	.word	0x40014800
 800f114:	40000400 	.word	0x40000400
 800f118:	40000800 	.word	0x40000800
 800f11c:	40000c00 	.word	0x40000c00
 800f120:	40001800 	.word	0x40001800
 800f124:	00010007 	.word	0x00010007

0800f128 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
 800f130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f132:	2300      	movs	r3, #0
 800f134:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	2b0c      	cmp	r3, #12
 800f13a:	d841      	bhi.n	800f1c0 <HAL_TIM_OC_Stop_IT+0x98>
 800f13c:	a201      	add	r2, pc, #4	; (adr r2, 800f144 <HAL_TIM_OC_Stop_IT+0x1c>)
 800f13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f142:	bf00      	nop
 800f144:	0800f179 	.word	0x0800f179
 800f148:	0800f1c1 	.word	0x0800f1c1
 800f14c:	0800f1c1 	.word	0x0800f1c1
 800f150:	0800f1c1 	.word	0x0800f1c1
 800f154:	0800f18b 	.word	0x0800f18b
 800f158:	0800f1c1 	.word	0x0800f1c1
 800f15c:	0800f1c1 	.word	0x0800f1c1
 800f160:	0800f1c1 	.word	0x0800f1c1
 800f164:	0800f19d 	.word	0x0800f19d
 800f168:	0800f1c1 	.word	0x0800f1c1
 800f16c:	0800f1c1 	.word	0x0800f1c1
 800f170:	0800f1c1 	.word	0x0800f1c1
 800f174:	0800f1af 	.word	0x0800f1af
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	68da      	ldr	r2, [r3, #12]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	f022 0202 	bic.w	r2, r2, #2
 800f186:	60da      	str	r2, [r3, #12]
      break;
 800f188:	e01d      	b.n	800f1c6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	68da      	ldr	r2, [r3, #12]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	f022 0204 	bic.w	r2, r2, #4
 800f198:	60da      	str	r2, [r3, #12]
      break;
 800f19a:	e014      	b.n	800f1c6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	68da      	ldr	r2, [r3, #12]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	f022 0208 	bic.w	r2, r2, #8
 800f1aa:	60da      	str	r2, [r3, #12]
      break;
 800f1ac:	e00b      	b.n	800f1c6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	68da      	ldr	r2, [r3, #12]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	f022 0210 	bic.w	r2, r2, #16
 800f1bc:	60da      	str	r2, [r3, #12]
      break;
 800f1be:	e002      	b.n	800f1c6 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	73fb      	strb	r3, [r7, #15]
      break;
 800f1c4:	bf00      	nop
  }

  if (status == HAL_OK)
 800f1c6:	7bfb      	ldrb	r3, [r7, #15]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	f040 8081 	bne.w	800f2d0 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	6839      	ldr	r1, [r7, #0]
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f001 f836 	bl	8010248 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4a3e      	ldr	r2, [pc, #248]	; (800f2dc <HAL_TIM_OC_Stop_IT+0x1b4>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d013      	beq.n	800f20e <HAL_TIM_OC_Stop_IT+0xe6>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	4a3d      	ldr	r2, [pc, #244]	; (800f2e0 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d00e      	beq.n	800f20e <HAL_TIM_OC_Stop_IT+0xe6>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4a3b      	ldr	r2, [pc, #236]	; (800f2e4 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d009      	beq.n	800f20e <HAL_TIM_OC_Stop_IT+0xe6>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	4a3a      	ldr	r2, [pc, #232]	; (800f2e8 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800f200:	4293      	cmp	r3, r2
 800f202:	d004      	beq.n	800f20e <HAL_TIM_OC_Stop_IT+0xe6>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a38      	ldr	r2, [pc, #224]	; (800f2ec <HAL_TIM_OC_Stop_IT+0x1c4>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d101      	bne.n	800f212 <HAL_TIM_OC_Stop_IT+0xea>
 800f20e:	2301      	movs	r3, #1
 800f210:	e000      	b.n	800f214 <HAL_TIM_OC_Stop_IT+0xec>
 800f212:	2300      	movs	r3, #0
 800f214:	2b00      	cmp	r3, #0
 800f216:	d017      	beq.n	800f248 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	6a1a      	ldr	r2, [r3, #32]
 800f21e:	f241 1311 	movw	r3, #4369	; 0x1111
 800f222:	4013      	ands	r3, r2
 800f224:	2b00      	cmp	r3, #0
 800f226:	d10f      	bne.n	800f248 <HAL_TIM_OC_Stop_IT+0x120>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	6a1a      	ldr	r2, [r3, #32]
 800f22e:	f240 4344 	movw	r3, #1092	; 0x444
 800f232:	4013      	ands	r3, r2
 800f234:	2b00      	cmp	r3, #0
 800f236:	d107      	bne.n	800f248 <HAL_TIM_OC_Stop_IT+0x120>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f246:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	6a1a      	ldr	r2, [r3, #32]
 800f24e:	f241 1311 	movw	r3, #4369	; 0x1111
 800f252:	4013      	ands	r3, r2
 800f254:	2b00      	cmp	r3, #0
 800f256:	d10f      	bne.n	800f278 <HAL_TIM_OC_Stop_IT+0x150>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	6a1a      	ldr	r2, [r3, #32]
 800f25e:	f240 4344 	movw	r3, #1092	; 0x444
 800f262:	4013      	ands	r3, r2
 800f264:	2b00      	cmp	r3, #0
 800f266:	d107      	bne.n	800f278 <HAL_TIM_OC_Stop_IT+0x150>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	681a      	ldr	r2, [r3, #0]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f022 0201 	bic.w	r2, r2, #1
 800f276:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d104      	bne.n	800f288 <HAL_TIM_OC_Stop_IT+0x160>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2201      	movs	r2, #1
 800f282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f286:	e023      	b.n	800f2d0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	2b04      	cmp	r3, #4
 800f28c:	d104      	bne.n	800f298 <HAL_TIM_OC_Stop_IT+0x170>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2201      	movs	r2, #1
 800f292:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f296:	e01b      	b.n	800f2d0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	2b08      	cmp	r3, #8
 800f29c:	d104      	bne.n	800f2a8 <HAL_TIM_OC_Stop_IT+0x180>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f2a6:	e013      	b.n	800f2d0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	2b0c      	cmp	r3, #12
 800f2ac:	d104      	bne.n	800f2b8 <HAL_TIM_OC_Stop_IT+0x190>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f2b6:	e00b      	b.n	800f2d0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	2b10      	cmp	r3, #16
 800f2bc:	d104      	bne.n	800f2c8 <HAL_TIM_OC_Stop_IT+0x1a0>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f2c6:	e003      	b.n	800f2d0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800f2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3710      	adds	r7, #16
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
 800f2da:	bf00      	nop
 800f2dc:	40010000 	.word	0x40010000
 800f2e0:	40010400 	.word	0x40010400
 800f2e4:	40014000 	.word	0x40014000
 800f2e8:	40014400 	.word	0x40014400
 800f2ec:	40014800 	.word	0x40014800

0800f2f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d101      	bne.n	800f302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f2fe:	2301      	movs	r3, #1
 800f300:	e049      	b.n	800f396 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f308:	b2db      	uxtb	r3, r3
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d106      	bne.n	800f31c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2200      	movs	r2, #0
 800f312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f000 f841 	bl	800f39e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2202      	movs	r2, #2
 800f320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	3304      	adds	r3, #4
 800f32c:	4619      	mov	r1, r3
 800f32e:	4610      	mov	r0, r2
 800f330:	f000 fb70 	bl	800fa14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2201      	movs	r2, #1
 800f338:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2201      	movs	r2, #1
 800f340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2201      	movs	r2, #1
 800f348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2201      	movs	r2, #1
 800f350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2201      	movs	r2, #1
 800f358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2201      	movs	r2, #1
 800f360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2201      	movs	r2, #1
 800f368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2201      	movs	r2, #1
 800f370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2201      	movs	r2, #1
 800f378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2201      	movs	r2, #1
 800f380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2201      	movs	r2, #1
 800f388:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2201      	movs	r2, #1
 800f390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f394:	2300      	movs	r3, #0
}
 800f396:	4618      	mov	r0, r3
 800f398:	3708      	adds	r7, #8
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}

0800f39e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800f39e:	b480      	push	{r7}
 800f3a0:	b083      	sub	sp, #12
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800f3a6:	bf00      	nop
 800f3a8:	370c      	adds	r7, #12
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr

0800f3b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f3b2:	b580      	push	{r7, lr}
 800f3b4:	b084      	sub	sp, #16
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	68db      	ldr	r3, [r3, #12]
 800f3c0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	691b      	ldr	r3, [r3, #16]
 800f3c8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	f003 0302 	and.w	r3, r3, #2
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d020      	beq.n	800f416 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	f003 0302 	and.w	r3, r3, #2
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d01b      	beq.n	800f416 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f06f 0202 	mvn.w	r2, #2
 800f3e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	699b      	ldr	r3, [r3, #24]
 800f3f4:	f003 0303 	and.w	r3, r3, #3
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d003      	beq.n	800f404 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 faeb 	bl	800f9d8 <HAL_TIM_IC_CaptureCallback>
 800f402:	e005      	b.n	800f410 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f7f2 f8ab 	bl	8001560 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f000 faee 	bl	800f9ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	f003 0304 	and.w	r3, r3, #4
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d020      	beq.n	800f462 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	f003 0304 	and.w	r3, r3, #4
 800f426:	2b00      	cmp	r3, #0
 800f428:	d01b      	beq.n	800f462 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f06f 0204 	mvn.w	r2, #4
 800f432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2202      	movs	r2, #2
 800f438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	699b      	ldr	r3, [r3, #24]
 800f440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f444:	2b00      	cmp	r3, #0
 800f446:	d003      	beq.n	800f450 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f000 fac5 	bl	800f9d8 <HAL_TIM_IC_CaptureCallback>
 800f44e:	e005      	b.n	800f45c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f7f2 f885 	bl	8001560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 fac8 	bl	800f9ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2200      	movs	r2, #0
 800f460:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	f003 0308 	and.w	r3, r3, #8
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d020      	beq.n	800f4ae <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	f003 0308 	and.w	r3, r3, #8
 800f472:	2b00      	cmp	r3, #0
 800f474:	d01b      	beq.n	800f4ae <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f06f 0208 	mvn.w	r2, #8
 800f47e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2204      	movs	r2, #4
 800f484:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	69db      	ldr	r3, [r3, #28]
 800f48c:	f003 0303 	and.w	r3, r3, #3
 800f490:	2b00      	cmp	r3, #0
 800f492:	d003      	beq.n	800f49c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 fa9f 	bl	800f9d8 <HAL_TIM_IC_CaptureCallback>
 800f49a:	e005      	b.n	800f4a8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7f2 f85f 	bl	8001560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f000 faa2 	bl	800f9ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	f003 0310 	and.w	r3, r3, #16
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d020      	beq.n	800f4fa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f003 0310 	and.w	r3, r3, #16
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d01b      	beq.n	800f4fa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f06f 0210 	mvn.w	r2, #16
 800f4ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2208      	movs	r2, #8
 800f4d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	69db      	ldr	r3, [r3, #28]
 800f4d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d003      	beq.n	800f4e8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f000 fa79 	bl	800f9d8 <HAL_TIM_IC_CaptureCallback>
 800f4e6:	e005      	b.n	800f4f4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f7f2 f839 	bl	8001560 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4ee:	6878      	ldr	r0, [r7, #4]
 800f4f0:	f000 fa7c 	bl	800f9ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	f003 0301 	and.w	r3, r3, #1
 800f500:	2b00      	cmp	r3, #0
 800f502:	d00c      	beq.n	800f51e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f003 0301 	and.w	r3, r3, #1
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d007      	beq.n	800f51e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f06f 0201 	mvn.w	r2, #1
 800f516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f7f2 fea9 	bl	8002270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f524:	2b00      	cmp	r3, #0
 800f526:	d104      	bne.n	800f532 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d00c      	beq.n	800f54c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d007      	beq.n	800f54c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800f544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	f000 ffba 	bl	80104c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f552:	2b00      	cmp	r3, #0
 800f554:	d00c      	beq.n	800f570 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d007      	beq.n	800f570 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 ffb2 	bl	80104d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f576:	2b00      	cmp	r3, #0
 800f578:	d00c      	beq.n	800f594 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f580:	2b00      	cmp	r3, #0
 800f582:	d007      	beq.n	800f594 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f58c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f000 fa36 	bl	800fa00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	f003 0320 	and.w	r3, r3, #32
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d00c      	beq.n	800f5b8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f003 0320 	and.w	r3, r3, #32
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d007      	beq.n	800f5b8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	f06f 0220 	mvn.w	r2, #32
 800f5b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 ff7a 	bl	80104ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f5b8:	bf00      	nop
 800f5ba:	3710      	adds	r7, #16
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b086      	sub	sp, #24
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	60f8      	str	r0, [r7, #12]
 800f5c8:	60b9      	str	r1, [r7, #8]
 800f5ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d101      	bne.n	800f5de <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f5da:	2302      	movs	r3, #2
 800f5dc:	e0ff      	b.n	800f7de <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2201      	movs	r2, #1
 800f5e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2b14      	cmp	r3, #20
 800f5ea:	f200 80f0 	bhi.w	800f7ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f5ee:	a201      	add	r2, pc, #4	; (adr r2, 800f5f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f4:	0800f649 	.word	0x0800f649
 800f5f8:	0800f7cf 	.word	0x0800f7cf
 800f5fc:	0800f7cf 	.word	0x0800f7cf
 800f600:	0800f7cf 	.word	0x0800f7cf
 800f604:	0800f689 	.word	0x0800f689
 800f608:	0800f7cf 	.word	0x0800f7cf
 800f60c:	0800f7cf 	.word	0x0800f7cf
 800f610:	0800f7cf 	.word	0x0800f7cf
 800f614:	0800f6cb 	.word	0x0800f6cb
 800f618:	0800f7cf 	.word	0x0800f7cf
 800f61c:	0800f7cf 	.word	0x0800f7cf
 800f620:	0800f7cf 	.word	0x0800f7cf
 800f624:	0800f70b 	.word	0x0800f70b
 800f628:	0800f7cf 	.word	0x0800f7cf
 800f62c:	0800f7cf 	.word	0x0800f7cf
 800f630:	0800f7cf 	.word	0x0800f7cf
 800f634:	0800f74d 	.word	0x0800f74d
 800f638:	0800f7cf 	.word	0x0800f7cf
 800f63c:	0800f7cf 	.word	0x0800f7cf
 800f640:	0800f7cf 	.word	0x0800f7cf
 800f644:	0800f78d 	.word	0x0800f78d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	68b9      	ldr	r1, [r7, #8]
 800f64e:	4618      	mov	r0, r3
 800f650:	f000 fa86 	bl	800fb60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	699a      	ldr	r2, [r3, #24]
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	f042 0208 	orr.w	r2, r2, #8
 800f662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	699a      	ldr	r2, [r3, #24]
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	f022 0204 	bic.w	r2, r2, #4
 800f672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	6999      	ldr	r1, [r3, #24]
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	691a      	ldr	r2, [r3, #16]
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	430a      	orrs	r2, r1
 800f684:	619a      	str	r2, [r3, #24]
      break;
 800f686:	e0a5      	b.n	800f7d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	68b9      	ldr	r1, [r7, #8]
 800f68e:	4618      	mov	r0, r3
 800f690:	f000 faf6 	bl	800fc80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	699a      	ldr	r2, [r3, #24]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f6a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	699a      	ldr	r2, [r3, #24]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	6999      	ldr	r1, [r3, #24]
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	691b      	ldr	r3, [r3, #16]
 800f6be:	021a      	lsls	r2, r3, #8
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	430a      	orrs	r2, r1
 800f6c6:	619a      	str	r2, [r3, #24]
      break;
 800f6c8:	e084      	b.n	800f7d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	68b9      	ldr	r1, [r7, #8]
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f000 fb5f 	bl	800fd94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	69da      	ldr	r2, [r3, #28]
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f042 0208 	orr.w	r2, r2, #8
 800f6e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	69da      	ldr	r2, [r3, #28]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f022 0204 	bic.w	r2, r2, #4
 800f6f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	69d9      	ldr	r1, [r3, #28]
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	691a      	ldr	r2, [r3, #16]
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	430a      	orrs	r2, r1
 800f706:	61da      	str	r2, [r3, #28]
      break;
 800f708:	e064      	b.n	800f7d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	68b9      	ldr	r1, [r7, #8]
 800f710:	4618      	mov	r0, r3
 800f712:	f000 fbc7 	bl	800fea4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	69da      	ldr	r2, [r3, #28]
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	69da      	ldr	r2, [r3, #28]
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	69d9      	ldr	r1, [r3, #28]
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	691b      	ldr	r3, [r3, #16]
 800f740:	021a      	lsls	r2, r3, #8
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	430a      	orrs	r2, r1
 800f748:	61da      	str	r2, [r3, #28]
      break;
 800f74a:	e043      	b.n	800f7d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	68b9      	ldr	r1, [r7, #8]
 800f752:	4618      	mov	r0, r3
 800f754:	f000 fc10 	bl	800ff78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f042 0208 	orr.w	r2, r2, #8
 800f766:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f022 0204 	bic.w	r2, r2, #4
 800f776:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	691a      	ldr	r2, [r3, #16]
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	430a      	orrs	r2, r1
 800f788:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f78a:	e023      	b.n	800f7d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	68b9      	ldr	r1, [r7, #8]
 800f792:	4618      	mov	r0, r3
 800f794:	f000 fc54 	bl	8010040 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f7a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	691b      	ldr	r3, [r3, #16]
 800f7c2:	021a      	lsls	r2, r3, #8
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	430a      	orrs	r2, r1
 800f7ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f7cc:	e002      	b.n	800f7d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	75fb      	strb	r3, [r7, #23]
      break;
 800f7d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f7dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3718      	adds	r7, #24
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop

0800f7e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	d101      	bne.n	800f804 <HAL_TIM_ConfigClockSource+0x1c>
 800f800:	2302      	movs	r3, #2
 800f802:	e0dc      	b.n	800f9be <HAL_TIM_ConfigClockSource+0x1d6>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2201      	movs	r2, #1
 800f808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2202      	movs	r2, #2
 800f810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	689b      	ldr	r3, [r3, #8]
 800f81a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f81c:	68ba      	ldr	r2, [r7, #8]
 800f81e:	4b6a      	ldr	r3, [pc, #424]	; (800f9c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f820:	4013      	ands	r3, r2
 800f822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f82a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	68ba      	ldr	r2, [r7, #8]
 800f832:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4a64      	ldr	r2, [pc, #400]	; (800f9cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	f000 80a9 	beq.w	800f992 <HAL_TIM_ConfigClockSource+0x1aa>
 800f840:	4a62      	ldr	r2, [pc, #392]	; (800f9cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800f842:	4293      	cmp	r3, r2
 800f844:	f200 80ae 	bhi.w	800f9a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f848:	4a61      	ldr	r2, [pc, #388]	; (800f9d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	f000 80a1 	beq.w	800f992 <HAL_TIM_ConfigClockSource+0x1aa>
 800f850:	4a5f      	ldr	r2, [pc, #380]	; (800f9d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f852:	4293      	cmp	r3, r2
 800f854:	f200 80a6 	bhi.w	800f9a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f858:	4a5e      	ldr	r2, [pc, #376]	; (800f9d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f85a:	4293      	cmp	r3, r2
 800f85c:	f000 8099 	beq.w	800f992 <HAL_TIM_ConfigClockSource+0x1aa>
 800f860:	4a5c      	ldr	r2, [pc, #368]	; (800f9d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f862:	4293      	cmp	r3, r2
 800f864:	f200 809e 	bhi.w	800f9a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f868:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f86c:	f000 8091 	beq.w	800f992 <HAL_TIM_ConfigClockSource+0x1aa>
 800f870:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f874:	f200 8096 	bhi.w	800f9a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f878:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f87c:	f000 8089 	beq.w	800f992 <HAL_TIM_ConfigClockSource+0x1aa>
 800f880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f884:	f200 808e 	bhi.w	800f9a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f88c:	d03e      	beq.n	800f90c <HAL_TIM_ConfigClockSource+0x124>
 800f88e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f892:	f200 8087 	bhi.w	800f9a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f89a:	f000 8086 	beq.w	800f9aa <HAL_TIM_ConfigClockSource+0x1c2>
 800f89e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8a2:	d87f      	bhi.n	800f9a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8a4:	2b70      	cmp	r3, #112	; 0x70
 800f8a6:	d01a      	beq.n	800f8de <HAL_TIM_ConfigClockSource+0xf6>
 800f8a8:	2b70      	cmp	r3, #112	; 0x70
 800f8aa:	d87b      	bhi.n	800f9a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8ac:	2b60      	cmp	r3, #96	; 0x60
 800f8ae:	d050      	beq.n	800f952 <HAL_TIM_ConfigClockSource+0x16a>
 800f8b0:	2b60      	cmp	r3, #96	; 0x60
 800f8b2:	d877      	bhi.n	800f9a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8b4:	2b50      	cmp	r3, #80	; 0x50
 800f8b6:	d03c      	beq.n	800f932 <HAL_TIM_ConfigClockSource+0x14a>
 800f8b8:	2b50      	cmp	r3, #80	; 0x50
 800f8ba:	d873      	bhi.n	800f9a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8bc:	2b40      	cmp	r3, #64	; 0x40
 800f8be:	d058      	beq.n	800f972 <HAL_TIM_ConfigClockSource+0x18a>
 800f8c0:	2b40      	cmp	r3, #64	; 0x40
 800f8c2:	d86f      	bhi.n	800f9a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8c4:	2b30      	cmp	r3, #48	; 0x30
 800f8c6:	d064      	beq.n	800f992 <HAL_TIM_ConfigClockSource+0x1aa>
 800f8c8:	2b30      	cmp	r3, #48	; 0x30
 800f8ca:	d86b      	bhi.n	800f9a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8cc:	2b20      	cmp	r3, #32
 800f8ce:	d060      	beq.n	800f992 <HAL_TIM_ConfigClockSource+0x1aa>
 800f8d0:	2b20      	cmp	r3, #32
 800f8d2:	d867      	bhi.n	800f9a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d05c      	beq.n	800f992 <HAL_TIM_ConfigClockSource+0x1aa>
 800f8d8:	2b10      	cmp	r3, #16
 800f8da:	d05a      	beq.n	800f992 <HAL_TIM_ConfigClockSource+0x1aa>
 800f8dc:	e062      	b.n	800f9a4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6818      	ldr	r0, [r3, #0]
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	6899      	ldr	r1, [r3, #8]
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	685a      	ldr	r2, [r3, #4]
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	68db      	ldr	r3, [r3, #12]
 800f8ee:	f000 fc8b 	bl	8010208 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	689b      	ldr	r3, [r3, #8]
 800f8f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f900:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	68ba      	ldr	r2, [r7, #8]
 800f908:	609a      	str	r2, [r3, #8]
      break;
 800f90a:	e04f      	b.n	800f9ac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6818      	ldr	r0, [r3, #0]
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	6899      	ldr	r1, [r3, #8]
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	685a      	ldr	r2, [r3, #4]
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	68db      	ldr	r3, [r3, #12]
 800f91c:	f000 fc74 	bl	8010208 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	689a      	ldr	r2, [r3, #8]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f92e:	609a      	str	r2, [r3, #8]
      break;
 800f930:	e03c      	b.n	800f9ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6818      	ldr	r0, [r3, #0]
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	6859      	ldr	r1, [r3, #4]
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	461a      	mov	r2, r3
 800f940:	f000 fbe4 	bl	801010c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	2150      	movs	r1, #80	; 0x50
 800f94a:	4618      	mov	r0, r3
 800f94c:	f000 fc3e 	bl	80101cc <TIM_ITRx_SetConfig>
      break;
 800f950:	e02c      	b.n	800f9ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6818      	ldr	r0, [r3, #0]
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	6859      	ldr	r1, [r3, #4]
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	461a      	mov	r2, r3
 800f960:	f000 fc03 	bl	801016a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2160      	movs	r1, #96	; 0x60
 800f96a:	4618      	mov	r0, r3
 800f96c:	f000 fc2e 	bl	80101cc <TIM_ITRx_SetConfig>
      break;
 800f970:	e01c      	b.n	800f9ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6818      	ldr	r0, [r3, #0]
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	6859      	ldr	r1, [r3, #4]
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	461a      	mov	r2, r3
 800f980:	f000 fbc4 	bl	801010c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2140      	movs	r1, #64	; 0x40
 800f98a:	4618      	mov	r0, r3
 800f98c:	f000 fc1e 	bl	80101cc <TIM_ITRx_SetConfig>
      break;
 800f990:	e00c      	b.n	800f9ac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681a      	ldr	r2, [r3, #0]
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4619      	mov	r1, r3
 800f99c:	4610      	mov	r0, r2
 800f99e:	f000 fc15 	bl	80101cc <TIM_ITRx_SetConfig>
      break;
 800f9a2:	e003      	b.n	800f9ac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	73fb      	strb	r3, [r7, #15]
      break;
 800f9a8:	e000      	b.n	800f9ac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f9aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
 800f9c6:	bf00      	nop
 800f9c8:	ffceff88 	.word	0xffceff88
 800f9cc:	00100040 	.word	0x00100040
 800f9d0:	00100030 	.word	0x00100030
 800f9d4:	00100020 	.word	0x00100020

0800f9d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b083      	sub	sp, #12
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f9e0:	bf00      	nop
 800f9e2:	370c      	adds	r7, #12
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr

0800f9ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b083      	sub	sp, #12
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f9f4:	bf00      	nop
 800f9f6:	370c      	adds	r7, #12
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fe:	4770      	bx	lr

0800fa00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fa00:	b480      	push	{r7}
 800fa02:	b083      	sub	sp, #12
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fa08:	bf00      	nop
 800fa0a:	370c      	adds	r7, #12
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr

0800fa14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fa14:	b480      	push	{r7}
 800fa16:	b085      	sub	sp, #20
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	4a46      	ldr	r2, [pc, #280]	; (800fb40 <TIM_Base_SetConfig+0x12c>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d013      	beq.n	800fa54 <TIM_Base_SetConfig+0x40>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa32:	d00f      	beq.n	800fa54 <TIM_Base_SetConfig+0x40>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	4a43      	ldr	r2, [pc, #268]	; (800fb44 <TIM_Base_SetConfig+0x130>)
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	d00b      	beq.n	800fa54 <TIM_Base_SetConfig+0x40>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	4a42      	ldr	r2, [pc, #264]	; (800fb48 <TIM_Base_SetConfig+0x134>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d007      	beq.n	800fa54 <TIM_Base_SetConfig+0x40>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	4a41      	ldr	r2, [pc, #260]	; (800fb4c <TIM_Base_SetConfig+0x138>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d003      	beq.n	800fa54 <TIM_Base_SetConfig+0x40>
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	4a40      	ldr	r2, [pc, #256]	; (800fb50 <TIM_Base_SetConfig+0x13c>)
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d108      	bne.n	800fa66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	68fa      	ldr	r2, [r7, #12]
 800fa62:	4313      	orrs	r3, r2
 800fa64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4a35      	ldr	r2, [pc, #212]	; (800fb40 <TIM_Base_SetConfig+0x12c>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d01f      	beq.n	800faae <TIM_Base_SetConfig+0x9a>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa74:	d01b      	beq.n	800faae <TIM_Base_SetConfig+0x9a>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	4a32      	ldr	r2, [pc, #200]	; (800fb44 <TIM_Base_SetConfig+0x130>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d017      	beq.n	800faae <TIM_Base_SetConfig+0x9a>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4a31      	ldr	r2, [pc, #196]	; (800fb48 <TIM_Base_SetConfig+0x134>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d013      	beq.n	800faae <TIM_Base_SetConfig+0x9a>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	4a30      	ldr	r2, [pc, #192]	; (800fb4c <TIM_Base_SetConfig+0x138>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d00f      	beq.n	800faae <TIM_Base_SetConfig+0x9a>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	4a2f      	ldr	r2, [pc, #188]	; (800fb50 <TIM_Base_SetConfig+0x13c>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d00b      	beq.n	800faae <TIM_Base_SetConfig+0x9a>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	4a2e      	ldr	r2, [pc, #184]	; (800fb54 <TIM_Base_SetConfig+0x140>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d007      	beq.n	800faae <TIM_Base_SetConfig+0x9a>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4a2d      	ldr	r2, [pc, #180]	; (800fb58 <TIM_Base_SetConfig+0x144>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d003      	beq.n	800faae <TIM_Base_SetConfig+0x9a>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	4a2c      	ldr	r2, [pc, #176]	; (800fb5c <TIM_Base_SetConfig+0x148>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d108      	bne.n	800fac0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	68db      	ldr	r3, [r3, #12]
 800faba:	68fa      	ldr	r2, [r7, #12]
 800fabc:	4313      	orrs	r3, r2
 800fabe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	695b      	ldr	r3, [r3, #20]
 800faca:	4313      	orrs	r3, r2
 800facc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	68fa      	ldr	r2, [r7, #12]
 800fad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	689a      	ldr	r2, [r3, #8]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	681a      	ldr	r2, [r3, #0]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	4a16      	ldr	r2, [pc, #88]	; (800fb40 <TIM_Base_SetConfig+0x12c>)
 800fae8:	4293      	cmp	r3, r2
 800faea:	d00f      	beq.n	800fb0c <TIM_Base_SetConfig+0xf8>
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	4a18      	ldr	r2, [pc, #96]	; (800fb50 <TIM_Base_SetConfig+0x13c>)
 800faf0:	4293      	cmp	r3, r2
 800faf2:	d00b      	beq.n	800fb0c <TIM_Base_SetConfig+0xf8>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	4a17      	ldr	r2, [pc, #92]	; (800fb54 <TIM_Base_SetConfig+0x140>)
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d007      	beq.n	800fb0c <TIM_Base_SetConfig+0xf8>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	4a16      	ldr	r2, [pc, #88]	; (800fb58 <TIM_Base_SetConfig+0x144>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d003      	beq.n	800fb0c <TIM_Base_SetConfig+0xf8>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	4a15      	ldr	r2, [pc, #84]	; (800fb5c <TIM_Base_SetConfig+0x148>)
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d103      	bne.n	800fb14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	691a      	ldr	r2, [r3, #16]
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2201      	movs	r2, #1
 800fb18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	691b      	ldr	r3, [r3, #16]
 800fb1e:	f003 0301 	and.w	r3, r3, #1
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	d105      	bne.n	800fb32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	691b      	ldr	r3, [r3, #16]
 800fb2a:	f023 0201 	bic.w	r2, r3, #1
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	611a      	str	r2, [r3, #16]
  }
}
 800fb32:	bf00      	nop
 800fb34:	3714      	adds	r7, #20
 800fb36:	46bd      	mov	sp, r7
 800fb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3c:	4770      	bx	lr
 800fb3e:	bf00      	nop
 800fb40:	40010000 	.word	0x40010000
 800fb44:	40000400 	.word	0x40000400
 800fb48:	40000800 	.word	0x40000800
 800fb4c:	40000c00 	.word	0x40000c00
 800fb50:	40010400 	.word	0x40010400
 800fb54:	40014000 	.word	0x40014000
 800fb58:	40014400 	.word	0x40014400
 800fb5c:	40014800 	.word	0x40014800

0800fb60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb60:	b480      	push	{r7}
 800fb62:	b087      	sub	sp, #28
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6a1b      	ldr	r3, [r3, #32]
 800fb6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6a1b      	ldr	r3, [r3, #32]
 800fb74:	f023 0201 	bic.w	r2, r3, #1
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	699b      	ldr	r3, [r3, #24]
 800fb86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fb88:	68fa      	ldr	r2, [r7, #12]
 800fb8a:	4b37      	ldr	r3, [pc, #220]	; (800fc68 <TIM_OC1_SetConfig+0x108>)
 800fb8c:	4013      	ands	r3, r2
 800fb8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f023 0303 	bic.w	r3, r3, #3
 800fb96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	4313      	orrs	r3, r2
 800fba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	f023 0302 	bic.w	r3, r3, #2
 800fba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	689b      	ldr	r3, [r3, #8]
 800fbae:	697a      	ldr	r2, [r7, #20]
 800fbb0:	4313      	orrs	r3, r2
 800fbb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	4a2d      	ldr	r2, [pc, #180]	; (800fc6c <TIM_OC1_SetConfig+0x10c>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	d00f      	beq.n	800fbdc <TIM_OC1_SetConfig+0x7c>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	4a2c      	ldr	r2, [pc, #176]	; (800fc70 <TIM_OC1_SetConfig+0x110>)
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	d00b      	beq.n	800fbdc <TIM_OC1_SetConfig+0x7c>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	4a2b      	ldr	r2, [pc, #172]	; (800fc74 <TIM_OC1_SetConfig+0x114>)
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d007      	beq.n	800fbdc <TIM_OC1_SetConfig+0x7c>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	4a2a      	ldr	r2, [pc, #168]	; (800fc78 <TIM_OC1_SetConfig+0x118>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d003      	beq.n	800fbdc <TIM_OC1_SetConfig+0x7c>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	4a29      	ldr	r2, [pc, #164]	; (800fc7c <TIM_OC1_SetConfig+0x11c>)
 800fbd8:	4293      	cmp	r3, r2
 800fbda:	d10c      	bne.n	800fbf6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	f023 0308 	bic.w	r3, r3, #8
 800fbe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	697a      	ldr	r2, [r7, #20]
 800fbea:	4313      	orrs	r3, r2
 800fbec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	f023 0304 	bic.w	r3, r3, #4
 800fbf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	4a1c      	ldr	r2, [pc, #112]	; (800fc6c <TIM_OC1_SetConfig+0x10c>)
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d00f      	beq.n	800fc1e <TIM_OC1_SetConfig+0xbe>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	4a1b      	ldr	r2, [pc, #108]	; (800fc70 <TIM_OC1_SetConfig+0x110>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d00b      	beq.n	800fc1e <TIM_OC1_SetConfig+0xbe>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	4a1a      	ldr	r2, [pc, #104]	; (800fc74 <TIM_OC1_SetConfig+0x114>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d007      	beq.n	800fc1e <TIM_OC1_SetConfig+0xbe>
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	4a19      	ldr	r2, [pc, #100]	; (800fc78 <TIM_OC1_SetConfig+0x118>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d003      	beq.n	800fc1e <TIM_OC1_SetConfig+0xbe>
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	4a18      	ldr	r2, [pc, #96]	; (800fc7c <TIM_OC1_SetConfig+0x11c>)
 800fc1a:	4293      	cmp	r3, r2
 800fc1c:	d111      	bne.n	800fc42 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fc2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	695b      	ldr	r3, [r3, #20]
 800fc32:	693a      	ldr	r2, [r7, #16]
 800fc34:	4313      	orrs	r3, r2
 800fc36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	699b      	ldr	r3, [r3, #24]
 800fc3c:	693a      	ldr	r2, [r7, #16]
 800fc3e:	4313      	orrs	r3, r2
 800fc40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	693a      	ldr	r2, [r7, #16]
 800fc46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	68fa      	ldr	r2, [r7, #12]
 800fc4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	685a      	ldr	r2, [r3, #4]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	697a      	ldr	r2, [r7, #20]
 800fc5a:	621a      	str	r2, [r3, #32]
}
 800fc5c:	bf00      	nop
 800fc5e:	371c      	adds	r7, #28
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr
 800fc68:	fffeff8f 	.word	0xfffeff8f
 800fc6c:	40010000 	.word	0x40010000
 800fc70:	40010400 	.word	0x40010400
 800fc74:	40014000 	.word	0x40014000
 800fc78:	40014400 	.word	0x40014400
 800fc7c:	40014800 	.word	0x40014800

0800fc80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b087      	sub	sp, #28
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6a1b      	ldr	r3, [r3, #32]
 800fc8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6a1b      	ldr	r3, [r3, #32]
 800fc94:	f023 0210 	bic.w	r2, r3, #16
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	699b      	ldr	r3, [r3, #24]
 800fca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fca8:	68fa      	ldr	r2, [r7, #12]
 800fcaa:	4b34      	ldr	r3, [pc, #208]	; (800fd7c <TIM_OC2_SetConfig+0xfc>)
 800fcac:	4013      	ands	r3, r2
 800fcae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	021b      	lsls	r3, r3, #8
 800fcbe:	68fa      	ldr	r2, [r7, #12]
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	f023 0320 	bic.w	r3, r3, #32
 800fcca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	689b      	ldr	r3, [r3, #8]
 800fcd0:	011b      	lsls	r3, r3, #4
 800fcd2:	697a      	ldr	r2, [r7, #20]
 800fcd4:	4313      	orrs	r3, r2
 800fcd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	4a29      	ldr	r2, [pc, #164]	; (800fd80 <TIM_OC2_SetConfig+0x100>)
 800fcdc:	4293      	cmp	r3, r2
 800fcde:	d003      	beq.n	800fce8 <TIM_OC2_SetConfig+0x68>
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	4a28      	ldr	r2, [pc, #160]	; (800fd84 <TIM_OC2_SetConfig+0x104>)
 800fce4:	4293      	cmp	r3, r2
 800fce6:	d10d      	bne.n	800fd04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fcee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	011b      	lsls	r3, r3, #4
 800fcf6:	697a      	ldr	r2, [r7, #20]
 800fcf8:	4313      	orrs	r3, r2
 800fcfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	4a1e      	ldr	r2, [pc, #120]	; (800fd80 <TIM_OC2_SetConfig+0x100>)
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d00f      	beq.n	800fd2c <TIM_OC2_SetConfig+0xac>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	4a1d      	ldr	r2, [pc, #116]	; (800fd84 <TIM_OC2_SetConfig+0x104>)
 800fd10:	4293      	cmp	r3, r2
 800fd12:	d00b      	beq.n	800fd2c <TIM_OC2_SetConfig+0xac>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	4a1c      	ldr	r2, [pc, #112]	; (800fd88 <TIM_OC2_SetConfig+0x108>)
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	d007      	beq.n	800fd2c <TIM_OC2_SetConfig+0xac>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	4a1b      	ldr	r2, [pc, #108]	; (800fd8c <TIM_OC2_SetConfig+0x10c>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d003      	beq.n	800fd2c <TIM_OC2_SetConfig+0xac>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	4a1a      	ldr	r2, [pc, #104]	; (800fd90 <TIM_OC2_SetConfig+0x110>)
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d113      	bne.n	800fd54 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fd32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	695b      	ldr	r3, [r3, #20]
 800fd40:	009b      	lsls	r3, r3, #2
 800fd42:	693a      	ldr	r2, [r7, #16]
 800fd44:	4313      	orrs	r3, r2
 800fd46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	699b      	ldr	r3, [r3, #24]
 800fd4c:	009b      	lsls	r3, r3, #2
 800fd4e:	693a      	ldr	r2, [r7, #16]
 800fd50:	4313      	orrs	r3, r2
 800fd52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	693a      	ldr	r2, [r7, #16]
 800fd58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	68fa      	ldr	r2, [r7, #12]
 800fd5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	685a      	ldr	r2, [r3, #4]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	697a      	ldr	r2, [r7, #20]
 800fd6c:	621a      	str	r2, [r3, #32]
}
 800fd6e:	bf00      	nop
 800fd70:	371c      	adds	r7, #28
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr
 800fd7a:	bf00      	nop
 800fd7c:	feff8fff 	.word	0xfeff8fff
 800fd80:	40010000 	.word	0x40010000
 800fd84:	40010400 	.word	0x40010400
 800fd88:	40014000 	.word	0x40014000
 800fd8c:	40014400 	.word	0x40014400
 800fd90:	40014800 	.word	0x40014800

0800fd94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b087      	sub	sp, #28
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
 800fd9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6a1b      	ldr	r3, [r3, #32]
 800fda2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6a1b      	ldr	r3, [r3, #32]
 800fda8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	69db      	ldr	r3, [r3, #28]
 800fdba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fdbc:	68fa      	ldr	r2, [r7, #12]
 800fdbe:	4b33      	ldr	r3, [pc, #204]	; (800fe8c <TIM_OC3_SetConfig+0xf8>)
 800fdc0:	4013      	ands	r3, r2
 800fdc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	f023 0303 	bic.w	r3, r3, #3
 800fdca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	68fa      	ldr	r2, [r7, #12]
 800fdd2:	4313      	orrs	r3, r2
 800fdd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	689b      	ldr	r3, [r3, #8]
 800fde2:	021b      	lsls	r3, r3, #8
 800fde4:	697a      	ldr	r2, [r7, #20]
 800fde6:	4313      	orrs	r3, r2
 800fde8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4a28      	ldr	r2, [pc, #160]	; (800fe90 <TIM_OC3_SetConfig+0xfc>)
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d003      	beq.n	800fdfa <TIM_OC3_SetConfig+0x66>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	4a27      	ldr	r2, [pc, #156]	; (800fe94 <TIM_OC3_SetConfig+0x100>)
 800fdf6:	4293      	cmp	r3, r2
 800fdf8:	d10d      	bne.n	800fe16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fe00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	68db      	ldr	r3, [r3, #12]
 800fe06:	021b      	lsls	r3, r3, #8
 800fe08:	697a      	ldr	r2, [r7, #20]
 800fe0a:	4313      	orrs	r3, r2
 800fe0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fe14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	4a1d      	ldr	r2, [pc, #116]	; (800fe90 <TIM_OC3_SetConfig+0xfc>)
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	d00f      	beq.n	800fe3e <TIM_OC3_SetConfig+0xaa>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	4a1c      	ldr	r2, [pc, #112]	; (800fe94 <TIM_OC3_SetConfig+0x100>)
 800fe22:	4293      	cmp	r3, r2
 800fe24:	d00b      	beq.n	800fe3e <TIM_OC3_SetConfig+0xaa>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	4a1b      	ldr	r2, [pc, #108]	; (800fe98 <TIM_OC3_SetConfig+0x104>)
 800fe2a:	4293      	cmp	r3, r2
 800fe2c:	d007      	beq.n	800fe3e <TIM_OC3_SetConfig+0xaa>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	4a1a      	ldr	r2, [pc, #104]	; (800fe9c <TIM_OC3_SetConfig+0x108>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d003      	beq.n	800fe3e <TIM_OC3_SetConfig+0xaa>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	4a19      	ldr	r2, [pc, #100]	; (800fea0 <TIM_OC3_SetConfig+0x10c>)
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d113      	bne.n	800fe66 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fe4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	695b      	ldr	r3, [r3, #20]
 800fe52:	011b      	lsls	r3, r3, #4
 800fe54:	693a      	ldr	r2, [r7, #16]
 800fe56:	4313      	orrs	r3, r2
 800fe58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	699b      	ldr	r3, [r3, #24]
 800fe5e:	011b      	lsls	r3, r3, #4
 800fe60:	693a      	ldr	r2, [r7, #16]
 800fe62:	4313      	orrs	r3, r2
 800fe64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	693a      	ldr	r2, [r7, #16]
 800fe6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	68fa      	ldr	r2, [r7, #12]
 800fe70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	685a      	ldr	r2, [r3, #4]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	697a      	ldr	r2, [r7, #20]
 800fe7e:	621a      	str	r2, [r3, #32]
}
 800fe80:	bf00      	nop
 800fe82:	371c      	adds	r7, #28
 800fe84:	46bd      	mov	sp, r7
 800fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8a:	4770      	bx	lr
 800fe8c:	fffeff8f 	.word	0xfffeff8f
 800fe90:	40010000 	.word	0x40010000
 800fe94:	40010400 	.word	0x40010400
 800fe98:	40014000 	.word	0x40014000
 800fe9c:	40014400 	.word	0x40014400
 800fea0:	40014800 	.word	0x40014800

0800fea4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b087      	sub	sp, #28
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6a1b      	ldr	r3, [r3, #32]
 800feb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6a1b      	ldr	r3, [r3, #32]
 800feb8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	69db      	ldr	r3, [r3, #28]
 800feca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fecc:	68fa      	ldr	r2, [r7, #12]
 800fece:	4b24      	ldr	r3, [pc, #144]	; (800ff60 <TIM_OC4_SetConfig+0xbc>)
 800fed0:	4013      	ands	r3, r2
 800fed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800feda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	021b      	lsls	r3, r3, #8
 800fee2:	68fa      	ldr	r2, [r7, #12]
 800fee4:	4313      	orrs	r3, r2
 800fee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800feee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	689b      	ldr	r3, [r3, #8]
 800fef4:	031b      	lsls	r3, r3, #12
 800fef6:	693a      	ldr	r2, [r7, #16]
 800fef8:	4313      	orrs	r3, r2
 800fefa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	4a19      	ldr	r2, [pc, #100]	; (800ff64 <TIM_OC4_SetConfig+0xc0>)
 800ff00:	4293      	cmp	r3, r2
 800ff02:	d00f      	beq.n	800ff24 <TIM_OC4_SetConfig+0x80>
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	4a18      	ldr	r2, [pc, #96]	; (800ff68 <TIM_OC4_SetConfig+0xc4>)
 800ff08:	4293      	cmp	r3, r2
 800ff0a:	d00b      	beq.n	800ff24 <TIM_OC4_SetConfig+0x80>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	4a17      	ldr	r2, [pc, #92]	; (800ff6c <TIM_OC4_SetConfig+0xc8>)
 800ff10:	4293      	cmp	r3, r2
 800ff12:	d007      	beq.n	800ff24 <TIM_OC4_SetConfig+0x80>
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	4a16      	ldr	r2, [pc, #88]	; (800ff70 <TIM_OC4_SetConfig+0xcc>)
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	d003      	beq.n	800ff24 <TIM_OC4_SetConfig+0x80>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	4a15      	ldr	r2, [pc, #84]	; (800ff74 <TIM_OC4_SetConfig+0xd0>)
 800ff20:	4293      	cmp	r3, r2
 800ff22:	d109      	bne.n	800ff38 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ff2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	695b      	ldr	r3, [r3, #20]
 800ff30:	019b      	lsls	r3, r3, #6
 800ff32:	697a      	ldr	r2, [r7, #20]
 800ff34:	4313      	orrs	r3, r2
 800ff36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	697a      	ldr	r2, [r7, #20]
 800ff3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	68fa      	ldr	r2, [r7, #12]
 800ff42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	685a      	ldr	r2, [r3, #4]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	693a      	ldr	r2, [r7, #16]
 800ff50:	621a      	str	r2, [r3, #32]
}
 800ff52:	bf00      	nop
 800ff54:	371c      	adds	r7, #28
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop
 800ff60:	feff8fff 	.word	0xfeff8fff
 800ff64:	40010000 	.word	0x40010000
 800ff68:	40010400 	.word	0x40010400
 800ff6c:	40014000 	.word	0x40014000
 800ff70:	40014400 	.word	0x40014400
 800ff74:	40014800 	.word	0x40014800

0800ff78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b087      	sub	sp, #28
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6a1b      	ldr	r3, [r3, #32]
 800ff86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6a1b      	ldr	r3, [r3, #32]
 800ff8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ffa0:	68fa      	ldr	r2, [r7, #12]
 800ffa2:	4b21      	ldr	r3, [pc, #132]	; (8010028 <TIM_OC5_SetConfig+0xb0>)
 800ffa4:	4013      	ands	r3, r2
 800ffa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	68fa      	ldr	r2, [r7, #12]
 800ffae:	4313      	orrs	r3, r2
 800ffb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ffb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	689b      	ldr	r3, [r3, #8]
 800ffbe:	041b      	lsls	r3, r3, #16
 800ffc0:	693a      	ldr	r2, [r7, #16]
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	4a18      	ldr	r2, [pc, #96]	; (801002c <TIM_OC5_SetConfig+0xb4>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d00f      	beq.n	800ffee <TIM_OC5_SetConfig+0x76>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	4a17      	ldr	r2, [pc, #92]	; (8010030 <TIM_OC5_SetConfig+0xb8>)
 800ffd2:	4293      	cmp	r3, r2
 800ffd4:	d00b      	beq.n	800ffee <TIM_OC5_SetConfig+0x76>
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	4a16      	ldr	r2, [pc, #88]	; (8010034 <TIM_OC5_SetConfig+0xbc>)
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	d007      	beq.n	800ffee <TIM_OC5_SetConfig+0x76>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	4a15      	ldr	r2, [pc, #84]	; (8010038 <TIM_OC5_SetConfig+0xc0>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d003      	beq.n	800ffee <TIM_OC5_SetConfig+0x76>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	4a14      	ldr	r2, [pc, #80]	; (801003c <TIM_OC5_SetConfig+0xc4>)
 800ffea:	4293      	cmp	r3, r2
 800ffec:	d109      	bne.n	8010002 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fff4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	695b      	ldr	r3, [r3, #20]
 800fffa:	021b      	lsls	r3, r3, #8
 800fffc:	697a      	ldr	r2, [r7, #20]
 800fffe:	4313      	orrs	r3, r2
 8010000:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	697a      	ldr	r2, [r7, #20]
 8010006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	68fa      	ldr	r2, [r7, #12]
 801000c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	685a      	ldr	r2, [r3, #4]
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	693a      	ldr	r2, [r7, #16]
 801001a:	621a      	str	r2, [r3, #32]
}
 801001c:	bf00      	nop
 801001e:	371c      	adds	r7, #28
 8010020:	46bd      	mov	sp, r7
 8010022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010026:	4770      	bx	lr
 8010028:	fffeff8f 	.word	0xfffeff8f
 801002c:	40010000 	.word	0x40010000
 8010030:	40010400 	.word	0x40010400
 8010034:	40014000 	.word	0x40014000
 8010038:	40014400 	.word	0x40014400
 801003c:	40014800 	.word	0x40014800

08010040 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010040:	b480      	push	{r7}
 8010042:	b087      	sub	sp, #28
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
 8010048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6a1b      	ldr	r3, [r3, #32]
 801004e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6a1b      	ldr	r3, [r3, #32]
 8010054:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	685b      	ldr	r3, [r3, #4]
 8010060:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010068:	68fa      	ldr	r2, [r7, #12]
 801006a:	4b22      	ldr	r3, [pc, #136]	; (80100f4 <TIM_OC6_SetConfig+0xb4>)
 801006c:	4013      	ands	r3, r2
 801006e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	021b      	lsls	r3, r3, #8
 8010076:	68fa      	ldr	r2, [r7, #12]
 8010078:	4313      	orrs	r3, r2
 801007a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801007c:	693b      	ldr	r3, [r7, #16]
 801007e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010082:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010084:	683b      	ldr	r3, [r7, #0]
 8010086:	689b      	ldr	r3, [r3, #8]
 8010088:	051b      	lsls	r3, r3, #20
 801008a:	693a      	ldr	r2, [r7, #16]
 801008c:	4313      	orrs	r3, r2
 801008e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	4a19      	ldr	r2, [pc, #100]	; (80100f8 <TIM_OC6_SetConfig+0xb8>)
 8010094:	4293      	cmp	r3, r2
 8010096:	d00f      	beq.n	80100b8 <TIM_OC6_SetConfig+0x78>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	4a18      	ldr	r2, [pc, #96]	; (80100fc <TIM_OC6_SetConfig+0xbc>)
 801009c:	4293      	cmp	r3, r2
 801009e:	d00b      	beq.n	80100b8 <TIM_OC6_SetConfig+0x78>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	4a17      	ldr	r2, [pc, #92]	; (8010100 <TIM_OC6_SetConfig+0xc0>)
 80100a4:	4293      	cmp	r3, r2
 80100a6:	d007      	beq.n	80100b8 <TIM_OC6_SetConfig+0x78>
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	4a16      	ldr	r2, [pc, #88]	; (8010104 <TIM_OC6_SetConfig+0xc4>)
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d003      	beq.n	80100b8 <TIM_OC6_SetConfig+0x78>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	4a15      	ldr	r2, [pc, #84]	; (8010108 <TIM_OC6_SetConfig+0xc8>)
 80100b4:	4293      	cmp	r3, r2
 80100b6:	d109      	bne.n	80100cc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80100be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	695b      	ldr	r3, [r3, #20]
 80100c4:	029b      	lsls	r3, r3, #10
 80100c6:	697a      	ldr	r2, [r7, #20]
 80100c8:	4313      	orrs	r3, r2
 80100ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	697a      	ldr	r2, [r7, #20]
 80100d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	68fa      	ldr	r2, [r7, #12]
 80100d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	685a      	ldr	r2, [r3, #4]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	693a      	ldr	r2, [r7, #16]
 80100e4:	621a      	str	r2, [r3, #32]
}
 80100e6:	bf00      	nop
 80100e8:	371c      	adds	r7, #28
 80100ea:	46bd      	mov	sp, r7
 80100ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f0:	4770      	bx	lr
 80100f2:	bf00      	nop
 80100f4:	feff8fff 	.word	0xfeff8fff
 80100f8:	40010000 	.word	0x40010000
 80100fc:	40010400 	.word	0x40010400
 8010100:	40014000 	.word	0x40014000
 8010104:	40014400 	.word	0x40014400
 8010108:	40014800 	.word	0x40014800

0801010c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801010c:	b480      	push	{r7}
 801010e:	b087      	sub	sp, #28
 8010110:	af00      	add	r7, sp, #0
 8010112:	60f8      	str	r0, [r7, #12]
 8010114:	60b9      	str	r1, [r7, #8]
 8010116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	6a1b      	ldr	r3, [r3, #32]
 801011c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	6a1b      	ldr	r3, [r3, #32]
 8010122:	f023 0201 	bic.w	r2, r3, #1
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	699b      	ldr	r3, [r3, #24]
 801012e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010130:	693b      	ldr	r3, [r7, #16]
 8010132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	011b      	lsls	r3, r3, #4
 801013c:	693a      	ldr	r2, [r7, #16]
 801013e:	4313      	orrs	r3, r2
 8010140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	f023 030a 	bic.w	r3, r3, #10
 8010148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801014a:	697a      	ldr	r2, [r7, #20]
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	4313      	orrs	r3, r2
 8010150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	693a      	ldr	r2, [r7, #16]
 8010156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	697a      	ldr	r2, [r7, #20]
 801015c:	621a      	str	r2, [r3, #32]
}
 801015e:	bf00      	nop
 8010160:	371c      	adds	r7, #28
 8010162:	46bd      	mov	sp, r7
 8010164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010168:	4770      	bx	lr

0801016a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801016a:	b480      	push	{r7}
 801016c:	b087      	sub	sp, #28
 801016e:	af00      	add	r7, sp, #0
 8010170:	60f8      	str	r0, [r7, #12]
 8010172:	60b9      	str	r1, [r7, #8]
 8010174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	6a1b      	ldr	r3, [r3, #32]
 801017a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	6a1b      	ldr	r3, [r3, #32]
 8010180:	f023 0210 	bic.w	r2, r3, #16
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	699b      	ldr	r3, [r3, #24]
 801018c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	031b      	lsls	r3, r3, #12
 801019a:	693a      	ldr	r2, [r7, #16]
 801019c:	4313      	orrs	r3, r2
 801019e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80101a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	011b      	lsls	r3, r3, #4
 80101ac:	697a      	ldr	r2, [r7, #20]
 80101ae:	4313      	orrs	r3, r2
 80101b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	693a      	ldr	r2, [r7, #16]
 80101b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	697a      	ldr	r2, [r7, #20]
 80101bc:	621a      	str	r2, [r3, #32]
}
 80101be:	bf00      	nop
 80101c0:	371c      	adds	r7, #28
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr
	...

080101cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80101cc:	b480      	push	{r7}
 80101ce:	b085      	sub	sp, #20
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	689b      	ldr	r3, [r3, #8]
 80101da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80101dc:	68fa      	ldr	r2, [r7, #12]
 80101de:	4b09      	ldr	r3, [pc, #36]	; (8010204 <TIM_ITRx_SetConfig+0x38>)
 80101e0:	4013      	ands	r3, r2
 80101e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80101e4:	683a      	ldr	r2, [r7, #0]
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	4313      	orrs	r3, r2
 80101ea:	f043 0307 	orr.w	r3, r3, #7
 80101ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	68fa      	ldr	r2, [r7, #12]
 80101f4:	609a      	str	r2, [r3, #8]
}
 80101f6:	bf00      	nop
 80101f8:	3714      	adds	r7, #20
 80101fa:	46bd      	mov	sp, r7
 80101fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010200:	4770      	bx	lr
 8010202:	bf00      	nop
 8010204:	ffcfff8f 	.word	0xffcfff8f

08010208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010208:	b480      	push	{r7}
 801020a:	b087      	sub	sp, #28
 801020c:	af00      	add	r7, sp, #0
 801020e:	60f8      	str	r0, [r7, #12]
 8010210:	60b9      	str	r1, [r7, #8]
 8010212:	607a      	str	r2, [r7, #4]
 8010214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	689b      	ldr	r3, [r3, #8]
 801021a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801021c:	697b      	ldr	r3, [r7, #20]
 801021e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	021a      	lsls	r2, r3, #8
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	431a      	orrs	r2, r3
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	4313      	orrs	r3, r2
 8010230:	697a      	ldr	r2, [r7, #20]
 8010232:	4313      	orrs	r3, r2
 8010234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	697a      	ldr	r2, [r7, #20]
 801023a:	609a      	str	r2, [r3, #8]
}
 801023c:	bf00      	nop
 801023e:	371c      	adds	r7, #28
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr

08010248 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010248:	b480      	push	{r7}
 801024a:	b087      	sub	sp, #28
 801024c:	af00      	add	r7, sp, #0
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	f003 031f 	and.w	r3, r3, #31
 801025a:	2201      	movs	r2, #1
 801025c:	fa02 f303 	lsl.w	r3, r2, r3
 8010260:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	6a1a      	ldr	r2, [r3, #32]
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	43db      	mvns	r3, r3
 801026a:	401a      	ands	r2, r3
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	6a1a      	ldr	r2, [r3, #32]
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	f003 031f 	and.w	r3, r3, #31
 801027a:	6879      	ldr	r1, [r7, #4]
 801027c:	fa01 f303 	lsl.w	r3, r1, r3
 8010280:	431a      	orrs	r2, r3
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	621a      	str	r2, [r3, #32]
}
 8010286:	bf00      	nop
 8010288:	371c      	adds	r7, #28
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr
	...

08010294 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010294:	b480      	push	{r7}
 8010296:	b085      	sub	sp, #20
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80102a4:	2b01      	cmp	r3, #1
 80102a6:	d101      	bne.n	80102ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80102a8:	2302      	movs	r3, #2
 80102aa:	e06d      	b.n	8010388 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2201      	movs	r2, #1
 80102b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2202      	movs	r2, #2
 80102b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	689b      	ldr	r3, [r3, #8]
 80102ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	4a30      	ldr	r2, [pc, #192]	; (8010394 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80102d2:	4293      	cmp	r3, r2
 80102d4:	d004      	beq.n	80102e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4a2f      	ldr	r2, [pc, #188]	; (8010398 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80102dc:	4293      	cmp	r3, r2
 80102de:	d108      	bne.n	80102f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80102e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	68fa      	ldr	r2, [r7, #12]
 80102ee:	4313      	orrs	r3, r2
 80102f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	68fa      	ldr	r2, [r7, #12]
 8010300:	4313      	orrs	r3, r2
 8010302:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	68fa      	ldr	r2, [r7, #12]
 801030a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	4a20      	ldr	r2, [pc, #128]	; (8010394 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d022      	beq.n	801035c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801031e:	d01d      	beq.n	801035c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	4a1d      	ldr	r2, [pc, #116]	; (801039c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010326:	4293      	cmp	r3, r2
 8010328:	d018      	beq.n	801035c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	4a1c      	ldr	r2, [pc, #112]	; (80103a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010330:	4293      	cmp	r3, r2
 8010332:	d013      	beq.n	801035c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	4a1a      	ldr	r2, [pc, #104]	; (80103a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801033a:	4293      	cmp	r3, r2
 801033c:	d00e      	beq.n	801035c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	4a15      	ldr	r2, [pc, #84]	; (8010398 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010344:	4293      	cmp	r3, r2
 8010346:	d009      	beq.n	801035c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	4a16      	ldr	r2, [pc, #88]	; (80103a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801034e:	4293      	cmp	r3, r2
 8010350:	d004      	beq.n	801035c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	4a15      	ldr	r2, [pc, #84]	; (80103ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d10c      	bne.n	8010376 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010362:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	689b      	ldr	r3, [r3, #8]
 8010368:	68ba      	ldr	r2, [r7, #8]
 801036a:	4313      	orrs	r3, r2
 801036c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	68ba      	ldr	r2, [r7, #8]
 8010374:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	2201      	movs	r2, #1
 801037a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2200      	movs	r2, #0
 8010382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010386:	2300      	movs	r3, #0
}
 8010388:	4618      	mov	r0, r3
 801038a:	3714      	adds	r7, #20
 801038c:	46bd      	mov	sp, r7
 801038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010392:	4770      	bx	lr
 8010394:	40010000 	.word	0x40010000
 8010398:	40010400 	.word	0x40010400
 801039c:	40000400 	.word	0x40000400
 80103a0:	40000800 	.word	0x40000800
 80103a4:	40000c00 	.word	0x40000c00
 80103a8:	40001800 	.word	0x40001800
 80103ac:	40014000 	.word	0x40014000

080103b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80103b0:	b480      	push	{r7}
 80103b2:	b085      	sub	sp, #20
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80103ba:	2300      	movs	r3, #0
 80103bc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80103c4:	2b01      	cmp	r3, #1
 80103c6:	d101      	bne.n	80103cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80103c8:	2302      	movs	r3, #2
 80103ca:	e065      	b.n	8010498 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2201      	movs	r2, #1
 80103d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	4313      	orrs	r3, r2
 80103e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	689b      	ldr	r3, [r3, #8]
 80103ec:	4313      	orrs	r3, r2
 80103ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	685b      	ldr	r3, [r3, #4]
 80103fa:	4313      	orrs	r3, r2
 80103fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	4313      	orrs	r3, r2
 801040a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	691b      	ldr	r3, [r3, #16]
 8010416:	4313      	orrs	r3, r2
 8010418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	695b      	ldr	r3, [r3, #20]
 8010424:	4313      	orrs	r3, r2
 8010426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010432:	4313      	orrs	r3, r2
 8010434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	699b      	ldr	r3, [r3, #24]
 8010440:	041b      	lsls	r3, r3, #16
 8010442:	4313      	orrs	r3, r2
 8010444:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	4a16      	ldr	r2, [pc, #88]	; (80104a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 801044c:	4293      	cmp	r3, r2
 801044e:	d004      	beq.n	801045a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4a14      	ldr	r2, [pc, #80]	; (80104a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8010456:	4293      	cmp	r3, r2
 8010458:	d115      	bne.n	8010486 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010464:	051b      	lsls	r3, r3, #20
 8010466:	4313      	orrs	r3, r2
 8010468:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	69db      	ldr	r3, [r3, #28]
 8010474:	4313      	orrs	r3, r2
 8010476:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	6a1b      	ldr	r3, [r3, #32]
 8010482:	4313      	orrs	r3, r2
 8010484:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	68fa      	ldr	r2, [r7, #12]
 801048c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2200      	movs	r2, #0
 8010492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010496:	2300      	movs	r3, #0
}
 8010498:	4618      	mov	r0, r3
 801049a:	3714      	adds	r7, #20
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr
 80104a4:	40010000 	.word	0x40010000
 80104a8:	40010400 	.word	0x40010400

080104ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80104ac:	b480      	push	{r7}
 80104ae:	b083      	sub	sp, #12
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80104b4:	bf00      	nop
 80104b6:	370c      	adds	r7, #12
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr

080104c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80104c0:	b480      	push	{r7}
 80104c2:	b083      	sub	sp, #12
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80104c8:	bf00      	nop
 80104ca:	370c      	adds	r7, #12
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr

080104d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80104d4:	b480      	push	{r7}
 80104d6:	b083      	sub	sp, #12
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80104dc:	bf00      	nop
 80104de:	370c      	adds	r7, #12
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d101      	bne.n	80104fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80104f6:	2301      	movs	r3, #1
 80104f8:	e042      	b.n	8010580 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010500:	2b00      	cmp	r3, #0
 8010502:	d106      	bne.n	8010512 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2200      	movs	r2, #0
 8010508:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f7f3 fbcb 	bl	8003ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2224      	movs	r2, #36	; 0x24
 8010516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	681a      	ldr	r2, [r3, #0]
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	f022 0201 	bic.w	r2, r2, #1
 8010528:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801052e:	2b00      	cmp	r3, #0
 8010530:	d002      	beq.n	8010538 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f001 fc42 	bl	8011dbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f000 fed7 	bl	80112ec <UART_SetConfig>
 801053e:	4603      	mov	r3, r0
 8010540:	2b01      	cmp	r3, #1
 8010542:	d101      	bne.n	8010548 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8010544:	2301      	movs	r3, #1
 8010546:	e01b      	b.n	8010580 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	685a      	ldr	r2, [r3, #4]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010556:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	689a      	ldr	r2, [r3, #8]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010566:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	681a      	ldr	r2, [r3, #0]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f042 0201 	orr.w	r2, r2, #1
 8010576:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f001 fcc1 	bl	8011f00 <UART_CheckIdleState>
 801057e:	4603      	mov	r3, r0
}
 8010580:	4618      	mov	r0, r3
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}

08010588 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b08a      	sub	sp, #40	; 0x28
 801058c:	af02      	add	r7, sp, #8
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	60b9      	str	r1, [r7, #8]
 8010592:	603b      	str	r3, [r7, #0]
 8010594:	4613      	mov	r3, r2
 8010596:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801059e:	2b20      	cmp	r3, #32
 80105a0:	d17b      	bne.n	801069a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d002      	beq.n	80105ae <HAL_UART_Transmit+0x26>
 80105a8:	88fb      	ldrh	r3, [r7, #6]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d101      	bne.n	80105b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80105ae:	2301      	movs	r3, #1
 80105b0:	e074      	b.n	801069c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	2200      	movs	r2, #0
 80105b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2221      	movs	r2, #33	; 0x21
 80105be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80105c2:	f7f3 ff1b 	bl	80043fc <HAL_GetTick>
 80105c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	88fa      	ldrh	r2, [r7, #6]
 80105cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	88fa      	ldrh	r2, [r7, #6]
 80105d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	689b      	ldr	r3, [r3, #8]
 80105dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105e0:	d108      	bne.n	80105f4 <HAL_UART_Transmit+0x6c>
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	691b      	ldr	r3, [r3, #16]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d104      	bne.n	80105f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80105ea:	2300      	movs	r3, #0
 80105ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80105ee:	68bb      	ldr	r3, [r7, #8]
 80105f0:	61bb      	str	r3, [r7, #24]
 80105f2:	e003      	b.n	80105fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80105f8:	2300      	movs	r3, #0
 80105fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80105fc:	e030      	b.n	8010660 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	9300      	str	r3, [sp, #0]
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	2200      	movs	r2, #0
 8010606:	2180      	movs	r1, #128	; 0x80
 8010608:	68f8      	ldr	r0, [r7, #12]
 801060a:	f001 fd23 	bl	8012054 <UART_WaitOnFlagUntilTimeout>
 801060e:	4603      	mov	r3, r0
 8010610:	2b00      	cmp	r3, #0
 8010612:	d005      	beq.n	8010620 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	2220      	movs	r2, #32
 8010618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 801061c:	2303      	movs	r3, #3
 801061e:	e03d      	b.n	801069c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010620:	69fb      	ldr	r3, [r7, #28]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d10b      	bne.n	801063e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010626:	69bb      	ldr	r3, [r7, #24]
 8010628:	881b      	ldrh	r3, [r3, #0]
 801062a:	461a      	mov	r2, r3
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010634:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010636:	69bb      	ldr	r3, [r7, #24]
 8010638:	3302      	adds	r3, #2
 801063a:	61bb      	str	r3, [r7, #24]
 801063c:	e007      	b.n	801064e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	781a      	ldrb	r2, [r3, #0]
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010648:	69fb      	ldr	r3, [r7, #28]
 801064a:	3301      	adds	r3, #1
 801064c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010654:	b29b      	uxth	r3, r3
 8010656:	3b01      	subs	r3, #1
 8010658:	b29a      	uxth	r2, r3
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010666:	b29b      	uxth	r3, r3
 8010668:	2b00      	cmp	r3, #0
 801066a:	d1c8      	bne.n	80105fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801066c:	683b      	ldr	r3, [r7, #0]
 801066e:	9300      	str	r3, [sp, #0]
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	2200      	movs	r2, #0
 8010674:	2140      	movs	r1, #64	; 0x40
 8010676:	68f8      	ldr	r0, [r7, #12]
 8010678:	f001 fcec 	bl	8012054 <UART_WaitOnFlagUntilTimeout>
 801067c:	4603      	mov	r3, r0
 801067e:	2b00      	cmp	r3, #0
 8010680:	d005      	beq.n	801068e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	2220      	movs	r2, #32
 8010686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801068a:	2303      	movs	r3, #3
 801068c:	e006      	b.n	801069c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	2220      	movs	r2, #32
 8010692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8010696:	2300      	movs	r3, #0
 8010698:	e000      	b.n	801069c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801069a:	2302      	movs	r3, #2
  }
}
 801069c:	4618      	mov	r0, r3
 801069e:	3720      	adds	r7, #32
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b08a      	sub	sp, #40	; 0x28
 80106a8:	af02      	add	r7, sp, #8
 80106aa:	60f8      	str	r0, [r7, #12]
 80106ac:	60b9      	str	r1, [r7, #8]
 80106ae:	603b      	str	r3, [r7, #0]
 80106b0:	4613      	mov	r3, r2
 80106b2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106ba:	2b20      	cmp	r3, #32
 80106bc:	f040 80b5 	bne.w	801082a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d002      	beq.n	80106cc <HAL_UART_Receive+0x28>
 80106c6:	88fb      	ldrh	r3, [r7, #6]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d101      	bne.n	80106d0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80106cc:	2301      	movs	r3, #1
 80106ce:	e0ad      	b.n	801082c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	2200      	movs	r2, #0
 80106d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	2222      	movs	r2, #34	; 0x22
 80106dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	2200      	movs	r2, #0
 80106e4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80106e6:	f7f3 fe89 	bl	80043fc <HAL_GetTick>
 80106ea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	88fa      	ldrh	r2, [r7, #6]
 80106f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	88fa      	ldrh	r2, [r7, #6]
 80106f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	689b      	ldr	r3, [r3, #8]
 8010700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010704:	d10e      	bne.n	8010724 <HAL_UART_Receive+0x80>
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	691b      	ldr	r3, [r3, #16]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d105      	bne.n	801071a <HAL_UART_Receive+0x76>
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010714:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010718:	e02d      	b.n	8010776 <HAL_UART_Receive+0xd2>
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	22ff      	movs	r2, #255	; 0xff
 801071e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010722:	e028      	b.n	8010776 <HAL_UART_Receive+0xd2>
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	689b      	ldr	r3, [r3, #8]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d10d      	bne.n	8010748 <HAL_UART_Receive+0xa4>
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	691b      	ldr	r3, [r3, #16]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d104      	bne.n	801073e <HAL_UART_Receive+0x9a>
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	22ff      	movs	r2, #255	; 0xff
 8010738:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801073c:	e01b      	b.n	8010776 <HAL_UART_Receive+0xd2>
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	227f      	movs	r2, #127	; 0x7f
 8010742:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010746:	e016      	b.n	8010776 <HAL_UART_Receive+0xd2>
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	689b      	ldr	r3, [r3, #8]
 801074c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010750:	d10d      	bne.n	801076e <HAL_UART_Receive+0xca>
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	691b      	ldr	r3, [r3, #16]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d104      	bne.n	8010764 <HAL_UART_Receive+0xc0>
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	227f      	movs	r2, #127	; 0x7f
 801075e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010762:	e008      	b.n	8010776 <HAL_UART_Receive+0xd2>
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	223f      	movs	r2, #63	; 0x3f
 8010768:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801076c:	e003      	b.n	8010776 <HAL_UART_Receive+0xd2>
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	2200      	movs	r2, #0
 8010772:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801077c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	689b      	ldr	r3, [r3, #8]
 8010782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010786:	d108      	bne.n	801079a <HAL_UART_Receive+0xf6>
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	691b      	ldr	r3, [r3, #16]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d104      	bne.n	801079a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8010790:	2300      	movs	r3, #0
 8010792:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	61bb      	str	r3, [r7, #24]
 8010798:	e003      	b.n	80107a2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801079e:	2300      	movs	r3, #0
 80107a0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80107a2:	e036      	b.n	8010812 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	9300      	str	r3, [sp, #0]
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	2200      	movs	r2, #0
 80107ac:	2120      	movs	r1, #32
 80107ae:	68f8      	ldr	r0, [r7, #12]
 80107b0:	f001 fc50 	bl	8012054 <UART_WaitOnFlagUntilTimeout>
 80107b4:	4603      	mov	r3, r0
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d005      	beq.n	80107c6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2220      	movs	r2, #32
 80107be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80107c2:	2303      	movs	r3, #3
 80107c4:	e032      	b.n	801082c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80107c6:	69fb      	ldr	r3, [r7, #28]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d10c      	bne.n	80107e6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d2:	b29a      	uxth	r2, r3
 80107d4:	8a7b      	ldrh	r3, [r7, #18]
 80107d6:	4013      	ands	r3, r2
 80107d8:	b29a      	uxth	r2, r3
 80107da:	69bb      	ldr	r3, [r7, #24]
 80107dc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80107de:	69bb      	ldr	r3, [r7, #24]
 80107e0:	3302      	adds	r3, #2
 80107e2:	61bb      	str	r3, [r7, #24]
 80107e4:	e00c      	b.n	8010800 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ec:	b2da      	uxtb	r2, r3
 80107ee:	8a7b      	ldrh	r3, [r7, #18]
 80107f0:	b2db      	uxtb	r3, r3
 80107f2:	4013      	ands	r3, r2
 80107f4:	b2da      	uxtb	r2, r3
 80107f6:	69fb      	ldr	r3, [r7, #28]
 80107f8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80107fa:	69fb      	ldr	r3, [r7, #28]
 80107fc:	3301      	adds	r3, #1
 80107fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010806:	b29b      	uxth	r3, r3
 8010808:	3b01      	subs	r3, #1
 801080a:	b29a      	uxth	r2, r3
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010818:	b29b      	uxth	r3, r3
 801081a:	2b00      	cmp	r3, #0
 801081c:	d1c2      	bne.n	80107a4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	2220      	movs	r2, #32
 8010822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8010826:	2300      	movs	r3, #0
 8010828:	e000      	b.n	801082c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 801082a:	2302      	movs	r3, #2
  }
}
 801082c:	4618      	mov	r0, r3
 801082e:	3720      	adds	r7, #32
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b08a      	sub	sp, #40	; 0x28
 8010838:	af00      	add	r7, sp, #0
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	60b9      	str	r1, [r7, #8]
 801083e:	4613      	mov	r3, r2
 8010840:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010848:	2b20      	cmp	r3, #32
 801084a:	d137      	bne.n	80108bc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d002      	beq.n	8010858 <HAL_UART_Receive_IT+0x24>
 8010852:	88fb      	ldrh	r3, [r7, #6]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d101      	bne.n	801085c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010858:	2301      	movs	r3, #1
 801085a:	e030      	b.n	80108be <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	2200      	movs	r2, #0
 8010860:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	4a18      	ldr	r2, [pc, #96]	; (80108c8 <HAL_UART_Receive_IT+0x94>)
 8010868:	4293      	cmp	r3, r2
 801086a:	d01f      	beq.n	80108ac <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010876:	2b00      	cmp	r3, #0
 8010878:	d018      	beq.n	80108ac <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	e853 3f00 	ldrex	r3, [r3]
 8010886:	613b      	str	r3, [r7, #16]
   return(result);
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801088e:	627b      	str	r3, [r7, #36]	; 0x24
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	461a      	mov	r2, r3
 8010896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010898:	623b      	str	r3, [r7, #32]
 801089a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801089c:	69f9      	ldr	r1, [r7, #28]
 801089e:	6a3a      	ldr	r2, [r7, #32]
 80108a0:	e841 2300 	strex	r3, r2, [r1]
 80108a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80108a6:	69bb      	ldr	r3, [r7, #24]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d1e6      	bne.n	801087a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80108ac:	88fb      	ldrh	r3, [r7, #6]
 80108ae:	461a      	mov	r2, r3
 80108b0:	68b9      	ldr	r1, [r7, #8]
 80108b2:	68f8      	ldr	r0, [r7, #12]
 80108b4:	f001 fc3c 	bl	8012130 <UART_Start_Receive_IT>
 80108b8:	4603      	mov	r3, r0
 80108ba:	e000      	b.n	80108be <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80108bc:	2302      	movs	r3, #2
  }
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3728      	adds	r7, #40	; 0x28
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	58000c00 	.word	0x58000c00

080108cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b08a      	sub	sp, #40	; 0x28
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	60f8      	str	r0, [r7, #12]
 80108d4:	60b9      	str	r1, [r7, #8]
 80108d6:	4613      	mov	r3, r2
 80108d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108e0:	2b20      	cmp	r3, #32
 80108e2:	d167      	bne.n	80109b4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d002      	beq.n	80108f0 <HAL_UART_Transmit_DMA+0x24>
 80108ea:	88fb      	ldrh	r3, [r7, #6]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d101      	bne.n	80108f4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80108f0:	2301      	movs	r3, #1
 80108f2:	e060      	b.n	80109b6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	68ba      	ldr	r2, [r7, #8]
 80108f8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	88fa      	ldrh	r2, [r7, #6]
 80108fe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	88fa      	ldrh	r2, [r7, #6]
 8010906:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	2200      	movs	r2, #0
 801090e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	2221      	movs	r2, #33	; 0x21
 8010916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801091e:	2b00      	cmp	r3, #0
 8010920:	d028      	beq.n	8010974 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010926:	4a26      	ldr	r2, [pc, #152]	; (80109c0 <HAL_UART_Transmit_DMA+0xf4>)
 8010928:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801092e:	4a25      	ldr	r2, [pc, #148]	; (80109c4 <HAL_UART_Transmit_DMA+0xf8>)
 8010930:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010936:	4a24      	ldr	r2, [pc, #144]	; (80109c8 <HAL_UART_Transmit_DMA+0xfc>)
 8010938:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801093e:	2200      	movs	r2, #0
 8010940:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801094a:	4619      	mov	r1, r3
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	3328      	adds	r3, #40	; 0x28
 8010952:	461a      	mov	r2, r3
 8010954:	88fb      	ldrh	r3, [r7, #6]
 8010956:	f7f6 f9d5 	bl	8006d04 <HAL_DMA_Start_IT>
 801095a:	4603      	mov	r3, r0
 801095c:	2b00      	cmp	r3, #0
 801095e:	d009      	beq.n	8010974 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2210      	movs	r2, #16
 8010964:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	2220      	movs	r2, #32
 801096c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010970:	2301      	movs	r3, #1
 8010972:	e020      	b.n	80109b6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	2240      	movs	r2, #64	; 0x40
 801097a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	3308      	adds	r3, #8
 8010982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	e853 3f00 	ldrex	r3, [r3]
 801098a:	613b      	str	r3, [r7, #16]
   return(result);
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010992:	627b      	str	r3, [r7, #36]	; 0x24
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	3308      	adds	r3, #8
 801099a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801099c:	623a      	str	r2, [r7, #32]
 801099e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109a0:	69f9      	ldr	r1, [r7, #28]
 80109a2:	6a3a      	ldr	r2, [r7, #32]
 80109a4:	e841 2300 	strex	r3, r2, [r1]
 80109a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80109aa:	69bb      	ldr	r3, [r7, #24]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d1e5      	bne.n	801097c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80109b0:	2300      	movs	r3, #0
 80109b2:	e000      	b.n	80109b6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80109b4:	2302      	movs	r3, #2
  }
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3728      	adds	r7, #40	; 0x28
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	080124c5 	.word	0x080124c5
 80109c4:	0801255b 	.word	0x0801255b
 80109c8:	08012577 	.word	0x08012577

080109cc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b09a      	sub	sp, #104	; 0x68
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109dc:	e853 3f00 	ldrex	r3, [r3]
 80109e0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80109e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80109e8:	667b      	str	r3, [r7, #100]	; 0x64
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	461a      	mov	r2, r3
 80109f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80109f2:	657b      	str	r3, [r7, #84]	; 0x54
 80109f4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80109f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80109fa:	e841 2300 	strex	r3, r2, [r1]
 80109fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d1e6      	bne.n	80109d4 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	3308      	adds	r3, #8
 8010a0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a10:	e853 3f00 	ldrex	r3, [r3]
 8010a14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a18:	4b46      	ldr	r3, [pc, #280]	; (8010b34 <HAL_UART_AbortReceive+0x168>)
 8010a1a:	4013      	ands	r3, r2
 8010a1c:	663b      	str	r3, [r7, #96]	; 0x60
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	3308      	adds	r3, #8
 8010a24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010a26:	643a      	str	r2, [r7, #64]	; 0x40
 8010a28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a2e:	e841 2300 	strex	r3, r2, [r1]
 8010a32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d1e5      	bne.n	8010a06 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a3e:	2b01      	cmp	r3, #1
 8010a40:	d118      	bne.n	8010a74 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a48:	6a3b      	ldr	r3, [r7, #32]
 8010a4a:	e853 3f00 	ldrex	r3, [r3]
 8010a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a50:	69fb      	ldr	r3, [r7, #28]
 8010a52:	f023 0310 	bic.w	r3, r3, #16
 8010a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a62:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a68:	e841 2300 	strex	r3, r2, [r1]
 8010a6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d1e6      	bne.n	8010a42 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	689b      	ldr	r3, [r3, #8]
 8010a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a7e:	2b40      	cmp	r3, #64	; 0x40
 8010a80:	d13b      	bne.n	8010afa <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	3308      	adds	r3, #8
 8010a88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	e853 3f00 	ldrex	r3, [r3]
 8010a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a98:	65bb      	str	r3, [r7, #88]	; 0x58
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	3308      	adds	r3, #8
 8010aa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010aa2:	61ba      	str	r2, [r7, #24]
 8010aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aa6:	6979      	ldr	r1, [r7, #20]
 8010aa8:	69ba      	ldr	r2, [r7, #24]
 8010aaa:	e841 2300 	strex	r3, r2, [r1]
 8010aae:	613b      	str	r3, [r7, #16]
   return(result);
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d1e5      	bne.n	8010a82 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d01c      	beq.n	8010afa <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7f6 fb81 	bl	80071d8 <HAL_DMA_Abort>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d00e      	beq.n	8010afa <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7f8 f806 	bl	8008af4 <HAL_DMA_GetError>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	2b20      	cmp	r3, #32
 8010aec:	d105      	bne.n	8010afa <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2210      	movs	r2, #16
 8010af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8010af6:	2303      	movs	r3, #3
 8010af8:	e017      	b.n	8010b2a <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2200      	movs	r2, #0
 8010afe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	220f      	movs	r2, #15
 8010b08:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	699a      	ldr	r2, [r3, #24]
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	f042 0208 	orr.w	r2, r2, #8
 8010b18:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2220      	movs	r2, #32
 8010b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2200      	movs	r2, #0
 8010b26:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8010b28:	2300      	movs	r3, #0
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3768      	adds	r7, #104	; 0x68
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	effffffe 	.word	0xeffffffe

08010b38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b0ba      	sub	sp, #232	; 0xe8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	69db      	ldr	r3, [r3, #28]
 8010b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	689b      	ldr	r3, [r3, #8]
 8010b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010b5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010b62:	f640 030f 	movw	r3, #2063	; 0x80f
 8010b66:	4013      	ands	r3, r2
 8010b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010b6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d11b      	bne.n	8010bac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010b78:	f003 0320 	and.w	r3, r3, #32
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d015      	beq.n	8010bac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b84:	f003 0320 	and.w	r3, r3, #32
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d105      	bne.n	8010b98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d009      	beq.n	8010bac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	f000 8377 	beq.w	8011290 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	4798      	blx	r3
      }
      return;
 8010baa:	e371      	b.n	8011290 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010bac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f000 8123 	beq.w	8010dfc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010bb6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010bba:	4b8d      	ldr	r3, [pc, #564]	; (8010df0 <HAL_UART_IRQHandler+0x2b8>)
 8010bbc:	4013      	ands	r3, r2
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d106      	bne.n	8010bd0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010bc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010bc6:	4b8b      	ldr	r3, [pc, #556]	; (8010df4 <HAL_UART_IRQHandler+0x2bc>)
 8010bc8:	4013      	ands	r3, r2
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f000 8116 	beq.w	8010dfc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010bd4:	f003 0301 	and.w	r3, r3, #1
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d011      	beq.n	8010c00 <HAL_UART_IRQHandler+0xc8>
 8010bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d00b      	beq.n	8010c00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2201      	movs	r2, #1
 8010bee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bf6:	f043 0201 	orr.w	r2, r3, #1
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c04:	f003 0302 	and.w	r3, r3, #2
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d011      	beq.n	8010c30 <HAL_UART_IRQHandler+0xf8>
 8010c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c10:	f003 0301 	and.w	r3, r3, #1
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d00b      	beq.n	8010c30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	2202      	movs	r2, #2
 8010c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c26:	f043 0204 	orr.w	r2, r3, #4
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c34:	f003 0304 	and.w	r3, r3, #4
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d011      	beq.n	8010c60 <HAL_UART_IRQHandler+0x128>
 8010c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c40:	f003 0301 	and.w	r3, r3, #1
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d00b      	beq.n	8010c60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	2204      	movs	r2, #4
 8010c4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c56:	f043 0202 	orr.w	r2, r3, #2
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c64:	f003 0308 	and.w	r3, r3, #8
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d017      	beq.n	8010c9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c70:	f003 0320 	and.w	r3, r3, #32
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d105      	bne.n	8010c84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010c78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010c7c:	4b5c      	ldr	r3, [pc, #368]	; (8010df0 <HAL_UART_IRQHandler+0x2b8>)
 8010c7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d00b      	beq.n	8010c9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	2208      	movs	r2, #8
 8010c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c92:	f043 0208 	orr.w	r2, r3, #8
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d012      	beq.n	8010cce <HAL_UART_IRQHandler+0x196>
 8010ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d00c      	beq.n	8010cce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010cbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cc4:	f043 0220 	orr.w	r2, r3, #32
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	f000 82dd 	beq.w	8011294 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cde:	f003 0320 	and.w	r3, r3, #32
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d013      	beq.n	8010d0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cea:	f003 0320 	and.w	r3, r3, #32
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d105      	bne.n	8010cfe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d007      	beq.n	8010d0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d003      	beq.n	8010d0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	689b      	ldr	r3, [r3, #8]
 8010d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d22:	2b40      	cmp	r3, #64	; 0x40
 8010d24:	d005      	beq.n	8010d32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010d2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d054      	beq.n	8010ddc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f001 fb60 	bl	80123f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	689b      	ldr	r3, [r3, #8]
 8010d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d42:	2b40      	cmp	r3, #64	; 0x40
 8010d44:	d146      	bne.n	8010dd4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	3308      	adds	r3, #8
 8010d4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010d54:	e853 3f00 	ldrex	r3, [r3]
 8010d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	3308      	adds	r3, #8
 8010d6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010d72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010d76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010d7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010d82:	e841 2300 	strex	r3, r2, [r1]
 8010d86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d1d9      	bne.n	8010d46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d017      	beq.n	8010dcc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010da2:	4a15      	ldr	r2, [pc, #84]	; (8010df8 <HAL_UART_IRQHandler+0x2c0>)
 8010da4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7f6 fd31 	bl	8007814 <HAL_DMA_Abort_IT>
 8010db2:	4603      	mov	r3, r0
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d019      	beq.n	8010dec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010dc0:	687a      	ldr	r2, [r7, #4]
 8010dc2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010dc6:	4610      	mov	r0, r2
 8010dc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010dca:	e00f      	b.n	8010dec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f000 fa77 	bl	80112c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010dd2:	e00b      	b.n	8010dec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f000 fa73 	bl	80112c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010dda:	e007      	b.n	8010dec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 fa6f 	bl	80112c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	2200      	movs	r2, #0
 8010de6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010dea:	e253      	b.n	8011294 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010dec:	bf00      	nop
    return;
 8010dee:	e251      	b.n	8011294 <HAL_UART_IRQHandler+0x75c>
 8010df0:	10000001 	.word	0x10000001
 8010df4:	04000120 	.word	0x04000120
 8010df8:	080125f7 	.word	0x080125f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e00:	2b01      	cmp	r3, #1
 8010e02:	f040 81e7 	bne.w	80111d4 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e0a:	f003 0310 	and.w	r3, r3, #16
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	f000 81e0 	beq.w	80111d4 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e18:	f003 0310 	and.w	r3, r3, #16
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f000 81d9 	beq.w	80111d4 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	2210      	movs	r2, #16
 8010e28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	689b      	ldr	r3, [r3, #8]
 8010e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e34:	2b40      	cmp	r3, #64	; 0x40
 8010e36:	f040 8151 	bne.w	80110dc <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	4a96      	ldr	r2, [pc, #600]	; (801109c <HAL_UART_IRQHandler+0x564>)
 8010e44:	4293      	cmp	r3, r2
 8010e46:	d068      	beq.n	8010f1a <HAL_UART_IRQHandler+0x3e2>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	4a93      	ldr	r2, [pc, #588]	; (80110a0 <HAL_UART_IRQHandler+0x568>)
 8010e52:	4293      	cmp	r3, r2
 8010e54:	d061      	beq.n	8010f1a <HAL_UART_IRQHandler+0x3e2>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	4a91      	ldr	r2, [pc, #580]	; (80110a4 <HAL_UART_IRQHandler+0x56c>)
 8010e60:	4293      	cmp	r3, r2
 8010e62:	d05a      	beq.n	8010f1a <HAL_UART_IRQHandler+0x3e2>
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	4a8e      	ldr	r2, [pc, #568]	; (80110a8 <HAL_UART_IRQHandler+0x570>)
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d053      	beq.n	8010f1a <HAL_UART_IRQHandler+0x3e2>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	4a8c      	ldr	r2, [pc, #560]	; (80110ac <HAL_UART_IRQHandler+0x574>)
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	d04c      	beq.n	8010f1a <HAL_UART_IRQHandler+0x3e2>
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	4a89      	ldr	r2, [pc, #548]	; (80110b0 <HAL_UART_IRQHandler+0x578>)
 8010e8a:	4293      	cmp	r3, r2
 8010e8c:	d045      	beq.n	8010f1a <HAL_UART_IRQHandler+0x3e2>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	4a87      	ldr	r2, [pc, #540]	; (80110b4 <HAL_UART_IRQHandler+0x57c>)
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	d03e      	beq.n	8010f1a <HAL_UART_IRQHandler+0x3e2>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	4a84      	ldr	r2, [pc, #528]	; (80110b8 <HAL_UART_IRQHandler+0x580>)
 8010ea6:	4293      	cmp	r3, r2
 8010ea8:	d037      	beq.n	8010f1a <HAL_UART_IRQHandler+0x3e2>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	4a82      	ldr	r2, [pc, #520]	; (80110bc <HAL_UART_IRQHandler+0x584>)
 8010eb4:	4293      	cmp	r3, r2
 8010eb6:	d030      	beq.n	8010f1a <HAL_UART_IRQHandler+0x3e2>
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	4a7f      	ldr	r2, [pc, #508]	; (80110c0 <HAL_UART_IRQHandler+0x588>)
 8010ec2:	4293      	cmp	r3, r2
 8010ec4:	d029      	beq.n	8010f1a <HAL_UART_IRQHandler+0x3e2>
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	4a7d      	ldr	r2, [pc, #500]	; (80110c4 <HAL_UART_IRQHandler+0x58c>)
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	d022      	beq.n	8010f1a <HAL_UART_IRQHandler+0x3e2>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	4a7a      	ldr	r2, [pc, #488]	; (80110c8 <HAL_UART_IRQHandler+0x590>)
 8010ede:	4293      	cmp	r3, r2
 8010ee0:	d01b      	beq.n	8010f1a <HAL_UART_IRQHandler+0x3e2>
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	4a78      	ldr	r2, [pc, #480]	; (80110cc <HAL_UART_IRQHandler+0x594>)
 8010eec:	4293      	cmp	r3, r2
 8010eee:	d014      	beq.n	8010f1a <HAL_UART_IRQHandler+0x3e2>
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a75      	ldr	r2, [pc, #468]	; (80110d0 <HAL_UART_IRQHandler+0x598>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d00d      	beq.n	8010f1a <HAL_UART_IRQHandler+0x3e2>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	4a73      	ldr	r2, [pc, #460]	; (80110d4 <HAL_UART_IRQHandler+0x59c>)
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	d006      	beq.n	8010f1a <HAL_UART_IRQHandler+0x3e2>
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	4a70      	ldr	r2, [pc, #448]	; (80110d8 <HAL_UART_IRQHandler+0x5a0>)
 8010f16:	4293      	cmp	r3, r2
 8010f18:	d106      	bne.n	8010f28 <HAL_UART_IRQHandler+0x3f0>
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	e005      	b.n	8010f34 <HAL_UART_IRQHandler+0x3fc>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	685b      	ldr	r3, [r3, #4]
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010f38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	f000 81ab 	beq.w	8011298 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010f48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	f080 81a3 	bcs.w	8011298 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010f58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f62:	69db      	ldr	r3, [r3, #28]
 8010f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f68:	f000 8087 	beq.w	801107a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010f78:	e853 3f00 	ldrex	r3, [r3]
 8010f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	461a      	mov	r2, r3
 8010f92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010f9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010fa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010fa6:	e841 2300 	strex	r3, r2, [r1]
 8010faa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d1da      	bne.n	8010f6c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	3308      	adds	r3, #8
 8010fbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010fc0:	e853 3f00 	ldrex	r3, [r3]
 8010fc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010fc8:	f023 0301 	bic.w	r3, r3, #1
 8010fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	3308      	adds	r3, #8
 8010fd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010fda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010fde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fe0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010fe2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010fe6:	e841 2300 	strex	r3, r2, [r1]
 8010fea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d1e1      	bne.n	8010fb6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	3308      	adds	r3, #8
 8010ff8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ffc:	e853 3f00 	ldrex	r3, [r3]
 8011000:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	3308      	adds	r3, #8
 8011012:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011016:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011018:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801101a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801101c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801101e:	e841 2300 	strex	r3, r2, [r1]
 8011022:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011026:	2b00      	cmp	r3, #0
 8011028:	d1e3      	bne.n	8010ff2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2220      	movs	r2, #32
 801102e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2200      	movs	r2, #0
 8011036:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801103e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011040:	e853 3f00 	ldrex	r3, [r3]
 8011044:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011048:	f023 0310 	bic.w	r3, r3, #16
 801104c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	461a      	mov	r2, r3
 8011056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801105a:	65bb      	str	r3, [r7, #88]	; 0x58
 801105c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801105e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011060:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011062:	e841 2300 	strex	r3, r2, [r1]
 8011066:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801106a:	2b00      	cmp	r3, #0
 801106c:	d1e4      	bne.n	8011038 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011074:	4618      	mov	r0, r3
 8011076:	f7f6 f8af 	bl	80071d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2202      	movs	r2, #2
 801107e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801108c:	b29b      	uxth	r3, r3
 801108e:	1ad3      	subs	r3, r2, r3
 8011090:	b29b      	uxth	r3, r3
 8011092:	4619      	mov	r1, r3
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	f000 f91d 	bl	80112d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801109a:	e0fd      	b.n	8011298 <HAL_UART_IRQHandler+0x760>
 801109c:	40020010 	.word	0x40020010
 80110a0:	40020028 	.word	0x40020028
 80110a4:	40020040 	.word	0x40020040
 80110a8:	40020058 	.word	0x40020058
 80110ac:	40020070 	.word	0x40020070
 80110b0:	40020088 	.word	0x40020088
 80110b4:	400200a0 	.word	0x400200a0
 80110b8:	400200b8 	.word	0x400200b8
 80110bc:	40020410 	.word	0x40020410
 80110c0:	40020428 	.word	0x40020428
 80110c4:	40020440 	.word	0x40020440
 80110c8:	40020458 	.word	0x40020458
 80110cc:	40020470 	.word	0x40020470
 80110d0:	40020488 	.word	0x40020488
 80110d4:	400204a0 	.word	0x400204a0
 80110d8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80110e8:	b29b      	uxth	r3, r3
 80110ea:	1ad3      	subs	r3, r2, r3
 80110ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	f000 80cf 	beq.w	801129c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80110fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011102:	2b00      	cmp	r3, #0
 8011104:	f000 80ca 	beq.w	801129c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801110e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011110:	e853 3f00 	ldrex	r3, [r3]
 8011114:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011118:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801111c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	461a      	mov	r2, r3
 8011126:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801112a:	647b      	str	r3, [r7, #68]	; 0x44
 801112c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801112e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011132:	e841 2300 	strex	r3, r2, [r1]
 8011136:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801113a:	2b00      	cmp	r3, #0
 801113c:	d1e4      	bne.n	8011108 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	3308      	adds	r3, #8
 8011144:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011148:	e853 3f00 	ldrex	r3, [r3]
 801114c:	623b      	str	r3, [r7, #32]
   return(result);
 801114e:	6a3a      	ldr	r2, [r7, #32]
 8011150:	4b55      	ldr	r3, [pc, #340]	; (80112a8 <HAL_UART_IRQHandler+0x770>)
 8011152:	4013      	ands	r3, r2
 8011154:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	3308      	adds	r3, #8
 801115e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011162:	633a      	str	r2, [r7, #48]	; 0x30
 8011164:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801116a:	e841 2300 	strex	r3, r2, [r1]
 801116e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011172:	2b00      	cmp	r3, #0
 8011174:	d1e3      	bne.n	801113e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	2220      	movs	r2, #32
 801117a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	2200      	movs	r2, #0
 8011182:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2200      	movs	r2, #0
 8011188:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011190:	693b      	ldr	r3, [r7, #16]
 8011192:	e853 3f00 	ldrex	r3, [r3]
 8011196:	60fb      	str	r3, [r7, #12]
   return(result);
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	f023 0310 	bic.w	r3, r3, #16
 801119e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	461a      	mov	r2, r3
 80111a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80111ac:	61fb      	str	r3, [r7, #28]
 80111ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111b0:	69b9      	ldr	r1, [r7, #24]
 80111b2:	69fa      	ldr	r2, [r7, #28]
 80111b4:	e841 2300 	strex	r3, r2, [r1]
 80111b8:	617b      	str	r3, [r7, #20]
   return(result);
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d1e4      	bne.n	801118a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2202      	movs	r2, #2
 80111c4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80111c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80111ca:	4619      	mov	r1, r3
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f000 f881 	bl	80112d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80111d2:	e063      	b.n	801129c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80111d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80111d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d00e      	beq.n	80111fe <HAL_UART_IRQHandler+0x6c6>
 80111e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80111e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d008      	beq.n	80111fe <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80111f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f001 ff5a 	bl	80130b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80111fc:	e051      	b.n	80112a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80111fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011206:	2b00      	cmp	r3, #0
 8011208:	d014      	beq.n	8011234 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801120a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011212:	2b00      	cmp	r3, #0
 8011214:	d105      	bne.n	8011222 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801121a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801121e:	2b00      	cmp	r3, #0
 8011220:	d008      	beq.n	8011234 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011226:	2b00      	cmp	r3, #0
 8011228:	d03a      	beq.n	80112a0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	4798      	blx	r3
    }
    return;
 8011232:	e035      	b.n	80112a0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801123c:	2b00      	cmp	r3, #0
 801123e:	d009      	beq.n	8011254 <HAL_UART_IRQHandler+0x71c>
 8011240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011248:	2b00      	cmp	r3, #0
 801124a:	d003      	beq.n	8011254 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f001 f9e8 	bl	8012622 <UART_EndTransmit_IT>
    return;
 8011252:	e026      	b.n	80112a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801125c:	2b00      	cmp	r3, #0
 801125e:	d009      	beq.n	8011274 <HAL_UART_IRQHandler+0x73c>
 8011260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011264:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011268:	2b00      	cmp	r3, #0
 801126a:	d003      	beq.n	8011274 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f001 ff33 	bl	80130d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011272:	e016      	b.n	80112a2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801127c:	2b00      	cmp	r3, #0
 801127e:	d010      	beq.n	80112a2 <HAL_UART_IRQHandler+0x76a>
 8011280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011284:	2b00      	cmp	r3, #0
 8011286:	da0c      	bge.n	80112a2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f001 ff1b 	bl	80130c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801128e:	e008      	b.n	80112a2 <HAL_UART_IRQHandler+0x76a>
      return;
 8011290:	bf00      	nop
 8011292:	e006      	b.n	80112a2 <HAL_UART_IRQHandler+0x76a>
    return;
 8011294:	bf00      	nop
 8011296:	e004      	b.n	80112a2 <HAL_UART_IRQHandler+0x76a>
      return;
 8011298:	bf00      	nop
 801129a:	e002      	b.n	80112a2 <HAL_UART_IRQHandler+0x76a>
      return;
 801129c:	bf00      	nop
 801129e:	e000      	b.n	80112a2 <HAL_UART_IRQHandler+0x76a>
    return;
 80112a0:	bf00      	nop
  }
}
 80112a2:	37e8      	adds	r7, #232	; 0xe8
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}
 80112a8:	effffffe 	.word	0xeffffffe

080112ac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80112ac:	b480      	push	{r7}
 80112ae:	b083      	sub	sp, #12
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80112b4:	bf00      	nop
 80112b6:	370c      	adds	r7, #12
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	4770      	bx	lr

080112c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80112c0:	b480      	push	{r7}
 80112c2:	b083      	sub	sp, #12
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80112c8:	bf00      	nop
 80112ca:	370c      	adds	r7, #12
 80112cc:	46bd      	mov	sp, r7
 80112ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d2:	4770      	bx	lr

080112d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	460b      	mov	r3, r1
 80112de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80112e0:	bf00      	nop
 80112e2:	370c      	adds	r7, #12
 80112e4:	46bd      	mov	sp, r7
 80112e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ea:	4770      	bx	lr

080112ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80112ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80112f0:	b092      	sub	sp, #72	; 0x48
 80112f2:	af00      	add	r7, sp, #0
 80112f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80112f6:	2300      	movs	r3, #0
 80112f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	689a      	ldr	r2, [r3, #8]
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	691b      	ldr	r3, [r3, #16]
 8011304:	431a      	orrs	r2, r3
 8011306:	697b      	ldr	r3, [r7, #20]
 8011308:	695b      	ldr	r3, [r3, #20]
 801130a:	431a      	orrs	r2, r3
 801130c:	697b      	ldr	r3, [r7, #20]
 801130e:	69db      	ldr	r3, [r3, #28]
 8011310:	4313      	orrs	r3, r2
 8011312:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	681a      	ldr	r2, [r3, #0]
 801131a:	4bbe      	ldr	r3, [pc, #760]	; (8011614 <UART_SetConfig+0x328>)
 801131c:	4013      	ands	r3, r2
 801131e:	697a      	ldr	r2, [r7, #20]
 8011320:	6812      	ldr	r2, [r2, #0]
 8011322:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011324:	430b      	orrs	r3, r1
 8011326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011328:	697b      	ldr	r3, [r7, #20]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	68da      	ldr	r2, [r3, #12]
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	430a      	orrs	r2, r1
 801133c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	699b      	ldr	r3, [r3, #24]
 8011342:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	4ab3      	ldr	r2, [pc, #716]	; (8011618 <UART_SetConfig+0x32c>)
 801134a:	4293      	cmp	r3, r2
 801134c:	d004      	beq.n	8011358 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	6a1b      	ldr	r3, [r3, #32]
 8011352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011354:	4313      	orrs	r3, r2
 8011356:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	689a      	ldr	r2, [r3, #8]
 801135e:	4baf      	ldr	r3, [pc, #700]	; (801161c <UART_SetConfig+0x330>)
 8011360:	4013      	ands	r3, r2
 8011362:	697a      	ldr	r2, [r7, #20]
 8011364:	6812      	ldr	r2, [r2, #0]
 8011366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011368:	430b      	orrs	r3, r1
 801136a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011372:	f023 010f 	bic.w	r1, r3, #15
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	430a      	orrs	r2, r1
 8011380:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	4aa6      	ldr	r2, [pc, #664]	; (8011620 <UART_SetConfig+0x334>)
 8011388:	4293      	cmp	r3, r2
 801138a:	d177      	bne.n	801147c <UART_SetConfig+0x190>
 801138c:	4ba5      	ldr	r3, [pc, #660]	; (8011624 <UART_SetConfig+0x338>)
 801138e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011394:	2b28      	cmp	r3, #40	; 0x28
 8011396:	d86d      	bhi.n	8011474 <UART_SetConfig+0x188>
 8011398:	a201      	add	r2, pc, #4	; (adr r2, 80113a0 <UART_SetConfig+0xb4>)
 801139a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801139e:	bf00      	nop
 80113a0:	08011445 	.word	0x08011445
 80113a4:	08011475 	.word	0x08011475
 80113a8:	08011475 	.word	0x08011475
 80113ac:	08011475 	.word	0x08011475
 80113b0:	08011475 	.word	0x08011475
 80113b4:	08011475 	.word	0x08011475
 80113b8:	08011475 	.word	0x08011475
 80113bc:	08011475 	.word	0x08011475
 80113c0:	0801144d 	.word	0x0801144d
 80113c4:	08011475 	.word	0x08011475
 80113c8:	08011475 	.word	0x08011475
 80113cc:	08011475 	.word	0x08011475
 80113d0:	08011475 	.word	0x08011475
 80113d4:	08011475 	.word	0x08011475
 80113d8:	08011475 	.word	0x08011475
 80113dc:	08011475 	.word	0x08011475
 80113e0:	08011455 	.word	0x08011455
 80113e4:	08011475 	.word	0x08011475
 80113e8:	08011475 	.word	0x08011475
 80113ec:	08011475 	.word	0x08011475
 80113f0:	08011475 	.word	0x08011475
 80113f4:	08011475 	.word	0x08011475
 80113f8:	08011475 	.word	0x08011475
 80113fc:	08011475 	.word	0x08011475
 8011400:	0801145d 	.word	0x0801145d
 8011404:	08011475 	.word	0x08011475
 8011408:	08011475 	.word	0x08011475
 801140c:	08011475 	.word	0x08011475
 8011410:	08011475 	.word	0x08011475
 8011414:	08011475 	.word	0x08011475
 8011418:	08011475 	.word	0x08011475
 801141c:	08011475 	.word	0x08011475
 8011420:	08011465 	.word	0x08011465
 8011424:	08011475 	.word	0x08011475
 8011428:	08011475 	.word	0x08011475
 801142c:	08011475 	.word	0x08011475
 8011430:	08011475 	.word	0x08011475
 8011434:	08011475 	.word	0x08011475
 8011438:	08011475 	.word	0x08011475
 801143c:	08011475 	.word	0x08011475
 8011440:	0801146d 	.word	0x0801146d
 8011444:	2301      	movs	r3, #1
 8011446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801144a:	e222      	b.n	8011892 <UART_SetConfig+0x5a6>
 801144c:	2304      	movs	r3, #4
 801144e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011452:	e21e      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011454:	2308      	movs	r3, #8
 8011456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801145a:	e21a      	b.n	8011892 <UART_SetConfig+0x5a6>
 801145c:	2310      	movs	r3, #16
 801145e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011462:	e216      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011464:	2320      	movs	r3, #32
 8011466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801146a:	e212      	b.n	8011892 <UART_SetConfig+0x5a6>
 801146c:	2340      	movs	r3, #64	; 0x40
 801146e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011472:	e20e      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011474:	2380      	movs	r3, #128	; 0x80
 8011476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801147a:	e20a      	b.n	8011892 <UART_SetConfig+0x5a6>
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	4a69      	ldr	r2, [pc, #420]	; (8011628 <UART_SetConfig+0x33c>)
 8011482:	4293      	cmp	r3, r2
 8011484:	d130      	bne.n	80114e8 <UART_SetConfig+0x1fc>
 8011486:	4b67      	ldr	r3, [pc, #412]	; (8011624 <UART_SetConfig+0x338>)
 8011488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801148a:	f003 0307 	and.w	r3, r3, #7
 801148e:	2b05      	cmp	r3, #5
 8011490:	d826      	bhi.n	80114e0 <UART_SetConfig+0x1f4>
 8011492:	a201      	add	r2, pc, #4	; (adr r2, 8011498 <UART_SetConfig+0x1ac>)
 8011494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011498:	080114b1 	.word	0x080114b1
 801149c:	080114b9 	.word	0x080114b9
 80114a0:	080114c1 	.word	0x080114c1
 80114a4:	080114c9 	.word	0x080114c9
 80114a8:	080114d1 	.word	0x080114d1
 80114ac:	080114d9 	.word	0x080114d9
 80114b0:	2300      	movs	r3, #0
 80114b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114b6:	e1ec      	b.n	8011892 <UART_SetConfig+0x5a6>
 80114b8:	2304      	movs	r3, #4
 80114ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114be:	e1e8      	b.n	8011892 <UART_SetConfig+0x5a6>
 80114c0:	2308      	movs	r3, #8
 80114c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114c6:	e1e4      	b.n	8011892 <UART_SetConfig+0x5a6>
 80114c8:	2310      	movs	r3, #16
 80114ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ce:	e1e0      	b.n	8011892 <UART_SetConfig+0x5a6>
 80114d0:	2320      	movs	r3, #32
 80114d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114d6:	e1dc      	b.n	8011892 <UART_SetConfig+0x5a6>
 80114d8:	2340      	movs	r3, #64	; 0x40
 80114da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114de:	e1d8      	b.n	8011892 <UART_SetConfig+0x5a6>
 80114e0:	2380      	movs	r3, #128	; 0x80
 80114e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114e6:	e1d4      	b.n	8011892 <UART_SetConfig+0x5a6>
 80114e8:	697b      	ldr	r3, [r7, #20]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	4a4f      	ldr	r2, [pc, #316]	; (801162c <UART_SetConfig+0x340>)
 80114ee:	4293      	cmp	r3, r2
 80114f0:	d130      	bne.n	8011554 <UART_SetConfig+0x268>
 80114f2:	4b4c      	ldr	r3, [pc, #304]	; (8011624 <UART_SetConfig+0x338>)
 80114f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114f6:	f003 0307 	and.w	r3, r3, #7
 80114fa:	2b05      	cmp	r3, #5
 80114fc:	d826      	bhi.n	801154c <UART_SetConfig+0x260>
 80114fe:	a201      	add	r2, pc, #4	; (adr r2, 8011504 <UART_SetConfig+0x218>)
 8011500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011504:	0801151d 	.word	0x0801151d
 8011508:	08011525 	.word	0x08011525
 801150c:	0801152d 	.word	0x0801152d
 8011510:	08011535 	.word	0x08011535
 8011514:	0801153d 	.word	0x0801153d
 8011518:	08011545 	.word	0x08011545
 801151c:	2300      	movs	r3, #0
 801151e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011522:	e1b6      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011524:	2304      	movs	r3, #4
 8011526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801152a:	e1b2      	b.n	8011892 <UART_SetConfig+0x5a6>
 801152c:	2308      	movs	r3, #8
 801152e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011532:	e1ae      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011534:	2310      	movs	r3, #16
 8011536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801153a:	e1aa      	b.n	8011892 <UART_SetConfig+0x5a6>
 801153c:	2320      	movs	r3, #32
 801153e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011542:	e1a6      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011544:	2340      	movs	r3, #64	; 0x40
 8011546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801154a:	e1a2      	b.n	8011892 <UART_SetConfig+0x5a6>
 801154c:	2380      	movs	r3, #128	; 0x80
 801154e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011552:	e19e      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	4a35      	ldr	r2, [pc, #212]	; (8011630 <UART_SetConfig+0x344>)
 801155a:	4293      	cmp	r3, r2
 801155c:	d130      	bne.n	80115c0 <UART_SetConfig+0x2d4>
 801155e:	4b31      	ldr	r3, [pc, #196]	; (8011624 <UART_SetConfig+0x338>)
 8011560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011562:	f003 0307 	and.w	r3, r3, #7
 8011566:	2b05      	cmp	r3, #5
 8011568:	d826      	bhi.n	80115b8 <UART_SetConfig+0x2cc>
 801156a:	a201      	add	r2, pc, #4	; (adr r2, 8011570 <UART_SetConfig+0x284>)
 801156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011570:	08011589 	.word	0x08011589
 8011574:	08011591 	.word	0x08011591
 8011578:	08011599 	.word	0x08011599
 801157c:	080115a1 	.word	0x080115a1
 8011580:	080115a9 	.word	0x080115a9
 8011584:	080115b1 	.word	0x080115b1
 8011588:	2300      	movs	r3, #0
 801158a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801158e:	e180      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011590:	2304      	movs	r3, #4
 8011592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011596:	e17c      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011598:	2308      	movs	r3, #8
 801159a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801159e:	e178      	b.n	8011892 <UART_SetConfig+0x5a6>
 80115a0:	2310      	movs	r3, #16
 80115a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115a6:	e174      	b.n	8011892 <UART_SetConfig+0x5a6>
 80115a8:	2320      	movs	r3, #32
 80115aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115ae:	e170      	b.n	8011892 <UART_SetConfig+0x5a6>
 80115b0:	2340      	movs	r3, #64	; 0x40
 80115b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115b6:	e16c      	b.n	8011892 <UART_SetConfig+0x5a6>
 80115b8:	2380      	movs	r3, #128	; 0x80
 80115ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115be:	e168      	b.n	8011892 <UART_SetConfig+0x5a6>
 80115c0:	697b      	ldr	r3, [r7, #20]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	4a1b      	ldr	r2, [pc, #108]	; (8011634 <UART_SetConfig+0x348>)
 80115c6:	4293      	cmp	r3, r2
 80115c8:	d142      	bne.n	8011650 <UART_SetConfig+0x364>
 80115ca:	4b16      	ldr	r3, [pc, #88]	; (8011624 <UART_SetConfig+0x338>)
 80115cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115ce:	f003 0307 	and.w	r3, r3, #7
 80115d2:	2b05      	cmp	r3, #5
 80115d4:	d838      	bhi.n	8011648 <UART_SetConfig+0x35c>
 80115d6:	a201      	add	r2, pc, #4	; (adr r2, 80115dc <UART_SetConfig+0x2f0>)
 80115d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115dc:	080115f5 	.word	0x080115f5
 80115e0:	080115fd 	.word	0x080115fd
 80115e4:	08011605 	.word	0x08011605
 80115e8:	0801160d 	.word	0x0801160d
 80115ec:	08011639 	.word	0x08011639
 80115f0:	08011641 	.word	0x08011641
 80115f4:	2300      	movs	r3, #0
 80115f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80115fa:	e14a      	b.n	8011892 <UART_SetConfig+0x5a6>
 80115fc:	2304      	movs	r3, #4
 80115fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011602:	e146      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011604:	2308      	movs	r3, #8
 8011606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801160a:	e142      	b.n	8011892 <UART_SetConfig+0x5a6>
 801160c:	2310      	movs	r3, #16
 801160e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011612:	e13e      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011614:	cfff69f3 	.word	0xcfff69f3
 8011618:	58000c00 	.word	0x58000c00
 801161c:	11fff4ff 	.word	0x11fff4ff
 8011620:	40011000 	.word	0x40011000
 8011624:	58024400 	.word	0x58024400
 8011628:	40004400 	.word	0x40004400
 801162c:	40004800 	.word	0x40004800
 8011630:	40004c00 	.word	0x40004c00
 8011634:	40005000 	.word	0x40005000
 8011638:	2320      	movs	r3, #32
 801163a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801163e:	e128      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011640:	2340      	movs	r3, #64	; 0x40
 8011642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011646:	e124      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011648:	2380      	movs	r3, #128	; 0x80
 801164a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801164e:	e120      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	4acb      	ldr	r2, [pc, #812]	; (8011984 <UART_SetConfig+0x698>)
 8011656:	4293      	cmp	r3, r2
 8011658:	d176      	bne.n	8011748 <UART_SetConfig+0x45c>
 801165a:	4bcb      	ldr	r3, [pc, #812]	; (8011988 <UART_SetConfig+0x69c>)
 801165c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801165e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011662:	2b28      	cmp	r3, #40	; 0x28
 8011664:	d86c      	bhi.n	8011740 <UART_SetConfig+0x454>
 8011666:	a201      	add	r2, pc, #4	; (adr r2, 801166c <UART_SetConfig+0x380>)
 8011668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801166c:	08011711 	.word	0x08011711
 8011670:	08011741 	.word	0x08011741
 8011674:	08011741 	.word	0x08011741
 8011678:	08011741 	.word	0x08011741
 801167c:	08011741 	.word	0x08011741
 8011680:	08011741 	.word	0x08011741
 8011684:	08011741 	.word	0x08011741
 8011688:	08011741 	.word	0x08011741
 801168c:	08011719 	.word	0x08011719
 8011690:	08011741 	.word	0x08011741
 8011694:	08011741 	.word	0x08011741
 8011698:	08011741 	.word	0x08011741
 801169c:	08011741 	.word	0x08011741
 80116a0:	08011741 	.word	0x08011741
 80116a4:	08011741 	.word	0x08011741
 80116a8:	08011741 	.word	0x08011741
 80116ac:	08011721 	.word	0x08011721
 80116b0:	08011741 	.word	0x08011741
 80116b4:	08011741 	.word	0x08011741
 80116b8:	08011741 	.word	0x08011741
 80116bc:	08011741 	.word	0x08011741
 80116c0:	08011741 	.word	0x08011741
 80116c4:	08011741 	.word	0x08011741
 80116c8:	08011741 	.word	0x08011741
 80116cc:	08011729 	.word	0x08011729
 80116d0:	08011741 	.word	0x08011741
 80116d4:	08011741 	.word	0x08011741
 80116d8:	08011741 	.word	0x08011741
 80116dc:	08011741 	.word	0x08011741
 80116e0:	08011741 	.word	0x08011741
 80116e4:	08011741 	.word	0x08011741
 80116e8:	08011741 	.word	0x08011741
 80116ec:	08011731 	.word	0x08011731
 80116f0:	08011741 	.word	0x08011741
 80116f4:	08011741 	.word	0x08011741
 80116f8:	08011741 	.word	0x08011741
 80116fc:	08011741 	.word	0x08011741
 8011700:	08011741 	.word	0x08011741
 8011704:	08011741 	.word	0x08011741
 8011708:	08011741 	.word	0x08011741
 801170c:	08011739 	.word	0x08011739
 8011710:	2301      	movs	r3, #1
 8011712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011716:	e0bc      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011718:	2304      	movs	r3, #4
 801171a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801171e:	e0b8      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011720:	2308      	movs	r3, #8
 8011722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011726:	e0b4      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011728:	2310      	movs	r3, #16
 801172a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801172e:	e0b0      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011730:	2320      	movs	r3, #32
 8011732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011736:	e0ac      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011738:	2340      	movs	r3, #64	; 0x40
 801173a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801173e:	e0a8      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011740:	2380      	movs	r3, #128	; 0x80
 8011742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011746:	e0a4      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	4a8f      	ldr	r2, [pc, #572]	; (801198c <UART_SetConfig+0x6a0>)
 801174e:	4293      	cmp	r3, r2
 8011750:	d130      	bne.n	80117b4 <UART_SetConfig+0x4c8>
 8011752:	4b8d      	ldr	r3, [pc, #564]	; (8011988 <UART_SetConfig+0x69c>)
 8011754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011756:	f003 0307 	and.w	r3, r3, #7
 801175a:	2b05      	cmp	r3, #5
 801175c:	d826      	bhi.n	80117ac <UART_SetConfig+0x4c0>
 801175e:	a201      	add	r2, pc, #4	; (adr r2, 8011764 <UART_SetConfig+0x478>)
 8011760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011764:	0801177d 	.word	0x0801177d
 8011768:	08011785 	.word	0x08011785
 801176c:	0801178d 	.word	0x0801178d
 8011770:	08011795 	.word	0x08011795
 8011774:	0801179d 	.word	0x0801179d
 8011778:	080117a5 	.word	0x080117a5
 801177c:	2300      	movs	r3, #0
 801177e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011782:	e086      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011784:	2304      	movs	r3, #4
 8011786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801178a:	e082      	b.n	8011892 <UART_SetConfig+0x5a6>
 801178c:	2308      	movs	r3, #8
 801178e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011792:	e07e      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011794:	2310      	movs	r3, #16
 8011796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801179a:	e07a      	b.n	8011892 <UART_SetConfig+0x5a6>
 801179c:	2320      	movs	r3, #32
 801179e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117a2:	e076      	b.n	8011892 <UART_SetConfig+0x5a6>
 80117a4:	2340      	movs	r3, #64	; 0x40
 80117a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117aa:	e072      	b.n	8011892 <UART_SetConfig+0x5a6>
 80117ac:	2380      	movs	r3, #128	; 0x80
 80117ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117b2:	e06e      	b.n	8011892 <UART_SetConfig+0x5a6>
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	4a75      	ldr	r2, [pc, #468]	; (8011990 <UART_SetConfig+0x6a4>)
 80117ba:	4293      	cmp	r3, r2
 80117bc:	d130      	bne.n	8011820 <UART_SetConfig+0x534>
 80117be:	4b72      	ldr	r3, [pc, #456]	; (8011988 <UART_SetConfig+0x69c>)
 80117c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117c2:	f003 0307 	and.w	r3, r3, #7
 80117c6:	2b05      	cmp	r3, #5
 80117c8:	d826      	bhi.n	8011818 <UART_SetConfig+0x52c>
 80117ca:	a201      	add	r2, pc, #4	; (adr r2, 80117d0 <UART_SetConfig+0x4e4>)
 80117cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117d0:	080117e9 	.word	0x080117e9
 80117d4:	080117f1 	.word	0x080117f1
 80117d8:	080117f9 	.word	0x080117f9
 80117dc:	08011801 	.word	0x08011801
 80117e0:	08011809 	.word	0x08011809
 80117e4:	08011811 	.word	0x08011811
 80117e8:	2300      	movs	r3, #0
 80117ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ee:	e050      	b.n	8011892 <UART_SetConfig+0x5a6>
 80117f0:	2304      	movs	r3, #4
 80117f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117f6:	e04c      	b.n	8011892 <UART_SetConfig+0x5a6>
 80117f8:	2308      	movs	r3, #8
 80117fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117fe:	e048      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011800:	2310      	movs	r3, #16
 8011802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011806:	e044      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011808:	2320      	movs	r3, #32
 801180a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801180e:	e040      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011810:	2340      	movs	r3, #64	; 0x40
 8011812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011816:	e03c      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011818:	2380      	movs	r3, #128	; 0x80
 801181a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801181e:	e038      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	4a5b      	ldr	r2, [pc, #364]	; (8011994 <UART_SetConfig+0x6a8>)
 8011826:	4293      	cmp	r3, r2
 8011828:	d130      	bne.n	801188c <UART_SetConfig+0x5a0>
 801182a:	4b57      	ldr	r3, [pc, #348]	; (8011988 <UART_SetConfig+0x69c>)
 801182c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801182e:	f003 0307 	and.w	r3, r3, #7
 8011832:	2b05      	cmp	r3, #5
 8011834:	d826      	bhi.n	8011884 <UART_SetConfig+0x598>
 8011836:	a201      	add	r2, pc, #4	; (adr r2, 801183c <UART_SetConfig+0x550>)
 8011838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801183c:	08011855 	.word	0x08011855
 8011840:	0801185d 	.word	0x0801185d
 8011844:	08011865 	.word	0x08011865
 8011848:	0801186d 	.word	0x0801186d
 801184c:	08011875 	.word	0x08011875
 8011850:	0801187d 	.word	0x0801187d
 8011854:	2302      	movs	r3, #2
 8011856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801185a:	e01a      	b.n	8011892 <UART_SetConfig+0x5a6>
 801185c:	2304      	movs	r3, #4
 801185e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011862:	e016      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011864:	2308      	movs	r3, #8
 8011866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801186a:	e012      	b.n	8011892 <UART_SetConfig+0x5a6>
 801186c:	2310      	movs	r3, #16
 801186e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011872:	e00e      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011874:	2320      	movs	r3, #32
 8011876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801187a:	e00a      	b.n	8011892 <UART_SetConfig+0x5a6>
 801187c:	2340      	movs	r3, #64	; 0x40
 801187e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011882:	e006      	b.n	8011892 <UART_SetConfig+0x5a6>
 8011884:	2380      	movs	r3, #128	; 0x80
 8011886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801188a:	e002      	b.n	8011892 <UART_SetConfig+0x5a6>
 801188c:	2380      	movs	r3, #128	; 0x80
 801188e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	4a3f      	ldr	r2, [pc, #252]	; (8011994 <UART_SetConfig+0x6a8>)
 8011898:	4293      	cmp	r3, r2
 801189a:	f040 80f8 	bne.w	8011a8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801189e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80118a2:	2b20      	cmp	r3, #32
 80118a4:	dc46      	bgt.n	8011934 <UART_SetConfig+0x648>
 80118a6:	2b02      	cmp	r3, #2
 80118a8:	f2c0 8082 	blt.w	80119b0 <UART_SetConfig+0x6c4>
 80118ac:	3b02      	subs	r3, #2
 80118ae:	2b1e      	cmp	r3, #30
 80118b0:	d87e      	bhi.n	80119b0 <UART_SetConfig+0x6c4>
 80118b2:	a201      	add	r2, pc, #4	; (adr r2, 80118b8 <UART_SetConfig+0x5cc>)
 80118b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118b8:	0801193b 	.word	0x0801193b
 80118bc:	080119b1 	.word	0x080119b1
 80118c0:	08011943 	.word	0x08011943
 80118c4:	080119b1 	.word	0x080119b1
 80118c8:	080119b1 	.word	0x080119b1
 80118cc:	080119b1 	.word	0x080119b1
 80118d0:	08011953 	.word	0x08011953
 80118d4:	080119b1 	.word	0x080119b1
 80118d8:	080119b1 	.word	0x080119b1
 80118dc:	080119b1 	.word	0x080119b1
 80118e0:	080119b1 	.word	0x080119b1
 80118e4:	080119b1 	.word	0x080119b1
 80118e8:	080119b1 	.word	0x080119b1
 80118ec:	080119b1 	.word	0x080119b1
 80118f0:	08011963 	.word	0x08011963
 80118f4:	080119b1 	.word	0x080119b1
 80118f8:	080119b1 	.word	0x080119b1
 80118fc:	080119b1 	.word	0x080119b1
 8011900:	080119b1 	.word	0x080119b1
 8011904:	080119b1 	.word	0x080119b1
 8011908:	080119b1 	.word	0x080119b1
 801190c:	080119b1 	.word	0x080119b1
 8011910:	080119b1 	.word	0x080119b1
 8011914:	080119b1 	.word	0x080119b1
 8011918:	080119b1 	.word	0x080119b1
 801191c:	080119b1 	.word	0x080119b1
 8011920:	080119b1 	.word	0x080119b1
 8011924:	080119b1 	.word	0x080119b1
 8011928:	080119b1 	.word	0x080119b1
 801192c:	080119b1 	.word	0x080119b1
 8011930:	080119a3 	.word	0x080119a3
 8011934:	2b40      	cmp	r3, #64	; 0x40
 8011936:	d037      	beq.n	80119a8 <UART_SetConfig+0x6bc>
 8011938:	e03a      	b.n	80119b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801193a:	f7fb fce5 	bl	800d308 <HAL_RCCEx_GetD3PCLK1Freq>
 801193e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011940:	e03c      	b.n	80119bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011946:	4618      	mov	r0, r3
 8011948:	f7fb fcf4 	bl	800d334 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801194c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801194e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011950:	e034      	b.n	80119bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011952:	f107 0318 	add.w	r3, r7, #24
 8011956:	4618      	mov	r0, r3
 8011958:	f7fb fe40 	bl	800d5dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801195c:	69fb      	ldr	r3, [r7, #28]
 801195e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011960:	e02c      	b.n	80119bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011962:	4b09      	ldr	r3, [pc, #36]	; (8011988 <UART_SetConfig+0x69c>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f003 0320 	and.w	r3, r3, #32
 801196a:	2b00      	cmp	r3, #0
 801196c:	d016      	beq.n	801199c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801196e:	4b06      	ldr	r3, [pc, #24]	; (8011988 <UART_SetConfig+0x69c>)
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	08db      	lsrs	r3, r3, #3
 8011974:	f003 0303 	and.w	r3, r3, #3
 8011978:	4a07      	ldr	r2, [pc, #28]	; (8011998 <UART_SetConfig+0x6ac>)
 801197a:	fa22 f303 	lsr.w	r3, r2, r3
 801197e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011980:	e01c      	b.n	80119bc <UART_SetConfig+0x6d0>
 8011982:	bf00      	nop
 8011984:	40011400 	.word	0x40011400
 8011988:	58024400 	.word	0x58024400
 801198c:	40007800 	.word	0x40007800
 8011990:	40007c00 	.word	0x40007c00
 8011994:	58000c00 	.word	0x58000c00
 8011998:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801199c:	4b9d      	ldr	r3, [pc, #628]	; (8011c14 <UART_SetConfig+0x928>)
 801199e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119a0:	e00c      	b.n	80119bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80119a2:	4b9d      	ldr	r3, [pc, #628]	; (8011c18 <UART_SetConfig+0x92c>)
 80119a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119a6:	e009      	b.n	80119bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80119a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80119ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119ae:	e005      	b.n	80119bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80119b0:	2300      	movs	r3, #0
 80119b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80119b4:	2301      	movs	r3, #1
 80119b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80119ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80119bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119be:	2b00      	cmp	r3, #0
 80119c0:	f000 81de 	beq.w	8011d80 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119c8:	4a94      	ldr	r2, [pc, #592]	; (8011c1c <UART_SetConfig+0x930>)
 80119ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80119ce:	461a      	mov	r2, r3
 80119d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80119d6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	685a      	ldr	r2, [r3, #4]
 80119dc:	4613      	mov	r3, r2
 80119de:	005b      	lsls	r3, r3, #1
 80119e0:	4413      	add	r3, r2
 80119e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d305      	bcc.n	80119f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	685b      	ldr	r3, [r3, #4]
 80119ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80119ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d903      	bls.n	80119fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80119f4:	2301      	movs	r3, #1
 80119f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80119fa:	e1c1      	b.n	8011d80 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80119fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119fe:	2200      	movs	r2, #0
 8011a00:	60bb      	str	r3, [r7, #8]
 8011a02:	60fa      	str	r2, [r7, #12]
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a08:	4a84      	ldr	r2, [pc, #528]	; (8011c1c <UART_SetConfig+0x930>)
 8011a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	2200      	movs	r2, #0
 8011a12:	603b      	str	r3, [r7, #0]
 8011a14:	607a      	str	r2, [r7, #4]
 8011a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011a1e:	f7ee fc5f 	bl	80002e0 <__aeabi_uldivmod>
 8011a22:	4602      	mov	r2, r0
 8011a24:	460b      	mov	r3, r1
 8011a26:	4610      	mov	r0, r2
 8011a28:	4619      	mov	r1, r3
 8011a2a:	f04f 0200 	mov.w	r2, #0
 8011a2e:	f04f 0300 	mov.w	r3, #0
 8011a32:	020b      	lsls	r3, r1, #8
 8011a34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011a38:	0202      	lsls	r2, r0, #8
 8011a3a:	6979      	ldr	r1, [r7, #20]
 8011a3c:	6849      	ldr	r1, [r1, #4]
 8011a3e:	0849      	lsrs	r1, r1, #1
 8011a40:	2000      	movs	r0, #0
 8011a42:	460c      	mov	r4, r1
 8011a44:	4605      	mov	r5, r0
 8011a46:	eb12 0804 	adds.w	r8, r2, r4
 8011a4a:	eb43 0905 	adc.w	r9, r3, r5
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	685b      	ldr	r3, [r3, #4]
 8011a52:	2200      	movs	r2, #0
 8011a54:	469a      	mov	sl, r3
 8011a56:	4693      	mov	fp, r2
 8011a58:	4652      	mov	r2, sl
 8011a5a:	465b      	mov	r3, fp
 8011a5c:	4640      	mov	r0, r8
 8011a5e:	4649      	mov	r1, r9
 8011a60:	f7ee fc3e 	bl	80002e0 <__aeabi_uldivmod>
 8011a64:	4602      	mov	r2, r0
 8011a66:	460b      	mov	r3, r1
 8011a68:	4613      	mov	r3, r2
 8011a6a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011a72:	d308      	bcc.n	8011a86 <UART_SetConfig+0x79a>
 8011a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a7a:	d204      	bcs.n	8011a86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a82:	60da      	str	r2, [r3, #12]
 8011a84:	e17c      	b.n	8011d80 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011a86:	2301      	movs	r3, #1
 8011a88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011a8c:	e178      	b.n	8011d80 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	69db      	ldr	r3, [r3, #28]
 8011a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a96:	f040 80c5 	bne.w	8011c24 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011a9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011a9e:	2b20      	cmp	r3, #32
 8011aa0:	dc48      	bgt.n	8011b34 <UART_SetConfig+0x848>
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	db7b      	blt.n	8011b9e <UART_SetConfig+0x8b2>
 8011aa6:	2b20      	cmp	r3, #32
 8011aa8:	d879      	bhi.n	8011b9e <UART_SetConfig+0x8b2>
 8011aaa:	a201      	add	r2, pc, #4	; (adr r2, 8011ab0 <UART_SetConfig+0x7c4>)
 8011aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ab0:	08011b3b 	.word	0x08011b3b
 8011ab4:	08011b43 	.word	0x08011b43
 8011ab8:	08011b9f 	.word	0x08011b9f
 8011abc:	08011b9f 	.word	0x08011b9f
 8011ac0:	08011b4b 	.word	0x08011b4b
 8011ac4:	08011b9f 	.word	0x08011b9f
 8011ac8:	08011b9f 	.word	0x08011b9f
 8011acc:	08011b9f 	.word	0x08011b9f
 8011ad0:	08011b5b 	.word	0x08011b5b
 8011ad4:	08011b9f 	.word	0x08011b9f
 8011ad8:	08011b9f 	.word	0x08011b9f
 8011adc:	08011b9f 	.word	0x08011b9f
 8011ae0:	08011b9f 	.word	0x08011b9f
 8011ae4:	08011b9f 	.word	0x08011b9f
 8011ae8:	08011b9f 	.word	0x08011b9f
 8011aec:	08011b9f 	.word	0x08011b9f
 8011af0:	08011b6b 	.word	0x08011b6b
 8011af4:	08011b9f 	.word	0x08011b9f
 8011af8:	08011b9f 	.word	0x08011b9f
 8011afc:	08011b9f 	.word	0x08011b9f
 8011b00:	08011b9f 	.word	0x08011b9f
 8011b04:	08011b9f 	.word	0x08011b9f
 8011b08:	08011b9f 	.word	0x08011b9f
 8011b0c:	08011b9f 	.word	0x08011b9f
 8011b10:	08011b9f 	.word	0x08011b9f
 8011b14:	08011b9f 	.word	0x08011b9f
 8011b18:	08011b9f 	.word	0x08011b9f
 8011b1c:	08011b9f 	.word	0x08011b9f
 8011b20:	08011b9f 	.word	0x08011b9f
 8011b24:	08011b9f 	.word	0x08011b9f
 8011b28:	08011b9f 	.word	0x08011b9f
 8011b2c:	08011b9f 	.word	0x08011b9f
 8011b30:	08011b91 	.word	0x08011b91
 8011b34:	2b40      	cmp	r3, #64	; 0x40
 8011b36:	d02e      	beq.n	8011b96 <UART_SetConfig+0x8aa>
 8011b38:	e031      	b.n	8011b9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011b3a:	f7f9 fbed 	bl	800b318 <HAL_RCC_GetPCLK1Freq>
 8011b3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011b40:	e033      	b.n	8011baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011b42:	f7f9 fbff 	bl	800b344 <HAL_RCC_GetPCLK2Freq>
 8011b46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011b48:	e02f      	b.n	8011baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fb fbf0 	bl	800d334 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b58:	e027      	b.n	8011baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b5a:	f107 0318 	add.w	r3, r7, #24
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7fb fd3c 	bl	800d5dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011b64:	69fb      	ldr	r3, [r7, #28]
 8011b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b68:	e01f      	b.n	8011baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011b6a:	4b2d      	ldr	r3, [pc, #180]	; (8011c20 <UART_SetConfig+0x934>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	f003 0320 	and.w	r3, r3, #32
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d009      	beq.n	8011b8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011b76:	4b2a      	ldr	r3, [pc, #168]	; (8011c20 <UART_SetConfig+0x934>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	08db      	lsrs	r3, r3, #3
 8011b7c:	f003 0303 	and.w	r3, r3, #3
 8011b80:	4a24      	ldr	r2, [pc, #144]	; (8011c14 <UART_SetConfig+0x928>)
 8011b82:	fa22 f303 	lsr.w	r3, r2, r3
 8011b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011b88:	e00f      	b.n	8011baa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011b8a:	4b22      	ldr	r3, [pc, #136]	; (8011c14 <UART_SetConfig+0x928>)
 8011b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b8e:	e00c      	b.n	8011baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011b90:	4b21      	ldr	r3, [pc, #132]	; (8011c18 <UART_SetConfig+0x92c>)
 8011b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b94:	e009      	b.n	8011baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b9c:	e005      	b.n	8011baa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011ba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	f000 80e7 	beq.w	8011d80 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bb6:	4a19      	ldr	r2, [pc, #100]	; (8011c1c <UART_SetConfig+0x930>)
 8011bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8011bc4:	005a      	lsls	r2, r3, #1
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	085b      	lsrs	r3, r3, #1
 8011bcc:	441a      	add	r2, r3
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011bd6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bda:	2b0f      	cmp	r3, #15
 8011bdc:	d916      	bls.n	8011c0c <UART_SetConfig+0x920>
 8011bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011be4:	d212      	bcs.n	8011c0c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	f023 030f 	bic.w	r3, r3, #15
 8011bee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf2:	085b      	lsrs	r3, r3, #1
 8011bf4:	b29b      	uxth	r3, r3
 8011bf6:	f003 0307 	and.w	r3, r3, #7
 8011bfa:	b29a      	uxth	r2, r3
 8011bfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011bfe:	4313      	orrs	r3, r2
 8011c00:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011c08:	60da      	str	r2, [r3, #12]
 8011c0a:	e0b9      	b.n	8011d80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011c12:	e0b5      	b.n	8011d80 <UART_SetConfig+0xa94>
 8011c14:	03d09000 	.word	0x03d09000
 8011c18:	003d0900 	.word	0x003d0900
 8011c1c:	08017b80 	.word	0x08017b80
 8011c20:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011c24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011c28:	2b20      	cmp	r3, #32
 8011c2a:	dc49      	bgt.n	8011cc0 <UART_SetConfig+0x9d4>
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	db7c      	blt.n	8011d2a <UART_SetConfig+0xa3e>
 8011c30:	2b20      	cmp	r3, #32
 8011c32:	d87a      	bhi.n	8011d2a <UART_SetConfig+0xa3e>
 8011c34:	a201      	add	r2, pc, #4	; (adr r2, 8011c3c <UART_SetConfig+0x950>)
 8011c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c3a:	bf00      	nop
 8011c3c:	08011cc7 	.word	0x08011cc7
 8011c40:	08011ccf 	.word	0x08011ccf
 8011c44:	08011d2b 	.word	0x08011d2b
 8011c48:	08011d2b 	.word	0x08011d2b
 8011c4c:	08011cd7 	.word	0x08011cd7
 8011c50:	08011d2b 	.word	0x08011d2b
 8011c54:	08011d2b 	.word	0x08011d2b
 8011c58:	08011d2b 	.word	0x08011d2b
 8011c5c:	08011ce7 	.word	0x08011ce7
 8011c60:	08011d2b 	.word	0x08011d2b
 8011c64:	08011d2b 	.word	0x08011d2b
 8011c68:	08011d2b 	.word	0x08011d2b
 8011c6c:	08011d2b 	.word	0x08011d2b
 8011c70:	08011d2b 	.word	0x08011d2b
 8011c74:	08011d2b 	.word	0x08011d2b
 8011c78:	08011d2b 	.word	0x08011d2b
 8011c7c:	08011cf7 	.word	0x08011cf7
 8011c80:	08011d2b 	.word	0x08011d2b
 8011c84:	08011d2b 	.word	0x08011d2b
 8011c88:	08011d2b 	.word	0x08011d2b
 8011c8c:	08011d2b 	.word	0x08011d2b
 8011c90:	08011d2b 	.word	0x08011d2b
 8011c94:	08011d2b 	.word	0x08011d2b
 8011c98:	08011d2b 	.word	0x08011d2b
 8011c9c:	08011d2b 	.word	0x08011d2b
 8011ca0:	08011d2b 	.word	0x08011d2b
 8011ca4:	08011d2b 	.word	0x08011d2b
 8011ca8:	08011d2b 	.word	0x08011d2b
 8011cac:	08011d2b 	.word	0x08011d2b
 8011cb0:	08011d2b 	.word	0x08011d2b
 8011cb4:	08011d2b 	.word	0x08011d2b
 8011cb8:	08011d2b 	.word	0x08011d2b
 8011cbc:	08011d1d 	.word	0x08011d1d
 8011cc0:	2b40      	cmp	r3, #64	; 0x40
 8011cc2:	d02e      	beq.n	8011d22 <UART_SetConfig+0xa36>
 8011cc4:	e031      	b.n	8011d2a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011cc6:	f7f9 fb27 	bl	800b318 <HAL_RCC_GetPCLK1Freq>
 8011cca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011ccc:	e033      	b.n	8011d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011cce:	f7f9 fb39 	bl	800b344 <HAL_RCC_GetPCLK2Freq>
 8011cd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011cd4:	e02f      	b.n	8011d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7fb fb2a 	bl	800d334 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ce4:	e027      	b.n	8011d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011ce6:	f107 0318 	add.w	r3, r7, #24
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7fb fc76 	bl	800d5dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011cf0:	69fb      	ldr	r3, [r7, #28]
 8011cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011cf4:	e01f      	b.n	8011d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011cf6:	4b2d      	ldr	r3, [pc, #180]	; (8011dac <UART_SetConfig+0xac0>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	f003 0320 	and.w	r3, r3, #32
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d009      	beq.n	8011d16 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011d02:	4b2a      	ldr	r3, [pc, #168]	; (8011dac <UART_SetConfig+0xac0>)
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	08db      	lsrs	r3, r3, #3
 8011d08:	f003 0303 	and.w	r3, r3, #3
 8011d0c:	4a28      	ldr	r2, [pc, #160]	; (8011db0 <UART_SetConfig+0xac4>)
 8011d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8011d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011d14:	e00f      	b.n	8011d36 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011d16:	4b26      	ldr	r3, [pc, #152]	; (8011db0 <UART_SetConfig+0xac4>)
 8011d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d1a:	e00c      	b.n	8011d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011d1c:	4b25      	ldr	r3, [pc, #148]	; (8011db4 <UART_SetConfig+0xac8>)
 8011d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d20:	e009      	b.n	8011d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011d26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d28:	e005      	b.n	8011d36 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011d2e:	2301      	movs	r3, #1
 8011d30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011d34:	bf00      	nop
    }

    if (pclk != 0U)
 8011d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d021      	beq.n	8011d80 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d40:	4a1d      	ldr	r2, [pc, #116]	; (8011db8 <UART_SetConfig+0xacc>)
 8011d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011d46:	461a      	mov	r2, r3
 8011d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	085b      	lsrs	r3, r3, #1
 8011d54:	441a      	add	r2, r3
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	685b      	ldr	r3, [r3, #4]
 8011d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d62:	2b0f      	cmp	r3, #15
 8011d64:	d909      	bls.n	8011d7a <UART_SetConfig+0xa8e>
 8011d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d6c:	d205      	bcs.n	8011d7a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d70:	b29a      	uxth	r2, r3
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	60da      	str	r2, [r3, #12]
 8011d78:	e002      	b.n	8011d80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	2201      	movs	r2, #1
 8011d84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011d88:	697b      	ldr	r3, [r7, #20]
 8011d8a:	2201      	movs	r2, #1
 8011d8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	2200      	movs	r2, #0
 8011d94:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	2200      	movs	r2, #0
 8011d9a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011d9c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011da0:	4618      	mov	r0, r3
 8011da2:	3748      	adds	r7, #72	; 0x48
 8011da4:	46bd      	mov	sp, r7
 8011da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011daa:	bf00      	nop
 8011dac:	58024400 	.word	0x58024400
 8011db0:	03d09000 	.word	0x03d09000
 8011db4:	003d0900 	.word	0x003d0900
 8011db8:	08017b80 	.word	0x08017b80

08011dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011dbc:	b480      	push	{r7}
 8011dbe:	b083      	sub	sp, #12
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dc8:	f003 0308 	and.w	r3, r3, #8
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d00a      	beq.n	8011de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	430a      	orrs	r2, r1
 8011de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dea:	f003 0301 	and.w	r3, r3, #1
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d00a      	beq.n	8011e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	685b      	ldr	r3, [r3, #4]
 8011df8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	430a      	orrs	r2, r1
 8011e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e0c:	f003 0302 	and.w	r3, r3, #2
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d00a      	beq.n	8011e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	685b      	ldr	r3, [r3, #4]
 8011e1a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	430a      	orrs	r2, r1
 8011e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e2e:	f003 0304 	and.w	r3, r3, #4
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d00a      	beq.n	8011e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	685b      	ldr	r3, [r3, #4]
 8011e3c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	430a      	orrs	r2, r1
 8011e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e50:	f003 0310 	and.w	r3, r3, #16
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d00a      	beq.n	8011e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	689b      	ldr	r3, [r3, #8]
 8011e5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	430a      	orrs	r2, r1
 8011e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e72:	f003 0320 	and.w	r3, r3, #32
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d00a      	beq.n	8011e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	689b      	ldr	r3, [r3, #8]
 8011e80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	430a      	orrs	r2, r1
 8011e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d01a      	beq.n	8011ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	430a      	orrs	r2, r1
 8011eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011eba:	d10a      	bne.n	8011ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	685b      	ldr	r3, [r3, #4]
 8011ec2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	430a      	orrs	r2, r1
 8011ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d00a      	beq.n	8011ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	430a      	orrs	r2, r1
 8011ef2:	605a      	str	r2, [r3, #4]
  }
}
 8011ef4:	bf00      	nop
 8011ef6:	370c      	adds	r7, #12
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efe:	4770      	bx	lr

08011f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b098      	sub	sp, #96	; 0x60
 8011f04:	af02      	add	r7, sp, #8
 8011f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011f10:	f7f2 fa74 	bl	80043fc <HAL_GetTick>
 8011f14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	f003 0308 	and.w	r3, r3, #8
 8011f20:	2b08      	cmp	r3, #8
 8011f22:	d12f      	bne.n	8011f84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011f24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011f28:	9300      	str	r3, [sp, #0]
 8011f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f000 f88e 	bl	8012054 <UART_WaitOnFlagUntilTimeout>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d022      	beq.n	8011f84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f46:	e853 3f00 	ldrex	r3, [r3]
 8011f4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f52:	653b      	str	r3, [r7, #80]	; 0x50
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	461a      	mov	r2, r3
 8011f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8011f5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011f62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f64:	e841 2300 	strex	r3, r2, [r1]
 8011f68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d1e6      	bne.n	8011f3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2220      	movs	r2, #32
 8011f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011f80:	2303      	movs	r3, #3
 8011f82:	e063      	b.n	801204c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	f003 0304 	and.w	r3, r3, #4
 8011f8e:	2b04      	cmp	r3, #4
 8011f90:	d149      	bne.n	8012026 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011f92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011f96:	9300      	str	r3, [sp, #0]
 8011f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	f000 f857 	bl	8012054 <UART_WaitOnFlagUntilTimeout>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d03c      	beq.n	8012026 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb4:	e853 3f00 	ldrex	r3, [r3]
 8011fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8011fba:	6a3b      	ldr	r3, [r7, #32]
 8011fbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	461a      	mov	r2, r3
 8011fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fca:	633b      	str	r3, [r7, #48]	; 0x30
 8011fcc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011fd2:	e841 2300 	strex	r3, r2, [r1]
 8011fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d1e6      	bne.n	8011fac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	3308      	adds	r3, #8
 8011fe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fe6:	693b      	ldr	r3, [r7, #16]
 8011fe8:	e853 3f00 	ldrex	r3, [r3]
 8011fec:	60fb      	str	r3, [r7, #12]
   return(result);
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	f023 0301 	bic.w	r3, r3, #1
 8011ff4:	64bb      	str	r3, [r7, #72]	; 0x48
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	3308      	adds	r3, #8
 8011ffc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ffe:	61fa      	str	r2, [r7, #28]
 8012000:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012002:	69b9      	ldr	r1, [r7, #24]
 8012004:	69fa      	ldr	r2, [r7, #28]
 8012006:	e841 2300 	strex	r3, r2, [r1]
 801200a:	617b      	str	r3, [r7, #20]
   return(result);
 801200c:	697b      	ldr	r3, [r7, #20]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d1e5      	bne.n	8011fde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2220      	movs	r2, #32
 8012016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2200      	movs	r2, #0
 801201e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012022:	2303      	movs	r3, #3
 8012024:	e012      	b.n	801204c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2220      	movs	r2, #32
 801202a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	2220      	movs	r2, #32
 8012032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2200      	movs	r2, #0
 801203a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2200      	movs	r2, #0
 8012040:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2200      	movs	r2, #0
 8012046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801204a:	2300      	movs	r3, #0
}
 801204c:	4618      	mov	r0, r3
 801204e:	3758      	adds	r7, #88	; 0x58
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}

08012054 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b084      	sub	sp, #16
 8012058:	af00      	add	r7, sp, #0
 801205a:	60f8      	str	r0, [r7, #12]
 801205c:	60b9      	str	r1, [r7, #8]
 801205e:	603b      	str	r3, [r7, #0]
 8012060:	4613      	mov	r3, r2
 8012062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012064:	e04f      	b.n	8012106 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012066:	69bb      	ldr	r3, [r7, #24]
 8012068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801206c:	d04b      	beq.n	8012106 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801206e:	f7f2 f9c5 	bl	80043fc <HAL_GetTick>
 8012072:	4602      	mov	r2, r0
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	1ad3      	subs	r3, r2, r3
 8012078:	69ba      	ldr	r2, [r7, #24]
 801207a:	429a      	cmp	r2, r3
 801207c:	d302      	bcc.n	8012084 <UART_WaitOnFlagUntilTimeout+0x30>
 801207e:	69bb      	ldr	r3, [r7, #24]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d101      	bne.n	8012088 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012084:	2303      	movs	r3, #3
 8012086:	e04e      	b.n	8012126 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	f003 0304 	and.w	r3, r3, #4
 8012092:	2b00      	cmp	r3, #0
 8012094:	d037      	beq.n	8012106 <UART_WaitOnFlagUntilTimeout+0xb2>
 8012096:	68bb      	ldr	r3, [r7, #8]
 8012098:	2b80      	cmp	r3, #128	; 0x80
 801209a:	d034      	beq.n	8012106 <UART_WaitOnFlagUntilTimeout+0xb2>
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	2b40      	cmp	r3, #64	; 0x40
 80120a0:	d031      	beq.n	8012106 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	69db      	ldr	r3, [r3, #28]
 80120a8:	f003 0308 	and.w	r3, r3, #8
 80120ac:	2b08      	cmp	r3, #8
 80120ae:	d110      	bne.n	80120d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	2208      	movs	r2, #8
 80120b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80120b8:	68f8      	ldr	r0, [r7, #12]
 80120ba:	f000 f99d 	bl	80123f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	2208      	movs	r2, #8
 80120c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	2200      	movs	r2, #0
 80120ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80120ce:	2301      	movs	r3, #1
 80120d0:	e029      	b.n	8012126 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	69db      	ldr	r3, [r3, #28]
 80120d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80120dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80120e0:	d111      	bne.n	8012106 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80120ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80120ec:	68f8      	ldr	r0, [r7, #12]
 80120ee:	f000 f983 	bl	80123f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	2220      	movs	r2, #32
 80120f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	2200      	movs	r2, #0
 80120fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012102:	2303      	movs	r3, #3
 8012104:	e00f      	b.n	8012126 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	69da      	ldr	r2, [r3, #28]
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	4013      	ands	r3, r2
 8012110:	68ba      	ldr	r2, [r7, #8]
 8012112:	429a      	cmp	r2, r3
 8012114:	bf0c      	ite	eq
 8012116:	2301      	moveq	r3, #1
 8012118:	2300      	movne	r3, #0
 801211a:	b2db      	uxtb	r3, r3
 801211c:	461a      	mov	r2, r3
 801211e:	79fb      	ldrb	r3, [r7, #7]
 8012120:	429a      	cmp	r2, r3
 8012122:	d0a0      	beq.n	8012066 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012124:	2300      	movs	r3, #0
}
 8012126:	4618      	mov	r0, r3
 8012128:	3710      	adds	r7, #16
 801212a:	46bd      	mov	sp, r7
 801212c:	bd80      	pop	{r7, pc}
	...

08012130 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012130:	b480      	push	{r7}
 8012132:	b0a3      	sub	sp, #140	; 0x8c
 8012134:	af00      	add	r7, sp, #0
 8012136:	60f8      	str	r0, [r7, #12]
 8012138:	60b9      	str	r1, [r7, #8]
 801213a:	4613      	mov	r3, r2
 801213c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	68ba      	ldr	r2, [r7, #8]
 8012142:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	88fa      	ldrh	r2, [r7, #6]
 8012148:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	88fa      	ldrh	r2, [r7, #6]
 8012150:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2200      	movs	r2, #0
 8012158:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	689b      	ldr	r3, [r3, #8]
 801215e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012162:	d10e      	bne.n	8012182 <UART_Start_Receive_IT+0x52>
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	691b      	ldr	r3, [r3, #16]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d105      	bne.n	8012178 <UART_Start_Receive_IT+0x48>
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012172:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012176:	e02d      	b.n	80121d4 <UART_Start_Receive_IT+0xa4>
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	22ff      	movs	r2, #255	; 0xff
 801217c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012180:	e028      	b.n	80121d4 <UART_Start_Receive_IT+0xa4>
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	689b      	ldr	r3, [r3, #8]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d10d      	bne.n	80121a6 <UART_Start_Receive_IT+0x76>
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	691b      	ldr	r3, [r3, #16]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d104      	bne.n	801219c <UART_Start_Receive_IT+0x6c>
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	22ff      	movs	r2, #255	; 0xff
 8012196:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801219a:	e01b      	b.n	80121d4 <UART_Start_Receive_IT+0xa4>
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	227f      	movs	r2, #127	; 0x7f
 80121a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80121a4:	e016      	b.n	80121d4 <UART_Start_Receive_IT+0xa4>
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	689b      	ldr	r3, [r3, #8]
 80121aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80121ae:	d10d      	bne.n	80121cc <UART_Start_Receive_IT+0x9c>
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	691b      	ldr	r3, [r3, #16]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d104      	bne.n	80121c2 <UART_Start_Receive_IT+0x92>
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	227f      	movs	r2, #127	; 0x7f
 80121bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80121c0:	e008      	b.n	80121d4 <UART_Start_Receive_IT+0xa4>
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	223f      	movs	r2, #63	; 0x3f
 80121c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80121ca:	e003      	b.n	80121d4 <UART_Start_Receive_IT+0xa4>
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	2200      	movs	r2, #0
 80121d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2200      	movs	r2, #0
 80121d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	2222      	movs	r2, #34	; 0x22
 80121e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	3308      	adds	r3, #8
 80121ea:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80121ee:	e853 3f00 	ldrex	r3, [r3]
 80121f2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80121f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80121f6:	f043 0301 	orr.w	r3, r3, #1
 80121fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	3308      	adds	r3, #8
 8012204:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012208:	673a      	str	r2, [r7, #112]	; 0x70
 801220a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801220c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801220e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012210:	e841 2300 	strex	r3, r2, [r1]
 8012214:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8012216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012218:	2b00      	cmp	r3, #0
 801221a:	d1e3      	bne.n	80121e4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012224:	d14f      	bne.n	80122c6 <UART_Start_Receive_IT+0x196>
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801222c:	88fa      	ldrh	r2, [r7, #6]
 801222e:	429a      	cmp	r2, r3
 8012230:	d349      	bcc.n	80122c6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	689b      	ldr	r3, [r3, #8]
 8012236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801223a:	d107      	bne.n	801224c <UART_Start_Receive_IT+0x11c>
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	691b      	ldr	r3, [r3, #16]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d103      	bne.n	801224c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	4a47      	ldr	r2, [pc, #284]	; (8012364 <UART_Start_Receive_IT+0x234>)
 8012248:	675a      	str	r2, [r3, #116]	; 0x74
 801224a:	e002      	b.n	8012252 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	4a46      	ldr	r2, [pc, #280]	; (8012368 <UART_Start_Receive_IT+0x238>)
 8012250:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	691b      	ldr	r3, [r3, #16]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d01a      	beq.n	8012290 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012262:	e853 3f00 	ldrex	r3, [r3]
 8012266:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801226a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801226e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	461a      	mov	r2, r3
 8012278:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801227c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801227e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012280:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012282:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012284:	e841 2300 	strex	r3, r2, [r1]
 8012288:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801228a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801228c:	2b00      	cmp	r3, #0
 801228e:	d1e4      	bne.n	801225a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	3308      	adds	r3, #8
 8012296:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801229a:	e853 3f00 	ldrex	r3, [r3]
 801229e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80122a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80122a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	3308      	adds	r3, #8
 80122ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80122b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80122b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80122b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80122b8:	e841 2300 	strex	r3, r2, [r1]
 80122bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80122be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d1e5      	bne.n	8012290 <UART_Start_Receive_IT+0x160>
 80122c4:	e046      	b.n	8012354 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	689b      	ldr	r3, [r3, #8]
 80122ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80122ce:	d107      	bne.n	80122e0 <UART_Start_Receive_IT+0x1b0>
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	691b      	ldr	r3, [r3, #16]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d103      	bne.n	80122e0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	4a24      	ldr	r2, [pc, #144]	; (801236c <UART_Start_Receive_IT+0x23c>)
 80122dc:	675a      	str	r2, [r3, #116]	; 0x74
 80122de:	e002      	b.n	80122e6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	4a23      	ldr	r2, [pc, #140]	; (8012370 <UART_Start_Receive_IT+0x240>)
 80122e4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	691b      	ldr	r3, [r3, #16]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d019      	beq.n	8012322 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f6:	e853 3f00 	ldrex	r3, [r3]
 80122fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80122fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8012302:	677b      	str	r3, [r7, #116]	; 0x74
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	461a      	mov	r2, r3
 801230a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801230c:	637b      	str	r3, [r7, #52]	; 0x34
 801230e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012310:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012314:	e841 2300 	strex	r3, r2, [r1]
 8012318:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801231a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801231c:	2b00      	cmp	r3, #0
 801231e:	d1e6      	bne.n	80122ee <UART_Start_Receive_IT+0x1be>
 8012320:	e018      	b.n	8012354 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012328:	697b      	ldr	r3, [r7, #20]
 801232a:	e853 3f00 	ldrex	r3, [r3]
 801232e:	613b      	str	r3, [r7, #16]
   return(result);
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	f043 0320 	orr.w	r3, r3, #32
 8012336:	67bb      	str	r3, [r7, #120]	; 0x78
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	461a      	mov	r2, r3
 801233e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012340:	623b      	str	r3, [r7, #32]
 8012342:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012344:	69f9      	ldr	r1, [r7, #28]
 8012346:	6a3a      	ldr	r2, [r7, #32]
 8012348:	e841 2300 	strex	r3, r2, [r1]
 801234c:	61bb      	str	r3, [r7, #24]
   return(result);
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d1e6      	bne.n	8012322 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8012354:	2300      	movs	r3, #0
}
 8012356:	4618      	mov	r0, r3
 8012358:	378c      	adds	r7, #140	; 0x8c
 801235a:	46bd      	mov	sp, r7
 801235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012360:	4770      	bx	lr
 8012362:	bf00      	nop
 8012364:	08012d49 	.word	0x08012d49
 8012368:	080129e9 	.word	0x080129e9
 801236c:	08012831 	.word	0x08012831
 8012370:	08012679 	.word	0x08012679

08012374 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012374:	b480      	push	{r7}
 8012376:	b08f      	sub	sp, #60	; 0x3c
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012382:	6a3b      	ldr	r3, [r7, #32]
 8012384:	e853 3f00 	ldrex	r3, [r3]
 8012388:	61fb      	str	r3, [r7, #28]
   return(result);
 801238a:	69fb      	ldr	r3, [r7, #28]
 801238c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8012390:	637b      	str	r3, [r7, #52]	; 0x34
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	461a      	mov	r2, r3
 8012398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801239a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801239c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801239e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80123a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123a2:	e841 2300 	strex	r3, r2, [r1]
 80123a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80123a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d1e6      	bne.n	801237c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	3308      	adds	r3, #8
 80123b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	e853 3f00 	ldrex	r3, [r3]
 80123bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80123c4:	633b      	str	r3, [r7, #48]	; 0x30
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	3308      	adds	r3, #8
 80123cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123ce:	61ba      	str	r2, [r7, #24]
 80123d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123d2:	6979      	ldr	r1, [r7, #20]
 80123d4:	69ba      	ldr	r2, [r7, #24]
 80123d6:	e841 2300 	strex	r3, r2, [r1]
 80123da:	613b      	str	r3, [r7, #16]
   return(result);
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d1e5      	bne.n	80123ae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2220      	movs	r2, #32
 80123e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80123ea:	bf00      	nop
 80123ec:	373c      	adds	r7, #60	; 0x3c
 80123ee:	46bd      	mov	sp, r7
 80123f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f4:	4770      	bx	lr
	...

080123f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80123f8:	b480      	push	{r7}
 80123fa:	b095      	sub	sp, #84	; 0x54
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012408:	e853 3f00 	ldrex	r3, [r3]
 801240c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012410:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012414:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	461a      	mov	r2, r3
 801241c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801241e:	643b      	str	r3, [r7, #64]	; 0x40
 8012420:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012422:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012426:	e841 2300 	strex	r3, r2, [r1]
 801242a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801242e:	2b00      	cmp	r3, #0
 8012430:	d1e6      	bne.n	8012400 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	3308      	adds	r3, #8
 8012438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801243a:	6a3b      	ldr	r3, [r7, #32]
 801243c:	e853 3f00 	ldrex	r3, [r3]
 8012440:	61fb      	str	r3, [r7, #28]
   return(result);
 8012442:	69fa      	ldr	r2, [r7, #28]
 8012444:	4b1e      	ldr	r3, [pc, #120]	; (80124c0 <UART_EndRxTransfer+0xc8>)
 8012446:	4013      	ands	r3, r2
 8012448:	64bb      	str	r3, [r7, #72]	; 0x48
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	3308      	adds	r3, #8
 8012450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012452:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012454:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801245a:	e841 2300 	strex	r3, r2, [r1]
 801245e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012462:	2b00      	cmp	r3, #0
 8012464:	d1e5      	bne.n	8012432 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801246a:	2b01      	cmp	r3, #1
 801246c:	d118      	bne.n	80124a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	e853 3f00 	ldrex	r3, [r3]
 801247a:	60bb      	str	r3, [r7, #8]
   return(result);
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	f023 0310 	bic.w	r3, r3, #16
 8012482:	647b      	str	r3, [r7, #68]	; 0x44
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	461a      	mov	r2, r3
 801248a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801248c:	61bb      	str	r3, [r7, #24]
 801248e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012490:	6979      	ldr	r1, [r7, #20]
 8012492:	69ba      	ldr	r2, [r7, #24]
 8012494:	e841 2300 	strex	r3, r2, [r1]
 8012498:	613b      	str	r3, [r7, #16]
   return(result);
 801249a:	693b      	ldr	r3, [r7, #16]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d1e6      	bne.n	801246e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2220      	movs	r2, #32
 80124a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2200      	movs	r2, #0
 80124ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	2200      	movs	r2, #0
 80124b2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80124b4:	bf00      	nop
 80124b6:	3754      	adds	r7, #84	; 0x54
 80124b8:	46bd      	mov	sp, r7
 80124ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124be:	4770      	bx	lr
 80124c0:	effffffe 	.word	0xeffffffe

080124c4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b090      	sub	sp, #64	; 0x40
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124d0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	69db      	ldr	r3, [r3, #28]
 80124d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124da:	d037      	beq.n	801254c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80124dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124de:	2200      	movs	r2, #0
 80124e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80124e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	3308      	adds	r3, #8
 80124ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ee:	e853 3f00 	ldrex	r3, [r3]
 80124f2:	623b      	str	r3, [r7, #32]
   return(result);
 80124f4:	6a3b      	ldr	r3, [r7, #32]
 80124f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80124fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80124fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	3308      	adds	r3, #8
 8012502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012504:	633a      	str	r2, [r7, #48]	; 0x30
 8012506:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012508:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801250a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801250c:	e841 2300 	strex	r3, r2, [r1]
 8012510:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012514:	2b00      	cmp	r3, #0
 8012516:	d1e5      	bne.n	80124e4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801251e:	693b      	ldr	r3, [r7, #16]
 8012520:	e853 3f00 	ldrex	r3, [r3]
 8012524:	60fb      	str	r3, [r7, #12]
   return(result);
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801252c:	637b      	str	r3, [r7, #52]	; 0x34
 801252e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	461a      	mov	r2, r3
 8012534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012536:	61fb      	str	r3, [r7, #28]
 8012538:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801253a:	69b9      	ldr	r1, [r7, #24]
 801253c:	69fa      	ldr	r2, [r7, #28]
 801253e:	e841 2300 	strex	r3, r2, [r1]
 8012542:	617b      	str	r3, [r7, #20]
   return(result);
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d1e6      	bne.n	8012518 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801254a:	e002      	b.n	8012552 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 801254c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801254e:	f7ef fc9f 	bl	8001e90 <HAL_UART_TxCpltCallback>
}
 8012552:	bf00      	nop
 8012554:	3740      	adds	r7, #64	; 0x40
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}

0801255a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801255a:	b580      	push	{r7, lr}
 801255c:	b084      	sub	sp, #16
 801255e:	af00      	add	r7, sp, #0
 8012560:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012566:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012568:	68f8      	ldr	r0, [r7, #12]
 801256a:	f7fe fe9f 	bl	80112ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801256e:	bf00      	nop
 8012570:	3710      	adds	r7, #16
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}

08012576 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012576:	b580      	push	{r7, lr}
 8012578:	b086      	sub	sp, #24
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012582:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012584:	697b      	ldr	r3, [r7, #20]
 8012586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801258a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012592:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	689b      	ldr	r3, [r3, #8]
 801259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801259e:	2b80      	cmp	r3, #128	; 0x80
 80125a0:	d109      	bne.n	80125b6 <UART_DMAError+0x40>
 80125a2:	693b      	ldr	r3, [r7, #16]
 80125a4:	2b21      	cmp	r3, #33	; 0x21
 80125a6:	d106      	bne.n	80125b6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	2200      	movs	r2, #0
 80125ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80125b0:	6978      	ldr	r0, [r7, #20]
 80125b2:	f7ff fedf 	bl	8012374 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80125b6:	697b      	ldr	r3, [r7, #20]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	689b      	ldr	r3, [r3, #8]
 80125bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125c0:	2b40      	cmp	r3, #64	; 0x40
 80125c2:	d109      	bne.n	80125d8 <UART_DMAError+0x62>
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	2b22      	cmp	r3, #34	; 0x22
 80125c8:	d106      	bne.n	80125d8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	2200      	movs	r2, #0
 80125ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80125d2:	6978      	ldr	r0, [r7, #20]
 80125d4:	f7ff ff10 	bl	80123f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125de:	f043 0210 	orr.w	r2, r3, #16
 80125e2:	697b      	ldr	r3, [r7, #20]
 80125e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80125e8:	6978      	ldr	r0, [r7, #20]
 80125ea:	f7fe fe69 	bl	80112c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80125ee:	bf00      	nop
 80125f0:	3718      	adds	r7, #24
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}

080125f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80125f6:	b580      	push	{r7, lr}
 80125f8:	b084      	sub	sp, #16
 80125fa:	af00      	add	r7, sp, #0
 80125fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012602:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	2200      	movs	r2, #0
 8012608:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	2200      	movs	r2, #0
 8012610:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012614:	68f8      	ldr	r0, [r7, #12]
 8012616:	f7fe fe53 	bl	80112c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801261a:	bf00      	nop
 801261c:	3710      	adds	r7, #16
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}

08012622 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012622:	b580      	push	{r7, lr}
 8012624:	b088      	sub	sp, #32
 8012626:	af00      	add	r7, sp, #0
 8012628:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	e853 3f00 	ldrex	r3, [r3]
 8012636:	60bb      	str	r3, [r7, #8]
   return(result);
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801263e:	61fb      	str	r3, [r7, #28]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	461a      	mov	r2, r3
 8012646:	69fb      	ldr	r3, [r7, #28]
 8012648:	61bb      	str	r3, [r7, #24]
 801264a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801264c:	6979      	ldr	r1, [r7, #20]
 801264e:	69ba      	ldr	r2, [r7, #24]
 8012650:	e841 2300 	strex	r3, r2, [r1]
 8012654:	613b      	str	r3, [r7, #16]
   return(result);
 8012656:	693b      	ldr	r3, [r7, #16]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d1e6      	bne.n	801262a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2220      	movs	r2, #32
 8012660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2200      	movs	r2, #0
 8012668:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f7ef fc10 	bl	8001e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012670:	bf00      	nop
 8012672:	3720      	adds	r7, #32
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}

08012678 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b09c      	sub	sp, #112	; 0x70
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012686:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012690:	2b22      	cmp	r3, #34	; 0x22
 8012692:	f040 80be 	bne.w	8012812 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801269c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80126a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80126a4:	b2d9      	uxtb	r1, r3
 80126a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80126aa:	b2da      	uxtb	r2, r3
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126b0:	400a      	ands	r2, r1
 80126b2:	b2d2      	uxtb	r2, r2
 80126b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126ba:	1c5a      	adds	r2, r3, #1
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126c6:	b29b      	uxth	r3, r3
 80126c8:	3b01      	subs	r3, #1
 80126ca:	b29a      	uxth	r2, r3
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80126d8:	b29b      	uxth	r3, r3
 80126da:	2b00      	cmp	r3, #0
 80126dc:	f040 80a1 	bne.w	8012822 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126e8:	e853 3f00 	ldrex	r3, [r3]
 80126ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80126ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80126f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	461a      	mov	r2, r3
 80126fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80126fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8012700:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012702:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012704:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012706:	e841 2300 	strex	r3, r2, [r1]
 801270a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801270c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801270e:	2b00      	cmp	r3, #0
 8012710:	d1e6      	bne.n	80126e0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	3308      	adds	r3, #8
 8012718:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801271a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801271c:	e853 3f00 	ldrex	r3, [r3]
 8012720:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012724:	f023 0301 	bic.w	r3, r3, #1
 8012728:	667b      	str	r3, [r7, #100]	; 0x64
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	3308      	adds	r3, #8
 8012730:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012732:	647a      	str	r2, [r7, #68]	; 0x44
 8012734:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012736:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801273a:	e841 2300 	strex	r3, r2, [r1]
 801273e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012742:	2b00      	cmp	r3, #0
 8012744:	d1e5      	bne.n	8012712 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2220      	movs	r2, #32
 801274a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2200      	movs	r2, #0
 8012752:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2200      	movs	r2, #0
 8012758:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	4a33      	ldr	r2, [pc, #204]	; (801282c <UART_RxISR_8BIT+0x1b4>)
 8012760:	4293      	cmp	r3, r2
 8012762:	d01f      	beq.n	80127a4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	685b      	ldr	r3, [r3, #4]
 801276a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801276e:	2b00      	cmp	r3, #0
 8012770:	d018      	beq.n	80127a4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801277a:	e853 3f00 	ldrex	r3, [r3]
 801277e:	623b      	str	r3, [r7, #32]
   return(result);
 8012780:	6a3b      	ldr	r3, [r7, #32]
 8012782:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012786:	663b      	str	r3, [r7, #96]	; 0x60
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	461a      	mov	r2, r3
 801278e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012790:	633b      	str	r3, [r7, #48]	; 0x30
 8012792:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012794:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012798:	e841 2300 	strex	r3, r2, [r1]
 801279c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d1e6      	bne.n	8012772 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127a8:	2b01      	cmp	r3, #1
 80127aa:	d12e      	bne.n	801280a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2200      	movs	r2, #0
 80127b0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	e853 3f00 	ldrex	r3, [r3]
 80127be:	60fb      	str	r3, [r7, #12]
   return(result);
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	f023 0310 	bic.w	r3, r3, #16
 80127c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	461a      	mov	r2, r3
 80127ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80127d0:	61fb      	str	r3, [r7, #28]
 80127d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127d4:	69b9      	ldr	r1, [r7, #24]
 80127d6:	69fa      	ldr	r2, [r7, #28]
 80127d8:	e841 2300 	strex	r3, r2, [r1]
 80127dc:	617b      	str	r3, [r7, #20]
   return(result);
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d1e6      	bne.n	80127b2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	69db      	ldr	r3, [r3, #28]
 80127ea:	f003 0310 	and.w	r3, r3, #16
 80127ee:	2b10      	cmp	r3, #16
 80127f0:	d103      	bne.n	80127fa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	2210      	movs	r2, #16
 80127f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012800:	4619      	mov	r1, r3
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f7fe fd66 	bl	80112d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012808:	e00b      	b.n	8012822 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801280a:	6878      	ldr	r0, [r7, #4]
 801280c:	f7ee feee 	bl	80015ec <HAL_UART_RxCpltCallback>
}
 8012810:	e007      	b.n	8012822 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	699a      	ldr	r2, [r3, #24]
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f042 0208 	orr.w	r2, r2, #8
 8012820:	619a      	str	r2, [r3, #24]
}
 8012822:	bf00      	nop
 8012824:	3770      	adds	r7, #112	; 0x70
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}
 801282a:	bf00      	nop
 801282c:	58000c00 	.word	0x58000c00

08012830 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b09c      	sub	sp, #112	; 0x70
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801283e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012848:	2b22      	cmp	r3, #34	; 0x22
 801284a:	f040 80be 	bne.w	80129ca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012854:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801285c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801285e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8012862:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8012866:	4013      	ands	r3, r2
 8012868:	b29a      	uxth	r2, r3
 801286a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801286c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012872:	1c9a      	adds	r2, r3, #2
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801287e:	b29b      	uxth	r3, r3
 8012880:	3b01      	subs	r3, #1
 8012882:	b29a      	uxth	r2, r3
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012890:	b29b      	uxth	r3, r3
 8012892:	2b00      	cmp	r3, #0
 8012894:	f040 80a1 	bne.w	80129da <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801289e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128a0:	e853 3f00 	ldrex	r3, [r3]
 80128a4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80128a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80128a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80128ac:	667b      	str	r3, [r7, #100]	; 0x64
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	461a      	mov	r2, r3
 80128b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80128b6:	657b      	str	r3, [r7, #84]	; 0x54
 80128b8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80128bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80128be:	e841 2300 	strex	r3, r2, [r1]
 80128c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80128c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d1e6      	bne.n	8012898 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	3308      	adds	r3, #8
 80128d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128d4:	e853 3f00 	ldrex	r3, [r3]
 80128d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80128da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128dc:	f023 0301 	bic.w	r3, r3, #1
 80128e0:	663b      	str	r3, [r7, #96]	; 0x60
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	3308      	adds	r3, #8
 80128e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80128ea:	643a      	str	r2, [r7, #64]	; 0x40
 80128ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80128f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80128f2:	e841 2300 	strex	r3, r2, [r1]
 80128f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80128f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d1e5      	bne.n	80128ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2220      	movs	r2, #32
 8012902:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2200      	movs	r2, #0
 801290a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	2200      	movs	r2, #0
 8012910:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	4a33      	ldr	r2, [pc, #204]	; (80129e4 <UART_RxISR_16BIT+0x1b4>)
 8012918:	4293      	cmp	r3, r2
 801291a:	d01f      	beq.n	801295c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012926:	2b00      	cmp	r3, #0
 8012928:	d018      	beq.n	801295c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012930:	6a3b      	ldr	r3, [r7, #32]
 8012932:	e853 3f00 	ldrex	r3, [r3]
 8012936:	61fb      	str	r3, [r7, #28]
   return(result);
 8012938:	69fb      	ldr	r3, [r7, #28]
 801293a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801293e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	461a      	mov	r2, r3
 8012946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012948:	62fb      	str	r3, [r7, #44]	; 0x2c
 801294a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801294c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801294e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012950:	e841 2300 	strex	r3, r2, [r1]
 8012954:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012958:	2b00      	cmp	r3, #0
 801295a:	d1e6      	bne.n	801292a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012960:	2b01      	cmp	r3, #1
 8012962:	d12e      	bne.n	80129c2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	2200      	movs	r2, #0
 8012968:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	e853 3f00 	ldrex	r3, [r3]
 8012976:	60bb      	str	r3, [r7, #8]
   return(result);
 8012978:	68bb      	ldr	r3, [r7, #8]
 801297a:	f023 0310 	bic.w	r3, r3, #16
 801297e:	65bb      	str	r3, [r7, #88]	; 0x58
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	461a      	mov	r2, r3
 8012986:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012988:	61bb      	str	r3, [r7, #24]
 801298a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801298c:	6979      	ldr	r1, [r7, #20]
 801298e:	69ba      	ldr	r2, [r7, #24]
 8012990:	e841 2300 	strex	r3, r2, [r1]
 8012994:	613b      	str	r3, [r7, #16]
   return(result);
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d1e6      	bne.n	801296a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	69db      	ldr	r3, [r3, #28]
 80129a2:	f003 0310 	and.w	r3, r3, #16
 80129a6:	2b10      	cmp	r3, #16
 80129a8:	d103      	bne.n	80129b2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	2210      	movs	r2, #16
 80129b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80129b8:	4619      	mov	r1, r3
 80129ba:	6878      	ldr	r0, [r7, #4]
 80129bc:	f7fe fc8a 	bl	80112d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80129c0:	e00b      	b.n	80129da <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f7ee fe12 	bl	80015ec <HAL_UART_RxCpltCallback>
}
 80129c8:	e007      	b.n	80129da <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	699a      	ldr	r2, [r3, #24]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	f042 0208 	orr.w	r2, r2, #8
 80129d8:	619a      	str	r2, [r3, #24]
}
 80129da:	bf00      	nop
 80129dc:	3770      	adds	r7, #112	; 0x70
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}
 80129e2:	bf00      	nop
 80129e4:	58000c00 	.word	0x58000c00

080129e8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b0ac      	sub	sp, #176	; 0xb0
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80129f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	69db      	ldr	r3, [r3, #28]
 8012a00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681b      	ldr	r3, [r3, #0]
 8012a12:	689b      	ldr	r3, [r3, #8]
 8012a14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a1e:	2b22      	cmp	r3, #34	; 0x22
 8012a20:	f040 8180 	bne.w	8012d24 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a2a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012a2e:	e123      	b.n	8012c78 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a36:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012a3a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8012a3e:	b2d9      	uxtb	r1, r3
 8012a40:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8012a44:	b2da      	uxtb	r2, r3
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a4a:	400a      	ands	r2, r1
 8012a4c:	b2d2      	uxtb	r2, r2
 8012a4e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a54:	1c5a      	adds	r2, r3, #1
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	3b01      	subs	r3, #1
 8012a64:	b29a      	uxth	r2, r3
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	69db      	ldr	r3, [r3, #28]
 8012a72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012a7a:	f003 0307 	and.w	r3, r3, #7
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d053      	beq.n	8012b2a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012a86:	f003 0301 	and.w	r3, r3, #1
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d011      	beq.n	8012ab2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8012a8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d00b      	beq.n	8012ab2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	2201      	movs	r2, #1
 8012aa0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012aa8:	f043 0201 	orr.w	r2, r3, #1
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012ab6:	f003 0302 	and.w	r3, r3, #2
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d011      	beq.n	8012ae2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012ac2:	f003 0301 	and.w	r3, r3, #1
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d00b      	beq.n	8012ae2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	2202      	movs	r2, #2
 8012ad0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ad8:	f043 0204 	orr.w	r2, r3, #4
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012ae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012ae6:	f003 0304 	and.w	r3, r3, #4
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d011      	beq.n	8012b12 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012af2:	f003 0301 	and.w	r3, r3, #1
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d00b      	beq.n	8012b12 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	2204      	movs	r2, #4
 8012b00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b08:	f043 0202 	orr.w	r2, r3, #2
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d006      	beq.n	8012b2a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f7fe fbcf 	bl	80112c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	2200      	movs	r2, #0
 8012b26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012b30:	b29b      	uxth	r3, r3
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	f040 80a0 	bne.w	8012c78 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b40:	e853 3f00 	ldrex	r3, [r3]
 8012b44:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8012b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	461a      	mov	r2, r3
 8012b56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012b5c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b5e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012b60:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012b62:	e841 2300 	strex	r3, r2, [r1]
 8012b66:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8012b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d1e4      	bne.n	8012b38 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	3308      	adds	r3, #8
 8012b74:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b78:	e853 3f00 	ldrex	r3, [r3]
 8012b7c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8012b7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012b80:	4b6e      	ldr	r3, [pc, #440]	; (8012d3c <UART_RxISR_8BIT_FIFOEN+0x354>)
 8012b82:	4013      	ands	r3, r2
 8012b84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	3308      	adds	r3, #8
 8012b8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012b92:	66ba      	str	r2, [r7, #104]	; 0x68
 8012b94:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b96:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012b98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012b9a:	e841 2300 	strex	r3, r2, [r1]
 8012b9e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d1e3      	bne.n	8012b6e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2220      	movs	r2, #32
 8012baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	4a60      	ldr	r2, [pc, #384]	; (8012d40 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012bc0:	4293      	cmp	r3, r2
 8012bc2:	d021      	beq.n	8012c08 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	685b      	ldr	r3, [r3, #4]
 8012bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d01a      	beq.n	8012c08 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bda:	e853 3f00 	ldrex	r3, [r3]
 8012bde:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012be2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012be6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	461a      	mov	r2, r3
 8012bf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012bf4:	657b      	str	r3, [r7, #84]	; 0x54
 8012bf6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bf8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012bfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012bfc:	e841 2300 	strex	r3, r2, [r1]
 8012c00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d1e4      	bne.n	8012bd2 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c0c:	2b01      	cmp	r3, #1
 8012c0e:	d130      	bne.n	8012c72 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2200      	movs	r2, #0
 8012c14:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c1e:	e853 3f00 	ldrex	r3, [r3]
 8012c22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c26:	f023 0310 	bic.w	r3, r3, #16
 8012c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	461a      	mov	r2, r3
 8012c34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012c38:	643b      	str	r3, [r7, #64]	; 0x40
 8012c3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012c3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012c40:	e841 2300 	strex	r3, r2, [r1]
 8012c44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d1e4      	bne.n	8012c16 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	69db      	ldr	r3, [r3, #28]
 8012c52:	f003 0310 	and.w	r3, r3, #16
 8012c56:	2b10      	cmp	r3, #16
 8012c58:	d103      	bne.n	8012c62 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	2210      	movs	r2, #16
 8012c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012c68:	4619      	mov	r1, r3
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f7fe fb32 	bl	80112d4 <HAL_UARTEx_RxEventCallback>
 8012c70:	e002      	b.n	8012c78 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f7ee fcba 	bl	80015ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012c78:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d006      	beq.n	8012c8e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8012c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012c84:	f003 0320 	and.w	r3, r3, #32
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	f47f aed1 	bne.w	8012a30 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012c94:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012c98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d049      	beq.n	8012d34 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012ca6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8012caa:	429a      	cmp	r2, r3
 8012cac:	d242      	bcs.n	8012d34 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	3308      	adds	r3, #8
 8012cb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cb6:	6a3b      	ldr	r3, [r7, #32]
 8012cb8:	e853 3f00 	ldrex	r3, [r3]
 8012cbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8012cbe:	69fb      	ldr	r3, [r7, #28]
 8012cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	3308      	adds	r3, #8
 8012cce:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012cd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012cda:	e841 2300 	strex	r3, r2, [r1]
 8012cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d1e3      	bne.n	8012cae <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	4a16      	ldr	r2, [pc, #88]	; (8012d44 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012cea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	e853 3f00 	ldrex	r3, [r3]
 8012cf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8012cfa:	68bb      	ldr	r3, [r7, #8]
 8012cfc:	f043 0320 	orr.w	r3, r3, #32
 8012d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	461a      	mov	r2, r3
 8012d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d0e:	61bb      	str	r3, [r7, #24]
 8012d10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d12:	6979      	ldr	r1, [r7, #20]
 8012d14:	69ba      	ldr	r2, [r7, #24]
 8012d16:	e841 2300 	strex	r3, r2, [r1]
 8012d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8012d1c:	693b      	ldr	r3, [r7, #16]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d1e4      	bne.n	8012cec <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012d22:	e007      	b.n	8012d34 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	699a      	ldr	r2, [r3, #24]
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	f042 0208 	orr.w	r2, r2, #8
 8012d32:	619a      	str	r2, [r3, #24]
}
 8012d34:	bf00      	nop
 8012d36:	37b0      	adds	r7, #176	; 0xb0
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}
 8012d3c:	effffffe 	.word	0xeffffffe
 8012d40:	58000c00 	.word	0x58000c00
 8012d44:	08012679 	.word	0x08012679

08012d48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b0ae      	sub	sp, #184	; 0xb8
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012d56:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	69db      	ldr	r3, [r3, #28]
 8012d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	689b      	ldr	r3, [r3, #8]
 8012d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012d7e:	2b22      	cmp	r3, #34	; 0x22
 8012d80:	f040 8184 	bne.w	801308c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012d8a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012d8e:	e127      	b.n	8012fe0 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d96:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012da2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8012da6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012daa:	4013      	ands	r3, r2
 8012dac:	b29a      	uxth	r2, r3
 8012dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012db2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012db8:	1c9a      	adds	r2, r3, #2
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012dc4:	b29b      	uxth	r3, r3
 8012dc6:	3b01      	subs	r3, #1
 8012dc8:	b29a      	uxth	r2, r3
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	69db      	ldr	r3, [r3, #28]
 8012dd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012dda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012dde:	f003 0307 	and.w	r3, r3, #7
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d053      	beq.n	8012e8e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012de6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012dea:	f003 0301 	and.w	r3, r3, #1
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d011      	beq.n	8012e16 <UART_RxISR_16BIT_FIFOEN+0xce>
 8012df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d00b      	beq.n	8012e16 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	2201      	movs	r2, #1
 8012e04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e0c:	f043 0201 	orr.w	r2, r3, #1
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012e16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012e1a:	f003 0302 	and.w	r3, r3, #2
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d011      	beq.n	8012e46 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012e22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012e26:	f003 0301 	and.w	r3, r3, #1
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d00b      	beq.n	8012e46 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	2202      	movs	r2, #2
 8012e34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e3c:	f043 0204 	orr.w	r2, r3, #4
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012e46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012e4a:	f003 0304 	and.w	r3, r3, #4
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d011      	beq.n	8012e76 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012e52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012e56:	f003 0301 	and.w	r3, r3, #1
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d00b      	beq.n	8012e76 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	2204      	movs	r2, #4
 8012e64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e6c:	f043 0202 	orr.w	r2, r3, #2
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d006      	beq.n	8012e8e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	f7fe fa1d 	bl	80112c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	2200      	movs	r2, #0
 8012e8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012e94:	b29b      	uxth	r3, r3
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	f040 80a2 	bne.w	8012fe0 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ea4:	e853 3f00 	ldrex	r3, [r3]
 8012ea8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	461a      	mov	r2, r3
 8012eba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012ebe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012ec2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ec4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012ec6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012eca:	e841 2300 	strex	r3, r2, [r1]
 8012ece:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d1e2      	bne.n	8012e9c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	3308      	adds	r3, #8
 8012edc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ede:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ee0:	e853 3f00 	ldrex	r3, [r3]
 8012ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012ee6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012ee8:	4b6e      	ldr	r3, [pc, #440]	; (80130a4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012eea:	4013      	ands	r3, r2
 8012eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	3308      	adds	r3, #8
 8012ef6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012efa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012efc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012efe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012f00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012f02:	e841 2300 	strex	r3, r2, [r1]
 8012f06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d1e3      	bne.n	8012ed6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2220      	movs	r2, #32
 8012f12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2200      	movs	r2, #0
 8012f1a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	2200      	movs	r2, #0
 8012f20:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	4a60      	ldr	r2, [pc, #384]	; (80130a8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8012f28:	4293      	cmp	r3, r2
 8012f2a:	d021      	beq.n	8012f70 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	685b      	ldr	r3, [r3, #4]
 8012f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d01a      	beq.n	8012f70 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f42:	e853 3f00 	ldrex	r3, [r3]
 8012f46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012f4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	461a      	mov	r2, r3
 8012f58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012f5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8012f5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012f62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012f64:	e841 2300 	strex	r3, r2, [r1]
 8012f68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d1e4      	bne.n	8012f3a <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f74:	2b01      	cmp	r3, #1
 8012f76:	d130      	bne.n	8012fda <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f86:	e853 3f00 	ldrex	r3, [r3]
 8012f8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f8e:	f023 0310 	bic.w	r3, r3, #16
 8012f92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	461a      	mov	r2, r3
 8012f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8012fa2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012fa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012fa8:	e841 2300 	strex	r3, r2, [r1]
 8012fac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d1e4      	bne.n	8012f7e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	69db      	ldr	r3, [r3, #28]
 8012fba:	f003 0310 	and.w	r3, r3, #16
 8012fbe:	2b10      	cmp	r3, #16
 8012fc0:	d103      	bne.n	8012fca <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	2210      	movs	r2, #16
 8012fc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012fd0:	4619      	mov	r1, r3
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f7fe f97e 	bl	80112d4 <HAL_UARTEx_RxEventCallback>
 8012fd8:	e002      	b.n	8012fe0 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012fda:	6878      	ldr	r0, [r7, #4]
 8012fdc:	f7ee fb06 	bl	80015ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012fe0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d006      	beq.n	8012ff6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012fe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012fec:	f003 0320 	and.w	r3, r3, #32
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	f47f aecd 	bne.w	8012d90 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ffc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013000:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013004:	2b00      	cmp	r3, #0
 8013006:	d049      	beq.n	801309c <UART_RxISR_16BIT_FIFOEN+0x354>
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801300e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8013012:	429a      	cmp	r2, r3
 8013014:	d242      	bcs.n	801309c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	3308      	adds	r3, #8
 801301c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013020:	e853 3f00 	ldrex	r3, [r3]
 8013024:	623b      	str	r3, [r7, #32]
   return(result);
 8013026:	6a3b      	ldr	r3, [r7, #32]
 8013028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801302c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	3308      	adds	r3, #8
 8013036:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801303a:	633a      	str	r2, [r7, #48]	; 0x30
 801303c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801303e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013042:	e841 2300 	strex	r3, r2, [r1]
 8013046:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801304a:	2b00      	cmp	r3, #0
 801304c:	d1e3      	bne.n	8013016 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	4a16      	ldr	r2, [pc, #88]	; (80130ac <UART_RxISR_16BIT_FIFOEN+0x364>)
 8013052:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801305a:	693b      	ldr	r3, [r7, #16]
 801305c:	e853 3f00 	ldrex	r3, [r3]
 8013060:	60fb      	str	r3, [r7, #12]
   return(result);
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	f043 0320 	orr.w	r3, r3, #32
 8013068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	461a      	mov	r2, r3
 8013072:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013076:	61fb      	str	r3, [r7, #28]
 8013078:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801307a:	69b9      	ldr	r1, [r7, #24]
 801307c:	69fa      	ldr	r2, [r7, #28]
 801307e:	e841 2300 	strex	r3, r2, [r1]
 8013082:	617b      	str	r3, [r7, #20]
   return(result);
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d1e4      	bne.n	8013054 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801308a:	e007      	b.n	801309c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	699a      	ldr	r2, [r3, #24]
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	f042 0208 	orr.w	r2, r2, #8
 801309a:	619a      	str	r2, [r3, #24]
}
 801309c:	bf00      	nop
 801309e:	37b8      	adds	r7, #184	; 0xb8
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}
 80130a4:	effffffe 	.word	0xeffffffe
 80130a8:	58000c00 	.word	0x58000c00
 80130ac:	08012831 	.word	0x08012831

080130b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80130b0:	b480      	push	{r7}
 80130b2:	b083      	sub	sp, #12
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80130b8:	bf00      	nop
 80130ba:	370c      	adds	r7, #12
 80130bc:	46bd      	mov	sp, r7
 80130be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c2:	4770      	bx	lr

080130c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80130c4:	b480      	push	{r7}
 80130c6:	b083      	sub	sp, #12
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80130cc:	bf00      	nop
 80130ce:	370c      	adds	r7, #12
 80130d0:	46bd      	mov	sp, r7
 80130d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d6:	4770      	bx	lr

080130d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80130d8:	b480      	push	{r7}
 80130da:	b083      	sub	sp, #12
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80130e0:	bf00      	nop
 80130e2:	370c      	adds	r7, #12
 80130e4:	46bd      	mov	sp, r7
 80130e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ea:	4770      	bx	lr

080130ec <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80130ec:	b480      	push	{r7}
 80130ee:	b089      	sub	sp, #36	; 0x24
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80130fa:	2b01      	cmp	r3, #1
 80130fc:	d101      	bne.n	8013102 <HAL_UARTEx_EnableStopMode+0x16>
 80130fe:	2302      	movs	r3, #2
 8013100:	e021      	b.n	8013146 <HAL_UARTEx_EnableStopMode+0x5a>
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	2201      	movs	r2, #1
 8013106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	e853 3f00 	ldrex	r3, [r3]
 8013116:	60bb      	str	r3, [r7, #8]
   return(result);
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	f043 0302 	orr.w	r3, r3, #2
 801311e:	61fb      	str	r3, [r7, #28]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	461a      	mov	r2, r3
 8013126:	69fb      	ldr	r3, [r7, #28]
 8013128:	61bb      	str	r3, [r7, #24]
 801312a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801312c:	6979      	ldr	r1, [r7, #20]
 801312e:	69ba      	ldr	r2, [r7, #24]
 8013130:	e841 2300 	strex	r3, r2, [r1]
 8013134:	613b      	str	r3, [r7, #16]
   return(result);
 8013136:	693b      	ldr	r3, [r7, #16]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d1e6      	bne.n	801310a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2200      	movs	r2, #0
 8013140:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013144:	2300      	movs	r3, #0
}
 8013146:	4618      	mov	r0, r3
 8013148:	3724      	adds	r7, #36	; 0x24
 801314a:	46bd      	mov	sp, r7
 801314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013150:	4770      	bx	lr

08013152 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8013152:	b580      	push	{r7, lr}
 8013154:	b084      	sub	sp, #16
 8013156:	af00      	add	r7, sp, #0
 8013158:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013160:	2b01      	cmp	r3, #1
 8013162:	d101      	bne.n	8013168 <HAL_UARTEx_EnableFifoMode+0x16>
 8013164:	2302      	movs	r3, #2
 8013166:	e02b      	b.n	80131c0 <HAL_UARTEx_EnableFifoMode+0x6e>
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2201      	movs	r2, #1
 801316c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	2224      	movs	r2, #36	; 0x24
 8013174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	681a      	ldr	r2, [r3, #0]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	f022 0201 	bic.w	r2, r2, #1
 801318e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013196:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 801319e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	68fa      	ldr	r2, [r7, #12]
 80131a6:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f000 f8c3 	bl	8013334 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	2220      	movs	r2, #32
 80131b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2200      	movs	r2, #0
 80131ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80131be:	2300      	movs	r3, #0
}
 80131c0:	4618      	mov	r0, r3
 80131c2:	3710      	adds	r7, #16
 80131c4:	46bd      	mov	sp, r7
 80131c6:	bd80      	pop	{r7, pc}

080131c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80131c8:	b480      	push	{r7}
 80131ca:	b085      	sub	sp, #20
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80131d6:	2b01      	cmp	r3, #1
 80131d8:	d101      	bne.n	80131de <HAL_UARTEx_DisableFifoMode+0x16>
 80131da:	2302      	movs	r3, #2
 80131dc:	e027      	b.n	801322e <HAL_UARTEx_DisableFifoMode+0x66>
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2201      	movs	r2, #1
 80131e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	2224      	movs	r2, #36	; 0x24
 80131ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	681a      	ldr	r2, [r3, #0]
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	f022 0201 	bic.w	r2, r2, #1
 8013204:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801320c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2200      	movs	r2, #0
 8013212:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	68fa      	ldr	r2, [r7, #12]
 801321a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2220      	movs	r2, #32
 8013220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	2200      	movs	r2, #0
 8013228:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801322c:	2300      	movs	r3, #0
}
 801322e:	4618      	mov	r0, r3
 8013230:	3714      	adds	r7, #20
 8013232:	46bd      	mov	sp, r7
 8013234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013238:	4770      	bx	lr

0801323a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801323a:	b580      	push	{r7, lr}
 801323c:	b084      	sub	sp, #16
 801323e:	af00      	add	r7, sp, #0
 8013240:	6078      	str	r0, [r7, #4]
 8013242:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801324a:	2b01      	cmp	r3, #1
 801324c:	d101      	bne.n	8013252 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801324e:	2302      	movs	r3, #2
 8013250:	e02d      	b.n	80132ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2201      	movs	r2, #1
 8013256:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	2224      	movs	r2, #36	; 0x24
 801325e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	681a      	ldr	r2, [r3, #0]
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	f022 0201 	bic.w	r2, r2, #1
 8013278:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	689b      	ldr	r3, [r3, #8]
 8013280:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	683a      	ldr	r2, [r7, #0]
 801328a:	430a      	orrs	r2, r1
 801328c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801328e:	6878      	ldr	r0, [r7, #4]
 8013290:	f000 f850 	bl	8013334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	68fa      	ldr	r2, [r7, #12]
 801329a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2220      	movs	r2, #32
 80132a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2200      	movs	r2, #0
 80132a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80132ac:	2300      	movs	r3, #0
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3710      	adds	r7, #16
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}

080132b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80132b6:	b580      	push	{r7, lr}
 80132b8:	b084      	sub	sp, #16
 80132ba:	af00      	add	r7, sp, #0
 80132bc:	6078      	str	r0, [r7, #4]
 80132be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80132c6:	2b01      	cmp	r3, #1
 80132c8:	d101      	bne.n	80132ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80132ca:	2302      	movs	r3, #2
 80132cc:	e02d      	b.n	801332a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	2201      	movs	r2, #1
 80132d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	2224      	movs	r2, #36	; 0x24
 80132da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	681a      	ldr	r2, [r3, #0]
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	f022 0201 	bic.w	r2, r2, #1
 80132f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	689b      	ldr	r3, [r3, #8]
 80132fc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	683a      	ldr	r2, [r7, #0]
 8013306:	430a      	orrs	r2, r1
 8013308:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f000 f812 	bl	8013334 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	68fa      	ldr	r2, [r7, #12]
 8013316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	2220      	movs	r2, #32
 801331c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2200      	movs	r2, #0
 8013324:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013328:	2300      	movs	r3, #0
}
 801332a:	4618      	mov	r0, r3
 801332c:	3710      	adds	r7, #16
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}
	...

08013334 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013334:	b480      	push	{r7}
 8013336:	b085      	sub	sp, #20
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013340:	2b00      	cmp	r3, #0
 8013342:	d108      	bne.n	8013356 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2201      	movs	r2, #1
 8013348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2201      	movs	r2, #1
 8013350:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013354:	e031      	b.n	80133ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013356:	2310      	movs	r3, #16
 8013358:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801335a:	2310      	movs	r3, #16
 801335c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	689b      	ldr	r3, [r3, #8]
 8013364:	0e5b      	lsrs	r3, r3, #25
 8013366:	b2db      	uxtb	r3, r3
 8013368:	f003 0307 	and.w	r3, r3, #7
 801336c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	689b      	ldr	r3, [r3, #8]
 8013374:	0f5b      	lsrs	r3, r3, #29
 8013376:	b2db      	uxtb	r3, r3
 8013378:	f003 0307 	and.w	r3, r3, #7
 801337c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801337e:	7bbb      	ldrb	r3, [r7, #14]
 8013380:	7b3a      	ldrb	r2, [r7, #12]
 8013382:	4911      	ldr	r1, [pc, #68]	; (80133c8 <UARTEx_SetNbDataToProcess+0x94>)
 8013384:	5c8a      	ldrb	r2, [r1, r2]
 8013386:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801338a:	7b3a      	ldrb	r2, [r7, #12]
 801338c:	490f      	ldr	r1, [pc, #60]	; (80133cc <UARTEx_SetNbDataToProcess+0x98>)
 801338e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013390:	fb93 f3f2 	sdiv	r3, r3, r2
 8013394:	b29a      	uxth	r2, r3
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801339c:	7bfb      	ldrb	r3, [r7, #15]
 801339e:	7b7a      	ldrb	r2, [r7, #13]
 80133a0:	4909      	ldr	r1, [pc, #36]	; (80133c8 <UARTEx_SetNbDataToProcess+0x94>)
 80133a2:	5c8a      	ldrb	r2, [r1, r2]
 80133a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80133a8:	7b7a      	ldrb	r2, [r7, #13]
 80133aa:	4908      	ldr	r1, [pc, #32]	; (80133cc <UARTEx_SetNbDataToProcess+0x98>)
 80133ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80133ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80133b2:	b29a      	uxth	r2, r3
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80133ba:	bf00      	nop
 80133bc:	3714      	adds	r7, #20
 80133be:	46bd      	mov	sp, r7
 80133c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c4:	4770      	bx	lr
 80133c6:	bf00      	nop
 80133c8:	08017b98 	.word	0x08017b98
 80133cc:	08017ba0 	.word	0x08017ba0

080133d0 <__NVIC_SetPriority>:
{
 80133d0:	b480      	push	{r7}
 80133d2:	b083      	sub	sp, #12
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	4603      	mov	r3, r0
 80133d8:	6039      	str	r1, [r7, #0]
 80133da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80133dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	db0a      	blt.n	80133fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	b2da      	uxtb	r2, r3
 80133e8:	490c      	ldr	r1, [pc, #48]	; (801341c <__NVIC_SetPriority+0x4c>)
 80133ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80133ee:	0112      	lsls	r2, r2, #4
 80133f0:	b2d2      	uxtb	r2, r2
 80133f2:	440b      	add	r3, r1
 80133f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80133f8:	e00a      	b.n	8013410 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	b2da      	uxtb	r2, r3
 80133fe:	4908      	ldr	r1, [pc, #32]	; (8013420 <__NVIC_SetPriority+0x50>)
 8013400:	88fb      	ldrh	r3, [r7, #6]
 8013402:	f003 030f 	and.w	r3, r3, #15
 8013406:	3b04      	subs	r3, #4
 8013408:	0112      	lsls	r2, r2, #4
 801340a:	b2d2      	uxtb	r2, r2
 801340c:	440b      	add	r3, r1
 801340e:	761a      	strb	r2, [r3, #24]
}
 8013410:	bf00      	nop
 8013412:	370c      	adds	r7, #12
 8013414:	46bd      	mov	sp, r7
 8013416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341a:	4770      	bx	lr
 801341c:	e000e100 	.word	0xe000e100
 8013420:	e000ed00 	.word	0xe000ed00

08013424 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013424:	b580      	push	{r7, lr}
 8013426:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013428:	4b05      	ldr	r3, [pc, #20]	; (8013440 <SysTick_Handler+0x1c>)
 801342a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801342c:	f002 fb92 	bl	8015b54 <xTaskGetSchedulerState>
 8013430:	4603      	mov	r3, r0
 8013432:	2b01      	cmp	r3, #1
 8013434:	d001      	beq.n	801343a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013436:	f003 f9af 	bl	8016798 <xPortSysTickHandler>
  }
}
 801343a:	bf00      	nop
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	e000e010 	.word	0xe000e010

08013444 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013444:	b580      	push	{r7, lr}
 8013446:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8013448:	2100      	movs	r1, #0
 801344a:	f06f 0004 	mvn.w	r0, #4
 801344e:	f7ff ffbf 	bl	80133d0 <__NVIC_SetPriority>
#endif
}
 8013452:	bf00      	nop
 8013454:	bd80      	pop	{r7, pc}
	...

08013458 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013458:	b480      	push	{r7}
 801345a:	b083      	sub	sp, #12
 801345c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801345e:	f3ef 8305 	mrs	r3, IPSR
 8013462:	603b      	str	r3, [r7, #0]
  return(result);
 8013464:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013466:	2b00      	cmp	r3, #0
 8013468:	d003      	beq.n	8013472 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801346a:	f06f 0305 	mvn.w	r3, #5
 801346e:	607b      	str	r3, [r7, #4]
 8013470:	e00c      	b.n	801348c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013472:	4b0a      	ldr	r3, [pc, #40]	; (801349c <osKernelInitialize+0x44>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d105      	bne.n	8013486 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801347a:	4b08      	ldr	r3, [pc, #32]	; (801349c <osKernelInitialize+0x44>)
 801347c:	2201      	movs	r2, #1
 801347e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013480:	2300      	movs	r3, #0
 8013482:	607b      	str	r3, [r7, #4]
 8013484:	e002      	b.n	801348c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8013486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801348a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801348c:	687b      	ldr	r3, [r7, #4]
}
 801348e:	4618      	mov	r0, r3
 8013490:	370c      	adds	r7, #12
 8013492:	46bd      	mov	sp, r7
 8013494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013498:	4770      	bx	lr
 801349a:	bf00      	nop
 801349c:	24000c90 	.word	0x24000c90

080134a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134a6:	f3ef 8305 	mrs	r3, IPSR
 80134aa:	603b      	str	r3, [r7, #0]
  return(result);
 80134ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d003      	beq.n	80134ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80134b2:	f06f 0305 	mvn.w	r3, #5
 80134b6:	607b      	str	r3, [r7, #4]
 80134b8:	e010      	b.n	80134dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80134ba:	4b0b      	ldr	r3, [pc, #44]	; (80134e8 <osKernelStart+0x48>)
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	2b01      	cmp	r3, #1
 80134c0:	d109      	bne.n	80134d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80134c2:	f7ff ffbf 	bl	8013444 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80134c6:	4b08      	ldr	r3, [pc, #32]	; (80134e8 <osKernelStart+0x48>)
 80134c8:	2202      	movs	r2, #2
 80134ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80134cc:	f001 fe54 	bl	8015178 <vTaskStartScheduler>
      stat = osOK;
 80134d0:	2300      	movs	r3, #0
 80134d2:	607b      	str	r3, [r7, #4]
 80134d4:	e002      	b.n	80134dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80134d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80134dc:	687b      	ldr	r3, [r7, #4]
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3708      	adds	r7, #8
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}
 80134e6:	bf00      	nop
 80134e8:	24000c90 	.word	0x24000c90

080134ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b08e      	sub	sp, #56	; 0x38
 80134f0:	af04      	add	r7, sp, #16
 80134f2:	60f8      	str	r0, [r7, #12]
 80134f4:	60b9      	str	r1, [r7, #8]
 80134f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80134f8:	2300      	movs	r3, #0
 80134fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80134fc:	f3ef 8305 	mrs	r3, IPSR
 8013500:	617b      	str	r3, [r7, #20]
  return(result);
 8013502:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013504:	2b00      	cmp	r3, #0
 8013506:	d17e      	bne.n	8013606 <osThreadNew+0x11a>
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d07b      	beq.n	8013606 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801350e:	2380      	movs	r3, #128	; 0x80
 8013510:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013512:	2318      	movs	r3, #24
 8013514:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8013516:	2300      	movs	r3, #0
 8013518:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801351a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801351e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d045      	beq.n	80135b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d002      	beq.n	8013534 <osThreadNew+0x48>
        name = attr->name;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	699b      	ldr	r3, [r3, #24]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d002      	beq.n	8013542 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	699b      	ldr	r3, [r3, #24]
 8013540:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013542:	69fb      	ldr	r3, [r7, #28]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d008      	beq.n	801355a <osThreadNew+0x6e>
 8013548:	69fb      	ldr	r3, [r7, #28]
 801354a:	2b38      	cmp	r3, #56	; 0x38
 801354c:	d805      	bhi.n	801355a <osThreadNew+0x6e>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	685b      	ldr	r3, [r3, #4]
 8013552:	f003 0301 	and.w	r3, r3, #1
 8013556:	2b00      	cmp	r3, #0
 8013558:	d001      	beq.n	801355e <osThreadNew+0x72>
        return (NULL);
 801355a:	2300      	movs	r3, #0
 801355c:	e054      	b.n	8013608 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	695b      	ldr	r3, [r3, #20]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d003      	beq.n	801356e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	695b      	ldr	r3, [r3, #20]
 801356a:	089b      	lsrs	r3, r3, #2
 801356c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	689b      	ldr	r3, [r3, #8]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d00e      	beq.n	8013594 <osThreadNew+0xa8>
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	68db      	ldr	r3, [r3, #12]
 801357a:	2b5b      	cmp	r3, #91	; 0x5b
 801357c:	d90a      	bls.n	8013594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013582:	2b00      	cmp	r3, #0
 8013584:	d006      	beq.n	8013594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	695b      	ldr	r3, [r3, #20]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d002      	beq.n	8013594 <osThreadNew+0xa8>
        mem = 1;
 801358e:	2301      	movs	r3, #1
 8013590:	61bb      	str	r3, [r7, #24]
 8013592:	e010      	b.n	80135b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	689b      	ldr	r3, [r3, #8]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d10c      	bne.n	80135b6 <osThreadNew+0xca>
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	68db      	ldr	r3, [r3, #12]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d108      	bne.n	80135b6 <osThreadNew+0xca>
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	691b      	ldr	r3, [r3, #16]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d104      	bne.n	80135b6 <osThreadNew+0xca>
          mem = 0;
 80135ac:	2300      	movs	r3, #0
 80135ae:	61bb      	str	r3, [r7, #24]
 80135b0:	e001      	b.n	80135b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80135b2:	2300      	movs	r3, #0
 80135b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80135b6:	69bb      	ldr	r3, [r7, #24]
 80135b8:	2b01      	cmp	r3, #1
 80135ba:	d110      	bne.n	80135de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80135c0:	687a      	ldr	r2, [r7, #4]
 80135c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80135c4:	9202      	str	r2, [sp, #8]
 80135c6:	9301      	str	r3, [sp, #4]
 80135c8:	69fb      	ldr	r3, [r7, #28]
 80135ca:	9300      	str	r3, [sp, #0]
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	6a3a      	ldr	r2, [r7, #32]
 80135d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80135d2:	68f8      	ldr	r0, [r7, #12]
 80135d4:	f001 fbfa 	bl	8014dcc <xTaskCreateStatic>
 80135d8:	4603      	mov	r3, r0
 80135da:	613b      	str	r3, [r7, #16]
 80135dc:	e013      	b.n	8013606 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80135de:	69bb      	ldr	r3, [r7, #24]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d110      	bne.n	8013606 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80135e4:	6a3b      	ldr	r3, [r7, #32]
 80135e6:	b29a      	uxth	r2, r3
 80135e8:	f107 0310 	add.w	r3, r7, #16
 80135ec:	9301      	str	r3, [sp, #4]
 80135ee:	69fb      	ldr	r3, [r7, #28]
 80135f0:	9300      	str	r3, [sp, #0]
 80135f2:	68bb      	ldr	r3, [r7, #8]
 80135f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80135f6:	68f8      	ldr	r0, [r7, #12]
 80135f8:	f001 fc45 	bl	8014e86 <xTaskCreate>
 80135fc:	4603      	mov	r3, r0
 80135fe:	2b01      	cmp	r3, #1
 8013600:	d001      	beq.n	8013606 <osThreadNew+0x11a>
            hTask = NULL;
 8013602:	2300      	movs	r3, #0
 8013604:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013606:	693b      	ldr	r3, [r7, #16]
}
 8013608:	4618      	mov	r0, r3
 801360a:	3728      	adds	r7, #40	; 0x28
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}

08013610 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8013610:	b480      	push	{r7}
 8013612:	b083      	sub	sp, #12
 8013614:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013616:	f3ef 8305 	mrs	r3, IPSR
 801361a:	603b      	str	r3, [r7, #0]
  return(result);
 801361c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801361e:	2b00      	cmp	r3, #0
 8013620:	d003      	beq.n	801362a <osThreadYield+0x1a>
    stat = osErrorISR;
 8013622:	f06f 0305 	mvn.w	r3, #5
 8013626:	607b      	str	r3, [r7, #4]
 8013628:	e009      	b.n	801363e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801362a:	2300      	movs	r3, #0
 801362c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801362e:	4b07      	ldr	r3, [pc, #28]	; (801364c <osThreadYield+0x3c>)
 8013630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013634:	601a      	str	r2, [r3, #0]
 8013636:	f3bf 8f4f 	dsb	sy
 801363a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801363e:	687b      	ldr	r3, [r7, #4]
}
 8013640:	4618      	mov	r0, r3
 8013642:	370c      	adds	r7, #12
 8013644:	46bd      	mov	sp, r7
 8013646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364a:	4770      	bx	lr
 801364c:	e000ed04 	.word	0xe000ed04

08013650 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013650:	b580      	push	{r7, lr}
 8013652:	b084      	sub	sp, #16
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013658:	f3ef 8305 	mrs	r3, IPSR
 801365c:	60bb      	str	r3, [r7, #8]
  return(result);
 801365e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013660:	2b00      	cmp	r3, #0
 8013662:	d003      	beq.n	801366c <osDelay+0x1c>
    stat = osErrorISR;
 8013664:	f06f 0305 	mvn.w	r3, #5
 8013668:	60fb      	str	r3, [r7, #12]
 801366a:	e007      	b.n	801367c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801366c:	2300      	movs	r3, #0
 801366e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d002      	beq.n	801367c <osDelay+0x2c>
      vTaskDelay(ticks);
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	f001 fd4a 	bl	8015110 <vTaskDelay>
    }
  }

  return (stat);
 801367c:	68fb      	ldr	r3, [r7, #12]
}
 801367e:	4618      	mov	r0, r3
 8013680:	3710      	adds	r7, #16
 8013682:	46bd      	mov	sp, r7
 8013684:	bd80      	pop	{r7, pc}

08013686 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8013686:	b580      	push	{r7, lr}
 8013688:	b086      	sub	sp, #24
 801368a:	af00      	add	r7, sp, #0
 801368c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 801368e:	2300      	movs	r3, #0
 8013690:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013692:	f3ef 8305 	mrs	r3, IPSR
 8013696:	60fb      	str	r3, [r7, #12]
  return(result);
 8013698:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 801369a:	2b00      	cmp	r3, #0
 801369c:	d12d      	bne.n	80136fa <osEventFlagsNew+0x74>
    mem = -1;
 801369e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136a2:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d015      	beq.n	80136d6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	689b      	ldr	r3, [r3, #8]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d006      	beq.n	80136c0 <osEventFlagsNew+0x3a>
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	68db      	ldr	r3, [r3, #12]
 80136b6:	2b1f      	cmp	r3, #31
 80136b8:	d902      	bls.n	80136c0 <osEventFlagsNew+0x3a>
        mem = 1;
 80136ba:	2301      	movs	r3, #1
 80136bc:	613b      	str	r3, [r7, #16]
 80136be:	e00c      	b.n	80136da <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	689b      	ldr	r3, [r3, #8]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d108      	bne.n	80136da <osEventFlagsNew+0x54>
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	68db      	ldr	r3, [r3, #12]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d104      	bne.n	80136da <osEventFlagsNew+0x54>
          mem = 0;
 80136d0:	2300      	movs	r3, #0
 80136d2:	613b      	str	r3, [r7, #16]
 80136d4:	e001      	b.n	80136da <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80136d6:	2300      	movs	r3, #0
 80136d8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	2b01      	cmp	r3, #1
 80136de:	d106      	bne.n	80136ee <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	689b      	ldr	r3, [r3, #8]
 80136e4:	4618      	mov	r0, r3
 80136e6:	f000 fa6f 	bl	8013bc8 <xEventGroupCreateStatic>
 80136ea:	6178      	str	r0, [r7, #20]
 80136ec:	e005      	b.n	80136fa <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80136ee:	693b      	ldr	r3, [r7, #16]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d102      	bne.n	80136fa <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80136f4:	f000 fa9f 	bl	8013c36 <xEventGroupCreate>
 80136f8:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80136fa:	697b      	ldr	r3, [r7, #20]
}
 80136fc:	4618      	mov	r0, r3
 80136fe:	3718      	adds	r7, #24
 8013700:	46bd      	mov	sp, r7
 8013702:	bd80      	pop	{r7, pc}

08013704 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8013704:	b580      	push	{r7, lr}
 8013706:	b086      	sub	sp, #24
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
 801370c:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013712:	693b      	ldr	r3, [r7, #16]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d004      	beq.n	8013722 <osEventFlagsSet+0x1e>
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801371e:	2b00      	cmp	r3, #0
 8013720:	d003      	beq.n	801372a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8013722:	f06f 0303 	mvn.w	r3, #3
 8013726:	617b      	str	r3, [r7, #20]
 8013728:	e028      	b.n	801377c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801372a:	f3ef 8305 	mrs	r3, IPSR
 801372e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013730:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013732:	2b00      	cmp	r3, #0
 8013734:	d01d      	beq.n	8013772 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8013736:	2300      	movs	r3, #0
 8013738:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 801373a:	f107 0308 	add.w	r3, r7, #8
 801373e:	461a      	mov	r2, r3
 8013740:	6839      	ldr	r1, [r7, #0]
 8013742:	6938      	ldr	r0, [r7, #16]
 8013744:	f000 fc98 	bl	8014078 <xEventGroupSetBitsFromISR>
 8013748:	4603      	mov	r3, r0
 801374a:	2b00      	cmp	r3, #0
 801374c:	d103      	bne.n	8013756 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801374e:	f06f 0302 	mvn.w	r3, #2
 8013752:	617b      	str	r3, [r7, #20]
 8013754:	e012      	b.n	801377c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d00d      	beq.n	801377c <osEventFlagsSet+0x78>
 8013760:	4b09      	ldr	r3, [pc, #36]	; (8013788 <osEventFlagsSet+0x84>)
 8013762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013766:	601a      	str	r2, [r3, #0]
 8013768:	f3bf 8f4f 	dsb	sy
 801376c:	f3bf 8f6f 	isb	sy
 8013770:	e004      	b.n	801377c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8013772:	6839      	ldr	r1, [r7, #0]
 8013774:	6938      	ldr	r0, [r7, #16]
 8013776:	f000 fbb7 	bl	8013ee8 <xEventGroupSetBits>
 801377a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 801377c:	697b      	ldr	r3, [r7, #20]
}
 801377e:	4618      	mov	r0, r3
 8013780:	3718      	adds	r7, #24
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}
 8013786:	bf00      	nop
 8013788:	e000ed04 	.word	0xe000ed04

0801378c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 801378c:	b580      	push	{r7, lr}
 801378e:	b086      	sub	sp, #24
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
 8013794:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d004      	beq.n	80137aa <osEventFlagsClear+0x1e>
 80137a0:	683b      	ldr	r3, [r7, #0]
 80137a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d003      	beq.n	80137b2 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80137aa:	f06f 0303 	mvn.w	r3, #3
 80137ae:	617b      	str	r3, [r7, #20]
 80137b0:	e019      	b.n	80137e6 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80137b2:	f3ef 8305 	mrs	r3, IPSR
 80137b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80137b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d00e      	beq.n	80137dc <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80137be:	6938      	ldr	r0, [r7, #16]
 80137c0:	f000 fb6e 	bl	8013ea0 <xEventGroupGetBitsFromISR>
 80137c4:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80137c6:	6839      	ldr	r1, [r7, #0]
 80137c8:	6938      	ldr	r0, [r7, #16]
 80137ca:	f000 fb55 	bl	8013e78 <xEventGroupClearBitsFromISR>
 80137ce:	4603      	mov	r3, r0
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d108      	bne.n	80137e6 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80137d4:	f06f 0302 	mvn.w	r3, #2
 80137d8:	617b      	str	r3, [r7, #20]
 80137da:	e004      	b.n	80137e6 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80137dc:	6839      	ldr	r1, [r7, #0]
 80137de:	6938      	ldr	r0, [r7, #16]
 80137e0:	f000 fb12 	bl	8013e08 <xEventGroupClearBits>
 80137e4:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80137e6:	697b      	ldr	r3, [r7, #20]
}
 80137e8:	4618      	mov	r0, r3
 80137ea:	3718      	adds	r7, #24
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}

080137f0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b08c      	sub	sp, #48	; 0x30
 80137f4:	af02      	add	r7, sp, #8
 80137f6:	60f8      	str	r0, [r7, #12]
 80137f8:	60b9      	str	r1, [r7, #8]
 80137fa:	607a      	str	r2, [r7, #4]
 80137fc:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8013802:	69bb      	ldr	r3, [r7, #24]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d004      	beq.n	8013812 <osEventFlagsWait+0x22>
 8013808:	68bb      	ldr	r3, [r7, #8]
 801380a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801380e:	2b00      	cmp	r3, #0
 8013810:	d003      	beq.n	801381a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8013812:	f06f 0303 	mvn.w	r3, #3
 8013816:	61fb      	str	r3, [r7, #28]
 8013818:	e04b      	b.n	80138b2 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801381a:	f3ef 8305 	mrs	r3, IPSR
 801381e:	617b      	str	r3, [r7, #20]
  return(result);
 8013820:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8013822:	2b00      	cmp	r3, #0
 8013824:	d003      	beq.n	801382e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8013826:	f06f 0305 	mvn.w	r3, #5
 801382a:	61fb      	str	r3, [r7, #28]
 801382c:	e041      	b.n	80138b2 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	f003 0301 	and.w	r3, r3, #1
 8013834:	2b00      	cmp	r3, #0
 8013836:	d002      	beq.n	801383e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8013838:	2301      	movs	r3, #1
 801383a:	627b      	str	r3, [r7, #36]	; 0x24
 801383c:	e001      	b.n	8013842 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 801383e:	2300      	movs	r3, #0
 8013840:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	f003 0302 	and.w	r3, r3, #2
 8013848:	2b00      	cmp	r3, #0
 801384a:	d002      	beq.n	8013852 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 801384c:	2300      	movs	r3, #0
 801384e:	623b      	str	r3, [r7, #32]
 8013850:	e001      	b.n	8013856 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8013852:	2301      	movs	r3, #1
 8013854:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	9300      	str	r3, [sp, #0]
 801385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385c:	6a3a      	ldr	r2, [r7, #32]
 801385e:	68b9      	ldr	r1, [r7, #8]
 8013860:	69b8      	ldr	r0, [r7, #24]
 8013862:	f000 fa03 	bl	8013c6c <xEventGroupWaitBits>
 8013866:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	f003 0301 	and.w	r3, r3, #1
 801386e:	2b00      	cmp	r3, #0
 8013870:	d010      	beq.n	8013894 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8013872:	68ba      	ldr	r2, [r7, #8]
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	4013      	ands	r3, r2
 8013878:	68ba      	ldr	r2, [r7, #8]
 801387a:	429a      	cmp	r2, r3
 801387c:	d019      	beq.n	80138b2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801387e:	683b      	ldr	r3, [r7, #0]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d003      	beq.n	801388c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8013884:	f06f 0301 	mvn.w	r3, #1
 8013888:	61fb      	str	r3, [r7, #28]
 801388a:	e012      	b.n	80138b2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 801388c:	f06f 0302 	mvn.w	r3, #2
 8013890:	61fb      	str	r3, [r7, #28]
 8013892:	e00e      	b.n	80138b2 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8013894:	68ba      	ldr	r2, [r7, #8]
 8013896:	69fb      	ldr	r3, [r7, #28]
 8013898:	4013      	ands	r3, r2
 801389a:	2b00      	cmp	r3, #0
 801389c:	d109      	bne.n	80138b2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d003      	beq.n	80138ac <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80138a4:	f06f 0301 	mvn.w	r3, #1
 80138a8:	61fb      	str	r3, [r7, #28]
 80138aa:	e002      	b.n	80138b2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80138ac:	f06f 0302 	mvn.w	r3, #2
 80138b0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80138b2:	69fb      	ldr	r3, [r7, #28]
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	3728      	adds	r7, #40	; 0x28
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}

080138bc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80138bc:	b580      	push	{r7, lr}
 80138be:	b08a      	sub	sp, #40	; 0x28
 80138c0:	af02      	add	r7, sp, #8
 80138c2:	60f8      	str	r0, [r7, #12]
 80138c4:	60b9      	str	r1, [r7, #8]
 80138c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80138c8:	2300      	movs	r3, #0
 80138ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80138cc:	f3ef 8305 	mrs	r3, IPSR
 80138d0:	613b      	str	r3, [r7, #16]
  return(result);
 80138d2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d15f      	bne.n	8013998 <osMessageQueueNew+0xdc>
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d05c      	beq.n	8013998 <osMessageQueueNew+0xdc>
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d059      	beq.n	8013998 <osMessageQueueNew+0xdc>
    mem = -1;
 80138e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80138e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d029      	beq.n	8013944 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	689b      	ldr	r3, [r3, #8]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d012      	beq.n	801391e <osMessageQueueNew+0x62>
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	68db      	ldr	r3, [r3, #12]
 80138fc:	2b4f      	cmp	r3, #79	; 0x4f
 80138fe:	d90e      	bls.n	801391e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013904:	2b00      	cmp	r3, #0
 8013906:	d00a      	beq.n	801391e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	695a      	ldr	r2, [r3, #20]
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	68b9      	ldr	r1, [r7, #8]
 8013910:	fb01 f303 	mul.w	r3, r1, r3
 8013914:	429a      	cmp	r2, r3
 8013916:	d302      	bcc.n	801391e <osMessageQueueNew+0x62>
        mem = 1;
 8013918:	2301      	movs	r3, #1
 801391a:	61bb      	str	r3, [r7, #24]
 801391c:	e014      	b.n	8013948 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	689b      	ldr	r3, [r3, #8]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d110      	bne.n	8013948 <osMessageQueueNew+0x8c>
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	68db      	ldr	r3, [r3, #12]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d10c      	bne.n	8013948 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013932:	2b00      	cmp	r3, #0
 8013934:	d108      	bne.n	8013948 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	695b      	ldr	r3, [r3, #20]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d104      	bne.n	8013948 <osMessageQueueNew+0x8c>
          mem = 0;
 801393e:	2300      	movs	r3, #0
 8013940:	61bb      	str	r3, [r7, #24]
 8013942:	e001      	b.n	8013948 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8013944:	2300      	movs	r3, #0
 8013946:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013948:	69bb      	ldr	r3, [r7, #24]
 801394a:	2b01      	cmp	r3, #1
 801394c:	d10b      	bne.n	8013966 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	691a      	ldr	r2, [r3, #16]
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	689b      	ldr	r3, [r3, #8]
 8013956:	2100      	movs	r1, #0
 8013958:	9100      	str	r1, [sp, #0]
 801395a:	68b9      	ldr	r1, [r7, #8]
 801395c:	68f8      	ldr	r0, [r7, #12]
 801395e:	f000 fcbb 	bl	80142d8 <xQueueGenericCreateStatic>
 8013962:	61f8      	str	r0, [r7, #28]
 8013964:	e008      	b.n	8013978 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8013966:	69bb      	ldr	r3, [r7, #24]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d105      	bne.n	8013978 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801396c:	2200      	movs	r2, #0
 801396e:	68b9      	ldr	r1, [r7, #8]
 8013970:	68f8      	ldr	r0, [r7, #12]
 8013972:	f000 fd29 	bl	80143c8 <xQueueGenericCreate>
 8013976:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d00c      	beq.n	8013998 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d003      	beq.n	801398c <osMessageQueueNew+0xd0>
        name = attr->name;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	617b      	str	r3, [r7, #20]
 801398a:	e001      	b.n	8013990 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801398c:	2300      	movs	r3, #0
 801398e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8013990:	6979      	ldr	r1, [r7, #20]
 8013992:	69f8      	ldr	r0, [r7, #28]
 8013994:	f001 f9bc 	bl	8014d10 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013998:	69fb      	ldr	r3, [r7, #28]
}
 801399a:	4618      	mov	r0, r3
 801399c:	3720      	adds	r7, #32
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}
	...

080139a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b088      	sub	sp, #32
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	60f8      	str	r0, [r7, #12]
 80139ac:	60b9      	str	r1, [r7, #8]
 80139ae:	603b      	str	r3, [r7, #0]
 80139b0:	4613      	mov	r3, r2
 80139b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80139b8:	2300      	movs	r3, #0
 80139ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80139bc:	f3ef 8305 	mrs	r3, IPSR
 80139c0:	617b      	str	r3, [r7, #20]
  return(result);
 80139c2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d028      	beq.n	8013a1a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80139c8:	69bb      	ldr	r3, [r7, #24]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d005      	beq.n	80139da <osMessageQueuePut+0x36>
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d002      	beq.n	80139da <osMessageQueuePut+0x36>
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d003      	beq.n	80139e2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80139da:	f06f 0303 	mvn.w	r3, #3
 80139de:	61fb      	str	r3, [r7, #28]
 80139e0:	e038      	b.n	8013a54 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80139e2:	2300      	movs	r3, #0
 80139e4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80139e6:	f107 0210 	add.w	r2, r7, #16
 80139ea:	2300      	movs	r3, #0
 80139ec:	68b9      	ldr	r1, [r7, #8]
 80139ee:	69b8      	ldr	r0, [r7, #24]
 80139f0:	f000 fe46 	bl	8014680 <xQueueGenericSendFromISR>
 80139f4:	4603      	mov	r3, r0
 80139f6:	2b01      	cmp	r3, #1
 80139f8:	d003      	beq.n	8013a02 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80139fa:	f06f 0302 	mvn.w	r3, #2
 80139fe:	61fb      	str	r3, [r7, #28]
 8013a00:	e028      	b.n	8013a54 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d025      	beq.n	8013a54 <osMessageQueuePut+0xb0>
 8013a08:	4b15      	ldr	r3, [pc, #84]	; (8013a60 <osMessageQueuePut+0xbc>)
 8013a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a0e:	601a      	str	r2, [r3, #0]
 8013a10:	f3bf 8f4f 	dsb	sy
 8013a14:	f3bf 8f6f 	isb	sy
 8013a18:	e01c      	b.n	8013a54 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013a1a:	69bb      	ldr	r3, [r7, #24]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d002      	beq.n	8013a26 <osMessageQueuePut+0x82>
 8013a20:	68bb      	ldr	r3, [r7, #8]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d103      	bne.n	8013a2e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8013a26:	f06f 0303 	mvn.w	r3, #3
 8013a2a:	61fb      	str	r3, [r7, #28]
 8013a2c:	e012      	b.n	8013a54 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013a2e:	2300      	movs	r3, #0
 8013a30:	683a      	ldr	r2, [r7, #0]
 8013a32:	68b9      	ldr	r1, [r7, #8]
 8013a34:	69b8      	ldr	r0, [r7, #24]
 8013a36:	f000 fd25 	bl	8014484 <xQueueGenericSend>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	2b01      	cmp	r3, #1
 8013a3e:	d009      	beq.n	8013a54 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d003      	beq.n	8013a4e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8013a46:	f06f 0301 	mvn.w	r3, #1
 8013a4a:	61fb      	str	r3, [r7, #28]
 8013a4c:	e002      	b.n	8013a54 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8013a4e:	f06f 0302 	mvn.w	r3, #2
 8013a52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013a54:	69fb      	ldr	r3, [r7, #28]
}
 8013a56:	4618      	mov	r0, r3
 8013a58:	3720      	adds	r7, #32
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}
 8013a5e:	bf00      	nop
 8013a60:	e000ed04 	.word	0xe000ed04

08013a64 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b088      	sub	sp, #32
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	60f8      	str	r0, [r7, #12]
 8013a6c:	60b9      	str	r1, [r7, #8]
 8013a6e:	607a      	str	r2, [r7, #4]
 8013a70:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013a76:	2300      	movs	r3, #0
 8013a78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013a7a:	f3ef 8305 	mrs	r3, IPSR
 8013a7e:	617b      	str	r3, [r7, #20]
  return(result);
 8013a80:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d028      	beq.n	8013ad8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013a86:	69bb      	ldr	r3, [r7, #24]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d005      	beq.n	8013a98 <osMessageQueueGet+0x34>
 8013a8c:	68bb      	ldr	r3, [r7, #8]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d002      	beq.n	8013a98 <osMessageQueueGet+0x34>
 8013a92:	683b      	ldr	r3, [r7, #0]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d003      	beq.n	8013aa0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8013a98:	f06f 0303 	mvn.w	r3, #3
 8013a9c:	61fb      	str	r3, [r7, #28]
 8013a9e:	e037      	b.n	8013b10 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013aa4:	f107 0310 	add.w	r3, r7, #16
 8013aa8:	461a      	mov	r2, r3
 8013aaa:	68b9      	ldr	r1, [r7, #8]
 8013aac:	69b8      	ldr	r0, [r7, #24]
 8013aae:	f000 ff63 	bl	8014978 <xQueueReceiveFromISR>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	2b01      	cmp	r3, #1
 8013ab6:	d003      	beq.n	8013ac0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013ab8:	f06f 0302 	mvn.w	r3, #2
 8013abc:	61fb      	str	r3, [r7, #28]
 8013abe:	e027      	b.n	8013b10 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013ac0:	693b      	ldr	r3, [r7, #16]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d024      	beq.n	8013b10 <osMessageQueueGet+0xac>
 8013ac6:	4b15      	ldr	r3, [pc, #84]	; (8013b1c <osMessageQueueGet+0xb8>)
 8013ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013acc:	601a      	str	r2, [r3, #0]
 8013ace:	f3bf 8f4f 	dsb	sy
 8013ad2:	f3bf 8f6f 	isb	sy
 8013ad6:	e01b      	b.n	8013b10 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013ad8:	69bb      	ldr	r3, [r7, #24]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d002      	beq.n	8013ae4 <osMessageQueueGet+0x80>
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d103      	bne.n	8013aec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8013ae4:	f06f 0303 	mvn.w	r3, #3
 8013ae8:	61fb      	str	r3, [r7, #28]
 8013aea:	e011      	b.n	8013b10 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013aec:	683a      	ldr	r2, [r7, #0]
 8013aee:	68b9      	ldr	r1, [r7, #8]
 8013af0:	69b8      	ldr	r0, [r7, #24]
 8013af2:	f000 fe61 	bl	80147b8 <xQueueReceive>
 8013af6:	4603      	mov	r3, r0
 8013af8:	2b01      	cmp	r3, #1
 8013afa:	d009      	beq.n	8013b10 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d003      	beq.n	8013b0a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8013b02:	f06f 0301 	mvn.w	r3, #1
 8013b06:	61fb      	str	r3, [r7, #28]
 8013b08:	e002      	b.n	8013b10 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8013b0a:	f06f 0302 	mvn.w	r3, #2
 8013b0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013b10:	69fb      	ldr	r3, [r7, #28]
}
 8013b12:	4618      	mov	r0, r3
 8013b14:	3720      	adds	r7, #32
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bd80      	pop	{r7, pc}
 8013b1a:	bf00      	nop
 8013b1c:	e000ed04 	.word	0xe000ed04

08013b20 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b086      	sub	sp, #24
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8013b2c:	693b      	ldr	r3, [r7, #16]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d102      	bne.n	8013b38 <osMessageQueueGetCount+0x18>
    count = 0U;
 8013b32:	2300      	movs	r3, #0
 8013b34:	617b      	str	r3, [r7, #20]
 8013b36:	e00e      	b.n	8013b56 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b38:	f3ef 8305 	mrs	r3, IPSR
 8013b3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8013b3e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d004      	beq.n	8013b4e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8013b44:	6938      	ldr	r0, [r7, #16]
 8013b46:	f000 ffb5 	bl	8014ab4 <uxQueueMessagesWaitingFromISR>
 8013b4a:	6178      	str	r0, [r7, #20]
 8013b4c:	e003      	b.n	8013b56 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8013b4e:	6938      	ldr	r0, [r7, #16]
 8013b50:	f000 ff92 	bl	8014a78 <uxQueueMessagesWaiting>
 8013b54:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8013b56:	697b      	ldr	r3, [r7, #20]
}
 8013b58:	4618      	mov	r0, r3
 8013b5a:	3718      	adds	r7, #24
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	bd80      	pop	{r7, pc}

08013b60 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013b60:	b480      	push	{r7}
 8013b62:	b085      	sub	sp, #20
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	60f8      	str	r0, [r7, #12]
 8013b68:	60b9      	str	r1, [r7, #8]
 8013b6a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	4a07      	ldr	r2, [pc, #28]	; (8013b8c <vApplicationGetIdleTaskMemory+0x2c>)
 8013b70:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013b72:	68bb      	ldr	r3, [r7, #8]
 8013b74:	4a06      	ldr	r2, [pc, #24]	; (8013b90 <vApplicationGetIdleTaskMemory+0x30>)
 8013b76:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	2280      	movs	r2, #128	; 0x80
 8013b7c:	601a      	str	r2, [r3, #0]
}
 8013b7e:	bf00      	nop
 8013b80:	3714      	adds	r7, #20
 8013b82:	46bd      	mov	sp, r7
 8013b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b88:	4770      	bx	lr
 8013b8a:	bf00      	nop
 8013b8c:	24000c94 	.word	0x24000c94
 8013b90:	24000cf0 	.word	0x24000cf0

08013b94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013b94:	b480      	push	{r7}
 8013b96:	b085      	sub	sp, #20
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	60f8      	str	r0, [r7, #12]
 8013b9c:	60b9      	str	r1, [r7, #8]
 8013b9e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	4a07      	ldr	r2, [pc, #28]	; (8013bc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8013ba4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	4a06      	ldr	r2, [pc, #24]	; (8013bc4 <vApplicationGetTimerTaskMemory+0x30>)
 8013baa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013bb2:	601a      	str	r2, [r3, #0]
}
 8013bb4:	bf00      	nop
 8013bb6:	3714      	adds	r7, #20
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bbe:	4770      	bx	lr
 8013bc0:	24000ef0 	.word	0x24000ef0
 8013bc4:	24000f4c 	.word	0x24000f4c

08013bc8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b086      	sub	sp, #24
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d10a      	bne.n	8013bec <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bda:	f383 8811 	msr	BASEPRI, r3
 8013bde:	f3bf 8f6f 	isb	sy
 8013be2:	f3bf 8f4f 	dsb	sy
 8013be6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013be8:	bf00      	nop
 8013bea:	e7fe      	b.n	8013bea <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8013bec:	2320      	movs	r3, #32
 8013bee:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	2b20      	cmp	r3, #32
 8013bf4:	d00a      	beq.n	8013c0c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8013bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bfa:	f383 8811 	msr	BASEPRI, r3
 8013bfe:	f3bf 8f6f 	isb	sy
 8013c02:	f3bf 8f4f 	dsb	sy
 8013c06:	60fb      	str	r3, [r7, #12]
}
 8013c08:	bf00      	nop
 8013c0a:	e7fe      	b.n	8013c0a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d00a      	beq.n	8013c2c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8013c16:	697b      	ldr	r3, [r7, #20]
 8013c18:	2200      	movs	r2, #0
 8013c1a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013c1c:	697b      	ldr	r3, [r7, #20]
 8013c1e:	3304      	adds	r3, #4
 8013c20:	4618      	mov	r0, r3
 8013c22:	f000 fa3d 	bl	80140a0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	2201      	movs	r2, #1
 8013c2a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8013c2c:	697b      	ldr	r3, [r7, #20]
	}
 8013c2e:	4618      	mov	r0, r3
 8013c30:	3718      	adds	r7, #24
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}

08013c36 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8013c36:	b580      	push	{r7, lr}
 8013c38:	b082      	sub	sp, #8
 8013c3a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013c3c:	2020      	movs	r0, #32
 8013c3e:	f002 fe3b 	bl	80168b8 <pvPortMalloc>
 8013c42:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d00a      	beq.n	8013c60 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	3304      	adds	r3, #4
 8013c54:	4618      	mov	r0, r3
 8013c56:	f000 fa23 	bl	80140a0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013c60:	687b      	ldr	r3, [r7, #4]
	}
 8013c62:	4618      	mov	r0, r3
 8013c64:	3708      	adds	r7, #8
 8013c66:	46bd      	mov	sp, r7
 8013c68:	bd80      	pop	{r7, pc}
	...

08013c6c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b090      	sub	sp, #64	; 0x40
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	60f8      	str	r0, [r7, #12]
 8013c74:	60b9      	str	r1, [r7, #8]
 8013c76:	607a      	str	r2, [r7, #4]
 8013c78:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8013c7e:	2300      	movs	r3, #0
 8013c80:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8013c82:	2300      	movs	r3, #0
 8013c84:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d10a      	bne.n	8013ca2 <xEventGroupWaitBits+0x36>
	__asm volatile
 8013c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c90:	f383 8811 	msr	BASEPRI, r3
 8013c94:	f3bf 8f6f 	isb	sy
 8013c98:	f3bf 8f4f 	dsb	sy
 8013c9c:	623b      	str	r3, [r7, #32]
}
 8013c9e:	bf00      	nop
 8013ca0:	e7fe      	b.n	8013ca0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d00a      	beq.n	8013cc2 <xEventGroupWaitBits+0x56>
	__asm volatile
 8013cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cb0:	f383 8811 	msr	BASEPRI, r3
 8013cb4:	f3bf 8f6f 	isb	sy
 8013cb8:	f3bf 8f4f 	dsb	sy
 8013cbc:	61fb      	str	r3, [r7, #28]
}
 8013cbe:	bf00      	nop
 8013cc0:	e7fe      	b.n	8013cc0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d10a      	bne.n	8013cde <xEventGroupWaitBits+0x72>
	__asm volatile
 8013cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ccc:	f383 8811 	msr	BASEPRI, r3
 8013cd0:	f3bf 8f6f 	isb	sy
 8013cd4:	f3bf 8f4f 	dsb	sy
 8013cd8:	61bb      	str	r3, [r7, #24]
}
 8013cda:	bf00      	nop
 8013cdc:	e7fe      	b.n	8013cdc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013cde:	f001 ff39 	bl	8015b54 <xTaskGetSchedulerState>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d102      	bne.n	8013cee <xEventGroupWaitBits+0x82>
 8013ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d101      	bne.n	8013cf2 <xEventGroupWaitBits+0x86>
 8013cee:	2301      	movs	r3, #1
 8013cf0:	e000      	b.n	8013cf4 <xEventGroupWaitBits+0x88>
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d10a      	bne.n	8013d0e <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cfc:	f383 8811 	msr	BASEPRI, r3
 8013d00:	f3bf 8f6f 	isb	sy
 8013d04:	f3bf 8f4f 	dsb	sy
 8013d08:	617b      	str	r3, [r7, #20]
}
 8013d0a:	bf00      	nop
 8013d0c:	e7fe      	b.n	8013d0c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013d0e:	f001 fa99 	bl	8015244 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8013d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013d18:	683a      	ldr	r2, [r7, #0]
 8013d1a:	68b9      	ldr	r1, [r7, #8]
 8013d1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013d1e:	f000 f988 	bl	8014032 <prvTestWaitCondition>
 8013d22:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8013d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d00e      	beq.n	8013d48 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d028      	beq.n	8013d8a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d3a:	681a      	ldr	r2, [r3, #0]
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	43db      	mvns	r3, r3
 8013d40:	401a      	ands	r2, r3
 8013d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d44:	601a      	str	r2, [r3, #0]
 8013d46:	e020      	b.n	8013d8a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d104      	bne.n	8013d58 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d50:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8013d52:	2301      	movs	r3, #1
 8013d54:	633b      	str	r3, [r7, #48]	; 0x30
 8013d56:	e018      	b.n	8013d8a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d003      	beq.n	8013d66 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013d64:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8013d66:	683b      	ldr	r3, [r7, #0]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d003      	beq.n	8013d74 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013d72:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8013d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d76:	1d18      	adds	r0, r3, #4
 8013d78:	68ba      	ldr	r2, [r7, #8]
 8013d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d7c:	4313      	orrs	r3, r2
 8013d7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d80:	4619      	mov	r1, r3
 8013d82:	f001 fc5f 	bl	8015644 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8013d86:	2300      	movs	r3, #0
 8013d88:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013d8a:	f001 fa69 	bl	8015260 <xTaskResumeAll>
 8013d8e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d031      	beq.n	8013dfa <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8013d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d107      	bne.n	8013dac <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013d9c:	4b19      	ldr	r3, [pc, #100]	; (8013e04 <xEventGroupWaitBits+0x198>)
 8013d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013da2:	601a      	str	r2, [r3, #0]
 8013da4:	f3bf 8f4f 	dsb	sy
 8013da8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8013dac:	f001 ff5e 	bl	8015c6c <uxTaskResetEventItemValue>
 8013db0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8013db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d11a      	bne.n	8013df2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013dbc:	f002 fc5a 	bl	8016674 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8013dc6:	683a      	ldr	r2, [r7, #0]
 8013dc8:	68b9      	ldr	r1, [r7, #8]
 8013dca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013dcc:	f000 f931 	bl	8014032 <prvTestWaitCondition>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d009      	beq.n	8013dea <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d006      	beq.n	8013dea <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dde:	681a      	ldr	r2, [r3, #0]
 8013de0:	68bb      	ldr	r3, [r7, #8]
 8013de2:	43db      	mvns	r3, r3
 8013de4:	401a      	ands	r2, r3
 8013de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013de8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013dea:	2301      	movs	r3, #1
 8013dec:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013dee:	f002 fc71 	bl	80166d4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013df4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013df8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	3740      	adds	r7, #64	; 0x40
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}
 8013e04:	e000ed04 	.word	0xe000ed04

08013e08 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b086      	sub	sp, #24
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
 8013e10:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d10a      	bne.n	8013e32 <xEventGroupClearBits+0x2a>
	__asm volatile
 8013e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e20:	f383 8811 	msr	BASEPRI, r3
 8013e24:	f3bf 8f6f 	isb	sy
 8013e28:	f3bf 8f4f 	dsb	sy
 8013e2c:	60fb      	str	r3, [r7, #12]
}
 8013e2e:	bf00      	nop
 8013e30:	e7fe      	b.n	8013e30 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d00a      	beq.n	8013e52 <xEventGroupClearBits+0x4a>
	__asm volatile
 8013e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e40:	f383 8811 	msr	BASEPRI, r3
 8013e44:	f3bf 8f6f 	isb	sy
 8013e48:	f3bf 8f4f 	dsb	sy
 8013e4c:	60bb      	str	r3, [r7, #8]
}
 8013e4e:	bf00      	nop
 8013e50:	e7fe      	b.n	8013e50 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8013e52:	f002 fc0f 	bl	8016674 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8013e56:	697b      	ldr	r3, [r7, #20]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013e5c:	697b      	ldr	r3, [r7, #20]
 8013e5e:	681a      	ldr	r2, [r3, #0]
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	43db      	mvns	r3, r3
 8013e64:	401a      	ands	r2, r3
 8013e66:	697b      	ldr	r3, [r7, #20]
 8013e68:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8013e6a:	f002 fc33 	bl	80166d4 <vPortExitCritical>

	return uxReturn;
 8013e6e:	693b      	ldr	r3, [r7, #16]
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	3718      	adds	r7, #24
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd80      	pop	{r7, pc}

08013e78 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b084      	sub	sp, #16
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013e82:	2300      	movs	r3, #0
 8013e84:	683a      	ldr	r2, [r7, #0]
 8013e86:	6879      	ldr	r1, [r7, #4]
 8013e88:	4804      	ldr	r0, [pc, #16]	; (8013e9c <xEventGroupClearBitsFromISR+0x24>)
 8013e8a:	f002 faa9 	bl	80163e0 <xTimerPendFunctionCallFromISR>
 8013e8e:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8013e90:	68fb      	ldr	r3, [r7, #12]
	}
 8013e92:	4618      	mov	r0, r3
 8013e94:	3710      	adds	r7, #16
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}
 8013e9a:	bf00      	nop
 8013e9c:	08014019 	.word	0x08014019

08013ea0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	b089      	sub	sp, #36	; 0x24
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013eac:	f3ef 8211 	mrs	r2, BASEPRI
 8013eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eb4:	f383 8811 	msr	BASEPRI, r3
 8013eb8:	f3bf 8f6f 	isb	sy
 8013ebc:	f3bf 8f4f 	dsb	sy
 8013ec0:	60fa      	str	r2, [r7, #12]
 8013ec2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013ec4:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013ec6:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8013ec8:	69fb      	ldr	r3, [r7, #28]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	617b      	str	r3, [r7, #20]
 8013ece:	69bb      	ldr	r3, [r7, #24]
 8013ed0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013ed8:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8013eda:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8013edc:	4618      	mov	r0, r3
 8013ede:	3724      	adds	r7, #36	; 0x24
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee6:	4770      	bx	lr

08013ee8 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b08e      	sub	sp, #56	; 0x38
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
 8013ef0:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013efa:	2300      	movs	r3, #0
 8013efc:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d10a      	bne.n	8013f1a <xEventGroupSetBits+0x32>
	__asm volatile
 8013f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f08:	f383 8811 	msr	BASEPRI, r3
 8013f0c:	f3bf 8f6f 	isb	sy
 8013f10:	f3bf 8f4f 	dsb	sy
 8013f14:	613b      	str	r3, [r7, #16]
}
 8013f16:	bf00      	nop
 8013f18:	e7fe      	b.n	8013f18 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d00a      	beq.n	8013f3a <xEventGroupSetBits+0x52>
	__asm volatile
 8013f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f28:	f383 8811 	msr	BASEPRI, r3
 8013f2c:	f3bf 8f6f 	isb	sy
 8013f30:	f3bf 8f4f 	dsb	sy
 8013f34:	60fb      	str	r3, [r7, #12]
}
 8013f36:	bf00      	nop
 8013f38:	e7fe      	b.n	8013f38 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f3c:	3304      	adds	r3, #4
 8013f3e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f42:	3308      	adds	r3, #8
 8013f44:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8013f46:	f001 f97d 	bl	8015244 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4c:	68db      	ldr	r3, [r3, #12]
 8013f4e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f52:	681a      	ldr	r2, [r3, #0]
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	431a      	orrs	r2, r3
 8013f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f5a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013f5c:	e03c      	b.n	8013fd8 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f60:	685b      	ldr	r3, [r3, #4]
 8013f62:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8013f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013f6e:	69bb      	ldr	r3, [r7, #24]
 8013f70:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013f74:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8013f76:	69bb      	ldr	r3, [r7, #24]
 8013f78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013f7c:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013f7e:	697b      	ldr	r3, [r7, #20]
 8013f80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d108      	bne.n	8013f9a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8013f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f8a:	681a      	ldr	r2, [r3, #0]
 8013f8c:	69bb      	ldr	r3, [r7, #24]
 8013f8e:	4013      	ands	r3, r2
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d00b      	beq.n	8013fac <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8013f94:	2301      	movs	r3, #1
 8013f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f98:	e008      	b.n	8013fac <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f9c:	681a      	ldr	r2, [r3, #0]
 8013f9e:	69bb      	ldr	r3, [r7, #24]
 8013fa0:	4013      	ands	r3, r2
 8013fa2:	69ba      	ldr	r2, [r7, #24]
 8013fa4:	429a      	cmp	r2, r3
 8013fa6:	d101      	bne.n	8013fac <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013fa8:	2301      	movs	r3, #1
 8013faa:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d010      	beq.n	8013fd4 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8013fb2:	697b      	ldr	r3, [r7, #20]
 8013fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d003      	beq.n	8013fc4 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fbe:	69bb      	ldr	r3, [r7, #24]
 8013fc0:	4313      	orrs	r3, r2
 8013fc2:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8013fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013fcc:	4619      	mov	r1, r3
 8013fce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013fd0:	f001 fc04 	bl	80157dc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8013fd4:	69fb      	ldr	r3, [r7, #28]
 8013fd6:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fda:	6a3b      	ldr	r3, [r7, #32]
 8013fdc:	429a      	cmp	r2, r3
 8013fde:	d1be      	bne.n	8013f5e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe2:	681a      	ldr	r2, [r3, #0]
 8013fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe6:	43db      	mvns	r3, r3
 8013fe8:	401a      	ands	r2, r3
 8013fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fec:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013fee:	f001 f937 	bl	8015260 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8013ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff4:	681b      	ldr	r3, [r3, #0]
}
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	3738      	adds	r7, #56	; 0x38
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bd80      	pop	{r7, pc}

08013ffe <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013ffe:	b580      	push	{r7, lr}
 8014000:	b082      	sub	sp, #8
 8014002:	af00      	add	r7, sp, #0
 8014004:	6078      	str	r0, [r7, #4]
 8014006:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8014008:	6839      	ldr	r1, [r7, #0]
 801400a:	6878      	ldr	r0, [r7, #4]
 801400c:	f7ff ff6c 	bl	8013ee8 <xEventGroupSetBits>
}
 8014010:	bf00      	nop
 8014012:	3708      	adds	r7, #8
 8014014:	46bd      	mov	sp, r7
 8014016:	bd80      	pop	{r7, pc}

08014018 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b082      	sub	sp, #8
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
 8014020:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8014022:	6839      	ldr	r1, [r7, #0]
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f7ff feef 	bl	8013e08 <xEventGroupClearBits>
}
 801402a:	bf00      	nop
 801402c:	3708      	adds	r7, #8
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}

08014032 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8014032:	b480      	push	{r7}
 8014034:	b087      	sub	sp, #28
 8014036:	af00      	add	r7, sp, #0
 8014038:	60f8      	str	r0, [r7, #12]
 801403a:	60b9      	str	r1, [r7, #8]
 801403c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801403e:	2300      	movs	r3, #0
 8014040:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d107      	bne.n	8014058 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8014048:	68fa      	ldr	r2, [r7, #12]
 801404a:	68bb      	ldr	r3, [r7, #8]
 801404c:	4013      	ands	r3, r2
 801404e:	2b00      	cmp	r3, #0
 8014050:	d00a      	beq.n	8014068 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8014052:	2301      	movs	r3, #1
 8014054:	617b      	str	r3, [r7, #20]
 8014056:	e007      	b.n	8014068 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8014058:	68fa      	ldr	r2, [r7, #12]
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	4013      	ands	r3, r2
 801405e:	68ba      	ldr	r2, [r7, #8]
 8014060:	429a      	cmp	r2, r3
 8014062:	d101      	bne.n	8014068 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8014064:	2301      	movs	r3, #1
 8014066:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8014068:	697b      	ldr	r3, [r7, #20]
}
 801406a:	4618      	mov	r0, r3
 801406c:	371c      	adds	r7, #28
 801406e:	46bd      	mov	sp, r7
 8014070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014074:	4770      	bx	lr
	...

08014078 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014078:	b580      	push	{r7, lr}
 801407a:	b086      	sub	sp, #24
 801407c:	af00      	add	r7, sp, #0
 801407e:	60f8      	str	r0, [r7, #12]
 8014080:	60b9      	str	r1, [r7, #8]
 8014082:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	68ba      	ldr	r2, [r7, #8]
 8014088:	68f9      	ldr	r1, [r7, #12]
 801408a:	4804      	ldr	r0, [pc, #16]	; (801409c <xEventGroupSetBitsFromISR+0x24>)
 801408c:	f002 f9a8 	bl	80163e0 <xTimerPendFunctionCallFromISR>
 8014090:	6178      	str	r0, [r7, #20]

		return xReturn;
 8014092:	697b      	ldr	r3, [r7, #20]
	}
 8014094:	4618      	mov	r0, r3
 8014096:	3718      	adds	r7, #24
 8014098:	46bd      	mov	sp, r7
 801409a:	bd80      	pop	{r7, pc}
 801409c:	08013fff 	.word	0x08013fff

080140a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80140a0:	b480      	push	{r7}
 80140a2:	b083      	sub	sp, #12
 80140a4:	af00      	add	r7, sp, #0
 80140a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f103 0208 	add.w	r2, r3, #8
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80140b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f103 0208 	add.w	r2, r3, #8
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	f103 0208 	add.w	r2, r3, #8
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	2200      	movs	r2, #0
 80140d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80140d4:	bf00      	nop
 80140d6:	370c      	adds	r7, #12
 80140d8:	46bd      	mov	sp, r7
 80140da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140de:	4770      	bx	lr

080140e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80140e0:	b480      	push	{r7}
 80140e2:	b083      	sub	sp, #12
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2200      	movs	r2, #0
 80140ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80140ee:	bf00      	nop
 80140f0:	370c      	adds	r7, #12
 80140f2:	46bd      	mov	sp, r7
 80140f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f8:	4770      	bx	lr

080140fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80140fa:	b480      	push	{r7}
 80140fc:	b085      	sub	sp, #20
 80140fe:	af00      	add	r7, sp, #0
 8014100:	6078      	str	r0, [r7, #4]
 8014102:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	685b      	ldr	r3, [r3, #4]
 8014108:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801410a:	683b      	ldr	r3, [r7, #0]
 801410c:	68fa      	ldr	r2, [r7, #12]
 801410e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	689a      	ldr	r2, [r3, #8]
 8014114:	683b      	ldr	r3, [r7, #0]
 8014116:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	689b      	ldr	r3, [r3, #8]
 801411c:	683a      	ldr	r2, [r7, #0]
 801411e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	683a      	ldr	r2, [r7, #0]
 8014124:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	687a      	ldr	r2, [r7, #4]
 801412a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	1c5a      	adds	r2, r3, #1
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	601a      	str	r2, [r3, #0]
}
 8014136:	bf00      	nop
 8014138:	3714      	adds	r7, #20
 801413a:	46bd      	mov	sp, r7
 801413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014140:	4770      	bx	lr

08014142 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014142:	b480      	push	{r7}
 8014144:	b085      	sub	sp, #20
 8014146:	af00      	add	r7, sp, #0
 8014148:	6078      	str	r0, [r7, #4]
 801414a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801414c:	683b      	ldr	r3, [r7, #0]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014152:	68bb      	ldr	r3, [r7, #8]
 8014154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014158:	d103      	bne.n	8014162 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	691b      	ldr	r3, [r3, #16]
 801415e:	60fb      	str	r3, [r7, #12]
 8014160:	e00c      	b.n	801417c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	3308      	adds	r3, #8
 8014166:	60fb      	str	r3, [r7, #12]
 8014168:	e002      	b.n	8014170 <vListInsert+0x2e>
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	60fb      	str	r3, [r7, #12]
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	685b      	ldr	r3, [r3, #4]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	68ba      	ldr	r2, [r7, #8]
 8014178:	429a      	cmp	r2, r3
 801417a:	d2f6      	bcs.n	801416a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	685a      	ldr	r2, [r3, #4]
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014184:	683b      	ldr	r3, [r7, #0]
 8014186:	685b      	ldr	r3, [r3, #4]
 8014188:	683a      	ldr	r2, [r7, #0]
 801418a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	68fa      	ldr	r2, [r7, #12]
 8014190:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	683a      	ldr	r2, [r7, #0]
 8014196:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	687a      	ldr	r2, [r7, #4]
 801419c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	1c5a      	adds	r2, r3, #1
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	601a      	str	r2, [r3, #0]
}
 80141a8:	bf00      	nop
 80141aa:	3714      	adds	r7, #20
 80141ac:	46bd      	mov	sp, r7
 80141ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b2:	4770      	bx	lr

080141b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80141b4:	b480      	push	{r7}
 80141b6:	b085      	sub	sp, #20
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	691b      	ldr	r3, [r3, #16]
 80141c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	685b      	ldr	r3, [r3, #4]
 80141c6:	687a      	ldr	r2, [r7, #4]
 80141c8:	6892      	ldr	r2, [r2, #8]
 80141ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	689b      	ldr	r3, [r3, #8]
 80141d0:	687a      	ldr	r2, [r7, #4]
 80141d2:	6852      	ldr	r2, [r2, #4]
 80141d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	685b      	ldr	r3, [r3, #4]
 80141da:	687a      	ldr	r2, [r7, #4]
 80141dc:	429a      	cmp	r2, r3
 80141de:	d103      	bne.n	80141e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	689a      	ldr	r2, [r3, #8]
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2200      	movs	r2, #0
 80141ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	1e5a      	subs	r2, r3, #1
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	681b      	ldr	r3, [r3, #0]
}
 80141fc:	4618      	mov	r0, r3
 80141fe:	3714      	adds	r7, #20
 8014200:	46bd      	mov	sp, r7
 8014202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014206:	4770      	bx	lr

08014208 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b084      	sub	sp, #16
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
 8014210:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d10a      	bne.n	8014232 <xQueueGenericReset+0x2a>
	__asm volatile
 801421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014220:	f383 8811 	msr	BASEPRI, r3
 8014224:	f3bf 8f6f 	isb	sy
 8014228:	f3bf 8f4f 	dsb	sy
 801422c:	60bb      	str	r3, [r7, #8]
}
 801422e:	bf00      	nop
 8014230:	e7fe      	b.n	8014230 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014232:	f002 fa1f 	bl	8016674 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	681a      	ldr	r2, [r3, #0]
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801423e:	68f9      	ldr	r1, [r7, #12]
 8014240:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014242:	fb01 f303 	mul.w	r3, r1, r3
 8014246:	441a      	add	r2, r3
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	2200      	movs	r2, #0
 8014250:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	681a      	ldr	r2, [r3, #0]
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	681a      	ldr	r2, [r3, #0]
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014262:	3b01      	subs	r3, #1
 8014264:	68f9      	ldr	r1, [r7, #12]
 8014266:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014268:	fb01 f303 	mul.w	r3, r1, r3
 801426c:	441a      	add	r2, r3
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	22ff      	movs	r2, #255	; 0xff
 8014276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	22ff      	movs	r2, #255	; 0xff
 801427e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014282:	683b      	ldr	r3, [r7, #0]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d114      	bne.n	80142b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	691b      	ldr	r3, [r3, #16]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d01a      	beq.n	80142c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	3310      	adds	r3, #16
 8014294:	4618      	mov	r0, r3
 8014296:	f001 fa3d 	bl	8015714 <xTaskRemoveFromEventList>
 801429a:	4603      	mov	r3, r0
 801429c:	2b00      	cmp	r3, #0
 801429e:	d012      	beq.n	80142c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80142a0:	4b0c      	ldr	r3, [pc, #48]	; (80142d4 <xQueueGenericReset+0xcc>)
 80142a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142a6:	601a      	str	r2, [r3, #0]
 80142a8:	f3bf 8f4f 	dsb	sy
 80142ac:	f3bf 8f6f 	isb	sy
 80142b0:	e009      	b.n	80142c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	3310      	adds	r3, #16
 80142b6:	4618      	mov	r0, r3
 80142b8:	f7ff fef2 	bl	80140a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	3324      	adds	r3, #36	; 0x24
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7ff feed 	bl	80140a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80142c6:	f002 fa05 	bl	80166d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80142ca:	2301      	movs	r3, #1
}
 80142cc:	4618      	mov	r0, r3
 80142ce:	3710      	adds	r7, #16
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}
 80142d4:	e000ed04 	.word	0xe000ed04

080142d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b08e      	sub	sp, #56	; 0x38
 80142dc:	af02      	add	r7, sp, #8
 80142de:	60f8      	str	r0, [r7, #12]
 80142e0:	60b9      	str	r1, [r7, #8]
 80142e2:	607a      	str	r2, [r7, #4]
 80142e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d10a      	bne.n	8014302 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80142ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f0:	f383 8811 	msr	BASEPRI, r3
 80142f4:	f3bf 8f6f 	isb	sy
 80142f8:	f3bf 8f4f 	dsb	sy
 80142fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80142fe:	bf00      	nop
 8014300:	e7fe      	b.n	8014300 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014302:	683b      	ldr	r3, [r7, #0]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d10a      	bne.n	801431e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8014308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801430c:	f383 8811 	msr	BASEPRI, r3
 8014310:	f3bf 8f6f 	isb	sy
 8014314:	f3bf 8f4f 	dsb	sy
 8014318:	627b      	str	r3, [r7, #36]	; 0x24
}
 801431a:	bf00      	nop
 801431c:	e7fe      	b.n	801431c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d002      	beq.n	801432a <xQueueGenericCreateStatic+0x52>
 8014324:	68bb      	ldr	r3, [r7, #8]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d001      	beq.n	801432e <xQueueGenericCreateStatic+0x56>
 801432a:	2301      	movs	r3, #1
 801432c:	e000      	b.n	8014330 <xQueueGenericCreateStatic+0x58>
 801432e:	2300      	movs	r3, #0
 8014330:	2b00      	cmp	r3, #0
 8014332:	d10a      	bne.n	801434a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014338:	f383 8811 	msr	BASEPRI, r3
 801433c:	f3bf 8f6f 	isb	sy
 8014340:	f3bf 8f4f 	dsb	sy
 8014344:	623b      	str	r3, [r7, #32]
}
 8014346:	bf00      	nop
 8014348:	e7fe      	b.n	8014348 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d102      	bne.n	8014356 <xQueueGenericCreateStatic+0x7e>
 8014350:	68bb      	ldr	r3, [r7, #8]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d101      	bne.n	801435a <xQueueGenericCreateStatic+0x82>
 8014356:	2301      	movs	r3, #1
 8014358:	e000      	b.n	801435c <xQueueGenericCreateStatic+0x84>
 801435a:	2300      	movs	r3, #0
 801435c:	2b00      	cmp	r3, #0
 801435e:	d10a      	bne.n	8014376 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014364:	f383 8811 	msr	BASEPRI, r3
 8014368:	f3bf 8f6f 	isb	sy
 801436c:	f3bf 8f4f 	dsb	sy
 8014370:	61fb      	str	r3, [r7, #28]
}
 8014372:	bf00      	nop
 8014374:	e7fe      	b.n	8014374 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014376:	2350      	movs	r3, #80	; 0x50
 8014378:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801437a:	697b      	ldr	r3, [r7, #20]
 801437c:	2b50      	cmp	r3, #80	; 0x50
 801437e:	d00a      	beq.n	8014396 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014384:	f383 8811 	msr	BASEPRI, r3
 8014388:	f3bf 8f6f 	isb	sy
 801438c:	f3bf 8f4f 	dsb	sy
 8014390:	61bb      	str	r3, [r7, #24]
}
 8014392:	bf00      	nop
 8014394:	e7fe      	b.n	8014394 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014396:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d00d      	beq.n	80143be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80143a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143a4:	2201      	movs	r2, #1
 80143a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80143aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80143ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b0:	9300      	str	r3, [sp, #0]
 80143b2:	4613      	mov	r3, r2
 80143b4:	687a      	ldr	r2, [r7, #4]
 80143b6:	68b9      	ldr	r1, [r7, #8]
 80143b8:	68f8      	ldr	r0, [r7, #12]
 80143ba:	f000 f83f 	bl	801443c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80143be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80143c0:	4618      	mov	r0, r3
 80143c2:	3730      	adds	r7, #48	; 0x30
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd80      	pop	{r7, pc}

080143c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b08a      	sub	sp, #40	; 0x28
 80143cc:	af02      	add	r7, sp, #8
 80143ce:	60f8      	str	r0, [r7, #12]
 80143d0:	60b9      	str	r1, [r7, #8]
 80143d2:	4613      	mov	r3, r2
 80143d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d10a      	bne.n	80143f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80143dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143e0:	f383 8811 	msr	BASEPRI, r3
 80143e4:	f3bf 8f6f 	isb	sy
 80143e8:	f3bf 8f4f 	dsb	sy
 80143ec:	613b      	str	r3, [r7, #16]
}
 80143ee:	bf00      	nop
 80143f0:	e7fe      	b.n	80143f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	68ba      	ldr	r2, [r7, #8]
 80143f6:	fb02 f303 	mul.w	r3, r2, r3
 80143fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80143fc:	69fb      	ldr	r3, [r7, #28]
 80143fe:	3350      	adds	r3, #80	; 0x50
 8014400:	4618      	mov	r0, r3
 8014402:	f002 fa59 	bl	80168b8 <pvPortMalloc>
 8014406:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014408:	69bb      	ldr	r3, [r7, #24]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d011      	beq.n	8014432 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801440e:	69bb      	ldr	r3, [r7, #24]
 8014410:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	3350      	adds	r3, #80	; 0x50
 8014416:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014418:	69bb      	ldr	r3, [r7, #24]
 801441a:	2200      	movs	r2, #0
 801441c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014420:	79fa      	ldrb	r2, [r7, #7]
 8014422:	69bb      	ldr	r3, [r7, #24]
 8014424:	9300      	str	r3, [sp, #0]
 8014426:	4613      	mov	r3, r2
 8014428:	697a      	ldr	r2, [r7, #20]
 801442a:	68b9      	ldr	r1, [r7, #8]
 801442c:	68f8      	ldr	r0, [r7, #12]
 801442e:	f000 f805 	bl	801443c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014432:	69bb      	ldr	r3, [r7, #24]
	}
 8014434:	4618      	mov	r0, r3
 8014436:	3720      	adds	r7, #32
 8014438:	46bd      	mov	sp, r7
 801443a:	bd80      	pop	{r7, pc}

0801443c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b084      	sub	sp, #16
 8014440:	af00      	add	r7, sp, #0
 8014442:	60f8      	str	r0, [r7, #12]
 8014444:	60b9      	str	r1, [r7, #8]
 8014446:	607a      	str	r2, [r7, #4]
 8014448:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801444a:	68bb      	ldr	r3, [r7, #8]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d103      	bne.n	8014458 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014450:	69bb      	ldr	r3, [r7, #24]
 8014452:	69ba      	ldr	r2, [r7, #24]
 8014454:	601a      	str	r2, [r3, #0]
 8014456:	e002      	b.n	801445e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014458:	69bb      	ldr	r3, [r7, #24]
 801445a:	687a      	ldr	r2, [r7, #4]
 801445c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801445e:	69bb      	ldr	r3, [r7, #24]
 8014460:	68fa      	ldr	r2, [r7, #12]
 8014462:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014464:	69bb      	ldr	r3, [r7, #24]
 8014466:	68ba      	ldr	r2, [r7, #8]
 8014468:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801446a:	2101      	movs	r1, #1
 801446c:	69b8      	ldr	r0, [r7, #24]
 801446e:	f7ff fecb 	bl	8014208 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014472:	69bb      	ldr	r3, [r7, #24]
 8014474:	78fa      	ldrb	r2, [r7, #3]
 8014476:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801447a:	bf00      	nop
 801447c:	3710      	adds	r7, #16
 801447e:	46bd      	mov	sp, r7
 8014480:	bd80      	pop	{r7, pc}
	...

08014484 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014484:	b580      	push	{r7, lr}
 8014486:	b08e      	sub	sp, #56	; 0x38
 8014488:	af00      	add	r7, sp, #0
 801448a:	60f8      	str	r0, [r7, #12]
 801448c:	60b9      	str	r1, [r7, #8]
 801448e:	607a      	str	r2, [r7, #4]
 8014490:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014492:	2300      	movs	r3, #0
 8014494:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801449c:	2b00      	cmp	r3, #0
 801449e:	d10a      	bne.n	80144b6 <xQueueGenericSend+0x32>
	__asm volatile
 80144a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144a4:	f383 8811 	msr	BASEPRI, r3
 80144a8:	f3bf 8f6f 	isb	sy
 80144ac:	f3bf 8f4f 	dsb	sy
 80144b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80144b2:	bf00      	nop
 80144b4:	e7fe      	b.n	80144b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d103      	bne.n	80144c4 <xQueueGenericSend+0x40>
 80144bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d101      	bne.n	80144c8 <xQueueGenericSend+0x44>
 80144c4:	2301      	movs	r3, #1
 80144c6:	e000      	b.n	80144ca <xQueueGenericSend+0x46>
 80144c8:	2300      	movs	r3, #0
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d10a      	bne.n	80144e4 <xQueueGenericSend+0x60>
	__asm volatile
 80144ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144d2:	f383 8811 	msr	BASEPRI, r3
 80144d6:	f3bf 8f6f 	isb	sy
 80144da:	f3bf 8f4f 	dsb	sy
 80144de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80144e0:	bf00      	nop
 80144e2:	e7fe      	b.n	80144e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	2b02      	cmp	r3, #2
 80144e8:	d103      	bne.n	80144f2 <xQueueGenericSend+0x6e>
 80144ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80144ee:	2b01      	cmp	r3, #1
 80144f0:	d101      	bne.n	80144f6 <xQueueGenericSend+0x72>
 80144f2:	2301      	movs	r3, #1
 80144f4:	e000      	b.n	80144f8 <xQueueGenericSend+0x74>
 80144f6:	2300      	movs	r3, #0
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d10a      	bne.n	8014512 <xQueueGenericSend+0x8e>
	__asm volatile
 80144fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014500:	f383 8811 	msr	BASEPRI, r3
 8014504:	f3bf 8f6f 	isb	sy
 8014508:	f3bf 8f4f 	dsb	sy
 801450c:	623b      	str	r3, [r7, #32]
}
 801450e:	bf00      	nop
 8014510:	e7fe      	b.n	8014510 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014512:	f001 fb1f 	bl	8015b54 <xTaskGetSchedulerState>
 8014516:	4603      	mov	r3, r0
 8014518:	2b00      	cmp	r3, #0
 801451a:	d102      	bne.n	8014522 <xQueueGenericSend+0x9e>
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d101      	bne.n	8014526 <xQueueGenericSend+0xa2>
 8014522:	2301      	movs	r3, #1
 8014524:	e000      	b.n	8014528 <xQueueGenericSend+0xa4>
 8014526:	2300      	movs	r3, #0
 8014528:	2b00      	cmp	r3, #0
 801452a:	d10a      	bne.n	8014542 <xQueueGenericSend+0xbe>
	__asm volatile
 801452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014530:	f383 8811 	msr	BASEPRI, r3
 8014534:	f3bf 8f6f 	isb	sy
 8014538:	f3bf 8f4f 	dsb	sy
 801453c:	61fb      	str	r3, [r7, #28]
}
 801453e:	bf00      	nop
 8014540:	e7fe      	b.n	8014540 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014542:	f002 f897 	bl	8016674 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801454c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801454e:	429a      	cmp	r2, r3
 8014550:	d302      	bcc.n	8014558 <xQueueGenericSend+0xd4>
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	2b02      	cmp	r3, #2
 8014556:	d129      	bne.n	80145ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014558:	683a      	ldr	r2, [r7, #0]
 801455a:	68b9      	ldr	r1, [r7, #8]
 801455c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801455e:	f000 fac7 	bl	8014af0 <prvCopyDataToQueue>
 8014562:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014568:	2b00      	cmp	r3, #0
 801456a:	d010      	beq.n	801458e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801456e:	3324      	adds	r3, #36	; 0x24
 8014570:	4618      	mov	r0, r3
 8014572:	f001 f8cf 	bl	8015714 <xTaskRemoveFromEventList>
 8014576:	4603      	mov	r3, r0
 8014578:	2b00      	cmp	r3, #0
 801457a:	d013      	beq.n	80145a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801457c:	4b3f      	ldr	r3, [pc, #252]	; (801467c <xQueueGenericSend+0x1f8>)
 801457e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014582:	601a      	str	r2, [r3, #0]
 8014584:	f3bf 8f4f 	dsb	sy
 8014588:	f3bf 8f6f 	isb	sy
 801458c:	e00a      	b.n	80145a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014590:	2b00      	cmp	r3, #0
 8014592:	d007      	beq.n	80145a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014594:	4b39      	ldr	r3, [pc, #228]	; (801467c <xQueueGenericSend+0x1f8>)
 8014596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801459a:	601a      	str	r2, [r3, #0]
 801459c:	f3bf 8f4f 	dsb	sy
 80145a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80145a4:	f002 f896 	bl	80166d4 <vPortExitCritical>
				return pdPASS;
 80145a8:	2301      	movs	r3, #1
 80145aa:	e063      	b.n	8014674 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d103      	bne.n	80145ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80145b2:	f002 f88f 	bl	80166d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80145b6:	2300      	movs	r3, #0
 80145b8:	e05c      	b.n	8014674 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80145ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d106      	bne.n	80145ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80145c0:	f107 0314 	add.w	r3, r7, #20
 80145c4:	4618      	mov	r0, r3
 80145c6:	f001 f96b 	bl	80158a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80145ca:	2301      	movs	r3, #1
 80145cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80145ce:	f002 f881 	bl	80166d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80145d2:	f000 fe37 	bl	8015244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80145d6:	f002 f84d 	bl	8016674 <vPortEnterCritical>
 80145da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80145e0:	b25b      	sxtb	r3, r3
 80145e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145e6:	d103      	bne.n	80145f0 <xQueueGenericSend+0x16c>
 80145e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ea:	2200      	movs	r2, #0
 80145ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80145f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80145f6:	b25b      	sxtb	r3, r3
 80145f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145fc:	d103      	bne.n	8014606 <xQueueGenericSend+0x182>
 80145fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014600:	2200      	movs	r2, #0
 8014602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014606:	f002 f865 	bl	80166d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801460a:	1d3a      	adds	r2, r7, #4
 801460c:	f107 0314 	add.w	r3, r7, #20
 8014610:	4611      	mov	r1, r2
 8014612:	4618      	mov	r0, r3
 8014614:	f001 f95a 	bl	80158cc <xTaskCheckForTimeOut>
 8014618:	4603      	mov	r3, r0
 801461a:	2b00      	cmp	r3, #0
 801461c:	d124      	bne.n	8014668 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801461e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014620:	f000 fb5e 	bl	8014ce0 <prvIsQueueFull>
 8014624:	4603      	mov	r3, r0
 8014626:	2b00      	cmp	r3, #0
 8014628:	d018      	beq.n	801465c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801462c:	3310      	adds	r3, #16
 801462e:	687a      	ldr	r2, [r7, #4]
 8014630:	4611      	mov	r1, r2
 8014632:	4618      	mov	r0, r3
 8014634:	f000 ffe2 	bl	80155fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801463a:	f000 fae9 	bl	8014c10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801463e:	f000 fe0f 	bl	8015260 <xTaskResumeAll>
 8014642:	4603      	mov	r3, r0
 8014644:	2b00      	cmp	r3, #0
 8014646:	f47f af7c 	bne.w	8014542 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801464a:	4b0c      	ldr	r3, [pc, #48]	; (801467c <xQueueGenericSend+0x1f8>)
 801464c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014650:	601a      	str	r2, [r3, #0]
 8014652:	f3bf 8f4f 	dsb	sy
 8014656:	f3bf 8f6f 	isb	sy
 801465a:	e772      	b.n	8014542 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801465c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801465e:	f000 fad7 	bl	8014c10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014662:	f000 fdfd 	bl	8015260 <xTaskResumeAll>
 8014666:	e76c      	b.n	8014542 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801466a:	f000 fad1 	bl	8014c10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801466e:	f000 fdf7 	bl	8015260 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014672:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014674:	4618      	mov	r0, r3
 8014676:	3738      	adds	r7, #56	; 0x38
 8014678:	46bd      	mov	sp, r7
 801467a:	bd80      	pop	{r7, pc}
 801467c:	e000ed04 	.word	0xe000ed04

08014680 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b090      	sub	sp, #64	; 0x40
 8014684:	af00      	add	r7, sp, #0
 8014686:	60f8      	str	r0, [r7, #12]
 8014688:	60b9      	str	r1, [r7, #8]
 801468a:	607a      	str	r2, [r7, #4]
 801468c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8014692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014694:	2b00      	cmp	r3, #0
 8014696:	d10a      	bne.n	80146ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8014698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801469c:	f383 8811 	msr	BASEPRI, r3
 80146a0:	f3bf 8f6f 	isb	sy
 80146a4:	f3bf 8f4f 	dsb	sy
 80146a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80146aa:	bf00      	nop
 80146ac:	e7fe      	b.n	80146ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d103      	bne.n	80146bc <xQueueGenericSendFromISR+0x3c>
 80146b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d101      	bne.n	80146c0 <xQueueGenericSendFromISR+0x40>
 80146bc:	2301      	movs	r3, #1
 80146be:	e000      	b.n	80146c2 <xQueueGenericSendFromISR+0x42>
 80146c0:	2300      	movs	r3, #0
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d10a      	bne.n	80146dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80146c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146ca:	f383 8811 	msr	BASEPRI, r3
 80146ce:	f3bf 8f6f 	isb	sy
 80146d2:	f3bf 8f4f 	dsb	sy
 80146d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80146d8:	bf00      	nop
 80146da:	e7fe      	b.n	80146da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80146dc:	683b      	ldr	r3, [r7, #0]
 80146de:	2b02      	cmp	r3, #2
 80146e0:	d103      	bne.n	80146ea <xQueueGenericSendFromISR+0x6a>
 80146e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80146e6:	2b01      	cmp	r3, #1
 80146e8:	d101      	bne.n	80146ee <xQueueGenericSendFromISR+0x6e>
 80146ea:	2301      	movs	r3, #1
 80146ec:	e000      	b.n	80146f0 <xQueueGenericSendFromISR+0x70>
 80146ee:	2300      	movs	r3, #0
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d10a      	bne.n	801470a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80146f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f8:	f383 8811 	msr	BASEPRI, r3
 80146fc:	f3bf 8f6f 	isb	sy
 8014700:	f3bf 8f4f 	dsb	sy
 8014704:	623b      	str	r3, [r7, #32]
}
 8014706:	bf00      	nop
 8014708:	e7fe      	b.n	8014708 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801470a:	f002 f895 	bl	8016838 <vPortValidateInterruptPriority>
	__asm volatile
 801470e:	f3ef 8211 	mrs	r2, BASEPRI
 8014712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014716:	f383 8811 	msr	BASEPRI, r3
 801471a:	f3bf 8f6f 	isb	sy
 801471e:	f3bf 8f4f 	dsb	sy
 8014722:	61fa      	str	r2, [r7, #28]
 8014724:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8014726:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014728:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801472a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801472c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014732:	429a      	cmp	r2, r3
 8014734:	d302      	bcc.n	801473c <xQueueGenericSendFromISR+0xbc>
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	2b02      	cmp	r3, #2
 801473a:	d12f      	bne.n	801479c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801473e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801474a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801474c:	683a      	ldr	r2, [r7, #0]
 801474e:	68b9      	ldr	r1, [r7, #8]
 8014750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014752:	f000 f9cd 	bl	8014af0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014756:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801475a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801475e:	d112      	bne.n	8014786 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014764:	2b00      	cmp	r3, #0
 8014766:	d016      	beq.n	8014796 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801476a:	3324      	adds	r3, #36	; 0x24
 801476c:	4618      	mov	r0, r3
 801476e:	f000 ffd1 	bl	8015714 <xTaskRemoveFromEventList>
 8014772:	4603      	mov	r3, r0
 8014774:	2b00      	cmp	r3, #0
 8014776:	d00e      	beq.n	8014796 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2b00      	cmp	r3, #0
 801477c:	d00b      	beq.n	8014796 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2201      	movs	r2, #1
 8014782:	601a      	str	r2, [r3, #0]
 8014784:	e007      	b.n	8014796 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014786:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801478a:	3301      	adds	r3, #1
 801478c:	b2db      	uxtb	r3, r3
 801478e:	b25a      	sxtb	r2, r3
 8014790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014796:	2301      	movs	r3, #1
 8014798:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801479a:	e001      	b.n	80147a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801479c:	2300      	movs	r3, #0
 801479e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80147a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147a2:	617b      	str	r3, [r7, #20]
	__asm volatile
 80147a4:	697b      	ldr	r3, [r7, #20]
 80147a6:	f383 8811 	msr	BASEPRI, r3
}
 80147aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80147ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3740      	adds	r7, #64	; 0x40
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}
	...

080147b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b08c      	sub	sp, #48	; 0x30
 80147bc:	af00      	add	r7, sp, #0
 80147be:	60f8      	str	r0, [r7, #12]
 80147c0:	60b9      	str	r1, [r7, #8]
 80147c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80147c4:	2300      	movs	r3, #0
 80147c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80147cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d10a      	bne.n	80147e8 <xQueueReceive+0x30>
	__asm volatile
 80147d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147d6:	f383 8811 	msr	BASEPRI, r3
 80147da:	f3bf 8f6f 	isb	sy
 80147de:	f3bf 8f4f 	dsb	sy
 80147e2:	623b      	str	r3, [r7, #32]
}
 80147e4:	bf00      	nop
 80147e6:	e7fe      	b.n	80147e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d103      	bne.n	80147f6 <xQueueReceive+0x3e>
 80147ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d101      	bne.n	80147fa <xQueueReceive+0x42>
 80147f6:	2301      	movs	r3, #1
 80147f8:	e000      	b.n	80147fc <xQueueReceive+0x44>
 80147fa:	2300      	movs	r3, #0
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d10a      	bne.n	8014816 <xQueueReceive+0x5e>
	__asm volatile
 8014800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014804:	f383 8811 	msr	BASEPRI, r3
 8014808:	f3bf 8f6f 	isb	sy
 801480c:	f3bf 8f4f 	dsb	sy
 8014810:	61fb      	str	r3, [r7, #28]
}
 8014812:	bf00      	nop
 8014814:	e7fe      	b.n	8014814 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014816:	f001 f99d 	bl	8015b54 <xTaskGetSchedulerState>
 801481a:	4603      	mov	r3, r0
 801481c:	2b00      	cmp	r3, #0
 801481e:	d102      	bne.n	8014826 <xQueueReceive+0x6e>
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d101      	bne.n	801482a <xQueueReceive+0x72>
 8014826:	2301      	movs	r3, #1
 8014828:	e000      	b.n	801482c <xQueueReceive+0x74>
 801482a:	2300      	movs	r3, #0
 801482c:	2b00      	cmp	r3, #0
 801482e:	d10a      	bne.n	8014846 <xQueueReceive+0x8e>
	__asm volatile
 8014830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014834:	f383 8811 	msr	BASEPRI, r3
 8014838:	f3bf 8f6f 	isb	sy
 801483c:	f3bf 8f4f 	dsb	sy
 8014840:	61bb      	str	r3, [r7, #24]
}
 8014842:	bf00      	nop
 8014844:	e7fe      	b.n	8014844 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014846:	f001 ff15 	bl	8016674 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801484e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014852:	2b00      	cmp	r3, #0
 8014854:	d01f      	beq.n	8014896 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014856:	68b9      	ldr	r1, [r7, #8]
 8014858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801485a:	f000 f9b3 	bl	8014bc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014860:	1e5a      	subs	r2, r3, #1
 8014862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014864:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014868:	691b      	ldr	r3, [r3, #16]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d00f      	beq.n	801488e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014870:	3310      	adds	r3, #16
 8014872:	4618      	mov	r0, r3
 8014874:	f000 ff4e 	bl	8015714 <xTaskRemoveFromEventList>
 8014878:	4603      	mov	r3, r0
 801487a:	2b00      	cmp	r3, #0
 801487c:	d007      	beq.n	801488e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801487e:	4b3d      	ldr	r3, [pc, #244]	; (8014974 <xQueueReceive+0x1bc>)
 8014880:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014884:	601a      	str	r2, [r3, #0]
 8014886:	f3bf 8f4f 	dsb	sy
 801488a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801488e:	f001 ff21 	bl	80166d4 <vPortExitCritical>
				return pdPASS;
 8014892:	2301      	movs	r3, #1
 8014894:	e069      	b.n	801496a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d103      	bne.n	80148a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801489c:	f001 ff1a 	bl	80166d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80148a0:	2300      	movs	r3, #0
 80148a2:	e062      	b.n	801496a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80148a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d106      	bne.n	80148b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80148aa:	f107 0310 	add.w	r3, r7, #16
 80148ae:	4618      	mov	r0, r3
 80148b0:	f000 fff6 	bl	80158a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80148b4:	2301      	movs	r3, #1
 80148b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80148b8:	f001 ff0c 	bl	80166d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80148bc:	f000 fcc2 	bl	8015244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80148c0:	f001 fed8 	bl	8016674 <vPortEnterCritical>
 80148c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80148ca:	b25b      	sxtb	r3, r3
 80148cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148d0:	d103      	bne.n	80148da <xQueueReceive+0x122>
 80148d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d4:	2200      	movs	r2, #0
 80148d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80148da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80148e0:	b25b      	sxtb	r3, r3
 80148e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148e6:	d103      	bne.n	80148f0 <xQueueReceive+0x138>
 80148e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ea:	2200      	movs	r2, #0
 80148ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80148f0:	f001 fef0 	bl	80166d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80148f4:	1d3a      	adds	r2, r7, #4
 80148f6:	f107 0310 	add.w	r3, r7, #16
 80148fa:	4611      	mov	r1, r2
 80148fc:	4618      	mov	r0, r3
 80148fe:	f000 ffe5 	bl	80158cc <xTaskCheckForTimeOut>
 8014902:	4603      	mov	r3, r0
 8014904:	2b00      	cmp	r3, #0
 8014906:	d123      	bne.n	8014950 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801490a:	f000 f9d3 	bl	8014cb4 <prvIsQueueEmpty>
 801490e:	4603      	mov	r3, r0
 8014910:	2b00      	cmp	r3, #0
 8014912:	d017      	beq.n	8014944 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014916:	3324      	adds	r3, #36	; 0x24
 8014918:	687a      	ldr	r2, [r7, #4]
 801491a:	4611      	mov	r1, r2
 801491c:	4618      	mov	r0, r3
 801491e:	f000 fe6d 	bl	80155fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014924:	f000 f974 	bl	8014c10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014928:	f000 fc9a 	bl	8015260 <xTaskResumeAll>
 801492c:	4603      	mov	r3, r0
 801492e:	2b00      	cmp	r3, #0
 8014930:	d189      	bne.n	8014846 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8014932:	4b10      	ldr	r3, [pc, #64]	; (8014974 <xQueueReceive+0x1bc>)
 8014934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014938:	601a      	str	r2, [r3, #0]
 801493a:	f3bf 8f4f 	dsb	sy
 801493e:	f3bf 8f6f 	isb	sy
 8014942:	e780      	b.n	8014846 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014946:	f000 f963 	bl	8014c10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801494a:	f000 fc89 	bl	8015260 <xTaskResumeAll>
 801494e:	e77a      	b.n	8014846 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014952:	f000 f95d 	bl	8014c10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014956:	f000 fc83 	bl	8015260 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801495a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801495c:	f000 f9aa 	bl	8014cb4 <prvIsQueueEmpty>
 8014960:	4603      	mov	r3, r0
 8014962:	2b00      	cmp	r3, #0
 8014964:	f43f af6f 	beq.w	8014846 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014968:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801496a:	4618      	mov	r0, r3
 801496c:	3730      	adds	r7, #48	; 0x30
 801496e:	46bd      	mov	sp, r7
 8014970:	bd80      	pop	{r7, pc}
 8014972:	bf00      	nop
 8014974:	e000ed04 	.word	0xe000ed04

08014978 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b08e      	sub	sp, #56	; 0x38
 801497c:	af00      	add	r7, sp, #0
 801497e:	60f8      	str	r0, [r7, #12]
 8014980:	60b9      	str	r1, [r7, #8]
 8014982:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801498a:	2b00      	cmp	r3, #0
 801498c:	d10a      	bne.n	80149a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014992:	f383 8811 	msr	BASEPRI, r3
 8014996:	f3bf 8f6f 	isb	sy
 801499a:	f3bf 8f4f 	dsb	sy
 801499e:	623b      	str	r3, [r7, #32]
}
 80149a0:	bf00      	nop
 80149a2:	e7fe      	b.n	80149a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d103      	bne.n	80149b2 <xQueueReceiveFromISR+0x3a>
 80149aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d101      	bne.n	80149b6 <xQueueReceiveFromISR+0x3e>
 80149b2:	2301      	movs	r3, #1
 80149b4:	e000      	b.n	80149b8 <xQueueReceiveFromISR+0x40>
 80149b6:	2300      	movs	r3, #0
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d10a      	bne.n	80149d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80149bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149c0:	f383 8811 	msr	BASEPRI, r3
 80149c4:	f3bf 8f6f 	isb	sy
 80149c8:	f3bf 8f4f 	dsb	sy
 80149cc:	61fb      	str	r3, [r7, #28]
}
 80149ce:	bf00      	nop
 80149d0:	e7fe      	b.n	80149d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80149d2:	f001 ff31 	bl	8016838 <vPortValidateInterruptPriority>
	__asm volatile
 80149d6:	f3ef 8211 	mrs	r2, BASEPRI
 80149da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149de:	f383 8811 	msr	BASEPRI, r3
 80149e2:	f3bf 8f6f 	isb	sy
 80149e6:	f3bf 8f4f 	dsb	sy
 80149ea:	61ba      	str	r2, [r7, #24]
 80149ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80149ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80149f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80149f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80149f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80149f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d02f      	beq.n	8014a5e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80149fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014a08:	68b9      	ldr	r1, [r7, #8]
 8014a0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014a0c:	f000 f8da 	bl	8014bc4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a12:	1e5a      	subs	r2, r3, #1
 8014a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014a18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a20:	d112      	bne.n	8014a48 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a24:	691b      	ldr	r3, [r3, #16]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d016      	beq.n	8014a58 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a2c:	3310      	adds	r3, #16
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f000 fe70 	bl	8015714 <xTaskRemoveFromEventList>
 8014a34:	4603      	mov	r3, r0
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d00e      	beq.n	8014a58 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d00b      	beq.n	8014a58 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2201      	movs	r2, #1
 8014a44:	601a      	str	r2, [r3, #0]
 8014a46:	e007      	b.n	8014a58 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a4c:	3301      	adds	r3, #1
 8014a4e:	b2db      	uxtb	r3, r3
 8014a50:	b25a      	sxtb	r2, r3
 8014a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014a58:	2301      	movs	r3, #1
 8014a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8014a5c:	e001      	b.n	8014a62 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8014a5e:	2300      	movs	r3, #0
 8014a60:	637b      	str	r3, [r7, #52]	; 0x34
 8014a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a64:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014a66:	693b      	ldr	r3, [r7, #16]
 8014a68:	f383 8811 	msr	BASEPRI, r3
}
 8014a6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014a70:	4618      	mov	r0, r3
 8014a72:	3738      	adds	r7, #56	; 0x38
 8014a74:	46bd      	mov	sp, r7
 8014a76:	bd80      	pop	{r7, pc}

08014a78 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8014a78:	b580      	push	{r7, lr}
 8014a7a:	b084      	sub	sp, #16
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d10a      	bne.n	8014a9c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8014a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a8a:	f383 8811 	msr	BASEPRI, r3
 8014a8e:	f3bf 8f6f 	isb	sy
 8014a92:	f3bf 8f4f 	dsb	sy
 8014a96:	60bb      	str	r3, [r7, #8]
}
 8014a98:	bf00      	nop
 8014a9a:	e7fe      	b.n	8014a9a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8014a9c:	f001 fdea 	bl	8016674 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014aa4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8014aa6:	f001 fe15 	bl	80166d4 <vPortExitCritical>

	return uxReturn;
 8014aaa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014aac:	4618      	mov	r0, r3
 8014aae:	3710      	adds	r7, #16
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}

08014ab4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8014ab4:	b480      	push	{r7}
 8014ab6:	b087      	sub	sp, #28
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8014ac0:	697b      	ldr	r3, [r7, #20]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d10a      	bne.n	8014adc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8014ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aca:	f383 8811 	msr	BASEPRI, r3
 8014ace:	f3bf 8f6f 	isb	sy
 8014ad2:	f3bf 8f4f 	dsb	sy
 8014ad6:	60fb      	str	r3, [r7, #12]
}
 8014ad8:	bf00      	nop
 8014ada:	e7fe      	b.n	8014ada <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8014adc:	697b      	ldr	r3, [r7, #20]
 8014ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ae0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8014ae2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	371c      	adds	r7, #28
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aee:	4770      	bx	lr

08014af0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b086      	sub	sp, #24
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	60f8      	str	r0, [r7, #12]
 8014af8:	60b9      	str	r1, [r7, #8]
 8014afa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014afc:	2300      	movs	r3, #0
 8014afe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d10d      	bne.n	8014b2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d14d      	bne.n	8014bb2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	689b      	ldr	r3, [r3, #8]
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f001 f838 	bl	8015b90 <xTaskPriorityDisinherit>
 8014b20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	2200      	movs	r2, #0
 8014b26:	609a      	str	r2, [r3, #8]
 8014b28:	e043      	b.n	8014bb2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d119      	bne.n	8014b64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	6858      	ldr	r0, [r3, #4]
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b38:	461a      	mov	r2, r3
 8014b3a:	68b9      	ldr	r1, [r7, #8]
 8014b3c:	f002 f8e0 	bl	8016d00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	685a      	ldr	r2, [r3, #4]
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b48:	441a      	add	r2, r3
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014b4e:	68fb      	ldr	r3, [r7, #12]
 8014b50:	685a      	ldr	r2, [r3, #4]
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	689b      	ldr	r3, [r3, #8]
 8014b56:	429a      	cmp	r2, r3
 8014b58:	d32b      	bcc.n	8014bb2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	681a      	ldr	r2, [r3, #0]
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	605a      	str	r2, [r3, #4]
 8014b62:	e026      	b.n	8014bb2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	68d8      	ldr	r0, [r3, #12]
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b6c:	461a      	mov	r2, r3
 8014b6e:	68b9      	ldr	r1, [r7, #8]
 8014b70:	f002 f8c6 	bl	8016d00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	68da      	ldr	r2, [r3, #12]
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b7c:	425b      	negs	r3, r3
 8014b7e:	441a      	add	r2, r3
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	68da      	ldr	r2, [r3, #12]
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	d207      	bcs.n	8014ba0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	689a      	ldr	r2, [r3, #8]
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b98:	425b      	negs	r3, r3
 8014b9a:	441a      	add	r2, r3
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	2b02      	cmp	r3, #2
 8014ba4:	d105      	bne.n	8014bb2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014ba6:	693b      	ldr	r3, [r7, #16]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d002      	beq.n	8014bb2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014bac:	693b      	ldr	r3, [r7, #16]
 8014bae:	3b01      	subs	r3, #1
 8014bb0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014bb2:	693b      	ldr	r3, [r7, #16]
 8014bb4:	1c5a      	adds	r2, r3, #1
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014bba:	697b      	ldr	r3, [r7, #20]
}
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	3718      	adds	r7, #24
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd80      	pop	{r7, pc}

08014bc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b082      	sub	sp, #8
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
 8014bcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d018      	beq.n	8014c08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	68da      	ldr	r2, [r3, #12]
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bde:	441a      	add	r2, r3
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	68da      	ldr	r2, [r3, #12]
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	689b      	ldr	r3, [r3, #8]
 8014bec:	429a      	cmp	r2, r3
 8014bee:	d303      	bcc.n	8014bf8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	681a      	ldr	r2, [r3, #0]
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	68d9      	ldr	r1, [r3, #12]
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c00:	461a      	mov	r2, r3
 8014c02:	6838      	ldr	r0, [r7, #0]
 8014c04:	f002 f87c 	bl	8016d00 <memcpy>
	}
}
 8014c08:	bf00      	nop
 8014c0a:	3708      	adds	r7, #8
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}

08014c10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b084      	sub	sp, #16
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014c18:	f001 fd2c 	bl	8016674 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014c22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014c24:	e011      	b.n	8014c4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d012      	beq.n	8014c54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	3324      	adds	r3, #36	; 0x24
 8014c32:	4618      	mov	r0, r3
 8014c34:	f000 fd6e 	bl	8015714 <xTaskRemoveFromEventList>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d001      	beq.n	8014c42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014c3e:	f000 fea7 	bl	8015990 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014c42:	7bfb      	ldrb	r3, [r7, #15]
 8014c44:	3b01      	subs	r3, #1
 8014c46:	b2db      	uxtb	r3, r3
 8014c48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	dce9      	bgt.n	8014c26 <prvUnlockQueue+0x16>
 8014c52:	e000      	b.n	8014c56 <prvUnlockQueue+0x46>
					break;
 8014c54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	22ff      	movs	r2, #255	; 0xff
 8014c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014c5e:	f001 fd39 	bl	80166d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014c62:	f001 fd07 	bl	8016674 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014c6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014c6e:	e011      	b.n	8014c94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	691b      	ldr	r3, [r3, #16]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d012      	beq.n	8014c9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	3310      	adds	r3, #16
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f000 fd49 	bl	8015714 <xTaskRemoveFromEventList>
 8014c82:	4603      	mov	r3, r0
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d001      	beq.n	8014c8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014c88:	f000 fe82 	bl	8015990 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014c8c:	7bbb      	ldrb	r3, [r7, #14]
 8014c8e:	3b01      	subs	r3, #1
 8014c90:	b2db      	uxtb	r3, r3
 8014c92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014c94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	dce9      	bgt.n	8014c70 <prvUnlockQueue+0x60>
 8014c9c:	e000      	b.n	8014ca0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014c9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	22ff      	movs	r2, #255	; 0xff
 8014ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014ca8:	f001 fd14 	bl	80166d4 <vPortExitCritical>
}
 8014cac:	bf00      	nop
 8014cae:	3710      	adds	r7, #16
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}

08014cb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b084      	sub	sp, #16
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014cbc:	f001 fcda 	bl	8016674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d102      	bne.n	8014cce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014cc8:	2301      	movs	r3, #1
 8014cca:	60fb      	str	r3, [r7, #12]
 8014ccc:	e001      	b.n	8014cd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014cce:	2300      	movs	r3, #0
 8014cd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014cd2:	f001 fcff 	bl	80166d4 <vPortExitCritical>

	return xReturn;
 8014cd6:	68fb      	ldr	r3, [r7, #12]
}
 8014cd8:	4618      	mov	r0, r3
 8014cda:	3710      	adds	r7, #16
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	bd80      	pop	{r7, pc}

08014ce0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b084      	sub	sp, #16
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014ce8:	f001 fcc4 	bl	8016674 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	d102      	bne.n	8014cfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	60fb      	str	r3, [r7, #12]
 8014cfc:	e001      	b.n	8014d02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014cfe:	2300      	movs	r3, #0
 8014d00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014d02:	f001 fce7 	bl	80166d4 <vPortExitCritical>

	return xReturn;
 8014d06:	68fb      	ldr	r3, [r7, #12]
}
 8014d08:	4618      	mov	r0, r3
 8014d0a:	3710      	adds	r7, #16
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}

08014d10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014d10:	b480      	push	{r7}
 8014d12:	b085      	sub	sp, #20
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
 8014d18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	60fb      	str	r3, [r7, #12]
 8014d1e:	e014      	b.n	8014d4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014d20:	4a0f      	ldr	r2, [pc, #60]	; (8014d60 <vQueueAddToRegistry+0x50>)
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d10b      	bne.n	8014d44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014d2c:	490c      	ldr	r1, [pc, #48]	; (8014d60 <vQueueAddToRegistry+0x50>)
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	683a      	ldr	r2, [r7, #0]
 8014d32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014d36:	4a0a      	ldr	r2, [pc, #40]	; (8014d60 <vQueueAddToRegistry+0x50>)
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	00db      	lsls	r3, r3, #3
 8014d3c:	4413      	add	r3, r2
 8014d3e:	687a      	ldr	r2, [r7, #4]
 8014d40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014d42:	e006      	b.n	8014d52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	3301      	adds	r3, #1
 8014d48:	60fb      	str	r3, [r7, #12]
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	2b07      	cmp	r3, #7
 8014d4e:	d9e7      	bls.n	8014d20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014d50:	bf00      	nop
 8014d52:	bf00      	nop
 8014d54:	3714      	adds	r7, #20
 8014d56:	46bd      	mov	sp, r7
 8014d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5c:	4770      	bx	lr
 8014d5e:	bf00      	nop
 8014d60:	2400134c 	.word	0x2400134c

08014d64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b086      	sub	sp, #24
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	60f8      	str	r0, [r7, #12]
 8014d6c:	60b9      	str	r1, [r7, #8]
 8014d6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014d74:	f001 fc7e 	bl	8016674 <vPortEnterCritical>
 8014d78:	697b      	ldr	r3, [r7, #20]
 8014d7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014d7e:	b25b      	sxtb	r3, r3
 8014d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014d84:	d103      	bne.n	8014d8e <vQueueWaitForMessageRestricted+0x2a>
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	2200      	movs	r2, #0
 8014d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014d94:	b25b      	sxtb	r3, r3
 8014d96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014d9a:	d103      	bne.n	8014da4 <vQueueWaitForMessageRestricted+0x40>
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014da4:	f001 fc96 	bl	80166d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014da8:	697b      	ldr	r3, [r7, #20]
 8014daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d106      	bne.n	8014dbe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014db0:	697b      	ldr	r3, [r7, #20]
 8014db2:	3324      	adds	r3, #36	; 0x24
 8014db4:	687a      	ldr	r2, [r7, #4]
 8014db6:	68b9      	ldr	r1, [r7, #8]
 8014db8:	4618      	mov	r0, r3
 8014dba:	f000 fc7f 	bl	80156bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014dbe:	6978      	ldr	r0, [r7, #20]
 8014dc0:	f7ff ff26 	bl	8014c10 <prvUnlockQueue>
	}
 8014dc4:	bf00      	nop
 8014dc6:	3718      	adds	r7, #24
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}

08014dcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b08e      	sub	sp, #56	; 0x38
 8014dd0:	af04      	add	r7, sp, #16
 8014dd2:	60f8      	str	r0, [r7, #12]
 8014dd4:	60b9      	str	r1, [r7, #8]
 8014dd6:	607a      	str	r2, [r7, #4]
 8014dd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d10a      	bne.n	8014df6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8014de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014de4:	f383 8811 	msr	BASEPRI, r3
 8014de8:	f3bf 8f6f 	isb	sy
 8014dec:	f3bf 8f4f 	dsb	sy
 8014df0:	623b      	str	r3, [r7, #32]
}
 8014df2:	bf00      	nop
 8014df4:	e7fe      	b.n	8014df4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d10a      	bne.n	8014e12 <xTaskCreateStatic+0x46>
	__asm volatile
 8014dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e00:	f383 8811 	msr	BASEPRI, r3
 8014e04:	f3bf 8f6f 	isb	sy
 8014e08:	f3bf 8f4f 	dsb	sy
 8014e0c:	61fb      	str	r3, [r7, #28]
}
 8014e0e:	bf00      	nop
 8014e10:	e7fe      	b.n	8014e10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014e12:	235c      	movs	r3, #92	; 0x5c
 8014e14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014e16:	693b      	ldr	r3, [r7, #16]
 8014e18:	2b5c      	cmp	r3, #92	; 0x5c
 8014e1a:	d00a      	beq.n	8014e32 <xTaskCreateStatic+0x66>
	__asm volatile
 8014e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e20:	f383 8811 	msr	BASEPRI, r3
 8014e24:	f3bf 8f6f 	isb	sy
 8014e28:	f3bf 8f4f 	dsb	sy
 8014e2c:	61bb      	str	r3, [r7, #24]
}
 8014e2e:	bf00      	nop
 8014e30:	e7fe      	b.n	8014e30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014e32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d01e      	beq.n	8014e78 <xTaskCreateStatic+0xac>
 8014e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d01b      	beq.n	8014e78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e4c:	2202      	movs	r2, #2
 8014e4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014e52:	2300      	movs	r3, #0
 8014e54:	9303      	str	r3, [sp, #12]
 8014e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e58:	9302      	str	r3, [sp, #8]
 8014e5a:	f107 0314 	add.w	r3, r7, #20
 8014e5e:	9301      	str	r3, [sp, #4]
 8014e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e62:	9300      	str	r3, [sp, #0]
 8014e64:	683b      	ldr	r3, [r7, #0]
 8014e66:	687a      	ldr	r2, [r7, #4]
 8014e68:	68b9      	ldr	r1, [r7, #8]
 8014e6a:	68f8      	ldr	r0, [r7, #12]
 8014e6c:	f000 f850 	bl	8014f10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014e70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014e72:	f000 f8dd 	bl	8015030 <prvAddNewTaskToReadyList>
 8014e76:	e001      	b.n	8014e7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014e78:	2300      	movs	r3, #0
 8014e7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014e7c:	697b      	ldr	r3, [r7, #20]
	}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3728      	adds	r7, #40	; 0x28
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}

08014e86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014e86:	b580      	push	{r7, lr}
 8014e88:	b08c      	sub	sp, #48	; 0x30
 8014e8a:	af04      	add	r7, sp, #16
 8014e8c:	60f8      	str	r0, [r7, #12]
 8014e8e:	60b9      	str	r1, [r7, #8]
 8014e90:	603b      	str	r3, [r7, #0]
 8014e92:	4613      	mov	r3, r2
 8014e94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014e96:	88fb      	ldrh	r3, [r7, #6]
 8014e98:	009b      	lsls	r3, r3, #2
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	f001 fd0c 	bl	80168b8 <pvPortMalloc>
 8014ea0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014ea2:	697b      	ldr	r3, [r7, #20]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d00e      	beq.n	8014ec6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014ea8:	205c      	movs	r0, #92	; 0x5c
 8014eaa:	f001 fd05 	bl	80168b8 <pvPortMalloc>
 8014eae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014eb0:	69fb      	ldr	r3, [r7, #28]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d003      	beq.n	8014ebe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014eb6:	69fb      	ldr	r3, [r7, #28]
 8014eb8:	697a      	ldr	r2, [r7, #20]
 8014eba:	631a      	str	r2, [r3, #48]	; 0x30
 8014ebc:	e005      	b.n	8014eca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014ebe:	6978      	ldr	r0, [r7, #20]
 8014ec0:	f001 fdc6 	bl	8016a50 <vPortFree>
 8014ec4:	e001      	b.n	8014eca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014eca:	69fb      	ldr	r3, [r7, #28]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d017      	beq.n	8014f00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014ed0:	69fb      	ldr	r3, [r7, #28]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014ed8:	88fa      	ldrh	r2, [r7, #6]
 8014eda:	2300      	movs	r3, #0
 8014edc:	9303      	str	r3, [sp, #12]
 8014ede:	69fb      	ldr	r3, [r7, #28]
 8014ee0:	9302      	str	r3, [sp, #8]
 8014ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ee4:	9301      	str	r3, [sp, #4]
 8014ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ee8:	9300      	str	r3, [sp, #0]
 8014eea:	683b      	ldr	r3, [r7, #0]
 8014eec:	68b9      	ldr	r1, [r7, #8]
 8014eee:	68f8      	ldr	r0, [r7, #12]
 8014ef0:	f000 f80e 	bl	8014f10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014ef4:	69f8      	ldr	r0, [r7, #28]
 8014ef6:	f000 f89b 	bl	8015030 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014efa:	2301      	movs	r3, #1
 8014efc:	61bb      	str	r3, [r7, #24]
 8014efe:	e002      	b.n	8014f06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014f06:	69bb      	ldr	r3, [r7, #24]
	}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	3720      	adds	r7, #32
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}

08014f10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b088      	sub	sp, #32
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	60f8      	str	r0, [r7, #12]
 8014f18:	60b9      	str	r1, [r7, #8]
 8014f1a:	607a      	str	r2, [r7, #4]
 8014f1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	009b      	lsls	r3, r3, #2
 8014f26:	461a      	mov	r2, r3
 8014f28:	21a5      	movs	r1, #165	; 0xa5
 8014f2a:	f001 fef7 	bl	8016d1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014f32:	6879      	ldr	r1, [r7, #4]
 8014f34:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8014f38:	440b      	add	r3, r1
 8014f3a:	009b      	lsls	r3, r3, #2
 8014f3c:	4413      	add	r3, r2
 8014f3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014f40:	69bb      	ldr	r3, [r7, #24]
 8014f42:	f023 0307 	bic.w	r3, r3, #7
 8014f46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014f48:	69bb      	ldr	r3, [r7, #24]
 8014f4a:	f003 0307 	and.w	r3, r3, #7
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d00a      	beq.n	8014f68 <prvInitialiseNewTask+0x58>
	__asm volatile
 8014f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f56:	f383 8811 	msr	BASEPRI, r3
 8014f5a:	f3bf 8f6f 	isb	sy
 8014f5e:	f3bf 8f4f 	dsb	sy
 8014f62:	617b      	str	r3, [r7, #20]
}
 8014f64:	bf00      	nop
 8014f66:	e7fe      	b.n	8014f66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014f68:	68bb      	ldr	r3, [r7, #8]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d01f      	beq.n	8014fae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014f6e:	2300      	movs	r3, #0
 8014f70:	61fb      	str	r3, [r7, #28]
 8014f72:	e012      	b.n	8014f9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014f74:	68ba      	ldr	r2, [r7, #8]
 8014f76:	69fb      	ldr	r3, [r7, #28]
 8014f78:	4413      	add	r3, r2
 8014f7a:	7819      	ldrb	r1, [r3, #0]
 8014f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f7e:	69fb      	ldr	r3, [r7, #28]
 8014f80:	4413      	add	r3, r2
 8014f82:	3334      	adds	r3, #52	; 0x34
 8014f84:	460a      	mov	r2, r1
 8014f86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014f88:	68ba      	ldr	r2, [r7, #8]
 8014f8a:	69fb      	ldr	r3, [r7, #28]
 8014f8c:	4413      	add	r3, r2
 8014f8e:	781b      	ldrb	r3, [r3, #0]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d006      	beq.n	8014fa2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014f94:	69fb      	ldr	r3, [r7, #28]
 8014f96:	3301      	adds	r3, #1
 8014f98:	61fb      	str	r3, [r7, #28]
 8014f9a:	69fb      	ldr	r3, [r7, #28]
 8014f9c:	2b0f      	cmp	r3, #15
 8014f9e:	d9e9      	bls.n	8014f74 <prvInitialiseNewTask+0x64>
 8014fa0:	e000      	b.n	8014fa4 <prvInitialiseNewTask+0x94>
			{
				break;
 8014fa2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014fac:	e003      	b.n	8014fb6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fb8:	2b37      	cmp	r3, #55	; 0x37
 8014fba:	d901      	bls.n	8014fc0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014fbc:	2337      	movs	r3, #55	; 0x37
 8014fbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fce:	2200      	movs	r2, #0
 8014fd0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd4:	3304      	adds	r3, #4
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f7ff f882 	bl	80140e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fde:	3318      	adds	r3, #24
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f7ff f87d 	bl	80140e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014fea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ff4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ffa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ffe:	2200      	movs	r2, #0
 8015000:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015004:	2200      	movs	r2, #0
 8015006:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801500a:	683a      	ldr	r2, [r7, #0]
 801500c:	68f9      	ldr	r1, [r7, #12]
 801500e:	69b8      	ldr	r0, [r7, #24]
 8015010:	f001 fa06 	bl	8016420 <pxPortInitialiseStack>
 8015014:	4602      	mov	r2, r0
 8015016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015018:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801501a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801501c:	2b00      	cmp	r3, #0
 801501e:	d002      	beq.n	8015026 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015026:	bf00      	nop
 8015028:	3720      	adds	r7, #32
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
	...

08015030 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b082      	sub	sp, #8
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015038:	f001 fb1c 	bl	8016674 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801503c:	4b2d      	ldr	r3, [pc, #180]	; (80150f4 <prvAddNewTaskToReadyList+0xc4>)
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	3301      	adds	r3, #1
 8015042:	4a2c      	ldr	r2, [pc, #176]	; (80150f4 <prvAddNewTaskToReadyList+0xc4>)
 8015044:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015046:	4b2c      	ldr	r3, [pc, #176]	; (80150f8 <prvAddNewTaskToReadyList+0xc8>)
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d109      	bne.n	8015062 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801504e:	4a2a      	ldr	r2, [pc, #168]	; (80150f8 <prvAddNewTaskToReadyList+0xc8>)
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015054:	4b27      	ldr	r3, [pc, #156]	; (80150f4 <prvAddNewTaskToReadyList+0xc4>)
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	2b01      	cmp	r3, #1
 801505a:	d110      	bne.n	801507e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801505c:	f000 fcbc 	bl	80159d8 <prvInitialiseTaskLists>
 8015060:	e00d      	b.n	801507e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015062:	4b26      	ldr	r3, [pc, #152]	; (80150fc <prvAddNewTaskToReadyList+0xcc>)
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d109      	bne.n	801507e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801506a:	4b23      	ldr	r3, [pc, #140]	; (80150f8 <prvAddNewTaskToReadyList+0xc8>)
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015074:	429a      	cmp	r2, r3
 8015076:	d802      	bhi.n	801507e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015078:	4a1f      	ldr	r2, [pc, #124]	; (80150f8 <prvAddNewTaskToReadyList+0xc8>)
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801507e:	4b20      	ldr	r3, [pc, #128]	; (8015100 <prvAddNewTaskToReadyList+0xd0>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	3301      	adds	r3, #1
 8015084:	4a1e      	ldr	r2, [pc, #120]	; (8015100 <prvAddNewTaskToReadyList+0xd0>)
 8015086:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015088:	4b1d      	ldr	r3, [pc, #116]	; (8015100 <prvAddNewTaskToReadyList+0xd0>)
 801508a:	681a      	ldr	r2, [r3, #0]
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015094:	4b1b      	ldr	r3, [pc, #108]	; (8015104 <prvAddNewTaskToReadyList+0xd4>)
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	429a      	cmp	r2, r3
 801509a:	d903      	bls.n	80150a4 <prvAddNewTaskToReadyList+0x74>
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150a0:	4a18      	ldr	r2, [pc, #96]	; (8015104 <prvAddNewTaskToReadyList+0xd4>)
 80150a2:	6013      	str	r3, [r2, #0]
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150a8:	4613      	mov	r3, r2
 80150aa:	009b      	lsls	r3, r3, #2
 80150ac:	4413      	add	r3, r2
 80150ae:	009b      	lsls	r3, r3, #2
 80150b0:	4a15      	ldr	r2, [pc, #84]	; (8015108 <prvAddNewTaskToReadyList+0xd8>)
 80150b2:	441a      	add	r2, r3
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	3304      	adds	r3, #4
 80150b8:	4619      	mov	r1, r3
 80150ba:	4610      	mov	r0, r2
 80150bc:	f7ff f81d 	bl	80140fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80150c0:	f001 fb08 	bl	80166d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80150c4:	4b0d      	ldr	r3, [pc, #52]	; (80150fc <prvAddNewTaskToReadyList+0xcc>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d00e      	beq.n	80150ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80150cc:	4b0a      	ldr	r3, [pc, #40]	; (80150f8 <prvAddNewTaskToReadyList+0xc8>)
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150d6:	429a      	cmp	r2, r3
 80150d8:	d207      	bcs.n	80150ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80150da:	4b0c      	ldr	r3, [pc, #48]	; (801510c <prvAddNewTaskToReadyList+0xdc>)
 80150dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150e0:	601a      	str	r2, [r3, #0]
 80150e2:	f3bf 8f4f 	dsb	sy
 80150e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80150ea:	bf00      	nop
 80150ec:	3708      	adds	r7, #8
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bd80      	pop	{r7, pc}
 80150f2:	bf00      	nop
 80150f4:	24001860 	.word	0x24001860
 80150f8:	2400138c 	.word	0x2400138c
 80150fc:	2400186c 	.word	0x2400186c
 8015100:	2400187c 	.word	0x2400187c
 8015104:	24001868 	.word	0x24001868
 8015108:	24001390 	.word	0x24001390
 801510c:	e000ed04 	.word	0xe000ed04

08015110 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015110:	b580      	push	{r7, lr}
 8015112:	b084      	sub	sp, #16
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015118:	2300      	movs	r3, #0
 801511a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d017      	beq.n	8015152 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015122:	4b13      	ldr	r3, [pc, #76]	; (8015170 <vTaskDelay+0x60>)
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d00a      	beq.n	8015140 <vTaskDelay+0x30>
	__asm volatile
 801512a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801512e:	f383 8811 	msr	BASEPRI, r3
 8015132:	f3bf 8f6f 	isb	sy
 8015136:	f3bf 8f4f 	dsb	sy
 801513a:	60bb      	str	r3, [r7, #8]
}
 801513c:	bf00      	nop
 801513e:	e7fe      	b.n	801513e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015140:	f000 f880 	bl	8015244 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015144:	2100      	movs	r1, #0
 8015146:	6878      	ldr	r0, [r7, #4]
 8015148:	f000 fda8 	bl	8015c9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801514c:	f000 f888 	bl	8015260 <xTaskResumeAll>
 8015150:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d107      	bne.n	8015168 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8015158:	4b06      	ldr	r3, [pc, #24]	; (8015174 <vTaskDelay+0x64>)
 801515a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801515e:	601a      	str	r2, [r3, #0]
 8015160:	f3bf 8f4f 	dsb	sy
 8015164:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015168:	bf00      	nop
 801516a:	3710      	adds	r7, #16
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}
 8015170:	24001888 	.word	0x24001888
 8015174:	e000ed04 	.word	0xe000ed04

08015178 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b08a      	sub	sp, #40	; 0x28
 801517c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801517e:	2300      	movs	r3, #0
 8015180:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015182:	2300      	movs	r3, #0
 8015184:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015186:	463a      	mov	r2, r7
 8015188:	1d39      	adds	r1, r7, #4
 801518a:	f107 0308 	add.w	r3, r7, #8
 801518e:	4618      	mov	r0, r3
 8015190:	f7fe fce6 	bl	8013b60 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015194:	6839      	ldr	r1, [r7, #0]
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	68ba      	ldr	r2, [r7, #8]
 801519a:	9202      	str	r2, [sp, #8]
 801519c:	9301      	str	r3, [sp, #4]
 801519e:	2300      	movs	r3, #0
 80151a0:	9300      	str	r3, [sp, #0]
 80151a2:	2300      	movs	r3, #0
 80151a4:	460a      	mov	r2, r1
 80151a6:	4921      	ldr	r1, [pc, #132]	; (801522c <vTaskStartScheduler+0xb4>)
 80151a8:	4821      	ldr	r0, [pc, #132]	; (8015230 <vTaskStartScheduler+0xb8>)
 80151aa:	f7ff fe0f 	bl	8014dcc <xTaskCreateStatic>
 80151ae:	4603      	mov	r3, r0
 80151b0:	4a20      	ldr	r2, [pc, #128]	; (8015234 <vTaskStartScheduler+0xbc>)
 80151b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80151b4:	4b1f      	ldr	r3, [pc, #124]	; (8015234 <vTaskStartScheduler+0xbc>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d002      	beq.n	80151c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80151bc:	2301      	movs	r3, #1
 80151be:	617b      	str	r3, [r7, #20]
 80151c0:	e001      	b.n	80151c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80151c2:	2300      	movs	r3, #0
 80151c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80151c6:	697b      	ldr	r3, [r7, #20]
 80151c8:	2b01      	cmp	r3, #1
 80151ca:	d102      	bne.n	80151d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80151cc:	f000 fdba 	bl	8015d44 <xTimerCreateTimerTask>
 80151d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80151d2:	697b      	ldr	r3, [r7, #20]
 80151d4:	2b01      	cmp	r3, #1
 80151d6:	d116      	bne.n	8015206 <vTaskStartScheduler+0x8e>
	__asm volatile
 80151d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151dc:	f383 8811 	msr	BASEPRI, r3
 80151e0:	f3bf 8f6f 	isb	sy
 80151e4:	f3bf 8f4f 	dsb	sy
 80151e8:	613b      	str	r3, [r7, #16]
}
 80151ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80151ec:	4b12      	ldr	r3, [pc, #72]	; (8015238 <vTaskStartScheduler+0xc0>)
 80151ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80151f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80151f4:	4b11      	ldr	r3, [pc, #68]	; (801523c <vTaskStartScheduler+0xc4>)
 80151f6:	2201      	movs	r2, #1
 80151f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80151fa:	4b11      	ldr	r3, [pc, #68]	; (8015240 <vTaskStartScheduler+0xc8>)
 80151fc:	2200      	movs	r2, #0
 80151fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015200:	f001 f996 	bl	8016530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015204:	e00e      	b.n	8015224 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015206:	697b      	ldr	r3, [r7, #20]
 8015208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801520c:	d10a      	bne.n	8015224 <vTaskStartScheduler+0xac>
	__asm volatile
 801520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015212:	f383 8811 	msr	BASEPRI, r3
 8015216:	f3bf 8f6f 	isb	sy
 801521a:	f3bf 8f4f 	dsb	sy
 801521e:	60fb      	str	r3, [r7, #12]
}
 8015220:	bf00      	nop
 8015222:	e7fe      	b.n	8015222 <vTaskStartScheduler+0xaa>
}
 8015224:	bf00      	nop
 8015226:	3718      	adds	r7, #24
 8015228:	46bd      	mov	sp, r7
 801522a:	bd80      	pop	{r7, pc}
 801522c:	080179a0 	.word	0x080179a0
 8015230:	080159a9 	.word	0x080159a9
 8015234:	24001884 	.word	0x24001884
 8015238:	24001880 	.word	0x24001880
 801523c:	2400186c 	.word	0x2400186c
 8015240:	24001864 	.word	0x24001864

08015244 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015244:	b480      	push	{r7}
 8015246:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015248:	4b04      	ldr	r3, [pc, #16]	; (801525c <vTaskSuspendAll+0x18>)
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	3301      	adds	r3, #1
 801524e:	4a03      	ldr	r2, [pc, #12]	; (801525c <vTaskSuspendAll+0x18>)
 8015250:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015252:	bf00      	nop
 8015254:	46bd      	mov	sp, r7
 8015256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525a:	4770      	bx	lr
 801525c:	24001888 	.word	0x24001888

08015260 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b084      	sub	sp, #16
 8015264:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015266:	2300      	movs	r3, #0
 8015268:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801526a:	2300      	movs	r3, #0
 801526c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801526e:	4b42      	ldr	r3, [pc, #264]	; (8015378 <xTaskResumeAll+0x118>)
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d10a      	bne.n	801528c <xTaskResumeAll+0x2c>
	__asm volatile
 8015276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801527a:	f383 8811 	msr	BASEPRI, r3
 801527e:	f3bf 8f6f 	isb	sy
 8015282:	f3bf 8f4f 	dsb	sy
 8015286:	603b      	str	r3, [r7, #0]
}
 8015288:	bf00      	nop
 801528a:	e7fe      	b.n	801528a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801528c:	f001 f9f2 	bl	8016674 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015290:	4b39      	ldr	r3, [pc, #228]	; (8015378 <xTaskResumeAll+0x118>)
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	3b01      	subs	r3, #1
 8015296:	4a38      	ldr	r2, [pc, #224]	; (8015378 <xTaskResumeAll+0x118>)
 8015298:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801529a:	4b37      	ldr	r3, [pc, #220]	; (8015378 <xTaskResumeAll+0x118>)
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d162      	bne.n	8015368 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80152a2:	4b36      	ldr	r3, [pc, #216]	; (801537c <xTaskResumeAll+0x11c>)
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d05e      	beq.n	8015368 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80152aa:	e02f      	b.n	801530c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80152ac:	4b34      	ldr	r3, [pc, #208]	; (8015380 <xTaskResumeAll+0x120>)
 80152ae:	68db      	ldr	r3, [r3, #12]
 80152b0:	68db      	ldr	r3, [r3, #12]
 80152b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80152b4:	68fb      	ldr	r3, [r7, #12]
 80152b6:	3318      	adds	r3, #24
 80152b8:	4618      	mov	r0, r3
 80152ba:	f7fe ff7b 	bl	80141b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	3304      	adds	r3, #4
 80152c2:	4618      	mov	r0, r3
 80152c4:	f7fe ff76 	bl	80141b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152cc:	4b2d      	ldr	r3, [pc, #180]	; (8015384 <xTaskResumeAll+0x124>)
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	429a      	cmp	r2, r3
 80152d2:	d903      	bls.n	80152dc <xTaskResumeAll+0x7c>
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152d8:	4a2a      	ldr	r2, [pc, #168]	; (8015384 <xTaskResumeAll+0x124>)
 80152da:	6013      	str	r3, [r2, #0]
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152e0:	4613      	mov	r3, r2
 80152e2:	009b      	lsls	r3, r3, #2
 80152e4:	4413      	add	r3, r2
 80152e6:	009b      	lsls	r3, r3, #2
 80152e8:	4a27      	ldr	r2, [pc, #156]	; (8015388 <xTaskResumeAll+0x128>)
 80152ea:	441a      	add	r2, r3
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	3304      	adds	r3, #4
 80152f0:	4619      	mov	r1, r3
 80152f2:	4610      	mov	r0, r2
 80152f4:	f7fe ff01 	bl	80140fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152fc:	4b23      	ldr	r3, [pc, #140]	; (801538c <xTaskResumeAll+0x12c>)
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015302:	429a      	cmp	r2, r3
 8015304:	d302      	bcc.n	801530c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8015306:	4b22      	ldr	r3, [pc, #136]	; (8015390 <xTaskResumeAll+0x130>)
 8015308:	2201      	movs	r2, #1
 801530a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801530c:	4b1c      	ldr	r3, [pc, #112]	; (8015380 <xTaskResumeAll+0x120>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d1cb      	bne.n	80152ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d001      	beq.n	801531e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801531a:	f000 fbfb 	bl	8015b14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801531e:	4b1d      	ldr	r3, [pc, #116]	; (8015394 <xTaskResumeAll+0x134>)
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d010      	beq.n	801534c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801532a:	f000 f847 	bl	80153bc <xTaskIncrementTick>
 801532e:	4603      	mov	r3, r0
 8015330:	2b00      	cmp	r3, #0
 8015332:	d002      	beq.n	801533a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015334:	4b16      	ldr	r3, [pc, #88]	; (8015390 <xTaskResumeAll+0x130>)
 8015336:	2201      	movs	r2, #1
 8015338:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	3b01      	subs	r3, #1
 801533e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d1f1      	bne.n	801532a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8015346:	4b13      	ldr	r3, [pc, #76]	; (8015394 <xTaskResumeAll+0x134>)
 8015348:	2200      	movs	r2, #0
 801534a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801534c:	4b10      	ldr	r3, [pc, #64]	; (8015390 <xTaskResumeAll+0x130>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d009      	beq.n	8015368 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015354:	2301      	movs	r3, #1
 8015356:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015358:	4b0f      	ldr	r3, [pc, #60]	; (8015398 <xTaskResumeAll+0x138>)
 801535a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801535e:	601a      	str	r2, [r3, #0]
 8015360:	f3bf 8f4f 	dsb	sy
 8015364:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015368:	f001 f9b4 	bl	80166d4 <vPortExitCritical>

	return xAlreadyYielded;
 801536c:	68bb      	ldr	r3, [r7, #8]
}
 801536e:	4618      	mov	r0, r3
 8015370:	3710      	adds	r7, #16
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}
 8015376:	bf00      	nop
 8015378:	24001888 	.word	0x24001888
 801537c:	24001860 	.word	0x24001860
 8015380:	24001820 	.word	0x24001820
 8015384:	24001868 	.word	0x24001868
 8015388:	24001390 	.word	0x24001390
 801538c:	2400138c 	.word	0x2400138c
 8015390:	24001874 	.word	0x24001874
 8015394:	24001870 	.word	0x24001870
 8015398:	e000ed04 	.word	0xe000ed04

0801539c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801539c:	b480      	push	{r7}
 801539e:	b083      	sub	sp, #12
 80153a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80153a2:	4b05      	ldr	r3, [pc, #20]	; (80153b8 <xTaskGetTickCount+0x1c>)
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80153a8:	687b      	ldr	r3, [r7, #4]
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	370c      	adds	r7, #12
 80153ae:	46bd      	mov	sp, r7
 80153b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b4:	4770      	bx	lr
 80153b6:	bf00      	nop
 80153b8:	24001864 	.word	0x24001864

080153bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b086      	sub	sp, #24
 80153c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80153c2:	2300      	movs	r3, #0
 80153c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80153c6:	4b53      	ldr	r3, [pc, #332]	; (8015514 <xTaskIncrementTick+0x158>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	f040 8095 	bne.w	80154fa <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80153d0:	4b51      	ldr	r3, [pc, #324]	; (8015518 <xTaskIncrementTick+0x15c>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	3301      	adds	r3, #1
 80153d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80153d8:	4a4f      	ldr	r2, [pc, #316]	; (8015518 <xTaskIncrementTick+0x15c>)
 80153da:	693b      	ldr	r3, [r7, #16]
 80153dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80153de:	693b      	ldr	r3, [r7, #16]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d120      	bne.n	8015426 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80153e4:	4b4d      	ldr	r3, [pc, #308]	; (801551c <xTaskIncrementTick+0x160>)
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d00a      	beq.n	8015404 <xTaskIncrementTick+0x48>
	__asm volatile
 80153ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153f2:	f383 8811 	msr	BASEPRI, r3
 80153f6:	f3bf 8f6f 	isb	sy
 80153fa:	f3bf 8f4f 	dsb	sy
 80153fe:	603b      	str	r3, [r7, #0]
}
 8015400:	bf00      	nop
 8015402:	e7fe      	b.n	8015402 <xTaskIncrementTick+0x46>
 8015404:	4b45      	ldr	r3, [pc, #276]	; (801551c <xTaskIncrementTick+0x160>)
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	60fb      	str	r3, [r7, #12]
 801540a:	4b45      	ldr	r3, [pc, #276]	; (8015520 <xTaskIncrementTick+0x164>)
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	4a43      	ldr	r2, [pc, #268]	; (801551c <xTaskIncrementTick+0x160>)
 8015410:	6013      	str	r3, [r2, #0]
 8015412:	4a43      	ldr	r2, [pc, #268]	; (8015520 <xTaskIncrementTick+0x164>)
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	6013      	str	r3, [r2, #0]
 8015418:	4b42      	ldr	r3, [pc, #264]	; (8015524 <xTaskIncrementTick+0x168>)
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	3301      	adds	r3, #1
 801541e:	4a41      	ldr	r2, [pc, #260]	; (8015524 <xTaskIncrementTick+0x168>)
 8015420:	6013      	str	r3, [r2, #0]
 8015422:	f000 fb77 	bl	8015b14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015426:	4b40      	ldr	r3, [pc, #256]	; (8015528 <xTaskIncrementTick+0x16c>)
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	693a      	ldr	r2, [r7, #16]
 801542c:	429a      	cmp	r2, r3
 801542e:	d349      	bcc.n	80154c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015430:	4b3a      	ldr	r3, [pc, #232]	; (801551c <xTaskIncrementTick+0x160>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d104      	bne.n	8015444 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801543a:	4b3b      	ldr	r3, [pc, #236]	; (8015528 <xTaskIncrementTick+0x16c>)
 801543c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015440:	601a      	str	r2, [r3, #0]
					break;
 8015442:	e03f      	b.n	80154c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015444:	4b35      	ldr	r3, [pc, #212]	; (801551c <xTaskIncrementTick+0x160>)
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	68db      	ldr	r3, [r3, #12]
 801544a:	68db      	ldr	r3, [r3, #12]
 801544c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801544e:	68bb      	ldr	r3, [r7, #8]
 8015450:	685b      	ldr	r3, [r3, #4]
 8015452:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015454:	693a      	ldr	r2, [r7, #16]
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	429a      	cmp	r2, r3
 801545a:	d203      	bcs.n	8015464 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801545c:	4a32      	ldr	r2, [pc, #200]	; (8015528 <xTaskIncrementTick+0x16c>)
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015462:	e02f      	b.n	80154c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015464:	68bb      	ldr	r3, [r7, #8]
 8015466:	3304      	adds	r3, #4
 8015468:	4618      	mov	r0, r3
 801546a:	f7fe fea3 	bl	80141b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801546e:	68bb      	ldr	r3, [r7, #8]
 8015470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015472:	2b00      	cmp	r3, #0
 8015474:	d004      	beq.n	8015480 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015476:	68bb      	ldr	r3, [r7, #8]
 8015478:	3318      	adds	r3, #24
 801547a:	4618      	mov	r0, r3
 801547c:	f7fe fe9a 	bl	80141b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015484:	4b29      	ldr	r3, [pc, #164]	; (801552c <xTaskIncrementTick+0x170>)
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	429a      	cmp	r2, r3
 801548a:	d903      	bls.n	8015494 <xTaskIncrementTick+0xd8>
 801548c:	68bb      	ldr	r3, [r7, #8]
 801548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015490:	4a26      	ldr	r2, [pc, #152]	; (801552c <xTaskIncrementTick+0x170>)
 8015492:	6013      	str	r3, [r2, #0]
 8015494:	68bb      	ldr	r3, [r7, #8]
 8015496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015498:	4613      	mov	r3, r2
 801549a:	009b      	lsls	r3, r3, #2
 801549c:	4413      	add	r3, r2
 801549e:	009b      	lsls	r3, r3, #2
 80154a0:	4a23      	ldr	r2, [pc, #140]	; (8015530 <xTaskIncrementTick+0x174>)
 80154a2:	441a      	add	r2, r3
 80154a4:	68bb      	ldr	r3, [r7, #8]
 80154a6:	3304      	adds	r3, #4
 80154a8:	4619      	mov	r1, r3
 80154aa:	4610      	mov	r0, r2
 80154ac:	f7fe fe25 	bl	80140fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154b4:	4b1f      	ldr	r3, [pc, #124]	; (8015534 <xTaskIncrementTick+0x178>)
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154ba:	429a      	cmp	r2, r3
 80154bc:	d3b8      	bcc.n	8015430 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80154be:	2301      	movs	r3, #1
 80154c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80154c2:	e7b5      	b.n	8015430 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80154c4:	4b1b      	ldr	r3, [pc, #108]	; (8015534 <xTaskIncrementTick+0x178>)
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154ca:	4919      	ldr	r1, [pc, #100]	; (8015530 <xTaskIncrementTick+0x174>)
 80154cc:	4613      	mov	r3, r2
 80154ce:	009b      	lsls	r3, r3, #2
 80154d0:	4413      	add	r3, r2
 80154d2:	009b      	lsls	r3, r3, #2
 80154d4:	440b      	add	r3, r1
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	2b01      	cmp	r3, #1
 80154da:	d901      	bls.n	80154e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80154dc:	2301      	movs	r3, #1
 80154de:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80154e0:	4b15      	ldr	r3, [pc, #84]	; (8015538 <xTaskIncrementTick+0x17c>)
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d101      	bne.n	80154ec <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80154e8:	f7eb fc36 	bl	8000d58 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80154ec:	4b13      	ldr	r3, [pc, #76]	; (801553c <xTaskIncrementTick+0x180>)
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d009      	beq.n	8015508 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80154f4:	2301      	movs	r3, #1
 80154f6:	617b      	str	r3, [r7, #20]
 80154f8:	e006      	b.n	8015508 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80154fa:	4b0f      	ldr	r3, [pc, #60]	; (8015538 <xTaskIncrementTick+0x17c>)
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	3301      	adds	r3, #1
 8015500:	4a0d      	ldr	r2, [pc, #52]	; (8015538 <xTaskIncrementTick+0x17c>)
 8015502:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8015504:	f7eb fc28 	bl	8000d58 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8015508:	697b      	ldr	r3, [r7, #20]
}
 801550a:	4618      	mov	r0, r3
 801550c:	3718      	adds	r7, #24
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}
 8015512:	bf00      	nop
 8015514:	24001888 	.word	0x24001888
 8015518:	24001864 	.word	0x24001864
 801551c:	24001818 	.word	0x24001818
 8015520:	2400181c 	.word	0x2400181c
 8015524:	24001878 	.word	0x24001878
 8015528:	24001880 	.word	0x24001880
 801552c:	24001868 	.word	0x24001868
 8015530:	24001390 	.word	0x24001390
 8015534:	2400138c 	.word	0x2400138c
 8015538:	24001870 	.word	0x24001870
 801553c:	24001874 	.word	0x24001874

08015540 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015540:	b480      	push	{r7}
 8015542:	b085      	sub	sp, #20
 8015544:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015546:	4b28      	ldr	r3, [pc, #160]	; (80155e8 <vTaskSwitchContext+0xa8>)
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d003      	beq.n	8015556 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801554e:	4b27      	ldr	r3, [pc, #156]	; (80155ec <vTaskSwitchContext+0xac>)
 8015550:	2201      	movs	r2, #1
 8015552:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015554:	e041      	b.n	80155da <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8015556:	4b25      	ldr	r3, [pc, #148]	; (80155ec <vTaskSwitchContext+0xac>)
 8015558:	2200      	movs	r2, #0
 801555a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801555c:	4b24      	ldr	r3, [pc, #144]	; (80155f0 <vTaskSwitchContext+0xb0>)
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	60fb      	str	r3, [r7, #12]
 8015562:	e010      	b.n	8015586 <vTaskSwitchContext+0x46>
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d10a      	bne.n	8015580 <vTaskSwitchContext+0x40>
	__asm volatile
 801556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801556e:	f383 8811 	msr	BASEPRI, r3
 8015572:	f3bf 8f6f 	isb	sy
 8015576:	f3bf 8f4f 	dsb	sy
 801557a:	607b      	str	r3, [r7, #4]
}
 801557c:	bf00      	nop
 801557e:	e7fe      	b.n	801557e <vTaskSwitchContext+0x3e>
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	3b01      	subs	r3, #1
 8015584:	60fb      	str	r3, [r7, #12]
 8015586:	491b      	ldr	r1, [pc, #108]	; (80155f4 <vTaskSwitchContext+0xb4>)
 8015588:	68fa      	ldr	r2, [r7, #12]
 801558a:	4613      	mov	r3, r2
 801558c:	009b      	lsls	r3, r3, #2
 801558e:	4413      	add	r3, r2
 8015590:	009b      	lsls	r3, r3, #2
 8015592:	440b      	add	r3, r1
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d0e4      	beq.n	8015564 <vTaskSwitchContext+0x24>
 801559a:	68fa      	ldr	r2, [r7, #12]
 801559c:	4613      	mov	r3, r2
 801559e:	009b      	lsls	r3, r3, #2
 80155a0:	4413      	add	r3, r2
 80155a2:	009b      	lsls	r3, r3, #2
 80155a4:	4a13      	ldr	r2, [pc, #76]	; (80155f4 <vTaskSwitchContext+0xb4>)
 80155a6:	4413      	add	r3, r2
 80155a8:	60bb      	str	r3, [r7, #8]
 80155aa:	68bb      	ldr	r3, [r7, #8]
 80155ac:	685b      	ldr	r3, [r3, #4]
 80155ae:	685a      	ldr	r2, [r3, #4]
 80155b0:	68bb      	ldr	r3, [r7, #8]
 80155b2:	605a      	str	r2, [r3, #4]
 80155b4:	68bb      	ldr	r3, [r7, #8]
 80155b6:	685a      	ldr	r2, [r3, #4]
 80155b8:	68bb      	ldr	r3, [r7, #8]
 80155ba:	3308      	adds	r3, #8
 80155bc:	429a      	cmp	r2, r3
 80155be:	d104      	bne.n	80155ca <vTaskSwitchContext+0x8a>
 80155c0:	68bb      	ldr	r3, [r7, #8]
 80155c2:	685b      	ldr	r3, [r3, #4]
 80155c4:	685a      	ldr	r2, [r3, #4]
 80155c6:	68bb      	ldr	r3, [r7, #8]
 80155c8:	605a      	str	r2, [r3, #4]
 80155ca:	68bb      	ldr	r3, [r7, #8]
 80155cc:	685b      	ldr	r3, [r3, #4]
 80155ce:	68db      	ldr	r3, [r3, #12]
 80155d0:	4a09      	ldr	r2, [pc, #36]	; (80155f8 <vTaskSwitchContext+0xb8>)
 80155d2:	6013      	str	r3, [r2, #0]
 80155d4:	4a06      	ldr	r2, [pc, #24]	; (80155f0 <vTaskSwitchContext+0xb0>)
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	6013      	str	r3, [r2, #0]
}
 80155da:	bf00      	nop
 80155dc:	3714      	adds	r7, #20
 80155de:	46bd      	mov	sp, r7
 80155e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e4:	4770      	bx	lr
 80155e6:	bf00      	nop
 80155e8:	24001888 	.word	0x24001888
 80155ec:	24001874 	.word	0x24001874
 80155f0:	24001868 	.word	0x24001868
 80155f4:	24001390 	.word	0x24001390
 80155f8:	2400138c 	.word	0x2400138c

080155fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b084      	sub	sp, #16
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d10a      	bne.n	8015622 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015610:	f383 8811 	msr	BASEPRI, r3
 8015614:	f3bf 8f6f 	isb	sy
 8015618:	f3bf 8f4f 	dsb	sy
 801561c:	60fb      	str	r3, [r7, #12]
}
 801561e:	bf00      	nop
 8015620:	e7fe      	b.n	8015620 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015622:	4b07      	ldr	r3, [pc, #28]	; (8015640 <vTaskPlaceOnEventList+0x44>)
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	3318      	adds	r3, #24
 8015628:	4619      	mov	r1, r3
 801562a:	6878      	ldr	r0, [r7, #4]
 801562c:	f7fe fd89 	bl	8014142 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015630:	2101      	movs	r1, #1
 8015632:	6838      	ldr	r0, [r7, #0]
 8015634:	f000 fb32 	bl	8015c9c <prvAddCurrentTaskToDelayedList>
}
 8015638:	bf00      	nop
 801563a:	3710      	adds	r7, #16
 801563c:	46bd      	mov	sp, r7
 801563e:	bd80      	pop	{r7, pc}
 8015640:	2400138c 	.word	0x2400138c

08015644 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b086      	sub	sp, #24
 8015648:	af00      	add	r7, sp, #0
 801564a:	60f8      	str	r0, [r7, #12]
 801564c:	60b9      	str	r1, [r7, #8]
 801564e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d10a      	bne.n	801566c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8015656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801565a:	f383 8811 	msr	BASEPRI, r3
 801565e:	f3bf 8f6f 	isb	sy
 8015662:	f3bf 8f4f 	dsb	sy
 8015666:	617b      	str	r3, [r7, #20]
}
 8015668:	bf00      	nop
 801566a:	e7fe      	b.n	801566a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801566c:	4b11      	ldr	r3, [pc, #68]	; (80156b4 <vTaskPlaceOnUnorderedEventList+0x70>)
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d10a      	bne.n	801568a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8015674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015678:	f383 8811 	msr	BASEPRI, r3
 801567c:	f3bf 8f6f 	isb	sy
 8015680:	f3bf 8f4f 	dsb	sy
 8015684:	613b      	str	r3, [r7, #16]
}
 8015686:	bf00      	nop
 8015688:	e7fe      	b.n	8015688 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801568a:	4b0b      	ldr	r3, [pc, #44]	; (80156b8 <vTaskPlaceOnUnorderedEventList+0x74>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	68ba      	ldr	r2, [r7, #8]
 8015690:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8015694:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015696:	4b08      	ldr	r3, [pc, #32]	; (80156b8 <vTaskPlaceOnUnorderedEventList+0x74>)
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	3318      	adds	r3, #24
 801569c:	4619      	mov	r1, r3
 801569e:	68f8      	ldr	r0, [r7, #12]
 80156a0:	f7fe fd2b 	bl	80140fa <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80156a4:	2101      	movs	r1, #1
 80156a6:	6878      	ldr	r0, [r7, #4]
 80156a8:	f000 faf8 	bl	8015c9c <prvAddCurrentTaskToDelayedList>
}
 80156ac:	bf00      	nop
 80156ae:	3718      	adds	r7, #24
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	24001888 	.word	0x24001888
 80156b8:	2400138c 	.word	0x2400138c

080156bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b086      	sub	sp, #24
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	60f8      	str	r0, [r7, #12]
 80156c4:	60b9      	str	r1, [r7, #8]
 80156c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d10a      	bne.n	80156e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80156ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156d2:	f383 8811 	msr	BASEPRI, r3
 80156d6:	f3bf 8f6f 	isb	sy
 80156da:	f3bf 8f4f 	dsb	sy
 80156de:	617b      	str	r3, [r7, #20]
}
 80156e0:	bf00      	nop
 80156e2:	e7fe      	b.n	80156e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80156e4:	4b0a      	ldr	r3, [pc, #40]	; (8015710 <vTaskPlaceOnEventListRestricted+0x54>)
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	3318      	adds	r3, #24
 80156ea:	4619      	mov	r1, r3
 80156ec:	68f8      	ldr	r0, [r7, #12]
 80156ee:	f7fe fd04 	bl	80140fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d002      	beq.n	80156fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80156f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80156fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80156fe:	6879      	ldr	r1, [r7, #4]
 8015700:	68b8      	ldr	r0, [r7, #8]
 8015702:	f000 facb 	bl	8015c9c <prvAddCurrentTaskToDelayedList>
	}
 8015706:	bf00      	nop
 8015708:	3718      	adds	r7, #24
 801570a:	46bd      	mov	sp, r7
 801570c:	bd80      	pop	{r7, pc}
 801570e:	bf00      	nop
 8015710:	2400138c 	.word	0x2400138c

08015714 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b086      	sub	sp, #24
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	68db      	ldr	r3, [r3, #12]
 8015720:	68db      	ldr	r3, [r3, #12]
 8015722:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015724:	693b      	ldr	r3, [r7, #16]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d10a      	bne.n	8015740 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801572e:	f383 8811 	msr	BASEPRI, r3
 8015732:	f3bf 8f6f 	isb	sy
 8015736:	f3bf 8f4f 	dsb	sy
 801573a:	60fb      	str	r3, [r7, #12]
}
 801573c:	bf00      	nop
 801573e:	e7fe      	b.n	801573e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015740:	693b      	ldr	r3, [r7, #16]
 8015742:	3318      	adds	r3, #24
 8015744:	4618      	mov	r0, r3
 8015746:	f7fe fd35 	bl	80141b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801574a:	4b1e      	ldr	r3, [pc, #120]	; (80157c4 <xTaskRemoveFromEventList+0xb0>)
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d11d      	bne.n	801578e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015752:	693b      	ldr	r3, [r7, #16]
 8015754:	3304      	adds	r3, #4
 8015756:	4618      	mov	r0, r3
 8015758:	f7fe fd2c 	bl	80141b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801575c:	693b      	ldr	r3, [r7, #16]
 801575e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015760:	4b19      	ldr	r3, [pc, #100]	; (80157c8 <xTaskRemoveFromEventList+0xb4>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	429a      	cmp	r2, r3
 8015766:	d903      	bls.n	8015770 <xTaskRemoveFromEventList+0x5c>
 8015768:	693b      	ldr	r3, [r7, #16]
 801576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801576c:	4a16      	ldr	r2, [pc, #88]	; (80157c8 <xTaskRemoveFromEventList+0xb4>)
 801576e:	6013      	str	r3, [r2, #0]
 8015770:	693b      	ldr	r3, [r7, #16]
 8015772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015774:	4613      	mov	r3, r2
 8015776:	009b      	lsls	r3, r3, #2
 8015778:	4413      	add	r3, r2
 801577a:	009b      	lsls	r3, r3, #2
 801577c:	4a13      	ldr	r2, [pc, #76]	; (80157cc <xTaskRemoveFromEventList+0xb8>)
 801577e:	441a      	add	r2, r3
 8015780:	693b      	ldr	r3, [r7, #16]
 8015782:	3304      	adds	r3, #4
 8015784:	4619      	mov	r1, r3
 8015786:	4610      	mov	r0, r2
 8015788:	f7fe fcb7 	bl	80140fa <vListInsertEnd>
 801578c:	e005      	b.n	801579a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801578e:	693b      	ldr	r3, [r7, #16]
 8015790:	3318      	adds	r3, #24
 8015792:	4619      	mov	r1, r3
 8015794:	480e      	ldr	r0, [pc, #56]	; (80157d0 <xTaskRemoveFromEventList+0xbc>)
 8015796:	f7fe fcb0 	bl	80140fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801579a:	693b      	ldr	r3, [r7, #16]
 801579c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801579e:	4b0d      	ldr	r3, [pc, #52]	; (80157d4 <xTaskRemoveFromEventList+0xc0>)
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157a4:	429a      	cmp	r2, r3
 80157a6:	d905      	bls.n	80157b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80157a8:	2301      	movs	r3, #1
 80157aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80157ac:	4b0a      	ldr	r3, [pc, #40]	; (80157d8 <xTaskRemoveFromEventList+0xc4>)
 80157ae:	2201      	movs	r2, #1
 80157b0:	601a      	str	r2, [r3, #0]
 80157b2:	e001      	b.n	80157b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80157b4:	2300      	movs	r3, #0
 80157b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80157b8:	697b      	ldr	r3, [r7, #20]
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	3718      	adds	r7, #24
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	24001888 	.word	0x24001888
 80157c8:	24001868 	.word	0x24001868
 80157cc:	24001390 	.word	0x24001390
 80157d0:	24001820 	.word	0x24001820
 80157d4:	2400138c 	.word	0x2400138c
 80157d8:	24001874 	.word	0x24001874

080157dc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b086      	sub	sp, #24
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]
 80157e4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80157e6:	4b29      	ldr	r3, [pc, #164]	; (801588c <vTaskRemoveFromUnorderedEventList+0xb0>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d10a      	bne.n	8015804 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80157ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157f2:	f383 8811 	msr	BASEPRI, r3
 80157f6:	f3bf 8f6f 	isb	sy
 80157fa:	f3bf 8f4f 	dsb	sy
 80157fe:	613b      	str	r3, [r7, #16]
}
 8015800:	bf00      	nop
 8015802:	e7fe      	b.n	8015802 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	68db      	ldr	r3, [r3, #12]
 8015812:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8015814:	697b      	ldr	r3, [r7, #20]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d10a      	bne.n	8015830 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801581a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801581e:	f383 8811 	msr	BASEPRI, r3
 8015822:	f3bf 8f6f 	isb	sy
 8015826:	f3bf 8f4f 	dsb	sy
 801582a:	60fb      	str	r3, [r7, #12]
}
 801582c:	bf00      	nop
 801582e:	e7fe      	b.n	801582e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f7fe fcbf 	bl	80141b4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	3304      	adds	r3, #4
 801583a:	4618      	mov	r0, r3
 801583c:	f7fe fcba 	bl	80141b4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015844:	4b12      	ldr	r3, [pc, #72]	; (8015890 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	429a      	cmp	r2, r3
 801584a:	d903      	bls.n	8015854 <vTaskRemoveFromUnorderedEventList+0x78>
 801584c:	697b      	ldr	r3, [r7, #20]
 801584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015850:	4a0f      	ldr	r2, [pc, #60]	; (8015890 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8015852:	6013      	str	r3, [r2, #0]
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015858:	4613      	mov	r3, r2
 801585a:	009b      	lsls	r3, r3, #2
 801585c:	4413      	add	r3, r2
 801585e:	009b      	lsls	r3, r3, #2
 8015860:	4a0c      	ldr	r2, [pc, #48]	; (8015894 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8015862:	441a      	add	r2, r3
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	3304      	adds	r3, #4
 8015868:	4619      	mov	r1, r3
 801586a:	4610      	mov	r0, r2
 801586c:	f7fe fc45 	bl	80140fa <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015874:	4b08      	ldr	r3, [pc, #32]	; (8015898 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801587a:	429a      	cmp	r2, r3
 801587c:	d902      	bls.n	8015884 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801587e:	4b07      	ldr	r3, [pc, #28]	; (801589c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8015880:	2201      	movs	r2, #1
 8015882:	601a      	str	r2, [r3, #0]
	}
}
 8015884:	bf00      	nop
 8015886:	3718      	adds	r7, #24
 8015888:	46bd      	mov	sp, r7
 801588a:	bd80      	pop	{r7, pc}
 801588c:	24001888 	.word	0x24001888
 8015890:	24001868 	.word	0x24001868
 8015894:	24001390 	.word	0x24001390
 8015898:	2400138c 	.word	0x2400138c
 801589c:	24001874 	.word	0x24001874

080158a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80158a0:	b480      	push	{r7}
 80158a2:	b083      	sub	sp, #12
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80158a8:	4b06      	ldr	r3, [pc, #24]	; (80158c4 <vTaskInternalSetTimeOutState+0x24>)
 80158aa:	681a      	ldr	r2, [r3, #0]
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80158b0:	4b05      	ldr	r3, [pc, #20]	; (80158c8 <vTaskInternalSetTimeOutState+0x28>)
 80158b2:	681a      	ldr	r2, [r3, #0]
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	605a      	str	r2, [r3, #4]
}
 80158b8:	bf00      	nop
 80158ba:	370c      	adds	r7, #12
 80158bc:	46bd      	mov	sp, r7
 80158be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c2:	4770      	bx	lr
 80158c4:	24001878 	.word	0x24001878
 80158c8:	24001864 	.word	0x24001864

080158cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b088      	sub	sp, #32
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
 80158d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d10a      	bne.n	80158f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80158dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158e0:	f383 8811 	msr	BASEPRI, r3
 80158e4:	f3bf 8f6f 	isb	sy
 80158e8:	f3bf 8f4f 	dsb	sy
 80158ec:	613b      	str	r3, [r7, #16]
}
 80158ee:	bf00      	nop
 80158f0:	e7fe      	b.n	80158f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d10a      	bne.n	801590e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80158f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158fc:	f383 8811 	msr	BASEPRI, r3
 8015900:	f3bf 8f6f 	isb	sy
 8015904:	f3bf 8f4f 	dsb	sy
 8015908:	60fb      	str	r3, [r7, #12]
}
 801590a:	bf00      	nop
 801590c:	e7fe      	b.n	801590c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801590e:	f000 feb1 	bl	8016674 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015912:	4b1d      	ldr	r3, [pc, #116]	; (8015988 <xTaskCheckForTimeOut+0xbc>)
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	685b      	ldr	r3, [r3, #4]
 801591c:	69ba      	ldr	r2, [r7, #24]
 801591e:	1ad3      	subs	r3, r2, r3
 8015920:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015922:	683b      	ldr	r3, [r7, #0]
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801592a:	d102      	bne.n	8015932 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801592c:	2300      	movs	r3, #0
 801592e:	61fb      	str	r3, [r7, #28]
 8015930:	e023      	b.n	801597a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	681a      	ldr	r2, [r3, #0]
 8015936:	4b15      	ldr	r3, [pc, #84]	; (801598c <xTaskCheckForTimeOut+0xc0>)
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	429a      	cmp	r2, r3
 801593c:	d007      	beq.n	801594e <xTaskCheckForTimeOut+0x82>
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	685b      	ldr	r3, [r3, #4]
 8015942:	69ba      	ldr	r2, [r7, #24]
 8015944:	429a      	cmp	r2, r3
 8015946:	d302      	bcc.n	801594e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015948:	2301      	movs	r3, #1
 801594a:	61fb      	str	r3, [r7, #28]
 801594c:	e015      	b.n	801597a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	697a      	ldr	r2, [r7, #20]
 8015954:	429a      	cmp	r2, r3
 8015956:	d20b      	bcs.n	8015970 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015958:	683b      	ldr	r3, [r7, #0]
 801595a:	681a      	ldr	r2, [r3, #0]
 801595c:	697b      	ldr	r3, [r7, #20]
 801595e:	1ad2      	subs	r2, r2, r3
 8015960:	683b      	ldr	r3, [r7, #0]
 8015962:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015964:	6878      	ldr	r0, [r7, #4]
 8015966:	f7ff ff9b 	bl	80158a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801596a:	2300      	movs	r3, #0
 801596c:	61fb      	str	r3, [r7, #28]
 801596e:	e004      	b.n	801597a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	2200      	movs	r2, #0
 8015974:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015976:	2301      	movs	r3, #1
 8015978:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801597a:	f000 feab 	bl	80166d4 <vPortExitCritical>

	return xReturn;
 801597e:	69fb      	ldr	r3, [r7, #28]
}
 8015980:	4618      	mov	r0, r3
 8015982:	3720      	adds	r7, #32
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}
 8015988:	24001864 	.word	0x24001864
 801598c:	24001878 	.word	0x24001878

08015990 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015990:	b480      	push	{r7}
 8015992:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015994:	4b03      	ldr	r3, [pc, #12]	; (80159a4 <vTaskMissedYield+0x14>)
 8015996:	2201      	movs	r2, #1
 8015998:	601a      	str	r2, [r3, #0]
}
 801599a:	bf00      	nop
 801599c:	46bd      	mov	sp, r7
 801599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a2:	4770      	bx	lr
 80159a4:	24001874 	.word	0x24001874

080159a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b082      	sub	sp, #8
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80159b0:	f000 f852 	bl	8015a58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80159b4:	4b06      	ldr	r3, [pc, #24]	; (80159d0 <prvIdleTask+0x28>)
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	2b01      	cmp	r3, #1
 80159ba:	d9f9      	bls.n	80159b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80159bc:	4b05      	ldr	r3, [pc, #20]	; (80159d4 <prvIdleTask+0x2c>)
 80159be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159c2:	601a      	str	r2, [r3, #0]
 80159c4:	f3bf 8f4f 	dsb	sy
 80159c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80159cc:	e7f0      	b.n	80159b0 <prvIdleTask+0x8>
 80159ce:	bf00      	nop
 80159d0:	24001390 	.word	0x24001390
 80159d4:	e000ed04 	.word	0xe000ed04

080159d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b082      	sub	sp, #8
 80159dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80159de:	2300      	movs	r3, #0
 80159e0:	607b      	str	r3, [r7, #4]
 80159e2:	e00c      	b.n	80159fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80159e4:	687a      	ldr	r2, [r7, #4]
 80159e6:	4613      	mov	r3, r2
 80159e8:	009b      	lsls	r3, r3, #2
 80159ea:	4413      	add	r3, r2
 80159ec:	009b      	lsls	r3, r3, #2
 80159ee:	4a12      	ldr	r2, [pc, #72]	; (8015a38 <prvInitialiseTaskLists+0x60>)
 80159f0:	4413      	add	r3, r2
 80159f2:	4618      	mov	r0, r3
 80159f4:	f7fe fb54 	bl	80140a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	3301      	adds	r3, #1
 80159fc:	607b      	str	r3, [r7, #4]
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	2b37      	cmp	r3, #55	; 0x37
 8015a02:	d9ef      	bls.n	80159e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015a04:	480d      	ldr	r0, [pc, #52]	; (8015a3c <prvInitialiseTaskLists+0x64>)
 8015a06:	f7fe fb4b 	bl	80140a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015a0a:	480d      	ldr	r0, [pc, #52]	; (8015a40 <prvInitialiseTaskLists+0x68>)
 8015a0c:	f7fe fb48 	bl	80140a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015a10:	480c      	ldr	r0, [pc, #48]	; (8015a44 <prvInitialiseTaskLists+0x6c>)
 8015a12:	f7fe fb45 	bl	80140a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015a16:	480c      	ldr	r0, [pc, #48]	; (8015a48 <prvInitialiseTaskLists+0x70>)
 8015a18:	f7fe fb42 	bl	80140a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015a1c:	480b      	ldr	r0, [pc, #44]	; (8015a4c <prvInitialiseTaskLists+0x74>)
 8015a1e:	f7fe fb3f 	bl	80140a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015a22:	4b0b      	ldr	r3, [pc, #44]	; (8015a50 <prvInitialiseTaskLists+0x78>)
 8015a24:	4a05      	ldr	r2, [pc, #20]	; (8015a3c <prvInitialiseTaskLists+0x64>)
 8015a26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015a28:	4b0a      	ldr	r3, [pc, #40]	; (8015a54 <prvInitialiseTaskLists+0x7c>)
 8015a2a:	4a05      	ldr	r2, [pc, #20]	; (8015a40 <prvInitialiseTaskLists+0x68>)
 8015a2c:	601a      	str	r2, [r3, #0]
}
 8015a2e:	bf00      	nop
 8015a30:	3708      	adds	r7, #8
 8015a32:	46bd      	mov	sp, r7
 8015a34:	bd80      	pop	{r7, pc}
 8015a36:	bf00      	nop
 8015a38:	24001390 	.word	0x24001390
 8015a3c:	240017f0 	.word	0x240017f0
 8015a40:	24001804 	.word	0x24001804
 8015a44:	24001820 	.word	0x24001820
 8015a48:	24001834 	.word	0x24001834
 8015a4c:	2400184c 	.word	0x2400184c
 8015a50:	24001818 	.word	0x24001818
 8015a54:	2400181c 	.word	0x2400181c

08015a58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b082      	sub	sp, #8
 8015a5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015a5e:	e019      	b.n	8015a94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015a60:	f000 fe08 	bl	8016674 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a64:	4b10      	ldr	r3, [pc, #64]	; (8015aa8 <prvCheckTasksWaitingTermination+0x50>)
 8015a66:	68db      	ldr	r3, [r3, #12]
 8015a68:	68db      	ldr	r3, [r3, #12]
 8015a6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	3304      	adds	r3, #4
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7fe fb9f 	bl	80141b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015a76:	4b0d      	ldr	r3, [pc, #52]	; (8015aac <prvCheckTasksWaitingTermination+0x54>)
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	3b01      	subs	r3, #1
 8015a7c:	4a0b      	ldr	r2, [pc, #44]	; (8015aac <prvCheckTasksWaitingTermination+0x54>)
 8015a7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015a80:	4b0b      	ldr	r3, [pc, #44]	; (8015ab0 <prvCheckTasksWaitingTermination+0x58>)
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	3b01      	subs	r3, #1
 8015a86:	4a0a      	ldr	r2, [pc, #40]	; (8015ab0 <prvCheckTasksWaitingTermination+0x58>)
 8015a88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015a8a:	f000 fe23 	bl	80166d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015a8e:	6878      	ldr	r0, [r7, #4]
 8015a90:	f000 f810 	bl	8015ab4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015a94:	4b06      	ldr	r3, [pc, #24]	; (8015ab0 <prvCheckTasksWaitingTermination+0x58>)
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d1e1      	bne.n	8015a60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015a9c:	bf00      	nop
 8015a9e:	bf00      	nop
 8015aa0:	3708      	adds	r7, #8
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bd80      	pop	{r7, pc}
 8015aa6:	bf00      	nop
 8015aa8:	24001834 	.word	0x24001834
 8015aac:	24001860 	.word	0x24001860
 8015ab0:	24001848 	.word	0x24001848

08015ab4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b084      	sub	sp, #16
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d108      	bne.n	8015ad8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015aca:	4618      	mov	r0, r3
 8015acc:	f000 ffc0 	bl	8016a50 <vPortFree>
				vPortFree( pxTCB );
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	f000 ffbd 	bl	8016a50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015ad6:	e018      	b.n	8015b0a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015ade:	2b01      	cmp	r3, #1
 8015ae0:	d103      	bne.n	8015aea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015ae2:	6878      	ldr	r0, [r7, #4]
 8015ae4:	f000 ffb4 	bl	8016a50 <vPortFree>
	}
 8015ae8:	e00f      	b.n	8015b0a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015af0:	2b02      	cmp	r3, #2
 8015af2:	d00a      	beq.n	8015b0a <prvDeleteTCB+0x56>
	__asm volatile
 8015af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015af8:	f383 8811 	msr	BASEPRI, r3
 8015afc:	f3bf 8f6f 	isb	sy
 8015b00:	f3bf 8f4f 	dsb	sy
 8015b04:	60fb      	str	r3, [r7, #12]
}
 8015b06:	bf00      	nop
 8015b08:	e7fe      	b.n	8015b08 <prvDeleteTCB+0x54>
	}
 8015b0a:	bf00      	nop
 8015b0c:	3710      	adds	r7, #16
 8015b0e:	46bd      	mov	sp, r7
 8015b10:	bd80      	pop	{r7, pc}
	...

08015b14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015b14:	b480      	push	{r7}
 8015b16:	b083      	sub	sp, #12
 8015b18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015b1a:	4b0c      	ldr	r3, [pc, #48]	; (8015b4c <prvResetNextTaskUnblockTime+0x38>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d104      	bne.n	8015b2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015b24:	4b0a      	ldr	r3, [pc, #40]	; (8015b50 <prvResetNextTaskUnblockTime+0x3c>)
 8015b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015b2c:	e008      	b.n	8015b40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b2e:	4b07      	ldr	r3, [pc, #28]	; (8015b4c <prvResetNextTaskUnblockTime+0x38>)
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	68db      	ldr	r3, [r3, #12]
 8015b34:	68db      	ldr	r3, [r3, #12]
 8015b36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	685b      	ldr	r3, [r3, #4]
 8015b3c:	4a04      	ldr	r2, [pc, #16]	; (8015b50 <prvResetNextTaskUnblockTime+0x3c>)
 8015b3e:	6013      	str	r3, [r2, #0]
}
 8015b40:	bf00      	nop
 8015b42:	370c      	adds	r7, #12
 8015b44:	46bd      	mov	sp, r7
 8015b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b4a:	4770      	bx	lr
 8015b4c:	24001818 	.word	0x24001818
 8015b50:	24001880 	.word	0x24001880

08015b54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015b54:	b480      	push	{r7}
 8015b56:	b083      	sub	sp, #12
 8015b58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015b5a:	4b0b      	ldr	r3, [pc, #44]	; (8015b88 <xTaskGetSchedulerState+0x34>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d102      	bne.n	8015b68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015b62:	2301      	movs	r3, #1
 8015b64:	607b      	str	r3, [r7, #4]
 8015b66:	e008      	b.n	8015b7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015b68:	4b08      	ldr	r3, [pc, #32]	; (8015b8c <xTaskGetSchedulerState+0x38>)
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d102      	bne.n	8015b76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015b70:	2302      	movs	r3, #2
 8015b72:	607b      	str	r3, [r7, #4]
 8015b74:	e001      	b.n	8015b7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015b76:	2300      	movs	r3, #0
 8015b78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015b7a:	687b      	ldr	r3, [r7, #4]
	}
 8015b7c:	4618      	mov	r0, r3
 8015b7e:	370c      	adds	r7, #12
 8015b80:	46bd      	mov	sp, r7
 8015b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b86:	4770      	bx	lr
 8015b88:	2400186c 	.word	0x2400186c
 8015b8c:	24001888 	.word	0x24001888

08015b90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b086      	sub	sp, #24
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d056      	beq.n	8015c54 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015ba6:	4b2e      	ldr	r3, [pc, #184]	; (8015c60 <xTaskPriorityDisinherit+0xd0>)
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	693a      	ldr	r2, [r7, #16]
 8015bac:	429a      	cmp	r2, r3
 8015bae:	d00a      	beq.n	8015bc6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bb4:	f383 8811 	msr	BASEPRI, r3
 8015bb8:	f3bf 8f6f 	isb	sy
 8015bbc:	f3bf 8f4f 	dsb	sy
 8015bc0:	60fb      	str	r3, [r7, #12]
}
 8015bc2:	bf00      	nop
 8015bc4:	e7fe      	b.n	8015bc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015bc6:	693b      	ldr	r3, [r7, #16]
 8015bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d10a      	bne.n	8015be4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bd2:	f383 8811 	msr	BASEPRI, r3
 8015bd6:	f3bf 8f6f 	isb	sy
 8015bda:	f3bf 8f4f 	dsb	sy
 8015bde:	60bb      	str	r3, [r7, #8]
}
 8015be0:	bf00      	nop
 8015be2:	e7fe      	b.n	8015be2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015be4:	693b      	ldr	r3, [r7, #16]
 8015be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015be8:	1e5a      	subs	r2, r3, #1
 8015bea:	693b      	ldr	r3, [r7, #16]
 8015bec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015bee:	693b      	ldr	r3, [r7, #16]
 8015bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015bf2:	693b      	ldr	r3, [r7, #16]
 8015bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015bf6:	429a      	cmp	r2, r3
 8015bf8:	d02c      	beq.n	8015c54 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015bfa:	693b      	ldr	r3, [r7, #16]
 8015bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d128      	bne.n	8015c54 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015c02:	693b      	ldr	r3, [r7, #16]
 8015c04:	3304      	adds	r3, #4
 8015c06:	4618      	mov	r0, r3
 8015c08:	f7fe fad4 	bl	80141b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015c0c:	693b      	ldr	r3, [r7, #16]
 8015c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015c10:	693b      	ldr	r3, [r7, #16]
 8015c12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c14:	693b      	ldr	r3, [r7, #16]
 8015c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015c1c:	693b      	ldr	r3, [r7, #16]
 8015c1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015c20:	693b      	ldr	r3, [r7, #16]
 8015c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c24:	4b0f      	ldr	r3, [pc, #60]	; (8015c64 <xTaskPriorityDisinherit+0xd4>)
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d903      	bls.n	8015c34 <xTaskPriorityDisinherit+0xa4>
 8015c2c:	693b      	ldr	r3, [r7, #16]
 8015c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c30:	4a0c      	ldr	r2, [pc, #48]	; (8015c64 <xTaskPriorityDisinherit+0xd4>)
 8015c32:	6013      	str	r3, [r2, #0]
 8015c34:	693b      	ldr	r3, [r7, #16]
 8015c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c38:	4613      	mov	r3, r2
 8015c3a:	009b      	lsls	r3, r3, #2
 8015c3c:	4413      	add	r3, r2
 8015c3e:	009b      	lsls	r3, r3, #2
 8015c40:	4a09      	ldr	r2, [pc, #36]	; (8015c68 <xTaskPriorityDisinherit+0xd8>)
 8015c42:	441a      	add	r2, r3
 8015c44:	693b      	ldr	r3, [r7, #16]
 8015c46:	3304      	adds	r3, #4
 8015c48:	4619      	mov	r1, r3
 8015c4a:	4610      	mov	r0, r2
 8015c4c:	f7fe fa55 	bl	80140fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015c50:	2301      	movs	r3, #1
 8015c52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015c54:	697b      	ldr	r3, [r7, #20]
	}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3718      	adds	r7, #24
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}
 8015c5e:	bf00      	nop
 8015c60:	2400138c 	.word	0x2400138c
 8015c64:	24001868 	.word	0x24001868
 8015c68:	24001390 	.word	0x24001390

08015c6c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015c6c:	b480      	push	{r7}
 8015c6e:	b083      	sub	sp, #12
 8015c70:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8015c72:	4b09      	ldr	r3, [pc, #36]	; (8015c98 <uxTaskResetEventItemValue+0x2c>)
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	699b      	ldr	r3, [r3, #24]
 8015c78:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c7a:	4b07      	ldr	r3, [pc, #28]	; (8015c98 <uxTaskResetEventItemValue+0x2c>)
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c80:	4b05      	ldr	r3, [pc, #20]	; (8015c98 <uxTaskResetEventItemValue+0x2c>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015c88:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015c8a:	687b      	ldr	r3, [r7, #4]
}
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	370c      	adds	r7, #12
 8015c90:	46bd      	mov	sp, r7
 8015c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c96:	4770      	bx	lr
 8015c98:	2400138c 	.word	0x2400138c

08015c9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b084      	sub	sp, #16
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
 8015ca4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015ca6:	4b21      	ldr	r3, [pc, #132]	; (8015d2c <prvAddCurrentTaskToDelayedList+0x90>)
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015cac:	4b20      	ldr	r3, [pc, #128]	; (8015d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	3304      	adds	r3, #4
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f7fe fa7e 	bl	80141b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015cbe:	d10a      	bne.n	8015cd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8015cc0:	683b      	ldr	r3, [r7, #0]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d007      	beq.n	8015cd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015cc6:	4b1a      	ldr	r3, [pc, #104]	; (8015d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	3304      	adds	r3, #4
 8015ccc:	4619      	mov	r1, r3
 8015cce:	4819      	ldr	r0, [pc, #100]	; (8015d34 <prvAddCurrentTaskToDelayedList+0x98>)
 8015cd0:	f7fe fa13 	bl	80140fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015cd4:	e026      	b.n	8015d24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015cd6:	68fa      	ldr	r2, [r7, #12]
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	4413      	add	r3, r2
 8015cdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015cde:	4b14      	ldr	r3, [pc, #80]	; (8015d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	68ba      	ldr	r2, [r7, #8]
 8015ce4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015ce6:	68ba      	ldr	r2, [r7, #8]
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	429a      	cmp	r2, r3
 8015cec:	d209      	bcs.n	8015d02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015cee:	4b12      	ldr	r3, [pc, #72]	; (8015d38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015cf0:	681a      	ldr	r2, [r3, #0]
 8015cf2:	4b0f      	ldr	r3, [pc, #60]	; (8015d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	3304      	adds	r3, #4
 8015cf8:	4619      	mov	r1, r3
 8015cfa:	4610      	mov	r0, r2
 8015cfc:	f7fe fa21 	bl	8014142 <vListInsert>
}
 8015d00:	e010      	b.n	8015d24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d02:	4b0e      	ldr	r3, [pc, #56]	; (8015d3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8015d04:	681a      	ldr	r2, [r3, #0]
 8015d06:	4b0a      	ldr	r3, [pc, #40]	; (8015d30 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	3304      	adds	r3, #4
 8015d0c:	4619      	mov	r1, r3
 8015d0e:	4610      	mov	r0, r2
 8015d10:	f7fe fa17 	bl	8014142 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015d14:	4b0a      	ldr	r3, [pc, #40]	; (8015d40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	68ba      	ldr	r2, [r7, #8]
 8015d1a:	429a      	cmp	r2, r3
 8015d1c:	d202      	bcs.n	8015d24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015d1e:	4a08      	ldr	r2, [pc, #32]	; (8015d40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015d20:	68bb      	ldr	r3, [r7, #8]
 8015d22:	6013      	str	r3, [r2, #0]
}
 8015d24:	bf00      	nop
 8015d26:	3710      	adds	r7, #16
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	bd80      	pop	{r7, pc}
 8015d2c:	24001864 	.word	0x24001864
 8015d30:	2400138c 	.word	0x2400138c
 8015d34:	2400184c 	.word	0x2400184c
 8015d38:	2400181c 	.word	0x2400181c
 8015d3c:	24001818 	.word	0x24001818
 8015d40:	24001880 	.word	0x24001880

08015d44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b08a      	sub	sp, #40	; 0x28
 8015d48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015d4e:	f000 fb07 	bl	8016360 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015d52:	4b1c      	ldr	r3, [pc, #112]	; (8015dc4 <xTimerCreateTimerTask+0x80>)
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d021      	beq.n	8015d9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015d5e:	2300      	movs	r3, #0
 8015d60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015d62:	1d3a      	adds	r2, r7, #4
 8015d64:	f107 0108 	add.w	r1, r7, #8
 8015d68:	f107 030c 	add.w	r3, r7, #12
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	f7fd ff11 	bl	8013b94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015d72:	6879      	ldr	r1, [r7, #4]
 8015d74:	68bb      	ldr	r3, [r7, #8]
 8015d76:	68fa      	ldr	r2, [r7, #12]
 8015d78:	9202      	str	r2, [sp, #8]
 8015d7a:	9301      	str	r3, [sp, #4]
 8015d7c:	2302      	movs	r3, #2
 8015d7e:	9300      	str	r3, [sp, #0]
 8015d80:	2300      	movs	r3, #0
 8015d82:	460a      	mov	r2, r1
 8015d84:	4910      	ldr	r1, [pc, #64]	; (8015dc8 <xTimerCreateTimerTask+0x84>)
 8015d86:	4811      	ldr	r0, [pc, #68]	; (8015dcc <xTimerCreateTimerTask+0x88>)
 8015d88:	f7ff f820 	bl	8014dcc <xTaskCreateStatic>
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	4a10      	ldr	r2, [pc, #64]	; (8015dd0 <xTimerCreateTimerTask+0x8c>)
 8015d90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015d92:	4b0f      	ldr	r3, [pc, #60]	; (8015dd0 <xTimerCreateTimerTask+0x8c>)
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d001      	beq.n	8015d9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015d9a:	2301      	movs	r3, #1
 8015d9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015d9e:	697b      	ldr	r3, [r7, #20]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d10a      	bne.n	8015dba <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015da8:	f383 8811 	msr	BASEPRI, r3
 8015dac:	f3bf 8f6f 	isb	sy
 8015db0:	f3bf 8f4f 	dsb	sy
 8015db4:	613b      	str	r3, [r7, #16]
}
 8015db6:	bf00      	nop
 8015db8:	e7fe      	b.n	8015db8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015dba:	697b      	ldr	r3, [r7, #20]
}
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	3718      	adds	r7, #24
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	bd80      	pop	{r7, pc}
 8015dc4:	240018bc 	.word	0x240018bc
 8015dc8:	080179a8 	.word	0x080179a8
 8015dcc:	08015f09 	.word	0x08015f09
 8015dd0:	240018c0 	.word	0x240018c0

08015dd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b08a      	sub	sp, #40	; 0x28
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	60f8      	str	r0, [r7, #12]
 8015ddc:	60b9      	str	r1, [r7, #8]
 8015dde:	607a      	str	r2, [r7, #4]
 8015de0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015de2:	2300      	movs	r3, #0
 8015de4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d10a      	bne.n	8015e02 <xTimerGenericCommand+0x2e>
	__asm volatile
 8015dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015df0:	f383 8811 	msr	BASEPRI, r3
 8015df4:	f3bf 8f6f 	isb	sy
 8015df8:	f3bf 8f4f 	dsb	sy
 8015dfc:	623b      	str	r3, [r7, #32]
}
 8015dfe:	bf00      	nop
 8015e00:	e7fe      	b.n	8015e00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015e02:	4b1a      	ldr	r3, [pc, #104]	; (8015e6c <xTimerGenericCommand+0x98>)
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d02a      	beq.n	8015e60 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015e0a:	68bb      	ldr	r3, [r7, #8]
 8015e0c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	2b05      	cmp	r3, #5
 8015e1a:	dc18      	bgt.n	8015e4e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015e1c:	f7ff fe9a 	bl	8015b54 <xTaskGetSchedulerState>
 8015e20:	4603      	mov	r3, r0
 8015e22:	2b02      	cmp	r3, #2
 8015e24:	d109      	bne.n	8015e3a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015e26:	4b11      	ldr	r3, [pc, #68]	; (8015e6c <xTimerGenericCommand+0x98>)
 8015e28:	6818      	ldr	r0, [r3, #0]
 8015e2a:	f107 0110 	add.w	r1, r7, #16
 8015e2e:	2300      	movs	r3, #0
 8015e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e32:	f7fe fb27 	bl	8014484 <xQueueGenericSend>
 8015e36:	6278      	str	r0, [r7, #36]	; 0x24
 8015e38:	e012      	b.n	8015e60 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015e3a:	4b0c      	ldr	r3, [pc, #48]	; (8015e6c <xTimerGenericCommand+0x98>)
 8015e3c:	6818      	ldr	r0, [r3, #0]
 8015e3e:	f107 0110 	add.w	r1, r7, #16
 8015e42:	2300      	movs	r3, #0
 8015e44:	2200      	movs	r2, #0
 8015e46:	f7fe fb1d 	bl	8014484 <xQueueGenericSend>
 8015e4a:	6278      	str	r0, [r7, #36]	; 0x24
 8015e4c:	e008      	b.n	8015e60 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015e4e:	4b07      	ldr	r3, [pc, #28]	; (8015e6c <xTimerGenericCommand+0x98>)
 8015e50:	6818      	ldr	r0, [r3, #0]
 8015e52:	f107 0110 	add.w	r1, r7, #16
 8015e56:	2300      	movs	r3, #0
 8015e58:	683a      	ldr	r2, [r7, #0]
 8015e5a:	f7fe fc11 	bl	8014680 <xQueueGenericSendFromISR>
 8015e5e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3728      	adds	r7, #40	; 0x28
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}
 8015e6a:	bf00      	nop
 8015e6c:	240018bc 	.word	0x240018bc

08015e70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015e70:	b580      	push	{r7, lr}
 8015e72:	b088      	sub	sp, #32
 8015e74:	af02      	add	r7, sp, #8
 8015e76:	6078      	str	r0, [r7, #4]
 8015e78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e7a:	4b22      	ldr	r3, [pc, #136]	; (8015f04 <prvProcessExpiredTimer+0x94>)
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	68db      	ldr	r3, [r3, #12]
 8015e80:	68db      	ldr	r3, [r3, #12]
 8015e82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015e84:	697b      	ldr	r3, [r7, #20]
 8015e86:	3304      	adds	r3, #4
 8015e88:	4618      	mov	r0, r3
 8015e8a:	f7fe f993 	bl	80141b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015e8e:	697b      	ldr	r3, [r7, #20]
 8015e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015e94:	f003 0304 	and.w	r3, r3, #4
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d022      	beq.n	8015ee2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015e9c:	697b      	ldr	r3, [r7, #20]
 8015e9e:	699a      	ldr	r2, [r3, #24]
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	18d1      	adds	r1, r2, r3
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	683a      	ldr	r2, [r7, #0]
 8015ea8:	6978      	ldr	r0, [r7, #20]
 8015eaa:	f000 f8d1 	bl	8016050 <prvInsertTimerInActiveList>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d01f      	beq.n	8015ef4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	9300      	str	r3, [sp, #0]
 8015eb8:	2300      	movs	r3, #0
 8015eba:	687a      	ldr	r2, [r7, #4]
 8015ebc:	2100      	movs	r1, #0
 8015ebe:	6978      	ldr	r0, [r7, #20]
 8015ec0:	f7ff ff88 	bl	8015dd4 <xTimerGenericCommand>
 8015ec4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015ec6:	693b      	ldr	r3, [r7, #16]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d113      	bne.n	8015ef4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ed0:	f383 8811 	msr	BASEPRI, r3
 8015ed4:	f3bf 8f6f 	isb	sy
 8015ed8:	f3bf 8f4f 	dsb	sy
 8015edc:	60fb      	str	r3, [r7, #12]
}
 8015ede:	bf00      	nop
 8015ee0:	e7fe      	b.n	8015ee0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015ee2:	697b      	ldr	r3, [r7, #20]
 8015ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ee8:	f023 0301 	bic.w	r3, r3, #1
 8015eec:	b2da      	uxtb	r2, r3
 8015eee:	697b      	ldr	r3, [r7, #20]
 8015ef0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015ef4:	697b      	ldr	r3, [r7, #20]
 8015ef6:	6a1b      	ldr	r3, [r3, #32]
 8015ef8:	6978      	ldr	r0, [r7, #20]
 8015efa:	4798      	blx	r3
}
 8015efc:	bf00      	nop
 8015efe:	3718      	adds	r7, #24
 8015f00:	46bd      	mov	sp, r7
 8015f02:	bd80      	pop	{r7, pc}
 8015f04:	240018b4 	.word	0x240018b4

08015f08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b084      	sub	sp, #16
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015f10:	f107 0308 	add.w	r3, r7, #8
 8015f14:	4618      	mov	r0, r3
 8015f16:	f000 f857 	bl	8015fc8 <prvGetNextExpireTime>
 8015f1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015f1c:	68bb      	ldr	r3, [r7, #8]
 8015f1e:	4619      	mov	r1, r3
 8015f20:	68f8      	ldr	r0, [r7, #12]
 8015f22:	f000 f803 	bl	8015f2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015f26:	f000 f8d5 	bl	80160d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015f2a:	e7f1      	b.n	8015f10 <prvTimerTask+0x8>

08015f2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b084      	sub	sp, #16
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
 8015f34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015f36:	f7ff f985 	bl	8015244 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015f3a:	f107 0308 	add.w	r3, r7, #8
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f000 f866 	bl	8016010 <prvSampleTimeNow>
 8015f44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015f46:	68bb      	ldr	r3, [r7, #8]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d130      	bne.n	8015fae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015f4c:	683b      	ldr	r3, [r7, #0]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d10a      	bne.n	8015f68 <prvProcessTimerOrBlockTask+0x3c>
 8015f52:	687a      	ldr	r2, [r7, #4]
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	429a      	cmp	r2, r3
 8015f58:	d806      	bhi.n	8015f68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015f5a:	f7ff f981 	bl	8015260 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015f5e:	68f9      	ldr	r1, [r7, #12]
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f7ff ff85 	bl	8015e70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015f66:	e024      	b.n	8015fb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015f68:	683b      	ldr	r3, [r7, #0]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d008      	beq.n	8015f80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015f6e:	4b13      	ldr	r3, [pc, #76]	; (8015fbc <prvProcessTimerOrBlockTask+0x90>)
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d101      	bne.n	8015f7c <prvProcessTimerOrBlockTask+0x50>
 8015f78:	2301      	movs	r3, #1
 8015f7a:	e000      	b.n	8015f7e <prvProcessTimerOrBlockTask+0x52>
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015f80:	4b0f      	ldr	r3, [pc, #60]	; (8015fc0 <prvProcessTimerOrBlockTask+0x94>)
 8015f82:	6818      	ldr	r0, [r3, #0]
 8015f84:	687a      	ldr	r2, [r7, #4]
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	1ad3      	subs	r3, r2, r3
 8015f8a:	683a      	ldr	r2, [r7, #0]
 8015f8c:	4619      	mov	r1, r3
 8015f8e:	f7fe fee9 	bl	8014d64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015f92:	f7ff f965 	bl	8015260 <xTaskResumeAll>
 8015f96:	4603      	mov	r3, r0
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d10a      	bne.n	8015fb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015f9c:	4b09      	ldr	r3, [pc, #36]	; (8015fc4 <prvProcessTimerOrBlockTask+0x98>)
 8015f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fa2:	601a      	str	r2, [r3, #0]
 8015fa4:	f3bf 8f4f 	dsb	sy
 8015fa8:	f3bf 8f6f 	isb	sy
}
 8015fac:	e001      	b.n	8015fb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015fae:	f7ff f957 	bl	8015260 <xTaskResumeAll>
}
 8015fb2:	bf00      	nop
 8015fb4:	3710      	adds	r7, #16
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}
 8015fba:	bf00      	nop
 8015fbc:	240018b8 	.word	0x240018b8
 8015fc0:	240018bc 	.word	0x240018bc
 8015fc4:	e000ed04 	.word	0xe000ed04

08015fc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015fc8:	b480      	push	{r7}
 8015fca:	b085      	sub	sp, #20
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015fd0:	4b0e      	ldr	r3, [pc, #56]	; (801600c <prvGetNextExpireTime+0x44>)
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d101      	bne.n	8015fde <prvGetNextExpireTime+0x16>
 8015fda:	2201      	movs	r2, #1
 8015fdc:	e000      	b.n	8015fe0 <prvGetNextExpireTime+0x18>
 8015fde:	2200      	movs	r2, #0
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d105      	bne.n	8015ff8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015fec:	4b07      	ldr	r3, [pc, #28]	; (801600c <prvGetNextExpireTime+0x44>)
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	68db      	ldr	r3, [r3, #12]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	60fb      	str	r3, [r7, #12]
 8015ff6:	e001      	b.n	8015ffc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
}
 8015ffe:	4618      	mov	r0, r3
 8016000:	3714      	adds	r7, #20
 8016002:	46bd      	mov	sp, r7
 8016004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016008:	4770      	bx	lr
 801600a:	bf00      	nop
 801600c:	240018b4 	.word	0x240018b4

08016010 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016010:	b580      	push	{r7, lr}
 8016012:	b084      	sub	sp, #16
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016018:	f7ff f9c0 	bl	801539c <xTaskGetTickCount>
 801601c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801601e:	4b0b      	ldr	r3, [pc, #44]	; (801604c <prvSampleTimeNow+0x3c>)
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	68fa      	ldr	r2, [r7, #12]
 8016024:	429a      	cmp	r2, r3
 8016026:	d205      	bcs.n	8016034 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016028:	f000 f936 	bl	8016298 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	2201      	movs	r2, #1
 8016030:	601a      	str	r2, [r3, #0]
 8016032:	e002      	b.n	801603a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	2200      	movs	r2, #0
 8016038:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801603a:	4a04      	ldr	r2, [pc, #16]	; (801604c <prvSampleTimeNow+0x3c>)
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016040:	68fb      	ldr	r3, [r7, #12]
}
 8016042:	4618      	mov	r0, r3
 8016044:	3710      	adds	r7, #16
 8016046:	46bd      	mov	sp, r7
 8016048:	bd80      	pop	{r7, pc}
 801604a:	bf00      	nop
 801604c:	240018c4 	.word	0x240018c4

08016050 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b086      	sub	sp, #24
 8016054:	af00      	add	r7, sp, #0
 8016056:	60f8      	str	r0, [r7, #12]
 8016058:	60b9      	str	r1, [r7, #8]
 801605a:	607a      	str	r2, [r7, #4]
 801605c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801605e:	2300      	movs	r3, #0
 8016060:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	68ba      	ldr	r2, [r7, #8]
 8016066:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	68fa      	ldr	r2, [r7, #12]
 801606c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801606e:	68ba      	ldr	r2, [r7, #8]
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	429a      	cmp	r2, r3
 8016074:	d812      	bhi.n	801609c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016076:	687a      	ldr	r2, [r7, #4]
 8016078:	683b      	ldr	r3, [r7, #0]
 801607a:	1ad2      	subs	r2, r2, r3
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	699b      	ldr	r3, [r3, #24]
 8016080:	429a      	cmp	r2, r3
 8016082:	d302      	bcc.n	801608a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8016084:	2301      	movs	r3, #1
 8016086:	617b      	str	r3, [r7, #20]
 8016088:	e01b      	b.n	80160c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801608a:	4b10      	ldr	r3, [pc, #64]	; (80160cc <prvInsertTimerInActiveList+0x7c>)
 801608c:	681a      	ldr	r2, [r3, #0]
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	3304      	adds	r3, #4
 8016092:	4619      	mov	r1, r3
 8016094:	4610      	mov	r0, r2
 8016096:	f7fe f854 	bl	8014142 <vListInsert>
 801609a:	e012      	b.n	80160c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801609c:	687a      	ldr	r2, [r7, #4]
 801609e:	683b      	ldr	r3, [r7, #0]
 80160a0:	429a      	cmp	r2, r3
 80160a2:	d206      	bcs.n	80160b2 <prvInsertTimerInActiveList+0x62>
 80160a4:	68ba      	ldr	r2, [r7, #8]
 80160a6:	683b      	ldr	r3, [r7, #0]
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d302      	bcc.n	80160b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80160ac:	2301      	movs	r3, #1
 80160ae:	617b      	str	r3, [r7, #20]
 80160b0:	e007      	b.n	80160c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80160b2:	4b07      	ldr	r3, [pc, #28]	; (80160d0 <prvInsertTimerInActiveList+0x80>)
 80160b4:	681a      	ldr	r2, [r3, #0]
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	3304      	adds	r3, #4
 80160ba:	4619      	mov	r1, r3
 80160bc:	4610      	mov	r0, r2
 80160be:	f7fe f840 	bl	8014142 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80160c2:	697b      	ldr	r3, [r7, #20]
}
 80160c4:	4618      	mov	r0, r3
 80160c6:	3718      	adds	r7, #24
 80160c8:	46bd      	mov	sp, r7
 80160ca:	bd80      	pop	{r7, pc}
 80160cc:	240018b8 	.word	0x240018b8
 80160d0:	240018b4 	.word	0x240018b4

080160d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b08e      	sub	sp, #56	; 0x38
 80160d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80160da:	e0ca      	b.n	8016272 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	da18      	bge.n	8016114 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80160e2:	1d3b      	adds	r3, r7, #4
 80160e4:	3304      	adds	r3, #4
 80160e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80160e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d10a      	bne.n	8016104 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80160ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160f2:	f383 8811 	msr	BASEPRI, r3
 80160f6:	f3bf 8f6f 	isb	sy
 80160fa:	f3bf 8f4f 	dsb	sy
 80160fe:	61fb      	str	r3, [r7, #28]
}
 8016100:	bf00      	nop
 8016102:	e7fe      	b.n	8016102 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801610a:	6850      	ldr	r0, [r2, #4]
 801610c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801610e:	6892      	ldr	r2, [r2, #8]
 8016110:	4611      	mov	r1, r2
 8016112:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	2b00      	cmp	r3, #0
 8016118:	f2c0 80aa 	blt.w	8016270 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016122:	695b      	ldr	r3, [r3, #20]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d004      	beq.n	8016132 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801612a:	3304      	adds	r3, #4
 801612c:	4618      	mov	r0, r3
 801612e:	f7fe f841 	bl	80141b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016132:	463b      	mov	r3, r7
 8016134:	4618      	mov	r0, r3
 8016136:	f7ff ff6b 	bl	8016010 <prvSampleTimeNow>
 801613a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2b09      	cmp	r3, #9
 8016140:	f200 8097 	bhi.w	8016272 <prvProcessReceivedCommands+0x19e>
 8016144:	a201      	add	r2, pc, #4	; (adr r2, 801614c <prvProcessReceivedCommands+0x78>)
 8016146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801614a:	bf00      	nop
 801614c:	08016175 	.word	0x08016175
 8016150:	08016175 	.word	0x08016175
 8016154:	08016175 	.word	0x08016175
 8016158:	080161e9 	.word	0x080161e9
 801615c:	080161fd 	.word	0x080161fd
 8016160:	08016247 	.word	0x08016247
 8016164:	08016175 	.word	0x08016175
 8016168:	08016175 	.word	0x08016175
 801616c:	080161e9 	.word	0x080161e9
 8016170:	080161fd 	.word	0x080161fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801617a:	f043 0301 	orr.w	r3, r3, #1
 801617e:	b2da      	uxtb	r2, r3
 8016180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016186:	68ba      	ldr	r2, [r7, #8]
 8016188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801618a:	699b      	ldr	r3, [r3, #24]
 801618c:	18d1      	adds	r1, r2, r3
 801618e:	68bb      	ldr	r3, [r7, #8]
 8016190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016194:	f7ff ff5c 	bl	8016050 <prvInsertTimerInActiveList>
 8016198:	4603      	mov	r3, r0
 801619a:	2b00      	cmp	r3, #0
 801619c:	d069      	beq.n	8016272 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161a0:	6a1b      	ldr	r3, [r3, #32]
 80161a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80161a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80161ac:	f003 0304 	and.w	r3, r3, #4
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d05e      	beq.n	8016272 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80161b4:	68ba      	ldr	r2, [r7, #8]
 80161b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161b8:	699b      	ldr	r3, [r3, #24]
 80161ba:	441a      	add	r2, r3
 80161bc:	2300      	movs	r3, #0
 80161be:	9300      	str	r3, [sp, #0]
 80161c0:	2300      	movs	r3, #0
 80161c2:	2100      	movs	r1, #0
 80161c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161c6:	f7ff fe05 	bl	8015dd4 <xTimerGenericCommand>
 80161ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80161cc:	6a3b      	ldr	r3, [r7, #32]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d14f      	bne.n	8016272 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80161d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161d6:	f383 8811 	msr	BASEPRI, r3
 80161da:	f3bf 8f6f 	isb	sy
 80161de:	f3bf 8f4f 	dsb	sy
 80161e2:	61bb      	str	r3, [r7, #24]
}
 80161e4:	bf00      	nop
 80161e6:	e7fe      	b.n	80161e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80161e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80161ee:	f023 0301 	bic.w	r3, r3, #1
 80161f2:	b2da      	uxtb	r2, r3
 80161f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80161fa:	e03a      	b.n	8016272 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80161fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016202:	f043 0301 	orr.w	r3, r3, #1
 8016206:	b2da      	uxtb	r2, r3
 8016208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801620a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801620e:	68ba      	ldr	r2, [r7, #8]
 8016210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016212:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016216:	699b      	ldr	r3, [r3, #24]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d10a      	bne.n	8016232 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016220:	f383 8811 	msr	BASEPRI, r3
 8016224:	f3bf 8f6f 	isb	sy
 8016228:	f3bf 8f4f 	dsb	sy
 801622c:	617b      	str	r3, [r7, #20]
}
 801622e:	bf00      	nop
 8016230:	e7fe      	b.n	8016230 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016234:	699a      	ldr	r2, [r3, #24]
 8016236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016238:	18d1      	adds	r1, r2, r3
 801623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801623c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801623e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016240:	f7ff ff06 	bl	8016050 <prvInsertTimerInActiveList>
					break;
 8016244:	e015      	b.n	8016272 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8016246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801624c:	f003 0302 	and.w	r3, r3, #2
 8016250:	2b00      	cmp	r3, #0
 8016252:	d103      	bne.n	801625c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8016254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016256:	f000 fbfb 	bl	8016a50 <vPortFree>
 801625a:	e00a      	b.n	8016272 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801625e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016262:	f023 0301 	bic.w	r3, r3, #1
 8016266:	b2da      	uxtb	r2, r3
 8016268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801626a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801626e:	e000      	b.n	8016272 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8016270:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016272:	4b08      	ldr	r3, [pc, #32]	; (8016294 <prvProcessReceivedCommands+0x1c0>)
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	1d39      	adds	r1, r7, #4
 8016278:	2200      	movs	r2, #0
 801627a:	4618      	mov	r0, r3
 801627c:	f7fe fa9c 	bl	80147b8 <xQueueReceive>
 8016280:	4603      	mov	r3, r0
 8016282:	2b00      	cmp	r3, #0
 8016284:	f47f af2a 	bne.w	80160dc <prvProcessReceivedCommands+0x8>
	}
}
 8016288:	bf00      	nop
 801628a:	bf00      	nop
 801628c:	3730      	adds	r7, #48	; 0x30
 801628e:	46bd      	mov	sp, r7
 8016290:	bd80      	pop	{r7, pc}
 8016292:	bf00      	nop
 8016294:	240018bc 	.word	0x240018bc

08016298 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b088      	sub	sp, #32
 801629c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801629e:	e048      	b.n	8016332 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80162a0:	4b2d      	ldr	r3, [pc, #180]	; (8016358 <prvSwitchTimerLists+0xc0>)
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	68db      	ldr	r3, [r3, #12]
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162aa:	4b2b      	ldr	r3, [pc, #172]	; (8016358 <prvSwitchTimerLists+0xc0>)
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	68db      	ldr	r3, [r3, #12]
 80162b0:	68db      	ldr	r3, [r3, #12]
 80162b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	3304      	adds	r3, #4
 80162b8:	4618      	mov	r0, r3
 80162ba:	f7fd ff7b 	bl	80141b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	6a1b      	ldr	r3, [r3, #32]
 80162c2:	68f8      	ldr	r0, [r7, #12]
 80162c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80162cc:	f003 0304 	and.w	r3, r3, #4
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d02e      	beq.n	8016332 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	699b      	ldr	r3, [r3, #24]
 80162d8:	693a      	ldr	r2, [r7, #16]
 80162da:	4413      	add	r3, r2
 80162dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80162de:	68ba      	ldr	r2, [r7, #8]
 80162e0:	693b      	ldr	r3, [r7, #16]
 80162e2:	429a      	cmp	r2, r3
 80162e4:	d90e      	bls.n	8016304 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	68ba      	ldr	r2, [r7, #8]
 80162ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	68fa      	ldr	r2, [r7, #12]
 80162f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80162f2:	4b19      	ldr	r3, [pc, #100]	; (8016358 <prvSwitchTimerLists+0xc0>)
 80162f4:	681a      	ldr	r2, [r3, #0]
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	3304      	adds	r3, #4
 80162fa:	4619      	mov	r1, r3
 80162fc:	4610      	mov	r0, r2
 80162fe:	f7fd ff20 	bl	8014142 <vListInsert>
 8016302:	e016      	b.n	8016332 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016304:	2300      	movs	r3, #0
 8016306:	9300      	str	r3, [sp, #0]
 8016308:	2300      	movs	r3, #0
 801630a:	693a      	ldr	r2, [r7, #16]
 801630c:	2100      	movs	r1, #0
 801630e:	68f8      	ldr	r0, [r7, #12]
 8016310:	f7ff fd60 	bl	8015dd4 <xTimerGenericCommand>
 8016314:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d10a      	bne.n	8016332 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801631c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016320:	f383 8811 	msr	BASEPRI, r3
 8016324:	f3bf 8f6f 	isb	sy
 8016328:	f3bf 8f4f 	dsb	sy
 801632c:	603b      	str	r3, [r7, #0]
}
 801632e:	bf00      	nop
 8016330:	e7fe      	b.n	8016330 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016332:	4b09      	ldr	r3, [pc, #36]	; (8016358 <prvSwitchTimerLists+0xc0>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d1b1      	bne.n	80162a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801633c:	4b06      	ldr	r3, [pc, #24]	; (8016358 <prvSwitchTimerLists+0xc0>)
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016342:	4b06      	ldr	r3, [pc, #24]	; (801635c <prvSwitchTimerLists+0xc4>)
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	4a04      	ldr	r2, [pc, #16]	; (8016358 <prvSwitchTimerLists+0xc0>)
 8016348:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801634a:	4a04      	ldr	r2, [pc, #16]	; (801635c <prvSwitchTimerLists+0xc4>)
 801634c:	697b      	ldr	r3, [r7, #20]
 801634e:	6013      	str	r3, [r2, #0]
}
 8016350:	bf00      	nop
 8016352:	3718      	adds	r7, #24
 8016354:	46bd      	mov	sp, r7
 8016356:	bd80      	pop	{r7, pc}
 8016358:	240018b4 	.word	0x240018b4
 801635c:	240018b8 	.word	0x240018b8

08016360 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b082      	sub	sp, #8
 8016364:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8016366:	f000 f985 	bl	8016674 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801636a:	4b15      	ldr	r3, [pc, #84]	; (80163c0 <prvCheckForValidListAndQueue+0x60>)
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d120      	bne.n	80163b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8016372:	4814      	ldr	r0, [pc, #80]	; (80163c4 <prvCheckForValidListAndQueue+0x64>)
 8016374:	f7fd fe94 	bl	80140a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016378:	4813      	ldr	r0, [pc, #76]	; (80163c8 <prvCheckForValidListAndQueue+0x68>)
 801637a:	f7fd fe91 	bl	80140a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801637e:	4b13      	ldr	r3, [pc, #76]	; (80163cc <prvCheckForValidListAndQueue+0x6c>)
 8016380:	4a10      	ldr	r2, [pc, #64]	; (80163c4 <prvCheckForValidListAndQueue+0x64>)
 8016382:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016384:	4b12      	ldr	r3, [pc, #72]	; (80163d0 <prvCheckForValidListAndQueue+0x70>)
 8016386:	4a10      	ldr	r2, [pc, #64]	; (80163c8 <prvCheckForValidListAndQueue+0x68>)
 8016388:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801638a:	2300      	movs	r3, #0
 801638c:	9300      	str	r3, [sp, #0]
 801638e:	4b11      	ldr	r3, [pc, #68]	; (80163d4 <prvCheckForValidListAndQueue+0x74>)
 8016390:	4a11      	ldr	r2, [pc, #68]	; (80163d8 <prvCheckForValidListAndQueue+0x78>)
 8016392:	2110      	movs	r1, #16
 8016394:	200a      	movs	r0, #10
 8016396:	f7fd ff9f 	bl	80142d8 <xQueueGenericCreateStatic>
 801639a:	4603      	mov	r3, r0
 801639c:	4a08      	ldr	r2, [pc, #32]	; (80163c0 <prvCheckForValidListAndQueue+0x60>)
 801639e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80163a0:	4b07      	ldr	r3, [pc, #28]	; (80163c0 <prvCheckForValidListAndQueue+0x60>)
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d005      	beq.n	80163b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80163a8:	4b05      	ldr	r3, [pc, #20]	; (80163c0 <prvCheckForValidListAndQueue+0x60>)
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	490b      	ldr	r1, [pc, #44]	; (80163dc <prvCheckForValidListAndQueue+0x7c>)
 80163ae:	4618      	mov	r0, r3
 80163b0:	f7fe fcae 	bl	8014d10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80163b4:	f000 f98e 	bl	80166d4 <vPortExitCritical>
}
 80163b8:	bf00      	nop
 80163ba:	46bd      	mov	sp, r7
 80163bc:	bd80      	pop	{r7, pc}
 80163be:	bf00      	nop
 80163c0:	240018bc 	.word	0x240018bc
 80163c4:	2400188c 	.word	0x2400188c
 80163c8:	240018a0 	.word	0x240018a0
 80163cc:	240018b4 	.word	0x240018b4
 80163d0:	240018b8 	.word	0x240018b8
 80163d4:	24001968 	.word	0x24001968
 80163d8:	240018c8 	.word	0x240018c8
 80163dc:	080179b0 	.word	0x080179b0

080163e0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b08a      	sub	sp, #40	; 0x28
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	60f8      	str	r0, [r7, #12]
 80163e8:	60b9      	str	r1, [r7, #8]
 80163ea:	607a      	str	r2, [r7, #4]
 80163ec:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80163ee:	f06f 0301 	mvn.w	r3, #1
 80163f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80163f8:	68bb      	ldr	r3, [r7, #8]
 80163fa:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016400:	4b06      	ldr	r3, [pc, #24]	; (801641c <xTimerPendFunctionCallFromISR+0x3c>)
 8016402:	6818      	ldr	r0, [r3, #0]
 8016404:	f107 0114 	add.w	r1, r7, #20
 8016408:	2300      	movs	r3, #0
 801640a:	683a      	ldr	r2, [r7, #0]
 801640c:	f7fe f938 	bl	8014680 <xQueueGenericSendFromISR>
 8016410:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8016412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8016414:	4618      	mov	r0, r3
 8016416:	3728      	adds	r7, #40	; 0x28
 8016418:	46bd      	mov	sp, r7
 801641a:	bd80      	pop	{r7, pc}
 801641c:	240018bc 	.word	0x240018bc

08016420 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016420:	b480      	push	{r7}
 8016422:	b085      	sub	sp, #20
 8016424:	af00      	add	r7, sp, #0
 8016426:	60f8      	str	r0, [r7, #12]
 8016428:	60b9      	str	r1, [r7, #8]
 801642a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	3b04      	subs	r3, #4
 8016430:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	3b04      	subs	r3, #4
 801643e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016440:	68bb      	ldr	r3, [r7, #8]
 8016442:	f023 0201 	bic.w	r2, r3, #1
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	3b04      	subs	r3, #4
 801644e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016450:	4a0c      	ldr	r2, [pc, #48]	; (8016484 <pxPortInitialiseStack+0x64>)
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	3b14      	subs	r3, #20
 801645a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801645c:	687a      	ldr	r2, [r7, #4]
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	3b04      	subs	r3, #4
 8016466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	f06f 0202 	mvn.w	r2, #2
 801646e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	3b20      	subs	r3, #32
 8016474:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016476:	68fb      	ldr	r3, [r7, #12]
}
 8016478:	4618      	mov	r0, r3
 801647a:	3714      	adds	r7, #20
 801647c:	46bd      	mov	sp, r7
 801647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016482:	4770      	bx	lr
 8016484:	08016489 	.word	0x08016489

08016488 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016488:	b480      	push	{r7}
 801648a:	b085      	sub	sp, #20
 801648c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801648e:	2300      	movs	r3, #0
 8016490:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016492:	4b12      	ldr	r3, [pc, #72]	; (80164dc <prvTaskExitError+0x54>)
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801649a:	d00a      	beq.n	80164b2 <prvTaskExitError+0x2a>
	__asm volatile
 801649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164a0:	f383 8811 	msr	BASEPRI, r3
 80164a4:	f3bf 8f6f 	isb	sy
 80164a8:	f3bf 8f4f 	dsb	sy
 80164ac:	60fb      	str	r3, [r7, #12]
}
 80164ae:	bf00      	nop
 80164b0:	e7fe      	b.n	80164b0 <prvTaskExitError+0x28>
	__asm volatile
 80164b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164b6:	f383 8811 	msr	BASEPRI, r3
 80164ba:	f3bf 8f6f 	isb	sy
 80164be:	f3bf 8f4f 	dsb	sy
 80164c2:	60bb      	str	r3, [r7, #8]
}
 80164c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80164c6:	bf00      	nop
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d0fc      	beq.n	80164c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80164ce:	bf00      	nop
 80164d0:	bf00      	nop
 80164d2:	3714      	adds	r7, #20
 80164d4:	46bd      	mov	sp, r7
 80164d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164da:	4770      	bx	lr
 80164dc:	24000098 	.word	0x24000098

080164e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80164e0:	4b07      	ldr	r3, [pc, #28]	; (8016500 <pxCurrentTCBConst2>)
 80164e2:	6819      	ldr	r1, [r3, #0]
 80164e4:	6808      	ldr	r0, [r1, #0]
 80164e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164ea:	f380 8809 	msr	PSP, r0
 80164ee:	f3bf 8f6f 	isb	sy
 80164f2:	f04f 0000 	mov.w	r0, #0
 80164f6:	f380 8811 	msr	BASEPRI, r0
 80164fa:	4770      	bx	lr
 80164fc:	f3af 8000 	nop.w

08016500 <pxCurrentTCBConst2>:
 8016500:	2400138c 	.word	0x2400138c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016504:	bf00      	nop
 8016506:	bf00      	nop

08016508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016508:	4808      	ldr	r0, [pc, #32]	; (801652c <prvPortStartFirstTask+0x24>)
 801650a:	6800      	ldr	r0, [r0, #0]
 801650c:	6800      	ldr	r0, [r0, #0]
 801650e:	f380 8808 	msr	MSP, r0
 8016512:	f04f 0000 	mov.w	r0, #0
 8016516:	f380 8814 	msr	CONTROL, r0
 801651a:	b662      	cpsie	i
 801651c:	b661      	cpsie	f
 801651e:	f3bf 8f4f 	dsb	sy
 8016522:	f3bf 8f6f 	isb	sy
 8016526:	df00      	svc	0
 8016528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801652a:	bf00      	nop
 801652c:	e000ed08 	.word	0xe000ed08

08016530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b086      	sub	sp, #24
 8016534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016536:	4b46      	ldr	r3, [pc, #280]	; (8016650 <xPortStartScheduler+0x120>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	4a46      	ldr	r2, [pc, #280]	; (8016654 <xPortStartScheduler+0x124>)
 801653c:	4293      	cmp	r3, r2
 801653e:	d10a      	bne.n	8016556 <xPortStartScheduler+0x26>
	__asm volatile
 8016540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016544:	f383 8811 	msr	BASEPRI, r3
 8016548:	f3bf 8f6f 	isb	sy
 801654c:	f3bf 8f4f 	dsb	sy
 8016550:	613b      	str	r3, [r7, #16]
}
 8016552:	bf00      	nop
 8016554:	e7fe      	b.n	8016554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016556:	4b3e      	ldr	r3, [pc, #248]	; (8016650 <xPortStartScheduler+0x120>)
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	4a3f      	ldr	r2, [pc, #252]	; (8016658 <xPortStartScheduler+0x128>)
 801655c:	4293      	cmp	r3, r2
 801655e:	d10a      	bne.n	8016576 <xPortStartScheduler+0x46>
	__asm volatile
 8016560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016564:	f383 8811 	msr	BASEPRI, r3
 8016568:	f3bf 8f6f 	isb	sy
 801656c:	f3bf 8f4f 	dsb	sy
 8016570:	60fb      	str	r3, [r7, #12]
}
 8016572:	bf00      	nop
 8016574:	e7fe      	b.n	8016574 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016576:	4b39      	ldr	r3, [pc, #228]	; (801665c <xPortStartScheduler+0x12c>)
 8016578:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801657a:	697b      	ldr	r3, [r7, #20]
 801657c:	781b      	ldrb	r3, [r3, #0]
 801657e:	b2db      	uxtb	r3, r3
 8016580:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016582:	697b      	ldr	r3, [r7, #20]
 8016584:	22ff      	movs	r2, #255	; 0xff
 8016586:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016588:	697b      	ldr	r3, [r7, #20]
 801658a:	781b      	ldrb	r3, [r3, #0]
 801658c:	b2db      	uxtb	r3, r3
 801658e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016590:	78fb      	ldrb	r3, [r7, #3]
 8016592:	b2db      	uxtb	r3, r3
 8016594:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016598:	b2da      	uxtb	r2, r3
 801659a:	4b31      	ldr	r3, [pc, #196]	; (8016660 <xPortStartScheduler+0x130>)
 801659c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801659e:	4b31      	ldr	r3, [pc, #196]	; (8016664 <xPortStartScheduler+0x134>)
 80165a0:	2207      	movs	r2, #7
 80165a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80165a4:	e009      	b.n	80165ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80165a6:	4b2f      	ldr	r3, [pc, #188]	; (8016664 <xPortStartScheduler+0x134>)
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	3b01      	subs	r3, #1
 80165ac:	4a2d      	ldr	r2, [pc, #180]	; (8016664 <xPortStartScheduler+0x134>)
 80165ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80165b0:	78fb      	ldrb	r3, [r7, #3]
 80165b2:	b2db      	uxtb	r3, r3
 80165b4:	005b      	lsls	r3, r3, #1
 80165b6:	b2db      	uxtb	r3, r3
 80165b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80165ba:	78fb      	ldrb	r3, [r7, #3]
 80165bc:	b2db      	uxtb	r3, r3
 80165be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80165c2:	2b80      	cmp	r3, #128	; 0x80
 80165c4:	d0ef      	beq.n	80165a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80165c6:	4b27      	ldr	r3, [pc, #156]	; (8016664 <xPortStartScheduler+0x134>)
 80165c8:	681b      	ldr	r3, [r3, #0]
 80165ca:	f1c3 0307 	rsb	r3, r3, #7
 80165ce:	2b04      	cmp	r3, #4
 80165d0:	d00a      	beq.n	80165e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80165d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165d6:	f383 8811 	msr	BASEPRI, r3
 80165da:	f3bf 8f6f 	isb	sy
 80165de:	f3bf 8f4f 	dsb	sy
 80165e2:	60bb      	str	r3, [r7, #8]
}
 80165e4:	bf00      	nop
 80165e6:	e7fe      	b.n	80165e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80165e8:	4b1e      	ldr	r3, [pc, #120]	; (8016664 <xPortStartScheduler+0x134>)
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	021b      	lsls	r3, r3, #8
 80165ee:	4a1d      	ldr	r2, [pc, #116]	; (8016664 <xPortStartScheduler+0x134>)
 80165f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80165f2:	4b1c      	ldr	r3, [pc, #112]	; (8016664 <xPortStartScheduler+0x134>)
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80165fa:	4a1a      	ldr	r2, [pc, #104]	; (8016664 <xPortStartScheduler+0x134>)
 80165fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	b2da      	uxtb	r2, r3
 8016602:	697b      	ldr	r3, [r7, #20]
 8016604:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016606:	4b18      	ldr	r3, [pc, #96]	; (8016668 <xPortStartScheduler+0x138>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	4a17      	ldr	r2, [pc, #92]	; (8016668 <xPortStartScheduler+0x138>)
 801660c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016610:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016612:	4b15      	ldr	r3, [pc, #84]	; (8016668 <xPortStartScheduler+0x138>)
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	4a14      	ldr	r2, [pc, #80]	; (8016668 <xPortStartScheduler+0x138>)
 8016618:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801661c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801661e:	f000 f8dd 	bl	80167dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016622:	4b12      	ldr	r3, [pc, #72]	; (801666c <xPortStartScheduler+0x13c>)
 8016624:	2200      	movs	r2, #0
 8016626:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016628:	f000 f8fc 	bl	8016824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801662c:	4b10      	ldr	r3, [pc, #64]	; (8016670 <xPortStartScheduler+0x140>)
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	4a0f      	ldr	r2, [pc, #60]	; (8016670 <xPortStartScheduler+0x140>)
 8016632:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016636:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016638:	f7ff ff66 	bl	8016508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801663c:	f7fe ff80 	bl	8015540 <vTaskSwitchContext>
	prvTaskExitError();
 8016640:	f7ff ff22 	bl	8016488 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016644:	2300      	movs	r3, #0
}
 8016646:	4618      	mov	r0, r3
 8016648:	3718      	adds	r7, #24
 801664a:	46bd      	mov	sp, r7
 801664c:	bd80      	pop	{r7, pc}
 801664e:	bf00      	nop
 8016650:	e000ed00 	.word	0xe000ed00
 8016654:	410fc271 	.word	0x410fc271
 8016658:	410fc270 	.word	0x410fc270
 801665c:	e000e400 	.word	0xe000e400
 8016660:	240019b8 	.word	0x240019b8
 8016664:	240019bc 	.word	0x240019bc
 8016668:	e000ed20 	.word	0xe000ed20
 801666c:	24000098 	.word	0x24000098
 8016670:	e000ef34 	.word	0xe000ef34

08016674 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016674:	b480      	push	{r7}
 8016676:	b083      	sub	sp, #12
 8016678:	af00      	add	r7, sp, #0
	__asm volatile
 801667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801667e:	f383 8811 	msr	BASEPRI, r3
 8016682:	f3bf 8f6f 	isb	sy
 8016686:	f3bf 8f4f 	dsb	sy
 801668a:	607b      	str	r3, [r7, #4]
}
 801668c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801668e:	4b0f      	ldr	r3, [pc, #60]	; (80166cc <vPortEnterCritical+0x58>)
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	3301      	adds	r3, #1
 8016694:	4a0d      	ldr	r2, [pc, #52]	; (80166cc <vPortEnterCritical+0x58>)
 8016696:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016698:	4b0c      	ldr	r3, [pc, #48]	; (80166cc <vPortEnterCritical+0x58>)
 801669a:	681b      	ldr	r3, [r3, #0]
 801669c:	2b01      	cmp	r3, #1
 801669e:	d10f      	bne.n	80166c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80166a0:	4b0b      	ldr	r3, [pc, #44]	; (80166d0 <vPortEnterCritical+0x5c>)
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	b2db      	uxtb	r3, r3
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d00a      	beq.n	80166c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80166aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166ae:	f383 8811 	msr	BASEPRI, r3
 80166b2:	f3bf 8f6f 	isb	sy
 80166b6:	f3bf 8f4f 	dsb	sy
 80166ba:	603b      	str	r3, [r7, #0]
}
 80166bc:	bf00      	nop
 80166be:	e7fe      	b.n	80166be <vPortEnterCritical+0x4a>
	}
}
 80166c0:	bf00      	nop
 80166c2:	370c      	adds	r7, #12
 80166c4:	46bd      	mov	sp, r7
 80166c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ca:	4770      	bx	lr
 80166cc:	24000098 	.word	0x24000098
 80166d0:	e000ed04 	.word	0xe000ed04

080166d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80166d4:	b480      	push	{r7}
 80166d6:	b083      	sub	sp, #12
 80166d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80166da:	4b12      	ldr	r3, [pc, #72]	; (8016724 <vPortExitCritical+0x50>)
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d10a      	bne.n	80166f8 <vPortExitCritical+0x24>
	__asm volatile
 80166e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166e6:	f383 8811 	msr	BASEPRI, r3
 80166ea:	f3bf 8f6f 	isb	sy
 80166ee:	f3bf 8f4f 	dsb	sy
 80166f2:	607b      	str	r3, [r7, #4]
}
 80166f4:	bf00      	nop
 80166f6:	e7fe      	b.n	80166f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80166f8:	4b0a      	ldr	r3, [pc, #40]	; (8016724 <vPortExitCritical+0x50>)
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	3b01      	subs	r3, #1
 80166fe:	4a09      	ldr	r2, [pc, #36]	; (8016724 <vPortExitCritical+0x50>)
 8016700:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016702:	4b08      	ldr	r3, [pc, #32]	; (8016724 <vPortExitCritical+0x50>)
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	2b00      	cmp	r3, #0
 8016708:	d105      	bne.n	8016716 <vPortExitCritical+0x42>
 801670a:	2300      	movs	r3, #0
 801670c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801670e:	683b      	ldr	r3, [r7, #0]
 8016710:	f383 8811 	msr	BASEPRI, r3
}
 8016714:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016716:	bf00      	nop
 8016718:	370c      	adds	r7, #12
 801671a:	46bd      	mov	sp, r7
 801671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016720:	4770      	bx	lr
 8016722:	bf00      	nop
 8016724:	24000098 	.word	0x24000098
	...

08016730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016730:	f3ef 8009 	mrs	r0, PSP
 8016734:	f3bf 8f6f 	isb	sy
 8016738:	4b15      	ldr	r3, [pc, #84]	; (8016790 <pxCurrentTCBConst>)
 801673a:	681a      	ldr	r2, [r3, #0]
 801673c:	f01e 0f10 	tst.w	lr, #16
 8016740:	bf08      	it	eq
 8016742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801674a:	6010      	str	r0, [r2, #0]
 801674c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016754:	f380 8811 	msr	BASEPRI, r0
 8016758:	f3bf 8f4f 	dsb	sy
 801675c:	f3bf 8f6f 	isb	sy
 8016760:	f7fe feee 	bl	8015540 <vTaskSwitchContext>
 8016764:	f04f 0000 	mov.w	r0, #0
 8016768:	f380 8811 	msr	BASEPRI, r0
 801676c:	bc09      	pop	{r0, r3}
 801676e:	6819      	ldr	r1, [r3, #0]
 8016770:	6808      	ldr	r0, [r1, #0]
 8016772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016776:	f01e 0f10 	tst.w	lr, #16
 801677a:	bf08      	it	eq
 801677c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016780:	f380 8809 	msr	PSP, r0
 8016784:	f3bf 8f6f 	isb	sy
 8016788:	4770      	bx	lr
 801678a:	bf00      	nop
 801678c:	f3af 8000 	nop.w

08016790 <pxCurrentTCBConst>:
 8016790:	2400138c 	.word	0x2400138c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016794:	bf00      	nop
 8016796:	bf00      	nop

08016798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b082      	sub	sp, #8
 801679c:	af00      	add	r7, sp, #0
	__asm volatile
 801679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167a2:	f383 8811 	msr	BASEPRI, r3
 80167a6:	f3bf 8f6f 	isb	sy
 80167aa:	f3bf 8f4f 	dsb	sy
 80167ae:	607b      	str	r3, [r7, #4]
}
 80167b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80167b2:	f7fe fe03 	bl	80153bc <xTaskIncrementTick>
 80167b6:	4603      	mov	r3, r0
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d003      	beq.n	80167c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80167bc:	4b06      	ldr	r3, [pc, #24]	; (80167d8 <xPortSysTickHandler+0x40>)
 80167be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167c2:	601a      	str	r2, [r3, #0]
 80167c4:	2300      	movs	r3, #0
 80167c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80167c8:	683b      	ldr	r3, [r7, #0]
 80167ca:	f383 8811 	msr	BASEPRI, r3
}
 80167ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80167d0:	bf00      	nop
 80167d2:	3708      	adds	r7, #8
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}
 80167d8:	e000ed04 	.word	0xe000ed04

080167dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80167dc:	b480      	push	{r7}
 80167de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80167e0:	4b0b      	ldr	r3, [pc, #44]	; (8016810 <vPortSetupTimerInterrupt+0x34>)
 80167e2:	2200      	movs	r2, #0
 80167e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80167e6:	4b0b      	ldr	r3, [pc, #44]	; (8016814 <vPortSetupTimerInterrupt+0x38>)
 80167e8:	2200      	movs	r2, #0
 80167ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80167ec:	4b0a      	ldr	r3, [pc, #40]	; (8016818 <vPortSetupTimerInterrupt+0x3c>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	4a0a      	ldr	r2, [pc, #40]	; (801681c <vPortSetupTimerInterrupt+0x40>)
 80167f2:	fba2 2303 	umull	r2, r3, r2, r3
 80167f6:	099b      	lsrs	r3, r3, #6
 80167f8:	4a09      	ldr	r2, [pc, #36]	; (8016820 <vPortSetupTimerInterrupt+0x44>)
 80167fa:	3b01      	subs	r3, #1
 80167fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80167fe:	4b04      	ldr	r3, [pc, #16]	; (8016810 <vPortSetupTimerInterrupt+0x34>)
 8016800:	2207      	movs	r2, #7
 8016802:	601a      	str	r2, [r3, #0]
}
 8016804:	bf00      	nop
 8016806:	46bd      	mov	sp, r7
 8016808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801680c:	4770      	bx	lr
 801680e:	bf00      	nop
 8016810:	e000e010 	.word	0xe000e010
 8016814:	e000e018 	.word	0xe000e018
 8016818:	24000088 	.word	0x24000088
 801681c:	10624dd3 	.word	0x10624dd3
 8016820:	e000e014 	.word	0xe000e014

08016824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016824:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016834 <vPortEnableVFP+0x10>
 8016828:	6801      	ldr	r1, [r0, #0]
 801682a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801682e:	6001      	str	r1, [r0, #0]
 8016830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016832:	bf00      	nop
 8016834:	e000ed88 	.word	0xe000ed88

08016838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016838:	b480      	push	{r7}
 801683a:	b085      	sub	sp, #20
 801683c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801683e:	f3ef 8305 	mrs	r3, IPSR
 8016842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	2b0f      	cmp	r3, #15
 8016848:	d914      	bls.n	8016874 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801684a:	4a17      	ldr	r2, [pc, #92]	; (80168a8 <vPortValidateInterruptPriority+0x70>)
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	4413      	add	r3, r2
 8016850:	781b      	ldrb	r3, [r3, #0]
 8016852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016854:	4b15      	ldr	r3, [pc, #84]	; (80168ac <vPortValidateInterruptPriority+0x74>)
 8016856:	781b      	ldrb	r3, [r3, #0]
 8016858:	7afa      	ldrb	r2, [r7, #11]
 801685a:	429a      	cmp	r2, r3
 801685c:	d20a      	bcs.n	8016874 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016862:	f383 8811 	msr	BASEPRI, r3
 8016866:	f3bf 8f6f 	isb	sy
 801686a:	f3bf 8f4f 	dsb	sy
 801686e:	607b      	str	r3, [r7, #4]
}
 8016870:	bf00      	nop
 8016872:	e7fe      	b.n	8016872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016874:	4b0e      	ldr	r3, [pc, #56]	; (80168b0 <vPortValidateInterruptPriority+0x78>)
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801687c:	4b0d      	ldr	r3, [pc, #52]	; (80168b4 <vPortValidateInterruptPriority+0x7c>)
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	429a      	cmp	r2, r3
 8016882:	d90a      	bls.n	801689a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016888:	f383 8811 	msr	BASEPRI, r3
 801688c:	f3bf 8f6f 	isb	sy
 8016890:	f3bf 8f4f 	dsb	sy
 8016894:	603b      	str	r3, [r7, #0]
}
 8016896:	bf00      	nop
 8016898:	e7fe      	b.n	8016898 <vPortValidateInterruptPriority+0x60>
	}
 801689a:	bf00      	nop
 801689c:	3714      	adds	r7, #20
 801689e:	46bd      	mov	sp, r7
 80168a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a4:	4770      	bx	lr
 80168a6:	bf00      	nop
 80168a8:	e000e3f0 	.word	0xe000e3f0
 80168ac:	240019b8 	.word	0x240019b8
 80168b0:	e000ed0c 	.word	0xe000ed0c
 80168b4:	240019bc 	.word	0x240019bc

080168b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b08a      	sub	sp, #40	; 0x28
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80168c0:	2300      	movs	r3, #0
 80168c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80168c4:	f7fe fcbe 	bl	8015244 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80168c8:	4b5b      	ldr	r3, [pc, #364]	; (8016a38 <pvPortMalloc+0x180>)
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d101      	bne.n	80168d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80168d0:	f000 f920 	bl	8016b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80168d4:	4b59      	ldr	r3, [pc, #356]	; (8016a3c <pvPortMalloc+0x184>)
 80168d6:	681a      	ldr	r2, [r3, #0]
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	4013      	ands	r3, r2
 80168dc:	2b00      	cmp	r3, #0
 80168de:	f040 8093 	bne.w	8016a08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d01d      	beq.n	8016924 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80168e8:	2208      	movs	r2, #8
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	4413      	add	r3, r2
 80168ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	f003 0307 	and.w	r3, r3, #7
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d014      	beq.n	8016924 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	f023 0307 	bic.w	r3, r3, #7
 8016900:	3308      	adds	r3, #8
 8016902:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	f003 0307 	and.w	r3, r3, #7
 801690a:	2b00      	cmp	r3, #0
 801690c:	d00a      	beq.n	8016924 <pvPortMalloc+0x6c>
	__asm volatile
 801690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016912:	f383 8811 	msr	BASEPRI, r3
 8016916:	f3bf 8f6f 	isb	sy
 801691a:	f3bf 8f4f 	dsb	sy
 801691e:	617b      	str	r3, [r7, #20]
}
 8016920:	bf00      	nop
 8016922:	e7fe      	b.n	8016922 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d06e      	beq.n	8016a08 <pvPortMalloc+0x150>
 801692a:	4b45      	ldr	r3, [pc, #276]	; (8016a40 <pvPortMalloc+0x188>)
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	687a      	ldr	r2, [r7, #4]
 8016930:	429a      	cmp	r2, r3
 8016932:	d869      	bhi.n	8016a08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016934:	4b43      	ldr	r3, [pc, #268]	; (8016a44 <pvPortMalloc+0x18c>)
 8016936:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016938:	4b42      	ldr	r3, [pc, #264]	; (8016a44 <pvPortMalloc+0x18c>)
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801693e:	e004      	b.n	801694a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016942:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801694c:	685b      	ldr	r3, [r3, #4]
 801694e:	687a      	ldr	r2, [r7, #4]
 8016950:	429a      	cmp	r2, r3
 8016952:	d903      	bls.n	801695c <pvPortMalloc+0xa4>
 8016954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d1f1      	bne.n	8016940 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801695c:	4b36      	ldr	r3, [pc, #216]	; (8016a38 <pvPortMalloc+0x180>)
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016962:	429a      	cmp	r2, r3
 8016964:	d050      	beq.n	8016a08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016966:	6a3b      	ldr	r3, [r7, #32]
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	2208      	movs	r2, #8
 801696c:	4413      	add	r3, r2
 801696e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016972:	681a      	ldr	r2, [r3, #0]
 8016974:	6a3b      	ldr	r3, [r7, #32]
 8016976:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801697a:	685a      	ldr	r2, [r3, #4]
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	1ad2      	subs	r2, r2, r3
 8016980:	2308      	movs	r3, #8
 8016982:	005b      	lsls	r3, r3, #1
 8016984:	429a      	cmp	r2, r3
 8016986:	d91f      	bls.n	80169c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	4413      	add	r3, r2
 801698e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016990:	69bb      	ldr	r3, [r7, #24]
 8016992:	f003 0307 	and.w	r3, r3, #7
 8016996:	2b00      	cmp	r3, #0
 8016998:	d00a      	beq.n	80169b0 <pvPortMalloc+0xf8>
	__asm volatile
 801699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801699e:	f383 8811 	msr	BASEPRI, r3
 80169a2:	f3bf 8f6f 	isb	sy
 80169a6:	f3bf 8f4f 	dsb	sy
 80169aa:	613b      	str	r3, [r7, #16]
}
 80169ac:	bf00      	nop
 80169ae:	e7fe      	b.n	80169ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80169b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169b2:	685a      	ldr	r2, [r3, #4]
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	1ad2      	subs	r2, r2, r3
 80169b8:	69bb      	ldr	r3, [r7, #24]
 80169ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80169bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169be:	687a      	ldr	r2, [r7, #4]
 80169c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80169c2:	69b8      	ldr	r0, [r7, #24]
 80169c4:	f000 f908 	bl	8016bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80169c8:	4b1d      	ldr	r3, [pc, #116]	; (8016a40 <pvPortMalloc+0x188>)
 80169ca:	681a      	ldr	r2, [r3, #0]
 80169cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ce:	685b      	ldr	r3, [r3, #4]
 80169d0:	1ad3      	subs	r3, r2, r3
 80169d2:	4a1b      	ldr	r2, [pc, #108]	; (8016a40 <pvPortMalloc+0x188>)
 80169d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80169d6:	4b1a      	ldr	r3, [pc, #104]	; (8016a40 <pvPortMalloc+0x188>)
 80169d8:	681a      	ldr	r2, [r3, #0]
 80169da:	4b1b      	ldr	r3, [pc, #108]	; (8016a48 <pvPortMalloc+0x190>)
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	429a      	cmp	r2, r3
 80169e0:	d203      	bcs.n	80169ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80169e2:	4b17      	ldr	r3, [pc, #92]	; (8016a40 <pvPortMalloc+0x188>)
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	4a18      	ldr	r2, [pc, #96]	; (8016a48 <pvPortMalloc+0x190>)
 80169e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80169ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ec:	685a      	ldr	r2, [r3, #4]
 80169ee:	4b13      	ldr	r3, [pc, #76]	; (8016a3c <pvPortMalloc+0x184>)
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	431a      	orrs	r2, r3
 80169f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80169f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169fa:	2200      	movs	r2, #0
 80169fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80169fe:	4b13      	ldr	r3, [pc, #76]	; (8016a4c <pvPortMalloc+0x194>)
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	3301      	adds	r3, #1
 8016a04:	4a11      	ldr	r2, [pc, #68]	; (8016a4c <pvPortMalloc+0x194>)
 8016a06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016a08:	f7fe fc2a 	bl	8015260 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a0c:	69fb      	ldr	r3, [r7, #28]
 8016a0e:	f003 0307 	and.w	r3, r3, #7
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d00a      	beq.n	8016a2c <pvPortMalloc+0x174>
	__asm volatile
 8016a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a1a:	f383 8811 	msr	BASEPRI, r3
 8016a1e:	f3bf 8f6f 	isb	sy
 8016a22:	f3bf 8f4f 	dsb	sy
 8016a26:	60fb      	str	r3, [r7, #12]
}
 8016a28:	bf00      	nop
 8016a2a:	e7fe      	b.n	8016a2a <pvPortMalloc+0x172>
	return pvReturn;
 8016a2c:	69fb      	ldr	r3, [r7, #28]
}
 8016a2e:	4618      	mov	r0, r3
 8016a30:	3728      	adds	r7, #40	; 0x28
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd80      	pop	{r7, pc}
 8016a36:	bf00      	nop
 8016a38:	240055c8 	.word	0x240055c8
 8016a3c:	240055dc 	.word	0x240055dc
 8016a40:	240055cc 	.word	0x240055cc
 8016a44:	240055c0 	.word	0x240055c0
 8016a48:	240055d0 	.word	0x240055d0
 8016a4c:	240055d4 	.word	0x240055d4

08016a50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b086      	sub	sp, #24
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d04d      	beq.n	8016afe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016a62:	2308      	movs	r3, #8
 8016a64:	425b      	negs	r3, r3
 8016a66:	697a      	ldr	r2, [r7, #20]
 8016a68:	4413      	add	r3, r2
 8016a6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016a6c:	697b      	ldr	r3, [r7, #20]
 8016a6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016a70:	693b      	ldr	r3, [r7, #16]
 8016a72:	685a      	ldr	r2, [r3, #4]
 8016a74:	4b24      	ldr	r3, [pc, #144]	; (8016b08 <vPortFree+0xb8>)
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	4013      	ands	r3, r2
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d10a      	bne.n	8016a94 <vPortFree+0x44>
	__asm volatile
 8016a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a82:	f383 8811 	msr	BASEPRI, r3
 8016a86:	f3bf 8f6f 	isb	sy
 8016a8a:	f3bf 8f4f 	dsb	sy
 8016a8e:	60fb      	str	r3, [r7, #12]
}
 8016a90:	bf00      	nop
 8016a92:	e7fe      	b.n	8016a92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016a94:	693b      	ldr	r3, [r7, #16]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d00a      	beq.n	8016ab2 <vPortFree+0x62>
	__asm volatile
 8016a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aa0:	f383 8811 	msr	BASEPRI, r3
 8016aa4:	f3bf 8f6f 	isb	sy
 8016aa8:	f3bf 8f4f 	dsb	sy
 8016aac:	60bb      	str	r3, [r7, #8]
}
 8016aae:	bf00      	nop
 8016ab0:	e7fe      	b.n	8016ab0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016ab2:	693b      	ldr	r3, [r7, #16]
 8016ab4:	685a      	ldr	r2, [r3, #4]
 8016ab6:	4b14      	ldr	r3, [pc, #80]	; (8016b08 <vPortFree+0xb8>)
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	4013      	ands	r3, r2
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d01e      	beq.n	8016afe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016ac0:	693b      	ldr	r3, [r7, #16]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d11a      	bne.n	8016afe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016ac8:	693b      	ldr	r3, [r7, #16]
 8016aca:	685a      	ldr	r2, [r3, #4]
 8016acc:	4b0e      	ldr	r3, [pc, #56]	; (8016b08 <vPortFree+0xb8>)
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	43db      	mvns	r3, r3
 8016ad2:	401a      	ands	r2, r3
 8016ad4:	693b      	ldr	r3, [r7, #16]
 8016ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016ad8:	f7fe fbb4 	bl	8015244 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016adc:	693b      	ldr	r3, [r7, #16]
 8016ade:	685a      	ldr	r2, [r3, #4]
 8016ae0:	4b0a      	ldr	r3, [pc, #40]	; (8016b0c <vPortFree+0xbc>)
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	4413      	add	r3, r2
 8016ae6:	4a09      	ldr	r2, [pc, #36]	; (8016b0c <vPortFree+0xbc>)
 8016ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016aea:	6938      	ldr	r0, [r7, #16]
 8016aec:	f000 f874 	bl	8016bd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016af0:	4b07      	ldr	r3, [pc, #28]	; (8016b10 <vPortFree+0xc0>)
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	3301      	adds	r3, #1
 8016af6:	4a06      	ldr	r2, [pc, #24]	; (8016b10 <vPortFree+0xc0>)
 8016af8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016afa:	f7fe fbb1 	bl	8015260 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016afe:	bf00      	nop
 8016b00:	3718      	adds	r7, #24
 8016b02:	46bd      	mov	sp, r7
 8016b04:	bd80      	pop	{r7, pc}
 8016b06:	bf00      	nop
 8016b08:	240055dc 	.word	0x240055dc
 8016b0c:	240055cc 	.word	0x240055cc
 8016b10:	240055d8 	.word	0x240055d8

08016b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016b14:	b480      	push	{r7}
 8016b16:	b085      	sub	sp, #20
 8016b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016b1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8016b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016b20:	4b27      	ldr	r3, [pc, #156]	; (8016bc0 <prvHeapInit+0xac>)
 8016b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	f003 0307 	and.w	r3, r3, #7
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d00c      	beq.n	8016b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	3307      	adds	r3, #7
 8016b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	f023 0307 	bic.w	r3, r3, #7
 8016b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016b3c:	68ba      	ldr	r2, [r7, #8]
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	1ad3      	subs	r3, r2, r3
 8016b42:	4a1f      	ldr	r2, [pc, #124]	; (8016bc0 <prvHeapInit+0xac>)
 8016b44:	4413      	add	r3, r2
 8016b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016b4c:	4a1d      	ldr	r2, [pc, #116]	; (8016bc4 <prvHeapInit+0xb0>)
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016b52:	4b1c      	ldr	r3, [pc, #112]	; (8016bc4 <prvHeapInit+0xb0>)
 8016b54:	2200      	movs	r2, #0
 8016b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	68ba      	ldr	r2, [r7, #8]
 8016b5c:	4413      	add	r3, r2
 8016b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016b60:	2208      	movs	r2, #8
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	1a9b      	subs	r3, r3, r2
 8016b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	f023 0307 	bic.w	r3, r3, #7
 8016b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	4a15      	ldr	r2, [pc, #84]	; (8016bc8 <prvHeapInit+0xb4>)
 8016b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016b76:	4b14      	ldr	r3, [pc, #80]	; (8016bc8 <prvHeapInit+0xb4>)
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	2200      	movs	r2, #0
 8016b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016b7e:	4b12      	ldr	r3, [pc, #72]	; (8016bc8 <prvHeapInit+0xb4>)
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	2200      	movs	r2, #0
 8016b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016b8a:	683b      	ldr	r3, [r7, #0]
 8016b8c:	68fa      	ldr	r2, [r7, #12]
 8016b8e:	1ad2      	subs	r2, r2, r3
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016b94:	4b0c      	ldr	r3, [pc, #48]	; (8016bc8 <prvHeapInit+0xb4>)
 8016b96:	681a      	ldr	r2, [r3, #0]
 8016b98:	683b      	ldr	r3, [r7, #0]
 8016b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016b9c:	683b      	ldr	r3, [r7, #0]
 8016b9e:	685b      	ldr	r3, [r3, #4]
 8016ba0:	4a0a      	ldr	r2, [pc, #40]	; (8016bcc <prvHeapInit+0xb8>)
 8016ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016ba4:	683b      	ldr	r3, [r7, #0]
 8016ba6:	685b      	ldr	r3, [r3, #4]
 8016ba8:	4a09      	ldr	r2, [pc, #36]	; (8016bd0 <prvHeapInit+0xbc>)
 8016baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016bac:	4b09      	ldr	r3, [pc, #36]	; (8016bd4 <prvHeapInit+0xc0>)
 8016bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016bb2:	601a      	str	r2, [r3, #0]
}
 8016bb4:	bf00      	nop
 8016bb6:	3714      	adds	r7, #20
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bbe:	4770      	bx	lr
 8016bc0:	240019c0 	.word	0x240019c0
 8016bc4:	240055c0 	.word	0x240055c0
 8016bc8:	240055c8 	.word	0x240055c8
 8016bcc:	240055d0 	.word	0x240055d0
 8016bd0:	240055cc 	.word	0x240055cc
 8016bd4:	240055dc 	.word	0x240055dc

08016bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016bd8:	b480      	push	{r7}
 8016bda:	b085      	sub	sp, #20
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016be0:	4b28      	ldr	r3, [pc, #160]	; (8016c84 <prvInsertBlockIntoFreeList+0xac>)
 8016be2:	60fb      	str	r3, [r7, #12]
 8016be4:	e002      	b.n	8016bec <prvInsertBlockIntoFreeList+0x14>
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	60fb      	str	r3, [r7, #12]
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	687a      	ldr	r2, [r7, #4]
 8016bf2:	429a      	cmp	r2, r3
 8016bf4:	d8f7      	bhi.n	8016be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	685b      	ldr	r3, [r3, #4]
 8016bfe:	68ba      	ldr	r2, [r7, #8]
 8016c00:	4413      	add	r3, r2
 8016c02:	687a      	ldr	r2, [r7, #4]
 8016c04:	429a      	cmp	r2, r3
 8016c06:	d108      	bne.n	8016c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	685a      	ldr	r2, [r3, #4]
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	685b      	ldr	r3, [r3, #4]
 8016c10:	441a      	add	r2, r3
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	685b      	ldr	r3, [r3, #4]
 8016c22:	68ba      	ldr	r2, [r7, #8]
 8016c24:	441a      	add	r2, r3
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	429a      	cmp	r2, r3
 8016c2c:	d118      	bne.n	8016c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	681a      	ldr	r2, [r3, #0]
 8016c32:	4b15      	ldr	r3, [pc, #84]	; (8016c88 <prvInsertBlockIntoFreeList+0xb0>)
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	429a      	cmp	r2, r3
 8016c38:	d00d      	beq.n	8016c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	685a      	ldr	r2, [r3, #4]
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	685b      	ldr	r3, [r3, #4]
 8016c44:	441a      	add	r2, r3
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	681a      	ldr	r2, [r3, #0]
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	601a      	str	r2, [r3, #0]
 8016c54:	e008      	b.n	8016c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016c56:	4b0c      	ldr	r3, [pc, #48]	; (8016c88 <prvInsertBlockIntoFreeList+0xb0>)
 8016c58:	681a      	ldr	r2, [r3, #0]
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	601a      	str	r2, [r3, #0]
 8016c5e:	e003      	b.n	8016c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	681a      	ldr	r2, [r3, #0]
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016c68:	68fa      	ldr	r2, [r7, #12]
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	429a      	cmp	r2, r3
 8016c6e:	d002      	beq.n	8016c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	687a      	ldr	r2, [r7, #4]
 8016c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016c76:	bf00      	nop
 8016c78:	3714      	adds	r7, #20
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c80:	4770      	bx	lr
 8016c82:	bf00      	nop
 8016c84:	240055c0 	.word	0x240055c0
 8016c88:	240055c8 	.word	0x240055c8

08016c8c <__errno>:
 8016c8c:	4b01      	ldr	r3, [pc, #4]	; (8016c94 <__errno+0x8>)
 8016c8e:	6818      	ldr	r0, [r3, #0]
 8016c90:	4770      	bx	lr
 8016c92:	bf00      	nop
 8016c94:	2400009c 	.word	0x2400009c

08016c98 <__libc_init_array>:
 8016c98:	b570      	push	{r4, r5, r6, lr}
 8016c9a:	4d0d      	ldr	r5, [pc, #52]	; (8016cd0 <__libc_init_array+0x38>)
 8016c9c:	4c0d      	ldr	r4, [pc, #52]	; (8016cd4 <__libc_init_array+0x3c>)
 8016c9e:	1b64      	subs	r4, r4, r5
 8016ca0:	10a4      	asrs	r4, r4, #2
 8016ca2:	2600      	movs	r6, #0
 8016ca4:	42a6      	cmp	r6, r4
 8016ca6:	d109      	bne.n	8016cbc <__libc_init_array+0x24>
 8016ca8:	4d0b      	ldr	r5, [pc, #44]	; (8016cd8 <__libc_init_array+0x40>)
 8016caa:	4c0c      	ldr	r4, [pc, #48]	; (8016cdc <__libc_init_array+0x44>)
 8016cac:	f000 fd3c 	bl	8017728 <_init>
 8016cb0:	1b64      	subs	r4, r4, r5
 8016cb2:	10a4      	asrs	r4, r4, #2
 8016cb4:	2600      	movs	r6, #0
 8016cb6:	42a6      	cmp	r6, r4
 8016cb8:	d105      	bne.n	8016cc6 <__libc_init_array+0x2e>
 8016cba:	bd70      	pop	{r4, r5, r6, pc}
 8016cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8016cc0:	4798      	blx	r3
 8016cc2:	3601      	adds	r6, #1
 8016cc4:	e7ee      	b.n	8016ca4 <__libc_init_array+0xc>
 8016cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8016cca:	4798      	blx	r3
 8016ccc:	3601      	adds	r6, #1
 8016cce:	e7f2      	b.n	8016cb6 <__libc_init_array+0x1e>
 8016cd0:	08017c14 	.word	0x08017c14
 8016cd4:	08017c14 	.word	0x08017c14
 8016cd8:	08017c14 	.word	0x08017c14
 8016cdc:	08017c18 	.word	0x08017c18

08016ce0 <malloc>:
 8016ce0:	4b02      	ldr	r3, [pc, #8]	; (8016cec <malloc+0xc>)
 8016ce2:	4601      	mov	r1, r0
 8016ce4:	6818      	ldr	r0, [r3, #0]
 8016ce6:	f000 b88d 	b.w	8016e04 <_malloc_r>
 8016cea:	bf00      	nop
 8016cec:	2400009c 	.word	0x2400009c

08016cf0 <free>:
 8016cf0:	4b02      	ldr	r3, [pc, #8]	; (8016cfc <free+0xc>)
 8016cf2:	4601      	mov	r1, r0
 8016cf4:	6818      	ldr	r0, [r3, #0]
 8016cf6:	f000 b819 	b.w	8016d2c <_free_r>
 8016cfa:	bf00      	nop
 8016cfc:	2400009c 	.word	0x2400009c

08016d00 <memcpy>:
 8016d00:	440a      	add	r2, r1
 8016d02:	4291      	cmp	r1, r2
 8016d04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016d08:	d100      	bne.n	8016d0c <memcpy+0xc>
 8016d0a:	4770      	bx	lr
 8016d0c:	b510      	push	{r4, lr}
 8016d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016d12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016d16:	4291      	cmp	r1, r2
 8016d18:	d1f9      	bne.n	8016d0e <memcpy+0xe>
 8016d1a:	bd10      	pop	{r4, pc}

08016d1c <memset>:
 8016d1c:	4402      	add	r2, r0
 8016d1e:	4603      	mov	r3, r0
 8016d20:	4293      	cmp	r3, r2
 8016d22:	d100      	bne.n	8016d26 <memset+0xa>
 8016d24:	4770      	bx	lr
 8016d26:	f803 1b01 	strb.w	r1, [r3], #1
 8016d2a:	e7f9      	b.n	8016d20 <memset+0x4>

08016d2c <_free_r>:
 8016d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d2e:	2900      	cmp	r1, #0
 8016d30:	d044      	beq.n	8016dbc <_free_r+0x90>
 8016d32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d36:	9001      	str	r0, [sp, #4]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	f1a1 0404 	sub.w	r4, r1, #4
 8016d3e:	bfb8      	it	lt
 8016d40:	18e4      	addlt	r4, r4, r3
 8016d42:	f000 fc39 	bl	80175b8 <__malloc_lock>
 8016d46:	4a1e      	ldr	r2, [pc, #120]	; (8016dc0 <_free_r+0x94>)
 8016d48:	9801      	ldr	r0, [sp, #4]
 8016d4a:	6813      	ldr	r3, [r2, #0]
 8016d4c:	b933      	cbnz	r3, 8016d5c <_free_r+0x30>
 8016d4e:	6063      	str	r3, [r4, #4]
 8016d50:	6014      	str	r4, [r2, #0]
 8016d52:	b003      	add	sp, #12
 8016d54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d58:	f000 bc34 	b.w	80175c4 <__malloc_unlock>
 8016d5c:	42a3      	cmp	r3, r4
 8016d5e:	d908      	bls.n	8016d72 <_free_r+0x46>
 8016d60:	6825      	ldr	r5, [r4, #0]
 8016d62:	1961      	adds	r1, r4, r5
 8016d64:	428b      	cmp	r3, r1
 8016d66:	bf01      	itttt	eq
 8016d68:	6819      	ldreq	r1, [r3, #0]
 8016d6a:	685b      	ldreq	r3, [r3, #4]
 8016d6c:	1949      	addeq	r1, r1, r5
 8016d6e:	6021      	streq	r1, [r4, #0]
 8016d70:	e7ed      	b.n	8016d4e <_free_r+0x22>
 8016d72:	461a      	mov	r2, r3
 8016d74:	685b      	ldr	r3, [r3, #4]
 8016d76:	b10b      	cbz	r3, 8016d7c <_free_r+0x50>
 8016d78:	42a3      	cmp	r3, r4
 8016d7a:	d9fa      	bls.n	8016d72 <_free_r+0x46>
 8016d7c:	6811      	ldr	r1, [r2, #0]
 8016d7e:	1855      	adds	r5, r2, r1
 8016d80:	42a5      	cmp	r5, r4
 8016d82:	d10b      	bne.n	8016d9c <_free_r+0x70>
 8016d84:	6824      	ldr	r4, [r4, #0]
 8016d86:	4421      	add	r1, r4
 8016d88:	1854      	adds	r4, r2, r1
 8016d8a:	42a3      	cmp	r3, r4
 8016d8c:	6011      	str	r1, [r2, #0]
 8016d8e:	d1e0      	bne.n	8016d52 <_free_r+0x26>
 8016d90:	681c      	ldr	r4, [r3, #0]
 8016d92:	685b      	ldr	r3, [r3, #4]
 8016d94:	6053      	str	r3, [r2, #4]
 8016d96:	4421      	add	r1, r4
 8016d98:	6011      	str	r1, [r2, #0]
 8016d9a:	e7da      	b.n	8016d52 <_free_r+0x26>
 8016d9c:	d902      	bls.n	8016da4 <_free_r+0x78>
 8016d9e:	230c      	movs	r3, #12
 8016da0:	6003      	str	r3, [r0, #0]
 8016da2:	e7d6      	b.n	8016d52 <_free_r+0x26>
 8016da4:	6825      	ldr	r5, [r4, #0]
 8016da6:	1961      	adds	r1, r4, r5
 8016da8:	428b      	cmp	r3, r1
 8016daa:	bf04      	itt	eq
 8016dac:	6819      	ldreq	r1, [r3, #0]
 8016dae:	685b      	ldreq	r3, [r3, #4]
 8016db0:	6063      	str	r3, [r4, #4]
 8016db2:	bf04      	itt	eq
 8016db4:	1949      	addeq	r1, r1, r5
 8016db6:	6021      	streq	r1, [r4, #0]
 8016db8:	6054      	str	r4, [r2, #4]
 8016dba:	e7ca      	b.n	8016d52 <_free_r+0x26>
 8016dbc:	b003      	add	sp, #12
 8016dbe:	bd30      	pop	{r4, r5, pc}
 8016dc0:	240055e0 	.word	0x240055e0

08016dc4 <sbrk_aligned>:
 8016dc4:	b570      	push	{r4, r5, r6, lr}
 8016dc6:	4e0e      	ldr	r6, [pc, #56]	; (8016e00 <sbrk_aligned+0x3c>)
 8016dc8:	460c      	mov	r4, r1
 8016dca:	6831      	ldr	r1, [r6, #0]
 8016dcc:	4605      	mov	r5, r0
 8016dce:	b911      	cbnz	r1, 8016dd6 <sbrk_aligned+0x12>
 8016dd0:	f000 f902 	bl	8016fd8 <_sbrk_r>
 8016dd4:	6030      	str	r0, [r6, #0]
 8016dd6:	4621      	mov	r1, r4
 8016dd8:	4628      	mov	r0, r5
 8016dda:	f000 f8fd 	bl	8016fd8 <_sbrk_r>
 8016dde:	1c43      	adds	r3, r0, #1
 8016de0:	d00a      	beq.n	8016df8 <sbrk_aligned+0x34>
 8016de2:	1cc4      	adds	r4, r0, #3
 8016de4:	f024 0403 	bic.w	r4, r4, #3
 8016de8:	42a0      	cmp	r0, r4
 8016dea:	d007      	beq.n	8016dfc <sbrk_aligned+0x38>
 8016dec:	1a21      	subs	r1, r4, r0
 8016dee:	4628      	mov	r0, r5
 8016df0:	f000 f8f2 	bl	8016fd8 <_sbrk_r>
 8016df4:	3001      	adds	r0, #1
 8016df6:	d101      	bne.n	8016dfc <sbrk_aligned+0x38>
 8016df8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016dfc:	4620      	mov	r0, r4
 8016dfe:	bd70      	pop	{r4, r5, r6, pc}
 8016e00:	240055e4 	.word	0x240055e4

08016e04 <_malloc_r>:
 8016e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e08:	1ccd      	adds	r5, r1, #3
 8016e0a:	f025 0503 	bic.w	r5, r5, #3
 8016e0e:	3508      	adds	r5, #8
 8016e10:	2d0c      	cmp	r5, #12
 8016e12:	bf38      	it	cc
 8016e14:	250c      	movcc	r5, #12
 8016e16:	2d00      	cmp	r5, #0
 8016e18:	4607      	mov	r7, r0
 8016e1a:	db01      	blt.n	8016e20 <_malloc_r+0x1c>
 8016e1c:	42a9      	cmp	r1, r5
 8016e1e:	d905      	bls.n	8016e2c <_malloc_r+0x28>
 8016e20:	230c      	movs	r3, #12
 8016e22:	603b      	str	r3, [r7, #0]
 8016e24:	2600      	movs	r6, #0
 8016e26:	4630      	mov	r0, r6
 8016e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e2c:	4e2e      	ldr	r6, [pc, #184]	; (8016ee8 <_malloc_r+0xe4>)
 8016e2e:	f000 fbc3 	bl	80175b8 <__malloc_lock>
 8016e32:	6833      	ldr	r3, [r6, #0]
 8016e34:	461c      	mov	r4, r3
 8016e36:	bb34      	cbnz	r4, 8016e86 <_malloc_r+0x82>
 8016e38:	4629      	mov	r1, r5
 8016e3a:	4638      	mov	r0, r7
 8016e3c:	f7ff ffc2 	bl	8016dc4 <sbrk_aligned>
 8016e40:	1c43      	adds	r3, r0, #1
 8016e42:	4604      	mov	r4, r0
 8016e44:	d14d      	bne.n	8016ee2 <_malloc_r+0xde>
 8016e46:	6834      	ldr	r4, [r6, #0]
 8016e48:	4626      	mov	r6, r4
 8016e4a:	2e00      	cmp	r6, #0
 8016e4c:	d140      	bne.n	8016ed0 <_malloc_r+0xcc>
 8016e4e:	6823      	ldr	r3, [r4, #0]
 8016e50:	4631      	mov	r1, r6
 8016e52:	4638      	mov	r0, r7
 8016e54:	eb04 0803 	add.w	r8, r4, r3
 8016e58:	f000 f8be 	bl	8016fd8 <_sbrk_r>
 8016e5c:	4580      	cmp	r8, r0
 8016e5e:	d13a      	bne.n	8016ed6 <_malloc_r+0xd2>
 8016e60:	6821      	ldr	r1, [r4, #0]
 8016e62:	3503      	adds	r5, #3
 8016e64:	1a6d      	subs	r5, r5, r1
 8016e66:	f025 0503 	bic.w	r5, r5, #3
 8016e6a:	3508      	adds	r5, #8
 8016e6c:	2d0c      	cmp	r5, #12
 8016e6e:	bf38      	it	cc
 8016e70:	250c      	movcc	r5, #12
 8016e72:	4629      	mov	r1, r5
 8016e74:	4638      	mov	r0, r7
 8016e76:	f7ff ffa5 	bl	8016dc4 <sbrk_aligned>
 8016e7a:	3001      	adds	r0, #1
 8016e7c:	d02b      	beq.n	8016ed6 <_malloc_r+0xd2>
 8016e7e:	6823      	ldr	r3, [r4, #0]
 8016e80:	442b      	add	r3, r5
 8016e82:	6023      	str	r3, [r4, #0]
 8016e84:	e00e      	b.n	8016ea4 <_malloc_r+0xa0>
 8016e86:	6822      	ldr	r2, [r4, #0]
 8016e88:	1b52      	subs	r2, r2, r5
 8016e8a:	d41e      	bmi.n	8016eca <_malloc_r+0xc6>
 8016e8c:	2a0b      	cmp	r2, #11
 8016e8e:	d916      	bls.n	8016ebe <_malloc_r+0xba>
 8016e90:	1961      	adds	r1, r4, r5
 8016e92:	42a3      	cmp	r3, r4
 8016e94:	6025      	str	r5, [r4, #0]
 8016e96:	bf18      	it	ne
 8016e98:	6059      	strne	r1, [r3, #4]
 8016e9a:	6863      	ldr	r3, [r4, #4]
 8016e9c:	bf08      	it	eq
 8016e9e:	6031      	streq	r1, [r6, #0]
 8016ea0:	5162      	str	r2, [r4, r5]
 8016ea2:	604b      	str	r3, [r1, #4]
 8016ea4:	4638      	mov	r0, r7
 8016ea6:	f104 060b 	add.w	r6, r4, #11
 8016eaa:	f000 fb8b 	bl	80175c4 <__malloc_unlock>
 8016eae:	f026 0607 	bic.w	r6, r6, #7
 8016eb2:	1d23      	adds	r3, r4, #4
 8016eb4:	1af2      	subs	r2, r6, r3
 8016eb6:	d0b6      	beq.n	8016e26 <_malloc_r+0x22>
 8016eb8:	1b9b      	subs	r3, r3, r6
 8016eba:	50a3      	str	r3, [r4, r2]
 8016ebc:	e7b3      	b.n	8016e26 <_malloc_r+0x22>
 8016ebe:	6862      	ldr	r2, [r4, #4]
 8016ec0:	42a3      	cmp	r3, r4
 8016ec2:	bf0c      	ite	eq
 8016ec4:	6032      	streq	r2, [r6, #0]
 8016ec6:	605a      	strne	r2, [r3, #4]
 8016ec8:	e7ec      	b.n	8016ea4 <_malloc_r+0xa0>
 8016eca:	4623      	mov	r3, r4
 8016ecc:	6864      	ldr	r4, [r4, #4]
 8016ece:	e7b2      	b.n	8016e36 <_malloc_r+0x32>
 8016ed0:	4634      	mov	r4, r6
 8016ed2:	6876      	ldr	r6, [r6, #4]
 8016ed4:	e7b9      	b.n	8016e4a <_malloc_r+0x46>
 8016ed6:	230c      	movs	r3, #12
 8016ed8:	603b      	str	r3, [r7, #0]
 8016eda:	4638      	mov	r0, r7
 8016edc:	f000 fb72 	bl	80175c4 <__malloc_unlock>
 8016ee0:	e7a1      	b.n	8016e26 <_malloc_r+0x22>
 8016ee2:	6025      	str	r5, [r4, #0]
 8016ee4:	e7de      	b.n	8016ea4 <_malloc_r+0xa0>
 8016ee6:	bf00      	nop
 8016ee8:	240055e0 	.word	0x240055e0

08016eec <_puts_r>:
 8016eec:	b570      	push	{r4, r5, r6, lr}
 8016eee:	460e      	mov	r6, r1
 8016ef0:	4605      	mov	r5, r0
 8016ef2:	b118      	cbz	r0, 8016efc <_puts_r+0x10>
 8016ef4:	6983      	ldr	r3, [r0, #24]
 8016ef6:	b90b      	cbnz	r3, 8016efc <_puts_r+0x10>
 8016ef8:	f000 fa58 	bl	80173ac <__sinit>
 8016efc:	69ab      	ldr	r3, [r5, #24]
 8016efe:	68ac      	ldr	r4, [r5, #8]
 8016f00:	b913      	cbnz	r3, 8016f08 <_puts_r+0x1c>
 8016f02:	4628      	mov	r0, r5
 8016f04:	f000 fa52 	bl	80173ac <__sinit>
 8016f08:	4b2c      	ldr	r3, [pc, #176]	; (8016fbc <_puts_r+0xd0>)
 8016f0a:	429c      	cmp	r4, r3
 8016f0c:	d120      	bne.n	8016f50 <_puts_r+0x64>
 8016f0e:	686c      	ldr	r4, [r5, #4]
 8016f10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f12:	07db      	lsls	r3, r3, #31
 8016f14:	d405      	bmi.n	8016f22 <_puts_r+0x36>
 8016f16:	89a3      	ldrh	r3, [r4, #12]
 8016f18:	0598      	lsls	r0, r3, #22
 8016f1a:	d402      	bmi.n	8016f22 <_puts_r+0x36>
 8016f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f1e:	f000 fae3 	bl	80174e8 <__retarget_lock_acquire_recursive>
 8016f22:	89a3      	ldrh	r3, [r4, #12]
 8016f24:	0719      	lsls	r1, r3, #28
 8016f26:	d51d      	bpl.n	8016f64 <_puts_r+0x78>
 8016f28:	6923      	ldr	r3, [r4, #16]
 8016f2a:	b1db      	cbz	r3, 8016f64 <_puts_r+0x78>
 8016f2c:	3e01      	subs	r6, #1
 8016f2e:	68a3      	ldr	r3, [r4, #8]
 8016f30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016f34:	3b01      	subs	r3, #1
 8016f36:	60a3      	str	r3, [r4, #8]
 8016f38:	bb39      	cbnz	r1, 8016f8a <_puts_r+0x9e>
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	da38      	bge.n	8016fb0 <_puts_r+0xc4>
 8016f3e:	4622      	mov	r2, r4
 8016f40:	210a      	movs	r1, #10
 8016f42:	4628      	mov	r0, r5
 8016f44:	f000 f858 	bl	8016ff8 <__swbuf_r>
 8016f48:	3001      	adds	r0, #1
 8016f4a:	d011      	beq.n	8016f70 <_puts_r+0x84>
 8016f4c:	250a      	movs	r5, #10
 8016f4e:	e011      	b.n	8016f74 <_puts_r+0x88>
 8016f50:	4b1b      	ldr	r3, [pc, #108]	; (8016fc0 <_puts_r+0xd4>)
 8016f52:	429c      	cmp	r4, r3
 8016f54:	d101      	bne.n	8016f5a <_puts_r+0x6e>
 8016f56:	68ac      	ldr	r4, [r5, #8]
 8016f58:	e7da      	b.n	8016f10 <_puts_r+0x24>
 8016f5a:	4b1a      	ldr	r3, [pc, #104]	; (8016fc4 <_puts_r+0xd8>)
 8016f5c:	429c      	cmp	r4, r3
 8016f5e:	bf08      	it	eq
 8016f60:	68ec      	ldreq	r4, [r5, #12]
 8016f62:	e7d5      	b.n	8016f10 <_puts_r+0x24>
 8016f64:	4621      	mov	r1, r4
 8016f66:	4628      	mov	r0, r5
 8016f68:	f000 f898 	bl	801709c <__swsetup_r>
 8016f6c:	2800      	cmp	r0, #0
 8016f6e:	d0dd      	beq.n	8016f2c <_puts_r+0x40>
 8016f70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016f74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f76:	07da      	lsls	r2, r3, #31
 8016f78:	d405      	bmi.n	8016f86 <_puts_r+0x9a>
 8016f7a:	89a3      	ldrh	r3, [r4, #12]
 8016f7c:	059b      	lsls	r3, r3, #22
 8016f7e:	d402      	bmi.n	8016f86 <_puts_r+0x9a>
 8016f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f82:	f000 fab2 	bl	80174ea <__retarget_lock_release_recursive>
 8016f86:	4628      	mov	r0, r5
 8016f88:	bd70      	pop	{r4, r5, r6, pc}
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	da04      	bge.n	8016f98 <_puts_r+0xac>
 8016f8e:	69a2      	ldr	r2, [r4, #24]
 8016f90:	429a      	cmp	r2, r3
 8016f92:	dc06      	bgt.n	8016fa2 <_puts_r+0xb6>
 8016f94:	290a      	cmp	r1, #10
 8016f96:	d004      	beq.n	8016fa2 <_puts_r+0xb6>
 8016f98:	6823      	ldr	r3, [r4, #0]
 8016f9a:	1c5a      	adds	r2, r3, #1
 8016f9c:	6022      	str	r2, [r4, #0]
 8016f9e:	7019      	strb	r1, [r3, #0]
 8016fa0:	e7c5      	b.n	8016f2e <_puts_r+0x42>
 8016fa2:	4622      	mov	r2, r4
 8016fa4:	4628      	mov	r0, r5
 8016fa6:	f000 f827 	bl	8016ff8 <__swbuf_r>
 8016faa:	3001      	adds	r0, #1
 8016fac:	d1bf      	bne.n	8016f2e <_puts_r+0x42>
 8016fae:	e7df      	b.n	8016f70 <_puts_r+0x84>
 8016fb0:	6823      	ldr	r3, [r4, #0]
 8016fb2:	250a      	movs	r5, #10
 8016fb4:	1c5a      	adds	r2, r3, #1
 8016fb6:	6022      	str	r2, [r4, #0]
 8016fb8:	701d      	strb	r5, [r3, #0]
 8016fba:	e7db      	b.n	8016f74 <_puts_r+0x88>
 8016fbc:	08017bcc 	.word	0x08017bcc
 8016fc0:	08017bec 	.word	0x08017bec
 8016fc4:	08017bac 	.word	0x08017bac

08016fc8 <puts>:
 8016fc8:	4b02      	ldr	r3, [pc, #8]	; (8016fd4 <puts+0xc>)
 8016fca:	4601      	mov	r1, r0
 8016fcc:	6818      	ldr	r0, [r3, #0]
 8016fce:	f7ff bf8d 	b.w	8016eec <_puts_r>
 8016fd2:	bf00      	nop
 8016fd4:	2400009c 	.word	0x2400009c

08016fd8 <_sbrk_r>:
 8016fd8:	b538      	push	{r3, r4, r5, lr}
 8016fda:	4d06      	ldr	r5, [pc, #24]	; (8016ff4 <_sbrk_r+0x1c>)
 8016fdc:	2300      	movs	r3, #0
 8016fde:	4604      	mov	r4, r0
 8016fe0:	4608      	mov	r0, r1
 8016fe2:	602b      	str	r3, [r5, #0]
 8016fe4:	f7ec f98c 	bl	8003300 <_sbrk>
 8016fe8:	1c43      	adds	r3, r0, #1
 8016fea:	d102      	bne.n	8016ff2 <_sbrk_r+0x1a>
 8016fec:	682b      	ldr	r3, [r5, #0]
 8016fee:	b103      	cbz	r3, 8016ff2 <_sbrk_r+0x1a>
 8016ff0:	6023      	str	r3, [r4, #0]
 8016ff2:	bd38      	pop	{r3, r4, r5, pc}
 8016ff4:	240055ec 	.word	0x240055ec

08016ff8 <__swbuf_r>:
 8016ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ffa:	460e      	mov	r6, r1
 8016ffc:	4614      	mov	r4, r2
 8016ffe:	4605      	mov	r5, r0
 8017000:	b118      	cbz	r0, 801700a <__swbuf_r+0x12>
 8017002:	6983      	ldr	r3, [r0, #24]
 8017004:	b90b      	cbnz	r3, 801700a <__swbuf_r+0x12>
 8017006:	f000 f9d1 	bl	80173ac <__sinit>
 801700a:	4b21      	ldr	r3, [pc, #132]	; (8017090 <__swbuf_r+0x98>)
 801700c:	429c      	cmp	r4, r3
 801700e:	d12b      	bne.n	8017068 <__swbuf_r+0x70>
 8017010:	686c      	ldr	r4, [r5, #4]
 8017012:	69a3      	ldr	r3, [r4, #24]
 8017014:	60a3      	str	r3, [r4, #8]
 8017016:	89a3      	ldrh	r3, [r4, #12]
 8017018:	071a      	lsls	r2, r3, #28
 801701a:	d52f      	bpl.n	801707c <__swbuf_r+0x84>
 801701c:	6923      	ldr	r3, [r4, #16]
 801701e:	b36b      	cbz	r3, 801707c <__swbuf_r+0x84>
 8017020:	6923      	ldr	r3, [r4, #16]
 8017022:	6820      	ldr	r0, [r4, #0]
 8017024:	1ac0      	subs	r0, r0, r3
 8017026:	6963      	ldr	r3, [r4, #20]
 8017028:	b2f6      	uxtb	r6, r6
 801702a:	4283      	cmp	r3, r0
 801702c:	4637      	mov	r7, r6
 801702e:	dc04      	bgt.n	801703a <__swbuf_r+0x42>
 8017030:	4621      	mov	r1, r4
 8017032:	4628      	mov	r0, r5
 8017034:	f000 f926 	bl	8017284 <_fflush_r>
 8017038:	bb30      	cbnz	r0, 8017088 <__swbuf_r+0x90>
 801703a:	68a3      	ldr	r3, [r4, #8]
 801703c:	3b01      	subs	r3, #1
 801703e:	60a3      	str	r3, [r4, #8]
 8017040:	6823      	ldr	r3, [r4, #0]
 8017042:	1c5a      	adds	r2, r3, #1
 8017044:	6022      	str	r2, [r4, #0]
 8017046:	701e      	strb	r6, [r3, #0]
 8017048:	6963      	ldr	r3, [r4, #20]
 801704a:	3001      	adds	r0, #1
 801704c:	4283      	cmp	r3, r0
 801704e:	d004      	beq.n	801705a <__swbuf_r+0x62>
 8017050:	89a3      	ldrh	r3, [r4, #12]
 8017052:	07db      	lsls	r3, r3, #31
 8017054:	d506      	bpl.n	8017064 <__swbuf_r+0x6c>
 8017056:	2e0a      	cmp	r6, #10
 8017058:	d104      	bne.n	8017064 <__swbuf_r+0x6c>
 801705a:	4621      	mov	r1, r4
 801705c:	4628      	mov	r0, r5
 801705e:	f000 f911 	bl	8017284 <_fflush_r>
 8017062:	b988      	cbnz	r0, 8017088 <__swbuf_r+0x90>
 8017064:	4638      	mov	r0, r7
 8017066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017068:	4b0a      	ldr	r3, [pc, #40]	; (8017094 <__swbuf_r+0x9c>)
 801706a:	429c      	cmp	r4, r3
 801706c:	d101      	bne.n	8017072 <__swbuf_r+0x7a>
 801706e:	68ac      	ldr	r4, [r5, #8]
 8017070:	e7cf      	b.n	8017012 <__swbuf_r+0x1a>
 8017072:	4b09      	ldr	r3, [pc, #36]	; (8017098 <__swbuf_r+0xa0>)
 8017074:	429c      	cmp	r4, r3
 8017076:	bf08      	it	eq
 8017078:	68ec      	ldreq	r4, [r5, #12]
 801707a:	e7ca      	b.n	8017012 <__swbuf_r+0x1a>
 801707c:	4621      	mov	r1, r4
 801707e:	4628      	mov	r0, r5
 8017080:	f000 f80c 	bl	801709c <__swsetup_r>
 8017084:	2800      	cmp	r0, #0
 8017086:	d0cb      	beq.n	8017020 <__swbuf_r+0x28>
 8017088:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801708c:	e7ea      	b.n	8017064 <__swbuf_r+0x6c>
 801708e:	bf00      	nop
 8017090:	08017bcc 	.word	0x08017bcc
 8017094:	08017bec 	.word	0x08017bec
 8017098:	08017bac 	.word	0x08017bac

0801709c <__swsetup_r>:
 801709c:	4b32      	ldr	r3, [pc, #200]	; (8017168 <__swsetup_r+0xcc>)
 801709e:	b570      	push	{r4, r5, r6, lr}
 80170a0:	681d      	ldr	r5, [r3, #0]
 80170a2:	4606      	mov	r6, r0
 80170a4:	460c      	mov	r4, r1
 80170a6:	b125      	cbz	r5, 80170b2 <__swsetup_r+0x16>
 80170a8:	69ab      	ldr	r3, [r5, #24]
 80170aa:	b913      	cbnz	r3, 80170b2 <__swsetup_r+0x16>
 80170ac:	4628      	mov	r0, r5
 80170ae:	f000 f97d 	bl	80173ac <__sinit>
 80170b2:	4b2e      	ldr	r3, [pc, #184]	; (801716c <__swsetup_r+0xd0>)
 80170b4:	429c      	cmp	r4, r3
 80170b6:	d10f      	bne.n	80170d8 <__swsetup_r+0x3c>
 80170b8:	686c      	ldr	r4, [r5, #4]
 80170ba:	89a3      	ldrh	r3, [r4, #12]
 80170bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80170c0:	0719      	lsls	r1, r3, #28
 80170c2:	d42c      	bmi.n	801711e <__swsetup_r+0x82>
 80170c4:	06dd      	lsls	r5, r3, #27
 80170c6:	d411      	bmi.n	80170ec <__swsetup_r+0x50>
 80170c8:	2309      	movs	r3, #9
 80170ca:	6033      	str	r3, [r6, #0]
 80170cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80170d0:	81a3      	strh	r3, [r4, #12]
 80170d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170d6:	e03e      	b.n	8017156 <__swsetup_r+0xba>
 80170d8:	4b25      	ldr	r3, [pc, #148]	; (8017170 <__swsetup_r+0xd4>)
 80170da:	429c      	cmp	r4, r3
 80170dc:	d101      	bne.n	80170e2 <__swsetup_r+0x46>
 80170de:	68ac      	ldr	r4, [r5, #8]
 80170e0:	e7eb      	b.n	80170ba <__swsetup_r+0x1e>
 80170e2:	4b24      	ldr	r3, [pc, #144]	; (8017174 <__swsetup_r+0xd8>)
 80170e4:	429c      	cmp	r4, r3
 80170e6:	bf08      	it	eq
 80170e8:	68ec      	ldreq	r4, [r5, #12]
 80170ea:	e7e6      	b.n	80170ba <__swsetup_r+0x1e>
 80170ec:	0758      	lsls	r0, r3, #29
 80170ee:	d512      	bpl.n	8017116 <__swsetup_r+0x7a>
 80170f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80170f2:	b141      	cbz	r1, 8017106 <__swsetup_r+0x6a>
 80170f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80170f8:	4299      	cmp	r1, r3
 80170fa:	d002      	beq.n	8017102 <__swsetup_r+0x66>
 80170fc:	4630      	mov	r0, r6
 80170fe:	f7ff fe15 	bl	8016d2c <_free_r>
 8017102:	2300      	movs	r3, #0
 8017104:	6363      	str	r3, [r4, #52]	; 0x34
 8017106:	89a3      	ldrh	r3, [r4, #12]
 8017108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801710c:	81a3      	strh	r3, [r4, #12]
 801710e:	2300      	movs	r3, #0
 8017110:	6063      	str	r3, [r4, #4]
 8017112:	6923      	ldr	r3, [r4, #16]
 8017114:	6023      	str	r3, [r4, #0]
 8017116:	89a3      	ldrh	r3, [r4, #12]
 8017118:	f043 0308 	orr.w	r3, r3, #8
 801711c:	81a3      	strh	r3, [r4, #12]
 801711e:	6923      	ldr	r3, [r4, #16]
 8017120:	b94b      	cbnz	r3, 8017136 <__swsetup_r+0x9a>
 8017122:	89a3      	ldrh	r3, [r4, #12]
 8017124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801712c:	d003      	beq.n	8017136 <__swsetup_r+0x9a>
 801712e:	4621      	mov	r1, r4
 8017130:	4630      	mov	r0, r6
 8017132:	f000 fa01 	bl	8017538 <__smakebuf_r>
 8017136:	89a0      	ldrh	r0, [r4, #12]
 8017138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801713c:	f010 0301 	ands.w	r3, r0, #1
 8017140:	d00a      	beq.n	8017158 <__swsetup_r+0xbc>
 8017142:	2300      	movs	r3, #0
 8017144:	60a3      	str	r3, [r4, #8]
 8017146:	6963      	ldr	r3, [r4, #20]
 8017148:	425b      	negs	r3, r3
 801714a:	61a3      	str	r3, [r4, #24]
 801714c:	6923      	ldr	r3, [r4, #16]
 801714e:	b943      	cbnz	r3, 8017162 <__swsetup_r+0xc6>
 8017150:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017154:	d1ba      	bne.n	80170cc <__swsetup_r+0x30>
 8017156:	bd70      	pop	{r4, r5, r6, pc}
 8017158:	0781      	lsls	r1, r0, #30
 801715a:	bf58      	it	pl
 801715c:	6963      	ldrpl	r3, [r4, #20]
 801715e:	60a3      	str	r3, [r4, #8]
 8017160:	e7f4      	b.n	801714c <__swsetup_r+0xb0>
 8017162:	2000      	movs	r0, #0
 8017164:	e7f7      	b.n	8017156 <__swsetup_r+0xba>
 8017166:	bf00      	nop
 8017168:	2400009c 	.word	0x2400009c
 801716c:	08017bcc 	.word	0x08017bcc
 8017170:	08017bec 	.word	0x08017bec
 8017174:	08017bac 	.word	0x08017bac

08017178 <__sflush_r>:
 8017178:	898a      	ldrh	r2, [r1, #12]
 801717a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801717e:	4605      	mov	r5, r0
 8017180:	0710      	lsls	r0, r2, #28
 8017182:	460c      	mov	r4, r1
 8017184:	d458      	bmi.n	8017238 <__sflush_r+0xc0>
 8017186:	684b      	ldr	r3, [r1, #4]
 8017188:	2b00      	cmp	r3, #0
 801718a:	dc05      	bgt.n	8017198 <__sflush_r+0x20>
 801718c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801718e:	2b00      	cmp	r3, #0
 8017190:	dc02      	bgt.n	8017198 <__sflush_r+0x20>
 8017192:	2000      	movs	r0, #0
 8017194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801719a:	2e00      	cmp	r6, #0
 801719c:	d0f9      	beq.n	8017192 <__sflush_r+0x1a>
 801719e:	2300      	movs	r3, #0
 80171a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80171a4:	682f      	ldr	r7, [r5, #0]
 80171a6:	602b      	str	r3, [r5, #0]
 80171a8:	d032      	beq.n	8017210 <__sflush_r+0x98>
 80171aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80171ac:	89a3      	ldrh	r3, [r4, #12]
 80171ae:	075a      	lsls	r2, r3, #29
 80171b0:	d505      	bpl.n	80171be <__sflush_r+0x46>
 80171b2:	6863      	ldr	r3, [r4, #4]
 80171b4:	1ac0      	subs	r0, r0, r3
 80171b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80171b8:	b10b      	cbz	r3, 80171be <__sflush_r+0x46>
 80171ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80171bc:	1ac0      	subs	r0, r0, r3
 80171be:	2300      	movs	r3, #0
 80171c0:	4602      	mov	r2, r0
 80171c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80171c4:	6a21      	ldr	r1, [r4, #32]
 80171c6:	4628      	mov	r0, r5
 80171c8:	47b0      	blx	r6
 80171ca:	1c43      	adds	r3, r0, #1
 80171cc:	89a3      	ldrh	r3, [r4, #12]
 80171ce:	d106      	bne.n	80171de <__sflush_r+0x66>
 80171d0:	6829      	ldr	r1, [r5, #0]
 80171d2:	291d      	cmp	r1, #29
 80171d4:	d82c      	bhi.n	8017230 <__sflush_r+0xb8>
 80171d6:	4a2a      	ldr	r2, [pc, #168]	; (8017280 <__sflush_r+0x108>)
 80171d8:	40ca      	lsrs	r2, r1
 80171da:	07d6      	lsls	r6, r2, #31
 80171dc:	d528      	bpl.n	8017230 <__sflush_r+0xb8>
 80171de:	2200      	movs	r2, #0
 80171e0:	6062      	str	r2, [r4, #4]
 80171e2:	04d9      	lsls	r1, r3, #19
 80171e4:	6922      	ldr	r2, [r4, #16]
 80171e6:	6022      	str	r2, [r4, #0]
 80171e8:	d504      	bpl.n	80171f4 <__sflush_r+0x7c>
 80171ea:	1c42      	adds	r2, r0, #1
 80171ec:	d101      	bne.n	80171f2 <__sflush_r+0x7a>
 80171ee:	682b      	ldr	r3, [r5, #0]
 80171f0:	b903      	cbnz	r3, 80171f4 <__sflush_r+0x7c>
 80171f2:	6560      	str	r0, [r4, #84]	; 0x54
 80171f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80171f6:	602f      	str	r7, [r5, #0]
 80171f8:	2900      	cmp	r1, #0
 80171fa:	d0ca      	beq.n	8017192 <__sflush_r+0x1a>
 80171fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017200:	4299      	cmp	r1, r3
 8017202:	d002      	beq.n	801720a <__sflush_r+0x92>
 8017204:	4628      	mov	r0, r5
 8017206:	f7ff fd91 	bl	8016d2c <_free_r>
 801720a:	2000      	movs	r0, #0
 801720c:	6360      	str	r0, [r4, #52]	; 0x34
 801720e:	e7c1      	b.n	8017194 <__sflush_r+0x1c>
 8017210:	6a21      	ldr	r1, [r4, #32]
 8017212:	2301      	movs	r3, #1
 8017214:	4628      	mov	r0, r5
 8017216:	47b0      	blx	r6
 8017218:	1c41      	adds	r1, r0, #1
 801721a:	d1c7      	bne.n	80171ac <__sflush_r+0x34>
 801721c:	682b      	ldr	r3, [r5, #0]
 801721e:	2b00      	cmp	r3, #0
 8017220:	d0c4      	beq.n	80171ac <__sflush_r+0x34>
 8017222:	2b1d      	cmp	r3, #29
 8017224:	d001      	beq.n	801722a <__sflush_r+0xb2>
 8017226:	2b16      	cmp	r3, #22
 8017228:	d101      	bne.n	801722e <__sflush_r+0xb6>
 801722a:	602f      	str	r7, [r5, #0]
 801722c:	e7b1      	b.n	8017192 <__sflush_r+0x1a>
 801722e:	89a3      	ldrh	r3, [r4, #12]
 8017230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017234:	81a3      	strh	r3, [r4, #12]
 8017236:	e7ad      	b.n	8017194 <__sflush_r+0x1c>
 8017238:	690f      	ldr	r7, [r1, #16]
 801723a:	2f00      	cmp	r7, #0
 801723c:	d0a9      	beq.n	8017192 <__sflush_r+0x1a>
 801723e:	0793      	lsls	r3, r2, #30
 8017240:	680e      	ldr	r6, [r1, #0]
 8017242:	bf08      	it	eq
 8017244:	694b      	ldreq	r3, [r1, #20]
 8017246:	600f      	str	r7, [r1, #0]
 8017248:	bf18      	it	ne
 801724a:	2300      	movne	r3, #0
 801724c:	eba6 0807 	sub.w	r8, r6, r7
 8017250:	608b      	str	r3, [r1, #8]
 8017252:	f1b8 0f00 	cmp.w	r8, #0
 8017256:	dd9c      	ble.n	8017192 <__sflush_r+0x1a>
 8017258:	6a21      	ldr	r1, [r4, #32]
 801725a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801725c:	4643      	mov	r3, r8
 801725e:	463a      	mov	r2, r7
 8017260:	4628      	mov	r0, r5
 8017262:	47b0      	blx	r6
 8017264:	2800      	cmp	r0, #0
 8017266:	dc06      	bgt.n	8017276 <__sflush_r+0xfe>
 8017268:	89a3      	ldrh	r3, [r4, #12]
 801726a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801726e:	81a3      	strh	r3, [r4, #12]
 8017270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017274:	e78e      	b.n	8017194 <__sflush_r+0x1c>
 8017276:	4407      	add	r7, r0
 8017278:	eba8 0800 	sub.w	r8, r8, r0
 801727c:	e7e9      	b.n	8017252 <__sflush_r+0xda>
 801727e:	bf00      	nop
 8017280:	20400001 	.word	0x20400001

08017284 <_fflush_r>:
 8017284:	b538      	push	{r3, r4, r5, lr}
 8017286:	690b      	ldr	r3, [r1, #16]
 8017288:	4605      	mov	r5, r0
 801728a:	460c      	mov	r4, r1
 801728c:	b913      	cbnz	r3, 8017294 <_fflush_r+0x10>
 801728e:	2500      	movs	r5, #0
 8017290:	4628      	mov	r0, r5
 8017292:	bd38      	pop	{r3, r4, r5, pc}
 8017294:	b118      	cbz	r0, 801729e <_fflush_r+0x1a>
 8017296:	6983      	ldr	r3, [r0, #24]
 8017298:	b90b      	cbnz	r3, 801729e <_fflush_r+0x1a>
 801729a:	f000 f887 	bl	80173ac <__sinit>
 801729e:	4b14      	ldr	r3, [pc, #80]	; (80172f0 <_fflush_r+0x6c>)
 80172a0:	429c      	cmp	r4, r3
 80172a2:	d11b      	bne.n	80172dc <_fflush_r+0x58>
 80172a4:	686c      	ldr	r4, [r5, #4]
 80172a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d0ef      	beq.n	801728e <_fflush_r+0xa>
 80172ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80172b0:	07d0      	lsls	r0, r2, #31
 80172b2:	d404      	bmi.n	80172be <_fflush_r+0x3a>
 80172b4:	0599      	lsls	r1, r3, #22
 80172b6:	d402      	bmi.n	80172be <_fflush_r+0x3a>
 80172b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80172ba:	f000 f915 	bl	80174e8 <__retarget_lock_acquire_recursive>
 80172be:	4628      	mov	r0, r5
 80172c0:	4621      	mov	r1, r4
 80172c2:	f7ff ff59 	bl	8017178 <__sflush_r>
 80172c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80172c8:	07da      	lsls	r2, r3, #31
 80172ca:	4605      	mov	r5, r0
 80172cc:	d4e0      	bmi.n	8017290 <_fflush_r+0xc>
 80172ce:	89a3      	ldrh	r3, [r4, #12]
 80172d0:	059b      	lsls	r3, r3, #22
 80172d2:	d4dd      	bmi.n	8017290 <_fflush_r+0xc>
 80172d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80172d6:	f000 f908 	bl	80174ea <__retarget_lock_release_recursive>
 80172da:	e7d9      	b.n	8017290 <_fflush_r+0xc>
 80172dc:	4b05      	ldr	r3, [pc, #20]	; (80172f4 <_fflush_r+0x70>)
 80172de:	429c      	cmp	r4, r3
 80172e0:	d101      	bne.n	80172e6 <_fflush_r+0x62>
 80172e2:	68ac      	ldr	r4, [r5, #8]
 80172e4:	e7df      	b.n	80172a6 <_fflush_r+0x22>
 80172e6:	4b04      	ldr	r3, [pc, #16]	; (80172f8 <_fflush_r+0x74>)
 80172e8:	429c      	cmp	r4, r3
 80172ea:	bf08      	it	eq
 80172ec:	68ec      	ldreq	r4, [r5, #12]
 80172ee:	e7da      	b.n	80172a6 <_fflush_r+0x22>
 80172f0:	08017bcc 	.word	0x08017bcc
 80172f4:	08017bec 	.word	0x08017bec
 80172f8:	08017bac 	.word	0x08017bac

080172fc <std>:
 80172fc:	2300      	movs	r3, #0
 80172fe:	b510      	push	{r4, lr}
 8017300:	4604      	mov	r4, r0
 8017302:	e9c0 3300 	strd	r3, r3, [r0]
 8017306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801730a:	6083      	str	r3, [r0, #8]
 801730c:	8181      	strh	r1, [r0, #12]
 801730e:	6643      	str	r3, [r0, #100]	; 0x64
 8017310:	81c2      	strh	r2, [r0, #14]
 8017312:	6183      	str	r3, [r0, #24]
 8017314:	4619      	mov	r1, r3
 8017316:	2208      	movs	r2, #8
 8017318:	305c      	adds	r0, #92	; 0x5c
 801731a:	f7ff fcff 	bl	8016d1c <memset>
 801731e:	4b05      	ldr	r3, [pc, #20]	; (8017334 <std+0x38>)
 8017320:	6263      	str	r3, [r4, #36]	; 0x24
 8017322:	4b05      	ldr	r3, [pc, #20]	; (8017338 <std+0x3c>)
 8017324:	62a3      	str	r3, [r4, #40]	; 0x28
 8017326:	4b05      	ldr	r3, [pc, #20]	; (801733c <std+0x40>)
 8017328:	62e3      	str	r3, [r4, #44]	; 0x2c
 801732a:	4b05      	ldr	r3, [pc, #20]	; (8017340 <std+0x44>)
 801732c:	6224      	str	r4, [r4, #32]
 801732e:	6323      	str	r3, [r4, #48]	; 0x30
 8017330:	bd10      	pop	{r4, pc}
 8017332:	bf00      	nop
 8017334:	080175d1 	.word	0x080175d1
 8017338:	080175f3 	.word	0x080175f3
 801733c:	0801762b 	.word	0x0801762b
 8017340:	0801764f 	.word	0x0801764f

08017344 <_cleanup_r>:
 8017344:	4901      	ldr	r1, [pc, #4]	; (801734c <_cleanup_r+0x8>)
 8017346:	f000 b8af 	b.w	80174a8 <_fwalk_reent>
 801734a:	bf00      	nop
 801734c:	08017285 	.word	0x08017285

08017350 <__sfmoreglue>:
 8017350:	b570      	push	{r4, r5, r6, lr}
 8017352:	2268      	movs	r2, #104	; 0x68
 8017354:	1e4d      	subs	r5, r1, #1
 8017356:	4355      	muls	r5, r2
 8017358:	460e      	mov	r6, r1
 801735a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801735e:	f7ff fd51 	bl	8016e04 <_malloc_r>
 8017362:	4604      	mov	r4, r0
 8017364:	b140      	cbz	r0, 8017378 <__sfmoreglue+0x28>
 8017366:	2100      	movs	r1, #0
 8017368:	e9c0 1600 	strd	r1, r6, [r0]
 801736c:	300c      	adds	r0, #12
 801736e:	60a0      	str	r0, [r4, #8]
 8017370:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017374:	f7ff fcd2 	bl	8016d1c <memset>
 8017378:	4620      	mov	r0, r4
 801737a:	bd70      	pop	{r4, r5, r6, pc}

0801737c <__sfp_lock_acquire>:
 801737c:	4801      	ldr	r0, [pc, #4]	; (8017384 <__sfp_lock_acquire+0x8>)
 801737e:	f000 b8b3 	b.w	80174e8 <__retarget_lock_acquire_recursive>
 8017382:	bf00      	nop
 8017384:	240055e9 	.word	0x240055e9

08017388 <__sfp_lock_release>:
 8017388:	4801      	ldr	r0, [pc, #4]	; (8017390 <__sfp_lock_release+0x8>)
 801738a:	f000 b8ae 	b.w	80174ea <__retarget_lock_release_recursive>
 801738e:	bf00      	nop
 8017390:	240055e9 	.word	0x240055e9

08017394 <__sinit_lock_acquire>:
 8017394:	4801      	ldr	r0, [pc, #4]	; (801739c <__sinit_lock_acquire+0x8>)
 8017396:	f000 b8a7 	b.w	80174e8 <__retarget_lock_acquire_recursive>
 801739a:	bf00      	nop
 801739c:	240055ea 	.word	0x240055ea

080173a0 <__sinit_lock_release>:
 80173a0:	4801      	ldr	r0, [pc, #4]	; (80173a8 <__sinit_lock_release+0x8>)
 80173a2:	f000 b8a2 	b.w	80174ea <__retarget_lock_release_recursive>
 80173a6:	bf00      	nop
 80173a8:	240055ea 	.word	0x240055ea

080173ac <__sinit>:
 80173ac:	b510      	push	{r4, lr}
 80173ae:	4604      	mov	r4, r0
 80173b0:	f7ff fff0 	bl	8017394 <__sinit_lock_acquire>
 80173b4:	69a3      	ldr	r3, [r4, #24]
 80173b6:	b11b      	cbz	r3, 80173c0 <__sinit+0x14>
 80173b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173bc:	f7ff bff0 	b.w	80173a0 <__sinit_lock_release>
 80173c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80173c4:	6523      	str	r3, [r4, #80]	; 0x50
 80173c6:	4b13      	ldr	r3, [pc, #76]	; (8017414 <__sinit+0x68>)
 80173c8:	4a13      	ldr	r2, [pc, #76]	; (8017418 <__sinit+0x6c>)
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80173ce:	42a3      	cmp	r3, r4
 80173d0:	bf04      	itt	eq
 80173d2:	2301      	moveq	r3, #1
 80173d4:	61a3      	streq	r3, [r4, #24]
 80173d6:	4620      	mov	r0, r4
 80173d8:	f000 f820 	bl	801741c <__sfp>
 80173dc:	6060      	str	r0, [r4, #4]
 80173de:	4620      	mov	r0, r4
 80173e0:	f000 f81c 	bl	801741c <__sfp>
 80173e4:	60a0      	str	r0, [r4, #8]
 80173e6:	4620      	mov	r0, r4
 80173e8:	f000 f818 	bl	801741c <__sfp>
 80173ec:	2200      	movs	r2, #0
 80173ee:	60e0      	str	r0, [r4, #12]
 80173f0:	2104      	movs	r1, #4
 80173f2:	6860      	ldr	r0, [r4, #4]
 80173f4:	f7ff ff82 	bl	80172fc <std>
 80173f8:	68a0      	ldr	r0, [r4, #8]
 80173fa:	2201      	movs	r2, #1
 80173fc:	2109      	movs	r1, #9
 80173fe:	f7ff ff7d 	bl	80172fc <std>
 8017402:	68e0      	ldr	r0, [r4, #12]
 8017404:	2202      	movs	r2, #2
 8017406:	2112      	movs	r1, #18
 8017408:	f7ff ff78 	bl	80172fc <std>
 801740c:	2301      	movs	r3, #1
 801740e:	61a3      	str	r3, [r4, #24]
 8017410:	e7d2      	b.n	80173b8 <__sinit+0xc>
 8017412:	bf00      	nop
 8017414:	08017ba8 	.word	0x08017ba8
 8017418:	08017345 	.word	0x08017345

0801741c <__sfp>:
 801741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801741e:	4607      	mov	r7, r0
 8017420:	f7ff ffac 	bl	801737c <__sfp_lock_acquire>
 8017424:	4b1e      	ldr	r3, [pc, #120]	; (80174a0 <__sfp+0x84>)
 8017426:	681e      	ldr	r6, [r3, #0]
 8017428:	69b3      	ldr	r3, [r6, #24]
 801742a:	b913      	cbnz	r3, 8017432 <__sfp+0x16>
 801742c:	4630      	mov	r0, r6
 801742e:	f7ff ffbd 	bl	80173ac <__sinit>
 8017432:	3648      	adds	r6, #72	; 0x48
 8017434:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017438:	3b01      	subs	r3, #1
 801743a:	d503      	bpl.n	8017444 <__sfp+0x28>
 801743c:	6833      	ldr	r3, [r6, #0]
 801743e:	b30b      	cbz	r3, 8017484 <__sfp+0x68>
 8017440:	6836      	ldr	r6, [r6, #0]
 8017442:	e7f7      	b.n	8017434 <__sfp+0x18>
 8017444:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017448:	b9d5      	cbnz	r5, 8017480 <__sfp+0x64>
 801744a:	4b16      	ldr	r3, [pc, #88]	; (80174a4 <__sfp+0x88>)
 801744c:	60e3      	str	r3, [r4, #12]
 801744e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017452:	6665      	str	r5, [r4, #100]	; 0x64
 8017454:	f000 f847 	bl	80174e6 <__retarget_lock_init_recursive>
 8017458:	f7ff ff96 	bl	8017388 <__sfp_lock_release>
 801745c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017460:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017464:	6025      	str	r5, [r4, #0]
 8017466:	61a5      	str	r5, [r4, #24]
 8017468:	2208      	movs	r2, #8
 801746a:	4629      	mov	r1, r5
 801746c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017470:	f7ff fc54 	bl	8016d1c <memset>
 8017474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801747c:	4620      	mov	r0, r4
 801747e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017480:	3468      	adds	r4, #104	; 0x68
 8017482:	e7d9      	b.n	8017438 <__sfp+0x1c>
 8017484:	2104      	movs	r1, #4
 8017486:	4638      	mov	r0, r7
 8017488:	f7ff ff62 	bl	8017350 <__sfmoreglue>
 801748c:	4604      	mov	r4, r0
 801748e:	6030      	str	r0, [r6, #0]
 8017490:	2800      	cmp	r0, #0
 8017492:	d1d5      	bne.n	8017440 <__sfp+0x24>
 8017494:	f7ff ff78 	bl	8017388 <__sfp_lock_release>
 8017498:	230c      	movs	r3, #12
 801749a:	603b      	str	r3, [r7, #0]
 801749c:	e7ee      	b.n	801747c <__sfp+0x60>
 801749e:	bf00      	nop
 80174a0:	08017ba8 	.word	0x08017ba8
 80174a4:	ffff0001 	.word	0xffff0001

080174a8 <_fwalk_reent>:
 80174a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174ac:	4606      	mov	r6, r0
 80174ae:	4688      	mov	r8, r1
 80174b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80174b4:	2700      	movs	r7, #0
 80174b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80174ba:	f1b9 0901 	subs.w	r9, r9, #1
 80174be:	d505      	bpl.n	80174cc <_fwalk_reent+0x24>
 80174c0:	6824      	ldr	r4, [r4, #0]
 80174c2:	2c00      	cmp	r4, #0
 80174c4:	d1f7      	bne.n	80174b6 <_fwalk_reent+0xe>
 80174c6:	4638      	mov	r0, r7
 80174c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174cc:	89ab      	ldrh	r3, [r5, #12]
 80174ce:	2b01      	cmp	r3, #1
 80174d0:	d907      	bls.n	80174e2 <_fwalk_reent+0x3a>
 80174d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80174d6:	3301      	adds	r3, #1
 80174d8:	d003      	beq.n	80174e2 <_fwalk_reent+0x3a>
 80174da:	4629      	mov	r1, r5
 80174dc:	4630      	mov	r0, r6
 80174de:	47c0      	blx	r8
 80174e0:	4307      	orrs	r7, r0
 80174e2:	3568      	adds	r5, #104	; 0x68
 80174e4:	e7e9      	b.n	80174ba <_fwalk_reent+0x12>

080174e6 <__retarget_lock_init_recursive>:
 80174e6:	4770      	bx	lr

080174e8 <__retarget_lock_acquire_recursive>:
 80174e8:	4770      	bx	lr

080174ea <__retarget_lock_release_recursive>:
 80174ea:	4770      	bx	lr

080174ec <__swhatbuf_r>:
 80174ec:	b570      	push	{r4, r5, r6, lr}
 80174ee:	460e      	mov	r6, r1
 80174f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80174f4:	2900      	cmp	r1, #0
 80174f6:	b096      	sub	sp, #88	; 0x58
 80174f8:	4614      	mov	r4, r2
 80174fa:	461d      	mov	r5, r3
 80174fc:	da08      	bge.n	8017510 <__swhatbuf_r+0x24>
 80174fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017502:	2200      	movs	r2, #0
 8017504:	602a      	str	r2, [r5, #0]
 8017506:	061a      	lsls	r2, r3, #24
 8017508:	d410      	bmi.n	801752c <__swhatbuf_r+0x40>
 801750a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801750e:	e00e      	b.n	801752e <__swhatbuf_r+0x42>
 8017510:	466a      	mov	r2, sp
 8017512:	f000 f8c3 	bl	801769c <_fstat_r>
 8017516:	2800      	cmp	r0, #0
 8017518:	dbf1      	blt.n	80174fe <__swhatbuf_r+0x12>
 801751a:	9a01      	ldr	r2, [sp, #4]
 801751c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017520:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017524:	425a      	negs	r2, r3
 8017526:	415a      	adcs	r2, r3
 8017528:	602a      	str	r2, [r5, #0]
 801752a:	e7ee      	b.n	801750a <__swhatbuf_r+0x1e>
 801752c:	2340      	movs	r3, #64	; 0x40
 801752e:	2000      	movs	r0, #0
 8017530:	6023      	str	r3, [r4, #0]
 8017532:	b016      	add	sp, #88	; 0x58
 8017534:	bd70      	pop	{r4, r5, r6, pc}
	...

08017538 <__smakebuf_r>:
 8017538:	898b      	ldrh	r3, [r1, #12]
 801753a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801753c:	079d      	lsls	r5, r3, #30
 801753e:	4606      	mov	r6, r0
 8017540:	460c      	mov	r4, r1
 8017542:	d507      	bpl.n	8017554 <__smakebuf_r+0x1c>
 8017544:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017548:	6023      	str	r3, [r4, #0]
 801754a:	6123      	str	r3, [r4, #16]
 801754c:	2301      	movs	r3, #1
 801754e:	6163      	str	r3, [r4, #20]
 8017550:	b002      	add	sp, #8
 8017552:	bd70      	pop	{r4, r5, r6, pc}
 8017554:	ab01      	add	r3, sp, #4
 8017556:	466a      	mov	r2, sp
 8017558:	f7ff ffc8 	bl	80174ec <__swhatbuf_r>
 801755c:	9900      	ldr	r1, [sp, #0]
 801755e:	4605      	mov	r5, r0
 8017560:	4630      	mov	r0, r6
 8017562:	f7ff fc4f 	bl	8016e04 <_malloc_r>
 8017566:	b948      	cbnz	r0, 801757c <__smakebuf_r+0x44>
 8017568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801756c:	059a      	lsls	r2, r3, #22
 801756e:	d4ef      	bmi.n	8017550 <__smakebuf_r+0x18>
 8017570:	f023 0303 	bic.w	r3, r3, #3
 8017574:	f043 0302 	orr.w	r3, r3, #2
 8017578:	81a3      	strh	r3, [r4, #12]
 801757a:	e7e3      	b.n	8017544 <__smakebuf_r+0xc>
 801757c:	4b0d      	ldr	r3, [pc, #52]	; (80175b4 <__smakebuf_r+0x7c>)
 801757e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017580:	89a3      	ldrh	r3, [r4, #12]
 8017582:	6020      	str	r0, [r4, #0]
 8017584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017588:	81a3      	strh	r3, [r4, #12]
 801758a:	9b00      	ldr	r3, [sp, #0]
 801758c:	6163      	str	r3, [r4, #20]
 801758e:	9b01      	ldr	r3, [sp, #4]
 8017590:	6120      	str	r0, [r4, #16]
 8017592:	b15b      	cbz	r3, 80175ac <__smakebuf_r+0x74>
 8017594:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017598:	4630      	mov	r0, r6
 801759a:	f000 f891 	bl	80176c0 <_isatty_r>
 801759e:	b128      	cbz	r0, 80175ac <__smakebuf_r+0x74>
 80175a0:	89a3      	ldrh	r3, [r4, #12]
 80175a2:	f023 0303 	bic.w	r3, r3, #3
 80175a6:	f043 0301 	orr.w	r3, r3, #1
 80175aa:	81a3      	strh	r3, [r4, #12]
 80175ac:	89a0      	ldrh	r0, [r4, #12]
 80175ae:	4305      	orrs	r5, r0
 80175b0:	81a5      	strh	r5, [r4, #12]
 80175b2:	e7cd      	b.n	8017550 <__smakebuf_r+0x18>
 80175b4:	08017345 	.word	0x08017345

080175b8 <__malloc_lock>:
 80175b8:	4801      	ldr	r0, [pc, #4]	; (80175c0 <__malloc_lock+0x8>)
 80175ba:	f7ff bf95 	b.w	80174e8 <__retarget_lock_acquire_recursive>
 80175be:	bf00      	nop
 80175c0:	240055e8 	.word	0x240055e8

080175c4 <__malloc_unlock>:
 80175c4:	4801      	ldr	r0, [pc, #4]	; (80175cc <__malloc_unlock+0x8>)
 80175c6:	f7ff bf90 	b.w	80174ea <__retarget_lock_release_recursive>
 80175ca:	bf00      	nop
 80175cc:	240055e8 	.word	0x240055e8

080175d0 <__sread>:
 80175d0:	b510      	push	{r4, lr}
 80175d2:	460c      	mov	r4, r1
 80175d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175d8:	f000 f894 	bl	8017704 <_read_r>
 80175dc:	2800      	cmp	r0, #0
 80175de:	bfab      	itete	ge
 80175e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80175e2:	89a3      	ldrhlt	r3, [r4, #12]
 80175e4:	181b      	addge	r3, r3, r0
 80175e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80175ea:	bfac      	ite	ge
 80175ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80175ee:	81a3      	strhlt	r3, [r4, #12]
 80175f0:	bd10      	pop	{r4, pc}

080175f2 <__swrite>:
 80175f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175f6:	461f      	mov	r7, r3
 80175f8:	898b      	ldrh	r3, [r1, #12]
 80175fa:	05db      	lsls	r3, r3, #23
 80175fc:	4605      	mov	r5, r0
 80175fe:	460c      	mov	r4, r1
 8017600:	4616      	mov	r6, r2
 8017602:	d505      	bpl.n	8017610 <__swrite+0x1e>
 8017604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017608:	2302      	movs	r3, #2
 801760a:	2200      	movs	r2, #0
 801760c:	f000 f868 	bl	80176e0 <_lseek_r>
 8017610:	89a3      	ldrh	r3, [r4, #12]
 8017612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801761a:	81a3      	strh	r3, [r4, #12]
 801761c:	4632      	mov	r2, r6
 801761e:	463b      	mov	r3, r7
 8017620:	4628      	mov	r0, r5
 8017622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017626:	f000 b817 	b.w	8017658 <_write_r>

0801762a <__sseek>:
 801762a:	b510      	push	{r4, lr}
 801762c:	460c      	mov	r4, r1
 801762e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017632:	f000 f855 	bl	80176e0 <_lseek_r>
 8017636:	1c43      	adds	r3, r0, #1
 8017638:	89a3      	ldrh	r3, [r4, #12]
 801763a:	bf15      	itete	ne
 801763c:	6560      	strne	r0, [r4, #84]	; 0x54
 801763e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017646:	81a3      	strheq	r3, [r4, #12]
 8017648:	bf18      	it	ne
 801764a:	81a3      	strhne	r3, [r4, #12]
 801764c:	bd10      	pop	{r4, pc}

0801764e <__sclose>:
 801764e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017652:	f000 b813 	b.w	801767c <_close_r>
	...

08017658 <_write_r>:
 8017658:	b538      	push	{r3, r4, r5, lr}
 801765a:	4d07      	ldr	r5, [pc, #28]	; (8017678 <_write_r+0x20>)
 801765c:	4604      	mov	r4, r0
 801765e:	4608      	mov	r0, r1
 8017660:	4611      	mov	r1, r2
 8017662:	2200      	movs	r2, #0
 8017664:	602a      	str	r2, [r5, #0]
 8017666:	461a      	mov	r2, r3
 8017668:	f7eb fdf9 	bl	800325e <_write>
 801766c:	1c43      	adds	r3, r0, #1
 801766e:	d102      	bne.n	8017676 <_write_r+0x1e>
 8017670:	682b      	ldr	r3, [r5, #0]
 8017672:	b103      	cbz	r3, 8017676 <_write_r+0x1e>
 8017674:	6023      	str	r3, [r4, #0]
 8017676:	bd38      	pop	{r3, r4, r5, pc}
 8017678:	240055ec 	.word	0x240055ec

0801767c <_close_r>:
 801767c:	b538      	push	{r3, r4, r5, lr}
 801767e:	4d06      	ldr	r5, [pc, #24]	; (8017698 <_close_r+0x1c>)
 8017680:	2300      	movs	r3, #0
 8017682:	4604      	mov	r4, r0
 8017684:	4608      	mov	r0, r1
 8017686:	602b      	str	r3, [r5, #0]
 8017688:	f7eb fe05 	bl	8003296 <_close>
 801768c:	1c43      	adds	r3, r0, #1
 801768e:	d102      	bne.n	8017696 <_close_r+0x1a>
 8017690:	682b      	ldr	r3, [r5, #0]
 8017692:	b103      	cbz	r3, 8017696 <_close_r+0x1a>
 8017694:	6023      	str	r3, [r4, #0]
 8017696:	bd38      	pop	{r3, r4, r5, pc}
 8017698:	240055ec 	.word	0x240055ec

0801769c <_fstat_r>:
 801769c:	b538      	push	{r3, r4, r5, lr}
 801769e:	4d07      	ldr	r5, [pc, #28]	; (80176bc <_fstat_r+0x20>)
 80176a0:	2300      	movs	r3, #0
 80176a2:	4604      	mov	r4, r0
 80176a4:	4608      	mov	r0, r1
 80176a6:	4611      	mov	r1, r2
 80176a8:	602b      	str	r3, [r5, #0]
 80176aa:	f7eb fe00 	bl	80032ae <_fstat>
 80176ae:	1c43      	adds	r3, r0, #1
 80176b0:	d102      	bne.n	80176b8 <_fstat_r+0x1c>
 80176b2:	682b      	ldr	r3, [r5, #0]
 80176b4:	b103      	cbz	r3, 80176b8 <_fstat_r+0x1c>
 80176b6:	6023      	str	r3, [r4, #0]
 80176b8:	bd38      	pop	{r3, r4, r5, pc}
 80176ba:	bf00      	nop
 80176bc:	240055ec 	.word	0x240055ec

080176c0 <_isatty_r>:
 80176c0:	b538      	push	{r3, r4, r5, lr}
 80176c2:	4d06      	ldr	r5, [pc, #24]	; (80176dc <_isatty_r+0x1c>)
 80176c4:	2300      	movs	r3, #0
 80176c6:	4604      	mov	r4, r0
 80176c8:	4608      	mov	r0, r1
 80176ca:	602b      	str	r3, [r5, #0]
 80176cc:	f7eb fdff 	bl	80032ce <_isatty>
 80176d0:	1c43      	adds	r3, r0, #1
 80176d2:	d102      	bne.n	80176da <_isatty_r+0x1a>
 80176d4:	682b      	ldr	r3, [r5, #0]
 80176d6:	b103      	cbz	r3, 80176da <_isatty_r+0x1a>
 80176d8:	6023      	str	r3, [r4, #0]
 80176da:	bd38      	pop	{r3, r4, r5, pc}
 80176dc:	240055ec 	.word	0x240055ec

080176e0 <_lseek_r>:
 80176e0:	b538      	push	{r3, r4, r5, lr}
 80176e2:	4d07      	ldr	r5, [pc, #28]	; (8017700 <_lseek_r+0x20>)
 80176e4:	4604      	mov	r4, r0
 80176e6:	4608      	mov	r0, r1
 80176e8:	4611      	mov	r1, r2
 80176ea:	2200      	movs	r2, #0
 80176ec:	602a      	str	r2, [r5, #0]
 80176ee:	461a      	mov	r2, r3
 80176f0:	f7eb fdf8 	bl	80032e4 <_lseek>
 80176f4:	1c43      	adds	r3, r0, #1
 80176f6:	d102      	bne.n	80176fe <_lseek_r+0x1e>
 80176f8:	682b      	ldr	r3, [r5, #0]
 80176fa:	b103      	cbz	r3, 80176fe <_lseek_r+0x1e>
 80176fc:	6023      	str	r3, [r4, #0]
 80176fe:	bd38      	pop	{r3, r4, r5, pc}
 8017700:	240055ec 	.word	0x240055ec

08017704 <_read_r>:
 8017704:	b538      	push	{r3, r4, r5, lr}
 8017706:	4d07      	ldr	r5, [pc, #28]	; (8017724 <_read_r+0x20>)
 8017708:	4604      	mov	r4, r0
 801770a:	4608      	mov	r0, r1
 801770c:	4611      	mov	r1, r2
 801770e:	2200      	movs	r2, #0
 8017710:	602a      	str	r2, [r5, #0]
 8017712:	461a      	mov	r2, r3
 8017714:	f7eb fd86 	bl	8003224 <_read>
 8017718:	1c43      	adds	r3, r0, #1
 801771a:	d102      	bne.n	8017722 <_read_r+0x1e>
 801771c:	682b      	ldr	r3, [r5, #0]
 801771e:	b103      	cbz	r3, 8017722 <_read_r+0x1e>
 8017720:	6023      	str	r3, [r4, #0]
 8017722:	bd38      	pop	{r3, r4, r5, pc}
 8017724:	240055ec 	.word	0x240055ec

08017728 <_init>:
 8017728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801772a:	bf00      	nop
 801772c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801772e:	bc08      	pop	{r3}
 8017730:	469e      	mov	lr, r3
 8017732:	4770      	bx	lr

08017734 <_fini>:
 8017734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017736:	bf00      	nop
 8017738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801773a:	bc08      	pop	{r3}
 801773c:	469e      	mov	lr, r3
 801773e:	4770      	bx	lr
