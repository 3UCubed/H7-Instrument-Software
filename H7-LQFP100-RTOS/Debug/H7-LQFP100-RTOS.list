
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005984  08005984  00015984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005988  08005988  00015988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  0800598c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000049d8  24000078  08005a04  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24004a50  08005a04  00024a50  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   000179cb  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002f9e  00000000  00000000  00037a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001438  00000000  00000000  0003aa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000012f0  00000000  00000000  0003be48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00004662  00000000  00000000  0003d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000158e5  00000000  00000000  0004179a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00168ded  00000000  00000000  0005707f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001bfe6c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005b38  00000000  00000000  001bfebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005878 	.word	0x08005878

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08005878 	.word	0x08005878

080002e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80002e4:	f000 f8ac 	bl	8000440 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002e8:	f000 fb16 	bl	8000918 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002ec:	f000 f822 	bl	8000334 <SystemClock_Config>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80002f0:	f002 f830 	bl	8002354 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of Task1 */
	Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 80002f4:	4a09      	ldr	r2, [pc, #36]	; (800031c <main+0x3c>)
 80002f6:	2100      	movs	r1, #0
 80002f8:	4809      	ldr	r0, [pc, #36]	; (8000320 <main+0x40>)
 80002fa:	f002 f875 	bl	80023e8 <osThreadNew>
 80002fe:	4603      	mov	r3, r0
 8000300:	4a08      	ldr	r2, [pc, #32]	; (8000324 <main+0x44>)
 8000302:	6013      	str	r3, [r2, #0]

	/* creation of Task2 */
	Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000304:	4a08      	ldr	r2, [pc, #32]	; (8000328 <main+0x48>)
 8000306:	2100      	movs	r1, #0
 8000308:	4808      	ldr	r0, [pc, #32]	; (800032c <main+0x4c>)
 800030a:	f002 f86d 	bl	80023e8 <osThreadNew>
 800030e:	4603      	mov	r3, r0
 8000310:	4a07      	ldr	r2, [pc, #28]	; (8000330 <main+0x50>)
 8000312:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000314:	f002 f842 	bl	800239c <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000318:	e7fe      	b.n	8000318 <main+0x38>
 800031a:	bf00      	nop
 800031c:	080058c8 	.word	0x080058c8
 8000320:	08000409 	.word	0x08000409
 8000324:	24000094 	.word	0x24000094
 8000328:	080058ec 	.word	0x080058ec
 800032c:	08000425 	.word	0x08000425
 8000330:	24000098 	.word	0x24000098

08000334 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	b09c      	sub	sp, #112	; 0x70
 8000338:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800033a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800033e:	224c      	movs	r2, #76	; 0x4c
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f004 fd92 	bl	8004e6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2220      	movs	r2, #32
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f004 fd8c 	bl	8004e6c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000354:	2002      	movs	r0, #2
 8000356:	f000 fc9f 	bl	8000c98 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800035a:	2300      	movs	r3, #0
 800035c:	603b      	str	r3, [r7, #0]
 800035e:	4b28      	ldr	r3, [pc, #160]	; (8000400 <SystemClock_Config+0xcc>)
 8000360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000362:	4a27      	ldr	r2, [pc, #156]	; (8000400 <SystemClock_Config+0xcc>)
 8000364:	f023 0301 	bic.w	r3, r3, #1
 8000368:	62d3      	str	r3, [r2, #44]	; 0x2c
 800036a:	4b25      	ldr	r3, [pc, #148]	; (8000400 <SystemClock_Config+0xcc>)
 800036c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	4b23      	ldr	r3, [pc, #140]	; (8000404 <SystemClock_Config+0xd0>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800037c:	4a21      	ldr	r2, [pc, #132]	; (8000404 <SystemClock_Config+0xd0>)
 800037e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b1f      	ldr	r3, [pc, #124]	; (8000404 <SystemClock_Config+0xd0>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800038c:	603b      	str	r3, [r7, #0]
 800038e:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000390:	bf00      	nop
 8000392:	4b1c      	ldr	r3, [pc, #112]	; (8000404 <SystemClock_Config+0xd0>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800039a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800039e:	d1f8      	bne.n	8000392 <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a0:	2302      	movs	r3, #2
 80003a2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80003a4:	2301      	movs	r3, #1
 80003a6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a8:	2340      	movs	r3, #64	; 0x40
 80003aa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ac:	2300      	movs	r3, #0
 80003ae:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 fca9 	bl	8000d0c <HAL_RCC_OscConfig>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <SystemClock_Config+0x90>
		Error_Handler();
 80003c0:	f000 f87c 	bl	80004bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003c4:	233f      	movs	r3, #63	; 0x3f
 80003c6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2101      	movs	r1, #1
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 f8e9 	bl	80015c0 <HAL_RCC_ClockConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0xc4>
		Error_Handler();
 80003f4:	f000 f862 	bl	80004bc <Error_Handler>
	}
}
 80003f8:	bf00      	nop
 80003fa:	3770      	adds	r7, #112	; 0x70
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	58000400 	.word	0x58000400
 8000404:	58024800 	.word	0x58024800

08000408 <StartTask1>:
 * @brief  Function implementing the Task1 thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		printf("Task-1\n");
 8000410:	4803      	ldr	r0, [pc, #12]	; (8000420 <StartTask1+0x18>)
 8000412:	f004 fda1 	bl	8004f58 <puts>
		osDelay(1000);
 8000416:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800041a:	f002 f877 	bl	800250c <osDelay>
		printf("Task-1\n");
 800041e:	e7f7      	b.n	8000410 <StartTask1+0x8>
 8000420:	080058a0 	.word	0x080058a0

08000424 <StartTask2>:
 * @brief Function implementing the Task2 thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTask2 */
	/* Infinite loop */
	for (;;) {
		printf("Task-2\n");
 800042c:	4803      	ldr	r0, [pc, #12]	; (800043c <StartTask2+0x18>)
 800042e:	f004 fd93 	bl	8004f58 <puts>
		osDelay(1000);
 8000432:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000436:	f002 f869 	bl	800250c <osDelay>
		printf("Task-2\n");
 800043a:	e7f7      	b.n	800042c <StartTask2+0x8>
 800043c:	080058a8 	.word	0x080058a8

08000440 <MPU_Config>:
	/* USER CODE END StartTask2 */
}

/* MPU Configuration */

void MPU_Config(void) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8000446:	463b      	mov	r3, r7
 8000448:	2200      	movs	r2, #0
 800044a:	601a      	str	r2, [r3, #0]
 800044c:	605a      	str	r2, [r3, #4]
 800044e:	609a      	str	r2, [r3, #8]
 8000450:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8000452:	f000 fba9 	bl	8000ba8 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000456:	2301      	movs	r3, #1
 8000458:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800045a:	2300      	movs	r3, #0
 800045c:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 800045e:	2300      	movs	r3, #0
 8000460:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000462:	231f      	movs	r3, #31
 8000464:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8000466:	2387      	movs	r3, #135	; 0x87
 8000468:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800046a:	2300      	movs	r3, #0
 800046c:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800046e:	2300      	movs	r3, #0
 8000470:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000472:	2301      	movs	r3, #1
 8000474:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000476:	2301      	movs	r3, #1
 8000478:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800047a:	2300      	movs	r3, #0
 800047c:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800047e:	2300      	movs	r3, #0
 8000480:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000482:	463b      	mov	r3, r7
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fbc7 	bl	8000c18 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800048a:	2004      	movs	r0, #4
 800048c:	f000 fba4 	bl	8000bd8 <HAL_MPU_Enable>

}
 8000490:	bf00      	nop
 8000492:	3710      	adds	r7, #16
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a04      	ldr	r2, [pc, #16]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d101      	bne.n	80004ae <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80004aa:	f000 fa71 	bl	8000990 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40001000 	.word	0x40001000

080004bc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c0:	b672      	cpsid	i
}
 80004c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004c4:	e7fe      	b.n	80004c4 <Error_Handler+0x8>
	...

080004c8 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <HAL_MspInit+0x38>)
 80004d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004d4:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <HAL_MspInit+0x38>)
 80004d6:	f043 0302 	orr.w	r3, r3, #2
 80004da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_MspInit+0x38>)
 80004e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004e4:	f003 0302 	and.w	r3, r3, #2
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004ec:	2200      	movs	r2, #0
 80004ee:	210f      	movs	r1, #15
 80004f0:	f06f 0001 	mvn.w	r0, #1
 80004f4:	f000 fb30 	bl	8000b58 <HAL_NVIC_SetPriority>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	58024400 	.word	0x58024400

08000504 <HAL_InitTick>:
 * @note   This function is called  automatically at the beginning of program after
 *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
 * @param  TickPriority: Tick interrupt priority.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b090      	sub	sp, #64	; 0x40
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	uint32_t uwTimclock, uwAPB1Prescaler;

	uint32_t uwPrescalerValue;
	uint32_t pFLatency;
	/*Configure the TIM6 IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b0f      	cmp	r3, #15
 8000510:	d827      	bhi.n	8000562 <HAL_InitTick+0x5e>
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000512:	2200      	movs	r2, #0
 8000514:	6879      	ldr	r1, [r7, #4]
 8000516:	2036      	movs	r0, #54	; 0x36
 8000518:	f000 fb1e 	bl	8000b58 <HAL_NVIC_SetPriority>

		/* Enable the TIM6 global Interrupt */
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800051c:	2036      	movs	r0, #54	; 0x36
 800051e:	f000 fb35 	bl	8000b8c <HAL_NVIC_EnableIRQ>
		uwTickPrio = TickPriority;
 8000522:	4a29      	ldr	r2, [pc, #164]	; (80005c8 <HAL_InitTick+0xc4>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Enable TIM6 clock */
	__HAL_RCC_TIM6_CLK_ENABLE();
 8000528:	4b28      	ldr	r3, [pc, #160]	; (80005cc <HAL_InitTick+0xc8>)
 800052a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800052e:	4a27      	ldr	r2, [pc, #156]	; (80005cc <HAL_InitTick+0xc8>)
 8000530:	f043 0310 	orr.w	r3, r3, #16
 8000534:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000538:	4b24      	ldr	r3, [pc, #144]	; (80005cc <HAL_InitTick+0xc8>)
 800053a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800053e:	f003 0310 	and.w	r3, r3, #16
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]

	/* Get clock configuration */
	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000546:	f107 0210 	add.w	r2, r7, #16
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	4611      	mov	r1, r2
 8000550:	4618      	mov	r0, r3
 8000552:	f001 fbab 	bl	8001cac <HAL_RCC_GetClockConfig>

	/* Get APB1 prescaler */
	uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
	/* Compute TIM6 clock */
	if (uwAPB1Prescaler == RCC_HCLK_DIV1) {
 800055a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800055c:	2b00      	cmp	r3, #0
 800055e:	d106      	bne.n	800056e <HAL_InitTick+0x6a>
 8000560:	e001      	b.n	8000566 <HAL_InitTick+0x62>
		return HAL_ERROR;
 8000562:	2301      	movs	r3, #1
 8000564:	e02b      	b.n	80005be <HAL_InitTick+0xba>
		uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000566:	f001 fb8b 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 800056a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800056c:	e004      	b.n	8000578 <HAL_InitTick+0x74>
	} else {
		uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800056e:	f001 fb87 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 8000572:	4603      	mov	r3, r0
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	/* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800057a:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <HAL_InitTick+0xcc>)
 800057c:	fba2 2303 	umull	r2, r3, r2, r3
 8000580:	0c9b      	lsrs	r3, r3, #18
 8000582:	3b01      	subs	r3, #1
 8000584:	637b      	str	r3, [r7, #52]	; 0x34

	/* Initialize TIM6 */
	htim6.Instance = TIM6;
 8000586:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <HAL_InitTick+0xd0>)
 8000588:	4a13      	ldr	r2, [pc, #76]	; (80005d8 <HAL_InitTick+0xd4>)
 800058a:	601a      	str	r2, [r3, #0]
	 + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
	 + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
	 + ClockDivision = 0
	 + Counter direction = Up
	 */
	htim6.Init.Period = (1000000U / 1000U) - 1U;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <HAL_InitTick+0xd0>)
 800058e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000592:	60da      	str	r2, [r3, #12]
	htim6.Init.Prescaler = uwPrescalerValue;
 8000594:	4a0f      	ldr	r2, [pc, #60]	; (80005d4 <HAL_InitTick+0xd0>)
 8000596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000598:	6053      	str	r3, [r2, #4]
	htim6.Init.ClockDivision = 0;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <HAL_InitTick+0xd0>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_InitTick+0xd0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]

	if (HAL_TIM_Base_Init(&htim6) == HAL_OK) {
 80005a6:	480b      	ldr	r0, [pc, #44]	; (80005d4 <HAL_InitTick+0xd0>)
 80005a8:	f001 fbc2 	bl	8001d30 <HAL_TIM_Base_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d104      	bne.n	80005bc <HAL_InitTick+0xb8>
		/* Start the TIM time Base generation in interrupt mode */
		return HAL_TIM_Base_Start_IT(&htim6);
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <HAL_InitTick+0xd0>)
 80005b4:	f001 fc1e 	bl	8001df4 <HAL_TIM_Base_Start_IT>
 80005b8:	4603      	mov	r3, r0
 80005ba:	e000      	b.n	80005be <HAL_InitTick+0xba>
	}

	/* Return function status */
	return HAL_ERROR;
 80005bc:	2301      	movs	r3, #1
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3740      	adds	r7, #64	; 0x40
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	24000008 	.word	0x24000008
 80005cc:	58024400 	.word	0x58024400
 80005d0:	431bde83 	.word	0x431bde83
 80005d4:	2400009c 	.word	0x2400009c
 80005d8:	40001000 	.word	0x40001000

080005dc <NMI_Handler>:
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80005e0:	e7fe      	b.n	80005e0 <NMI_Handler+0x4>

080005e2 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80005e6:	e7fe      	b.n	80005e6 <HardFault_Handler+0x4>

080005e8 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80005ec:	e7fe      	b.n	80005ec <MemManage_Handler+0x4>

080005ee <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80005ee:	b480      	push	{r7}
 80005f0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80005f2:	e7fe      	b.n	80005f2 <BusFault_Handler+0x4>

080005f4 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80005f8:	e7fe      	b.n	80005f8 <UsageFault_Handler+0x4>

080005fa <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <TIM6_DAC_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 800060c:	4802      	ldr	r0, [pc, #8]	; (8000618 <TIM6_DAC_IRQHandler+0x10>)
 800060e:	f001 fc69 	bl	8001ee4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2400009c 	.word	0x2400009c

0800061c <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <ITM_SendChar+0x48>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <ITM_SendChar+0x48>)
 800062c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000630:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <ITM_SendChar+0x4c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <ITM_SendChar+0x4c>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 800063e:	bf00      	nop
 8000640:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0f8      	beq.n	8000640 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 800064e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	6013      	str	r3, [r2, #0]
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000edfc 	.word	0xe000edfc
 8000668:	e0000e00 	.word	0xe0000e00

0800066c <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	e00a      	b.n	8000694 <_read+0x28>
		*ptr++ = __io_getchar();
 800067e:	f3af 8000 	nop.w
 8000682:	4601      	mov	r1, r0
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	60ba      	str	r2, [r7, #8]
 800068a:	b2ca      	uxtb	r2, r1
 800068c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	3301      	adds	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	697a      	ldr	r2, [r7, #20]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	429a      	cmp	r2, r3
 800069a:	dbf0      	blt.n	800067e <_read+0x12>
	}

	return len;
 800069c:	687b      	ldr	r3, [r7, #4]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b086      	sub	sp, #24
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	e009      	b.n	80006cc <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	1c5a      	adds	r2, r3, #1
 80006bc:	60ba      	str	r2, [r7, #8]
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffab 	bl	800061c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	3301      	adds	r3, #1
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	697a      	ldr	r2, [r7, #20]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	dbf1      	blt.n	80006b8 <_write+0x12>
	}
	return len;
 80006d4:	687b      	ldr	r3, [r7, #4]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <_close>:

int _close(int file) {
 80006de:	b480      	push	{r7}
 80006e0:	b083      	sub	sp, #12
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <_fstat>:

int _fstat(int file, struct stat *st) {
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000706:	605a      	str	r2, [r3, #4]
	return 0;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <_isatty>:

int _isatty(int file) {
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800071e:	2301      	movs	r3, #1
}
 8000720:	4618      	mov	r0, r3
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <_lseek>:

int _lseek(int file, int ptr, int dir) {
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
	...

08000748 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8000750:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <_sbrk+0x64>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d102      	bne.n	800076a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <_sbrk+0x64>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <_sbrk+0x68>)
 8000768:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <_sbrk+0x64>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	693a      	ldr	r2, [r7, #16]
 8000774:	429a      	cmp	r2, r3
 8000776:	d207      	bcs.n	8000788 <_sbrk+0x40>
		errno = ENOMEM;
 8000778:	f004 fb40 	bl	8004dfc <__errno>
 800077c:	4603      	mov	r3, r0
 800077e:	220c      	movs	r2, #12
 8000780:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8000782:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000786:	e009      	b.n	800079c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <_sbrk+0x64>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <_sbrk+0x64>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	4a05      	ldr	r2, [pc, #20]	; (80007ac <_sbrk+0x64>)
 8000798:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800079a:	68fb      	ldr	r3, [r7, #12]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	24080000 	.word	0x24080000
 80007a8:	00000400 	.word	0x00000400
 80007ac:	240000e8 	.word	0x240000e8
 80007b0:	24004a50 	.word	0x24004a50

080007b4 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80007b8:	4b37      	ldr	r3, [pc, #220]	; (8000898 <SystemInit+0xe4>)
 80007ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007be:	4a36      	ldr	r2, [pc, #216]	; (8000898 <SystemInit+0xe4>)
 80007c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80007c8:	4b34      	ldr	r3, [pc, #208]	; (800089c <SystemInit+0xe8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f003 030f 	and.w	r3, r3, #15
 80007d0:	2b06      	cmp	r3, #6
 80007d2:	d807      	bhi.n	80007e4 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80007d4:	4b31      	ldr	r3, [pc, #196]	; (800089c <SystemInit+0xe8>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f023 030f 	bic.w	r3, r3, #15
 80007dc:	4a2f      	ldr	r2, [pc, #188]	; (800089c <SystemInit+0xe8>)
 80007de:	f043 0307 	orr.w	r3, r3, #7
 80007e2:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80007e4:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <SystemInit+0xec>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a2d      	ldr	r2, [pc, #180]	; (80008a0 <SystemInit+0xec>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <SystemInit+0xec>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <SystemInit+0xec>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	4929      	ldr	r1, [pc, #164]	; (80008a0 <SystemInit+0xec>)
 80007fc:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <SystemInit+0xf0>)
 80007fe:	4013      	ands	r3, r2
 8000800:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8000802:	4b26      	ldr	r3, [pc, #152]	; (800089c <SystemInit+0xe8>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f003 0308 	and.w	r3, r3, #8
 800080a:	2b00      	cmp	r3, #0
 800080c:	d007      	beq.n	800081e <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <SystemInit+0xe8>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f023 030f 	bic.w	r3, r3, #15
 8000816:	4a21      	ldr	r2, [pc, #132]	; (800089c <SystemInit+0xe8>)
 8000818:	f043 0307 	orr.w	r3, r3, #7
 800081c:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <SystemInit+0xec>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8000824:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <SystemInit+0xec>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <SystemInit+0xec>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <SystemInit+0xec>)
 8000832:	4a1d      	ldr	r2, [pc, #116]	; (80008a8 <SystemInit+0xf4>)
 8000834:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <SystemInit+0xec>)
 8000838:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <SystemInit+0xf8>)
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <SystemInit+0xec>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <SystemInit+0xfc>)
 8000840:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <SystemInit+0xec>)
 8000844:	2200      	movs	r2, #0
 8000846:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <SystemInit+0xec>)
 800084a:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <SystemInit+0xfc>)
 800084c:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <SystemInit+0xec>)
 8000850:	2200      	movs	r2, #0
 8000852:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <SystemInit+0xec>)
 8000856:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <SystemInit+0xfc>)
 8000858:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <SystemInit+0xec>)
 800085c:	2200      	movs	r2, #0
 800085e:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <SystemInit+0xec>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <SystemInit+0xec>)
 8000866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800086a:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <SystemInit+0xec>)
 800086e:	2200      	movs	r2, #0
 8000870:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <SystemInit+0x100>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <SystemInit+0x104>)
 8000878:	4013      	ands	r3, r2
 800087a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800087e:	d202      	bcs.n	8000886 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8000880:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <SystemInit+0x108>)
 8000882:	2201      	movs	r2, #1
 8000884:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <SystemInit+0x10c>)
 8000888:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800088c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	e000ed00 	.word	0xe000ed00
 800089c:	52002000 	.word	0x52002000
 80008a0:	58024400 	.word	0x58024400
 80008a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80008a8:	02020200 	.word	0x02020200
 80008ac:	01ff0000 	.word	0x01ff0000
 80008b0:	01010280 	.word	0x01010280
 80008b4:	5c001000 	.word	0x5c001000
 80008b8:	ffff0000 	.word	0xffff0000
 80008bc:	51008108 	.word	0x51008108
 80008c0:	52004000 	.word	0x52004000

080008c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008c8:	f7ff ff74 	bl	80007b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ce:	490d      	ldr	r1, [pc, #52]	; (8000904 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d4:	e002      	b.n	80008dc <LoopCopyDataInit>

080008d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008da:	3304      	adds	r3, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e0:	d3f9      	bcc.n	80008d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008e4:	4c0a      	ldr	r4, [pc, #40]	; (8000910 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e8:	e001      	b.n	80008ee <LoopFillZerobss>

080008ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ec:	3204      	adds	r2, #4

080008ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f0:	d3fb      	bcc.n	80008ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008f2:	f004 fa89 	bl	8004e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f6:	f7ff fcf3 	bl	80002e0 <main>
  bx  lr
 80008fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008fc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000900:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000904:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000908:	0800598c 	.word	0x0800598c
  ldr r2, =_sbss
 800090c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000910:	24004a50 	.word	0x24004a50

08000914 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC3_IRQHandler>
	...

08000918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091e:	2003      	movs	r0, #3
 8000920:	f000 f90f 	bl	8000b42 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000924:	f001 f802 	bl	800192c <HAL_RCC_GetSysClockFreq>
 8000928:	4602      	mov	r2, r0
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_Init+0x68>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	0a1b      	lsrs	r3, r3, #8
 8000930:	f003 030f 	and.w	r3, r3, #15
 8000934:	4913      	ldr	r1, [pc, #76]	; (8000984 <HAL_Init+0x6c>)
 8000936:	5ccb      	ldrb	r3, [r1, r3]
 8000938:	f003 031f 	and.w	r3, r3, #31
 800093c:	fa22 f303 	lsr.w	r3, r2, r3
 8000940:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_Init+0x68>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_Init+0x6c>)
 800094c:	5cd3      	ldrb	r3, [r2, r3]
 800094e:	f003 031f 	and.w	r3, r3, #31
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	fa22 f303 	lsr.w	r3, r2, r3
 8000958:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <HAL_Init+0x70>)
 800095a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800095c:	4a0b      	ldr	r2, [pc, #44]	; (800098c <HAL_Init+0x74>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000962:	200f      	movs	r0, #15
 8000964:	f7ff fdce 	bl	8000504 <HAL_InitTick>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	e002      	b.n	8000978 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000972:	f7ff fda9 	bl	80004c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000976:	2300      	movs	r3, #0
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	58024400 	.word	0x58024400
 8000984:	08005910 	.word	0x08005910
 8000988:	24000004 	.word	0x24000004
 800098c:	24000000 	.word	0x24000000

08000990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_IncTick+0x20>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_IncTick+0x24>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <HAL_IncTick+0x24>)
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	2400000c 	.word	0x2400000c
 80009b4:	240000ec 	.word	0x240000ec

080009b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return uwTick;
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <HAL_GetTick+0x14>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	240000ec 	.word	0x240000ec

080009d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_GetREVID+0x14>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	0c1b      	lsrs	r3, r3, #16
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	5c001000 	.word	0x5c001000

080009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <__NVIC_SetPriorityGrouping+0x40>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a12:	4313      	orrs	r3, r2
 8000a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a16:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <__NVIC_SetPriorityGrouping+0x40>)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	60d3      	str	r3, [r2, #12]
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	e000ed00 	.word	0xe000ed00
 8000a2c:	05fa0000 	.word	0x05fa0000

08000a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db0b      	blt.n	8000a76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	f003 021f 	and.w	r2, r3, #31
 8000a64:	4907      	ldr	r1, [pc, #28]	; (8000a84 <__NVIC_EnableIRQ+0x38>)
 8000a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	db0a      	blt.n	8000ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	490c      	ldr	r1, [pc, #48]	; (8000ad4 <__NVIC_SetPriority+0x4c>)
 8000aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aa6:	0112      	lsls	r2, r2, #4
 8000aa8:	b2d2      	uxtb	r2, r2
 8000aaa:	440b      	add	r3, r1
 8000aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab0:	e00a      	b.n	8000ac8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <__NVIC_SetPriority+0x50>)
 8000ab8:	88fb      	ldrh	r3, [r7, #6]
 8000aba:	f003 030f 	and.w	r3, r3, #15
 8000abe:	3b04      	subs	r3, #4
 8000ac0:	0112      	lsls	r2, r2, #4
 8000ac2:	b2d2      	uxtb	r2, r2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	761a      	strb	r2, [r3, #24]
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e100 	.word	0xe000e100
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	f1c3 0307 	rsb	r3, r3, #7
 8000af6:	2b04      	cmp	r3, #4
 8000af8:	bf28      	it	cs
 8000afa:	2304      	movcs	r3, #4
 8000afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3304      	adds	r3, #4
 8000b02:	2b06      	cmp	r3, #6
 8000b04:	d902      	bls.n	8000b0c <NVIC_EncodePriority+0x30>
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3b03      	subs	r3, #3
 8000b0a:	e000      	b.n	8000b0e <NVIC_EncodePriority+0x32>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1a:	43da      	mvns	r2, r3
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	401a      	ands	r2, r3
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	43d9      	mvns	r1, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b34:	4313      	orrs	r3, r2
         );
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3724      	adds	r7, #36	; 0x24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ff4c 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
 8000b64:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b66:	f7ff ff63 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000b6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	68b9      	ldr	r1, [r7, #8]
 8000b70:	6978      	ldr	r0, [r7, #20]
 8000b72:	f7ff ffb3 	bl	8000adc <NVIC_EncodePriority>
 8000b76:	4602      	mov	r2, r0
 8000b78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ff82 	bl	8000a88 <__NVIC_SetPriority>
}
 8000b84:	bf00      	nop
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff ff56 	bl	8000a4c <__NVIC_EnableIRQ>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000bac:	f3bf 8f5f 	dmb	sy
}
 8000bb0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <HAL_MPU_Disable+0x28>)
 8000bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb6:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <HAL_MPU_Disable+0x28>)
 8000bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bbc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_MPU_Disable+0x2c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	605a      	str	r2, [r3, #4]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	e000ed90 	.word	0xe000ed90

08000bd8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000be0:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <HAL_MPU_Enable+0x38>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_MPU_Enable+0x3c>)
 8000bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bee:	4a09      	ldr	r2, [pc, #36]	; (8000c14 <HAL_MPU_Enable+0x3c>)
 8000bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000bf6:	f3bf 8f4f 	dsb	sy
}
 8000bfa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bfc:	f3bf 8f6f 	isb	sy
}
 8000c00:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000ed90 	.word	0xe000ed90
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	785a      	ldrb	r2, [r3, #1]
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <HAL_MPU_ConfigRegion+0x7c>)
 8000c26:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <HAL_MPU_ConfigRegion+0x7c>)
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_MPU_ConfigRegion+0x7c>)
 8000c2e:	f023 0301 	bic.w	r3, r3, #1
 8000c32:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000c34:	4a17      	ldr	r2, [pc, #92]	; (8000c94 <HAL_MPU_ConfigRegion+0x7c>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	7b1b      	ldrb	r3, [r3, #12]
 8000c40:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7adb      	ldrb	r3, [r3, #11]
 8000c46:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	7a9b      	ldrb	r3, [r3, #10]
 8000c4e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c50:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7b5b      	ldrb	r3, [r3, #13]
 8000c56:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	7b9b      	ldrb	r3, [r3, #14]
 8000c5e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7bdb      	ldrb	r3, [r3, #15]
 8000c66:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7a5b      	ldrb	r3, [r3, #9]
 8000c6e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	7a1b      	ldrb	r3, [r3, #8]
 8000c76:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c78:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	7812      	ldrb	r2, [r2, #0]
 8000c7e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c82:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c84:	6113      	str	r3, [r2, #16]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed90 	.word	0xe000ed90

08000c98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_PWREx_ConfigSupply+0x70>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	d00a      	beq.n	8000cc2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_PWREx_ConfigSupply+0x70>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d001      	beq.n	8000cbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e01f      	b.n	8000cfe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	e01d      	b.n	8000cfe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_PWREx_ConfigSupply+0x70>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	f023 0207 	bic.w	r2, r3, #7
 8000cca:	490f      	ldr	r1, [pc, #60]	; (8000d08 <HAL_PWREx_ConfigSupply+0x70>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000cd2:	f7ff fe71 	bl	80009b8 <HAL_GetTick>
 8000cd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000cd8:	e009      	b.n	8000cee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000cda:	f7ff fe6d 	bl	80009b8 <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ce8:	d901      	bls.n	8000cee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e007      	b.n	8000cfe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_PWREx_ConfigSupply+0x70>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cfa:	d1ee      	bne.n	8000cda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	58024800 	.word	0x58024800

08000d0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08c      	sub	sp, #48	; 0x30
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d102      	bne.n	8000d20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	f000 bc48 	b.w	80015b0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f000 8088 	beq.w	8000e3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d2e:	4b99      	ldr	r3, [pc, #612]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000d38:	4b96      	ldr	r3, [pc, #600]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d40:	2b10      	cmp	r3, #16
 8000d42:	d007      	beq.n	8000d54 <HAL_RCC_OscConfig+0x48>
 8000d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d46:	2b18      	cmp	r3, #24
 8000d48:	d111      	bne.n	8000d6e <HAL_RCC_OscConfig+0x62>
 8000d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d10c      	bne.n	8000d6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d54:	4b8f      	ldr	r3, [pc, #572]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d06d      	beq.n	8000e3c <HAL_RCC_OscConfig+0x130>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d169      	bne.n	8000e3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f000 bc21 	b.w	80015b0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d76:	d106      	bne.n	8000d86 <HAL_RCC_OscConfig+0x7a>
 8000d78:	4b86      	ldr	r3, [pc, #536]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a85      	ldr	r2, [pc, #532]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	e02e      	b.n	8000de4 <HAL_RCC_OscConfig+0xd8>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10c      	bne.n	8000da8 <HAL_RCC_OscConfig+0x9c>
 8000d8e:	4b81      	ldr	r3, [pc, #516]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a80      	ldr	r2, [pc, #512]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	4b7e      	ldr	r3, [pc, #504]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a7d      	ldr	r2, [pc, #500]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	e01d      	b.n	8000de4 <HAL_RCC_OscConfig+0xd8>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000db0:	d10c      	bne.n	8000dcc <HAL_RCC_OscConfig+0xc0>
 8000db2:	4b78      	ldr	r3, [pc, #480]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a77      	ldr	r2, [pc, #476]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	6013      	str	r3, [r2, #0]
 8000dbe:	4b75      	ldr	r3, [pc, #468]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a74      	ldr	r2, [pc, #464]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e00b      	b.n	8000de4 <HAL_RCC_OscConfig+0xd8>
 8000dcc:	4b71      	ldr	r3, [pc, #452]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a70      	ldr	r2, [pc, #448]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b6e      	ldr	r3, [pc, #440]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a6d      	ldr	r2, [pc, #436]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d013      	beq.n	8000e14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dec:	f7ff fde4 	bl	80009b8 <HAL_GetTick>
 8000df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df4:	f7ff fde0 	bl	80009b8 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b64      	cmp	r3, #100	; 0x64
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e3d4      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e06:	4b63      	ldr	r3, [pc, #396]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0f0      	beq.n	8000df4 <HAL_RCC_OscConfig+0xe8>
 8000e12:	e014      	b.n	8000e3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e14:	f7ff fdd0 	bl	80009b8 <HAL_GetTick>
 8000e18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e1c:	f7ff fdcc 	bl	80009b8 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b64      	cmp	r3, #100	; 0x64
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e3c0      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e2e:	4b59      	ldr	r3, [pc, #356]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1f0      	bne.n	8000e1c <HAL_RCC_OscConfig+0x110>
 8000e3a:	e000      	b.n	8000e3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 80ca 	beq.w	8000fe0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e4c:	4b51      	ldr	r3, [pc, #324]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e56:	4b4f      	ldr	r3, [pc, #316]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d007      	beq.n	8000e72 <HAL_RCC_OscConfig+0x166>
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	2b18      	cmp	r3, #24
 8000e66:	d156      	bne.n	8000f16 <HAL_RCC_OscConfig+0x20a>
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d151      	bne.n	8000f16 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e72:	4b48      	ldr	r3, [pc, #288]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d005      	beq.n	8000e8a <HAL_RCC_OscConfig+0x17e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e392      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000e8a:	4b42      	ldr	r3, [pc, #264]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f023 0219 	bic.w	r2, r3, #25
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	493f      	ldr	r1, [pc, #252]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fd8c 	bl	80009b8 <HAL_GetTick>
 8000ea0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ea4:	f7ff fd88 	bl	80009b8 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e37c      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000eb6:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0304 	and.w	r3, r3, #4
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0f0      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec2:	f7ff fd85 	bl	80009d0 <HAL_GetREVID>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f241 0203 	movw	r2, #4099	; 0x1003
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d817      	bhi.n	8000f00 <HAL_RCC_OscConfig+0x1f4>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	2b40      	cmp	r3, #64	; 0x40
 8000ed6:	d108      	bne.n	8000eea <HAL_RCC_OscConfig+0x1de>
 8000ed8:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000ee0:	4a2c      	ldr	r2, [pc, #176]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ee8:	e07a      	b.n	8000fe0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eea:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	031b      	lsls	r3, r3, #12
 8000ef8:	4926      	ldr	r1, [pc, #152]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000efe:	e06f      	b.n	8000fe0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f00:	4b24      	ldr	r3, [pc, #144]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	061b      	lsls	r3, r3, #24
 8000f0e:	4921      	ldr	r1, [pc, #132]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000f10:	4313      	orrs	r3, r2
 8000f12:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f14:	e064      	b.n	8000fe0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d047      	beq.n	8000fae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 0219 	bic.w	r2, r3, #25
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	491a      	ldr	r1, [pc, #104]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fd42 	bl	80009b8 <HAL_GetTick>
 8000f34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f38:	f7ff fd3e 	bl	80009b8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e332      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f56:	f7ff fd3b 	bl	80009d0 <HAL_GetREVID>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d819      	bhi.n	8000f98 <HAL_RCC_OscConfig+0x28c>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	2b40      	cmp	r3, #64	; 0x40
 8000f6a:	d108      	bne.n	8000f7e <HAL_RCC_OscConfig+0x272>
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7a:	6053      	str	r3, [r2, #4]
 8000f7c:	e030      	b.n	8000fe0 <HAL_RCC_OscConfig+0x2d4>
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	031b      	lsls	r3, r3, #12
 8000f8c:	4901      	ldr	r1, [pc, #4]	; (8000f94 <HAL_RCC_OscConfig+0x288>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	604b      	str	r3, [r1, #4]
 8000f92:	e025      	b.n	8000fe0 <HAL_RCC_OscConfig+0x2d4>
 8000f94:	58024400 	.word	0x58024400
 8000f98:	4b9a      	ldr	r3, [pc, #616]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	061b      	lsls	r3, r3, #24
 8000fa6:	4997      	ldr	r1, [pc, #604]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	604b      	str	r3, [r1, #4]
 8000fac:	e018      	b.n	8000fe0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fae:	4b95      	ldr	r3, [pc, #596]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a94      	ldr	r2, [pc, #592]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fba:	f7ff fcfd 	bl	80009b8 <HAL_GetTick>
 8000fbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc2:	f7ff fcf9 	bl	80009b8 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e2ed      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fd4:	4b8b      	ldr	r3, [pc, #556]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1f0      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0310 	and.w	r3, r3, #16
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80a9 	beq.w	8001140 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fee:	4b85      	ldr	r3, [pc, #532]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000ff6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000ff8:	4b82      	ldr	r3, [pc, #520]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8000ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2b08      	cmp	r3, #8
 8001002:	d007      	beq.n	8001014 <HAL_RCC_OscConfig+0x308>
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	2b18      	cmp	r3, #24
 8001008:	d13a      	bne.n	8001080 <HAL_RCC_OscConfig+0x374>
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d135      	bne.n	8001080 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001014:	4b7b      	ldr	r3, [pc, #492]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <HAL_RCC_OscConfig+0x320>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	2b80      	cmp	r3, #128	; 0x80
 8001026:	d001      	beq.n	800102c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e2c1      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800102c:	f7ff fcd0 	bl	80009d0 <HAL_GetREVID>
 8001030:	4603      	mov	r3, r0
 8001032:	f241 0203 	movw	r2, #4099	; 0x1003
 8001036:	4293      	cmp	r3, r2
 8001038:	d817      	bhi.n	800106a <HAL_RCC_OscConfig+0x35e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	2b20      	cmp	r3, #32
 8001040:	d108      	bne.n	8001054 <HAL_RCC_OscConfig+0x348>
 8001042:	4b70      	ldr	r3, [pc, #448]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800104a:	4a6e      	ldr	r2, [pc, #440]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 800104c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001050:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001052:	e075      	b.n	8001140 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001054:	4b6b      	ldr	r3, [pc, #428]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	069b      	lsls	r3, r3, #26
 8001062:	4968      	ldr	r1, [pc, #416]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8001064:	4313      	orrs	r3, r2
 8001066:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001068:	e06a      	b.n	8001140 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800106a:	4b66      	ldr	r3, [pc, #408]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	061b      	lsls	r3, r3, #24
 8001078:	4962      	ldr	r1, [pc, #392]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 800107a:	4313      	orrs	r3, r2
 800107c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800107e:	e05f      	b.n	8001140 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69db      	ldr	r3, [r3, #28]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d042      	beq.n	800110e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001088:	4b5e      	ldr	r3, [pc, #376]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a5d      	ldr	r2, [pc, #372]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 800108e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001094:	f7ff fc90 	bl	80009b8 <HAL_GetTick>
 8001098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800109c:	f7ff fc8c 	bl	80009b8 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e280      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80010ae:	4b55      	ldr	r3, [pc, #340]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f0      	beq.n	800109c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010ba:	f7ff fc89 	bl	80009d0 <HAL_GetREVID>
 80010be:	4603      	mov	r3, r0
 80010c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d817      	bhi.n	80010f8 <HAL_RCC_OscConfig+0x3ec>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	d108      	bne.n	80010e2 <HAL_RCC_OscConfig+0x3d6>
 80010d0:	4b4c      	ldr	r3, [pc, #304]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80010d8:	4a4a      	ldr	r2, [pc, #296]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 80010da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010de:	6053      	str	r3, [r2, #4]
 80010e0:	e02e      	b.n	8001140 <HAL_RCC_OscConfig+0x434>
 80010e2:	4b48      	ldr	r3, [pc, #288]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	069b      	lsls	r3, r3, #26
 80010f0:	4944      	ldr	r1, [pc, #272]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	604b      	str	r3, [r1, #4]
 80010f6:	e023      	b.n	8001140 <HAL_RCC_OscConfig+0x434>
 80010f8:	4b42      	ldr	r3, [pc, #264]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	061b      	lsls	r3, r3, #24
 8001106:	493f      	ldr	r1, [pc, #252]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8001108:	4313      	orrs	r3, r2
 800110a:	60cb      	str	r3, [r1, #12]
 800110c:	e018      	b.n	8001140 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800110e:	4b3d      	ldr	r3, [pc, #244]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a3c      	ldr	r2, [pc, #240]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8001114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111a:	f7ff fc4d 	bl	80009b8 <HAL_GetTick>
 800111e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001122:	f7ff fc49 	bl	80009b8 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e23d      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001134:	4b33      	ldr	r3, [pc, #204]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1f0      	bne.n	8001122 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b00      	cmp	r3, #0
 800114a:	d036      	beq.n	80011ba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d019      	beq.n	8001188 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 8001156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001158:	4a2a      	ldr	r2, [pc, #168]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001160:	f7ff fc2a 	bl	80009b8 <HAL_GetTick>
 8001164:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001168:	f7ff fc26 	bl	80009b8 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e21a      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800117a:	4b22      	ldr	r3, [pc, #136]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 800117c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0x45c>
 8001186:	e018      	b.n	80011ba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 800118a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800118c:	4a1d      	ldr	r2, [pc, #116]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 800118e:	f023 0301 	bic.w	r3, r3, #1
 8001192:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001194:	f7ff fc10 	bl	80009b8 <HAL_GetTick>
 8001198:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800119c:	f7ff fc0c 	bl	80009b8 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e200      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 80011b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d039      	beq.n	800123a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d01c      	beq.n	8001208 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 80011d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80011da:	f7ff fbed 	bl	80009b8 <HAL_GetTick>
 80011de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011e2:	f7ff fbe9 	bl	80009b8 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e1dd      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <HAL_RCC_OscConfig+0x4f8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x4d6>
 8001200:	e01b      	b.n	800123a <HAL_RCC_OscConfig+0x52e>
 8001202:	bf00      	nop
 8001204:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001208:	4b9b      	ldr	r3, [pc, #620]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a9a      	ldr	r2, [pc, #616]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 800120e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001212:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001214:	f7ff fbd0 	bl	80009b8 <HAL_GetTick>
 8001218:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800121c:	f7ff fbcc 	bl	80009b8 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e1c0      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800122e:	4b92      	ldr	r3, [pc, #584]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 8081 	beq.w	800134a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001248:	4b8c      	ldr	r3, [pc, #560]	; (800147c <HAL_RCC_OscConfig+0x770>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a8b      	ldr	r2, [pc, #556]	; (800147c <HAL_RCC_OscConfig+0x770>)
 800124e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001254:	f7ff fbb0 	bl	80009b8 <HAL_GetTick>
 8001258:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800125c:	f7ff fbac 	bl	80009b8 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	; 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e1a0      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800126e:	4b83      	ldr	r3, [pc, #524]	; (800147c <HAL_RCC_OscConfig+0x770>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d106      	bne.n	8001290 <HAL_RCC_OscConfig+0x584>
 8001282:	4b7d      	ldr	r3, [pc, #500]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001286:	4a7c      	ldr	r2, [pc, #496]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6713      	str	r3, [r2, #112]	; 0x70
 800128e:	e02d      	b.n	80012ec <HAL_RCC_OscConfig+0x5e0>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10c      	bne.n	80012b2 <HAL_RCC_OscConfig+0x5a6>
 8001298:	4b77      	ldr	r3, [pc, #476]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 800129a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129c:	4a76      	ldr	r2, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 800129e:	f023 0301 	bic.w	r3, r3, #1
 80012a2:	6713      	str	r3, [r2, #112]	; 0x70
 80012a4:	4b74      	ldr	r3, [pc, #464]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80012a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a8:	4a73      	ldr	r2, [pc, #460]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80012aa:	f023 0304 	bic.w	r3, r3, #4
 80012ae:	6713      	str	r3, [r2, #112]	; 0x70
 80012b0:	e01c      	b.n	80012ec <HAL_RCC_OscConfig+0x5e0>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x5c8>
 80012ba:	4b6f      	ldr	r3, [pc, #444]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80012bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012be:	4a6e      	ldr	r2, [pc, #440]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6713      	str	r3, [r2, #112]	; 0x70
 80012c6:	4b6c      	ldr	r3, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80012c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ca:	4a6b      	ldr	r2, [pc, #428]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6713      	str	r3, [r2, #112]	; 0x70
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0x5e0>
 80012d4:	4b68      	ldr	r3, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80012d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d8:	4a67      	ldr	r2, [pc, #412]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80012da:	f023 0301 	bic.w	r3, r3, #1
 80012de:	6713      	str	r3, [r2, #112]	; 0x70
 80012e0:	4b65      	ldr	r3, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80012e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e4:	4a64      	ldr	r2, [pc, #400]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80012e6:	f023 0304 	bic.w	r3, r3, #4
 80012ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d015      	beq.n	8001320 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f4:	f7ff fb60 	bl	80009b8 <HAL_GetTick>
 80012f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012fa:	e00a      	b.n	8001312 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012fc:	f7ff fb5c 	bl	80009b8 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f241 3288 	movw	r2, #5000	; 0x1388
 800130a:	4293      	cmp	r3, r2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e14e      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001312:	4b59      	ldr	r3, [pc, #356]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0ee      	beq.n	80012fc <HAL_RCC_OscConfig+0x5f0>
 800131e:	e014      	b.n	800134a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001320:	f7ff fb4a 	bl	80009b8 <HAL_GetTick>
 8001324:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001326:	e00a      	b.n	800133e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001328:	f7ff fb46 	bl	80009b8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f241 3288 	movw	r2, #5000	; 0x1388
 8001336:	4293      	cmp	r3, r2
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e138      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800133e:	4b4e      	ldr	r3, [pc, #312]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1ee      	bne.n	8001328 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 812d 	beq.w	80015ae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001354:	4b48      	ldr	r3, [pc, #288]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800135c:	2b18      	cmp	r3, #24
 800135e:	f000 80bd 	beq.w	80014dc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	2b02      	cmp	r3, #2
 8001368:	f040 809e 	bne.w	80014a8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136c:	4b42      	ldr	r3, [pc, #264]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a41      	ldr	r2, [pc, #260]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fb1e 	bl	80009b8 <HAL_GetTick>
 800137c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001380:	f7ff fb1a 	bl	80009b8 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e10e      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001392:	4b39      	ldr	r3, [pc, #228]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800139e:	4b36      	ldr	r3, [pc, #216]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80013a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013a2:	4b37      	ldr	r3, [pc, #220]	; (8001480 <HAL_RCC_OscConfig+0x774>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	430a      	orrs	r2, r1
 80013b2:	4931      	ldr	r1, [pc, #196]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	628b      	str	r3, [r1, #40]	; 0x28
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	3b01      	subs	r3, #1
 80013be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c6:	3b01      	subs	r3, #1
 80013c8:	025b      	lsls	r3, r3, #9
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	431a      	orrs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d2:	3b01      	subs	r3, #1
 80013d4:	041b      	lsls	r3, r3, #16
 80013d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e0:	3b01      	subs	r3, #1
 80013e2:	061b      	lsls	r3, r3, #24
 80013e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80013e8:	4923      	ldr	r1, [pc, #140]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	4a21      	ldr	r2, [pc, #132]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80013f4:	f023 0301 	bic.w	r3, r3, #1
 80013f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 80013fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <HAL_RCC_OscConfig+0x778>)
 8001400:	4013      	ands	r3, r2
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001406:	00d2      	lsls	r2, r2, #3
 8001408:	491b      	ldr	r1, [pc, #108]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 800140a:	4313      	orrs	r3, r2
 800140c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800140e:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001412:	f023 020c 	bic.w	r2, r3, #12
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4917      	ldr	r1, [pc, #92]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 800141c:	4313      	orrs	r3, r2
 800141e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001424:	f023 0202 	bic.w	r2, r3, #2
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	4912      	ldr	r1, [pc, #72]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 800142e:	4313      	orrs	r3, r2
 8001430:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001448:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001454:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145a:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_RCC_OscConfig+0x76c>)
 8001468:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800146c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff faa3 	bl	80009b8 <HAL_GetTick>
 8001472:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001474:	e011      	b.n	800149a <HAL_RCC_OscConfig+0x78e>
 8001476:	bf00      	nop
 8001478:	58024400 	.word	0x58024400
 800147c:	58024800 	.word	0x58024800
 8001480:	fffffc0c 	.word	0xfffffc0c
 8001484:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001488:	f7ff fa96 	bl	80009b8 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e08a      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800149a:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <HAL_RCC_OscConfig+0x8ac>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x77c>
 80014a6:	e082      	b.n	80015ae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a8:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <HAL_RCC_OscConfig+0x8ac>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a42      	ldr	r2, [pc, #264]	; (80015b8 <HAL_RCC_OscConfig+0x8ac>)
 80014ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fa80 	bl	80009b8 <HAL_GetTick>
 80014b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014bc:	f7ff fa7c 	bl	80009b8 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e070      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <HAL_RCC_OscConfig+0x8ac>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x7b0>
 80014da:	e068      	b.n	80015ae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <HAL_RCC_OscConfig+0x8ac>)
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80014e2:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <HAL_RCC_OscConfig+0x8ac>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d031      	beq.n	8001554 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f003 0203 	and.w	r2, r3, #3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d12a      	bne.n	8001554 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	091b      	lsrs	r3, r3, #4
 8001502:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150a:	429a      	cmp	r2, r3
 800150c:	d122      	bne.n	8001554 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800151a:	429a      	cmp	r2, r3
 800151c:	d11a      	bne.n	8001554 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	0a5b      	lsrs	r3, r3, #9
 8001522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d111      	bne.n	8001554 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	0c1b      	lsrs	r3, r3, #16
 8001534:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800153e:	429a      	cmp	r2, r3
 8001540:	d108      	bne.n	8001554 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	0e1b      	lsrs	r3, r3, #24
 8001546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e02b      	b.n	80015b0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_RCC_OscConfig+0x8ac>)
 800155a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155c:	08db      	lsrs	r3, r3, #3
 800155e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001562:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	429a      	cmp	r2, r3
 800156c:	d01f      	beq.n	80015ae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_RCC_OscConfig+0x8ac>)
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <HAL_RCC_OscConfig+0x8ac>)
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800157a:	f7ff fa1d 	bl	80009b8 <HAL_GetTick>
 800157e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001580:	bf00      	nop
 8001582:	f7ff fa19 	bl	80009b8 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	4293      	cmp	r3, r2
 800158c:	d0f9      	beq.n	8001582 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_RCC_OscConfig+0x8ac>)
 8001590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_RCC_OscConfig+0x8b0>)
 8001594:	4013      	ands	r3, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800159a:	00d2      	lsls	r2, r2, #3
 800159c:	4906      	ldr	r1, [pc, #24]	; (80015b8 <HAL_RCC_OscConfig+0x8ac>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_RCC_OscConfig+0x8ac>)
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <HAL_RCC_OscConfig+0x8ac>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3730      	adds	r7, #48	; 0x30
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	58024400 	.word	0x58024400
 80015bc:	ffff0007 	.word	0xffff0007

080015c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e19c      	b.n	800190e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015d4:	4b8a      	ldr	r3, [pc, #552]	; (8001800 <HAL_RCC_ClockConfig+0x240>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 030f 	and.w	r3, r3, #15
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d910      	bls.n	8001604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e2:	4b87      	ldr	r3, [pc, #540]	; (8001800 <HAL_RCC_ClockConfig+0x240>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 020f 	bic.w	r2, r3, #15
 80015ea:	4985      	ldr	r1, [pc, #532]	; (8001800 <HAL_RCC_ClockConfig+0x240>)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b83      	ldr	r3, [pc, #524]	; (8001800 <HAL_RCC_ClockConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e184      	b.n	800190e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	d010      	beq.n	8001632 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	691a      	ldr	r2, [r3, #16]
 8001614:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800161c:	429a      	cmp	r2, r3
 800161e:	d908      	bls.n	8001632 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001620:	4b78      	ldr	r3, [pc, #480]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	4975      	ldr	r1, [pc, #468]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 800162e:	4313      	orrs	r3, r2
 8001630:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d010      	beq.n	8001660 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	4b70      	ldr	r3, [pc, #448]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800164a:	429a      	cmp	r2, r3
 800164c:	d908      	bls.n	8001660 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800164e:	4b6d      	ldr	r3, [pc, #436]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	496a      	ldr	r1, [pc, #424]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 800165c:	4313      	orrs	r3, r2
 800165e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0310 	and.w	r3, r3, #16
 8001668:	2b00      	cmp	r3, #0
 800166a:	d010      	beq.n	800168e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699a      	ldr	r2, [r3, #24]
 8001670:	4b64      	ldr	r3, [pc, #400]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001678:	429a      	cmp	r2, r3
 800167a:	d908      	bls.n	800168e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800167c:	4b61      	ldr	r3, [pc, #388]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	495e      	ldr	r1, [pc, #376]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 800168a:	4313      	orrs	r3, r2
 800168c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0320 	and.w	r3, r3, #32
 8001696:	2b00      	cmp	r3, #0
 8001698:	d010      	beq.n	80016bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69da      	ldr	r2, [r3, #28]
 800169e:	4b59      	ldr	r3, [pc, #356]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d908      	bls.n	80016bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80016aa:	4b56      	ldr	r3, [pc, #344]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4953      	ldr	r1, [pc, #332]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d010      	beq.n	80016ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d908      	bls.n	80016ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d8:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f023 020f 	bic.w	r2, r3, #15
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4947      	ldr	r1, [pc, #284]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d055      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80016f6:	4b43      	ldr	r3, [pc, #268]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	4940      	ldr	r1, [pc, #256]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 8001704:	4313      	orrs	r3, r2
 8001706:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b02      	cmp	r3, #2
 800170e:	d107      	bne.n	8001720 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001710:	4b3c      	ldr	r3, [pc, #240]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d121      	bne.n	8001760 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0f6      	b.n	800190e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b03      	cmp	r3, #3
 8001726:	d107      	bne.n	8001738 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001728:	4b36      	ldr	r3, [pc, #216]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d115      	bne.n	8001760 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0ea      	b.n	800190e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d107      	bne.n	8001750 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001740:	4b30      	ldr	r3, [pc, #192]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d109      	bne.n	8001760 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0de      	b.n	800190e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001750:	4b2c      	ldr	r3, [pc, #176]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0d6      	b.n	800190e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001760:	4b28      	ldr	r3, [pc, #160]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	f023 0207 	bic.w	r2, r3, #7
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4925      	ldr	r1, [pc, #148]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 800176e:	4313      	orrs	r3, r2
 8001770:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001772:	f7ff f921 	bl	80009b8 <HAL_GetTick>
 8001776:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001778:	e00a      	b.n	8001790 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177a:	f7ff f91d 	bl	80009b8 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	; 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e0be      	b.n	800190e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	429a      	cmp	r2, r3
 80017a0:	d1eb      	bne.n	800177a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d010      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68da      	ldr	r2, [r3, #12]
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d208      	bcs.n	80017d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f023 020f 	bic.w	r2, r3, #15
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	490e      	ldr	r1, [pc, #56]	; (8001804 <HAL_RCC_ClockConfig+0x244>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_RCC_ClockConfig+0x240>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d214      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_RCC_ClockConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 020f 	bic.w	r2, r3, #15
 80017e6:	4906      	ldr	r1, [pc, #24]	; (8001800 <HAL_RCC_ClockConfig+0x240>)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_RCC_ClockConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e086      	b.n	800190e <HAL_RCC_ClockConfig+0x34e>
 8001800:	52002000 	.word	0x52002000
 8001804:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d010      	beq.n	8001836 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <HAL_RCC_ClockConfig+0x358>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001820:	429a      	cmp	r2, r3
 8001822:	d208      	bcs.n	8001836 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001824:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <HAL_RCC_ClockConfig+0x358>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	4939      	ldr	r1, [pc, #228]	; (8001918 <HAL_RCC_ClockConfig+0x358>)
 8001832:	4313      	orrs	r3, r2
 8001834:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d010      	beq.n	8001864 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_RCC_ClockConfig+0x358>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800184e:	429a      	cmp	r2, r3
 8001850:	d208      	bcs.n	8001864 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001852:	4b31      	ldr	r3, [pc, #196]	; (8001918 <HAL_RCC_ClockConfig+0x358>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	492e      	ldr	r1, [pc, #184]	; (8001918 <HAL_RCC_ClockConfig+0x358>)
 8001860:	4313      	orrs	r3, r2
 8001862:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	2b00      	cmp	r3, #0
 800186e:	d010      	beq.n	8001892 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699a      	ldr	r2, [r3, #24]
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <HAL_RCC_ClockConfig+0x358>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800187c:	429a      	cmp	r2, r3
 800187e:	d208      	bcs.n	8001892 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_RCC_ClockConfig+0x358>)
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4922      	ldr	r1, [pc, #136]	; (8001918 <HAL_RCC_ClockConfig+0x358>)
 800188e:	4313      	orrs	r3, r2
 8001890:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	2b00      	cmp	r3, #0
 800189c:	d010      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69da      	ldr	r2, [r3, #28]
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_RCC_ClockConfig+0x358>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d208      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <HAL_RCC_ClockConfig+0x358>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4917      	ldr	r1, [pc, #92]	; (8001918 <HAL_RCC_ClockConfig+0x358>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018c0:	f000 f834 	bl	800192c <HAL_RCC_GetSysClockFreq>
 80018c4:	4602      	mov	r2, r0
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_RCC_ClockConfig+0x358>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	4912      	ldr	r1, [pc, #72]	; (800191c <HAL_RCC_ClockConfig+0x35c>)
 80018d2:	5ccb      	ldrb	r3, [r1, r3]
 80018d4:	f003 031f 	and.w	r3, r3, #31
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
 80018dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_RCC_ClockConfig+0x358>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	4a0d      	ldr	r2, [pc, #52]	; (800191c <HAL_RCC_ClockConfig+0x35c>)
 80018e8:	5cd3      	ldrb	r3, [r2, r3]
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	fa22 f303 	lsr.w	r3, r2, r3
 80018f4:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_RCC_ClockConfig+0x360>)
 80018f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018f8:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <HAL_RCC_ClockConfig+0x364>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_RCC_ClockConfig+0x368>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fdfe 	bl	8000504 <HAL_InitTick>
 8001908:	4603      	mov	r3, r0
 800190a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	58024400 	.word	0x58024400
 800191c:	08005910 	.word	0x08005910
 8001920:	24000004 	.word	0x24000004
 8001924:	24000000 	.word	0x24000000
 8001928:	24000008 	.word	0x24000008

0800192c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	; 0x24
 8001930:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001932:	4bb3      	ldr	r3, [pc, #716]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800193a:	2b18      	cmp	r3, #24
 800193c:	f200 8155 	bhi.w	8001bea <HAL_RCC_GetSysClockFreq+0x2be>
 8001940:	a201      	add	r2, pc, #4	; (adr r2, 8001948 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001946:	bf00      	nop
 8001948:	080019ad 	.word	0x080019ad
 800194c:	08001beb 	.word	0x08001beb
 8001950:	08001beb 	.word	0x08001beb
 8001954:	08001beb 	.word	0x08001beb
 8001958:	08001beb 	.word	0x08001beb
 800195c:	08001beb 	.word	0x08001beb
 8001960:	08001beb 	.word	0x08001beb
 8001964:	08001beb 	.word	0x08001beb
 8001968:	080019d3 	.word	0x080019d3
 800196c:	08001beb 	.word	0x08001beb
 8001970:	08001beb 	.word	0x08001beb
 8001974:	08001beb 	.word	0x08001beb
 8001978:	08001beb 	.word	0x08001beb
 800197c:	08001beb 	.word	0x08001beb
 8001980:	08001beb 	.word	0x08001beb
 8001984:	08001beb 	.word	0x08001beb
 8001988:	080019d9 	.word	0x080019d9
 800198c:	08001beb 	.word	0x08001beb
 8001990:	08001beb 	.word	0x08001beb
 8001994:	08001beb 	.word	0x08001beb
 8001998:	08001beb 	.word	0x08001beb
 800199c:	08001beb 	.word	0x08001beb
 80019a0:	08001beb 	.word	0x08001beb
 80019a4:	08001beb 	.word	0x08001beb
 80019a8:	080019df 	.word	0x080019df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80019ac:	4b94      	ldr	r3, [pc, #592]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d009      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80019b8:	4b91      	ldr	r3, [pc, #580]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	08db      	lsrs	r3, r3, #3
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	4a90      	ldr	r2, [pc, #576]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
 80019c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80019ca:	e111      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80019cc:	4b8d      	ldr	r3, [pc, #564]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80019ce:	61bb      	str	r3, [r7, #24]
      break;
 80019d0:	e10e      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80019d2:	4b8d      	ldr	r3, [pc, #564]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80019d4:	61bb      	str	r3, [r7, #24]
      break;
 80019d6:	e10b      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80019d8:	4b8c      	ldr	r3, [pc, #560]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80019da:	61bb      	str	r3, [r7, #24]
      break;
 80019dc:	e108      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80019de:	4b88      	ldr	r3, [pc, #544]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80019e8:	4b85      	ldr	r3, [pc, #532]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80019f4:	4b82      	ldr	r3, [pc, #520]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80019fe:	4b80      	ldr	r3, [pc, #512]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a02:	08db      	lsrs	r3, r3, #3
 8001a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	ee07 3a90 	vmov	s15, r3
 8001a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80e1 	beq.w	8001be4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	f000 8083 	beq.w	8001b30 <HAL_RCC_GetSysClockFreq+0x204>
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	f200 80a1 	bhi.w	8001b74 <HAL_RCC_GetSysClockFreq+0x248>
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x114>
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d056      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x1c0>
 8001a3e:	e099      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a40:	4b6f      	ldr	r3, [pc, #444]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0320 	and.w	r3, r3, #32
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d02d      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001a4c:	4b6c      	ldr	r3, [pc, #432]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	08db      	lsrs	r3, r3, #3
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	4a6b      	ldr	r2, [pc, #428]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	ee07 3a90 	vmov	s15, r3
 8001a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a76:	4b62      	ldr	r3, [pc, #392]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001aa6:	e087      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	ee07 3a90 	vmov	s15, r3
 8001aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001c14 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aba:	4b51      	ldr	r3, [pc, #324]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac2:	ee07 3a90 	vmov	s15, r3
 8001ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ace:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001aea:	e065      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001c18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001afe:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001b2e:	e043      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001c1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b42:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001b72:	e021      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001c18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b86:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001bb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	0a5b      	lsrs	r3, r3, #9
 8001bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	ee07 3a90 	vmov	s15, r3
 8001bcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bdc:	ee17 3a90 	vmov	r3, s15
 8001be0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001be2:	e005      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61bb      	str	r3, [r7, #24]
      break;
 8001be8:	e002      	b.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001bec:	61bb      	str	r3, [r7, #24]
      break;
 8001bee:	bf00      	nop
  }

  return sysclockfreq;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	58024400 	.word	0x58024400
 8001c04:	03d09000 	.word	0x03d09000
 8001c08:	003d0900 	.word	0x003d0900
 8001c0c:	017d7840 	.word	0x017d7840
 8001c10:	46000000 	.word	0x46000000
 8001c14:	4c742400 	.word	0x4c742400
 8001c18:	4a742400 	.word	0x4a742400
 8001c1c:	4bbebc20 	.word	0x4bbebc20

08001c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001c26:	f7ff fe81 	bl	800192c <HAL_RCC_GetSysClockFreq>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_RCC_GetHCLKFreq+0x50>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	490f      	ldr	r1, [pc, #60]	; (8001c74 <HAL_RCC_GetHCLKFreq+0x54>)
 8001c38:	5ccb      	ldrb	r3, [r1, r3]
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_RCC_GetHCLKFreq+0x50>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_RCC_GetHCLKFreq+0x54>)
 8001c4e:	5cd3      	ldrb	r3, [r2, r3]
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5a:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x58>)
 8001c5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c5e:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x58>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	58024400 	.word	0x58024400
 8001c74:	08005910 	.word	0x08005910
 8001c78:	24000004 	.word	0x24000004
 8001c7c:	24000000 	.word	0x24000000

08001c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001c84:	f7ff ffcc 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	4904      	ldr	r1, [pc, #16]	; (8001ca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c96:	5ccb      	ldrb	r3, [r1, r3]
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	58024400 	.word	0x58024400
 8001ca8:	08005910 	.word	0x08005910

08001cac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	223f      	movs	r2, #63	; 0x3f
 8001cba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <HAL_RCC_GetClockConfig+0x7c>)
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	f003 0207 	and.w	r2, r3, #7
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8001cc8:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <HAL_RCC_GetClockConfig+0x7c>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_RCC_GetClockConfig+0x7c>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 020f 	and.w	r2, r3, #15
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_RCC_GetClockConfig+0x7c>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8001cec:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_RCC_GetClockConfig+0x7c>)
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_GetClockConfig+0x7c>)
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_RCC_GetClockConfig+0x7c>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_RCC_GetClockConfig+0x80>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 020f 	and.w	r2, r3, #15
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	601a      	str	r2, [r3, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	58024400 	.word	0x58024400
 8001d2c:	52002000 	.word	0x52002000

08001d30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e049      	b.n	8001dd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f841 	bl	8001dde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f000 f9e8 	bl	8002144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d001      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e054      	b.n	8001eb6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a26      	ldr	r2, [pc, #152]	; (8001ec4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d022      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e36:	d01d      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a22      	ldr	r2, [pc, #136]	; (8001ec8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d018      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a21      	ldr	r2, [pc, #132]	; (8001ecc <HAL_TIM_Base_Start_IT+0xd8>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1f      	ldr	r2, [pc, #124]	; (8001ed0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00e      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <HAL_TIM_Base_Start_IT+0xe0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <HAL_TIM_Base_Start_IT+0xe4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d004      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_TIM_Base_Start_IT+0xe8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d115      	bne.n	8001ea0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_TIM_Base_Start_IT+0xec>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d015      	beq.n	8001eb2 <HAL_TIM_Base_Start_IT+0xbe>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8c:	d011      	beq.n	8001eb2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0201 	orr.w	r2, r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e9e:	e008      	b.n	8001eb2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	e000      	b.n	8001eb4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40000800 	.word	0x40000800
 8001ed0:	40000c00 	.word	0x40000c00
 8001ed4:	40010400 	.word	0x40010400
 8001ed8:	40001800 	.word	0x40001800
 8001edc:	40014000 	.word	0x40014000
 8001ee0:	00010007 	.word	0x00010007

08001ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d020      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01b      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0202 	mvn.w	r2, #2
 8001f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f8e9 	bl	8002106 <HAL_TIM_IC_CaptureCallback>
 8001f34:	e005      	b.n	8001f42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8db 	bl	80020f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f8ec 	bl	800211a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d020      	beq.n	8001f94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01b      	beq.n	8001f94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0204 	mvn.w	r2, #4
 8001f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f8c3 	bl	8002106 <HAL_TIM_IC_CaptureCallback>
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f8b5 	bl	80020f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f8c6 	bl	800211a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d020      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01b      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0208 	mvn.w	r2, #8
 8001fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f89d 	bl	8002106 <HAL_TIM_IC_CaptureCallback>
 8001fcc:	e005      	b.n	8001fda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f88f 	bl	80020f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f8a0 	bl	800211a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d020      	beq.n	800202c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01b      	beq.n	800202c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0210 	mvn.w	r2, #16
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2208      	movs	r2, #8
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f877 	bl	8002106 <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f869 	bl	80020f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f87a 	bl	800211a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00c      	beq.n	8002050 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d007      	beq.n	8002050 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0201 	mvn.w	r2, #1
 8002048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fa24 	bl	8000498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	2b00      	cmp	r3, #0
 8002058:	d104      	bne.n	8002064 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00c      	beq.n	800207e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8002076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f913 	bl	80022a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00c      	beq.n	80020a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800209a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f90b 	bl	80022b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00c      	beq.n	80020c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d007      	beq.n	80020c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f834 	bl	800212e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00c      	beq.n	80020ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d007      	beq.n	80020ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f06f 0220 	mvn.w	r2, #32
 80020e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8d3 	bl	8002290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a46      	ldr	r2, [pc, #280]	; (8002270 <TIM_Base_SetConfig+0x12c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d013      	beq.n	8002184 <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002162:	d00f      	beq.n	8002184 <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a43      	ldr	r2, [pc, #268]	; (8002274 <TIM_Base_SetConfig+0x130>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00b      	beq.n	8002184 <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a42      	ldr	r2, [pc, #264]	; (8002278 <TIM_Base_SetConfig+0x134>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d007      	beq.n	8002184 <TIM_Base_SetConfig+0x40>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a41      	ldr	r2, [pc, #260]	; (800227c <TIM_Base_SetConfig+0x138>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d003      	beq.n	8002184 <TIM_Base_SetConfig+0x40>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a40      	ldr	r2, [pc, #256]	; (8002280 <TIM_Base_SetConfig+0x13c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d108      	bne.n	8002196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a35      	ldr	r2, [pc, #212]	; (8002270 <TIM_Base_SetConfig+0x12c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01f      	beq.n	80021de <TIM_Base_SetConfig+0x9a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a4:	d01b      	beq.n	80021de <TIM_Base_SetConfig+0x9a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a32      	ldr	r2, [pc, #200]	; (8002274 <TIM_Base_SetConfig+0x130>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d017      	beq.n	80021de <TIM_Base_SetConfig+0x9a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a31      	ldr	r2, [pc, #196]	; (8002278 <TIM_Base_SetConfig+0x134>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <TIM_Base_SetConfig+0x9a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a30      	ldr	r2, [pc, #192]	; (800227c <TIM_Base_SetConfig+0x138>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00f      	beq.n	80021de <TIM_Base_SetConfig+0x9a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a2f      	ldr	r2, [pc, #188]	; (8002280 <TIM_Base_SetConfig+0x13c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00b      	beq.n	80021de <TIM_Base_SetConfig+0x9a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a2e      	ldr	r2, [pc, #184]	; (8002284 <TIM_Base_SetConfig+0x140>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <TIM_Base_SetConfig+0x9a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a2d      	ldr	r2, [pc, #180]	; (8002288 <TIM_Base_SetConfig+0x144>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d003      	beq.n	80021de <TIM_Base_SetConfig+0x9a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a2c      	ldr	r2, [pc, #176]	; (800228c <TIM_Base_SetConfig+0x148>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d108      	bne.n	80021f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a16      	ldr	r2, [pc, #88]	; (8002270 <TIM_Base_SetConfig+0x12c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d00f      	beq.n	800223c <TIM_Base_SetConfig+0xf8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a18      	ldr	r2, [pc, #96]	; (8002280 <TIM_Base_SetConfig+0x13c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d00b      	beq.n	800223c <TIM_Base_SetConfig+0xf8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a17      	ldr	r2, [pc, #92]	; (8002284 <TIM_Base_SetConfig+0x140>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d007      	beq.n	800223c <TIM_Base_SetConfig+0xf8>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a16      	ldr	r2, [pc, #88]	; (8002288 <TIM_Base_SetConfig+0x144>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d003      	beq.n	800223c <TIM_Base_SetConfig+0xf8>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a15      	ldr	r2, [pc, #84]	; (800228c <TIM_Base_SetConfig+0x148>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d103      	bne.n	8002244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d105      	bne.n	8002262 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f023 0201 	bic.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]
  }
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40010000 	.word	0x40010000
 8002274:	40000400 	.word	0x40000400
 8002278:	40000800 	.word	0x40000800
 800227c:	40000c00 	.word	0x40000c00
 8002280:	40010400 	.word	0x40010400
 8002284:	40014000 	.word	0x40014000
 8002288:	40014400 	.word	0x40014400
 800228c:	40014800 	.word	0x40014800

08002290 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <__NVIC_SetPriority>:
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80022d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db0a      	blt.n	80022f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	490c      	ldr	r1, [pc, #48]	; (8002318 <__NVIC_SetPriority+0x4c>)
 80022e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	440b      	add	r3, r1
 80022f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80022f4:	e00a      	b.n	800230c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4908      	ldr	r1, [pc, #32]	; (800231c <__NVIC_SetPriority+0x50>)
 80022fc:	88fb      	ldrh	r3, [r7, #6]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	3b04      	subs	r3, #4
 8002304:	0112      	lsls	r2, r2, #4
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	440b      	add	r3, r1
 800230a:	761a      	strb	r2, [r3, #24]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SysTick_Handler+0x1c>)
 8002326:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002328:	f001 fcfe 	bl	8003d28 <xTaskGetSchedulerState>
 800232c:	4603      	mov	r3, r0
 800232e:	2b01      	cmp	r3, #1
 8002330:	d001      	beq.n	8002336 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002332:	f002 fae9 	bl	8004908 <xPortSysTickHandler>
  }
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002344:	2100      	movs	r1, #0
 8002346:	f06f 0004 	mvn.w	r0, #4
 800234a:	f7ff ffbf 	bl	80022cc <__NVIC_SetPriority>
#endif
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800235a:	f3ef 8305 	mrs	r3, IPSR
 800235e:	603b      	str	r3, [r7, #0]
  return(result);
 8002360:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002366:	f06f 0305 	mvn.w	r3, #5
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	e00c      	b.n	8002388 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800236e:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <osKernelInitialize+0x44>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d105      	bne.n	8002382 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <osKernelInitialize+0x44>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800237c:	2300      	movs	r3, #0
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	e002      	b.n	8002388 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002386:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002388:	687b      	ldr	r3, [r7, #4]
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	240000f0 	.word	0x240000f0

0800239c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023a2:	f3ef 8305 	mrs	r3, IPSR
 80023a6:	603b      	str	r3, [r7, #0]
  return(result);
 80023a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80023ae:	f06f 0305 	mvn.w	r3, #5
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	e010      	b.n	80023d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <osKernelStart+0x48>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d109      	bne.n	80023d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80023be:	f7ff ffbf 	bl	8002340 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <osKernelStart+0x48>)
 80023c4:	2202      	movs	r2, #2
 80023c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80023c8:	f001 f866 	bl	8003498 <vTaskStartScheduler>
      stat = osOK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	e002      	b.n	80023d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80023d8:	687b      	ldr	r3, [r7, #4]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	240000f0 	.word	0x240000f0

080023e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08e      	sub	sp, #56	; 0x38
 80023ec:	af04      	add	r7, sp, #16
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023f8:	f3ef 8305 	mrs	r3, IPSR
 80023fc:	617b      	str	r3, [r7, #20]
  return(result);
 80023fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002400:	2b00      	cmp	r3, #0
 8002402:	d17e      	bne.n	8002502 <osThreadNew+0x11a>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d07b      	beq.n	8002502 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800240e:	2318      	movs	r3, #24
 8002410:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002412:	2300      	movs	r3, #0
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800241a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d045      	beq.n	80024ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <osThreadNew+0x48>
        name = attr->name;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <osThreadNew+0x6e>
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	2b38      	cmp	r3, #56	; 0x38
 8002448:	d805      	bhi.n	8002456 <osThreadNew+0x6e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <osThreadNew+0x72>
        return (NULL);
 8002456:	2300      	movs	r3, #0
 8002458:	e054      	b.n	8002504 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00e      	beq.n	8002490 <osThreadNew+0xa8>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b5b      	cmp	r3, #91	; 0x5b
 8002478:	d90a      	bls.n	8002490 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <osThreadNew+0xa8>
        mem = 1;
 800248a:	2301      	movs	r3, #1
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	e010      	b.n	80024b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10c      	bne.n	80024b2 <osThreadNew+0xca>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d108      	bne.n	80024b2 <osThreadNew+0xca>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d104      	bne.n	80024b2 <osThreadNew+0xca>
          mem = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	e001      	b.n	80024b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d110      	bne.n	80024da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024c0:	9202      	str	r2, [sp, #8]
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	6a3a      	ldr	r2, [r7, #32]
 80024cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fe0c 	bl	80030ec <xTaskCreateStatic>
 80024d4:	4603      	mov	r3, r0
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	e013      	b.n	8002502 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d110      	bne.n	8002502 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 fe57 	bl	80031a6 <xTaskCreate>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d001      	beq.n	8002502 <osThreadNew+0x11a>
            hTask = NULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002502:	693b      	ldr	r3, [r7, #16]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3728      	adds	r7, #40	; 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002514:	f3ef 8305 	mrs	r3, IPSR
 8002518:	60bb      	str	r3, [r7, #8]
  return(result);
 800251a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <osDelay+0x1c>
    stat = osErrorISR;
 8002520:	f06f 0305 	mvn.w	r3, #5
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	e007      	b.n	8002538 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 ff7c 	bl	8003430 <vTaskDelay>
    }
  }

  return (stat);
 8002538:	68fb      	ldr	r3, [r7, #12]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a07      	ldr	r2, [pc, #28]	; (8002570 <vApplicationGetIdleTaskMemory+0x2c>)
 8002554:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	4a06      	ldr	r2, [pc, #24]	; (8002574 <vApplicationGetIdleTaskMemory+0x30>)
 800255a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2280      	movs	r2, #128	; 0x80
 8002560:	601a      	str	r2, [r3, #0]
}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	240000f4 	.word	0x240000f4
 8002574:	24000150 	.word	0x24000150

08002578 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002588:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <vApplicationGetTimerTaskMemory+0x30>)
 800258e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002596:	601a      	str	r2, [r3, #0]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	24000350 	.word	0x24000350
 80025a8:	240003ac 	.word	0x240003ac

080025ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f103 0208 	add.w	r2, r3, #8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f103 0208 	add.w	r2, r3, #8
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f103 0208 	add.w	r2, r3, #8
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	601a      	str	r2, [r3, #0]
}
 8002642:	bf00      	nop
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800264e:	b480      	push	{r7}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002664:	d103      	bne.n	800266e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	e00c      	b.n	8002688 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3308      	adds	r3, #8
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e002      	b.n	800267c <vListInsert+0x2e>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	429a      	cmp	r2, r3
 8002686:	d2f6      	bcs.n	8002676 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	601a      	str	r2, [r3, #0]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6892      	ldr	r2, [r2, #8]
 80026d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6852      	ldr	r2, [r2, #4]
 80026e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d103      	bne.n	80026f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	1e5a      	subs	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10a      	bne.n	800273e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800273a:	bf00      	nop
 800273c:	e7fe      	b.n	800273c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800273e:	f002 f851 	bl	80047e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	68f9      	ldr	r1, [r7, #12]
 800274c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	441a      	add	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	3b01      	subs	r3, #1
 8002770:	68f9      	ldr	r1, [r7, #12]
 8002772:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	441a      	add	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	22ff      	movs	r2, #255	; 0xff
 8002782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	22ff      	movs	r2, #255	; 0xff
 800278a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d114      	bne.n	80027be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01a      	beq.n	80027d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3310      	adds	r3, #16
 80027a0:	4618      	mov	r0, r3
 80027a2:	f001 f903 	bl	80039ac <xTaskRemoveFromEventList>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d012      	beq.n	80027d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <xQueueGenericReset+0xcc>)
 80027ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	f3bf 8f6f 	isb	sy
 80027bc:	e009      	b.n	80027d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3310      	adds	r3, #16
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fef2 	bl	80025ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3324      	adds	r3, #36	; 0x24
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff feed 	bl	80025ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027d2:	f002 f837 	bl	8004844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027d6:	2301      	movs	r3, #1
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	e000ed04 	.word	0xe000ed04

080027e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08e      	sub	sp, #56	; 0x38
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80027f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fc:	f383 8811 	msr	BASEPRI, r3
 8002800:	f3bf 8f6f 	isb	sy
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800280a:	bf00      	nop
 800280c:	e7fe      	b.n	800280c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10a      	bne.n	800282a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002826:	bf00      	nop
 8002828:	e7fe      	b.n	8002828 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <xQueueGenericCreateStatic+0x52>
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <xQueueGenericCreateStatic+0x56>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <xQueueGenericCreateStatic+0x58>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	623b      	str	r3, [r7, #32]
}
 8002852:	bf00      	nop
 8002854:	e7fe      	b.n	8002854 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <xQueueGenericCreateStatic+0x7e>
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <xQueueGenericCreateStatic+0x82>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <xQueueGenericCreateStatic+0x84>
 8002866:	2300      	movs	r3, #0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	61fb      	str	r3, [r7, #28]
}
 800287e:	bf00      	nop
 8002880:	e7fe      	b.n	8002880 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002882:	2350      	movs	r3, #80	; 0x50
 8002884:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2b50      	cmp	r3, #80	; 0x50
 800288a:	d00a      	beq.n	80028a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800288c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002890:	f383 8811 	msr	BASEPRI, r3
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	61bb      	str	r3, [r7, #24]
}
 800289e:	bf00      	nop
 80028a0:	e7fe      	b.n	80028a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80028a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80028a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00d      	beq.n	80028ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	4613      	mov	r3, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f805 	bl	80028d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3730      	adds	r7, #48	; 0x30
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d103      	bne.n	80028f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e002      	b.n	80028f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002902:	2101      	movs	r1, #1
 8002904:	69b8      	ldr	r0, [r7, #24]
 8002906:	f7ff ff05 	bl	8002714 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	78fa      	ldrb	r2, [r7, #3]
 800290e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08e      	sub	sp, #56	; 0x38
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800292a:	2300      	movs	r3, #0
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10a      	bne.n	800294e <xQueueGenericSend+0x32>
	__asm volatile
 8002938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293c:	f383 8811 	msr	BASEPRI, r3
 8002940:	f3bf 8f6f 	isb	sy
 8002944:	f3bf 8f4f 	dsb	sy
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800294a:	bf00      	nop
 800294c:	e7fe      	b.n	800294c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <xQueueGenericSend+0x40>
 8002954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <xQueueGenericSend+0x44>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <xQueueGenericSend+0x46>
 8002960:	2300      	movs	r3, #0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10a      	bne.n	800297c <xQueueGenericSend+0x60>
	__asm volatile
 8002966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296a:	f383 8811 	msr	BASEPRI, r3
 800296e:	f3bf 8f6f 	isb	sy
 8002972:	f3bf 8f4f 	dsb	sy
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002978:	bf00      	nop
 800297a:	e7fe      	b.n	800297a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d103      	bne.n	800298a <xQueueGenericSend+0x6e>
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <xQueueGenericSend+0x72>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <xQueueGenericSend+0x74>
 800298e:	2300      	movs	r3, #0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <xQueueGenericSend+0x8e>
	__asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	623b      	str	r3, [r7, #32]
}
 80029a6:	bf00      	nop
 80029a8:	e7fe      	b.n	80029a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029aa:	f001 f9bd 	bl	8003d28 <xTaskGetSchedulerState>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <xQueueGenericSend+0x9e>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <xQueueGenericSend+0xa2>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <xQueueGenericSend+0xa4>
 80029be:	2300      	movs	r3, #0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <xQueueGenericSend+0xbe>
	__asm volatile
 80029c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c8:	f383 8811 	msr	BASEPRI, r3
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	61fb      	str	r3, [r7, #28]
}
 80029d6:	bf00      	nop
 80029d8:	e7fe      	b.n	80029d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029da:	f001 ff03 	bl	80047e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d302      	bcc.n	80029f0 <xQueueGenericSend+0xd4>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d129      	bne.n	8002a44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	68b9      	ldr	r1, [r7, #8]
 80029f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029f6:	f000 fa0b 	bl	8002e10 <prvCopyDataToQueue>
 80029fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d010      	beq.n	8002a26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a06:	3324      	adds	r3, #36	; 0x24
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 ffcf 	bl	80039ac <xTaskRemoveFromEventList>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a14:	4b3f      	ldr	r3, [pc, #252]	; (8002b14 <xQueueGenericSend+0x1f8>)
 8002a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	e00a      	b.n	8002a3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d007      	beq.n	8002a3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a2c:	4b39      	ldr	r3, [pc, #228]	; (8002b14 <xQueueGenericSend+0x1f8>)
 8002a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a3c:	f001 ff02 	bl	8004844 <vPortExitCritical>
				return pdPASS;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e063      	b.n	8002b0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d103      	bne.n	8002a52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a4a:	f001 fefb 	bl	8004844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	e05c      	b.n	8002b0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d106      	bne.n	8002a66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f001 f809 	bl	8003a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a62:	2301      	movs	r3, #1
 8002a64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a66:	f001 feed 	bl	8004844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a6a:	f000 fd7b 	bl	8003564 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a6e:	f001 feb9 	bl	80047e4 <vPortEnterCritical>
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a78:	b25b      	sxtb	r3, r3
 8002a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a7e:	d103      	bne.n	8002a88 <xQueueGenericSend+0x16c>
 8002a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a8e:	b25b      	sxtb	r3, r3
 8002a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a94:	d103      	bne.n	8002a9e <xQueueGenericSend+0x182>
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a9e:	f001 fed1 	bl	8004844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002aa2:	1d3a      	adds	r2, r7, #4
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fff8 	bl	8003aa0 <xTaskCheckForTimeOut>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d124      	bne.n	8002b00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ab8:	f000 faa2 	bl	8003000 <prvIsQueueFull>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d018      	beq.n	8002af4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	3310      	adds	r3, #16
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4611      	mov	r1, r2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 ff1e 	bl	800390c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ad2:	f000 fa2d 	bl	8002f30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ad6:	f000 fd53 	bl	8003580 <xTaskResumeAll>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f47f af7c 	bne.w	80029da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <xQueueGenericSend+0x1f8>)
 8002ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	e772      	b.n	80029da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002af6:	f000 fa1b 	bl	8002f30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002afa:	f000 fd41 	bl	8003580 <xTaskResumeAll>
 8002afe:	e76c      	b.n	80029da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b02:	f000 fa15 	bl	8002f30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b06:	f000 fd3b 	bl	8003580 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3738      	adds	r7, #56	; 0x38
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	e000ed04 	.word	0xe000ed04

08002b18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b090      	sub	sp, #64	; 0x40
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
 8002b24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10a      	bne.n	8002b46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b34:	f383 8811 	msr	BASEPRI, r3
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b42:	bf00      	nop
 8002b44:	e7fe      	b.n	8002b44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d103      	bne.n	8002b54 <xQueueGenericSendFromISR+0x3c>
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <xQueueGenericSendFromISR+0x40>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <xQueueGenericSendFromISR+0x42>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b62:	f383 8811 	msr	BASEPRI, r3
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b70:	bf00      	nop
 8002b72:	e7fe      	b.n	8002b72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d103      	bne.n	8002b82 <xQueueGenericSendFromISR+0x6a>
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <xQueueGenericSendFromISR+0x6e>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <xQueueGenericSendFromISR+0x70>
 8002b86:	2300      	movs	r3, #0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	623b      	str	r3, [r7, #32]
}
 8002b9e:	bf00      	nop
 8002ba0:	e7fe      	b.n	8002ba0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ba2:	f001 ff01 	bl	80049a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ba6:	f3ef 8211 	mrs	r2, BASEPRI
 8002baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bae:	f383 8811 	msr	BASEPRI, r3
 8002bb2:	f3bf 8f6f 	isb	sy
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	61fa      	str	r2, [r7, #28]
 8002bbc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bc0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <xQueueGenericSendFromISR+0xbc>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d12f      	bne.n	8002c34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002bea:	f000 f911 	bl	8002e10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002bee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002bf2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bf6:	d112      	bne.n	8002c1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d016      	beq.n	8002c2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c02:	3324      	adds	r3, #36	; 0x24
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fed1 	bl	80039ac <xTaskRemoveFromEventList>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00e      	beq.n	8002c2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e007      	b.n	8002c2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c22:	3301      	adds	r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	b25a      	sxtb	r2, r3
 8002c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002c32:	e001      	b.n	8002c38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3740      	adds	r7, #64	; 0x40
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08c      	sub	sp, #48	; 0x30
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <xQueueReceive+0x30>
	__asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	623b      	str	r3, [r7, #32]
}
 8002c7c:	bf00      	nop
 8002c7e:	e7fe      	b.n	8002c7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d103      	bne.n	8002c8e <xQueueReceive+0x3e>
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <xQueueReceive+0x42>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <xQueueReceive+0x44>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <xQueueReceive+0x5e>
	__asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	61fb      	str	r3, [r7, #28]
}
 8002caa:	bf00      	nop
 8002cac:	e7fe      	b.n	8002cac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cae:	f001 f83b 	bl	8003d28 <xTaskGetSchedulerState>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <xQueueReceive+0x6e>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <xQueueReceive+0x72>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <xQueueReceive+0x74>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10a      	bne.n	8002cde <xQueueReceive+0x8e>
	__asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	61bb      	str	r3, [r7, #24]
}
 8002cda:	bf00      	nop
 8002cdc:	e7fe      	b.n	8002cdc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cde:	f001 fd81 	bl	80047e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d01f      	beq.n	8002d2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cf2:	f000 f8f7 	bl	8002ee4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	1e5a      	subs	r2, r3, #1
 8002cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00f      	beq.n	8002d26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	3310      	adds	r3, #16
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fe4e 	bl	80039ac <xTaskRemoveFromEventList>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d007      	beq.n	8002d26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d16:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <xQueueReceive+0x1bc>)
 8002d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d26:	f001 fd8d 	bl	8004844 <vPortExitCritical>
				return pdPASS;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e069      	b.n	8002e02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d103      	bne.n	8002d3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d34:	f001 fd86 	bl	8004844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e062      	b.n	8002e02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d42:	f107 0310 	add.w	r3, r7, #16
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fe94 	bl	8003a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d50:	f001 fd78 	bl	8004844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d54:	f000 fc06 	bl	8003564 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d58:	f001 fd44 	bl	80047e4 <vPortEnterCritical>
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d62:	b25b      	sxtb	r3, r3
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d68:	d103      	bne.n	8002d72 <xQueueReceive+0x122>
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d78:	b25b      	sxtb	r3, r3
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d7e:	d103      	bne.n	8002d88 <xQueueReceive+0x138>
 8002d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d88:	f001 fd5c 	bl	8004844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d8c:	1d3a      	adds	r2, r7, #4
 8002d8e:	f107 0310 	add.w	r3, r7, #16
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fe83 	bl	8003aa0 <xTaskCheckForTimeOut>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d123      	bne.n	8002de8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002da2:	f000 f917 	bl	8002fd4 <prvIsQueueEmpty>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d017      	beq.n	8002ddc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	3324      	adds	r3, #36	; 0x24
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fda9 	bl	800390c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dbc:	f000 f8b8 	bl	8002f30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002dc0:	f000 fbde 	bl	8003580 <xTaskResumeAll>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d189      	bne.n	8002cde <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <xQueueReceive+0x1bc>)
 8002dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	e780      	b.n	8002cde <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dde:	f000 f8a7 	bl	8002f30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002de2:	f000 fbcd 	bl	8003580 <xTaskResumeAll>
 8002de6:	e77a      	b.n	8002cde <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dea:	f000 f8a1 	bl	8002f30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dee:	f000 fbc7 	bl	8003580 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df4:	f000 f8ee 	bl	8002fd4 <prvIsQueueEmpty>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f43f af6f 	beq.w	8002cde <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3730      	adds	r7, #48	; 0x30
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	e000ed04 	.word	0xe000ed04

08002e10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10d      	bne.n	8002e4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d14d      	bne.n	8002ed2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 ff92 	bl	8003d64 <xTaskPriorityDisinherit>
 8002e40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	e043      	b.n	8002ed2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d119      	bne.n	8002e84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6858      	ldr	r0, [r3, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	f001 fff8 	bl	8004e50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	441a      	add	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d32b      	bcc.n	8002ed2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	e026      	b.n	8002ed2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	68d8      	ldr	r0, [r3, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	f001 ffde 	bl	8004e50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	425b      	negs	r3, r3
 8002e9e:	441a      	add	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d207      	bcs.n	8002ec0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	425b      	negs	r3, r3
 8002eba:	441a      	add	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d105      	bne.n	8002ed2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002eda:	697b      	ldr	r3, [r7, #20]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d018      	beq.n	8002f28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	441a      	add	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d303      	bcc.n	8002f18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68d9      	ldr	r1, [r3, #12]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	461a      	mov	r2, r3
 8002f22:	6838      	ldr	r0, [r7, #0]
 8002f24:	f001 ff94 	bl	8004e50 <memcpy>
	}
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f38:	f001 fc54 	bl	80047e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f44:	e011      	b.n	8002f6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d012      	beq.n	8002f74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3324      	adds	r3, #36	; 0x24
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fd2a 	bl	80039ac <xTaskRemoveFromEventList>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f5e:	f000 fe01 	bl	8003b64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	dce9      	bgt.n	8002f46 <prvUnlockQueue+0x16>
 8002f72:	e000      	b.n	8002f76 <prvUnlockQueue+0x46>
					break;
 8002f74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	22ff      	movs	r2, #255	; 0xff
 8002f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f7e:	f001 fc61 	bl	8004844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f82:	f001 fc2f 	bl	80047e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f8e:	e011      	b.n	8002fb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d012      	beq.n	8002fbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3310      	adds	r3, #16
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fd05 	bl	80039ac <xTaskRemoveFromEventList>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002fa8:	f000 fddc 	bl	8003b64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002fac:	7bbb      	ldrb	r3, [r7, #14]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	dce9      	bgt.n	8002f90 <prvUnlockQueue+0x60>
 8002fbc:	e000      	b.n	8002fc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002fbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	22ff      	movs	r2, #255	; 0xff
 8002fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002fc8:	f001 fc3c 	bl	8004844 <vPortExitCritical>
}
 8002fcc:	bf00      	nop
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fdc:	f001 fc02 	bl	80047e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d102      	bne.n	8002fee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e001      	b.n	8002ff2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ff2:	f001 fc27 	bl	8004844 <vPortExitCritical>

	return xReturn;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003008:	f001 fbec 	bl	80047e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	429a      	cmp	r2, r3
 8003016:	d102      	bne.n	800301e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003018:	2301      	movs	r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	e001      	b.n	8003022 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003022:	f001 fc0f 	bl	8004844 <vPortExitCritical>

	return xReturn;
 8003026:	68fb      	ldr	r3, [r7, #12]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	e014      	b.n	800306a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003040:	4a0f      	ldr	r2, [pc, #60]	; (8003080 <vQueueAddToRegistry+0x50>)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10b      	bne.n	8003064 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800304c:	490c      	ldr	r1, [pc, #48]	; (8003080 <vQueueAddToRegistry+0x50>)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <vQueueAddToRegistry+0x50>)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4413      	add	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003062:	e006      	b.n	8003072 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3301      	adds	r3, #1
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b07      	cmp	r3, #7
 800306e:	d9e7      	bls.n	8003040 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	240007ac 	.word	0x240007ac

08003084 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003094:	f001 fba6 	bl	80047e4 <vPortEnterCritical>
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800309e:	b25b      	sxtb	r3, r3
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030a4:	d103      	bne.n	80030ae <vQueueWaitForMessageRestricted+0x2a>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030b4:	b25b      	sxtb	r3, r3
 80030b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ba:	d103      	bne.n	80030c4 <vQueueWaitForMessageRestricted+0x40>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030c4:	f001 fbbe 	bl	8004844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	3324      	adds	r3, #36	; 0x24
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fc3b 	bl	8003954 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80030de:	6978      	ldr	r0, [r7, #20]
 80030e0:	f7ff ff26 	bl	8002f30 <prvUnlockQueue>
	}
 80030e4:	bf00      	nop
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08e      	sub	sp, #56	; 0x38
 80030f0:	af04      	add	r7, sp, #16
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80030fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10a      	bne.n	8003116 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
 8003110:	623b      	str	r3, [r7, #32]
}
 8003112:	bf00      	nop
 8003114:	e7fe      	b.n	8003114 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <xTaskCreateStatic+0x46>
	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	61fb      	str	r3, [r7, #28]
}
 800312e:	bf00      	nop
 8003130:	e7fe      	b.n	8003130 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003132:	235c      	movs	r3, #92	; 0x5c
 8003134:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b5c      	cmp	r3, #92	; 0x5c
 800313a:	d00a      	beq.n	8003152 <xTaskCreateStatic+0x66>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	61bb      	str	r3, [r7, #24]
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003152:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01e      	beq.n	8003198 <xTaskCreateStatic+0xac>
 800315a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01b      	beq.n	8003198 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003168:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	2202      	movs	r2, #2
 800316e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003172:	2300      	movs	r3, #0
 8003174:	9303      	str	r3, [sp, #12]
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	9302      	str	r3, [sp, #8]
 800317a:	f107 0314 	add.w	r3, r7, #20
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f850 	bl	8003230 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003192:	f000 f8dd 	bl	8003350 <prvAddNewTaskToReadyList>
 8003196:	e001      	b.n	800319c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800319c:	697b      	ldr	r3, [r7, #20]
	}
 800319e:	4618      	mov	r0, r3
 80031a0:	3728      	adds	r7, #40	; 0x28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b08c      	sub	sp, #48	; 0x30
 80031aa:	af04      	add	r7, sp, #16
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	4613      	mov	r3, r2
 80031b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f001 fc34 	bl	8004a28 <pvPortMalloc>
 80031c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00e      	beq.n	80031e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80031c8:	205c      	movs	r0, #92	; 0x5c
 80031ca:	f001 fc2d 	bl	8004a28 <pvPortMalloc>
 80031ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
 80031dc:	e005      	b.n	80031ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031de:	6978      	ldr	r0, [r7, #20]
 80031e0:	f001 fcee 	bl	8004bc0 <vPortFree>
 80031e4:	e001      	b.n	80031ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d017      	beq.n	8003220 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80031f8:	88fa      	ldrh	r2, [r7, #6]
 80031fa:	2300      	movs	r3, #0
 80031fc:	9303      	str	r3, [sp, #12]
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	9302      	str	r3, [sp, #8]
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	9301      	str	r3, [sp, #4]
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f80e 	bl	8003230 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003214:	69f8      	ldr	r0, [r7, #28]
 8003216:	f000 f89b 	bl	8003350 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800321a:	2301      	movs	r3, #1
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	e002      	b.n	8003226 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003224:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003226:	69bb      	ldr	r3, [r7, #24]
	}
 8003228:	4618      	mov	r0, r3
 800322a:	3720      	adds	r7, #32
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	461a      	mov	r2, r3
 8003248:	21a5      	movs	r1, #165	; 0xa5
 800324a:	f001 fe0f 	bl	8004e6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003258:	440b      	add	r3, r1
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	f023 0307 	bic.w	r3, r3, #7
 8003266:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	617b      	str	r3, [r7, #20]
}
 8003284:	bf00      	nop
 8003286:	e7fe      	b.n	8003286 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d01f      	beq.n	80032ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	e012      	b.n	80032ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	4413      	add	r3, r2
 800329a:	7819      	ldrb	r1, [r3, #0]
 800329c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	4413      	add	r3, r2
 80032a2:	3334      	adds	r3, #52	; 0x34
 80032a4:	460a      	mov	r2, r1
 80032a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	4413      	add	r3, r2
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d006      	beq.n	80032c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	3301      	adds	r3, #1
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2b0f      	cmp	r3, #15
 80032be:	d9e9      	bls.n	8003294 <prvInitialiseNewTask+0x64>
 80032c0:	e000      	b.n	80032c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80032c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032cc:	e003      	b.n	80032d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d8:	2b37      	cmp	r3, #55	; 0x37
 80032da:	d901      	bls.n	80032e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032dc:	2337      	movs	r3, #55	; 0x37
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	2200      	movs	r2, #0
 80032f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	3304      	adds	r3, #4
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff f978 	bl	80025ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fe:	3318      	adds	r3, #24
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff f973 	bl	80025ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800330a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003314:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800331a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331e:	2200      	movs	r2, #0
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	68f9      	ldr	r1, [r7, #12]
 800332e:	69b8      	ldr	r0, [r7, #24]
 8003330:	f001 f928 	bl	8004584 <pxPortInitialiseStack>
 8003334:	4602      	mov	r2, r0
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003346:	bf00      	nop
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003358:	f001 fa44 	bl	80047e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800335c:	4b2d      	ldr	r3, [pc, #180]	; (8003414 <prvAddNewTaskToReadyList+0xc4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	4a2c      	ldr	r2, [pc, #176]	; (8003414 <prvAddNewTaskToReadyList+0xc4>)
 8003364:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003366:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <prvAddNewTaskToReadyList+0xc8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800336e:	4a2a      	ldr	r2, [pc, #168]	; (8003418 <prvAddNewTaskToReadyList+0xc8>)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003374:	4b27      	ldr	r3, [pc, #156]	; (8003414 <prvAddNewTaskToReadyList+0xc4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d110      	bne.n	800339e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800337c:	f000 fc16 	bl	8003bac <prvInitialiseTaskLists>
 8003380:	e00d      	b.n	800339e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003382:	4b26      	ldr	r3, [pc, #152]	; (800341c <prvAddNewTaskToReadyList+0xcc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800338a:	4b23      	ldr	r3, [pc, #140]	; (8003418 <prvAddNewTaskToReadyList+0xc8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	429a      	cmp	r2, r3
 8003396:	d802      	bhi.n	800339e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003398:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <prvAddNewTaskToReadyList+0xc8>)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <prvAddNewTaskToReadyList+0xd0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3301      	adds	r3, #1
 80033a4:	4a1e      	ldr	r2, [pc, #120]	; (8003420 <prvAddNewTaskToReadyList+0xd0>)
 80033a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033a8:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <prvAddNewTaskToReadyList+0xd0>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b4:	4b1b      	ldr	r3, [pc, #108]	; (8003424 <prvAddNewTaskToReadyList+0xd4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d903      	bls.n	80033c4 <prvAddNewTaskToReadyList+0x74>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	4a18      	ldr	r2, [pc, #96]	; (8003424 <prvAddNewTaskToReadyList+0xd4>)
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4a15      	ldr	r2, [pc, #84]	; (8003428 <prvAddNewTaskToReadyList+0xd8>)
 80033d2:	441a      	add	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3304      	adds	r3, #4
 80033d8:	4619      	mov	r1, r3
 80033da:	4610      	mov	r0, r2
 80033dc:	f7ff f913 	bl	8002606 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033e0:	f001 fa30 	bl	8004844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80033e4:	4b0d      	ldr	r3, [pc, #52]	; (800341c <prvAddNewTaskToReadyList+0xcc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <prvAddNewTaskToReadyList+0xc8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d207      	bcs.n	800340a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033fa:	4b0c      	ldr	r3, [pc, #48]	; (800342c <prvAddNewTaskToReadyList+0xdc>)
 80033fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	24000cc0 	.word	0x24000cc0
 8003418:	240007ec 	.word	0x240007ec
 800341c:	24000ccc 	.word	0x24000ccc
 8003420:	24000cdc 	.word	0x24000cdc
 8003424:	24000cc8 	.word	0x24000cc8
 8003428:	240007f0 	.word	0x240007f0
 800342c:	e000ed04 	.word	0xe000ed04

08003430 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003438:	2300      	movs	r3, #0
 800343a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d017      	beq.n	8003472 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003442:	4b13      	ldr	r3, [pc, #76]	; (8003490 <vTaskDelay+0x60>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <vTaskDelay+0x30>
	__asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	60bb      	str	r3, [r7, #8]
}
 800345c:	bf00      	nop
 800345e:	e7fe      	b.n	800345e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003460:	f000 f880 	bl	8003564 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003464:	2100      	movs	r1, #0
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fcea 	bl	8003e40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800346c:	f000 f888 	bl	8003580 <xTaskResumeAll>
 8003470:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d107      	bne.n	8003488 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <vTaskDelay+0x64>)
 800347a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	24000ce8 	.word	0x24000ce8
 8003494:	e000ed04 	.word	0xe000ed04

08003498 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08a      	sub	sp, #40	; 0x28
 800349c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034a2:	2300      	movs	r3, #0
 80034a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034a6:	463a      	mov	r2, r7
 80034a8:	1d39      	adds	r1, r7, #4
 80034aa:	f107 0308 	add.w	r3, r7, #8
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff f848 	bl	8002544 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034b4:	6839      	ldr	r1, [r7, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	9202      	str	r2, [sp, #8]
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	2300      	movs	r3, #0
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	2300      	movs	r3, #0
 80034c4:	460a      	mov	r2, r1
 80034c6:	4921      	ldr	r1, [pc, #132]	; (800354c <vTaskStartScheduler+0xb4>)
 80034c8:	4821      	ldr	r0, [pc, #132]	; (8003550 <vTaskStartScheduler+0xb8>)
 80034ca:	f7ff fe0f 	bl	80030ec <xTaskCreateStatic>
 80034ce:	4603      	mov	r3, r0
 80034d0:	4a20      	ldr	r2, [pc, #128]	; (8003554 <vTaskStartScheduler+0xbc>)
 80034d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034d4:	4b1f      	ldr	r3, [pc, #124]	; (8003554 <vTaskStartScheduler+0xbc>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034dc:	2301      	movs	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e001      	b.n	80034e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d102      	bne.n	80034f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80034ec:	f000 fcfc 	bl	8003ee8 <xTimerCreateTimerTask>
 80034f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d116      	bne.n	8003526 <vTaskStartScheduler+0x8e>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	613b      	str	r3, [r7, #16]
}
 800350a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <vTaskStartScheduler+0xc0>)
 800350e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003512:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003514:	4b11      	ldr	r3, [pc, #68]	; (800355c <vTaskStartScheduler+0xc4>)
 8003516:	2201      	movs	r2, #1
 8003518:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800351a:	4b11      	ldr	r3, [pc, #68]	; (8003560 <vTaskStartScheduler+0xc8>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003520:	f001 f8be 	bl	80046a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003524:	e00e      	b.n	8003544 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800352c:	d10a      	bne.n	8003544 <vTaskStartScheduler+0xac>
	__asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	60fb      	str	r3, [r7, #12]
}
 8003540:	bf00      	nop
 8003542:	e7fe      	b.n	8003542 <vTaskStartScheduler+0xaa>
}
 8003544:	bf00      	nop
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	080058b0 	.word	0x080058b0
 8003550:	08003b7d 	.word	0x08003b7d
 8003554:	24000ce4 	.word	0x24000ce4
 8003558:	24000ce0 	.word	0x24000ce0
 800355c:	24000ccc 	.word	0x24000ccc
 8003560:	24000cc4 	.word	0x24000cc4

08003564 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003568:	4b04      	ldr	r3, [pc, #16]	; (800357c <vTaskSuspendAll+0x18>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3301      	adds	r3, #1
 800356e:	4a03      	ldr	r2, [pc, #12]	; (800357c <vTaskSuspendAll+0x18>)
 8003570:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	24000ce8 	.word	0x24000ce8

08003580 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800358e:	4b42      	ldr	r3, [pc, #264]	; (8003698 <xTaskResumeAll+0x118>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <xTaskResumeAll+0x2c>
	__asm volatile
 8003596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	603b      	str	r3, [r7, #0]
}
 80035a8:	bf00      	nop
 80035aa:	e7fe      	b.n	80035aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035ac:	f001 f91a 	bl	80047e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035b0:	4b39      	ldr	r3, [pc, #228]	; (8003698 <xTaskResumeAll+0x118>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	4a38      	ldr	r2, [pc, #224]	; (8003698 <xTaskResumeAll+0x118>)
 80035b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ba:	4b37      	ldr	r3, [pc, #220]	; (8003698 <xTaskResumeAll+0x118>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d162      	bne.n	8003688 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035c2:	4b36      	ldr	r3, [pc, #216]	; (800369c <xTaskResumeAll+0x11c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d05e      	beq.n	8003688 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035ca:	e02f      	b.n	800362c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035cc:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <xTaskResumeAll+0x120>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	3318      	adds	r3, #24
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff f871 	bl	80026c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	3304      	adds	r3, #4
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff f86c 	bl	80026c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ec:	4b2d      	ldr	r3, [pc, #180]	; (80036a4 <xTaskResumeAll+0x124>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d903      	bls.n	80035fc <xTaskResumeAll+0x7c>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	4a2a      	ldr	r2, [pc, #168]	; (80036a4 <xTaskResumeAll+0x124>)
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4a27      	ldr	r2, [pc, #156]	; (80036a8 <xTaskResumeAll+0x128>)
 800360a:	441a      	add	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3304      	adds	r3, #4
 8003610:	4619      	mov	r1, r3
 8003612:	4610      	mov	r0, r2
 8003614:	f7fe fff7 	bl	8002606 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361c:	4b23      	ldr	r3, [pc, #140]	; (80036ac <xTaskResumeAll+0x12c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	429a      	cmp	r2, r3
 8003624:	d302      	bcc.n	800362c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003626:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <xTaskResumeAll+0x130>)
 8003628:	2201      	movs	r2, #1
 800362a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800362c:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <xTaskResumeAll+0x120>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1cb      	bne.n	80035cc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800363a:	f000 fb55 	bl	8003ce8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800363e:	4b1d      	ldr	r3, [pc, #116]	; (80036b4 <xTaskResumeAll+0x134>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d010      	beq.n	800366c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800364a:	f000 f847 	bl	80036dc <xTaskIncrementTick>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003654:	4b16      	ldr	r3, [pc, #88]	; (80036b0 <xTaskResumeAll+0x130>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3b01      	subs	r3, #1
 800365e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f1      	bne.n	800364a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003666:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <xTaskResumeAll+0x134>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800366c:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <xTaskResumeAll+0x130>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d009      	beq.n	8003688 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003674:	2301      	movs	r3, #1
 8003676:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003678:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <xTaskResumeAll+0x138>)
 800367a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003688:	f001 f8dc 	bl	8004844 <vPortExitCritical>

	return xAlreadyYielded;
 800368c:	68bb      	ldr	r3, [r7, #8]
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	24000ce8 	.word	0x24000ce8
 800369c:	24000cc0 	.word	0x24000cc0
 80036a0:	24000c80 	.word	0x24000c80
 80036a4:	24000cc8 	.word	0x24000cc8
 80036a8:	240007f0 	.word	0x240007f0
 80036ac:	240007ec 	.word	0x240007ec
 80036b0:	24000cd4 	.word	0x24000cd4
 80036b4:	24000cd0 	.word	0x24000cd0
 80036b8:	e000ed04 	.word	0xe000ed04

080036bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <xTaskGetTickCount+0x1c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036c8:	687b      	ldr	r3, [r7, #4]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	24000cc4 	.word	0x24000cc4

080036dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036e6:	4b4f      	ldr	r3, [pc, #316]	; (8003824 <xTaskIncrementTick+0x148>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f040 808f 	bne.w	800380e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036f0:	4b4d      	ldr	r3, [pc, #308]	; (8003828 <xTaskIncrementTick+0x14c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3301      	adds	r3, #1
 80036f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036f8:	4a4b      	ldr	r2, [pc, #300]	; (8003828 <xTaskIncrementTick+0x14c>)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d120      	bne.n	8003746 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003704:	4b49      	ldr	r3, [pc, #292]	; (800382c <xTaskIncrementTick+0x150>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <xTaskIncrementTick+0x48>
	__asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	603b      	str	r3, [r7, #0]
}
 8003720:	bf00      	nop
 8003722:	e7fe      	b.n	8003722 <xTaskIncrementTick+0x46>
 8003724:	4b41      	ldr	r3, [pc, #260]	; (800382c <xTaskIncrementTick+0x150>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	4b41      	ldr	r3, [pc, #260]	; (8003830 <xTaskIncrementTick+0x154>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a3f      	ldr	r2, [pc, #252]	; (800382c <xTaskIncrementTick+0x150>)
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4a3f      	ldr	r2, [pc, #252]	; (8003830 <xTaskIncrementTick+0x154>)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6013      	str	r3, [r2, #0]
 8003738:	4b3e      	ldr	r3, [pc, #248]	; (8003834 <xTaskIncrementTick+0x158>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3301      	adds	r3, #1
 800373e:	4a3d      	ldr	r2, [pc, #244]	; (8003834 <xTaskIncrementTick+0x158>)
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	f000 fad1 	bl	8003ce8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003746:	4b3c      	ldr	r3, [pc, #240]	; (8003838 <xTaskIncrementTick+0x15c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	429a      	cmp	r2, r3
 800374e:	d349      	bcc.n	80037e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003750:	4b36      	ldr	r3, [pc, #216]	; (800382c <xTaskIncrementTick+0x150>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d104      	bne.n	8003764 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800375a:	4b37      	ldr	r3, [pc, #220]	; (8003838 <xTaskIncrementTick+0x15c>)
 800375c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003760:	601a      	str	r2, [r3, #0]
					break;
 8003762:	e03f      	b.n	80037e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003764:	4b31      	ldr	r3, [pc, #196]	; (800382c <xTaskIncrementTick+0x150>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	429a      	cmp	r2, r3
 800377a:	d203      	bcs.n	8003784 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800377c:	4a2e      	ldr	r2, [pc, #184]	; (8003838 <xTaskIncrementTick+0x15c>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003782:	e02f      	b.n	80037e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	3304      	adds	r3, #4
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe ff99 	bl	80026c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	3318      	adds	r3, #24
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe ff90 	bl	80026c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a4:	4b25      	ldr	r3, [pc, #148]	; (800383c <xTaskIncrementTick+0x160>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d903      	bls.n	80037b4 <xTaskIncrementTick+0xd8>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b0:	4a22      	ldr	r2, [pc, #136]	; (800383c <xTaskIncrementTick+0x160>)
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4a1f      	ldr	r2, [pc, #124]	; (8003840 <xTaskIncrementTick+0x164>)
 80037c2:	441a      	add	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f7fe ff1b 	bl	8002606 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <xTaskIncrementTick+0x168>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	429a      	cmp	r2, r3
 80037dc:	d3b8      	bcc.n	8003750 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80037de:	2301      	movs	r3, #1
 80037e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037e2:	e7b5      	b.n	8003750 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037e4:	4b17      	ldr	r3, [pc, #92]	; (8003844 <xTaskIncrementTick+0x168>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ea:	4915      	ldr	r1, [pc, #84]	; (8003840 <xTaskIncrementTick+0x164>)
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d901      	bls.n	8003800 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80037fc:	2301      	movs	r3, #1
 80037fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003800:	4b11      	ldr	r3, [pc, #68]	; (8003848 <xTaskIncrementTick+0x16c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003808:	2301      	movs	r3, #1
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	e004      	b.n	8003818 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800380e:	4b0f      	ldr	r3, [pc, #60]	; (800384c <xTaskIncrementTick+0x170>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3301      	adds	r3, #1
 8003814:	4a0d      	ldr	r2, [pc, #52]	; (800384c <xTaskIncrementTick+0x170>)
 8003816:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003818:	697b      	ldr	r3, [r7, #20]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	24000ce8 	.word	0x24000ce8
 8003828:	24000cc4 	.word	0x24000cc4
 800382c:	24000c78 	.word	0x24000c78
 8003830:	24000c7c 	.word	0x24000c7c
 8003834:	24000cd8 	.word	0x24000cd8
 8003838:	24000ce0 	.word	0x24000ce0
 800383c:	24000cc8 	.word	0x24000cc8
 8003840:	240007f0 	.word	0x240007f0
 8003844:	240007ec 	.word	0x240007ec
 8003848:	24000cd4 	.word	0x24000cd4
 800384c:	24000cd0 	.word	0x24000cd0

08003850 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003856:	4b28      	ldr	r3, [pc, #160]	; (80038f8 <vTaskSwitchContext+0xa8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800385e:	4b27      	ldr	r3, [pc, #156]	; (80038fc <vTaskSwitchContext+0xac>)
 8003860:	2201      	movs	r2, #1
 8003862:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003864:	e041      	b.n	80038ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003866:	4b25      	ldr	r3, [pc, #148]	; (80038fc <vTaskSwitchContext+0xac>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800386c:	4b24      	ldr	r3, [pc, #144]	; (8003900 <vTaskSwitchContext+0xb0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	e010      	b.n	8003896 <vTaskSwitchContext+0x46>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10a      	bne.n	8003890 <vTaskSwitchContext+0x40>
	__asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	607b      	str	r3, [r7, #4]
}
 800388c:	bf00      	nop
 800388e:	e7fe      	b.n	800388e <vTaskSwitchContext+0x3e>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	3b01      	subs	r3, #1
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	491b      	ldr	r1, [pc, #108]	; (8003904 <vTaskSwitchContext+0xb4>)
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0e4      	beq.n	8003874 <vTaskSwitchContext+0x24>
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4a13      	ldr	r2, [pc, #76]	; (8003904 <vTaskSwitchContext+0xb4>)
 80038b6:	4413      	add	r3, r2
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	3308      	adds	r3, #8
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d104      	bne.n	80038da <vTaskSwitchContext+0x8a>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4a09      	ldr	r2, [pc, #36]	; (8003908 <vTaskSwitchContext+0xb8>)
 80038e2:	6013      	str	r3, [r2, #0]
 80038e4:	4a06      	ldr	r2, [pc, #24]	; (8003900 <vTaskSwitchContext+0xb0>)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6013      	str	r3, [r2, #0]
}
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	24000ce8 	.word	0x24000ce8
 80038fc:	24000cd4 	.word	0x24000cd4
 8003900:	24000cc8 	.word	0x24000cc8
 8003904:	240007f0 	.word	0x240007f0
 8003908:	240007ec 	.word	0x240007ec

0800390c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	60fb      	str	r3, [r7, #12]
}
 800392e:	bf00      	nop
 8003930:	e7fe      	b.n	8003930 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003932:	4b07      	ldr	r3, [pc, #28]	; (8003950 <vTaskPlaceOnEventList+0x44>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3318      	adds	r3, #24
 8003938:	4619      	mov	r1, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fe fe87 	bl	800264e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003940:	2101      	movs	r1, #1
 8003942:	6838      	ldr	r0, [r7, #0]
 8003944:	f000 fa7c 	bl	8003e40 <prvAddCurrentTaskToDelayedList>
}
 8003948:	bf00      	nop
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	240007ec 	.word	0x240007ec

08003954 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10a      	bne.n	800397c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	617b      	str	r3, [r7, #20]
}
 8003978:	bf00      	nop
 800397a:	e7fe      	b.n	800397a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3318      	adds	r3, #24
 8003982:	4619      	mov	r1, r3
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7fe fe3e 	bl	8002606 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003994:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	68b8      	ldr	r0, [r7, #8]
 800399a:	f000 fa51 	bl	8003e40 <prvAddCurrentTaskToDelayedList>
	}
 800399e:	bf00      	nop
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	240007ec 	.word	0x240007ec

080039ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	60fb      	str	r3, [r7, #12]
}
 80039d4:	bf00      	nop
 80039d6:	e7fe      	b.n	80039d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	3318      	adds	r3, #24
 80039dc:	4618      	mov	r0, r3
 80039de:	f7fe fe6f 	bl	80026c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039e2:	4b1e      	ldr	r3, [pc, #120]	; (8003a5c <xTaskRemoveFromEventList+0xb0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11d      	bne.n	8003a26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	3304      	adds	r3, #4
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fe66 	bl	80026c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <xTaskRemoveFromEventList+0xb4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d903      	bls.n	8003a08 <xTaskRemoveFromEventList+0x5c>
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	4a16      	ldr	r2, [pc, #88]	; (8003a60 <xTaskRemoveFromEventList+0xb4>)
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4a13      	ldr	r2, [pc, #76]	; (8003a64 <xTaskRemoveFromEventList+0xb8>)
 8003a16:	441a      	add	r2, r3
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f7fe fdf1 	bl	8002606 <vListInsertEnd>
 8003a24:	e005      	b.n	8003a32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	3318      	adds	r3, #24
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	480e      	ldr	r0, [pc, #56]	; (8003a68 <xTaskRemoveFromEventList+0xbc>)
 8003a2e:	f7fe fdea 	bl	8002606 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a36:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <xTaskRemoveFromEventList+0xc0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d905      	bls.n	8003a4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a40:	2301      	movs	r3, #1
 8003a42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a44:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <xTaskRemoveFromEventList+0xc4>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	e001      	b.n	8003a50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a50:	697b      	ldr	r3, [r7, #20]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	24000ce8 	.word	0x24000ce8
 8003a60:	24000cc8 	.word	0x24000cc8
 8003a64:	240007f0 	.word	0x240007f0
 8003a68:	24000c80 	.word	0x24000c80
 8003a6c:	240007ec 	.word	0x240007ec
 8003a70:	24000cd4 	.word	0x24000cd4

08003a74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <vTaskInternalSetTimeOutState+0x24>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a84:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <vTaskInternalSetTimeOutState+0x28>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	605a      	str	r2, [r3, #4]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	24000cd8 	.word	0x24000cd8
 8003a9c:	24000cc4 	.word	0x24000cc4

08003aa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10a      	bne.n	8003ac6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	613b      	str	r3, [r7, #16]
}
 8003ac2:	bf00      	nop
 8003ac4:	e7fe      	b.n	8003ac4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	60fb      	str	r3, [r7, #12]
}
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003ae2:	f000 fe7f 	bl	80047e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ae6:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <xTaskCheckForTimeOut+0xbc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003afe:	d102      	bne.n	8003b06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	e023      	b.n	8003b4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <xTaskCheckForTimeOut+0xc0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d007      	beq.n	8003b22 <xTaskCheckForTimeOut+0x82>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d302      	bcc.n	8003b22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	e015      	b.n	8003b4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d20b      	bcs.n	8003b44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	1ad2      	subs	r2, r2, r3
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7ff ff9b 	bl	8003a74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	e004      	b.n	8003b4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b4e:	f000 fe79 	bl	8004844 <vPortExitCritical>

	return xReturn;
 8003b52:	69fb      	ldr	r3, [r7, #28]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	24000cc4 	.word	0x24000cc4
 8003b60:	24000cd8 	.word	0x24000cd8

08003b64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <vTaskMissedYield+0x14>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
}
 8003b6e:	bf00      	nop
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	24000cd4 	.word	0x24000cd4

08003b7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b84:	f000 f852 	bl	8003c2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <prvIdleTask+0x28>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d9f9      	bls.n	8003b84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <prvIdleTask+0x2c>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ba0:	e7f0      	b.n	8003b84 <prvIdleTask+0x8>
 8003ba2:	bf00      	nop
 8003ba4:	240007f0 	.word	0x240007f0
 8003ba8:	e000ed04 	.word	0xe000ed04

08003bac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	e00c      	b.n	8003bd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <prvInitialiseTaskLists+0x60>)
 8003bc4:	4413      	add	r3, r2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fe fcf0 	bl	80025ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b37      	cmp	r3, #55	; 0x37
 8003bd6:	d9ef      	bls.n	8003bb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bd8:	480d      	ldr	r0, [pc, #52]	; (8003c10 <prvInitialiseTaskLists+0x64>)
 8003bda:	f7fe fce7 	bl	80025ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bde:	480d      	ldr	r0, [pc, #52]	; (8003c14 <prvInitialiseTaskLists+0x68>)
 8003be0:	f7fe fce4 	bl	80025ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003be4:	480c      	ldr	r0, [pc, #48]	; (8003c18 <prvInitialiseTaskLists+0x6c>)
 8003be6:	f7fe fce1 	bl	80025ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bea:	480c      	ldr	r0, [pc, #48]	; (8003c1c <prvInitialiseTaskLists+0x70>)
 8003bec:	f7fe fcde 	bl	80025ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bf0:	480b      	ldr	r0, [pc, #44]	; (8003c20 <prvInitialiseTaskLists+0x74>)
 8003bf2:	f7fe fcdb 	bl	80025ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <prvInitialiseTaskLists+0x78>)
 8003bf8:	4a05      	ldr	r2, [pc, #20]	; (8003c10 <prvInitialiseTaskLists+0x64>)
 8003bfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <prvInitialiseTaskLists+0x7c>)
 8003bfe:	4a05      	ldr	r2, [pc, #20]	; (8003c14 <prvInitialiseTaskLists+0x68>)
 8003c00:	601a      	str	r2, [r3, #0]
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	240007f0 	.word	0x240007f0
 8003c10:	24000c50 	.word	0x24000c50
 8003c14:	24000c64 	.word	0x24000c64
 8003c18:	24000c80 	.word	0x24000c80
 8003c1c:	24000c94 	.word	0x24000c94
 8003c20:	24000cac 	.word	0x24000cac
 8003c24:	24000c78 	.word	0x24000c78
 8003c28:	24000c7c 	.word	0x24000c7c

08003c2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c32:	e019      	b.n	8003c68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c34:	f000 fdd6 	bl	80047e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c38:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <prvCheckTasksWaitingTermination+0x50>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fe fd3b 	bl	80026c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <prvCheckTasksWaitingTermination+0x54>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	4a0b      	ldr	r2, [pc, #44]	; (8003c80 <prvCheckTasksWaitingTermination+0x54>)
 8003c52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <prvCheckTasksWaitingTermination+0x58>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	4a0a      	ldr	r2, [pc, #40]	; (8003c84 <prvCheckTasksWaitingTermination+0x58>)
 8003c5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c5e:	f000 fdf1 	bl	8004844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f810 	bl	8003c88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <prvCheckTasksWaitingTermination+0x58>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e1      	bne.n	8003c34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	24000c94 	.word	0x24000c94
 8003c80:	24000cc0 	.word	0x24000cc0
 8003c84:	24000ca8 	.word	0x24000ca8

08003c88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d108      	bne.n	8003cac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 ff8e 	bl	8004bc0 <vPortFree>
				vPortFree( pxTCB );
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 ff8b 	bl	8004bc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003caa:	e018      	b.n	8003cde <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d103      	bne.n	8003cbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 ff82 	bl	8004bc0 <vPortFree>
	}
 8003cbc:	e00f      	b.n	8003cde <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d00a      	beq.n	8003cde <prvDeleteTCB+0x56>
	__asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	60fb      	str	r3, [r7, #12]
}
 8003cda:	bf00      	nop
 8003cdc:	e7fe      	b.n	8003cdc <prvDeleteTCB+0x54>
	}
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cee:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <prvResetNextTaskUnblockTime+0x38>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d104      	bne.n	8003d02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <prvResetNextTaskUnblockTime+0x3c>)
 8003cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d00:	e008      	b.n	8003d14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d02:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <prvResetNextTaskUnblockTime+0x38>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <prvResetNextTaskUnblockTime+0x3c>)
 8003d12:	6013      	str	r3, [r2, #0]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	24000c78 	.word	0x24000c78
 8003d24:	24000ce0 	.word	0x24000ce0

08003d28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <xTaskGetSchedulerState+0x34>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d102      	bne.n	8003d3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d36:	2301      	movs	r3, #1
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	e008      	b.n	8003d4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d3c:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <xTaskGetSchedulerState+0x38>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d102      	bne.n	8003d4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d44:	2302      	movs	r3, #2
 8003d46:	607b      	str	r3, [r7, #4]
 8003d48:	e001      	b.n	8003d4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d4e:	687b      	ldr	r3, [r7, #4]
	}
 8003d50:	4618      	mov	r0, r3
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	24000ccc 	.word	0x24000ccc
 8003d60:	24000ce8 	.word	0x24000ce8

08003d64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d056      	beq.n	8003e28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d7a:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <xTaskPriorityDisinherit+0xd0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d00a      	beq.n	8003d9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	60fb      	str	r3, [r7, #12]
}
 8003d96:	bf00      	nop
 8003d98:	e7fe      	b.n	8003d98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	60bb      	str	r3, [r7, #8]
}
 8003db4:	bf00      	nop
 8003db6:	e7fe      	b.n	8003db6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbc:	1e5a      	subs	r2, r3, #1
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d02c      	beq.n	8003e28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d128      	bne.n	8003e28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fe fc70 	bl	80026c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <xTaskPriorityDisinherit+0xd4>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d903      	bls.n	8003e08 <xTaskPriorityDisinherit+0xa4>
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	4a0c      	ldr	r2, [pc, #48]	; (8003e38 <xTaskPriorityDisinherit+0xd4>)
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <xTaskPriorityDisinherit+0xd8>)
 8003e16:	441a      	add	r2, r3
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f7fe fbf1 	bl	8002606 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e24:	2301      	movs	r3, #1
 8003e26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e28:	697b      	ldr	r3, [r7, #20]
	}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	240007ec 	.word	0x240007ec
 8003e38:	24000cc8 	.word	0x24000cc8
 8003e3c:	240007f0 	.word	0x240007f0

08003e40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e4a:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e50:	4b20      	ldr	r3, [pc, #128]	; (8003ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe fc32 	bl	80026c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e62:	d10a      	bne.n	8003e7a <prvAddCurrentTaskToDelayedList+0x3a>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d007      	beq.n	8003e7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4619      	mov	r1, r3
 8003e72:	4819      	ldr	r0, [pc, #100]	; (8003ed8 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e74:	f7fe fbc7 	bl	8002606 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e78:	e026      	b.n	8003ec8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4413      	add	r3, r2
 8003e80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e82:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d209      	bcs.n	8003ea6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e92:	4b12      	ldr	r3, [pc, #72]	; (8003edc <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	f7fe fbd5 	bl	800264e <vListInsert>
}
 8003ea4:	e010      	b.n	8003ec8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ea6:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <prvAddCurrentTaskToDelayedList+0x94>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3304      	adds	r3, #4
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f7fe fbcb 	bl	800264e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d202      	bcs.n	8003ec8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ec2:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	6013      	str	r3, [r2, #0]
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	24000cc4 	.word	0x24000cc4
 8003ed4:	240007ec 	.word	0x240007ec
 8003ed8:	24000cac 	.word	0x24000cac
 8003edc:	24000c7c 	.word	0x24000c7c
 8003ee0:	24000c78 	.word	0x24000c78
 8003ee4:	24000ce0 	.word	0x24000ce0

08003ee8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08a      	sub	sp, #40	; 0x28
 8003eec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003ef2:	f000 fb07 	bl	8004504 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ef6:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <xTimerCreateTimerTask+0x80>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d021      	beq.n	8003f42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f06:	1d3a      	adds	r2, r7, #4
 8003f08:	f107 0108 	add.w	r1, r7, #8
 8003f0c:	f107 030c 	add.w	r3, r7, #12
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe fb31 	bl	8002578 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	9202      	str	r2, [sp, #8]
 8003f1e:	9301      	str	r3, [sp, #4]
 8003f20:	2302      	movs	r3, #2
 8003f22:	9300      	str	r3, [sp, #0]
 8003f24:	2300      	movs	r3, #0
 8003f26:	460a      	mov	r2, r1
 8003f28:	4910      	ldr	r1, [pc, #64]	; (8003f6c <xTimerCreateTimerTask+0x84>)
 8003f2a:	4811      	ldr	r0, [pc, #68]	; (8003f70 <xTimerCreateTimerTask+0x88>)
 8003f2c:	f7ff f8de 	bl	80030ec <xTaskCreateStatic>
 8003f30:	4603      	mov	r3, r0
 8003f32:	4a10      	ldr	r2, [pc, #64]	; (8003f74 <xTimerCreateTimerTask+0x8c>)
 8003f34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f36:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <xTimerCreateTimerTask+0x8c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	613b      	str	r3, [r7, #16]
}
 8003f5a:	bf00      	nop
 8003f5c:	e7fe      	b.n	8003f5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f5e:	697b      	ldr	r3, [r7, #20]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	24000d1c 	.word	0x24000d1c
 8003f6c:	080058b8 	.word	0x080058b8
 8003f70:	080040ad 	.word	0x080040ad
 8003f74:	24000d20 	.word	0x24000d20

08003f78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	; 0x28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10a      	bne.n	8003fa6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	623b      	str	r3, [r7, #32]
}
 8003fa2:	bf00      	nop
 8003fa4:	e7fe      	b.n	8003fa4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003fa6:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <xTimerGenericCommand+0x98>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d02a      	beq.n	8004004 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b05      	cmp	r3, #5
 8003fbe:	dc18      	bgt.n	8003ff2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003fc0:	f7ff feb2 	bl	8003d28 <xTaskGetSchedulerState>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d109      	bne.n	8003fde <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fca:	4b11      	ldr	r3, [pc, #68]	; (8004010 <xTimerGenericCommand+0x98>)
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	f107 0110 	add.w	r1, r7, #16
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd6:	f7fe fca1 	bl	800291c <xQueueGenericSend>
 8003fda:	6278      	str	r0, [r7, #36]	; 0x24
 8003fdc:	e012      	b.n	8004004 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <xTimerGenericCommand+0x98>)
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	f107 0110 	add.w	r1, r7, #16
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f7fe fc97 	bl	800291c <xQueueGenericSend>
 8003fee:	6278      	str	r0, [r7, #36]	; 0x24
 8003ff0:	e008      	b.n	8004004 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <xTimerGenericCommand+0x98>)
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	f107 0110 	add.w	r1, r7, #16
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	f7fe fd8b 	bl	8002b18 <xQueueGenericSendFromISR>
 8004002:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004006:	4618      	mov	r0, r3
 8004008:	3728      	adds	r7, #40	; 0x28
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	24000d1c 	.word	0x24000d1c

08004014 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af02      	add	r7, sp, #8
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800401e:	4b22      	ldr	r3, [pc, #136]	; (80040a8 <prvProcessExpiredTimer+0x94>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	3304      	adds	r3, #4
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe fb47 	bl	80026c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d022      	beq.n	8004086 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	699a      	ldr	r2, [r3, #24]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	18d1      	adds	r1, r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	6978      	ldr	r0, [r7, #20]
 800404e:	f000 f8d1 	bl	80041f4 <prvInsertTimerInActiveList>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01f      	beq.n	8004098 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004058:	2300      	movs	r3, #0
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	2300      	movs	r3, #0
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	2100      	movs	r1, #0
 8004062:	6978      	ldr	r0, [r7, #20]
 8004064:	f7ff ff88 	bl	8003f78 <xTimerGenericCommand>
 8004068:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d113      	bne.n	8004098 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	60fb      	str	r3, [r7, #12]
}
 8004082:	bf00      	nop
 8004084:	e7fe      	b.n	8004084 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	b2da      	uxtb	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	6978      	ldr	r0, [r7, #20]
 800409e:	4798      	blx	r3
}
 80040a0:	bf00      	nop
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	24000d14 	.word	0x24000d14

080040ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040b4:	f107 0308 	add.w	r3, r7, #8
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f857 	bl	800416c <prvGetNextExpireTime>
 80040be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4619      	mov	r1, r3
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f803 	bl	80040d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80040ca:	f000 f8d5 	bl	8004278 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040ce:	e7f1      	b.n	80040b4 <prvTimerTask+0x8>

080040d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040da:	f7ff fa43 	bl	8003564 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040de:	f107 0308 	add.w	r3, r7, #8
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f866 	bl	80041b4 <prvSampleTimeNow>
 80040e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d130      	bne.n	8004152 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <prvProcessTimerOrBlockTask+0x3c>
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d806      	bhi.n	800410c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040fe:	f7ff fa3f 	bl	8003580 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004102:	68f9      	ldr	r1, [r7, #12]
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ff85 	bl	8004014 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800410a:	e024      	b.n	8004156 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004112:	4b13      	ldr	r3, [pc, #76]	; (8004160 <prvProcessTimerOrBlockTask+0x90>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <prvProcessTimerOrBlockTask+0x50>
 800411c:	2301      	movs	r3, #1
 800411e:	e000      	b.n	8004122 <prvProcessTimerOrBlockTask+0x52>
 8004120:	2300      	movs	r3, #0
 8004122:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004124:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <prvProcessTimerOrBlockTask+0x94>)
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	4619      	mov	r1, r3
 8004132:	f7fe ffa7 	bl	8003084 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004136:	f7ff fa23 	bl	8003580 <xTaskResumeAll>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004140:	4b09      	ldr	r3, [pc, #36]	; (8004168 <prvProcessTimerOrBlockTask+0x98>)
 8004142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	f3bf 8f6f 	isb	sy
}
 8004150:	e001      	b.n	8004156 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004152:	f7ff fa15 	bl	8003580 <xTaskResumeAll>
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	24000d18 	.word	0x24000d18
 8004164:	24000d1c 	.word	0x24000d1c
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004174:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <prvGetNextExpireTime+0x44>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <prvGetNextExpireTime+0x16>
 800417e:	2201      	movs	r2, #1
 8004180:	e000      	b.n	8004184 <prvGetNextExpireTime+0x18>
 8004182:	2200      	movs	r2, #0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004190:	4b07      	ldr	r3, [pc, #28]	; (80041b0 <prvGetNextExpireTime+0x44>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	e001      	b.n	80041a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80041a0:	68fb      	ldr	r3, [r7, #12]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	24000d14 	.word	0x24000d14

080041b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041bc:	f7ff fa7e 	bl	80036bc <xTaskGetTickCount>
 80041c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80041c2:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <prvSampleTimeNow+0x3c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d205      	bcs.n	80041d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80041cc:	f000 f936 	bl	800443c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e002      	b.n	80041de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041de:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <prvSampleTimeNow+0x3c>)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041e4:	68fb      	ldr	r3, [r7, #12]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	24000d24 	.word	0x24000d24

080041f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	429a      	cmp	r2, r3
 8004218:	d812      	bhi.n	8004240 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	1ad2      	subs	r2, r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	429a      	cmp	r2, r3
 8004226:	d302      	bcc.n	800422e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004228:	2301      	movs	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	e01b      	b.n	8004266 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800422e:	4b10      	ldr	r3, [pc, #64]	; (8004270 <prvInsertTimerInActiveList+0x7c>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3304      	adds	r3, #4
 8004236:	4619      	mov	r1, r3
 8004238:	4610      	mov	r0, r2
 800423a:	f7fe fa08 	bl	800264e <vListInsert>
 800423e:	e012      	b.n	8004266 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d206      	bcs.n	8004256 <prvInsertTimerInActiveList+0x62>
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d302      	bcc.n	8004256 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004250:	2301      	movs	r3, #1
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	e007      	b.n	8004266 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <prvInsertTimerInActiveList+0x80>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3304      	adds	r3, #4
 800425e:	4619      	mov	r1, r3
 8004260:	4610      	mov	r0, r2
 8004262:	f7fe f9f4 	bl	800264e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004266:	697b      	ldr	r3, [r7, #20]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	24000d18 	.word	0x24000d18
 8004274:	24000d14 	.word	0x24000d14

08004278 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08e      	sub	sp, #56	; 0x38
 800427c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800427e:	e0ca      	b.n	8004416 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	da18      	bge.n	80042b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004286:	1d3b      	adds	r3, r7, #4
 8004288:	3304      	adds	r3, #4
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	61fb      	str	r3, [r7, #28]
}
 80042a4:	bf00      	nop
 80042a6:	e7fe      	b.n	80042a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80042a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ae:	6850      	ldr	r0, [r2, #4]
 80042b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042b2:	6892      	ldr	r2, [r2, #8]
 80042b4:	4611      	mov	r1, r2
 80042b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f2c0 80aa 	blt.w	8004414 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d004      	beq.n	80042d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	3304      	adds	r3, #4
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fe f9f5 	bl	80026c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042d6:	463b      	mov	r3, r7
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff ff6b 	bl	80041b4 <prvSampleTimeNow>
 80042de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b09      	cmp	r3, #9
 80042e4:	f200 8097 	bhi.w	8004416 <prvProcessReceivedCommands+0x19e>
 80042e8:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <prvProcessReceivedCommands+0x78>)
 80042ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ee:	bf00      	nop
 80042f0:	08004319 	.word	0x08004319
 80042f4:	08004319 	.word	0x08004319
 80042f8:	08004319 	.word	0x08004319
 80042fc:	0800438d 	.word	0x0800438d
 8004300:	080043a1 	.word	0x080043a1
 8004304:	080043eb 	.word	0x080043eb
 8004308:	08004319 	.word	0x08004319
 800430c:	08004319 	.word	0x08004319
 8004310:	0800438d 	.word	0x0800438d
 8004314:	080043a1 	.word	0x080043a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	b2da      	uxtb	r2, r3
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	18d1      	adds	r1, r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004338:	f7ff ff5c 	bl	80041f4 <prvInsertTimerInActiveList>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d069      	beq.n	8004416 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004348:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d05e      	beq.n	8004416 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	441a      	add	r2, r3
 8004360:	2300      	movs	r3, #0
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	2300      	movs	r3, #0
 8004366:	2100      	movs	r1, #0
 8004368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800436a:	f7ff fe05 	bl	8003f78 <xTimerGenericCommand>
 800436e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d14f      	bne.n	8004416 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	61bb      	str	r3, [r7, #24]
}
 8004388:	bf00      	nop
 800438a:	e7fe      	b.n	800438a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800438c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	b2da      	uxtb	r2, r3
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800439e:	e03a      	b.n	8004416 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	617b      	str	r3, [r7, #20]
}
 80043d2:	bf00      	nop
 80043d4:	e7fe      	b.n	80043d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	18d1      	adds	r1, r2, r3
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043e4:	f7ff ff06 	bl	80041f4 <prvInsertTimerInActiveList>
					break;
 80043e8:	e015      	b.n	8004416 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d103      	bne.n	8004400 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80043f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043fa:	f000 fbe1 	bl	8004bc0 <vPortFree>
 80043fe:	e00a      	b.n	8004416 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	b2da      	uxtb	r2, r3
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004412:	e000      	b.n	8004416 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004414:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004416:	4b08      	ldr	r3, [pc, #32]	; (8004438 <prvProcessReceivedCommands+0x1c0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	1d39      	adds	r1, r7, #4
 800441c:	2200      	movs	r2, #0
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe fc16 	bl	8002c50 <xQueueReceive>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	f47f af2a 	bne.w	8004280 <prvProcessReceivedCommands+0x8>
	}
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	3730      	adds	r7, #48	; 0x30
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	24000d1c 	.word	0x24000d1c

0800443c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004442:	e048      	b.n	80044d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004444:	4b2d      	ldr	r3, [pc, #180]	; (80044fc <prvSwitchTimerLists+0xc0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800444e:	4b2b      	ldr	r3, [pc, #172]	; (80044fc <prvSwitchTimerLists+0xc0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	3304      	adds	r3, #4
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe f92f 	bl	80026c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	d02e      	beq.n	80044d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4413      	add	r3, r2
 8004480:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	429a      	cmp	r2, r3
 8004488:	d90e      	bls.n	80044a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004496:	4b19      	ldr	r3, [pc, #100]	; (80044fc <prvSwitchTimerLists+0xc0>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3304      	adds	r3, #4
 800449e:	4619      	mov	r1, r3
 80044a0:	4610      	mov	r0, r2
 80044a2:	f7fe f8d4 	bl	800264e <vListInsert>
 80044a6:	e016      	b.n	80044d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044a8:	2300      	movs	r3, #0
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	2300      	movs	r3, #0
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	2100      	movs	r1, #0
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f7ff fd60 	bl	8003f78 <xTimerGenericCommand>
 80044b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	603b      	str	r3, [r7, #0]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044d6:	4b09      	ldr	r3, [pc, #36]	; (80044fc <prvSwitchTimerLists+0xc0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1b1      	bne.n	8004444 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <prvSwitchTimerLists+0xc0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <prvSwitchTimerLists+0xc4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a04      	ldr	r2, [pc, #16]	; (80044fc <prvSwitchTimerLists+0xc0>)
 80044ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80044ee:	4a04      	ldr	r2, [pc, #16]	; (8004500 <prvSwitchTimerLists+0xc4>)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	6013      	str	r3, [r2, #0]
}
 80044f4:	bf00      	nop
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	24000d14 	.word	0x24000d14
 8004500:	24000d18 	.word	0x24000d18

08004504 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800450a:	f000 f96b 	bl	80047e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800450e:	4b15      	ldr	r3, [pc, #84]	; (8004564 <prvCheckForValidListAndQueue+0x60>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d120      	bne.n	8004558 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004516:	4814      	ldr	r0, [pc, #80]	; (8004568 <prvCheckForValidListAndQueue+0x64>)
 8004518:	f7fe f848 	bl	80025ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800451c:	4813      	ldr	r0, [pc, #76]	; (800456c <prvCheckForValidListAndQueue+0x68>)
 800451e:	f7fe f845 	bl	80025ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004522:	4b13      	ldr	r3, [pc, #76]	; (8004570 <prvCheckForValidListAndQueue+0x6c>)
 8004524:	4a10      	ldr	r2, [pc, #64]	; (8004568 <prvCheckForValidListAndQueue+0x64>)
 8004526:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004528:	4b12      	ldr	r3, [pc, #72]	; (8004574 <prvCheckForValidListAndQueue+0x70>)
 800452a:	4a10      	ldr	r2, [pc, #64]	; (800456c <prvCheckForValidListAndQueue+0x68>)
 800452c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800452e:	2300      	movs	r3, #0
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	4b11      	ldr	r3, [pc, #68]	; (8004578 <prvCheckForValidListAndQueue+0x74>)
 8004534:	4a11      	ldr	r2, [pc, #68]	; (800457c <prvCheckForValidListAndQueue+0x78>)
 8004536:	2110      	movs	r1, #16
 8004538:	200a      	movs	r0, #10
 800453a:	f7fe f953 	bl	80027e4 <xQueueGenericCreateStatic>
 800453e:	4603      	mov	r3, r0
 8004540:	4a08      	ldr	r2, [pc, #32]	; (8004564 <prvCheckForValidListAndQueue+0x60>)
 8004542:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004544:	4b07      	ldr	r3, [pc, #28]	; (8004564 <prvCheckForValidListAndQueue+0x60>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <prvCheckForValidListAndQueue+0x60>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	490b      	ldr	r1, [pc, #44]	; (8004580 <prvCheckForValidListAndQueue+0x7c>)
 8004552:	4618      	mov	r0, r3
 8004554:	f7fe fd6c 	bl	8003030 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004558:	f000 f974 	bl	8004844 <vPortExitCritical>
}
 800455c:	bf00      	nop
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	24000d1c 	.word	0x24000d1c
 8004568:	24000cec 	.word	0x24000cec
 800456c:	24000d00 	.word	0x24000d00
 8004570:	24000d14 	.word	0x24000d14
 8004574:	24000d18 	.word	0x24000d18
 8004578:	24000dc8 	.word	0x24000dc8
 800457c:	24000d28 	.word	0x24000d28
 8004580:	080058c0 	.word	0x080058c0

08004584 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3b04      	subs	r3, #4
 8004594:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800459c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3b04      	subs	r3, #4
 80045a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f023 0201 	bic.w	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3b04      	subs	r3, #4
 80045b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045b4:	4a0c      	ldr	r2, [pc, #48]	; (80045e8 <pxPortInitialiseStack+0x64>)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3b14      	subs	r3, #20
 80045be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3b04      	subs	r3, #4
 80045ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f06f 0202 	mvn.w	r2, #2
 80045d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3b20      	subs	r3, #32
 80045d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045da:	68fb      	ldr	r3, [r7, #12]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	080045ed 	.word	0x080045ed

080045ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045f6:	4b12      	ldr	r3, [pc, #72]	; (8004640 <prvTaskExitError+0x54>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045fe:	d00a      	beq.n	8004616 <prvTaskExitError+0x2a>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	60fb      	str	r3, [r7, #12]
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <prvTaskExitError+0x28>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	60bb      	str	r3, [r7, #8]
}
 8004628:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800462a:	bf00      	nop
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0fc      	beq.n	800462c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004632:	bf00      	nop
 8004634:	bf00      	nop
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	24000010 	.word	0x24000010
	...

08004650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <pxCurrentTCBConst2>)
 8004652:	6819      	ldr	r1, [r3, #0]
 8004654:	6808      	ldr	r0, [r1, #0]
 8004656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465a:	f380 8809 	msr	PSP, r0
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f04f 0000 	mov.w	r0, #0
 8004666:	f380 8811 	msr	BASEPRI, r0
 800466a:	4770      	bx	lr
 800466c:	f3af 8000 	nop.w

08004670 <pxCurrentTCBConst2>:
 8004670:	240007ec 	.word	0x240007ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop

08004678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004678:	4808      	ldr	r0, [pc, #32]	; (800469c <prvPortStartFirstTask+0x24>)
 800467a:	6800      	ldr	r0, [r0, #0]
 800467c:	6800      	ldr	r0, [r0, #0]
 800467e:	f380 8808 	msr	MSP, r0
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f380 8814 	msr	CONTROL, r0
 800468a:	b662      	cpsie	i
 800468c:	b661      	cpsie	f
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	df00      	svc	0
 8004698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800469a:	bf00      	nop
 800469c:	e000ed08 	.word	0xe000ed08

080046a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046a6:	4b46      	ldr	r3, [pc, #280]	; (80047c0 <xPortStartScheduler+0x120>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a46      	ldr	r2, [pc, #280]	; (80047c4 <xPortStartScheduler+0x124>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d10a      	bne.n	80046c6 <xPortStartScheduler+0x26>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	613b      	str	r3, [r7, #16]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046c6:	4b3e      	ldr	r3, [pc, #248]	; (80047c0 <xPortStartScheduler+0x120>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a3f      	ldr	r2, [pc, #252]	; (80047c8 <xPortStartScheduler+0x128>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d10a      	bne.n	80046e6 <xPortStartScheduler+0x46>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	60fb      	str	r3, [r7, #12]
}
 80046e2:	bf00      	nop
 80046e4:	e7fe      	b.n	80046e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046e6:	4b39      	ldr	r3, [pc, #228]	; (80047cc <xPortStartScheduler+0x12c>)
 80046e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	22ff      	movs	r2, #255	; 0xff
 80046f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004708:	b2da      	uxtb	r2, r3
 800470a:	4b31      	ldr	r3, [pc, #196]	; (80047d0 <xPortStartScheduler+0x130>)
 800470c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800470e:	4b31      	ldr	r3, [pc, #196]	; (80047d4 <xPortStartScheduler+0x134>)
 8004710:	2207      	movs	r2, #7
 8004712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004714:	e009      	b.n	800472a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004716:	4b2f      	ldr	r3, [pc, #188]	; (80047d4 <xPortStartScheduler+0x134>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3b01      	subs	r3, #1
 800471c:	4a2d      	ldr	r2, [pc, #180]	; (80047d4 <xPortStartScheduler+0x134>)
 800471e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	b2db      	uxtb	r3, r3
 8004728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800472a:	78fb      	ldrb	r3, [r7, #3]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	2b80      	cmp	r3, #128	; 0x80
 8004734:	d0ef      	beq.n	8004716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004736:	4b27      	ldr	r3, [pc, #156]	; (80047d4 <xPortStartScheduler+0x134>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f1c3 0307 	rsb	r3, r3, #7
 800473e:	2b04      	cmp	r3, #4
 8004740:	d00a      	beq.n	8004758 <xPortStartScheduler+0xb8>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	60bb      	str	r3, [r7, #8]
}
 8004754:	bf00      	nop
 8004756:	e7fe      	b.n	8004756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004758:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <xPortStartScheduler+0x134>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <xPortStartScheduler+0x134>)
 8004760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004762:	4b1c      	ldr	r3, [pc, #112]	; (80047d4 <xPortStartScheduler+0x134>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800476a:	4a1a      	ldr	r2, [pc, #104]	; (80047d4 <xPortStartScheduler+0x134>)
 800476c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	b2da      	uxtb	r2, r3
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004776:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <xPortStartScheduler+0x138>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a17      	ldr	r2, [pc, #92]	; (80047d8 <xPortStartScheduler+0x138>)
 800477c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004782:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <xPortStartScheduler+0x138>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a14      	ldr	r2, [pc, #80]	; (80047d8 <xPortStartScheduler+0x138>)
 8004788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800478c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800478e:	f000 f8dd 	bl	800494c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004792:	4b12      	ldr	r3, [pc, #72]	; (80047dc <xPortStartScheduler+0x13c>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004798:	f000 f8fc 	bl	8004994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800479c:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <xPortStartScheduler+0x140>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a0f      	ldr	r2, [pc, #60]	; (80047e0 <xPortStartScheduler+0x140>)
 80047a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047a8:	f7ff ff66 	bl	8004678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047ac:	f7ff f850 	bl	8003850 <vTaskSwitchContext>
	prvTaskExitError();
 80047b0:	f7ff ff1c 	bl	80045ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	e000ed00 	.word	0xe000ed00
 80047c4:	410fc271 	.word	0x410fc271
 80047c8:	410fc270 	.word	0x410fc270
 80047cc:	e000e400 	.word	0xe000e400
 80047d0:	24000e18 	.word	0x24000e18
 80047d4:	24000e1c 	.word	0x24000e1c
 80047d8:	e000ed20 	.word	0xe000ed20
 80047dc:	24000010 	.word	0x24000010
 80047e0:	e000ef34 	.word	0xe000ef34

080047e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	607b      	str	r3, [r7, #4]
}
 80047fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047fe:	4b0f      	ldr	r3, [pc, #60]	; (800483c <vPortEnterCritical+0x58>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3301      	adds	r3, #1
 8004804:	4a0d      	ldr	r2, [pc, #52]	; (800483c <vPortEnterCritical+0x58>)
 8004806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004808:	4b0c      	ldr	r3, [pc, #48]	; (800483c <vPortEnterCritical+0x58>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d10f      	bne.n	8004830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <vPortEnterCritical+0x5c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <vPortEnterCritical+0x4c>
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	603b      	str	r3, [r7, #0]
}
 800482c:	bf00      	nop
 800482e:	e7fe      	b.n	800482e <vPortEnterCritical+0x4a>
	}
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	24000010 	.word	0x24000010
 8004840:	e000ed04 	.word	0xe000ed04

08004844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800484a:	4b12      	ldr	r3, [pc, #72]	; (8004894 <vPortExitCritical+0x50>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <vPortExitCritical+0x24>
	__asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	607b      	str	r3, [r7, #4]
}
 8004864:	bf00      	nop
 8004866:	e7fe      	b.n	8004866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004868:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <vPortExitCritical+0x50>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3b01      	subs	r3, #1
 800486e:	4a09      	ldr	r2, [pc, #36]	; (8004894 <vPortExitCritical+0x50>)
 8004870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004872:	4b08      	ldr	r3, [pc, #32]	; (8004894 <vPortExitCritical+0x50>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d105      	bne.n	8004886 <vPortExitCritical+0x42>
 800487a:	2300      	movs	r3, #0
 800487c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	f383 8811 	msr	BASEPRI, r3
}
 8004884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	24000010 	.word	0x24000010
	...

080048a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048a0:	f3ef 8009 	mrs	r0, PSP
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	4b15      	ldr	r3, [pc, #84]	; (8004900 <pxCurrentTCBConst>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	f01e 0f10 	tst.w	lr, #16
 80048b0:	bf08      	it	eq
 80048b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ba:	6010      	str	r0, [r2, #0]
 80048bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048c4:	f380 8811 	msr	BASEPRI, r0
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f7fe ffbe 	bl	8003850 <vTaskSwitchContext>
 80048d4:	f04f 0000 	mov.w	r0, #0
 80048d8:	f380 8811 	msr	BASEPRI, r0
 80048dc:	bc09      	pop	{r0, r3}
 80048de:	6819      	ldr	r1, [r3, #0]
 80048e0:	6808      	ldr	r0, [r1, #0]
 80048e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e6:	f01e 0f10 	tst.w	lr, #16
 80048ea:	bf08      	it	eq
 80048ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048f0:	f380 8809 	msr	PSP, r0
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	f3af 8000 	nop.w

08004900 <pxCurrentTCBConst>:
 8004900:	240007ec 	.word	0x240007ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004904:	bf00      	nop
 8004906:	bf00      	nop

08004908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	607b      	str	r3, [r7, #4]
}
 8004920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004922:	f7fe fedb 	bl	80036dc <xTaskIncrementTick>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800492c:	4b06      	ldr	r3, [pc, #24]	; (8004948 <xPortSysTickHandler+0x40>)
 800492e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	2300      	movs	r3, #0
 8004936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f383 8811 	msr	BASEPRI, r3
}
 800493e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <vPortSetupTimerInterrupt+0x34>)
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <vPortSetupTimerInterrupt+0x38>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <vPortSetupTimerInterrupt+0x3c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a0a      	ldr	r2, [pc, #40]	; (800498c <vPortSetupTimerInterrupt+0x40>)
 8004962:	fba2 2303 	umull	r2, r3, r2, r3
 8004966:	099b      	lsrs	r3, r3, #6
 8004968:	4a09      	ldr	r2, [pc, #36]	; (8004990 <vPortSetupTimerInterrupt+0x44>)
 800496a:	3b01      	subs	r3, #1
 800496c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800496e:	4b04      	ldr	r3, [pc, #16]	; (8004980 <vPortSetupTimerInterrupt+0x34>)
 8004970:	2207      	movs	r2, #7
 8004972:	601a      	str	r2, [r3, #0]
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	e000e010 	.word	0xe000e010
 8004984:	e000e018 	.word	0xe000e018
 8004988:	24000000 	.word	0x24000000
 800498c:	10624dd3 	.word	0x10624dd3
 8004990:	e000e014 	.word	0xe000e014

08004994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049a4 <vPortEnableVFP+0x10>
 8004998:	6801      	ldr	r1, [r0, #0]
 800499a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800499e:	6001      	str	r1, [r0, #0]
 80049a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049a2:	bf00      	nop
 80049a4:	e000ed88 	.word	0xe000ed88

080049a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049ae:	f3ef 8305 	mrs	r3, IPSR
 80049b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b0f      	cmp	r3, #15
 80049b8:	d914      	bls.n	80049e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049ba:	4a17      	ldr	r2, [pc, #92]	; (8004a18 <vPortValidateInterruptPriority+0x70>)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4413      	add	r3, r2
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049c4:	4b15      	ldr	r3, [pc, #84]	; (8004a1c <vPortValidateInterruptPriority+0x74>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	7afa      	ldrb	r2, [r7, #11]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d20a      	bcs.n	80049e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	607b      	str	r3, [r7, #4]
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049e4:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <vPortValidateInterruptPriority+0x78>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049ec:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <vPortValidateInterruptPriority+0x7c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d90a      	bls.n	8004a0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	603b      	str	r3, [r7, #0]
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <vPortValidateInterruptPriority+0x60>
	}
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	e000e3f0 	.word	0xe000e3f0
 8004a1c:	24000e18 	.word	0x24000e18
 8004a20:	e000ed0c 	.word	0xe000ed0c
 8004a24:	24000e1c 	.word	0x24000e1c

08004a28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08a      	sub	sp, #40	; 0x28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a30:	2300      	movs	r3, #0
 8004a32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a34:	f7fe fd96 	bl	8003564 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a38:	4b5b      	ldr	r3, [pc, #364]	; (8004ba8 <pvPortMalloc+0x180>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a40:	f000 f920 	bl	8004c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a44:	4b59      	ldr	r3, [pc, #356]	; (8004bac <pvPortMalloc+0x184>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f040 8093 	bne.w	8004b78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d01d      	beq.n	8004a94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a58:	2208      	movs	r2, #8
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d014      	beq.n	8004a94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f023 0307 	bic.w	r3, r3, #7
 8004a70:	3308      	adds	r3, #8
 8004a72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <pvPortMalloc+0x6c>
	__asm volatile
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	617b      	str	r3, [r7, #20]
}
 8004a90:	bf00      	nop
 8004a92:	e7fe      	b.n	8004a92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d06e      	beq.n	8004b78 <pvPortMalloc+0x150>
 8004a9a:	4b45      	ldr	r3, [pc, #276]	; (8004bb0 <pvPortMalloc+0x188>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d869      	bhi.n	8004b78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004aa4:	4b43      	ldr	r3, [pc, #268]	; (8004bb4 <pvPortMalloc+0x18c>)
 8004aa6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004aa8:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <pvPortMalloc+0x18c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aae:	e004      	b.n	8004aba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d903      	bls.n	8004acc <pvPortMalloc+0xa4>
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f1      	bne.n	8004ab0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004acc:	4b36      	ldr	r3, [pc, #216]	; (8004ba8 <pvPortMalloc+0x180>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d050      	beq.n	8004b78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2208      	movs	r2, #8
 8004adc:	4413      	add	r3, r2
 8004ade:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	1ad2      	subs	r2, r2, r3
 8004af0:	2308      	movs	r3, #8
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d91f      	bls.n	8004b38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4413      	add	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <pvPortMalloc+0xf8>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	613b      	str	r3, [r7, #16]
}
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	1ad2      	subs	r2, r2, r3
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b32:	69b8      	ldr	r0, [r7, #24]
 8004b34:	f000 f908 	bl	8004d48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b38:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <pvPortMalloc+0x188>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <pvPortMalloc+0x188>)
 8004b44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b46:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <pvPortMalloc+0x188>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b1b      	ldr	r3, [pc, #108]	; (8004bb8 <pvPortMalloc+0x190>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d203      	bcs.n	8004b5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b52:	4b17      	ldr	r3, [pc, #92]	; (8004bb0 <pvPortMalloc+0x188>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a18      	ldr	r2, [pc, #96]	; (8004bb8 <pvPortMalloc+0x190>)
 8004b58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <pvPortMalloc+0x184>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b6e:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <pvPortMalloc+0x194>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3301      	adds	r3, #1
 8004b74:	4a11      	ldr	r2, [pc, #68]	; (8004bbc <pvPortMalloc+0x194>)
 8004b76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b78:	f7fe fd02 	bl	8003580 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <pvPortMalloc+0x174>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	60fb      	str	r3, [r7, #12]
}
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <pvPortMalloc+0x172>
	return pvReturn;
 8004b9c:	69fb      	ldr	r3, [r7, #28]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3728      	adds	r7, #40	; 0x28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	24004a28 	.word	0x24004a28
 8004bac:	24004a3c 	.word	0x24004a3c
 8004bb0:	24004a2c 	.word	0x24004a2c
 8004bb4:	24004a20 	.word	0x24004a20
 8004bb8:	24004a30 	.word	0x24004a30
 8004bbc:	24004a34 	.word	0x24004a34

08004bc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d04d      	beq.n	8004c6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	425b      	negs	r3, r3
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4413      	add	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	4b24      	ldr	r3, [pc, #144]	; (8004c78 <vPortFree+0xb8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4013      	ands	r3, r2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <vPortFree+0x44>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	60fb      	str	r3, [r7, #12]
}
 8004c00:	bf00      	nop
 8004c02:	e7fe      	b.n	8004c02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <vPortFree+0x62>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	60bb      	str	r3, [r7, #8]
}
 8004c1e:	bf00      	nop
 8004c20:	e7fe      	b.n	8004c20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	4b14      	ldr	r3, [pc, #80]	; (8004c78 <vPortFree+0xb8>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01e      	beq.n	8004c6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d11a      	bne.n	8004c6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <vPortFree+0xb8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	43db      	mvns	r3, r3
 8004c42:	401a      	ands	r2, r3
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c48:	f7fe fc8c 	bl	8003564 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <vPortFree+0xbc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4413      	add	r3, r2
 8004c56:	4a09      	ldr	r2, [pc, #36]	; (8004c7c <vPortFree+0xbc>)
 8004c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c5a:	6938      	ldr	r0, [r7, #16]
 8004c5c:	f000 f874 	bl	8004d48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <vPortFree+0xc0>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	4a06      	ldr	r2, [pc, #24]	; (8004c80 <vPortFree+0xc0>)
 8004c68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c6a:	f7fe fc89 	bl	8003580 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c6e:	bf00      	nop
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	24004a3c 	.word	0x24004a3c
 8004c7c:	24004a2c 	.word	0x24004a2c
 8004c80:	24004a38 	.word	0x24004a38

08004c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c90:	4b27      	ldr	r3, [pc, #156]	; (8004d30 <prvHeapInit+0xac>)
 8004c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00c      	beq.n	8004cb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3307      	adds	r3, #7
 8004ca2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0307 	bic.w	r3, r3, #7
 8004caa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <prvHeapInit+0xac>)
 8004cb4:	4413      	add	r3, r2
 8004cb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cbc:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <prvHeapInit+0xb0>)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cc2:	4b1c      	ldr	r3, [pc, #112]	; (8004d34 <prvHeapInit+0xb0>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	4413      	add	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0307 	bic.w	r3, r3, #7
 8004cde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <prvHeapInit+0xb4>)
 8004ce4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ce6:	4b14      	ldr	r3, [pc, #80]	; (8004d38 <prvHeapInit+0xb4>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cee:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <prvHeapInit+0xb4>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	1ad2      	subs	r2, r2, r3
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <prvHeapInit+0xb4>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a0a      	ldr	r2, [pc, #40]	; (8004d3c <prvHeapInit+0xb8>)
 8004d12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <prvHeapInit+0xbc>)
 8004d1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d1c:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <prvHeapInit+0xc0>)
 8004d1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d22:	601a      	str	r2, [r3, #0]
}
 8004d24:	bf00      	nop
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	24000e20 	.word	0x24000e20
 8004d34:	24004a20 	.word	0x24004a20
 8004d38:	24004a28 	.word	0x24004a28
 8004d3c:	24004a30 	.word	0x24004a30
 8004d40:	24004a2c 	.word	0x24004a2c
 8004d44:	24004a3c 	.word	0x24004a3c

08004d48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d50:	4b28      	ldr	r3, [pc, #160]	; (8004df4 <prvInsertBlockIntoFreeList+0xac>)
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	e002      	b.n	8004d5c <prvInsertBlockIntoFreeList+0x14>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d8f7      	bhi.n	8004d56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	4413      	add	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d108      	bne.n	8004d8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	441a      	add	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	441a      	add	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d118      	bne.n	8004dd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <prvInsertBlockIntoFreeList+0xb0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d00d      	beq.n	8004dc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	441a      	add	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	e008      	b.n	8004dd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dc6:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <prvInsertBlockIntoFreeList+0xb0>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	e003      	b.n	8004dd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d002      	beq.n	8004de6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004de6:	bf00      	nop
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	24004a20 	.word	0x24004a20
 8004df8:	24004a28 	.word	0x24004a28

08004dfc <__errno>:
 8004dfc:	4b01      	ldr	r3, [pc, #4]	; (8004e04 <__errno+0x8>)
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	24000014 	.word	0x24000014

08004e08 <__libc_init_array>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	4d0d      	ldr	r5, [pc, #52]	; (8004e40 <__libc_init_array+0x38>)
 8004e0c:	4c0d      	ldr	r4, [pc, #52]	; (8004e44 <__libc_init_array+0x3c>)
 8004e0e:	1b64      	subs	r4, r4, r5
 8004e10:	10a4      	asrs	r4, r4, #2
 8004e12:	2600      	movs	r6, #0
 8004e14:	42a6      	cmp	r6, r4
 8004e16:	d109      	bne.n	8004e2c <__libc_init_array+0x24>
 8004e18:	4d0b      	ldr	r5, [pc, #44]	; (8004e48 <__libc_init_array+0x40>)
 8004e1a:	4c0c      	ldr	r4, [pc, #48]	; (8004e4c <__libc_init_array+0x44>)
 8004e1c:	f000 fd2c 	bl	8005878 <_init>
 8004e20:	1b64      	subs	r4, r4, r5
 8004e22:	10a4      	asrs	r4, r4, #2
 8004e24:	2600      	movs	r6, #0
 8004e26:	42a6      	cmp	r6, r4
 8004e28:	d105      	bne.n	8004e36 <__libc_init_array+0x2e>
 8004e2a:	bd70      	pop	{r4, r5, r6, pc}
 8004e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e30:	4798      	blx	r3
 8004e32:	3601      	adds	r6, #1
 8004e34:	e7ee      	b.n	8004e14 <__libc_init_array+0xc>
 8004e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e3a:	4798      	blx	r3
 8004e3c:	3601      	adds	r6, #1
 8004e3e:	e7f2      	b.n	8004e26 <__libc_init_array+0x1e>
 8004e40:	08005984 	.word	0x08005984
 8004e44:	08005984 	.word	0x08005984
 8004e48:	08005984 	.word	0x08005984
 8004e4c:	08005988 	.word	0x08005988

08004e50 <memcpy>:
 8004e50:	440a      	add	r2, r1
 8004e52:	4291      	cmp	r1, r2
 8004e54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e58:	d100      	bne.n	8004e5c <memcpy+0xc>
 8004e5a:	4770      	bx	lr
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e66:	4291      	cmp	r1, r2
 8004e68:	d1f9      	bne.n	8004e5e <memcpy+0xe>
 8004e6a:	bd10      	pop	{r4, pc}

08004e6c <memset>:
 8004e6c:	4402      	add	r2, r0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d100      	bne.n	8004e76 <memset+0xa>
 8004e74:	4770      	bx	lr
 8004e76:	f803 1b01 	strb.w	r1, [r3], #1
 8004e7a:	e7f9      	b.n	8004e70 <memset+0x4>

08004e7c <_puts_r>:
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	460e      	mov	r6, r1
 8004e80:	4605      	mov	r5, r0
 8004e82:	b118      	cbz	r0, 8004e8c <_puts_r+0x10>
 8004e84:	6983      	ldr	r3, [r0, #24]
 8004e86:	b90b      	cbnz	r3, 8004e8c <_puts_r+0x10>
 8004e88:	f000 fa48 	bl	800531c <__sinit>
 8004e8c:	69ab      	ldr	r3, [r5, #24]
 8004e8e:	68ac      	ldr	r4, [r5, #8]
 8004e90:	b913      	cbnz	r3, 8004e98 <_puts_r+0x1c>
 8004e92:	4628      	mov	r0, r5
 8004e94:	f000 fa42 	bl	800531c <__sinit>
 8004e98:	4b2c      	ldr	r3, [pc, #176]	; (8004f4c <_puts_r+0xd0>)
 8004e9a:	429c      	cmp	r4, r3
 8004e9c:	d120      	bne.n	8004ee0 <_puts_r+0x64>
 8004e9e:	686c      	ldr	r4, [r5, #4]
 8004ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ea2:	07db      	lsls	r3, r3, #31
 8004ea4:	d405      	bmi.n	8004eb2 <_puts_r+0x36>
 8004ea6:	89a3      	ldrh	r3, [r4, #12]
 8004ea8:	0598      	lsls	r0, r3, #22
 8004eaa:	d402      	bmi.n	8004eb2 <_puts_r+0x36>
 8004eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eae:	f000 fad3 	bl	8005458 <__retarget_lock_acquire_recursive>
 8004eb2:	89a3      	ldrh	r3, [r4, #12]
 8004eb4:	0719      	lsls	r1, r3, #28
 8004eb6:	d51d      	bpl.n	8004ef4 <_puts_r+0x78>
 8004eb8:	6923      	ldr	r3, [r4, #16]
 8004eba:	b1db      	cbz	r3, 8004ef4 <_puts_r+0x78>
 8004ebc:	3e01      	subs	r6, #1
 8004ebe:	68a3      	ldr	r3, [r4, #8]
 8004ec0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	60a3      	str	r3, [r4, #8]
 8004ec8:	bb39      	cbnz	r1, 8004f1a <_puts_r+0x9e>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	da38      	bge.n	8004f40 <_puts_r+0xc4>
 8004ece:	4622      	mov	r2, r4
 8004ed0:	210a      	movs	r1, #10
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f000 f848 	bl	8004f68 <__swbuf_r>
 8004ed8:	3001      	adds	r0, #1
 8004eda:	d011      	beq.n	8004f00 <_puts_r+0x84>
 8004edc:	250a      	movs	r5, #10
 8004ede:	e011      	b.n	8004f04 <_puts_r+0x88>
 8004ee0:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <_puts_r+0xd4>)
 8004ee2:	429c      	cmp	r4, r3
 8004ee4:	d101      	bne.n	8004eea <_puts_r+0x6e>
 8004ee6:	68ac      	ldr	r4, [r5, #8]
 8004ee8:	e7da      	b.n	8004ea0 <_puts_r+0x24>
 8004eea:	4b1a      	ldr	r3, [pc, #104]	; (8004f54 <_puts_r+0xd8>)
 8004eec:	429c      	cmp	r4, r3
 8004eee:	bf08      	it	eq
 8004ef0:	68ec      	ldreq	r4, [r5, #12]
 8004ef2:	e7d5      	b.n	8004ea0 <_puts_r+0x24>
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f000 f888 	bl	800500c <__swsetup_r>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	d0dd      	beq.n	8004ebc <_puts_r+0x40>
 8004f00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004f04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f06:	07da      	lsls	r2, r3, #31
 8004f08:	d405      	bmi.n	8004f16 <_puts_r+0x9a>
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	059b      	lsls	r3, r3, #22
 8004f0e:	d402      	bmi.n	8004f16 <_puts_r+0x9a>
 8004f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f12:	f000 faa2 	bl	800545a <__retarget_lock_release_recursive>
 8004f16:	4628      	mov	r0, r5
 8004f18:	bd70      	pop	{r4, r5, r6, pc}
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	da04      	bge.n	8004f28 <_puts_r+0xac>
 8004f1e:	69a2      	ldr	r2, [r4, #24]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	dc06      	bgt.n	8004f32 <_puts_r+0xb6>
 8004f24:	290a      	cmp	r1, #10
 8004f26:	d004      	beq.n	8004f32 <_puts_r+0xb6>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	6022      	str	r2, [r4, #0]
 8004f2e:	7019      	strb	r1, [r3, #0]
 8004f30:	e7c5      	b.n	8004ebe <_puts_r+0x42>
 8004f32:	4622      	mov	r2, r4
 8004f34:	4628      	mov	r0, r5
 8004f36:	f000 f817 	bl	8004f68 <__swbuf_r>
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d1bf      	bne.n	8004ebe <_puts_r+0x42>
 8004f3e:	e7df      	b.n	8004f00 <_puts_r+0x84>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	250a      	movs	r5, #10
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	6022      	str	r2, [r4, #0]
 8004f48:	701d      	strb	r5, [r3, #0]
 8004f4a:	e7db      	b.n	8004f04 <_puts_r+0x88>
 8004f4c:	08005944 	.word	0x08005944
 8004f50:	08005964 	.word	0x08005964
 8004f54:	08005924 	.word	0x08005924

08004f58 <puts>:
 8004f58:	4b02      	ldr	r3, [pc, #8]	; (8004f64 <puts+0xc>)
 8004f5a:	4601      	mov	r1, r0
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	f7ff bf8d 	b.w	8004e7c <_puts_r>
 8004f62:	bf00      	nop
 8004f64:	24000014 	.word	0x24000014

08004f68 <__swbuf_r>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	460e      	mov	r6, r1
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	4605      	mov	r5, r0
 8004f70:	b118      	cbz	r0, 8004f7a <__swbuf_r+0x12>
 8004f72:	6983      	ldr	r3, [r0, #24]
 8004f74:	b90b      	cbnz	r3, 8004f7a <__swbuf_r+0x12>
 8004f76:	f000 f9d1 	bl	800531c <__sinit>
 8004f7a:	4b21      	ldr	r3, [pc, #132]	; (8005000 <__swbuf_r+0x98>)
 8004f7c:	429c      	cmp	r4, r3
 8004f7e:	d12b      	bne.n	8004fd8 <__swbuf_r+0x70>
 8004f80:	686c      	ldr	r4, [r5, #4]
 8004f82:	69a3      	ldr	r3, [r4, #24]
 8004f84:	60a3      	str	r3, [r4, #8]
 8004f86:	89a3      	ldrh	r3, [r4, #12]
 8004f88:	071a      	lsls	r2, r3, #28
 8004f8a:	d52f      	bpl.n	8004fec <__swbuf_r+0x84>
 8004f8c:	6923      	ldr	r3, [r4, #16]
 8004f8e:	b36b      	cbz	r3, 8004fec <__swbuf_r+0x84>
 8004f90:	6923      	ldr	r3, [r4, #16]
 8004f92:	6820      	ldr	r0, [r4, #0]
 8004f94:	1ac0      	subs	r0, r0, r3
 8004f96:	6963      	ldr	r3, [r4, #20]
 8004f98:	b2f6      	uxtb	r6, r6
 8004f9a:	4283      	cmp	r3, r0
 8004f9c:	4637      	mov	r7, r6
 8004f9e:	dc04      	bgt.n	8004faa <__swbuf_r+0x42>
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	4628      	mov	r0, r5
 8004fa4:	f000 f926 	bl	80051f4 <_fflush_r>
 8004fa8:	bb30      	cbnz	r0, 8004ff8 <__swbuf_r+0x90>
 8004faa:	68a3      	ldr	r3, [r4, #8]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	60a3      	str	r3, [r4, #8]
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	6022      	str	r2, [r4, #0]
 8004fb6:	701e      	strb	r6, [r3, #0]
 8004fb8:	6963      	ldr	r3, [r4, #20]
 8004fba:	3001      	adds	r0, #1
 8004fbc:	4283      	cmp	r3, r0
 8004fbe:	d004      	beq.n	8004fca <__swbuf_r+0x62>
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	07db      	lsls	r3, r3, #31
 8004fc4:	d506      	bpl.n	8004fd4 <__swbuf_r+0x6c>
 8004fc6:	2e0a      	cmp	r6, #10
 8004fc8:	d104      	bne.n	8004fd4 <__swbuf_r+0x6c>
 8004fca:	4621      	mov	r1, r4
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f000 f911 	bl	80051f4 <_fflush_r>
 8004fd2:	b988      	cbnz	r0, 8004ff8 <__swbuf_r+0x90>
 8004fd4:	4638      	mov	r0, r7
 8004fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	; (8005004 <__swbuf_r+0x9c>)
 8004fda:	429c      	cmp	r4, r3
 8004fdc:	d101      	bne.n	8004fe2 <__swbuf_r+0x7a>
 8004fde:	68ac      	ldr	r4, [r5, #8]
 8004fe0:	e7cf      	b.n	8004f82 <__swbuf_r+0x1a>
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <__swbuf_r+0xa0>)
 8004fe4:	429c      	cmp	r4, r3
 8004fe6:	bf08      	it	eq
 8004fe8:	68ec      	ldreq	r4, [r5, #12]
 8004fea:	e7ca      	b.n	8004f82 <__swbuf_r+0x1a>
 8004fec:	4621      	mov	r1, r4
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f000 f80c 	bl	800500c <__swsetup_r>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d0cb      	beq.n	8004f90 <__swbuf_r+0x28>
 8004ff8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004ffc:	e7ea      	b.n	8004fd4 <__swbuf_r+0x6c>
 8004ffe:	bf00      	nop
 8005000:	08005944 	.word	0x08005944
 8005004:	08005964 	.word	0x08005964
 8005008:	08005924 	.word	0x08005924

0800500c <__swsetup_r>:
 800500c:	4b32      	ldr	r3, [pc, #200]	; (80050d8 <__swsetup_r+0xcc>)
 800500e:	b570      	push	{r4, r5, r6, lr}
 8005010:	681d      	ldr	r5, [r3, #0]
 8005012:	4606      	mov	r6, r0
 8005014:	460c      	mov	r4, r1
 8005016:	b125      	cbz	r5, 8005022 <__swsetup_r+0x16>
 8005018:	69ab      	ldr	r3, [r5, #24]
 800501a:	b913      	cbnz	r3, 8005022 <__swsetup_r+0x16>
 800501c:	4628      	mov	r0, r5
 800501e:	f000 f97d 	bl	800531c <__sinit>
 8005022:	4b2e      	ldr	r3, [pc, #184]	; (80050dc <__swsetup_r+0xd0>)
 8005024:	429c      	cmp	r4, r3
 8005026:	d10f      	bne.n	8005048 <__swsetup_r+0x3c>
 8005028:	686c      	ldr	r4, [r5, #4]
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005030:	0719      	lsls	r1, r3, #28
 8005032:	d42c      	bmi.n	800508e <__swsetup_r+0x82>
 8005034:	06dd      	lsls	r5, r3, #27
 8005036:	d411      	bmi.n	800505c <__swsetup_r+0x50>
 8005038:	2309      	movs	r3, #9
 800503a:	6033      	str	r3, [r6, #0]
 800503c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005040:	81a3      	strh	r3, [r4, #12]
 8005042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005046:	e03e      	b.n	80050c6 <__swsetup_r+0xba>
 8005048:	4b25      	ldr	r3, [pc, #148]	; (80050e0 <__swsetup_r+0xd4>)
 800504a:	429c      	cmp	r4, r3
 800504c:	d101      	bne.n	8005052 <__swsetup_r+0x46>
 800504e:	68ac      	ldr	r4, [r5, #8]
 8005050:	e7eb      	b.n	800502a <__swsetup_r+0x1e>
 8005052:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <__swsetup_r+0xd8>)
 8005054:	429c      	cmp	r4, r3
 8005056:	bf08      	it	eq
 8005058:	68ec      	ldreq	r4, [r5, #12]
 800505a:	e7e6      	b.n	800502a <__swsetup_r+0x1e>
 800505c:	0758      	lsls	r0, r3, #29
 800505e:	d512      	bpl.n	8005086 <__swsetup_r+0x7a>
 8005060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005062:	b141      	cbz	r1, 8005076 <__swsetup_r+0x6a>
 8005064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005068:	4299      	cmp	r1, r3
 800506a:	d002      	beq.n	8005072 <__swsetup_r+0x66>
 800506c:	4630      	mov	r0, r6
 800506e:	f000 fa5b 	bl	8005528 <_free_r>
 8005072:	2300      	movs	r3, #0
 8005074:	6363      	str	r3, [r4, #52]	; 0x34
 8005076:	89a3      	ldrh	r3, [r4, #12]
 8005078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800507c:	81a3      	strh	r3, [r4, #12]
 800507e:	2300      	movs	r3, #0
 8005080:	6063      	str	r3, [r4, #4]
 8005082:	6923      	ldr	r3, [r4, #16]
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	89a3      	ldrh	r3, [r4, #12]
 8005088:	f043 0308 	orr.w	r3, r3, #8
 800508c:	81a3      	strh	r3, [r4, #12]
 800508e:	6923      	ldr	r3, [r4, #16]
 8005090:	b94b      	cbnz	r3, 80050a6 <__swsetup_r+0x9a>
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800509c:	d003      	beq.n	80050a6 <__swsetup_r+0x9a>
 800509e:	4621      	mov	r1, r4
 80050a0:	4630      	mov	r0, r6
 80050a2:	f000 fa01 	bl	80054a8 <__smakebuf_r>
 80050a6:	89a0      	ldrh	r0, [r4, #12]
 80050a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050ac:	f010 0301 	ands.w	r3, r0, #1
 80050b0:	d00a      	beq.n	80050c8 <__swsetup_r+0xbc>
 80050b2:	2300      	movs	r3, #0
 80050b4:	60a3      	str	r3, [r4, #8]
 80050b6:	6963      	ldr	r3, [r4, #20]
 80050b8:	425b      	negs	r3, r3
 80050ba:	61a3      	str	r3, [r4, #24]
 80050bc:	6923      	ldr	r3, [r4, #16]
 80050be:	b943      	cbnz	r3, 80050d2 <__swsetup_r+0xc6>
 80050c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80050c4:	d1ba      	bne.n	800503c <__swsetup_r+0x30>
 80050c6:	bd70      	pop	{r4, r5, r6, pc}
 80050c8:	0781      	lsls	r1, r0, #30
 80050ca:	bf58      	it	pl
 80050cc:	6963      	ldrpl	r3, [r4, #20]
 80050ce:	60a3      	str	r3, [r4, #8]
 80050d0:	e7f4      	b.n	80050bc <__swsetup_r+0xb0>
 80050d2:	2000      	movs	r0, #0
 80050d4:	e7f7      	b.n	80050c6 <__swsetup_r+0xba>
 80050d6:	bf00      	nop
 80050d8:	24000014 	.word	0x24000014
 80050dc:	08005944 	.word	0x08005944
 80050e0:	08005964 	.word	0x08005964
 80050e4:	08005924 	.word	0x08005924

080050e8 <__sflush_r>:
 80050e8:	898a      	ldrh	r2, [r1, #12]
 80050ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ee:	4605      	mov	r5, r0
 80050f0:	0710      	lsls	r0, r2, #28
 80050f2:	460c      	mov	r4, r1
 80050f4:	d458      	bmi.n	80051a8 <__sflush_r+0xc0>
 80050f6:	684b      	ldr	r3, [r1, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	dc05      	bgt.n	8005108 <__sflush_r+0x20>
 80050fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80050fe:	2b00      	cmp	r3, #0
 8005100:	dc02      	bgt.n	8005108 <__sflush_r+0x20>
 8005102:	2000      	movs	r0, #0
 8005104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005108:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800510a:	2e00      	cmp	r6, #0
 800510c:	d0f9      	beq.n	8005102 <__sflush_r+0x1a>
 800510e:	2300      	movs	r3, #0
 8005110:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005114:	682f      	ldr	r7, [r5, #0]
 8005116:	602b      	str	r3, [r5, #0]
 8005118:	d032      	beq.n	8005180 <__sflush_r+0x98>
 800511a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800511c:	89a3      	ldrh	r3, [r4, #12]
 800511e:	075a      	lsls	r2, r3, #29
 8005120:	d505      	bpl.n	800512e <__sflush_r+0x46>
 8005122:	6863      	ldr	r3, [r4, #4]
 8005124:	1ac0      	subs	r0, r0, r3
 8005126:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005128:	b10b      	cbz	r3, 800512e <__sflush_r+0x46>
 800512a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800512c:	1ac0      	subs	r0, r0, r3
 800512e:	2300      	movs	r3, #0
 8005130:	4602      	mov	r2, r0
 8005132:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005134:	6a21      	ldr	r1, [r4, #32]
 8005136:	4628      	mov	r0, r5
 8005138:	47b0      	blx	r6
 800513a:	1c43      	adds	r3, r0, #1
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	d106      	bne.n	800514e <__sflush_r+0x66>
 8005140:	6829      	ldr	r1, [r5, #0]
 8005142:	291d      	cmp	r1, #29
 8005144:	d82c      	bhi.n	80051a0 <__sflush_r+0xb8>
 8005146:	4a2a      	ldr	r2, [pc, #168]	; (80051f0 <__sflush_r+0x108>)
 8005148:	40ca      	lsrs	r2, r1
 800514a:	07d6      	lsls	r6, r2, #31
 800514c:	d528      	bpl.n	80051a0 <__sflush_r+0xb8>
 800514e:	2200      	movs	r2, #0
 8005150:	6062      	str	r2, [r4, #4]
 8005152:	04d9      	lsls	r1, r3, #19
 8005154:	6922      	ldr	r2, [r4, #16]
 8005156:	6022      	str	r2, [r4, #0]
 8005158:	d504      	bpl.n	8005164 <__sflush_r+0x7c>
 800515a:	1c42      	adds	r2, r0, #1
 800515c:	d101      	bne.n	8005162 <__sflush_r+0x7a>
 800515e:	682b      	ldr	r3, [r5, #0]
 8005160:	b903      	cbnz	r3, 8005164 <__sflush_r+0x7c>
 8005162:	6560      	str	r0, [r4, #84]	; 0x54
 8005164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005166:	602f      	str	r7, [r5, #0]
 8005168:	2900      	cmp	r1, #0
 800516a:	d0ca      	beq.n	8005102 <__sflush_r+0x1a>
 800516c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005170:	4299      	cmp	r1, r3
 8005172:	d002      	beq.n	800517a <__sflush_r+0x92>
 8005174:	4628      	mov	r0, r5
 8005176:	f000 f9d7 	bl	8005528 <_free_r>
 800517a:	2000      	movs	r0, #0
 800517c:	6360      	str	r0, [r4, #52]	; 0x34
 800517e:	e7c1      	b.n	8005104 <__sflush_r+0x1c>
 8005180:	6a21      	ldr	r1, [r4, #32]
 8005182:	2301      	movs	r3, #1
 8005184:	4628      	mov	r0, r5
 8005186:	47b0      	blx	r6
 8005188:	1c41      	adds	r1, r0, #1
 800518a:	d1c7      	bne.n	800511c <__sflush_r+0x34>
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0c4      	beq.n	800511c <__sflush_r+0x34>
 8005192:	2b1d      	cmp	r3, #29
 8005194:	d001      	beq.n	800519a <__sflush_r+0xb2>
 8005196:	2b16      	cmp	r3, #22
 8005198:	d101      	bne.n	800519e <__sflush_r+0xb6>
 800519a:	602f      	str	r7, [r5, #0]
 800519c:	e7b1      	b.n	8005102 <__sflush_r+0x1a>
 800519e:	89a3      	ldrh	r3, [r4, #12]
 80051a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051a4:	81a3      	strh	r3, [r4, #12]
 80051a6:	e7ad      	b.n	8005104 <__sflush_r+0x1c>
 80051a8:	690f      	ldr	r7, [r1, #16]
 80051aa:	2f00      	cmp	r7, #0
 80051ac:	d0a9      	beq.n	8005102 <__sflush_r+0x1a>
 80051ae:	0793      	lsls	r3, r2, #30
 80051b0:	680e      	ldr	r6, [r1, #0]
 80051b2:	bf08      	it	eq
 80051b4:	694b      	ldreq	r3, [r1, #20]
 80051b6:	600f      	str	r7, [r1, #0]
 80051b8:	bf18      	it	ne
 80051ba:	2300      	movne	r3, #0
 80051bc:	eba6 0807 	sub.w	r8, r6, r7
 80051c0:	608b      	str	r3, [r1, #8]
 80051c2:	f1b8 0f00 	cmp.w	r8, #0
 80051c6:	dd9c      	ble.n	8005102 <__sflush_r+0x1a>
 80051c8:	6a21      	ldr	r1, [r4, #32]
 80051ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80051cc:	4643      	mov	r3, r8
 80051ce:	463a      	mov	r2, r7
 80051d0:	4628      	mov	r0, r5
 80051d2:	47b0      	blx	r6
 80051d4:	2800      	cmp	r0, #0
 80051d6:	dc06      	bgt.n	80051e6 <__sflush_r+0xfe>
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051e4:	e78e      	b.n	8005104 <__sflush_r+0x1c>
 80051e6:	4407      	add	r7, r0
 80051e8:	eba8 0800 	sub.w	r8, r8, r0
 80051ec:	e7e9      	b.n	80051c2 <__sflush_r+0xda>
 80051ee:	bf00      	nop
 80051f0:	20400001 	.word	0x20400001

080051f4 <_fflush_r>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	690b      	ldr	r3, [r1, #16]
 80051f8:	4605      	mov	r5, r0
 80051fa:	460c      	mov	r4, r1
 80051fc:	b913      	cbnz	r3, 8005204 <_fflush_r+0x10>
 80051fe:	2500      	movs	r5, #0
 8005200:	4628      	mov	r0, r5
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	b118      	cbz	r0, 800520e <_fflush_r+0x1a>
 8005206:	6983      	ldr	r3, [r0, #24]
 8005208:	b90b      	cbnz	r3, 800520e <_fflush_r+0x1a>
 800520a:	f000 f887 	bl	800531c <__sinit>
 800520e:	4b14      	ldr	r3, [pc, #80]	; (8005260 <_fflush_r+0x6c>)
 8005210:	429c      	cmp	r4, r3
 8005212:	d11b      	bne.n	800524c <_fflush_r+0x58>
 8005214:	686c      	ldr	r4, [r5, #4]
 8005216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0ef      	beq.n	80051fe <_fflush_r+0xa>
 800521e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005220:	07d0      	lsls	r0, r2, #31
 8005222:	d404      	bmi.n	800522e <_fflush_r+0x3a>
 8005224:	0599      	lsls	r1, r3, #22
 8005226:	d402      	bmi.n	800522e <_fflush_r+0x3a>
 8005228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800522a:	f000 f915 	bl	8005458 <__retarget_lock_acquire_recursive>
 800522e:	4628      	mov	r0, r5
 8005230:	4621      	mov	r1, r4
 8005232:	f7ff ff59 	bl	80050e8 <__sflush_r>
 8005236:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005238:	07da      	lsls	r2, r3, #31
 800523a:	4605      	mov	r5, r0
 800523c:	d4e0      	bmi.n	8005200 <_fflush_r+0xc>
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	059b      	lsls	r3, r3, #22
 8005242:	d4dd      	bmi.n	8005200 <_fflush_r+0xc>
 8005244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005246:	f000 f908 	bl	800545a <__retarget_lock_release_recursive>
 800524a:	e7d9      	b.n	8005200 <_fflush_r+0xc>
 800524c:	4b05      	ldr	r3, [pc, #20]	; (8005264 <_fflush_r+0x70>)
 800524e:	429c      	cmp	r4, r3
 8005250:	d101      	bne.n	8005256 <_fflush_r+0x62>
 8005252:	68ac      	ldr	r4, [r5, #8]
 8005254:	e7df      	b.n	8005216 <_fflush_r+0x22>
 8005256:	4b04      	ldr	r3, [pc, #16]	; (8005268 <_fflush_r+0x74>)
 8005258:	429c      	cmp	r4, r3
 800525a:	bf08      	it	eq
 800525c:	68ec      	ldreq	r4, [r5, #12]
 800525e:	e7da      	b.n	8005216 <_fflush_r+0x22>
 8005260:	08005944 	.word	0x08005944
 8005264:	08005964 	.word	0x08005964
 8005268:	08005924 	.word	0x08005924

0800526c <std>:
 800526c:	2300      	movs	r3, #0
 800526e:	b510      	push	{r4, lr}
 8005270:	4604      	mov	r4, r0
 8005272:	e9c0 3300 	strd	r3, r3, [r0]
 8005276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800527a:	6083      	str	r3, [r0, #8]
 800527c:	8181      	strh	r1, [r0, #12]
 800527e:	6643      	str	r3, [r0, #100]	; 0x64
 8005280:	81c2      	strh	r2, [r0, #14]
 8005282:	6183      	str	r3, [r0, #24]
 8005284:	4619      	mov	r1, r3
 8005286:	2208      	movs	r2, #8
 8005288:	305c      	adds	r0, #92	; 0x5c
 800528a:	f7ff fdef 	bl	8004e6c <memset>
 800528e:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <std+0x38>)
 8005290:	6263      	str	r3, [r4, #36]	; 0x24
 8005292:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <std+0x3c>)
 8005294:	62a3      	str	r3, [r4, #40]	; 0x28
 8005296:	4b05      	ldr	r3, [pc, #20]	; (80052ac <std+0x40>)
 8005298:	62e3      	str	r3, [r4, #44]	; 0x2c
 800529a:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <std+0x44>)
 800529c:	6224      	str	r4, [r4, #32]
 800529e:	6323      	str	r3, [r4, #48]	; 0x30
 80052a0:	bd10      	pop	{r4, pc}
 80052a2:	bf00      	nop
 80052a4:	08005709 	.word	0x08005709
 80052a8:	0800572b 	.word	0x0800572b
 80052ac:	08005763 	.word	0x08005763
 80052b0:	08005787 	.word	0x08005787

080052b4 <_cleanup_r>:
 80052b4:	4901      	ldr	r1, [pc, #4]	; (80052bc <_cleanup_r+0x8>)
 80052b6:	f000 b8af 	b.w	8005418 <_fwalk_reent>
 80052ba:	bf00      	nop
 80052bc:	080051f5 	.word	0x080051f5

080052c0 <__sfmoreglue>:
 80052c0:	b570      	push	{r4, r5, r6, lr}
 80052c2:	2268      	movs	r2, #104	; 0x68
 80052c4:	1e4d      	subs	r5, r1, #1
 80052c6:	4355      	muls	r5, r2
 80052c8:	460e      	mov	r6, r1
 80052ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80052ce:	f000 f997 	bl	8005600 <_malloc_r>
 80052d2:	4604      	mov	r4, r0
 80052d4:	b140      	cbz	r0, 80052e8 <__sfmoreglue+0x28>
 80052d6:	2100      	movs	r1, #0
 80052d8:	e9c0 1600 	strd	r1, r6, [r0]
 80052dc:	300c      	adds	r0, #12
 80052de:	60a0      	str	r0, [r4, #8]
 80052e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80052e4:	f7ff fdc2 	bl	8004e6c <memset>
 80052e8:	4620      	mov	r0, r4
 80052ea:	bd70      	pop	{r4, r5, r6, pc}

080052ec <__sfp_lock_acquire>:
 80052ec:	4801      	ldr	r0, [pc, #4]	; (80052f4 <__sfp_lock_acquire+0x8>)
 80052ee:	f000 b8b3 	b.w	8005458 <__retarget_lock_acquire_recursive>
 80052f2:	bf00      	nop
 80052f4:	24004a41 	.word	0x24004a41

080052f8 <__sfp_lock_release>:
 80052f8:	4801      	ldr	r0, [pc, #4]	; (8005300 <__sfp_lock_release+0x8>)
 80052fa:	f000 b8ae 	b.w	800545a <__retarget_lock_release_recursive>
 80052fe:	bf00      	nop
 8005300:	24004a41 	.word	0x24004a41

08005304 <__sinit_lock_acquire>:
 8005304:	4801      	ldr	r0, [pc, #4]	; (800530c <__sinit_lock_acquire+0x8>)
 8005306:	f000 b8a7 	b.w	8005458 <__retarget_lock_acquire_recursive>
 800530a:	bf00      	nop
 800530c:	24004a42 	.word	0x24004a42

08005310 <__sinit_lock_release>:
 8005310:	4801      	ldr	r0, [pc, #4]	; (8005318 <__sinit_lock_release+0x8>)
 8005312:	f000 b8a2 	b.w	800545a <__retarget_lock_release_recursive>
 8005316:	bf00      	nop
 8005318:	24004a42 	.word	0x24004a42

0800531c <__sinit>:
 800531c:	b510      	push	{r4, lr}
 800531e:	4604      	mov	r4, r0
 8005320:	f7ff fff0 	bl	8005304 <__sinit_lock_acquire>
 8005324:	69a3      	ldr	r3, [r4, #24]
 8005326:	b11b      	cbz	r3, 8005330 <__sinit+0x14>
 8005328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800532c:	f7ff bff0 	b.w	8005310 <__sinit_lock_release>
 8005330:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005334:	6523      	str	r3, [r4, #80]	; 0x50
 8005336:	4b13      	ldr	r3, [pc, #76]	; (8005384 <__sinit+0x68>)
 8005338:	4a13      	ldr	r2, [pc, #76]	; (8005388 <__sinit+0x6c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	62a2      	str	r2, [r4, #40]	; 0x28
 800533e:	42a3      	cmp	r3, r4
 8005340:	bf04      	itt	eq
 8005342:	2301      	moveq	r3, #1
 8005344:	61a3      	streq	r3, [r4, #24]
 8005346:	4620      	mov	r0, r4
 8005348:	f000 f820 	bl	800538c <__sfp>
 800534c:	6060      	str	r0, [r4, #4]
 800534e:	4620      	mov	r0, r4
 8005350:	f000 f81c 	bl	800538c <__sfp>
 8005354:	60a0      	str	r0, [r4, #8]
 8005356:	4620      	mov	r0, r4
 8005358:	f000 f818 	bl	800538c <__sfp>
 800535c:	2200      	movs	r2, #0
 800535e:	60e0      	str	r0, [r4, #12]
 8005360:	2104      	movs	r1, #4
 8005362:	6860      	ldr	r0, [r4, #4]
 8005364:	f7ff ff82 	bl	800526c <std>
 8005368:	68a0      	ldr	r0, [r4, #8]
 800536a:	2201      	movs	r2, #1
 800536c:	2109      	movs	r1, #9
 800536e:	f7ff ff7d 	bl	800526c <std>
 8005372:	68e0      	ldr	r0, [r4, #12]
 8005374:	2202      	movs	r2, #2
 8005376:	2112      	movs	r1, #18
 8005378:	f7ff ff78 	bl	800526c <std>
 800537c:	2301      	movs	r3, #1
 800537e:	61a3      	str	r3, [r4, #24]
 8005380:	e7d2      	b.n	8005328 <__sinit+0xc>
 8005382:	bf00      	nop
 8005384:	08005920 	.word	0x08005920
 8005388:	080052b5 	.word	0x080052b5

0800538c <__sfp>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	4607      	mov	r7, r0
 8005390:	f7ff ffac 	bl	80052ec <__sfp_lock_acquire>
 8005394:	4b1e      	ldr	r3, [pc, #120]	; (8005410 <__sfp+0x84>)
 8005396:	681e      	ldr	r6, [r3, #0]
 8005398:	69b3      	ldr	r3, [r6, #24]
 800539a:	b913      	cbnz	r3, 80053a2 <__sfp+0x16>
 800539c:	4630      	mov	r0, r6
 800539e:	f7ff ffbd 	bl	800531c <__sinit>
 80053a2:	3648      	adds	r6, #72	; 0x48
 80053a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	d503      	bpl.n	80053b4 <__sfp+0x28>
 80053ac:	6833      	ldr	r3, [r6, #0]
 80053ae:	b30b      	cbz	r3, 80053f4 <__sfp+0x68>
 80053b0:	6836      	ldr	r6, [r6, #0]
 80053b2:	e7f7      	b.n	80053a4 <__sfp+0x18>
 80053b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80053b8:	b9d5      	cbnz	r5, 80053f0 <__sfp+0x64>
 80053ba:	4b16      	ldr	r3, [pc, #88]	; (8005414 <__sfp+0x88>)
 80053bc:	60e3      	str	r3, [r4, #12]
 80053be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80053c2:	6665      	str	r5, [r4, #100]	; 0x64
 80053c4:	f000 f847 	bl	8005456 <__retarget_lock_init_recursive>
 80053c8:	f7ff ff96 	bl	80052f8 <__sfp_lock_release>
 80053cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80053d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80053d4:	6025      	str	r5, [r4, #0]
 80053d6:	61a5      	str	r5, [r4, #24]
 80053d8:	2208      	movs	r2, #8
 80053da:	4629      	mov	r1, r5
 80053dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80053e0:	f7ff fd44 	bl	8004e6c <memset>
 80053e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80053e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80053ec:	4620      	mov	r0, r4
 80053ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053f0:	3468      	adds	r4, #104	; 0x68
 80053f2:	e7d9      	b.n	80053a8 <__sfp+0x1c>
 80053f4:	2104      	movs	r1, #4
 80053f6:	4638      	mov	r0, r7
 80053f8:	f7ff ff62 	bl	80052c0 <__sfmoreglue>
 80053fc:	4604      	mov	r4, r0
 80053fe:	6030      	str	r0, [r6, #0]
 8005400:	2800      	cmp	r0, #0
 8005402:	d1d5      	bne.n	80053b0 <__sfp+0x24>
 8005404:	f7ff ff78 	bl	80052f8 <__sfp_lock_release>
 8005408:	230c      	movs	r3, #12
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	e7ee      	b.n	80053ec <__sfp+0x60>
 800540e:	bf00      	nop
 8005410:	08005920 	.word	0x08005920
 8005414:	ffff0001 	.word	0xffff0001

08005418 <_fwalk_reent>:
 8005418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800541c:	4606      	mov	r6, r0
 800541e:	4688      	mov	r8, r1
 8005420:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005424:	2700      	movs	r7, #0
 8005426:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800542a:	f1b9 0901 	subs.w	r9, r9, #1
 800542e:	d505      	bpl.n	800543c <_fwalk_reent+0x24>
 8005430:	6824      	ldr	r4, [r4, #0]
 8005432:	2c00      	cmp	r4, #0
 8005434:	d1f7      	bne.n	8005426 <_fwalk_reent+0xe>
 8005436:	4638      	mov	r0, r7
 8005438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800543c:	89ab      	ldrh	r3, [r5, #12]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d907      	bls.n	8005452 <_fwalk_reent+0x3a>
 8005442:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005446:	3301      	adds	r3, #1
 8005448:	d003      	beq.n	8005452 <_fwalk_reent+0x3a>
 800544a:	4629      	mov	r1, r5
 800544c:	4630      	mov	r0, r6
 800544e:	47c0      	blx	r8
 8005450:	4307      	orrs	r7, r0
 8005452:	3568      	adds	r5, #104	; 0x68
 8005454:	e7e9      	b.n	800542a <_fwalk_reent+0x12>

08005456 <__retarget_lock_init_recursive>:
 8005456:	4770      	bx	lr

08005458 <__retarget_lock_acquire_recursive>:
 8005458:	4770      	bx	lr

0800545a <__retarget_lock_release_recursive>:
 800545a:	4770      	bx	lr

0800545c <__swhatbuf_r>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	460e      	mov	r6, r1
 8005460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005464:	2900      	cmp	r1, #0
 8005466:	b096      	sub	sp, #88	; 0x58
 8005468:	4614      	mov	r4, r2
 800546a:	461d      	mov	r5, r3
 800546c:	da08      	bge.n	8005480 <__swhatbuf_r+0x24>
 800546e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	602a      	str	r2, [r5, #0]
 8005476:	061a      	lsls	r2, r3, #24
 8005478:	d410      	bmi.n	800549c <__swhatbuf_r+0x40>
 800547a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800547e:	e00e      	b.n	800549e <__swhatbuf_r+0x42>
 8005480:	466a      	mov	r2, sp
 8005482:	f000 f9a7 	bl	80057d4 <_fstat_r>
 8005486:	2800      	cmp	r0, #0
 8005488:	dbf1      	blt.n	800546e <__swhatbuf_r+0x12>
 800548a:	9a01      	ldr	r2, [sp, #4]
 800548c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005490:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005494:	425a      	negs	r2, r3
 8005496:	415a      	adcs	r2, r3
 8005498:	602a      	str	r2, [r5, #0]
 800549a:	e7ee      	b.n	800547a <__swhatbuf_r+0x1e>
 800549c:	2340      	movs	r3, #64	; 0x40
 800549e:	2000      	movs	r0, #0
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	b016      	add	sp, #88	; 0x58
 80054a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080054a8 <__smakebuf_r>:
 80054a8:	898b      	ldrh	r3, [r1, #12]
 80054aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054ac:	079d      	lsls	r5, r3, #30
 80054ae:	4606      	mov	r6, r0
 80054b0:	460c      	mov	r4, r1
 80054b2:	d507      	bpl.n	80054c4 <__smakebuf_r+0x1c>
 80054b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	6123      	str	r3, [r4, #16]
 80054bc:	2301      	movs	r3, #1
 80054be:	6163      	str	r3, [r4, #20]
 80054c0:	b002      	add	sp, #8
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
 80054c4:	ab01      	add	r3, sp, #4
 80054c6:	466a      	mov	r2, sp
 80054c8:	f7ff ffc8 	bl	800545c <__swhatbuf_r>
 80054cc:	9900      	ldr	r1, [sp, #0]
 80054ce:	4605      	mov	r5, r0
 80054d0:	4630      	mov	r0, r6
 80054d2:	f000 f895 	bl	8005600 <_malloc_r>
 80054d6:	b948      	cbnz	r0, 80054ec <__smakebuf_r+0x44>
 80054d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054dc:	059a      	lsls	r2, r3, #22
 80054de:	d4ef      	bmi.n	80054c0 <__smakebuf_r+0x18>
 80054e0:	f023 0303 	bic.w	r3, r3, #3
 80054e4:	f043 0302 	orr.w	r3, r3, #2
 80054e8:	81a3      	strh	r3, [r4, #12]
 80054ea:	e7e3      	b.n	80054b4 <__smakebuf_r+0xc>
 80054ec:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <__smakebuf_r+0x7c>)
 80054ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	6020      	str	r0, [r4, #0]
 80054f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f8:	81a3      	strh	r3, [r4, #12]
 80054fa:	9b00      	ldr	r3, [sp, #0]
 80054fc:	6163      	str	r3, [r4, #20]
 80054fe:	9b01      	ldr	r3, [sp, #4]
 8005500:	6120      	str	r0, [r4, #16]
 8005502:	b15b      	cbz	r3, 800551c <__smakebuf_r+0x74>
 8005504:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005508:	4630      	mov	r0, r6
 800550a:	f000 f975 	bl	80057f8 <_isatty_r>
 800550e:	b128      	cbz	r0, 800551c <__smakebuf_r+0x74>
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	f023 0303 	bic.w	r3, r3, #3
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	81a3      	strh	r3, [r4, #12]
 800551c:	89a0      	ldrh	r0, [r4, #12]
 800551e:	4305      	orrs	r5, r0
 8005520:	81a5      	strh	r5, [r4, #12]
 8005522:	e7cd      	b.n	80054c0 <__smakebuf_r+0x18>
 8005524:	080052b5 	.word	0x080052b5

08005528 <_free_r>:
 8005528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800552a:	2900      	cmp	r1, #0
 800552c:	d044      	beq.n	80055b8 <_free_r+0x90>
 800552e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005532:	9001      	str	r0, [sp, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	f1a1 0404 	sub.w	r4, r1, #4
 800553a:	bfb8      	it	lt
 800553c:	18e4      	addlt	r4, r4, r3
 800553e:	f000 f97d 	bl	800583c <__malloc_lock>
 8005542:	4a1e      	ldr	r2, [pc, #120]	; (80055bc <_free_r+0x94>)
 8005544:	9801      	ldr	r0, [sp, #4]
 8005546:	6813      	ldr	r3, [r2, #0]
 8005548:	b933      	cbnz	r3, 8005558 <_free_r+0x30>
 800554a:	6063      	str	r3, [r4, #4]
 800554c:	6014      	str	r4, [r2, #0]
 800554e:	b003      	add	sp, #12
 8005550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005554:	f000 b978 	b.w	8005848 <__malloc_unlock>
 8005558:	42a3      	cmp	r3, r4
 800555a:	d908      	bls.n	800556e <_free_r+0x46>
 800555c:	6825      	ldr	r5, [r4, #0]
 800555e:	1961      	adds	r1, r4, r5
 8005560:	428b      	cmp	r3, r1
 8005562:	bf01      	itttt	eq
 8005564:	6819      	ldreq	r1, [r3, #0]
 8005566:	685b      	ldreq	r3, [r3, #4]
 8005568:	1949      	addeq	r1, r1, r5
 800556a:	6021      	streq	r1, [r4, #0]
 800556c:	e7ed      	b.n	800554a <_free_r+0x22>
 800556e:	461a      	mov	r2, r3
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	b10b      	cbz	r3, 8005578 <_free_r+0x50>
 8005574:	42a3      	cmp	r3, r4
 8005576:	d9fa      	bls.n	800556e <_free_r+0x46>
 8005578:	6811      	ldr	r1, [r2, #0]
 800557a:	1855      	adds	r5, r2, r1
 800557c:	42a5      	cmp	r5, r4
 800557e:	d10b      	bne.n	8005598 <_free_r+0x70>
 8005580:	6824      	ldr	r4, [r4, #0]
 8005582:	4421      	add	r1, r4
 8005584:	1854      	adds	r4, r2, r1
 8005586:	42a3      	cmp	r3, r4
 8005588:	6011      	str	r1, [r2, #0]
 800558a:	d1e0      	bne.n	800554e <_free_r+0x26>
 800558c:	681c      	ldr	r4, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	6053      	str	r3, [r2, #4]
 8005592:	4421      	add	r1, r4
 8005594:	6011      	str	r1, [r2, #0]
 8005596:	e7da      	b.n	800554e <_free_r+0x26>
 8005598:	d902      	bls.n	80055a0 <_free_r+0x78>
 800559a:	230c      	movs	r3, #12
 800559c:	6003      	str	r3, [r0, #0]
 800559e:	e7d6      	b.n	800554e <_free_r+0x26>
 80055a0:	6825      	ldr	r5, [r4, #0]
 80055a2:	1961      	adds	r1, r4, r5
 80055a4:	428b      	cmp	r3, r1
 80055a6:	bf04      	itt	eq
 80055a8:	6819      	ldreq	r1, [r3, #0]
 80055aa:	685b      	ldreq	r3, [r3, #4]
 80055ac:	6063      	str	r3, [r4, #4]
 80055ae:	bf04      	itt	eq
 80055b0:	1949      	addeq	r1, r1, r5
 80055b2:	6021      	streq	r1, [r4, #0]
 80055b4:	6054      	str	r4, [r2, #4]
 80055b6:	e7ca      	b.n	800554e <_free_r+0x26>
 80055b8:	b003      	add	sp, #12
 80055ba:	bd30      	pop	{r4, r5, pc}
 80055bc:	24004a44 	.word	0x24004a44

080055c0 <sbrk_aligned>:
 80055c0:	b570      	push	{r4, r5, r6, lr}
 80055c2:	4e0e      	ldr	r6, [pc, #56]	; (80055fc <sbrk_aligned+0x3c>)
 80055c4:	460c      	mov	r4, r1
 80055c6:	6831      	ldr	r1, [r6, #0]
 80055c8:	4605      	mov	r5, r0
 80055ca:	b911      	cbnz	r1, 80055d2 <sbrk_aligned+0x12>
 80055cc:	f000 f88c 	bl	80056e8 <_sbrk_r>
 80055d0:	6030      	str	r0, [r6, #0]
 80055d2:	4621      	mov	r1, r4
 80055d4:	4628      	mov	r0, r5
 80055d6:	f000 f887 	bl	80056e8 <_sbrk_r>
 80055da:	1c43      	adds	r3, r0, #1
 80055dc:	d00a      	beq.n	80055f4 <sbrk_aligned+0x34>
 80055de:	1cc4      	adds	r4, r0, #3
 80055e0:	f024 0403 	bic.w	r4, r4, #3
 80055e4:	42a0      	cmp	r0, r4
 80055e6:	d007      	beq.n	80055f8 <sbrk_aligned+0x38>
 80055e8:	1a21      	subs	r1, r4, r0
 80055ea:	4628      	mov	r0, r5
 80055ec:	f000 f87c 	bl	80056e8 <_sbrk_r>
 80055f0:	3001      	adds	r0, #1
 80055f2:	d101      	bne.n	80055f8 <sbrk_aligned+0x38>
 80055f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80055f8:	4620      	mov	r0, r4
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
 80055fc:	24004a48 	.word	0x24004a48

08005600 <_malloc_r>:
 8005600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005604:	1ccd      	adds	r5, r1, #3
 8005606:	f025 0503 	bic.w	r5, r5, #3
 800560a:	3508      	adds	r5, #8
 800560c:	2d0c      	cmp	r5, #12
 800560e:	bf38      	it	cc
 8005610:	250c      	movcc	r5, #12
 8005612:	2d00      	cmp	r5, #0
 8005614:	4607      	mov	r7, r0
 8005616:	db01      	blt.n	800561c <_malloc_r+0x1c>
 8005618:	42a9      	cmp	r1, r5
 800561a:	d905      	bls.n	8005628 <_malloc_r+0x28>
 800561c:	230c      	movs	r3, #12
 800561e:	603b      	str	r3, [r7, #0]
 8005620:	2600      	movs	r6, #0
 8005622:	4630      	mov	r0, r6
 8005624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005628:	4e2e      	ldr	r6, [pc, #184]	; (80056e4 <_malloc_r+0xe4>)
 800562a:	f000 f907 	bl	800583c <__malloc_lock>
 800562e:	6833      	ldr	r3, [r6, #0]
 8005630:	461c      	mov	r4, r3
 8005632:	bb34      	cbnz	r4, 8005682 <_malloc_r+0x82>
 8005634:	4629      	mov	r1, r5
 8005636:	4638      	mov	r0, r7
 8005638:	f7ff ffc2 	bl	80055c0 <sbrk_aligned>
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	4604      	mov	r4, r0
 8005640:	d14d      	bne.n	80056de <_malloc_r+0xde>
 8005642:	6834      	ldr	r4, [r6, #0]
 8005644:	4626      	mov	r6, r4
 8005646:	2e00      	cmp	r6, #0
 8005648:	d140      	bne.n	80056cc <_malloc_r+0xcc>
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	4631      	mov	r1, r6
 800564e:	4638      	mov	r0, r7
 8005650:	eb04 0803 	add.w	r8, r4, r3
 8005654:	f000 f848 	bl	80056e8 <_sbrk_r>
 8005658:	4580      	cmp	r8, r0
 800565a:	d13a      	bne.n	80056d2 <_malloc_r+0xd2>
 800565c:	6821      	ldr	r1, [r4, #0]
 800565e:	3503      	adds	r5, #3
 8005660:	1a6d      	subs	r5, r5, r1
 8005662:	f025 0503 	bic.w	r5, r5, #3
 8005666:	3508      	adds	r5, #8
 8005668:	2d0c      	cmp	r5, #12
 800566a:	bf38      	it	cc
 800566c:	250c      	movcc	r5, #12
 800566e:	4629      	mov	r1, r5
 8005670:	4638      	mov	r0, r7
 8005672:	f7ff ffa5 	bl	80055c0 <sbrk_aligned>
 8005676:	3001      	adds	r0, #1
 8005678:	d02b      	beq.n	80056d2 <_malloc_r+0xd2>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	442b      	add	r3, r5
 800567e:	6023      	str	r3, [r4, #0]
 8005680:	e00e      	b.n	80056a0 <_malloc_r+0xa0>
 8005682:	6822      	ldr	r2, [r4, #0]
 8005684:	1b52      	subs	r2, r2, r5
 8005686:	d41e      	bmi.n	80056c6 <_malloc_r+0xc6>
 8005688:	2a0b      	cmp	r2, #11
 800568a:	d916      	bls.n	80056ba <_malloc_r+0xba>
 800568c:	1961      	adds	r1, r4, r5
 800568e:	42a3      	cmp	r3, r4
 8005690:	6025      	str	r5, [r4, #0]
 8005692:	bf18      	it	ne
 8005694:	6059      	strne	r1, [r3, #4]
 8005696:	6863      	ldr	r3, [r4, #4]
 8005698:	bf08      	it	eq
 800569a:	6031      	streq	r1, [r6, #0]
 800569c:	5162      	str	r2, [r4, r5]
 800569e:	604b      	str	r3, [r1, #4]
 80056a0:	4638      	mov	r0, r7
 80056a2:	f104 060b 	add.w	r6, r4, #11
 80056a6:	f000 f8cf 	bl	8005848 <__malloc_unlock>
 80056aa:	f026 0607 	bic.w	r6, r6, #7
 80056ae:	1d23      	adds	r3, r4, #4
 80056b0:	1af2      	subs	r2, r6, r3
 80056b2:	d0b6      	beq.n	8005622 <_malloc_r+0x22>
 80056b4:	1b9b      	subs	r3, r3, r6
 80056b6:	50a3      	str	r3, [r4, r2]
 80056b8:	e7b3      	b.n	8005622 <_malloc_r+0x22>
 80056ba:	6862      	ldr	r2, [r4, #4]
 80056bc:	42a3      	cmp	r3, r4
 80056be:	bf0c      	ite	eq
 80056c0:	6032      	streq	r2, [r6, #0]
 80056c2:	605a      	strne	r2, [r3, #4]
 80056c4:	e7ec      	b.n	80056a0 <_malloc_r+0xa0>
 80056c6:	4623      	mov	r3, r4
 80056c8:	6864      	ldr	r4, [r4, #4]
 80056ca:	e7b2      	b.n	8005632 <_malloc_r+0x32>
 80056cc:	4634      	mov	r4, r6
 80056ce:	6876      	ldr	r6, [r6, #4]
 80056d0:	e7b9      	b.n	8005646 <_malloc_r+0x46>
 80056d2:	230c      	movs	r3, #12
 80056d4:	603b      	str	r3, [r7, #0]
 80056d6:	4638      	mov	r0, r7
 80056d8:	f000 f8b6 	bl	8005848 <__malloc_unlock>
 80056dc:	e7a1      	b.n	8005622 <_malloc_r+0x22>
 80056de:	6025      	str	r5, [r4, #0]
 80056e0:	e7de      	b.n	80056a0 <_malloc_r+0xa0>
 80056e2:	bf00      	nop
 80056e4:	24004a44 	.word	0x24004a44

080056e8 <_sbrk_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	4d06      	ldr	r5, [pc, #24]	; (8005704 <_sbrk_r+0x1c>)
 80056ec:	2300      	movs	r3, #0
 80056ee:	4604      	mov	r4, r0
 80056f0:	4608      	mov	r0, r1
 80056f2:	602b      	str	r3, [r5, #0]
 80056f4:	f7fb f828 	bl	8000748 <_sbrk>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d102      	bne.n	8005702 <_sbrk_r+0x1a>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	b103      	cbz	r3, 8005702 <_sbrk_r+0x1a>
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	bd38      	pop	{r3, r4, r5, pc}
 8005704:	24004a4c 	.word	0x24004a4c

08005708 <__sread>:
 8005708:	b510      	push	{r4, lr}
 800570a:	460c      	mov	r4, r1
 800570c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005710:	f000 f8a0 	bl	8005854 <_read_r>
 8005714:	2800      	cmp	r0, #0
 8005716:	bfab      	itete	ge
 8005718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800571a:	89a3      	ldrhlt	r3, [r4, #12]
 800571c:	181b      	addge	r3, r3, r0
 800571e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005722:	bfac      	ite	ge
 8005724:	6563      	strge	r3, [r4, #84]	; 0x54
 8005726:	81a3      	strhlt	r3, [r4, #12]
 8005728:	bd10      	pop	{r4, pc}

0800572a <__swrite>:
 800572a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800572e:	461f      	mov	r7, r3
 8005730:	898b      	ldrh	r3, [r1, #12]
 8005732:	05db      	lsls	r3, r3, #23
 8005734:	4605      	mov	r5, r0
 8005736:	460c      	mov	r4, r1
 8005738:	4616      	mov	r6, r2
 800573a:	d505      	bpl.n	8005748 <__swrite+0x1e>
 800573c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005740:	2302      	movs	r3, #2
 8005742:	2200      	movs	r2, #0
 8005744:	f000 f868 	bl	8005818 <_lseek_r>
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800574e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005752:	81a3      	strh	r3, [r4, #12]
 8005754:	4632      	mov	r2, r6
 8005756:	463b      	mov	r3, r7
 8005758:	4628      	mov	r0, r5
 800575a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800575e:	f000 b817 	b.w	8005790 <_write_r>

08005762 <__sseek>:
 8005762:	b510      	push	{r4, lr}
 8005764:	460c      	mov	r4, r1
 8005766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800576a:	f000 f855 	bl	8005818 <_lseek_r>
 800576e:	1c43      	adds	r3, r0, #1
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	bf15      	itete	ne
 8005774:	6560      	strne	r0, [r4, #84]	; 0x54
 8005776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800577a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800577e:	81a3      	strheq	r3, [r4, #12]
 8005780:	bf18      	it	ne
 8005782:	81a3      	strhne	r3, [r4, #12]
 8005784:	bd10      	pop	{r4, pc}

08005786 <__sclose>:
 8005786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800578a:	f000 b813 	b.w	80057b4 <_close_r>
	...

08005790 <_write_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4d07      	ldr	r5, [pc, #28]	; (80057b0 <_write_r+0x20>)
 8005794:	4604      	mov	r4, r0
 8005796:	4608      	mov	r0, r1
 8005798:	4611      	mov	r1, r2
 800579a:	2200      	movs	r2, #0
 800579c:	602a      	str	r2, [r5, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	f7fa ff81 	bl	80006a6 <_write>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d102      	bne.n	80057ae <_write_r+0x1e>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	b103      	cbz	r3, 80057ae <_write_r+0x1e>
 80057ac:	6023      	str	r3, [r4, #0]
 80057ae:	bd38      	pop	{r3, r4, r5, pc}
 80057b0:	24004a4c 	.word	0x24004a4c

080057b4 <_close_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	4d06      	ldr	r5, [pc, #24]	; (80057d0 <_close_r+0x1c>)
 80057b8:	2300      	movs	r3, #0
 80057ba:	4604      	mov	r4, r0
 80057bc:	4608      	mov	r0, r1
 80057be:	602b      	str	r3, [r5, #0]
 80057c0:	f7fa ff8d 	bl	80006de <_close>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	d102      	bne.n	80057ce <_close_r+0x1a>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	b103      	cbz	r3, 80057ce <_close_r+0x1a>
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
 80057d0:	24004a4c 	.word	0x24004a4c

080057d4 <_fstat_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4d07      	ldr	r5, [pc, #28]	; (80057f4 <_fstat_r+0x20>)
 80057d8:	2300      	movs	r3, #0
 80057da:	4604      	mov	r4, r0
 80057dc:	4608      	mov	r0, r1
 80057de:	4611      	mov	r1, r2
 80057e0:	602b      	str	r3, [r5, #0]
 80057e2:	f7fa ff88 	bl	80006f6 <_fstat>
 80057e6:	1c43      	adds	r3, r0, #1
 80057e8:	d102      	bne.n	80057f0 <_fstat_r+0x1c>
 80057ea:	682b      	ldr	r3, [r5, #0]
 80057ec:	b103      	cbz	r3, 80057f0 <_fstat_r+0x1c>
 80057ee:	6023      	str	r3, [r4, #0]
 80057f0:	bd38      	pop	{r3, r4, r5, pc}
 80057f2:	bf00      	nop
 80057f4:	24004a4c 	.word	0x24004a4c

080057f8 <_isatty_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	4d06      	ldr	r5, [pc, #24]	; (8005814 <_isatty_r+0x1c>)
 80057fc:	2300      	movs	r3, #0
 80057fe:	4604      	mov	r4, r0
 8005800:	4608      	mov	r0, r1
 8005802:	602b      	str	r3, [r5, #0]
 8005804:	f7fa ff87 	bl	8000716 <_isatty>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d102      	bne.n	8005812 <_isatty_r+0x1a>
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	b103      	cbz	r3, 8005812 <_isatty_r+0x1a>
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	bd38      	pop	{r3, r4, r5, pc}
 8005814:	24004a4c 	.word	0x24004a4c

08005818 <_lseek_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4d07      	ldr	r5, [pc, #28]	; (8005838 <_lseek_r+0x20>)
 800581c:	4604      	mov	r4, r0
 800581e:	4608      	mov	r0, r1
 8005820:	4611      	mov	r1, r2
 8005822:	2200      	movs	r2, #0
 8005824:	602a      	str	r2, [r5, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	f7fa ff80 	bl	800072c <_lseek>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d102      	bne.n	8005836 <_lseek_r+0x1e>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	b103      	cbz	r3, 8005836 <_lseek_r+0x1e>
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	bd38      	pop	{r3, r4, r5, pc}
 8005838:	24004a4c 	.word	0x24004a4c

0800583c <__malloc_lock>:
 800583c:	4801      	ldr	r0, [pc, #4]	; (8005844 <__malloc_lock+0x8>)
 800583e:	f7ff be0b 	b.w	8005458 <__retarget_lock_acquire_recursive>
 8005842:	bf00      	nop
 8005844:	24004a40 	.word	0x24004a40

08005848 <__malloc_unlock>:
 8005848:	4801      	ldr	r0, [pc, #4]	; (8005850 <__malloc_unlock+0x8>)
 800584a:	f7ff be06 	b.w	800545a <__retarget_lock_release_recursive>
 800584e:	bf00      	nop
 8005850:	24004a40 	.word	0x24004a40

08005854 <_read_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	4d07      	ldr	r5, [pc, #28]	; (8005874 <_read_r+0x20>)
 8005858:	4604      	mov	r4, r0
 800585a:	4608      	mov	r0, r1
 800585c:	4611      	mov	r1, r2
 800585e:	2200      	movs	r2, #0
 8005860:	602a      	str	r2, [r5, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	f7fa ff02 	bl	800066c <_read>
 8005868:	1c43      	adds	r3, r0, #1
 800586a:	d102      	bne.n	8005872 <_read_r+0x1e>
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	b103      	cbz	r3, 8005872 <_read_r+0x1e>
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	bd38      	pop	{r3, r4, r5, pc}
 8005874:	24004a4c 	.word	0x24004a4c

08005878 <_init>:
 8005878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800587a:	bf00      	nop
 800587c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587e:	bc08      	pop	{r3}
 8005880:	469e      	mov	lr, r3
 8005882:	4770      	bx	lr

08005884 <_fini>:
 8005884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005886:	bf00      	nop
 8005888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588a:	bc08      	pop	{r3}
 800588c:	469e      	mov	lr, r3
 800588e:	4770      	bx	lr
